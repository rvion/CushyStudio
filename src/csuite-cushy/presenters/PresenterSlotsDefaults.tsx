import type { PresenterSlots } from './PresenterSlots'

import { WidgetBodyContainerUI } from '../WidgetBodyContainerUI'
import { WidgetDebugIDUI } from '../WidgetDebugIDUI'
import { WidgetErrorsUI } from '../WidgetErrorsUI'
import { WidgetHeaderContainerUI } from '../WidgetHeaderContainerUI'
import { WidgetIndentUI } from '../WidgetIndentUI'
import { WidgetLabelCaretUI } from '../WidgetLabelCaretUI'
import { WidgetLabelIconUI } from '../WidgetLabelIconUI'
import { WidgetLabelTextUI } from '../WidgetLabelTextUI'
import { WidgetPresetsUI } from '../WidgetPresets'
import { WidgetSingleLineSummaryUI } from '../WidgetSingleLineSummaryUI'
import { WidgetToggleUI } from '../WidgetToggleUI'
import { WidgetUndoChangesButtonUI } from '../WidgetUndoChangesButtonUI'

/** global */

export const configureDefaultFieldPresenterComponents = (
    /** so you don't have to polute the rest of your code */
    overrides: Partial<PresenterSlots>,
): void => {
    Object.assign(defaultPresenterSlots, overrides)
}

export const defaultPresenterSlots: PresenterSlots = {
    // heavilly suggested to include in your presenter unless you know what you do
    /* âœ… */ Header: undefined, // will be injected by the field
    /* âœ… */ Body: undefined, // will be injected by the field

    /* ðŸŸ¢ */ DragKnob: undefined,
    /* ðŸŸ¢ */ Errors: WidgetErrorsUI,
    /* ðŸŸ¢ */ LabelText: WidgetLabelTextUI,

    // bonus features
    /* ðŸŸ¡ */ Indent: WidgetIndentUI,
    /* ðŸŸ¡ */ UndoBtn: WidgetUndoChangesButtonUI,
    /* ðŸŸ¡ */ Toogle: WidgetToggleUI,
    /* ðŸŸ¡ */ Caret: WidgetLabelCaretUI,
    /* ðŸŸ¡ */ Icon: WidgetLabelIconUI,
    /* ðŸŸ¡ */ Presets: WidgetPresetsUI,

    // suggested containers
    /* ðŸŸ  */ ContainerForHeader: WidgetHeaderContainerUI,
    /* ðŸŸ  */ ContainerForBody: WidgetBodyContainerUI,
    /* ðŸŸ  */ ContainerForSummary: WidgetSingleLineSummaryUI,

    // stuff you probably don't want to include
    // debug stuff
    /* ðŸŸ£ */ DebugID: WidgetDebugIDUI,

    // only for the lolz
    /* ðŸŸ¥ */ EasterEgg: (): JSX.Element => <>ðŸ¥š</>,
}
