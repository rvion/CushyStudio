
I wanted a typescript script that add  every single missing type annotations in my codebase.
   Took me 1+h and 20+ prompts and manual adjustments to get there.
   here are some of the corrections I had to make to stir chatgpt in the correct direction:

-----

I want a typescript script that add  every single missing type annotations in my codebase.

- it must use the tyepscript lib api.
- it must create the ts program once, for the whole folder, not once per file.
- it must skip adding annotations that are too long (more than 4 words including type templates.)
- it must modify the file in place (beware, if more than one modification is needed,
- it must make sure it adjusts every insert position past the first one accordingly when there are more than on;
- it must log annotations you skip in addition to annotations you add
- for functions, it must  only annotate the return types, not the var decl you assign the function to
   - `const x = () => 3` should be annotated `const x = (): 3 => 3`
- it must add a bit more logs so I can keep track of what the script is doing
- it must use chalk and some indentations to nest files  > changes or skip in the logs
- it must not add annotations before the VarName, it should be after
`const : stringline` is invalid
- it must NOT add `any` annotations
   - it must NOT add annotations that contains `any` identifier either:
      - Map<any,any> is invalid too for example
- the script must not add the  annotation too much at the end : const t = T.baseName: string
- the script must skip annotations in for (const ... of ) because The left-hand side of a 'for...of' statement cannot use a type annotation.ts(2483)
- the script must skip annotations in for (const ... in ) because The left-hand side of a 'for...in' statement cannot use a type annotation.ts(2404)
- skipping any annotations should be displayed in red
- the script need to check if type(s) in the added annotation are already imported, and if not, add them.
   - types like string, number do not need an import
   - I have a few globally injected symbols that don't need to be imported, like Maybe, or any stuff starting with Z.
   - when a type is imported, it must be from the relative path to the module containing the type
   - it must import ALL the types in the annotations; not just the global string
      - e.g. `Maybe<string>` => needs to ensure both Maybe and string are availbe (and btw, both are without requireing any import)
- it must add function return type at the proper position (not at the end of the function args list, but after the closing parenthesis)
   - it must also support arrow functions without parens (e.g. add parenthesis, and return time after closing paren)
- it must properly include `strictNullChecks: true` so maps.get(ix) or arr[ix] results are properly typed with `... | undefined`
- it must properly handle the async lambda with defaults
- if the annotations that should be added include Anonymouse class (e.g. like in const S1: SimpleSchema<(Anonymous class)> ) we should just skip with an Error message, like for any
- there is way too many things are typed as any for the script, but are properly typed in my vscode; do I need to include more of my tsconfig ?
- must generate fully qualified types if those are aready available using their fully qualified name (e.g. JSX.Element)