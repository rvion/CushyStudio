{
    "KSampler": {
        "input": {
            "required": {
                "model": ["MODEL",{"tooltip":"The model used for denoising the input latent."}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"The random seed used for creating the noise."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"The number of steps used in the denoising process."}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01,"tooltip":"The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"],{"tooltip":"The scheduler controls how noise is gradually removed to form the image."}]
,               "positive": ["CONDITIONING",{"tooltip":"The conditioning describing the attributes you want to include in the image."}]
,               "negative": ["CONDITIONING",{"tooltip":"The conditioning describing the attributes you want to exclude from the image."}]
,               "latent_image": ["LATENT",{"tooltip":"The latent image to denoise."}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."}]
            }
        }
,       "input_order": {
            "required": ["model","seed","steps","cfg","sampler_name","scheduler","positive","negative","latent_image","denoise"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "KSampler"
,       "display_name": "KSampler"
,       "description": "Uses the provided model, positive and negative conditioning to denoise the latent image."
,       "python_module": "nodes"
,       "category": "sampling"
,       "output_node": false
,       "output_tooltips": ["The denoised latent."]
    }
,   "CheckpointLoaderSimple": {
        "input": {
            "required": {
                "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"],{"tooltip":"The name of the checkpoint (model) to load."}]
            }
        }
,       "input_order": {
            "required": ["ckpt_name"]
        }
,       "output": ["MODEL","CLIP","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP","VAE"]
,       "name": "CheckpointLoaderSimple"
,       "display_name": "Load Checkpoint"
,       "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents."
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
,       "output_tooltips": ["The model used for denoising latents.","The CLIP model used for encoding text prompts.","The VAE model used for encoding and decoding images to and from latent space."]
    }
,   "CLIPTextEncode": {
        "input": {
            "required": {
                "text": ["STRING",{"multiline":true,"dynamicPrompts":true,"tooltip":"The text to be encoded."}]
,               "clip": ["CLIP",{"tooltip":"The CLIP model used for encoding the text."}]
            }
        }
,       "input_order": {
            "required": ["text","clip"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncode"
,       "display_name": "CLIP Text Encode (Prompt)"
,       "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images."
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
,       "output_tooltips": ["A conditioning containing the embedded text used to guide the diffusion model."]
    }
,   "CLIPSetLastLayer": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "stop_at_clip_layer": ["INT",{"default":-1,"min":-24,"max":-1,"step":1}]
            }
        }
,       "input_order": {
            "required": ["clip","stop_at_clip_layer"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPSetLastLayer"
,       "display_name": "CLIP Set Last Layer"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "VAEDecode": {
        "input": {
            "required": {
                "samples": ["LATENT",{"tooltip":"The latent to be decoded."}]
,               "vae": ["VAE",{"tooltip":"The VAE model used for decoding the latent."}]
            }
        }
,       "input_order": {
            "required": ["samples","vae"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "VAEDecode"
,       "display_name": "VAE Decode"
,       "description": "Decodes latent images back into pixel space images."
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
,       "output_tooltips": ["The decoded image."]
    }
,   "VAEEncode": {
        "input": {
            "required": {
                "pixels": ["IMAGE"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["pixels","vae"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "VAEEncode"
,       "display_name": "VAE Encode"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
    }
,   "VAEEncodeForInpaint": {
        "input": {
            "required": {
                "pixels": ["IMAGE"]
,               "vae": ["VAE"]
,               "mask": ["MASK"]
,               "grow_mask_by": ["INT",{"default":6,"min":0,"max":64,"step":1}]
            }
        }
,       "input_order": {
            "required": ["pixels","vae","mask","grow_mask_by"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "VAEEncodeForInpaint"
,       "display_name": "VAE Encode (for Inpainting)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/inpaint"
,       "output_node": false
    }
,   "VAELoader": {
        "input": {
            "required": {
                "vae_name": [["vae-ft-mse-840000-ema-pruned.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["vae_name"]
        }
,       "output": ["VAE"]
,       "output_is_list": [false]
,       "output_name": ["VAE"]
,       "name": "VAELoader"
,       "display_name": "Load VAE"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "EmptyLatentImage": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"min":16,"max":16384,"step":8,"tooltip":"The width of the latent images in pixels."}]
,               "height": ["INT",{"default":512,"min":16,"max":16384,"step":8,"tooltip":"The height of the latent images in pixels."}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096,"tooltip":"The number of latent images in the batch."}]
            }
        }
,       "input_order": {
            "required": ["width","height","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "EmptyLatentImage"
,       "display_name": "Empty Latent Image"
,       "description": "Create a new batch of empty latent images to be denoised via sampling."
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
,       "output_tooltips": ["The empty latent image batch."]
    }
,   "LatentUpscale": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","bislerp"]]
,               "width": ["INT",{"default":512,"min":0,"max":16384,"step":8}]
,               "height": ["INT",{"default":512,"min":0,"max":16384,"step":8}]
,               "crop": [["disabled","center"]]
            }
        }
,       "input_order": {
            "required": ["samples","upscale_method","width","height","crop"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentUpscale"
,       "display_name": "Upscale Latent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
    }
,   "LatentUpscaleBy": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","bislerp"]]
,               "scale_by": ["FLOAT",{"default":1.5,"min":0.01,"max":8,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["samples","upscale_method","scale_by"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentUpscaleBy"
,       "display_name": "Upscale Latent By"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
    }
,   "LatentFromBatch": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "batch_index": ["INT",{"default":0,"min":0,"max":63}]
,               "length": ["INT",{"default":1,"min":1,"max":64}]
            }
        }
,       "input_order": {
            "required": ["samples","batch_index","length"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentFromBatch"
,       "display_name": "Latent From Batch"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/batch"
,       "output_node": false
    }
,   "RepeatLatentBatch": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "amount": ["INT",{"default":1,"min":1,"max":64}]
            }
        }
,       "input_order": {
            "required": ["samples","amount"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "RepeatLatentBatch"
,       "display_name": "Repeat Latent Batch"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/batch"
,       "output_node": false
    }
,   "SaveImage": {
        "input": {
            "required": {
                "images": ["IMAGE",{"tooltip":"The images to save."}]
,               "filename_prefix": ["STRING",{"default":"ComfyUI","tooltip":"The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveImage"
,       "display_name": "Save Image"
,       "description": "Saves the input images to your ComfyUI output directory."
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": true
    }
,   "PreviewImage": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "PreviewImage"
,       "display_name": "Preview Image"
,       "description": "Saves the input images to your ComfyUI output directory."
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": true
    }
,   "LoadImage": {
        "input": {
            "required": {
                "image": [["example.png"],{"image_upload":true}]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "LoadImage"
,       "display_name": "Load Image"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "LoadImageMask": {
        "input": {
            "required": {
                "image": [["example.png"],{"image_upload":true}]
,               "channel": [["alpha","red","green","blue"]]
            }
        }
,       "input_order": {
            "required": ["image","channel"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "LoadImageMask"
,       "display_name": "Load Image (as Mask)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "mask"
,       "output_node": false
    }
,   "ImageScale": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","lanczos"]]
,               "width": ["INT",{"default":512,"min":0,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":0,"max":16384,"step":1}]
,               "crop": [["disabled","center"]]
            }
        }
,       "input_order": {
            "required": ["image","upscale_method","width","height","crop"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageScale"
,       "display_name": "Upscale Image"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image/upscaling"
,       "output_node": false
    }
,   "ImageScaleBy": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","lanczos"]]
,               "scale_by": ["FLOAT",{"default":1,"min":0.01,"max":8,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image","upscale_method","scale_by"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageScaleBy"
,       "display_name": "Upscale Image By"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image/upscaling"
,       "output_node": false
    }
,   "ImageInvert": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageInvert"
,       "display_name": "Invert Image"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "ImageBatch": {
        "input": {
            "required": {
                "image1": ["IMAGE"]
,               "image2": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image1","image2"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBatch"
,       "display_name": "Batch Images"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "ImagePadForOutpaint": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "left": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "top": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "right": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "bottom": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "feathering": ["INT",{"default":40,"min":0,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","left","top","right","bottom","feathering"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "ImagePadForOutpaint"
,       "display_name": "Pad Image for Outpainting"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "EmptyImage": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
,               "color": ["INT",{"default":0,"min":0,"max":16777215,"step":1,"display":"color"}]
            }
        }
,       "input_order": {
            "required": ["width","height","batch_size","color"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "EmptyImage"
,       "display_name": "EmptyImage"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "ConditioningAverage": {
        "input": {
            "required": {
                "conditioning_to": ["CONDITIONING"]
,               "conditioning_from": ["CONDITIONING"]
,               "conditioning_to_strength": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning_to","conditioning_from","conditioning_to_strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningAverage"
,       "display_name": "ConditioningAverage"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningCombine": {
        "input": {
            "required": {
                "conditioning_1": ["CONDITIONING"]
,               "conditioning_2": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["conditioning_1","conditioning_2"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningCombine"
,       "display_name": "Conditioning (Combine)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningConcat": {
        "input": {
            "required": {
                "conditioning_to": ["CONDITIONING"]
,               "conditioning_from": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["conditioning_to","conditioning_from"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningConcat"
,       "display_name": "Conditioning (Concat)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningSetArea": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "width": ["INT",{"default":64,"min":64,"max":16384,"step":8}]
,               "height": ["INT",{"default":64,"min":64,"max":16384,"step":8}]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","width","height","x","y","strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetArea"
,       "display_name": "Conditioning (Set Area)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningSetAreaPercentage": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "width": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "height": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "x": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "y": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","width","height","x","y","strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetAreaPercentage"
,       "display_name": "Conditioning (Set Area with Percentage)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningSetAreaStrength": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetAreaStrength"
,       "display_name": "ConditioningSetAreaStrength"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningSetMask": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "mask": ["MASK"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "set_cond_area": [["default","mask bounds"]]
            }
        }
,       "input_order": {
            "required": ["conditioning","mask","strength","set_cond_area"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetMask"
,       "display_name": "Conditioning (Set Mask)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "KSamplerAdvanced": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "add_noise": [["enable","disable"]]
,               "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "latent_image": ["LATENT"]
,               "start_at_step": ["INT",{"default":0,"min":0,"max":10000}]
,               "end_at_step": ["INT",{"default":10000,"min":0,"max":10000}]
,               "return_with_leftover_noise": [["disable","enable"]]
            }
        }
,       "input_order": {
            "required": ["model","add_noise","noise_seed","steps","cfg","sampler_name","scheduler","positive","negative","latent_image","start_at_step","end_at_step","return_with_leftover_noise"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "KSamplerAdvanced"
,       "display_name": "KSampler (Advanced)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "sampling"
,       "output_node": false
    }
,   "SetLatentNoiseMask": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["samples","mask"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "SetLatentNoiseMask"
,       "display_name": "Set Latent Noise Mask"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/inpaint"
,       "output_node": false
    }
,   "LatentComposite": {
        "input": {
            "required": {
                "samples_to": ["LATENT"]
,               "samples_from": ["LATENT"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "feather": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
            }
        }
,       "input_order": {
            "required": ["samples_to","samples_from","x","y","feather"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentComposite"
,       "display_name": "Latent Composite"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
    }
,   "LatentBlend": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
,               "blend_factor": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2","blend_factor"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentBlend"
,       "display_name": "Latent Blend"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "LatentRotate": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "rotation": [["none","90 degrees","180 degrees","270 degrees"]]
            }
        }
,       "input_order": {
            "required": ["samples","rotation"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentRotate"
,       "display_name": "Rotate Latent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/transform"
,       "output_node": false
    }
,   "LatentFlip": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "flip_method": [["x-axis: vertically","y-axis: horizontally"]]
            }
        }
,       "input_order": {
            "required": ["samples","flip_method"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentFlip"
,       "display_name": "Flip Latent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/transform"
,       "output_node": false
    }
,   "LatentCrop": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "width": ["INT",{"default":512,"min":64,"max":16384,"step":8}]
,               "height": ["INT",{"default":512,"min":64,"max":16384,"step":8}]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
            }
        }
,       "input_order": {
            "required": ["samples","width","height","x","y"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentCrop"
,       "display_name": "Crop Latent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/transform"
,       "output_node": false
    }
,   "LoraLoader": {
        "input": {
            "required": {
                "model": ["MODEL",{"tooltip":"The diffusion model the LoRA will be applied to."}]
,               "clip": ["CLIP",{"tooltip":"The CLIP model the LoRA will be applied to."}]
,               "lora_name": [[],{"tooltip":"The name of the LoRA."}]
,               "strength_model": ["FLOAT",{"default":1,"min":-100,"max":100,"step":0.01,"tooltip":"How strongly to modify the diffusion model. This value can be negative."}]
,               "strength_clip": ["FLOAT",{"default":1,"min":-100,"max":100,"step":0.01,"tooltip":"How strongly to modify the CLIP model. This value can be negative."}]
            }
        }
,       "input_order": {
            "required": ["model","clip","lora_name","strength_model","strength_clip"]
        }
,       "output": ["MODEL","CLIP"]
,       "output_is_list": [false,false]
,       "output_name": ["MODEL","CLIP"]
,       "name": "LoraLoader"
,       "display_name": "Load LoRA"
,       "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together."
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
,       "output_tooltips": ["The modified diffusion model.","The modified CLIP model."]
    }
,   "CLIPLoader": {
        "input": {
            "required": {
                "clip_name": [[]]
,               "type": [["stable_diffusion","stable_cascade","sd3","stable_audio","mochi"]]
            }
        }
,       "input_order": {
            "required": ["clip_name","type"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPLoader"
,       "display_name": "Load CLIP"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders"
,       "output_node": false
    }
,   "UNETLoader": {
        "input": {
            "required": {
                "unet_name": [[]]
,               "weight_dtype": [["default","fp8_e4m3fn","fp8_e4m3fn_fast","fp8_e5m2"]]
            }
        }
,       "input_order": {
            "required": ["unet_name","weight_dtype"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "UNETLoader"
,       "display_name": "Load Diffusion Model"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders"
,       "output_node": false
    }
,   "DualCLIPLoader": {
        "input": {
            "required": {
                "clip_name1": [[]]
,               "clip_name2": [[]]
,               "type": [["sdxl","sd3","flux"]]
            }
        }
,       "input_order": {
            "required": ["clip_name1","clip_name2","type"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "DualCLIPLoader"
,       "display_name": "DualCLIPLoader"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders"
,       "output_node": false
    }
,   "CLIPVisionEncode": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["clip_vision","image"]
        }
,       "output": ["CLIP_VISION_OUTPUT"]
,       "output_is_list": [false]
,       "output_name": ["CLIP_VISION_OUTPUT"]
,       "name": "CLIPVisionEncode"
,       "display_name": "CLIP Vision Encode"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "StyleModelApply": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "style_model": ["STYLE_MODEL"]
,               "clip_vision_output": ["CLIP_VISION_OUTPUT"]
            }
        }
,       "input_order": {
            "required": ["conditioning","style_model","clip_vision_output"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "StyleModelApply"
,       "display_name": "Apply Style Model"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/style_model"
,       "output_node": false
    }
,   "unCLIPConditioning": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "clip_vision_output": ["CLIP_VISION_OUTPUT"]
,               "strength": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
,               "noise_augmentation": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","clip_vision_output","strength","noise_augmentation"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "unCLIPConditioning"
,       "display_name": "unCLIPConditioning"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ControlNetApply": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "control_net": ["CONTROL_NET"]
,               "image": ["IMAGE"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","control_net","image","strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ControlNetApply"
,       "display_name": "Apply ControlNet (OLD)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/controlnet"
,       "output_node": false
,       "deprecated": true
    }
,   "ControlNetApplyAdvanced": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "control_net": ["CONTROL_NET"]
,               "image": ["IMAGE"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
,           "optional": {
                "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["positive","negative","control_net","image","strength","start_percent","end_percent"]
,           "optional": ["vae"]
        }
,       "output": ["CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false]
,       "output_name": ["positive","negative"]
,       "name": "ControlNetApplyAdvanced"
,       "display_name": "Apply ControlNet"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/controlnet"
,       "output_node": false
    }
,   "ControlNetLoader": {
        "input": {
            "required": {
                "control_net_name": [[]]
            }
        }
,       "input_order": {
            "required": ["control_net_name"]
        }
,       "output": ["CONTROL_NET"]
,       "output_is_list": [false]
,       "output_name": ["CONTROL_NET"]
,       "name": "ControlNetLoader"
,       "display_name": "Load ControlNet Model"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "DiffControlNetLoader": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "control_net_name": [[]]
            }
        }
,       "input_order": {
            "required": ["model","control_net_name"]
        }
,       "output": ["CONTROL_NET"]
,       "output_is_list": [false]
,       "output_name": ["CONTROL_NET"]
,       "name": "DiffControlNetLoader"
,       "display_name": "Load ControlNet Model (diff)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "StyleModelLoader": {
        "input": {
            "required": {
                "style_model_name": [[]]
            }
        }
,       "input_order": {
            "required": ["style_model_name"]
        }
,       "output": ["STYLE_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["STYLE_MODEL"]
,       "name": "StyleModelLoader"
,       "display_name": "Load Style Model"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "CLIPVisionLoader": {
        "input": {
            "required": {
                "clip_name": [[]]
            }
        }
,       "input_order": {
            "required": ["clip_name"]
        }
,       "output": ["CLIP_VISION"]
,       "output_is_list": [false]
,       "output_name": ["CLIP_VISION"]
,       "name": "CLIPVisionLoader"
,       "display_name": "Load CLIP Vision"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "VAEDecodeTiled": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "vae": ["VAE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
        }
,       "input_order": {
            "required": ["samples","vae","tile_size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "VAEDecodeTiled"
,       "display_name": "VAE Decode (Tiled)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "VAEEncodeTiled": {
        "input": {
            "required": {
                "pixels": ["IMAGE"]
,               "vae": ["VAE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
        }
,       "input_order": {
            "required": ["pixels","vae","tile_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "VAEEncodeTiled"
,       "display_name": "VAE Encode (Tiled)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "unCLIPCheckpointLoader": {
        "input": {
            "required": {
                "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["ckpt_name"]
        }
,       "output": ["MODEL","CLIP","VAE","CLIP_VISION"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["MODEL","CLIP","VAE","CLIP_VISION"]
,       "name": "unCLIPCheckpointLoader"
,       "display_name": "unCLIPCheckpointLoader"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "GLIGENLoader": {
        "input": {
            "required": {
                "gligen_name": [[]]
            }
        }
,       "input_order": {
            "required": ["gligen_name"]
        }
,       "output": ["GLIGEN"]
,       "output_is_list": [false]
,       "output_name": ["GLIGEN"]
,       "name": "GLIGENLoader"
,       "display_name": "GLIGENLoader"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "GLIGENTextBoxApply": {
        "input": {
            "required": {
                "conditioning_to": ["CONDITIONING"]
,               "clip": ["CLIP"]
,               "gligen_textbox_model": ["GLIGEN"]
,               "text": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "width": ["INT",{"default":64,"min":8,"max":16384,"step":8}]
,               "height": ["INT",{"default":64,"min":8,"max":16384,"step":8}]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
            }
        }
,       "input_order": {
            "required": ["conditioning_to","clip","gligen_textbox_model","text","width","height","x","y"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "GLIGENTextBoxApply"
,       "display_name": "GLIGENTextBoxApply"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/gligen"
,       "output_node": false
    }
,   "InpaintModelConditioning": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "vae": ["VAE"]
,               "pixels": ["IMAGE"]
,               "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["positive","negative","vae","pixels","mask"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "InpaintModelConditioning"
,       "display_name": "InpaintModelConditioning"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/inpaint"
,       "output_node": false
    }
,   "CheckpointLoader": {
        "input": {
            "required": {
                "config_name": [["anything_v3.yaml","v1-inference.yaml","v1-inference_clip_skip_2.yaml","v1-inference_clip_skip_2_fp16.yaml","v1-inference_fp16.yaml","v1-inpainting-inference.yaml","v2-inference-v.yaml","v2-inference-v_fp32.yaml","v2-inference.yaml","v2-inference_fp32.yaml","v2-inpainting-inference.yaml"]]
,               "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["config_name","ckpt_name"]
        }
,       "output": ["MODEL","CLIP","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP","VAE"]
,       "name": "CheckpointLoader"
,       "display_name": "Load Checkpoint With Config (DEPRECATED)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders"
,       "output_node": false
,       "deprecated": true
    }
,   "DiffusersLoader": {
        "input": {
            "required": {
                "model_path": [[]]
            }
        }
,       "input_order": {
            "required": ["model_path"]
        }
,       "output": ["MODEL","CLIP","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP","VAE"]
,       "name": "DiffusersLoader"
,       "display_name": "DiffusersLoader"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders/deprecated"
,       "output_node": false
    }
,   "LoadLatent": {
        "input": {
            "required": {
                "latent": [[]]
            }
        }
,       "input_order": {
            "required": ["latent"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LoadLatent"
,       "display_name": "LoadLatent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "SaveLatent": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "filename_prefix": ["STRING",{"default":"latents/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["samples","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveLatent"
,       "display_name": "SaveLatent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": true
    }
,   "ConditioningZeroOut": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["conditioning"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningZeroOut"
,       "display_name": "ConditioningZeroOut"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "ConditioningSetTimestepRange": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "start": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["conditioning","start","end"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetTimestepRange"
,       "display_name": "ConditioningSetTimestepRange"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "LoraLoaderModelOnly": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "lora_name": [[]]
,               "strength_model": ["FLOAT",{"default":1,"min":-100,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","lora_name","strength_model"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "LoraLoaderModelOnly"
,       "display_name": "LoraLoaderModelOnly"
,       "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together."
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
,       "output_tooltips": ["The modified diffusion model.","The modified CLIP model."]
    }
,   "LatentAdd": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentAdd"
,       "display_name": "LatentAdd"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentSubtract": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentSubtract"
,       "display_name": "LatentSubtract"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentMultiply": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "multiplier": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["samples","multiplier"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentMultiply"
,       "display_name": "LatentMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentInterpolate": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
,               "ratio": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2","ratio"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentInterpolate"
,       "display_name": "LatentInterpolate"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentBatch": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentBatch"
,       "display_name": "LatentBatch"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/batch"
,       "output_node": false
    }
,   "LatentBatchSeedBehavior": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "seed_behavior": [["random","fixed"],{"default":"fixed"}]
            }
        }
,       "input_order": {
            "required": ["samples","seed_behavior"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentBatchSeedBehavior"
,       "display_name": "LatentBatchSeedBehavior"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentApplyOperation": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "operation": ["LATENT_OPERATION"]
            }
        }
,       "input_order": {
            "required": ["samples","operation"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentApplyOperation"
,       "display_name": "LatentApplyOperation"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced/operations"
,       "output_node": false
,       "experimental": true
    }
,   "LatentApplyOperationCFG": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "operation": ["LATENT_OPERATION"]
            }
        }
,       "input_order": {
            "required": ["model","operation"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "LatentApplyOperationCFG"
,       "display_name": "LatentApplyOperationCFG"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced/operations"
,       "output_node": false
,       "experimental": true
    }
,   "LatentOperationTonemapReinhard": {
        "input": {
            "required": {
                "multiplier": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["multiplier"]
        }
,       "output": ["LATENT_OPERATION"]
,       "output_is_list": [false]
,       "output_name": ["LATENT_OPERATION"]
,       "name": "LatentOperationTonemapReinhard"
,       "display_name": "LatentOperationTonemapReinhard"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced/operations"
,       "output_node": false
,       "experimental": true
    }
,   "LatentOperationSharpen": {
        "input": {
            "required": {
                "sharpen_radius": ["INT",{"default":9,"min":1,"max":31,"step":1}]
,               "sigma": ["FLOAT",{"default":1,"min":0.1,"max":10,"step":0.1}]
,               "alpha": ["FLOAT",{"default":0.1,"min":0,"max":5,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["sharpen_radius","sigma","alpha"]
        }
,       "output": ["LATENT_OPERATION"]
,       "output_is_list": [false]
,       "output_name": ["LATENT_OPERATION"]
,       "name": "LatentOperationSharpen"
,       "display_name": "LatentOperationSharpen"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced/operations"
,       "output_node": false
,       "experimental": true
    }
,   "HypernetworkLoader": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "hypernetwork_name": [[]]
,               "strength": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","hypernetwork_name","strength"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "HypernetworkLoader"
,       "display_name": "HypernetworkLoader"
,       "description": ""
,       "python_module": "comfy_extras.nodes_hypernetwork"
,       "category": "loaders"
,       "output_node": false
    }
,   "UpscaleModelLoader": {
        "input": {
            "required": {
                "model_name": [["4x-UltraSharp.pth","RealESRGAN_x4plus.pth","RealESRGAN_x4plus_anime_6B.pth"]]
            }
        }
,       "input_order": {
            "required": ["model_name"]
        }
,       "output": ["UPSCALE_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALE_MODEL"]
,       "name": "UpscaleModelLoader"
,       "display_name": "Load Upscale Model"
,       "description": ""
,       "python_module": "comfy_extras.nodes_upscale_model"
,       "category": "loaders"
,       "output_node": false
    }
,   "ImageUpscaleWithModel": {
        "input": {
            "required": {
                "upscale_model": ["UPSCALE_MODEL"]
,               "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["upscale_model","image"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageUpscaleWithModel"
,       "display_name": "Upscale Image (using Model)"
,       "description": ""
,       "python_module": "comfy_extras.nodes_upscale_model"
,       "category": "image/upscaling"
,       "output_node": false
    }
,   "ImageBlend": {
        "input": {
            "required": {
                "image1": ["IMAGE"]
,               "image2": ["IMAGE"]
,               "blend_factor": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "blend_mode": [["normal","multiply","screen","overlay","soft_light","difference"]]
            }
        }
,       "input_order": {
            "required": ["image1","image2","blend_factor","blend_mode"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBlend"
,       "display_name": "Image Blend"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "ImageBlur": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "blur_radius": ["INT",{"default":1,"min":1,"max":31,"step":1}]
,               "sigma": ["FLOAT",{"default":1,"min":0.1,"max":10,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["image","blur_radius","sigma"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBlur"
,       "display_name": "Image Blur"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "ImageQuantize": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "colors": ["INT",{"default":256,"min":1,"max":256,"step":1}]
,               "dither": [["none","floyd-steinberg","bayer-2","bayer-4","bayer-8","bayer-16"]]
            }
        }
,       "input_order": {
            "required": ["image","colors","dither"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageQuantize"
,       "display_name": "Image Quantize"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "ImageSharpen": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "sharpen_radius": ["INT",{"default":1,"min":1,"max":31,"step":1}]
,               "sigma": ["FLOAT",{"default":1,"min":0.1,"max":10,"step":0.01}]
,               "alpha": ["FLOAT",{"default":1,"min":0,"max":5,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image","sharpen_radius","sigma","alpha"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageSharpen"
,       "display_name": "Image Sharpen"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "ImageScaleToTotalPixels": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","lanczos"]]
,               "megapixels": ["FLOAT",{"default":1,"min":0.01,"max":16,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image","upscale_method","megapixels"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageScaleToTotalPixels"
,       "display_name": "Scale Image to Total Pixels"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/upscaling"
,       "output_node": false
    }
,   "LatentCompositeMasked": {
        "input": {
            "required": {
                "destination": ["LATENT"]
,               "source": ["LATENT"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "resize_source": ["BOOLEAN",{"default":false}]
            }
,           "optional": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["destination","source","x","y","resize_source"]
,           "optional": ["mask"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentCompositeMasked"
,       "display_name": "LatentCompositeMasked"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "latent"
,       "output_node": false
    }
,   "ImageCompositeMasked": {
        "input": {
            "required": {
                "destination": ["IMAGE"]
,               "source": ["IMAGE"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "resize_source": ["BOOLEAN",{"default":false}]
            }
,           "optional": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["destination","source","x","y","resize_source"]
,           "optional": ["mask"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageCompositeMasked"
,       "display_name": "ImageCompositeMasked"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "image"
,       "output_node": false
    }
,   "MaskToImage": {
        "input": {
            "required": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "MaskToImage"
,       "display_name": "Convert Mask to Image"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "ImageToMask": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "channel": [["red","green","blue","alpha"]]
            }
        }
,       "input_order": {
            "required": ["image","channel"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImageToMask"
,       "display_name": "Convert Image to Mask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "ImageColorToMask": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "color": ["INT",{"default":0,"min":0,"max":16777215,"step":1,"display":"color"}]
            }
        }
,       "input_order": {
            "required": ["image","color"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImageColorToMask"
,       "display_name": "ImageColorToMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "SolidMask": {
        "input": {
            "required": {
                "value": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "width": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["value","width","height"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SolidMask"
,       "display_name": "SolidMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "InvertMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "InvertMask"
,       "display_name": "InvertMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "CropMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "width": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["mask","x","y","width","height"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "CropMask"
,       "display_name": "CropMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "MaskComposite": {
        "input": {
            "required": {
                "destination": ["MASK"]
,               "source": ["MASK"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "operation": [["multiply","add","subtract","and","or","xor"]]
            }
        }
,       "input_order": {
            "required": ["destination","source","x","y","operation"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "MaskComposite"
,       "display_name": "MaskComposite"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "FeatherMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "left": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "top": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "right": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "bottom": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["mask","left","top","right","bottom"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "FeatherMask"
,       "display_name": "FeatherMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "GrowMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "expand": ["INT",{"default":0,"min":-16384,"max":16384,"step":1}]
,               "tapered_corners": ["BOOLEAN",{"default":true}]
            }
        }
,       "input_order": {
            "required": ["mask","expand","tapered_corners"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "GrowMask"
,       "display_name": "GrowMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "ThresholdMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "value": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["mask","value"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ThresholdMask"
,       "display_name": "ThresholdMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "PorterDuffImageComposite": {
        "input": {
            "required": {
                "source": ["IMAGE"]
,               "source_alpha": ["MASK"]
,               "destination": ["IMAGE"]
,               "destination_alpha": ["MASK"]
,               "mode": [["ADD","CLEAR","DARKEN","DST","DST_ATOP","DST_IN","DST_OUT","DST_OVER","LIGHTEN","MULTIPLY","OVERLAY","SCREEN","SRC","SRC_ATOP","SRC_IN","SRC_OUT","SRC_OVER","XOR"],{"default":"DST"}]
            }
        }
,       "input_order": {
            "required": ["source","source_alpha","destination","destination_alpha","mode"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "PorterDuffImageComposite"
,       "display_name": "Porter-Duff Image Composite"
,       "description": ""
,       "python_module": "comfy_extras.nodes_compositing"
,       "category": "mask/compositing"
,       "output_node": false
    }
,   "SplitImageWithAlpha": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "SplitImageWithAlpha"
,       "display_name": "Split Image with Alpha"
,       "description": ""
,       "python_module": "comfy_extras.nodes_compositing"
,       "category": "mask/compositing"
,       "output_node": false
    }
,   "JoinImageWithAlpha": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "alpha": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["image","alpha"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "JoinImageWithAlpha"
,       "display_name": "Join Image with Alpha"
,       "description": ""
,       "python_module": "comfy_extras.nodes_compositing"
,       "category": "mask/compositing"
,       "output_node": false
    }
,   "RebatchLatents": {
        "input": {
            "required": {
                "latents": ["LATENT"]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["latents","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [true]
,       "output_name": ["LATENT"]
,       "name": "RebatchLatents"
,       "display_name": "Rebatch Latents"
,       "description": ""
,       "python_module": "comfy_extras.nodes_rebatch"
,       "category": "latent/batch"
,       "output_node": false
    }
,   "RebatchImages": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["images","batch_size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "RebatchImages"
,       "display_name": "Rebatch Images"
,       "description": ""
,       "python_module": "comfy_extras.nodes_rebatch"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ModelMergeSimple": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "ratio": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","ratio"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSimple"
,       "display_name": "ModelMergeSimple"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "ModelMergeBlocks": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "input": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "out": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","input","middle","out"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeBlocks"
,       "display_name": "ModelMergeBlocks"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "ModelMergeSubtract": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "multiplier": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","multiplier"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSubtract"
,       "display_name": "ModelMergeSubtract"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "ModelMergeAdd": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
            }
        }
,       "input_order": {
            "required": ["model1","model2"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeAdd"
,       "display_name": "ModelMergeAdd"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "CheckpointSave": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "filename_prefix": ["STRING",{"default":"checkpoints/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["model","clip","vae","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "CheckpointSave"
,       "display_name": "Save Checkpoint"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "CLIPMergeSimple": {
        "input": {
            "required": {
                "clip1": ["CLIP"]
,               "clip2": ["CLIP"]
,               "ratio": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["clip1","clip2","ratio"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPMergeSimple"
,       "display_name": "CLIPMergeSimple"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "CLIPMergeSubtract": {
        "input": {
            "required": {
                "clip1": ["CLIP"]
,               "clip2": ["CLIP"]
,               "multiplier": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["clip1","clip2","multiplier"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPMergeSubtract"
,       "display_name": "CLIPMergeSubtract"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "CLIPMergeAdd": {
        "input": {
            "required": {
                "clip1": ["CLIP"]
,               "clip2": ["CLIP"]
            }
        }
,       "input_order": {
            "required": ["clip1","clip2"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPMergeAdd"
,       "display_name": "CLIPMergeAdd"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "CLIPSave": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "filename_prefix": ["STRING",{"default":"clip/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["clip","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "CLIPSave"
,       "display_name": "CLIPSave"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "VAESave": {
        "input": {
            "required": {
                "vae": ["VAE"]
,               "filename_prefix": ["STRING",{"default":"vae/ComfyUI_vae"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["vae","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "VAESave"
,       "display_name": "VAESave"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "ModelSave": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "filename_prefix": ["STRING",{"default":"diffusion_models/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["model","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ModelSave"
,       "display_name": "ModelSave"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "TomePatchModel": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ratio": ["FLOAT",{"default":0.3,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","ratio"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "TomePatchModel"
,       "display_name": "TomePatchModel"
,       "description": ""
,       "python_module": "comfy_extras.nodes_tomesd"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "CLIPTextEncodeSDXLRefiner": {
        "input": {
            "required": {
                "ascore": ["FLOAT",{"default":6,"min":0,"max":1000,"step":0.01}]
,               "width": ["INT",{"default":1024,"min":0,"max":16384}]
,               "height": ["INT",{"default":1024,"min":0,"max":16384}]
,               "text": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "clip": ["CLIP"]
            }
        }
,       "input_order": {
            "required": ["ascore","width","height","text","clip"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeSDXLRefiner"
,       "display_name": "CLIPTextEncodeSDXLRefiner"
,       "description": ""
,       "python_module": "comfy_extras.nodes_clip_sdxl"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "CLIPTextEncodeSDXL": {
        "input": {
            "required": {
                "width": ["INT",{"default":1024,"min":0,"max":16384}]
,               "height": ["INT",{"default":1024,"min":0,"max":16384}]
,               "crop_w": ["INT",{"default":0,"min":0,"max":16384}]
,               "crop_h": ["INT",{"default":0,"min":0,"max":16384}]
,               "target_width": ["INT",{"default":1024,"min":0,"max":16384}]
,               "target_height": ["INT",{"default":1024,"min":0,"max":16384}]
,               "text_g": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "clip": ["CLIP"]
,               "text_l": ["STRING",{"multiline":true,"dynamicPrompts":true}]
            }
        }
,       "input_order": {
            "required": ["width","height","crop_w","crop_h","target_width","target_height","text_g","clip","text_l"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeSDXL"
,       "display_name": "CLIPTextEncodeSDXL"
,       "description": ""
,       "python_module": "comfy_extras.nodes_clip_sdxl"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "Canny": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "low_threshold": ["FLOAT",{"default":0.4,"min":0.01,"max":0.99,"step":0.01}]
,               "high_threshold": ["FLOAT",{"default":0.8,"min":0.01,"max":0.99,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image","low_threshold","high_threshold"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Canny"
,       "display_name": "Canny"
,       "description": ""
,       "python_module": "comfy_extras.nodes_canny"
,       "category": "image/preprocessors"
,       "output_node": false
    }
,   "FreeU": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "b1": ["FLOAT",{"default":1.1,"min":0,"max":10,"step":0.01}]
,               "b2": ["FLOAT",{"default":1.2,"min":0,"max":10,"step":0.01}]
,               "s1": ["FLOAT",{"default":0.9,"min":0,"max":10,"step":0.01}]
,               "s2": ["FLOAT",{"default":0.2,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","b1","b2","s1","s2"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "FreeU"
,       "display_name": "FreeU"
,       "description": ""
,       "python_module": "comfy_extras.nodes_freelunch"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "FreeU_V2": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "b1": ["FLOAT",{"default":1.3,"min":0,"max":10,"step":0.01}]
,               "b2": ["FLOAT",{"default":1.4,"min":0,"max":10,"step":0.01}]
,               "s1": ["FLOAT",{"default":0.9,"min":0,"max":10,"step":0.01}]
,               "s2": ["FLOAT",{"default":0.2,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","b1","b2","s1","s2"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "FreeU_V2"
,       "display_name": "FreeU_V2"
,       "description": ""
,       "python_module": "comfy_extras.nodes_freelunch"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "SamplerCustom": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "add_noise": ["BOOLEAN",{"default":true}]
,               "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "sampler": ["SAMPLER"]
,               "sigmas": ["SIGMAS"]
,               "latent_image": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["model","add_noise","noise_seed","cfg","positive","negative","sampler","sigmas","latent_image"]
        }
,       "output": ["LATENT","LATENT"]
,       "output_is_list": [false,false]
,       "output_name": ["output","denoised_output"]
,       "name": "SamplerCustom"
,       "display_name": "SamplerCustom"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling"
,       "output_node": false
    }
,   "BasicScheduler": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","scheduler","steps","denoise"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "BasicScheduler"
,       "display_name": "BasicScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "KarrasScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "sigma_max": ["FLOAT",{"default":14.614642,"min":0,"max":5000,"step":0.01,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.0291675,"min":0,"max":5000,"step":0.01,"round":false}]
,               "rho": ["FLOAT",{"default":7,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","sigma_max","sigma_min","rho"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "KarrasScheduler"
,       "display_name": "KarrasScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "ExponentialScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "sigma_max": ["FLOAT",{"default":14.614642,"min":0,"max":5000,"step":0.01,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.0291675,"min":0,"max":5000,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","sigma_max","sigma_min"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "ExponentialScheduler"
,       "display_name": "ExponentialScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "PolyexponentialScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "sigma_max": ["FLOAT",{"default":14.614642,"min":0,"max":5000,"step":0.01,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.0291675,"min":0,"max":5000,"step":0.01,"round":false}]
,               "rho": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","sigma_max","sigma_min","rho"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "PolyexponentialScheduler"
,       "display_name": "PolyexponentialScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "LaplaceScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "sigma_max": ["FLOAT",{"default":14.614642,"min":0,"max":5000,"step":0.01,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.0291675,"min":0,"max":5000,"step":0.01,"round":false}]
,               "mu": ["FLOAT",{"default":0,"min":-10,"max":10,"step":0.1,"round":false}]
,               "beta": ["FLOAT",{"default":0.5,"min":0,"max":10,"step":0.1,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","sigma_max","sigma_min","mu","beta"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "LaplaceScheduler"
,       "display_name": "LaplaceScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "VPScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "beta_d": ["FLOAT",{"default":19.9,"min":0,"max":5000,"step":0.01,"round":false}]
,               "beta_min": ["FLOAT",{"default":0.1,"min":0,"max":5000,"step":0.01,"round":false}]
,               "eps_s": ["FLOAT",{"default":0.001,"min":0,"max":1,"step":0.0001,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","beta_d","beta_min","eps_s"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "VPScheduler"
,       "display_name": "VPScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "BetaSamplingScheduler": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "alpha": ["FLOAT",{"default":0.6,"min":0,"max":50,"step":0.01,"round":false}]
,               "beta": ["FLOAT",{"default":0.6,"min":0,"max":50,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["model","steps","alpha","beta"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "BetaSamplingScheduler"
,       "display_name": "BetaSamplingScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "SDTurboScheduler": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "steps": ["INT",{"default":1,"min":1,"max":10}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","steps","denoise"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "SDTurboScheduler"
,       "display_name": "SDTurboScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "KSamplerSelect": {
        "input": {
            "required": {
                "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
            }
        }
,       "input_order": {
            "required": ["sampler_name"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "KSamplerSelect"
,       "display_name": "KSamplerSelect"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerEulerAncestral": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerEulerAncestral"
,       "display_name": "SamplerEulerAncestral"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerEulerAncestralCFGPP": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerEulerAncestralCFGPP"
,       "display_name": "SamplerEulerAncestralCFG++"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerLMS": {
        "input": {
            "required": {
                "order": ["INT",{"default":4,"min":1,"max":100}]
            }
        }
,       "input_order": {
            "required": ["order"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerLMS"
,       "display_name": "SamplerLMS"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMPP_3M_SDE": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "noise_device": [["gpu","cpu"]]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise","noise_device"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMPP_3M_SDE"
,       "display_name": "SamplerDPMPP_3M_SDE"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMPP_2M_SDE": {
        "input": {
            "required": {
                "solver_type": [["midpoint","heun"]]
,               "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "noise_device": [["gpu","cpu"]]
            }
        }
,       "input_order": {
            "required": ["solver_type","eta","s_noise","noise_device"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMPP_2M_SDE"
,       "display_name": "SamplerDPMPP_2M_SDE"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMPP_SDE": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "r": ["FLOAT",{"default":0.5,"min":0,"max":100,"step":0.01,"round":false}]
,               "noise_device": [["gpu","cpu"]]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise","r","noise_device"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMPP_SDE"
,       "display_name": "SamplerDPMPP_SDE"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMPP_2S_Ancestral": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMPP_2S_Ancestral"
,       "display_name": "SamplerDPMPP_2S_Ancestral"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMAdaptative": {
        "input": {
            "required": {
                "order": ["INT",{"default":3,"min":2,"max":3}]
,               "rtol": ["FLOAT",{"default":0.05,"min":0,"max":100,"step":0.01,"round":false}]
,               "atol": ["FLOAT",{"default":0.0078,"min":0,"max":100,"step":0.01,"round":false}]
,               "h_init": ["FLOAT",{"default":0.05,"min":0,"max":100,"step":0.01,"round":false}]
,               "pcoeff": ["FLOAT",{"default":0,"min":0,"max":100,"step":0.01,"round":false}]
,               "icoeff": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "dcoeff": ["FLOAT",{"default":0,"min":0,"max":100,"step":0.01,"round":false}]
,               "accept_safety": ["FLOAT",{"default":0.81,"min":0,"max":100,"step":0.01,"round":false}]
,               "eta": ["FLOAT",{"default":0,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["order","rtol","atol","h_init","pcoeff","icoeff","dcoeff","accept_safety","eta","s_noise"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMAdaptative"
,       "display_name": "SamplerDPMAdaptative"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SplitSigmas": {
        "input": {
            "required": {
                "sigmas": ["SIGMAS"]
,               "step": ["INT",{"default":0,"min":0,"max":10000}]
            }
        }
,       "input_order": {
            "required": ["sigmas","step"]
        }
,       "output": ["SIGMAS","SIGMAS"]
,       "output_is_list": [false,false]
,       "output_name": ["high_sigmas","low_sigmas"]
,       "name": "SplitSigmas"
,       "display_name": "SplitSigmas"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/sigmas"
,       "output_node": false
    }
,   "SplitSigmasDenoise": {
        "input": {
            "required": {
                "sigmas": ["SIGMAS"]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["sigmas","denoise"]
        }
,       "output": ["SIGMAS","SIGMAS"]
,       "output_is_list": [false,false]
,       "output_name": ["high_sigmas","low_sigmas"]
,       "name": "SplitSigmasDenoise"
,       "display_name": "SplitSigmasDenoise"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/sigmas"
,       "output_node": false
    }
,   "FlipSigmas": {
        "input": {
            "required": {
                "sigmas": ["SIGMAS"]
            }
        }
,       "input_order": {
            "required": ["sigmas"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "FlipSigmas"
,       "display_name": "FlipSigmas"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/sigmas"
,       "output_node": false
    }
,   "CFGGuider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","positive","negative","cfg"]
        }
,       "output": ["GUIDER"]
,       "output_is_list": [false]
,       "output_name": ["GUIDER"]
,       "name": "CFGGuider"
,       "display_name": "CFGGuider"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/guiders"
,       "output_node": false
    }
,   "DualCFGGuider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "cond1": ["CONDITIONING"]
,               "cond2": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "cfg_conds": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "cfg_cond2_negative": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","cond1","cond2","negative","cfg_conds","cfg_cond2_negative"]
        }
,       "output": ["GUIDER"]
,       "output_is_list": [false]
,       "output_name": ["GUIDER"]
,       "name": "DualCFGGuider"
,       "display_name": "DualCFGGuider"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/guiders"
,       "output_node": false
    }
,   "BasicGuider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "conditioning": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["model","conditioning"]
        }
,       "output": ["GUIDER"]
,       "output_is_list": [false]
,       "output_name": ["GUIDER"]
,       "name": "BasicGuider"
,       "display_name": "BasicGuider"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/guiders"
,       "output_node": false
    }
,   "RandomNoise": {
        "input": {
            "required": {
                "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["noise_seed"]
        }
,       "output": ["NOISE"]
,       "output_is_list": [false]
,       "output_name": ["NOISE"]
,       "name": "RandomNoise"
,       "display_name": "RandomNoise"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/noise"
,       "output_node": false
    }
,   "DisableNoise": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["NOISE"]
,       "output_is_list": [false]
,       "output_name": ["NOISE"]
,       "name": "DisableNoise"
,       "display_name": "DisableNoise"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/noise"
,       "output_node": false
    }
,   "AddNoise": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "noise": ["NOISE"]
,               "sigmas": ["SIGMAS"]
,               "latent_image": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["model","noise","sigmas","latent_image"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "AddNoise"
,       "display_name": "AddNoise"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "_for_testing/custom_sampling/noise"
,       "output_node": false
    }
,   "SamplerCustomAdvanced": {
        "input": {
            "required": {
                "noise": ["NOISE"]
,               "guider": ["GUIDER"]
,               "sampler": ["SAMPLER"]
,               "sigmas": ["SIGMAS"]
,               "latent_image": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["noise","guider","sampler","sigmas","latent_image"]
        }
,       "output": ["LATENT","LATENT"]
,       "output_is_list": [false,false]
,       "output_name": ["output","denoised_output"]
,       "name": "SamplerCustomAdvanced"
,       "display_name": "SamplerCustomAdvanced"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling"
,       "output_node": false
    }
,   "HyperTile": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "tile_size": ["INT",{"default":256,"min":1,"max":2048}]
,               "swap_size": ["INT",{"default":2,"min":1,"max":128}]
,               "max_depth": ["INT",{"default":0,"min":0,"max":10}]
,               "scale_depth": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["model","tile_size","swap_size","max_depth","scale_depth"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "HyperTile"
,       "display_name": "HyperTile"
,       "description": ""
,       "python_module": "comfy_extras.nodes_hypertile"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "ModelSamplingDiscrete": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "sampling": [["eps","v_prediction","lcm","x0"]]
,               "zsnr": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["model","sampling","zsnr"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingDiscrete"
,       "display_name": "ModelSamplingDiscrete"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingContinuousEDM": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "sampling": [["v_prediction","edm_playground_v2.5","eps"]]
,               "sigma_max": ["FLOAT",{"default":120,"min":0,"max":1000,"step":0.001,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.002,"min":0,"max":1000,"step":0.001,"round":false}]
            }
        }
,       "input_order": {
            "required": ["model","sampling","sigma_max","sigma_min"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingContinuousEDM"
,       "display_name": "ModelSamplingContinuousEDM"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingContinuousV": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "sampling": [["v_prediction"]]
,               "sigma_max": ["FLOAT",{"default":500,"min":0,"max":1000,"step":0.001,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.03,"min":0,"max":1000,"step":0.001,"round":false}]
            }
        }
,       "input_order": {
            "required": ["model","sampling","sigma_max","sigma_min"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingContinuousV"
,       "display_name": "ModelSamplingContinuousV"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingStableCascade": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "shift": ["FLOAT",{"default":2,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","shift"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingStableCascade"
,       "display_name": "ModelSamplingStableCascade"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingSD3": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "shift": ["FLOAT",{"default":3,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","shift"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingSD3"
,       "display_name": "ModelSamplingSD3"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingAuraFlow": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "shift": ["FLOAT",{"default":1.73,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","shift"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingAuraFlow"
,       "display_name": "ModelSamplingAuraFlow"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingFlux": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "max_shift": ["FLOAT",{"default":1.15,"min":0,"max":100,"step":0.01}]
,               "base_shift": ["FLOAT",{"default":0.5,"min":0,"max":100,"step":0.01}]
,               "width": ["INT",{"default":1024,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":1024,"min":16,"max":16384,"step":8}]
            }
        }
,       "input_order": {
            "required": ["model","max_shift","base_shift","width","height"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingFlux"
,       "display_name": "ModelSamplingFlux"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "RescaleCFG": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "multiplier": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","multiplier"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "RescaleCFG"
,       "display_name": "RescaleCFG"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "PatchModelAddDownscale": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "block_number": ["INT",{"default":3,"min":1,"max":32,"step":1}]
,               "downscale_factor": ["FLOAT",{"default":2,"min":0.1,"max":9,"step":0.001}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":0.35,"min":0,"max":1,"step":0.001}]
,               "downscale_after_skip": ["BOOLEAN",{"default":true}]
,               "downscale_method": [["bicubic","nearest-exact","bilinear","area","bislerp"]]
,               "upscale_method": [["bicubic","nearest-exact","bilinear","area","bislerp"]]
            }
        }
,       "input_order": {
            "required": ["model","block_number","downscale_factor","start_percent","end_percent","downscale_after_skip","downscale_method","upscale_method"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "PatchModelAddDownscale"
,       "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_downscale"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "ImageCrop": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "width": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","width","height","x","y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageCrop"
,       "display_name": "Image Crop"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/transform"
,       "output_node": false
    }
,   "RepeatImageBatch": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "amount": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["image","amount"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "RepeatImageBatch"
,       "display_name": "RepeatImageBatch"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ImageFromBatch": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "batch_index": ["INT",{"default":0,"min":0,"max":4095}]
,               "length": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["image","batch_index","length"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFromBatch"
,       "display_name": "ImageFromBatch"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/batch"
,       "output_node": false
    }
,   "SaveAnimatedWEBP": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "filename_prefix": ["STRING",{"default":"ComfyUI"}]
,               "fps": ["FLOAT",{"default":6,"min":0.01,"max":1000,"step":0.01}]
,               "lossless": ["BOOLEAN",{"default":true}]
,               "quality": ["INT",{"default":80,"min":0,"max":100}]
,               "method": [["default","fastest","slowest"]]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","filename_prefix","fps","lossless","quality","method"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveAnimatedWEBP"
,       "display_name": "SaveAnimatedWEBP"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/animation"
,       "output_node": true
    }
,   "SaveAnimatedPNG": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "filename_prefix": ["STRING",{"default":"ComfyUI"}]
,               "fps": ["FLOAT",{"default":6,"min":0.01,"max":1000,"step":0.01}]
,               "compress_level": ["INT",{"default":4,"min":0,"max":9}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","filename_prefix","fps","compress_level"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveAnimatedPNG"
,       "display_name": "SaveAnimatedPNG"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/animation"
,       "output_node": true
    }
,   "ImageOnlyCheckpointLoader": {
        "input": {
            "required": {
                "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["ckpt_name"]
        }
,       "output": ["MODEL","CLIP_VISION","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP_VISION","VAE"]
,       "name": "ImageOnlyCheckpointLoader"
,       "display_name": "Image Only Checkpoint Loader (img2vid model)"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "loaders/video_models"
,       "output_node": false
    }
,   "SVD_img2vid_Conditioning": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "init_image": ["IMAGE"]
,               "vae": ["VAE"]
,               "width": ["INT",{"default":1024,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":576,"min":16,"max":16384,"step":8}]
,               "video_frames": ["INT",{"default":14,"min":1,"max":4096}]
,               "motion_bucket_id": ["INT",{"default":127,"min":1,"max":1023}]
,               "fps": ["INT",{"default":6,"min":1,"max":1024}]
,               "augmentation_level": ["FLOAT",{"default":0,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["clip_vision","init_image","vae","width","height","video_frames","motion_bucket_id","fps","augmentation_level"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "SVD_img2vid_Conditioning"
,       "display_name": "SVD_img2vid_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "conditioning/video_models"
,       "output_node": false
    }
,   "VideoLinearCFGGuidance": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "min_cfg": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.5,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","min_cfg"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "VideoLinearCFGGuidance"
,       "display_name": "VideoLinearCFGGuidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "sampling/video_models"
,       "output_node": false
    }
,   "VideoTriangleCFGGuidance": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "min_cfg": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.5,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","min_cfg"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "VideoTriangleCFGGuidance"
,       "display_name": "VideoTriangleCFGGuidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "sampling/video_models"
,       "output_node": false
    }
,   "ImageOnlyCheckpointSave": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip_vision": ["CLIP_VISION"]
,               "vae": ["VAE"]
,               "filename_prefix": ["STRING",{"default":"checkpoints/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["model","clip_vision","vae","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImageOnlyCheckpointSave"
,       "display_name": "ImageOnlyCheckpointSave"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "SelfAttentionGuidance": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "scale": ["FLOAT",{"default":0.5,"min":-2,"max":5,"step":0.01}]
,               "blur_sigma": ["FLOAT",{"default":2,"min":0,"max":10,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["model","scale","blur_sigma"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "SelfAttentionGuidance"
,       "display_name": "Self-Attention Guidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sag"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "PerpNeg": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "empty_conditioning": ["CONDITIONING"]
,               "neg_scale": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","empty_conditioning","neg_scale"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "PerpNeg"
,       "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)"
,       "description": ""
,       "python_module": "comfy_extras.nodes_perpneg"
,       "category": "_for_testing"
,       "output_node": false
,       "deprecated": true
    }
,   "PerpNegGuider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "empty_conditioning": ["CONDITIONING"]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "neg_scale": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","positive","negative","empty_conditioning","cfg","neg_scale"]
        }
,       "output": ["GUIDER"]
,       "output_is_list": [false]
,       "output_name": ["GUIDER"]
,       "name": "PerpNegGuider"
,       "display_name": "PerpNegGuider"
,       "description": ""
,       "python_module": "comfy_extras.nodes_perpneg"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "StableZero123_Conditioning": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "init_image": ["IMAGE"]
,               "vae": ["VAE"]
,               "width": ["INT",{"default":256,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":256,"min":16,"max":16384,"step":8}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
,               "elevation": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
,               "azimuth": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
            }
        }
,       "input_order": {
            "required": ["clip_vision","init_image","vae","width","height","batch_size","elevation","azimuth"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "StableZero123_Conditioning"
,       "display_name": "StableZero123_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable3d"
,       "category": "conditioning/3d_models"
,       "output_node": false
    }
,   "StableZero123_Conditioning_Batched": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "init_image": ["IMAGE"]
,               "vae": ["VAE"]
,               "width": ["INT",{"default":256,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":256,"min":16,"max":16384,"step":8}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
,               "elevation": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
,               "azimuth": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
,               "elevation_batch_increment": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
,               "azimuth_batch_increment": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
            }
        }
,       "input_order": {
            "required": ["clip_vision","init_image","vae","width","height","batch_size","elevation","azimuth","elevation_batch_increment","azimuth_batch_increment"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "StableZero123_Conditioning_Batched"
,       "display_name": "StableZero123_Conditioning_Batched"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable3d"
,       "category": "conditioning/3d_models"
,       "output_node": false
    }
,   "SV3D_Conditioning": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "init_image": ["IMAGE"]
,               "vae": ["VAE"]
,               "width": ["INT",{"default":576,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":576,"min":16,"max":16384,"step":8}]
,               "video_frames": ["INT",{"default":21,"min":1,"max":4096}]
,               "elevation": ["FLOAT",{"default":0,"min":-90,"max":90,"step":0.1,"round":false}]
            }
        }
,       "input_order": {
            "required": ["clip_vision","init_image","vae","width","height","video_frames","elevation"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "SV3D_Conditioning"
,       "display_name": "SV3D_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable3d"
,       "category": "conditioning/3d_models"
,       "output_node": false
    }
,   "SD_4XUpscale_Conditioning": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "scale_ratio": ["FLOAT",{"default":4,"min":0,"max":10,"step":0.01}]
,               "noise_augmentation": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["images","positive","negative","scale_ratio","noise_augmentation"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "SD_4XUpscale_Conditioning"
,       "display_name": "SD_4XUpscale_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sdupscale"
,       "category": "conditioning/upscale_diffusion"
,       "output_node": false
    }
,   "PhotoMakerLoader": {
        "input": {
            "required": {
                "photomaker_model_name": [[]]
            }
        }
,       "input_order": {
            "required": ["photomaker_model_name"]
        }
,       "output": ["PHOTOMAKER"]
,       "output_is_list": [false]
,       "output_name": ["PHOTOMAKER"]
,       "name": "PhotoMakerLoader"
,       "display_name": "PhotoMakerLoader"
,       "description": ""
,       "python_module": "comfy_extras.nodes_photomaker"
,       "category": "_for_testing/photomaker"
,       "output_node": false
    }
,   "PhotoMakerEncode": {
        "input": {
            "required": {
                "photomaker": ["PHOTOMAKER"]
,               "image": ["IMAGE"]
,               "clip": ["CLIP"]
,               "text": ["STRING",{"multiline":true,"dynamicPrompts":true,"default":"photograph of photomaker"}]
            }
        }
,       "input_order": {
            "required": ["photomaker","image","clip","text"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "PhotoMakerEncode"
,       "display_name": "PhotoMakerEncode"
,       "description": ""
,       "python_module": "comfy_extras.nodes_photomaker"
,       "category": "_for_testing/photomaker"
,       "output_node": false
    }
,   "CLIPTextEncodeControlnet": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "conditioning": ["CONDITIONING"]
,               "text": ["STRING",{"multiline":true,"dynamicPrompts":true}]
            }
        }
,       "input_order": {
            "required": ["clip","conditioning","text"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeControlnet"
,       "display_name": "CLIPTextEncodeControlnet"
,       "description": ""
,       "python_module": "comfy_extras.nodes_cond"
,       "category": "_for_testing/conditioning"
,       "output_node": false
    }
,   "Morphology": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "operation": [["erode","dilate","open","close","gradient","bottom_hat","top_hat"]]
,               "kernel_size": ["INT",{"default":3,"min":3,"max":999,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","operation","kernel_size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Morphology"
,       "display_name": "ImageMorphology"
,       "description": ""
,       "python_module": "comfy_extras.nodes_morphology"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "StableCascade_EmptyLatentImage": {
        "input": {
            "required": {
                "width": ["INT",{"default":1024,"min":256,"max":16384,"step":8}]
,               "height": ["INT",{"default":1024,"min":256,"max":16384,"step":8}]
,               "compression": ["INT",{"default":42,"min":4,"max":128,"step":1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["width","height","compression","batch_size"]
        }
,       "output": ["LATENT","LATENT"]
,       "output_is_list": [false,false]
,       "output_name": ["stage_c","stage_b"]
,       "name": "StableCascade_EmptyLatentImage"
,       "display_name": "StableCascade_EmptyLatentImage"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable_cascade"
,       "category": "latent/stable_cascade"
,       "output_node": false
    }
,   "StableCascade_StageB_Conditioning": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "stage_c": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["conditioning","stage_c"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "StableCascade_StageB_Conditioning"
,       "display_name": "StableCascade_StageB_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable_cascade"
,       "category": "conditioning/stable_cascade"
,       "output_node": false
    }
,   "StableCascade_StageC_VAEEncode": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "vae": ["VAE"]
,               "compression": ["INT",{"default":42,"min":4,"max":128,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","vae","compression"]
        }
,       "output": ["LATENT","LATENT"]
,       "output_is_list": [false,false]
,       "output_name": ["stage_c","stage_b"]
,       "name": "StableCascade_StageC_VAEEncode"
,       "display_name": "StableCascade_StageC_VAEEncode"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable_cascade"
,       "category": "latent/stable_cascade"
,       "output_node": false
    }
,   "StableCascade_SuperResolutionControlnet": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["image","vae"]
        }
,       "output": ["IMAGE","LATENT","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["controlnet_input","stage_c","stage_b"]
,       "name": "StableCascade_SuperResolutionControlnet"
,       "display_name": "StableCascade_SuperResolutionControlnet"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable_cascade"
,       "category": "_for_testing/stable_cascade"
,       "output_node": false
,       "experimental": true
    }
,   "DifferentialDiffusion": {
        "input": {
            "required": {
                "model": ["MODEL"]
            }
        }
,       "input_order": {
            "required": ["model"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "DifferentialDiffusion"
,       "display_name": "Differential Diffusion"
,       "description": ""
,       "python_module": "comfy_extras.nodes_differential_diffusion"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "InstructPixToPixConditioning": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "vae": ["VAE"]
,               "pixels": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["positive","negative","vae","pixels"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "InstructPixToPixConditioning"
,       "display_name": "InstructPixToPixConditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_ip2p"
,       "category": "conditioning/instructpix2pix"
,       "output_node": false
    }
,   "ModelMergeSD1": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "time_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "label_emb.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "out.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","time_embed.","label_emb.","input_blocks.0.","input_blocks.1.","input_blocks.2.","input_blocks.3.","input_blocks.4.","input_blocks.5.","input_blocks.6.","input_blocks.7.","input_blocks.8.","input_blocks.9.","input_blocks.10.","input_blocks.11.","middle_block.0.","middle_block.1.","middle_block.2.","output_blocks.0.","output_blocks.1.","output_blocks.2.","output_blocks.3.","output_blocks.4.","output_blocks.5.","output_blocks.6.","output_blocks.7.","output_blocks.8.","output_blocks.9.","output_blocks.10.","output_blocks.11.","out."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSD1"
,       "display_name": "ModelMergeSD1"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeSD2": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "time_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "label_emb.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "out.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","time_embed.","label_emb.","input_blocks.0.","input_blocks.1.","input_blocks.2.","input_blocks.3.","input_blocks.4.","input_blocks.5.","input_blocks.6.","input_blocks.7.","input_blocks.8.","input_blocks.9.","input_blocks.10.","input_blocks.11.","middle_block.0.","middle_block.1.","middle_block.2.","output_blocks.0.","output_blocks.1.","output_blocks.2.","output_blocks.3.","output_blocks.4.","output_blocks.5.","output_blocks.6.","output_blocks.7.","output_blocks.8.","output_blocks.9.","output_blocks.10.","output_blocks.11.","out."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSD2"
,       "display_name": "ModelMergeSD2"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeSDXL": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "time_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "label_emb.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.0": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.1": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.2": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.3": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.4": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.5": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.6": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.7": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.8": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.0": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.1": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.2": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.0": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.1": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.2": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.3": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.4": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.5": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.6": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.7": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.8": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "out.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","time_embed.","label_emb.","input_blocks.0","input_blocks.1","input_blocks.2","input_blocks.3","input_blocks.4","input_blocks.5","input_blocks.6","input_blocks.7","input_blocks.8","middle_block.0","middle_block.1","middle_block.2","output_blocks.0","output_blocks.1","output_blocks.2","output_blocks.3","output_blocks.4","output_blocks.5","output_blocks.6","output_blocks.7","output_blocks.8","out."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSDXL"
,       "display_name": "ModelMergeSDXL"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeSD3_2B": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "pos_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "x_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "context_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "y_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "t_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.12.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.13.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.14.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.15.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.16.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.17.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.18.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.19.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.20.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.21.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.22.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.23.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "final_layer.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","pos_embed.","x_embedder.","context_embedder.","y_embedder.","t_embedder.","joint_blocks.0.","joint_blocks.1.","joint_blocks.2.","joint_blocks.3.","joint_blocks.4.","joint_blocks.5.","joint_blocks.6.","joint_blocks.7.","joint_blocks.8.","joint_blocks.9.","joint_blocks.10.","joint_blocks.11.","joint_blocks.12.","joint_blocks.13.","joint_blocks.14.","joint_blocks.15.","joint_blocks.16.","joint_blocks.17.","joint_blocks.18.","joint_blocks.19.","joint_blocks.20.","joint_blocks.21.","joint_blocks.22.","joint_blocks.23.","final_layer."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSD3_2B"
,       "display_name": "ModelMergeSD3_2B"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeFlux1": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "img_in.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "time_in.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "guidance_in": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "vector_in.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "txt_in.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.12.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.13.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.14.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.15.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.16.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.17.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.18.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.12.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.13.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.14.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.15.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.16.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.17.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.18.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.19.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.20.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.21.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.22.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.23.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.24.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.25.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.26.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.27.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.28.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.29.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.30.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.31.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.32.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.33.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.34.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.35.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.36.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.37.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "final_layer.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","img_in.","time_in.","guidance_in","vector_in.","txt_in.","double_blocks.0.","double_blocks.1.","double_blocks.2.","double_blocks.3.","double_blocks.4.","double_blocks.5.","double_blocks.6.","double_blocks.7.","double_blocks.8.","double_blocks.9.","double_blocks.10.","double_blocks.11.","double_blocks.12.","double_blocks.13.","double_blocks.14.","double_blocks.15.","double_blocks.16.","double_blocks.17.","double_blocks.18.","single_blocks.0.","single_blocks.1.","single_blocks.2.","single_blocks.3.","single_blocks.4.","single_blocks.5.","single_blocks.6.","single_blocks.7.","single_blocks.8.","single_blocks.9.","single_blocks.10.","single_blocks.11.","single_blocks.12.","single_blocks.13.","single_blocks.14.","single_blocks.15.","single_blocks.16.","single_blocks.17.","single_blocks.18.","single_blocks.19.","single_blocks.20.","single_blocks.21.","single_blocks.22.","single_blocks.23.","single_blocks.24.","single_blocks.25.","single_blocks.26.","single_blocks.27.","single_blocks.28.","single_blocks.29.","single_blocks.30.","single_blocks.31.","single_blocks.32.","single_blocks.33.","single_blocks.34.","single_blocks.35.","single_blocks.36.","single_blocks.37.","final_layer."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeFlux1"
,       "display_name": "ModelMergeFlux1"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeSD35_Large": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "pos_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "x_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "context_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "y_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "t_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.12.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.13.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.14.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.15.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.16.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.17.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.18.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.19.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.20.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.21.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.22.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.23.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.24.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.25.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.26.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.27.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.28.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.29.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.30.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.31.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.32.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.33.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.34.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.35.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.36.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.37.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "final_layer.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","pos_embed.","x_embedder.","context_embedder.","y_embedder.","t_embedder.","joint_blocks.0.","joint_blocks.1.","joint_blocks.2.","joint_blocks.3.","joint_blocks.4.","joint_blocks.5.","joint_blocks.6.","joint_blocks.7.","joint_blocks.8.","joint_blocks.9.","joint_blocks.10.","joint_blocks.11.","joint_blocks.12.","joint_blocks.13.","joint_blocks.14.","joint_blocks.15.","joint_blocks.16.","joint_blocks.17.","joint_blocks.18.","joint_blocks.19.","joint_blocks.20.","joint_blocks.21.","joint_blocks.22.","joint_blocks.23.","joint_blocks.24.","joint_blocks.25.","joint_blocks.26.","joint_blocks.27.","joint_blocks.28.","joint_blocks.29.","joint_blocks.30.","joint_blocks.31.","joint_blocks.32.","joint_blocks.33.","joint_blocks.34.","joint_blocks.35.","joint_blocks.36.","joint_blocks.37.","final_layer."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSD35_Large"
,       "display_name": "ModelMergeSD35_Large"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "PerturbedAttentionGuidance": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "scale": ["FLOAT",{"default":3,"min":0,"max":100,"step":0.01,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","scale"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "PerturbedAttentionGuidance"
,       "display_name": "PerturbedAttentionGuidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_pag"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "AlignYourStepsScheduler": {
        "input": {
            "required": {
                "model_type": [["SD1","SDXL","SVD"]]
,               "steps": ["INT",{"default":10,"min":10,"max":10000}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model_type","steps","denoise"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "AlignYourStepsScheduler"
,       "display_name": "AlignYourStepsScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_align_your_steps"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "UNetSelfAttentionMultiply": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "q": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "k": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "v": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "out": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","q","k","v","out"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "UNetSelfAttentionMultiply"
,       "display_name": "UNetSelfAttentionMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_attention_multiply"
,       "category": "_for_testing/attention_experiments"
,       "output_node": false
    }
,   "UNetCrossAttentionMultiply": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "q": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "k": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "v": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "out": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","q","k","v","out"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "UNetCrossAttentionMultiply"
,       "display_name": "UNetCrossAttentionMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_attention_multiply"
,       "category": "_for_testing/attention_experiments"
,       "output_node": false
    }
,   "CLIPAttentionMultiply": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "q": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "k": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "v": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "out": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["clip","q","k","v","out"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPAttentionMultiply"
,       "display_name": "CLIPAttentionMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_attention_multiply"
,       "category": "_for_testing/attention_experiments"
,       "output_node": false
    }
,   "UNetTemporalAttentionMultiply": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "self_structural": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "self_temporal": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "cross_structural": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "cross_temporal": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","self_structural","self_temporal","cross_structural","cross_temporal"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "UNetTemporalAttentionMultiply"
,       "display_name": "UNetTemporalAttentionMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_attention_multiply"
,       "category": "_for_testing/attention_experiments"
,       "output_node": false
    }
,   "SamplerLCMUpscale": {
        "input": {
            "required": {
                "scale_ratio": ["FLOAT",{"default":1,"min":0.1,"max":20,"step":0.01}]
,               "scale_steps": ["INT",{"default":-1,"min":-1,"max":1000,"step":1}]
,               "upscale_method": [["bislerp","nearest-exact","bilinear","area","bicubic"]]
            }
        }
,       "input_order": {
            "required": ["scale_ratio","scale_steps","upscale_method"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerLCMUpscale"
,       "display_name": "SamplerLCMUpscale"
,       "description": ""
,       "python_module": "comfy_extras.nodes_advanced_samplers"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerEulerCFGpp": {
        "input": {
            "required": {
                "version": [["regular","alternative"]]
            }
        }
,       "input_order": {
            "required": ["version"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerEulerCFGpp"
,       "display_name": "SamplerEulerCFG++"
,       "description": ""
,       "python_module": "comfy_extras.nodes_advanced_samplers"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "WebcamCapture": {
        "input": {
            "required": {
                "image": ["WEBCAM",{}]
,               "width": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "height": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "capture_on_queue": ["BOOLEAN",{"default":true}]
            }
        }
,       "input_order": {
            "required": ["image","width","height","capture_on_queue"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "WebcamCapture"
,       "display_name": "Webcam Capture"
,       "description": ""
,       "python_module": "comfy_extras.nodes_webcam"
,       "category": "image"
,       "output_node": false
    }
,   "EmptyLatentAudio": {
        "input": {
            "required": {
                "seconds": ["FLOAT",{"default":47.6,"min":1,"max":1000,"step":0.1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096,"tooltip":"The number of latent images in the batch."}]
            }
        }
,       "input_order": {
            "required": ["seconds","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "EmptyLatentAudio"
,       "display_name": "EmptyLatentAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "latent/audio"
,       "output_node": false
    }
,   "VAEEncodeAudio": {
        "input": {
            "required": {
                "audio": ["AUDIO"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["audio","vae"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "VAEEncodeAudio"
,       "display_name": "VAEEncodeAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "latent/audio"
,       "output_node": false
    }
,   "VAEDecodeAudio": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["samples","vae"]
        }
,       "output": ["AUDIO"]
,       "output_is_list": [false]
,       "output_name": ["AUDIO"]
,       "name": "VAEDecodeAudio"
,       "display_name": "VAEDecodeAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "latent/audio"
,       "output_node": false
    }
,   "SaveAudio": {
        "input": {
            "required": {
                "audio": ["AUDIO"]
,               "filename_prefix": ["STRING",{"default":"audio/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["audio","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveAudio"
,       "display_name": "SaveAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "audio"
,       "output_node": true
    }
,   "LoadAudio": {
        "input": {
            "required": {
                "audio": [[],{"audio_upload":true}]
            }
        }
,       "input_order": {
            "required": ["audio"]
        }
,       "output": ["AUDIO"]
,       "output_is_list": [false]
,       "output_name": ["AUDIO"]
,       "name": "LoadAudio"
,       "display_name": "LoadAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "audio"
,       "output_node": false
    }
,   "PreviewAudio": {
        "input": {
            "required": {
                "audio": ["AUDIO"]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["audio"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "PreviewAudio"
,       "display_name": "PreviewAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "audio"
,       "output_node": true
    }
,   "TripleCLIPLoader": {
        "input": {
            "required": {
                "clip_name1": [[]]
,               "clip_name2": [[]]
,               "clip_name3": [[]]
            }
        }
,       "input_order": {
            "required": ["clip_name1","clip_name2","clip_name3"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "TripleCLIPLoader"
,       "display_name": "TripleCLIPLoader"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "advanced/loaders"
,       "output_node": false
    }
,   "EmptySD3LatentImage": {
        "input": {
            "required": {
                "width": ["INT",{"default":1024,"min":16,"max":16384,"step":16}]
,               "height": ["INT",{"default":1024,"min":16,"max":16384,"step":16}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["width","height","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "EmptySD3LatentImage"
,       "display_name": "EmptySD3LatentImage"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "latent/sd3"
,       "output_node": false
    }
,   "CLIPTextEncodeSD3": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "clip_l": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "clip_g": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "t5xxl": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "empty_padding": [["none","empty_prompt"]]
            }
        }
,       "input_order": {
            "required": ["clip","clip_l","clip_g","t5xxl","empty_padding"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeSD3"
,       "display_name": "CLIPTextEncodeSD3"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "ControlNetApplySD3": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "control_net": ["CONTROL_NET"]
,               "vae": ["VAE"]
,               "image": ["IMAGE"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["positive","negative","control_net","vae","image","strength","start_percent","end_percent"]
        }
,       "output": ["CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false]
,       "output_name": ["positive","negative"]
,       "name": "ControlNetApplySD3"
,       "display_name": "Apply Controlnet with VAE"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "conditioning/controlnet"
,       "output_node": false
,       "deprecated": true
    }
,   "SkipLayerGuidanceSD3": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "layers": ["STRING",{"default":"7, 8, 9","multiline":false}]
,               "scale": ["FLOAT",{"default":3,"min":0,"max":10,"step":0.1}]
,               "start_percent": ["FLOAT",{"default":0.01,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":0.15,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["model","layers","scale","start_percent","end_percent"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "SkipLayerGuidanceSD3"
,       "display_name": "SkipLayerGuidanceSD3"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "advanced/guidance"
,       "output_node": false
    }
,   "GITSScheduler": {
        "input": {
            "required": {
                "coeff": ["FLOAT",{"default":1.2,"min":0.8,"max":1.5,"step":0.05}]
,               "steps": ["INT",{"default":10,"min":2,"max":1000}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["coeff","steps","denoise"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "GITSScheduler"
,       "display_name": "GITSScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_gits"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "SetUnionControlNetType": {
        "input": {
            "required": {
                "control_net": ["CONTROL_NET"]
,               "type": [["auto","openpose","depth","hed/pidi/scribble/ted","canny/lineart/anime_lineart/mlsd","normal","segment","tile","repaint"]]
            }
        }
,       "input_order": {
            "required": ["control_net","type"]
        }
,       "output": ["CONTROL_NET"]
,       "output_is_list": [false]
,       "output_name": ["CONTROL_NET"]
,       "name": "SetUnionControlNetType"
,       "display_name": "SetUnionControlNetType"
,       "description": ""
,       "python_module": "comfy_extras.nodes_controlnet"
,       "category": "conditioning/controlnet"
,       "output_node": false
    }
,   "ControlNetInpaintingAliMamaApply": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "control_net": ["CONTROL_NET"]
,               "vae": ["VAE"]
,               "image": ["IMAGE"]
,               "mask": ["MASK"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["positive","negative","control_net","vae","image","mask","strength","start_percent","end_percent"]
        }
,       "output": ["CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false]
,       "output_name": ["positive","negative"]
,       "name": "ControlNetInpaintingAliMamaApply"
,       "display_name": "ControlNetInpaintingAliMamaApply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_controlnet"
,       "category": "conditioning/controlnet"
,       "output_node": false
    }
,   "CLIPTextEncodeHunyuanDiT": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "bert": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "mt5xl": ["STRING",{"multiline":true,"dynamicPrompts":true}]
            }
        }
,       "input_order": {
            "required": ["clip","bert","mt5xl"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeHunyuanDiT"
,       "display_name": "CLIPTextEncodeHunyuanDiT"
,       "description": ""
,       "python_module": "comfy_extras.nodes_hunyuan"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "CLIPTextEncodeFlux": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "clip_l": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "t5xxl": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "guidance": ["FLOAT",{"default":3.5,"min":0,"max":100,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["clip","clip_l","t5xxl","guidance"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeFlux"
,       "display_name": "CLIPTextEncodeFlux"
,       "description": ""
,       "python_module": "comfy_extras.nodes_flux"
,       "category": "advanced/conditioning/flux"
,       "output_node": false
    }
,   "FluxGuidance": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "guidance": ["FLOAT",{"default":3.5,"min":0,"max":100,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["conditioning","guidance"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "FluxGuidance"
,       "display_name": "FluxGuidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_flux"
,       "category": "advanced/conditioning/flux"
,       "output_node": false
    }
,   "LoraSave": {
        "input": {
            "required": {
                "filename_prefix": ["STRING",{"default":"loras/ComfyUI_extracted_lora"}]
,               "rank": ["INT",{"default":8,"min":1,"max":4096,"step":1}]
,               "lora_type": [["standard","full_diff"]]
,               "bias_diff": ["BOOLEAN",{"default":true}]
            }
,           "optional": {
                "model_diff": ["MODEL",{"tooltip":"The ModelSubtract output to be converted to a lora."}]
,               "text_encoder_diff": ["CLIP",{"tooltip":"The CLIPSubtract output to be converted to a lora."}]
            }
        }
,       "input_order": {
            "required": ["filename_prefix","rank","lora_type","bias_diff"]
,           "optional": ["model_diff","text_encoder_diff"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "LoraSave"
,       "display_name": "Extract and Save Lora"
,       "description": ""
,       "python_module": "comfy_extras.nodes_lora_extract"
,       "category": "_for_testing"
,       "output_node": true
    }
,   "TorchCompileModel": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "backend": [["inductor","cudagraphs"]]
            }
        }
,       "input_order": {
            "required": ["model","backend"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "TorchCompileModel"
,       "display_name": "TorchCompileModel"
,       "description": ""
,       "python_module": "comfy_extras.nodes_torch_compile"
,       "category": "_for_testing"
,       "output_node": false
,       "experimental": true
    }
,   "EmptyMochiLatentVideo": {
        "input": {
            "required": {
                "width": ["INT",{"default":848,"min":16,"max":16384,"step":16}]
,               "height": ["INT",{"default":480,"min":16,"max":16384,"step":16}]
,               "length": ["INT",{"default":25,"min":7,"max":16384,"step":6}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["width","height","length","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "EmptyMochiLatentVideo"
,       "display_name": "EmptyMochiLatentVideo"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mochi"
,       "category": "latent/mochi"
,       "output_node": false
    }
,   "SaveImageWebsocket": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveImageWebsocket"
,       "display_name": "SaveImageWebsocket"
,       "description": ""
,       "python_module": "custom_nodes.websocket_image_save"
,       "category": "api/image"
,       "output_node": true
    }
,   "BLIP Model Loader": {
        "input": {
            "required": {
                "blip_model": ["STRING",{"default":"Salesforce/blip-image-captioning-base"}]
,               "vqa_model_id": ["STRING",{"default":"Salesforce/blip-vqa-base"}]
,               "device": [["cuda","cpu"]]
            }
        }
,       "input_order": {
            "required": ["blip_model","vqa_model_id","device"]
        }
,       "output": ["BLIP_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["BLIP_MODEL"]
,       "name": "BLIP Model Loader"
,       "display_name": "BLIP Model Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders"
,       "output_node": false
    }
,   "Blend Latents": {
        "input": {
            "required": {
                "latent_a": ["LATENT"]
,               "latent_b": ["LATENT"]
,               "operation": [["add","multiply","divide","subtract","overlay","hard_light","soft_light","screen","linear_dodge","difference","exclusion","random"]]
,               "blend": ["FLOAT",{"default":0.5,"min":0.01,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["latent_a","latent_b","operation","blend"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "Blend Latents"
,       "display_name": "Blend Latents"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Latent"
,       "output_node": false
    }
,   "Bus Node": {
        "input": {
            "required": {
            }
,           "optional": {
                "bus": ["BUS"]
,               "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["bus","model","clip","vae","positive","negative"]
        }
,       "output": ["BUS","MODEL","CLIP","VAE","CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false,false,false,false,false]
,       "output_name": ["bus","model","clip","vae","positive","negative"]
,       "name": "Bus Node"
,       "display_name": "Bus Node"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Utilities"
,       "output_node": false
    }
,   "Cache Node": {
        "input": {
            "required": {
                "latent_suffix": ["STRING",{"default":"28837947_cache","multiline":false}]
,               "image_suffix": ["STRING",{"default":"15708256_cache","multiline":false}]
,               "conditioning_suffix": ["STRING",{"default":"40723713_cache","multiline":false}]
            }
,           "optional": {
                "output_path": ["STRING",{"default":"/home/runner/ComfyUI/custom_nodes/was-node-suite-comfyui/cache","multiline":false}]
,               "latent": ["LATENT"]
,               "image": ["IMAGE"]
,               "conditioning": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["latent_suffix","image_suffix","conditioning_suffix"]
,           "optional": ["output_path","latent","image","conditioning"]
        }
,       "output": ["STRING","STRING","STRING"]
,       "output_is_list": [false,false,false]
,       "output_name": ["latent_filename","image_filename","conditioning_filename"]
,       "name": "Cache Node"
,       "display_name": "Cache Node"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/IO"
,       "output_node": true
    }
,   "Checkpoint Loader": {
        "input": {
            "required": {
                "config_name": [["anything_v3.yaml","v1-inference.yaml","v1-inference_clip_skip_2.yaml","v1-inference_clip_skip_2_fp16.yaml","v1-inference_fp16.yaml","v1-inpainting-inference.yaml","v2-inference-v.yaml","v2-inference-v_fp32.yaml","v2-inference.yaml","v2-inference_fp32.yaml","v2-inpainting-inference.yaml"]]
,               "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["config_name","ckpt_name"]
        }
,       "output": ["MODEL","CLIP","VAE","STRING"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["MODEL","CLIP","VAE","NAME_STRING"]
,       "name": "Checkpoint Loader"
,       "display_name": "Checkpoint Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders/Advanced"
,       "output_node": false
    }
,   "Checkpoint Loader (Simple)": {
        "input": {
            "required": {
                "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["ckpt_name"]
        }
,       "output": ["MODEL","CLIP","VAE","STRING"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["MODEL","CLIP","VAE","NAME_STRING"]
,       "name": "Checkpoint Loader (Simple)"
,       "display_name": "Checkpoint Loader (Simple)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders"
,       "output_node": false
    }
,   "CLIPTextEncode (NSP)": {
        "input": {
            "required": {
                "mode": [["Noodle Soup Prompts","Wildcards"]]
,               "noodle_key": ["STRING",{"default":"__","multiline":false}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "text": ["STRING",{"multiline":true}]
,               "clip": ["CLIP"]
            }
        }
,       "input_order": {
            "required": ["mode","noodle_key","seed","text","clip"]
        }
,       "output": ["CONDITIONING","STRING","STRING"]
,       "output_is_list": [false,false,false]
,       "output_name": ["conditioning","parsed_text","raw_text"]
,       "name": "CLIPTextEncode (NSP)"
,       "display_name": "CLIPTextEncode (NSP)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Conditioning"
,       "output_node": true
    }
,   "CLIP Input Switch": {
        "input": {
            "required": {
                "clip_a": ["CLIP"]
,               "clip_b": ["CLIP"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["clip_a","clip_b","boolean"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIP Input Switch"
,       "display_name": "CLIP Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "CLIP Vision Input Switch": {
        "input": {
            "required": {
                "clip_vision_a": ["CLIP_VISION"]
,               "clip_vision_b": ["CLIP_VISION"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["clip_vision_a","clip_vision_b","boolean"]
        }
,       "output": ["CLIP_VISION"]
,       "output_is_list": [false]
,       "output_name": ["CLIP_VISION"]
,       "name": "CLIP Vision Input Switch"
,       "display_name": "CLIP Vision Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Conditioning Input Switch": {
        "input": {
            "required": {
                "conditioning_a": ["CONDITIONING"]
,               "conditioning_b": ["CONDITIONING"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["conditioning_a","conditioning_b","boolean"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "Conditioning Input Switch"
,       "display_name": "Conditioning Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Constant Number": {
        "input": {
            "required": {
                "number_type": [["integer","float","bool"]]
,               "number": ["FLOAT",{"default":0,"min":-18446744073709552000,"max":18446744073709552000,"step":0.01}]
            }
,           "optional": {
                "number_as_text": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["number_type","number"]
,           "optional": ["number_as_text"]
        }
,       "output": ["NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["NUMBER","FLOAT","INT"]
,       "name": "Constant Number"
,       "display_name": "Constant Number"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number"
,       "output_node": false
    }
,   "Create Grid Image": {
        "input": {
            "required": {
                "images_path": ["STRING",{"default":"./ComfyUI/input/","multiline":false}]
,               "pattern_glob": ["STRING",{"default":"*","multiline":false}]
,               "include_subfolders": [["false","true"]]
,               "border_width": ["INT",{"default":3,"min":0,"max":100,"step":1}]
,               "number_of_columns": ["INT",{"default":6,"min":1,"max":24,"step":1}]
,               "max_cell_size": ["INT",{"default":256,"min":32,"max":1280,"step":1}]
,               "border_red": ["INT",{"default":0,"min":0,"max":255,"step":1}]
,               "border_green": ["INT",{"default":0,"min":0,"max":255,"step":1}]
,               "border_blue": ["INT",{"default":0,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images_path","pattern_glob","include_subfolders","border_width","number_of_columns","max_cell_size","border_red","border_green","border_blue"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Create Grid Image"
,       "display_name": "Create Grid Image"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Create Grid Image from Batch": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "border_width": ["INT",{"default":3,"min":0,"max":100,"step":1}]
,               "number_of_columns": ["INT",{"default":6,"min":1,"max":24,"step":1}]
,               "max_cell_size": ["INT",{"default":256,"min":32,"max":2048,"step":1}]
,               "border_red": ["INT",{"default":0,"min":0,"max":255,"step":1}]
,               "border_green": ["INT",{"default":0,"min":0,"max":255,"step":1}]
,               "border_blue": ["INT",{"default":0,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images","border_width","number_of_columns","max_cell_size","border_red","border_green","border_blue"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Create Grid Image from Batch"
,       "display_name": "Create Grid Image from Batch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Create Morph Image": {
        "input": {
            "required": {
                "image_a": ["IMAGE"]
,               "image_b": ["IMAGE"]
,               "transition_frames": ["INT",{"default":30,"min":2,"max":60,"step":1}]
,               "still_image_delay_ms": ["FLOAT",{"default":2500,"min":0.1,"max":60000,"step":0.1}]
,               "duration_ms": ["FLOAT",{"default":0.1,"min":0.1,"max":60000,"step":0.1}]
,               "loops": ["INT",{"default":0,"min":0,"max":100,"step":1}]
,               "max_size": ["INT",{"default":512,"min":128,"max":1280,"step":1}]
,               "output_path": ["STRING",{"default":"./ComfyUI/output","multiline":false}]
,               "filename": ["STRING",{"default":"morph","multiline":false}]
,               "filetype": [["GIF","APNG"]]
            }
        }
,       "input_order": {
            "required": ["image_a","image_b","transition_frames","still_image_delay_ms","duration_ms","loops","max_size","output_path","filename","filetype"]
        }
,       "output": ["IMAGE","IMAGE","STRING","STRING"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["image_a_pass","image_b_pass","filepath_text","filename_text"]
,       "name": "Create Morph Image"
,       "display_name": "Create Morph Image"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Animation"
,       "output_node": false
    }
,   "Create Morph Image from Path": {
        "input": {
            "required": {
                "transition_frames": ["INT",{"default":30,"min":2,"max":60,"step":1}]
,               "still_image_delay_ms": ["FLOAT",{"default":2500,"min":0.1,"max":60000,"step":0.1}]
,               "duration_ms": ["FLOAT",{"default":0.1,"min":0.1,"max":60000,"step":0.1}]
,               "loops": ["INT",{"default":0,"min":0,"max":100,"step":1}]
,               "max_size": ["INT",{"default":512,"min":128,"max":1280,"step":1}]
,               "input_path": ["STRING",{"default":"./ComfyUI","multiline":false}]
,               "input_pattern": ["STRING",{"default":"*","multiline":false}]
,               "output_path": ["STRING",{"default":"./ComfyUI/output","multiline":false}]
,               "filename": ["STRING",{"default":"morph","multiline":false}]
,               "filetype": [["GIF","APNG"]]
            }
        }
,       "input_order": {
            "required": ["transition_frames","still_image_delay_ms","duration_ms","loops","max_size","input_path","input_pattern","output_path","filename","filetype"]
        }
,       "output": ["STRING","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["filepath_text","filename_text"]
,       "name": "Create Morph Image from Path"
,       "display_name": "Create Morph Image from Path"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Animation"
,       "output_node": false
    }
,   "Create Video from Path": {
        "input": {
            "required": {
                "transition_frames": ["INT",{"default":30,"min":0,"max":120,"step":1}]
,               "image_delay_sec": ["FLOAT",{"default":2.5,"min":0.01,"max":60000,"step":0.01}]
,               "fps": ["INT",{"default":30,"min":1,"max":60,"step":1}]
,               "max_size": ["INT",{"default":512,"min":128,"max":1920,"step":1}]
,               "input_path": ["STRING",{"default":"./ComfyUI/input","multiline":false}]
,               "output_path": ["STRING",{"default":"./ComfyUI/output","multiline":false}]
,               "filename": ["STRING",{"default":"comfy_video","multiline":false}]
,               "codec": [["AVC1","FFV1","H264","MP4V"]]
            }
        }
,       "input_order": {
            "required": ["transition_frames","image_delay_sec","fps","max_size","input_path","output_path","filename","codec"]
        }
,       "output": ["STRING","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["filepath_text","filename_text"]
,       "name": "Create Video from Path"
,       "display_name": "Create Video from Path"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Animation"
,       "output_node": false
    }
,   "CLIPSeg Masking": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "text": ["STRING",{"default":"","multiline":false}]
            }
,           "optional": {
                "clipseg_model": ["CLIPSEG_MODEL"]
            }
        }
,       "input_order": {
            "required": ["image","text"]
,           "optional": ["clipseg_model"]
        }
,       "output": ["MASK","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["MASK","MASK_IMAGE"]
,       "name": "CLIPSeg Masking"
,       "display_name": "CLIPSeg Masking"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "CLIPSeg Model Loader": {
        "input": {
            "required": {
                "model": ["STRING",{"default":"CIDAS/clipseg-rd64-refined","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["model"]
        }
,       "output": ["CLIPSEG_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["clipseg_model"]
,       "name": "CLIPSeg Model Loader"
,       "display_name": "CLIPSeg Model Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders"
,       "output_node": false
    }
,   "CLIPSeg Batch Masking": {
        "input": {
            "required": {
                "image_a": ["IMAGE"]
,               "image_b": ["IMAGE"]
,               "text_a": ["STRING",{"default":"","multiline":false}]
,               "text_b": ["STRING",{"default":"","multiline":false}]
            }
,           "optional": {
                "image_c": ["IMAGE"]
,               "image_d": ["IMAGE"]
,               "image_e": ["IMAGE"]
,               "image_f": ["IMAGE"]
,               "text_c": ["STRING",{"default":"","multiline":false}]
,               "text_d": ["STRING",{"default":"","multiline":false}]
,               "text_e": ["STRING",{"default":"","multiline":false}]
,               "text_f": ["STRING",{"default":"","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["image_a","image_b","text_a","text_b"]
,           "optional": ["image_c","image_d","image_e","image_f","text_c","text_d","text_e","text_f"]
        }
,       "output": ["IMAGE","MASK","IMAGE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["IMAGES_BATCH","MASKS_BATCH","MASK_IMAGES_BATCH"]
,       "name": "CLIPSeg Batch Masking"
,       "display_name": "CLIPSeg Batch Masking"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Convert Masks to Images": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGES"]
,       "name": "Convert Masks to Images"
,       "display_name": "Convert Masks to Images"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Control Net Model Input Switch": {
        "input": {
            "required": {
                "control_net_a": ["CONTROL_NET"]
,               "control_net_b": ["CONTROL_NET"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["control_net_a","control_net_b","boolean"]
        }
,       "output": ["CONTROL_NET"]
,       "output_is_list": [false]
,       "output_name": ["CONTROL_NET"]
,       "name": "Control Net Model Input Switch"
,       "display_name": "Control Net Model Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Debug Number to Console": {
        "input": {
            "required": {
                "number": ["NUMBER"]
,               "label": ["STRING",{"default":"Debug to Console","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["number","label"]
        }
,       "output": ["NUMBER"]
,       "output_is_list": [false]
,       "output_name": ["NUMBER"]
,       "name": "Debug Number to Console"
,       "display_name": "Debug Number to Console"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Debug"
,       "output_node": true
    }
,   "Dictionary to Console": {
        "input": {
            "required": {
                "dictionary": ["DICT"]
,               "label": ["STRING",{"default":"Dictionary Output","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["dictionary","label"]
        }
,       "output": ["DICT"]
,       "output_is_list": [false]
,       "output_name": ["DICT"]
,       "name": "Dictionary to Console"
,       "display_name": "Dictionary to Console"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Debug"
,       "output_node": true
    }
,   "Diffusers Model Loader": {
        "input": {
            "required": {
                "model_path": [[]]
            }
        }
,       "input_order": {
            "required": ["model_path"]
        }
,       "output": ["MODEL","CLIP","VAE","STRING"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["MODEL","CLIP","VAE","NAME_STRING"]
,       "name": "Diffusers Model Loader"
,       "display_name": "Diffusers Model Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders/Advanced"
,       "output_node": false
    }
,   "Diffusers Hub Model Down-Loader": {
        "input": {
            "required": {
                "repo_id": ["STRING",{"multiline":false}]
,               "revision": ["STRING",{"default":"None","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["repo_id","revision"]
        }
,       "output": ["MODEL","CLIP","VAE","STRING"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["MODEL","CLIP","VAE","NAME_STRING"]
,       "name": "Diffusers Hub Model Down-Loader"
,       "display_name": "Diffusers Hub Model Down-Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders/Advanced"
,       "output_node": false
    }
,   "Export API": {
        "input": {
            "required": {
                "save_prompt_api": [["true","true"]]
,               "output_path": ["STRING",{"default":"./ComfyUI/output/","multiline":false}]
,               "filename_prefix": ["STRING",{"default":"ComfyUI_Prompt"}]
,               "filename_delimiter": ["STRING",{"default":"_"}]
,               "filename_number_padding": ["INT",{"default":4,"min":2,"max":9,"step":1}]
,               "parse_text_tokens": ["BOOLEAN",{"default":false}]
            }
,           "hidden": {
                "prompt": "PROMPT"
            }
        }
,       "input_order": {
            "required": ["save_prompt_api","output_path","filename_prefix","filename_delimiter","filename_number_padding","parse_text_tokens"]
,           "hidden": ["prompt"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "Export API"
,       "display_name": "Export API"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Debug"
,       "output_node": true
    }
,   "Latent Input Switch": {
        "input": {
            "required": {
                "latent_a": ["LATENT"]
,               "latent_b": ["LATENT"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["latent_a","latent_b","boolean"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "Latent Input Switch"
,       "display_name": "Latent Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Load Cache": {
        "input": {
            "required": {
                "latent_path": ["STRING",{"default":"","multiline":false}]
,               "image_path": ["STRING",{"default":"","multiline":false}]
,               "conditioning_path": ["STRING",{"default":"","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["latent_path","image_path","conditioning_path"]
        }
,       "output": ["LATENT","IMAGE","CONDITIONING"]
,       "output_is_list": [false,false,false]
,       "output_name": ["LATENT","IMAGE","CONDITIONING"]
,       "name": "Load Cache"
,       "display_name": "Load Cache"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/IO"
,       "output_node": false
    }
,   "Logic Boolean": {
        "input": {
            "required": {
                "boolean": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["boolean"]
        }
,       "output": ["BOOLEAN","NUMBER","INT","FLOAT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["BOOLEAN","NUMBER","INT","FLOAT"]
,       "name": "Logic Boolean"
,       "display_name": "Logic Boolean"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Logic Boolean Primitive": {
        "input": {
            "required": {
                "boolean": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["boolean"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "Logic Boolean Primitive"
,       "display_name": "Logic Boolean Primitive"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Logic Comparison OR": {
        "input": {
            "required": {
                "boolean_a": ["BOOLEAN",{"default":false}]
,               "boolean_b": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["boolean_a","boolean_b"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "Logic Comparison OR"
,       "display_name": "Logic Comparison OR"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Logic Comparison AND": {
        "input": {
            "required": {
                "boolean_a": ["BOOLEAN",{"default":false}]
,               "boolean_b": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["boolean_a","boolean_b"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "Logic Comparison AND"
,       "display_name": "Logic Comparison AND"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Logic Comparison XOR": {
        "input": {
            "required": {
                "boolean_a": ["BOOLEAN",{"default":false}]
,               "boolean_b": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["boolean_a","boolean_b"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "Logic Comparison XOR"
,       "display_name": "Logic Comparison XOR"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Logic NOT": {
        "input": {
            "required": {
                "boolean": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["boolean"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "Logic NOT"
,       "display_name": "Logic NOT"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Lora Loader": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "lora_name": [["None"]]
,               "strength_model": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
,               "strength_clip": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","clip","lora_name","strength_model","strength_clip"]
        }
,       "output": ["MODEL","CLIP","STRING"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP","NAME_STRING"]
,       "name": "Lora Loader"
,       "display_name": "Lora Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders"
,       "output_node": false
    }
,   "Hex to HSL": {
        "input": {
            "required": {
                "hex_color": ["STRING",{"default":"#FF0000"}]
            }
,           "optional": {
                "include_alpha": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["hex_color"]
,           "optional": ["include_alpha"]
        }
,       "output": ["INT","INT","INT","FLOAT","STRING"]
,       "output_is_list": [false,false,false,false,false]
,       "output_name": ["hue","saturation","lightness","alpha","hsl"]
,       "name": "Hex to HSL"
,       "display_name": "Hex to HSL"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Utilities"
,       "output_node": false
    }
,   "HSL to Hex": {
        "input": {
            "required": {
                "hsl_color": ["STRING",{"default":"hsl(0, 100%, 50%)"}]
            }
        }
,       "input_order": {
            "required": ["hsl_color"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["hex_color"]
,       "name": "HSL to Hex"
,       "display_name": "HSL to Hex"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Utilities"
,       "output_node": false
    }
,   "Image SSAO (Ambient Occlusion)": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "depth_images": ["IMAGE"]
,               "strength": ["FLOAT",{"min":0,"max":5,"default":1,"step":0.01}]
,               "radius": ["FLOAT",{"min":0.01,"max":1024,"default":30,"step":0.01}]
,               "ao_blur": ["FLOAT",{"min":0.01,"max":1024,"default":2.5,"step":0.01}]
,               "specular_threshold": ["INT",{"min":0,"max":255,"default":25,"step":1}]
,               "enable_specular_masking": [["True","False"]]
,               "tile_size": ["INT",{"min":1,"max":512,"default":1,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images","depth_images","strength","radius","ao_blur","specular_threshold","enable_specular_masking","tile_size"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["composited_images","ssao_images","specular_mask_images"]
,       "name": "Image SSAO (Ambient Occlusion)"
,       "display_name": "Image SSAO (Ambient Occlusion)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image SSDO (Direct Occlusion)": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "depth_images": ["IMAGE"]
,               "strength": ["FLOAT",{"min":0,"max":5,"default":1,"step":0.01}]
,               "radius": ["FLOAT",{"min":0.01,"max":1024,"default":30,"step":0.01}]
,               "specular_threshold": ["INT",{"min":0,"max":255,"default":128,"step":1}]
,               "colored_occlusion": [["True","False"]]
            }
        }
,       "input_order": {
            "required": ["images","depth_images","strength","radius","specular_threshold","colored_occlusion"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE","IMAGE"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["composited_images","ssdo_images","ssdo_image_masks","light_source_image_masks"]
,       "name": "Image SSDO (Direct Occlusion)"
,       "display_name": "Image SSDO (Direct Occlusion)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Analyze": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "mode": [["Black White Levels","RGB Levels"]]
            }
        }
,       "input_order": {
            "required": ["image","mode"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Analyze"
,       "display_name": "Image Analyze"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Analyze"
,       "output_node": false
    }
,   "Image Aspect Ratio": {
        "input": {
            "required": {
            }
,           "optional": {
                "image": ["IMAGE"]
,               "width": ["NUMBER"]
,               "height": ["NUMBER"]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["image","width","height"]
        }
,       "output": ["NUMBER","FLOAT","NUMBER","STRING","STRING"]
,       "output_is_list": [false,false,false,false,false]
,       "output_name": ["aspect_number","aspect_float","is_landscape_bool","aspect_ratio_common","aspect_type"]
,       "name": "Image Aspect Ratio"
,       "display_name": "Image Aspect Ratio"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Image Batch": {
        "input": {
            "required": {
            }
,           "optional": {
                "images_a": ["IMAGE"]
,               "images_b": ["IMAGE"]
,               "images_c": ["IMAGE"]
,               "images_d": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["images_a","images_b","images_c","images_d"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "Image Batch"
,       "display_name": "Image Batch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image"
,       "output_node": false
    }
,   "Image Blank": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"min":8,"max":4096,"step":1}]
,               "height": ["INT",{"default":512,"min":8,"max":4096,"step":1}]
,               "red": ["INT",{"default":255,"min":0,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"min":0,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["width","height","red","green","blue"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Blank"
,       "display_name": "Image Blank"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image"
,       "output_node": false
    }
,   "Image Blend by Mask": {
        "input": {
            "required": {
                "image_a": ["IMAGE"]
,               "image_b": ["IMAGE"]
,               "mask": ["IMAGE"]
,               "blend_percentage": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image_a","image_b","mask","blend_percentage"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Blend by Mask"
,       "display_name": "Image Blend by Mask"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image"
,       "output_node": false
    }
,   "Image Blend": {
        "input": {
            "required": {
                "image_a": ["IMAGE"]
,               "image_b": ["IMAGE"]
,               "blend_percentage": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image_a","image_b","blend_percentage"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "Image Blend"
,       "display_name": "Image Blend"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image"
,       "output_node": false
    }
,   "Image Blending Mode": {
        "input": {
            "required": {
                "image_a": ["IMAGE"]
,               "image_b": ["IMAGE"]
,               "mode": [["add","color","color_burn","color_dodge","darken","difference","exclusion","hard_light","hue","lighten","multiply","overlay","screen","soft_light"]]
,               "blend_percentage": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image_a","image_b","mode","blend_percentage"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "Image Blending Mode"
,       "display_name": "Image Blending Mode"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image"
,       "output_node": false
    }
,   "Image Bloom Filter": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "radius": ["FLOAT",{"default":10,"min":0,"max":1024,"step":0.1}]
,               "intensity": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["image","radius","intensity"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Bloom Filter"
,       "display_name": "Image Bloom Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Canny Filter": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "enable_threshold": [["false","true"]]
,               "threshold_low": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "threshold_high": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["images","enable_threshold","threshold_low","threshold_high"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "Image Canny Filter"
,       "display_name": "Image Canny Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Chromatic Aberration": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "red_offset": ["INT",{"default":2,"min":-255,"max":255,"step":1}]
,               "green_offset": ["INT",{"default":-1,"min":-255,"max":255,"step":1}]
,               "blue_offset": ["INT",{"default":1,"min":-255,"max":255,"step":1}]
,               "intensity": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "fade_radius": ["INT",{"default":12,"min":0,"max":1024,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","red_offset","green_offset","blue_offset","intensity","fade_radius"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Chromatic Aberration"
,       "display_name": "Image Chromatic Aberration"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Color Palette": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "colors": ["INT",{"default":16,"min":8,"max":256,"step":1}]
,               "mode": [["Chart","back_to_back"]]
            }
        }
,       "input_order": {
            "required": ["image","colors","mode"]
        }
,       "output": ["IMAGE","LIST"]
,       "output_is_list": [false,false]
,       "output_name": ["image","color_palettes"]
,       "name": "Image Color Palette"
,       "display_name": "Image Color Palette"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Analyze"
,       "output_node": false
    }
,   "Image Crop Face": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "crop_padding_factor": ["FLOAT",{"default":0.25,"min":0,"max":2,"step":0.01}]
,               "cascade_xml": [["lbpcascade_animeface.xml","haarcascade_frontalface_default.xml","haarcascade_frontalface_alt.xml","haarcascade_frontalface_alt2.xml","haarcascade_frontalface_alt_tree.xml","haarcascade_profileface.xml","haarcascade_upperbody.xml","haarcascade_eye.xml"]]
            }
        }
,       "input_order": {
            "required": ["image","crop_padding_factor","cascade_xml"]
        }
,       "output": ["IMAGE","CROP_DATA"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","CROP_DATA"]
,       "name": "Image Crop Face"
,       "display_name": "Image Crop Face"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Crop Location": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "top": ["INT",{"default":0,"max":10000000,"min":0,"step":1}]
,               "left": ["INT",{"default":0,"max":10000000,"min":0,"step":1}]
,               "right": ["INT",{"default":256,"max":10000000,"min":0,"step":1}]
,               "bottom": ["INT",{"default":256,"max":10000000,"min":0,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","top","left","right","bottom"]
        }
,       "output": ["IMAGE","CROP_DATA"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","CROP_DATA"]
,       "name": "Image Crop Location"
,       "display_name": "Image Crop Location"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Crop Square Location": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "x": ["INT",{"default":0,"max":24576,"min":0,"step":1}]
,               "y": ["INT",{"default":0,"max":24576,"min":0,"step":1}]
,               "size": ["INT",{"default":256,"max":4096,"min":5,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","x","y","size"]
        }
,       "output": ["IMAGE","CROP_DATA"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","CROP_DATA"]
,       "name": "Image Crop Square Location"
,       "display_name": "Image Crop Square Location"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Displacement Warp": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "displacement_maps": ["IMAGE"]
,               "amplitude": ["FLOAT",{"default":25,"min":-4096,"max":4096,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["images","displacement_maps","amplitude"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "Image Displacement Warp"
,       "display_name": "Image Displacement Warp"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Transform"
,       "output_node": false
    }
,   "Image Lucy Sharpen": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "iterations": ["INT",{"default":2,"min":1,"max":12,"step":1}]
,               "kernel_size": ["INT",{"default":3,"min":1,"max":16,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images","iterations","kernel_size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Lucy Sharpen"
,       "display_name": "Image Lucy Sharpen"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Paste Face": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "crop_image": ["IMAGE"]
,               "crop_data": ["CROP_DATA"]
,               "crop_blending": ["FLOAT",{"default":0.25,"min":0,"max":1,"step":0.01}]
,               "crop_sharpening": ["INT",{"default":0,"min":0,"max":3,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","crop_image","crop_data","crop_blending","crop_sharpening"]
        }
,       "output": ["IMAGE","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK_IMAGE"]
,       "name": "Image Paste Face"
,       "display_name": "Image Paste Face"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Paste Crop": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "crop_image": ["IMAGE"]
,               "crop_data": ["CROP_DATA"]
,               "crop_blending": ["FLOAT",{"default":0.25,"min":0,"max":1,"step":0.01}]
,               "crop_sharpening": ["INT",{"default":0,"min":0,"max":3,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","crop_image","crop_data","crop_blending","crop_sharpening"]
        }
,       "output": ["IMAGE","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "Image Paste Crop"
,       "display_name": "Image Paste Crop"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Paste Crop by Location": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "crop_image": ["IMAGE"]
,               "top": ["INT",{"default":0,"max":10000000,"min":0,"step":1}]
,               "left": ["INT",{"default":0,"max":10000000,"min":0,"step":1}]
,               "right": ["INT",{"default":256,"max":10000000,"min":0,"step":1}]
,               "bottom": ["INT",{"default":256,"max":10000000,"min":0,"step":1}]
,               "crop_blending": ["FLOAT",{"default":0.25,"min":0,"max":1,"step":0.01}]
,               "crop_sharpening": ["INT",{"default":0,"min":0,"max":3,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","crop_image","top","left","right","bottom","crop_blending","crop_sharpening"]
        }
,       "output": ["IMAGE","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "Image Paste Crop by Location"
,       "display_name": "Image Paste Crop by Location"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Pixelate": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "pixelation_size": ["FLOAT",{"default":164,"min":16,"max":480,"step":1}]
,               "num_colors": ["FLOAT",{"default":16,"min":2,"max":256,"step":1}]
,               "init_mode": [["k-means++","random","none"]]
,               "max_iterations": ["FLOAT",{"default":100,"min":1,"max":256,"step":1}]
,               "dither": [["False","True"]]
,               "dither_mode": [["FloydSteinberg","Ordered"]]
            }
,           "optional": {
                "color_palettes": ["LIST",{"forceInput":true}]
,               "color_palette_mode": [["Brightness","BrightnessAndTonal","Linear","Tonal"]]
,               "reverse_palette": [["False","True"]]
            }
        }
,       "input_order": {
            "required": ["images","pixelation_size","num_colors","init_mode","max_iterations","dither","dither_mode"]
,           "optional": ["color_palettes","color_palette_mode","reverse_palette"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "Image Pixelate"
,       "display_name": "Image Pixelate"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Power Noise": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"max":4096,"min":64,"step":1}]
,               "height": ["INT",{"default":512,"max":4096,"min":64,"step":1}]
,               "frequency": ["FLOAT",{"default":0.5,"max":10,"min":0,"step":0.01}]
,               "attenuation": ["FLOAT",{"default":0.5,"max":10,"min":0,"step":0.01}]
,               "noise_type": [["grey","white","pink","blue","green","mix"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["width","height","frequency","attenuation","noise_type","seed"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "Image Power Noise"
,       "display_name": "Image Power Noise"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Generate/Noise"
,       "output_node": false
    }
,   "Image Dragan Photography Filter": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "saturation": ["FLOAT",{"default":1,"min":0,"max":16,"step":0.01}]
,               "contrast": ["FLOAT",{"default":1,"min":0,"max":16,"step":0.01}]
,               "brightness": ["FLOAT",{"default":1,"min":0,"max":16,"step":0.01}]
,               "sharpness": ["FLOAT",{"default":1,"min":0,"max":6,"step":0.01}]
,               "highpass_radius": ["FLOAT",{"default":6,"min":0,"max":255,"step":0.01}]
,               "highpass_samples": ["INT",{"default":1,"min":0,"max":6,"step":1}]
,               "highpass_strength": ["FLOAT",{"default":1,"min":0,"max":3,"step":0.01}]
,               "colorize": [["true","false"]]
            }
        }
,       "input_order": {
            "required": ["image","saturation","contrast","brightness","sharpness","highpass_radius","highpass_samples","highpass_strength","colorize"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Dragan Photography Filter"
,       "display_name": "Image Dragan Photography Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Edge Detection Filter": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "mode": [["normal","laplacian"]]
            }
        }
,       "input_order": {
            "required": ["image","mode"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Edge Detection Filter"
,       "display_name": "Image Edge Detection Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Film Grain": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "density": ["FLOAT",{"default":1,"min":0.01,"max":1,"step":0.01}]
,               "intensity": ["FLOAT",{"default":1,"min":0.01,"max":1,"step":0.01}]
,               "highlights": ["FLOAT",{"default":1,"min":0.01,"max":255,"step":0.01}]
,               "supersample_factor": ["INT",{"default":4,"min":1,"max":8,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","density","intensity","highlights","supersample_factor"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Film Grain"
,       "display_name": "Image Film Grain"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Filter Adjustments": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "brightness": ["FLOAT",{"default":0,"min":-1,"max":1,"step":0.01}]
,               "contrast": ["FLOAT",{"default":1,"min":-1,"max":2,"step":0.01}]
,               "saturation": ["FLOAT",{"default":1,"min":0,"max":5,"step":0.01}]
,               "sharpness": ["FLOAT",{"default":1,"min":-5,"max":5,"step":0.01}]
,               "blur": ["INT",{"default":0,"min":0,"max":16,"step":1}]
,               "gaussian_blur": ["FLOAT",{"default":0,"min":0,"max":1024,"step":0.1}]
,               "edge_enhance": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "detail_enhance": [["false","true"]]
            }
        }
,       "input_order": {
            "required": ["image","brightness","contrast","saturation","sharpness","blur","gaussian_blur","edge_enhance","detail_enhance"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Filter Adjustments"
,       "display_name": "Image Filter Adjustments"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Flip": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "mode": [["horizontal","vertical"]]
            }
        }
,       "input_order": {
            "required": ["images","mode"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "Image Flip"
,       "display_name": "Image Flip"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Transform"
,       "output_node": false
    }
,   "Image Gradient Map": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "gradient_image": ["IMAGE"]
,               "flip_left_right": [["false","true"]]
            }
        }
,       "input_order": {
            "required": ["image","gradient_image","flip_left_right"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Gradient Map"
,       "display_name": "Image Gradient Map"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Generate Gradient": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"max":4096,"min":64,"step":1}]
,               "height": ["INT",{"default":512,"max":4096,"min":64,"step":1}]
,               "direction": [["horizontal","vertical"]]
,               "tolerance": ["INT",{"default":0,"max":255,"min":0,"step":1}]
,               "gradient_stops": ["STRING",{"default":"0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255","multiline":true}]
            }
        }
,       "input_order": {
            "required": ["width","height","direction","tolerance","gradient_stops"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Generate Gradient"
,       "display_name": "Image Generate Gradient"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Generate"
,       "output_node": false
    }
,   "Image High Pass Filter": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "radius": ["INT",{"default":10,"min":1,"max":500,"step":1}]
,               "strength": ["FLOAT",{"default":1.5,"min":0,"max":255,"step":0.1}]
,               "color_output": [["true","false"]]
,               "neutral_background": [["true","false"]]
            }
        }
,       "input_order": {
            "required": ["images","radius","strength","color_output","neutral_background"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "Image High Pass Filter"
,       "display_name": "Image High Pass Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image History Loader": {
        "input": {
            "required": {
                "image": [["No History"]]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["image","filename_text"]
,       "name": "Image History Loader"
,       "display_name": "Image History Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/History"
,       "output_node": false
    }
,   "Image Input Switch": {
        "input": {
            "required": {
                "image_a": ["IMAGE"]
,               "image_b": ["IMAGE"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["image_a","image_b","boolean"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Input Switch"
,       "display_name": "Image Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Image Levels Adjustment": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "black_level": ["FLOAT",{"default":0,"min":0,"max":255,"step":0.1}]
,               "mid_level": ["FLOAT",{"default":127.5,"min":0,"max":255,"step":0.1}]
,               "white_level": ["FLOAT",{"default":255,"min":0,"max":255,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["image","black_level","mid_level","white_level"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Levels Adjustment"
,       "display_name": "Image Levels Adjustment"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Adjustment"
,       "output_node": false
    }
,   "Image Load": {
        "input": {
            "required": {
                "image_path": ["STRING",{"default":"./ComfyUI/input/example.png","multiline":false}]
,               "RGBA": [["false","true"]]
            }
,           "optional": {
                "filename_text_extension": [["true","false"]]
            }
        }
,       "input_order": {
            "required": ["image_path","RGBA"]
,           "optional": ["filename_text_extension"]
        }
,       "output": ["IMAGE","MASK","STRING"]
,       "output_is_list": [false,false,false]
,       "output_name": ["image","mask","filename_text"]
,       "name": "Image Load"
,       "display_name": "Image Load"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/IO"
,       "output_node": false
    }
,   "Image Median Filter": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "diameter": ["INT",{"default":2,"min":0.1,"max":255,"step":1}]
,               "sigma_color": ["FLOAT",{"default":10,"min":-255,"max":255,"step":0.1}]
,               "sigma_space": ["FLOAT",{"default":10,"min":-255,"max":255,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["image","diameter","sigma_color","sigma_space"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Median Filter"
,       "display_name": "Image Median Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Mix RGB Channels": {
        "input": {
            "required": {
                "red_channel": ["IMAGE"]
,               "green_channel": ["IMAGE"]
,               "blue_channel": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["red_channel","green_channel","blue_channel"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Mix RGB Channels"
,       "display_name": "Image Mix RGB Channels"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Monitor Effects Filter": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "mode": [["Digital Distortion","Signal Distortion","TV Distortion"]]
,               "amplitude": ["INT",{"default":5,"min":1,"max":255,"step":1}]
,               "offset": ["INT",{"default":10,"min":1,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","mode","amplitude","offset"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "Image Monitor Effects Filter"
,       "display_name": "Image Monitor Effects Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Nova Filter": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "amplitude": ["FLOAT",{"default":0.1,"min":0,"max":1,"step":0.001}]
,               "frequency": ["FLOAT",{"default":3.14,"min":0,"max":100,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["image","amplitude","frequency"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Nova Filter"
,       "display_name": "Image Nova Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Padding": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "feathering": ["INT",{"default":120,"min":0,"max":2048,"step":1}]
,               "feather_second_pass": [["true","false"]]
,               "left_padding": ["INT",{"default":512,"min":8,"max":48000,"step":1}]
,               "right_padding": ["INT",{"default":512,"min":8,"max":48000,"step":1}]
,               "top_padding": ["INT",{"default":512,"min":8,"max":48000,"step":1}]
,               "bottom_padding": ["INT",{"default":512,"min":8,"max":48000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","feathering","feather_second_pass","left_padding","right_padding","top_padding","bottom_padding"]
        }
,       "output": ["IMAGE","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "Image Padding"
,       "display_name": "Image Padding"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Transform"
,       "output_node": false
    }
,   "Image Perlin Noise": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"max":2048,"min":64,"step":1}]
,               "height": ["INT",{"default":512,"max":2048,"min":64,"step":1}]
,               "scale": ["INT",{"default":100,"max":2048,"min":2,"step":1}]
,               "octaves": ["INT",{"default":4,"max":8,"min":0,"step":1}]
,               "persistence": ["FLOAT",{"default":0.5,"max":100,"min":0.01,"step":0.01}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["width","height","scale","octaves","persistence","seed"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "Image Perlin Noise"
,       "display_name": "Image Perlin Noise"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Generate/Noise"
,       "output_node": false
    }
,   "Image Rembg (Remove Background)": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "transparency": ["BOOLEAN",{"default":true}]
,               "model": [["u2net","u2netp","u2net_human_seg","silueta","isnet-general-use","isnet-anime"]]
,               "post_processing": ["BOOLEAN",{"default":false}]
,               "only_mask": ["BOOLEAN",{"default":false}]
,               "alpha_matting": ["BOOLEAN",{"default":false}]
,               "alpha_matting_foreground_threshold": ["INT",{"default":240,"min":0,"max":255}]
,               "alpha_matting_background_threshold": ["INT",{"default":10,"min":0,"max":255}]
,               "alpha_matting_erode_size": ["INT",{"default":10,"min":0,"max":255}]
,               "background_color": [["none","black","white","magenta","chroma green","chroma blue"]]
            }
        }
,       "input_order": {
            "required": ["images","transparency","model","post_processing","only_mask","alpha_matting","alpha_matting_foreground_threshold","alpha_matting_background_threshold","alpha_matting_erode_size","background_color"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "Image Rembg (Remove Background)"
,       "display_name": "Image Rembg (Remove Background)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/AI"
,       "output_node": false
    }
,   "Image Perlin Power Fractal": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"max":8192,"min":64,"step":1}]
,               "height": ["INT",{"default":512,"max":8192,"min":64,"step":1}]
,               "scale": ["INT",{"default":100,"max":2048,"min":2,"step":1}]
,               "octaves": ["INT",{"default":4,"max":8,"min":0,"step":1}]
,               "persistence": ["FLOAT",{"default":0.5,"max":100,"min":0.01,"step":0.01}]
,               "lacunarity": ["FLOAT",{"default":2,"max":100,"min":0.01,"step":0.01}]
,               "exponent": ["FLOAT",{"default":2,"max":100,"min":0.01,"step":0.01}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["width","height","scale","octaves","persistence","lacunarity","exponent","seed"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "Image Perlin Power Fractal"
,       "display_name": "Image Perlin Power Fractal"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Generate/Noise"
,       "output_node": false
    }
,   "Image Remove Background (Alpha)": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "mode": [["background","foreground"]]
,               "threshold": ["INT",{"default":127,"min":0,"max":255,"step":1}]
,               "threshold_tolerance": ["INT",{"default":2,"min":1,"max":24,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images","mode","threshold","threshold_tolerance"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "Image Remove Background (Alpha)"
,       "display_name": "Image Remove Background (Alpha)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Remove Color": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "target_red": ["INT",{"default":255,"min":0,"max":255,"step":1}]
,               "target_green": ["INT",{"default":255,"min":0,"max":255,"step":1}]
,               "target_blue": ["INT",{"default":255,"min":0,"max":255,"step":1}]
,               "replace_red": ["INT",{"default":255,"min":0,"max":255,"step":1}]
,               "replace_green": ["INT",{"default":255,"min":0,"max":255,"step":1}]
,               "replace_blue": ["INT",{"default":255,"min":0,"max":255,"step":1}]
,               "clip_threshold": ["INT",{"default":10,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","target_red","target_green","target_blue","replace_red","replace_green","replace_blue","clip_threshold"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Remove Color"
,       "display_name": "Image Remove Color"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Resize": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "mode": [["rescale","resize"]]
,               "supersample": [["true","false"]]
,               "resampling": [["lanczos","nearest","bilinear","bicubic"]]
,               "rescale_factor": ["FLOAT",{"default":2,"min":0.01,"max":16,"step":0.01}]
,               "resize_width": ["INT",{"default":1024,"min":1,"max":48000,"step":1}]
,               "resize_height": ["INT",{"default":1536,"min":1,"max":48000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","mode","supersample","resampling","rescale_factor","resize_width","resize_height"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Resize"
,       "display_name": "Image Resize"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Transform"
,       "output_node": false
    }
,   "Image Rotate": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "mode": [["transpose","internal"]]
,               "rotation": ["INT",{"default":0,"min":0,"max":360,"step":90}]
,               "sampler": [["nearest","bilinear","bicubic"]]
            }
        }
,       "input_order": {
            "required": ["images","mode","rotation","sampler"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "Image Rotate"
,       "display_name": "Image Rotate"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Transform"
,       "output_node": false
    }
,   "Image Rotate Hue": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "hue_shift": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["image","hue_shift"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Rotate Hue"
,       "display_name": "Image Rotate Hue"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Adjustment"
,       "output_node": false
    }
,   "Image Send HTTP": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "url": ["STRING",{"default":"example.com"}]
,               "method_type": [["post","put","patch"],{"default":"post"}]
,               "request_field_name": ["STRING",{"default":"image"}]
            }
,           "optional": {
                "additional_request_headers": ["DICT"]
            }
        }
,       "input_order": {
            "required": ["images","url","method_type","request_field_name"]
,           "optional": ["additional_request_headers"]
        }
,       "output": ["INT","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["status_code","result_text"]
,       "name": "Image Send HTTP"
,       "display_name": "Image Send HTTP"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/IO"
,       "output_node": true
    }
,   "Image Save": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "output_path": ["STRING",{"default":"[time(%Y-%m-%d)]","multiline":false}]
,               "filename_prefix": ["STRING",{"default":"ComfyUI"}]
,               "filename_delimiter": ["STRING",{"default":"_"}]
,               "filename_number_padding": ["INT",{"default":4,"min":1,"max":9,"step":1}]
,               "filename_number_start": [["false","true"]]
,               "extension": [["png","jpg","jpeg","gif","tiff","webp","bmp"]]
,               "dpi": ["INT",{"default":300,"min":1,"max":2400,"step":1}]
,               "quality": ["INT",{"default":100,"min":1,"max":100,"step":1}]
,               "optimize_image": [["true","false"]]
,               "lossless_webp": [["false","true"]]
,               "overwrite_mode": [["false","prefix_as_filename"]]
,               "show_history": [["false","true"]]
,               "show_history_by_prefix": [["true","false"]]
,               "embed_workflow": [["true","false"]]
,               "show_previews": [["true","false"]]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","output_path","filename_prefix","filename_delimiter","filename_number_padding","filename_number_start","extension","dpi","quality","optimize_image","lossless_webp","overwrite_mode","show_history","show_history_by_prefix","embed_workflow","show_previews"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": ["IMAGE","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["images","files"]
,       "name": "Image Save"
,       "display_name": "Image Save"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/IO"
,       "output_node": true
    }
,   "Image Seamless Texture": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "blending": ["FLOAT",{"default":0.4,"max":1,"min":0,"step":0.01}]
,               "tiled": [["true","false"]]
,               "tiles": ["INT",{"default":2,"max":6,"min":2,"step":2}]
            }
        }
,       "input_order": {
            "required": ["images","blending","tiled","tiles"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "Image Seamless Texture"
,       "display_name": "Image Seamless Texture"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Select Channel": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "channel": [["red","green","blue"]]
            }
        }
,       "input_order": {
            "required": ["image","channel"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Select Channel"
,       "display_name": "Image Select Channel"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Select Color": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "red": ["INT",{"default":255,"min":0,"max":255,"step":0.1}]
,               "green": ["INT",{"default":255,"min":0,"max":255,"step":0.1}]
,               "blue": ["INT",{"default":255,"min":0,"max":255,"step":0.1}]
,               "variance": ["INT",{"default":10,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","red","green","blue","variance"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Select Color"
,       "display_name": "Image Select Color"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Shadows and Highlights": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "shadow_threshold": ["FLOAT",{"default":75,"min":0,"max":255,"step":0.1}]
,               "shadow_factor": ["FLOAT",{"default":1.5,"min":-12,"max":12,"step":0.1}]
,               "shadow_smoothing": ["FLOAT",{"default":0.25,"min":-255,"max":255,"step":0.1}]
,               "highlight_threshold": ["FLOAT",{"default":175,"min":0,"max":255,"step":0.1}]
,               "highlight_factor": ["FLOAT",{"default":0.5,"min":-12,"max":12,"step":0.1}]
,               "highlight_smoothing": ["FLOAT",{"default":0.25,"min":-255,"max":255,"step":0.1}]
,               "simplify_isolation": ["FLOAT",{"default":0,"min":-255,"max":255,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["image","shadow_threshold","shadow_factor","shadow_smoothing","highlight_threshold","highlight_factor","highlight_smoothing","simplify_isolation"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["image","shadow_map","highlight_map"]
,       "name": "Image Shadows and Highlights"
,       "display_name": "Image Shadows and Highlights"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Adjustment"
,       "output_node": false
    }
,   "Image Size to Number": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["NUMBER","NUMBER","FLOAT","FLOAT","INT","INT"]
,       "output_is_list": [false,false,false,false,false,false]
,       "output_name": ["width_num","height_num","width_float","height_float","width_int","height_int"]
,       "name": "Image Size to Number"
,       "display_name": "Image Size to Number"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number/Operations"
,       "output_node": false
    }
,   "Image Stitch": {
        "input": {
            "required": {
                "image_a": ["IMAGE"]
,               "image_b": ["IMAGE"]
,               "stitch": [["top","left","bottom","right"]]
,               "feathering": ["INT",{"default":50,"min":0,"max":2048,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image_a","image_b","stitch","feathering"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Stitch"
,       "display_name": "Image Stitch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Transform"
,       "output_node": false
    }
,   "Image Style Filter": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "style": [["1977","aden","brannan","brooklyn","clarendon","earlybird","fairy tale","gingham","hudson","inkwell","kelvin","lark","lofi","maven","mayfair","moon","nashville","perpetua","reyes","rise","slumber","stinson","toaster","valencia","walden","willow","xpro2"]]
            }
        }
,       "input_order": {
            "required": ["image","style"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Style Filter"
,       "display_name": "Image Style Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image Threshold": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image","threshold"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Threshold"
,       "display_name": "Image Threshold"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Tiled": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "num_tiles": ["INT",{"default":4,"max":64,"min":2,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","num_tiles"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGES"]
,       "name": "Image Tiled"
,       "display_name": "Image Tiled"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Process"
,       "output_node": false
    }
,   "Image Transpose": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "image_overlay": ["IMAGE"]
,               "width": ["INT",{"default":512,"min":-48000,"max":48000,"step":1}]
,               "height": ["INT",{"default":512,"min":-48000,"max":48000,"step":1}]
,               "X": ["INT",{"default":0,"min":-48000,"max":48000,"step":1}]
,               "Y": ["INT",{"default":0,"min":-48000,"max":48000,"step":1}]
,               "rotation": ["INT",{"default":0,"min":-360,"max":360,"step":1}]
,               "feathering": ["INT",{"default":0,"min":0,"max":4096,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","image_overlay","width","height","X","Y","rotation","feathering"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image Transpose"
,       "display_name": "Image Transpose"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Transform"
,       "output_node": false
    }
,   "Image fDOF Filter": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "depth": ["IMAGE"]
,               "mode": [["mock","gaussian","box"]]
,               "radius": ["INT",{"default":8,"min":1,"max":128,"step":1}]
,               "samples": ["INT",{"default":1,"min":1,"max":3,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","depth","mode","radius","samples"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Image fDOF Filter"
,       "display_name": "Image fDOF Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Filter"
,       "output_node": false
    }
,   "Image to Latent Mask": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "channel": [["alpha","red","green","blue"]]
            }
        }
,       "input_order": {
            "required": ["images","channel"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Image to Latent Mask"
,       "display_name": "Image to Latent Mask"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Image to Noise": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "num_colors": ["INT",{"default":16,"max":256,"min":2,"step":2}]
,               "black_mix": ["INT",{"default":0,"max":20,"min":0,"step":1}]
,               "gaussian_mix": ["FLOAT",{"default":0,"max":1024,"min":0,"step":0.1}]
,               "brightness": ["FLOAT",{"default":1,"max":2,"min":0,"step":0.01}]
,               "output_mode": [["batch","list"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["images","num_colors","black_mix","gaussian_mix","brightness","output_mode","seed"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "Image to Noise"
,       "display_name": "Image to Noise"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Generate/Noise"
,       "output_node": false
    }
,   "Image to Seed": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["INT"]
,       "output_is_list": [true]
,       "output_name": ["INT"]
,       "name": "Image to Seed"
,       "display_name": "Image to Seed"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Analyze"
,       "output_node": false
    }
,   "Images to RGB": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Images to RGB"
,       "display_name": "Images to RGB"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image"
,       "output_node": false
    }
,   "Images to Linear": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Images to Linear"
,       "display_name": "Images to Linear"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image"
,       "output_node": false
    }
,   "Integer place counter": {
        "input": {
            "required": {
                "int_input": ["INT",{"default":0,"min":0,"max":10000000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["int_input"]
        }
,       "output": ["INT"]
,       "output_is_list": [false]
,       "output_name": ["INT_PLACES"]
,       "name": "Integer place counter"
,       "display_name": "Integer place counter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Integer"
,       "output_node": false
    }
,   "Image Voronoi Noise Filter": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"max":4096,"min":64,"step":1}]
,               "height": ["INT",{"default":512,"max":4096,"min":64,"step":1}]
,               "density": ["INT",{"default":50,"max":256,"min":10,"step":2}]
,               "modulator": ["INT",{"default":0,"max":8,"min":0,"step":1}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
,           "optional": {
                "flat": [["False","True"]]
,               "RGB_output": [["True","False"]]
            }
        }
,       "input_order": {
            "required": ["width","height","density","modulator","seed"]
,           "optional": ["flat","RGB_output"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "Image Voronoi Noise Filter"
,       "display_name": "Image Voronoi Noise Filter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Generate/Noise"
,       "output_node": false
    }
,   "KSampler (WAS)": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "seed": ["SEED"]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "latent_image": ["LATENT"]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","seed","steps","cfg","sampler_name","scheduler","positive","negative","latent_image","denoise"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "KSampler (WAS)"
,       "display_name": "KSampler (WAS)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Sampling"
,       "output_node": false
    }
,   "KSampler Cycle": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "latent_image": ["LATENT"]
,               "tiled_vae": [["disable","enable"]]
,               "latent_upscale": [["disable","nearest-exact","bilinear","area","bicubic","bislerp"]]
,               "upscale_factor": ["FLOAT",{"default":2,"min":0.1,"max":8,"step":0.1}]
,               "upscale_cycles": ["INT",{"default":2,"min":2,"max":12,"step":1}]
,               "starting_denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "cycle_denoise": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "scale_denoise": [["enable","disable"]]
,               "scale_sampling": [["bilinear","bicubic","nearest","lanczos"]]
,               "vae": ["VAE"]
            }
,           "optional": {
                "secondary_model": ["MODEL"]
,               "secondary_start_cycle": ["INT",{"default":2,"min":2,"max":16,"step":1}]
,               "upscale_model": ["UPSCALE_MODEL"]
,               "processor_model": ["UPSCALE_MODEL"]
,               "pos_additive": ["CONDITIONING"]
,               "neg_additive": ["CONDITIONING"]
,               "pos_add_mode": [["increment","decrement"]]
,               "pos_add_strength": ["FLOAT",{"default":0.25,"min":0.01,"max":1,"step":0.01}]
,               "pos_add_strength_scaling": [["enable","disable"]]
,               "pos_add_strength_cutoff": ["FLOAT",{"default":2,"min":0.01,"max":10,"step":0.01}]
,               "neg_add_mode": [["increment","decrement"]]
,               "neg_add_strength": ["FLOAT",{"default":0.25,"min":0.01,"max":1,"step":0.01}]
,               "neg_add_strength_scaling": [["enable","disable"]]
,               "neg_add_strength_cutoff": ["FLOAT",{"default":2,"min":0.01,"max":10,"step":0.01}]
,               "sharpen_strength": ["FLOAT",{"default":0,"min":0,"max":10,"step":0.01}]
,               "sharpen_radius": ["INT",{"default":2,"min":1,"max":12,"step":1}]
,               "steps_scaling": [["enable","disable"]]
,               "steps_control": [["decrement","increment"]]
,               "steps_scaling_value": ["INT",{"default":10,"min":1,"max":20,"step":1}]
,               "steps_cutoff": ["INT",{"default":20,"min":4,"max":1000,"step":1}]
,               "denoise_cutoff": ["FLOAT",{"default":0.25,"min":0.01,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","seed","steps","cfg","sampler_name","scheduler","positive","negative","latent_image","tiled_vae","latent_upscale","upscale_factor","upscale_cycles","starting_denoise","cycle_denoise","scale_denoise","scale_sampling","vae"]
,           "optional": ["secondary_model","secondary_start_cycle","upscale_model","processor_model","pos_additive","neg_additive","pos_add_mode","pos_add_strength","pos_add_strength_scaling","pos_add_strength_cutoff","neg_add_mode","neg_add_strength","neg_add_strength_scaling","neg_add_strength_cutoff","sharpen_strength","sharpen_radius","steps_scaling","steps_control","steps_scaling_value","steps_cutoff","denoise_cutoff"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["latent(s)"]
,       "name": "KSampler Cycle"
,       "display_name": "KSampler Cycle"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Sampling"
,       "output_node": false
    }
,   "Latent Batch": {
        "input": {
            "required": {
            }
,           "optional": {
                "latent_a": ["LATENT"]
,               "latent_b": ["LATENT"]
,               "latent_c": ["LATENT"]
,               "latent_d": ["LATENT"]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["latent_a","latent_b","latent_c","latent_d"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["latent"]
,       "name": "Latent Batch"
,       "display_name": "Latent Batch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Latent"
,       "output_node": false
    }
,   "Latent Noise Injection": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "noise_std": ["FLOAT",{"default":0.1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["samples","noise_std"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "Latent Noise Injection"
,       "display_name": "Latent Noise Injection"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Latent/Generate"
,       "output_node": false
    }
,   "Latent Size to Number": {
        "input": {
            "required": {
                "samples": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples"]
        }
,       "output": ["NUMBER","NUMBER","FLOAT","FLOAT","INT","INT"]
,       "output_is_list": [false,false,false,false,false,false]
,       "output_name": ["tensor_w_num","tensor_h_num","tensor_w_float","tensor_h_float","tensor_w_int","tensor_h_int"]
,       "name": "Latent Size to Number"
,       "display_name": "Latent Size to Number"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number/Operations"
,       "output_node": false
    }
,   "Latent Upscale by Factor (WAS)": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "mode": [["area","bicubic","bilinear","nearest"]]
,               "factor": ["FLOAT",{"default":2,"min":0.1,"max":8,"step":0.01}]
,               "align": [["true","false"]]
            }
        }
,       "input_order": {
            "required": ["samples","mode","factor","align"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "Latent Upscale by Factor (WAS)"
,       "display_name": "Latent Upscale by Factor (WAS)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Latent/Transform"
,       "output_node": false
    }
,   "Load Image Batch": {
        "input": {
            "required": {
                "mode": [["single_image","incremental_image","random"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "index": ["INT",{"default":0,"min":0,"max":150000,"step":1}]
,               "label": ["STRING",{"default":"Batch 001","multiline":false}]
,               "path": ["STRING",{"default":"","multiline":false}]
,               "pattern": ["STRING",{"default":"*","multiline":false}]
,               "allow_RGBA_output": [["false","true"]]
            }
,           "optional": {
                "filename_text_extension": [["true","false"]]
            }
        }
,       "input_order": {
            "required": ["mode","seed","index","label","path","pattern","allow_RGBA_output"]
,           "optional": ["filename_text_extension"]
        }
,       "output": ["IMAGE","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["image","filename_text"]
,       "name": "Load Image Batch"
,       "display_name": "Load Image Batch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/IO"
,       "output_node": false
    }
,   "Load Text File": {
        "input": {
            "required": {
                "file_path": ["STRING",{"default":"","multiline":false}]
,               "dictionary_name": ["STRING",{"default":"[filename]","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["file_path","dictionary_name"]
        }
,       "output": ["STRING","DICT"]
,       "output_is_list": [false,false]
,       "output_name": ["STRING","DICT"]
,       "name": "Load Text File"
,       "display_name": "Load Text File"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/IO"
,       "output_node": false
    }
,   "Load Lora": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "lora_name": [["None"]]
,               "strength_model": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
,               "strength_clip": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","clip","lora_name","strength_model","strength_clip"]
        }
,       "output": ["MODEL","CLIP","STRING"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP","NAME_STRING"]
,       "name": "Load Lora"
,       "display_name": "Load Lora"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders"
,       "output_node": false
    }
,   "Lora Input Switch": {
        "input": {
            "required": {
                "model_a": ["MODEL"]
,               "clip_a": ["CLIP"]
,               "model_b": ["MODEL"]
,               "clip_b": ["CLIP"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["model_a","clip_a","model_b","clip_b","boolean"]
        }
,       "output": ["MODEL","CLIP"]
,       "output_is_list": [false,false]
,       "output_name": ["MODEL","CLIP"]
,       "name": "Lora Input Switch"
,       "display_name": "Lora Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Masks Add": {
        "input": {
            "required": {
                "masks_a": ["MASK"]
,               "masks_b": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks_a","masks_b"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Masks Add"
,       "display_name": "Masks Add"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Masks Subtract": {
        "input": {
            "required": {
                "masks_a": ["MASK"]
,               "masks_b": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks_a","masks_b"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Masks Subtract"
,       "display_name": "Masks Subtract"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Arbitrary Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "size": ["INT",{"default":256,"min":1,"max":4096,"step":1}]
,               "threshold": ["INT",{"default":128,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["masks","size","threshold"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Arbitrary Region"
,       "display_name": "Mask Arbitrary Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Batch to Mask": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "batch_number": ["INT",{"default":0,"min":0,"max":64,"step":1}]
            }
        }
,       "input_order": {
            "required": ["masks","batch_number"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "Mask Batch to Mask"
,       "display_name": "Mask Batch to Mask"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Batch": {
        "input": {
            "optional": {
                "masks_a": ["MASK"]
,               "masks_b": ["MASK"]
,               "masks_c": ["MASK"]
,               "masks_d": ["MASK"]
            }
        }
,       "input_order": {
            "optional": ["masks_a","masks_b","masks_c","masks_d"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["masks"]
,       "name": "Mask Batch"
,       "display_name": "Mask Batch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Ceiling Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Ceiling Region"
,       "display_name": "Mask Ceiling Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Crop Dominant Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "padding": ["INT",{"default":24,"min":0,"max":4096,"step":1}]
            }
        }
,       "input_order": {
            "required": ["masks","padding"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Crop Dominant Region"
,       "display_name": "Mask Crop Dominant Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Crop Minority Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "padding": ["INT",{"default":24,"min":0,"max":4096,"step":1}]
            }
        }
,       "input_order": {
            "required": ["masks","padding"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Crop Minority Region"
,       "display_name": "Mask Crop Minority Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Crop Region": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "padding": ["INT",{"default":24,"min":0,"max":4096,"step":1}]
,               "region_type": [["dominant","minority"]]
            }
        }
,       "input_order": {
            "required": ["mask","padding","region_type"]
        }
,       "output": ["MASK","CROP_DATA","INT","INT","INT","INT","INT","INT"]
,       "output_is_list": [false,false,false,false,false,false,false,false]
,       "output_name": ["cropped_mask","crop_data","top_int","left_int","right_int","bottom_int","width_int","height_int"]
,       "name": "Mask Crop Region"
,       "display_name": "Mask Crop Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Paste Region": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "crop_mask": ["MASK"]
,               "crop_data": ["CROP_DATA"]
,               "crop_blending": ["FLOAT",{"default":0.25,"min":0,"max":1,"step":0.01}]
,               "crop_sharpening": ["INT",{"default":0,"min":0,"max":3,"step":1}]
            }
        }
,       "input_order": {
            "required": ["mask","crop_mask","crop_data","crop_blending","crop_sharpening"]
        }
,       "output": ["MASK","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["RESULT_MASK","CROP_MASK"]
,       "name": "Mask Paste Region"
,       "display_name": "Mask Paste Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Dilate Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "iterations": ["INT",{"default":5,"min":1,"max":64,"step":1}]
            }
        }
,       "input_order": {
            "required": ["masks","iterations"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Dilate Region"
,       "display_name": "Mask Dilate Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Dominant Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "threshold": ["INT",{"default":128,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["masks","threshold"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Dominant Region"
,       "display_name": "Mask Dominant Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Erode Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "iterations": ["INT",{"default":5,"min":1,"max":64,"step":1}]
            }
        }
,       "input_order": {
            "required": ["masks","iterations"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Erode Region"
,       "display_name": "Mask Erode Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Fill Holes": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Fill Holes"
,       "display_name": "Mask Fill Holes"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Floor Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Floor Region"
,       "display_name": "Mask Floor Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Gaussian Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "radius": ["FLOAT",{"default":5,"min":0,"max":1024,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["masks","radius"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Gaussian Region"
,       "display_name": "Mask Gaussian Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Invert": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Invert"
,       "display_name": "Mask Invert"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Minority Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "threshold": ["INT",{"default":128,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["masks","threshold"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Minority Region"
,       "display_name": "Mask Minority Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Smooth Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "sigma": ["FLOAT",{"default":5,"min":0,"max":128,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["masks","sigma"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Smooth Region"
,       "display_name": "Mask Smooth Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Mask Threshold Region": {
        "input": {
            "required": {
                "masks": ["MASK"]
,               "black_threshold": ["INT",{"default":75,"min":0,"max":255,"step":1}]
,               "white_threshold": ["INT",{"default":175,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["masks","black_threshold","white_threshold"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASKS"]
,       "name": "Mask Threshold Region"
,       "display_name": "Mask Threshold Region"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Masks Combine Regions": {
        "input": {
            "required": {
                "mask_a": ["MASK"]
,               "mask_b": ["MASK"]
            }
,           "optional": {
                "mask_c": ["MASK"]
,               "mask_d": ["MASK"]
,               "mask_e": ["MASK"]
,               "mask_f": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask_a","mask_b"]
,           "optional": ["mask_c","mask_d","mask_e","mask_f"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "Masks Combine Regions"
,       "display_name": "Masks Combine Regions"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Masks Combine Batch": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "Masks Combine Batch"
,       "display_name": "Masks Combine Batch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "MiDaS Model Loader": {
        "input": {
            "required": {
                "midas_model": [["DPT_Large","DPT_Hybrid"]]
            }
        }
,       "input_order": {
            "required": ["midas_model"]
        }
,       "output": ["MIDAS_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["midas_model"]
,       "name": "MiDaS Model Loader"
,       "display_name": "MiDaS Model Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders"
,       "output_node": false
    }
,   "MiDaS Depth Approximation": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "use_cpu": [["false","true"]]
,               "midas_type": [["DPT_Large","DPT_Hybrid"]]
,               "invert_depth": [["false","true"]]
            }
,           "optional": {
                "midas_model": ["MIDAS_MODEL"]
            }
        }
,       "input_order": {
            "required": ["image","use_cpu","midas_type","invert_depth"]
,           "optional": ["midas_model"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["images"]
,       "name": "MiDaS Depth Approximation"
,       "display_name": "MiDaS Depth Approximation"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/AI"
,       "output_node": false
    }
,   "MiDaS Mask Image": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "use_cpu": [["false","true"]]
,               "midas_model": [["DPT_Large","DPT_Hybrid","DPT_Small"]]
,               "remove": [["background","foregroud"]]
,               "threshold": [["false","true"]]
,               "threshold_low": ["FLOAT",{"default":10,"min":0,"max":255,"step":1}]
,               "threshold_mid": ["FLOAT",{"default":200,"min":0,"max":255,"step":1}]
,               "threshold_high": ["FLOAT",{"default":210,"min":0,"max":255,"step":1}]
,               "smoothing": ["FLOAT",{"default":0.25,"min":0,"max":16,"step":0.01}]
,               "background_red": ["INT",{"default":0,"min":0,"max":255,"step":1}]
,               "background_green": ["INT",{"default":0,"min":0,"max":255,"step":1}]
,               "background_blue": ["INT",{"default":0,"min":0,"max":255,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","use_cpu","midas_model","remove","threshold","threshold_low","threshold_mid","threshold_high","smoothing","background_red","background_green","background_blue"]
        }
,       "output": ["IMAGE","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["RESULT","DEPTH"]
,       "name": "MiDaS Mask Image"
,       "display_name": "MiDaS Mask Image"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/AI"
,       "output_node": false
    }
,   "Model Input Switch": {
        "input": {
            "required": {
                "model_a": ["MODEL"]
,               "model_b": ["MODEL"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["model_a","model_b","boolean"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "Model Input Switch"
,       "display_name": "Model Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Number Counter": {
        "input": {
            "required": {
                "number_type": [["integer","float"]]
,               "mode": [["increment","decrement","increment_to_stop","decrement_to_stop"]]
,               "start": ["FLOAT",{"default":0,"min":-18446744073709552000,"max":18446744073709552000,"step":0.01}]
,               "stop": ["FLOAT",{"default":0,"min":-18446744073709552000,"max":18446744073709552000,"step":0.01}]
,               "step": ["FLOAT",{"default":1,"min":0,"max":99999,"step":0.01}]
            }
,           "optional": {
                "reset_bool": ["NUMBER"]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["number_type","mode","start","stop","step"]
,           "optional": ["reset_bool"]
,           "hidden": ["unique_id"]
        }
,       "output": ["NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["number","float","int"]
,       "name": "Number Counter"
,       "display_name": "Number Counter"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number"
,       "output_node": false
    }
,   "Number Operation": {
        "input": {
            "required": {
                "number_a": ["NUMBER"]
,               "number_b": ["NUMBER"]
,               "operation": [["addition","subtraction","division","floor division","multiplication","exponentiation","modulus","greater-than","greater-than or equals","less-than","less-than or equals","equals","does not equal"]]
            }
        }
,       "input_order": {
            "required": ["number_a","number_b","operation"]
        }
,       "output": ["NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["NUMBER","FLOAT","INT"]
,       "name": "Number Operation"
,       "display_name": "Number Operation"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number/Operations"
,       "output_node": false
    }
,   "Number to Float": {
        "input": {
            "required": {
                "number": ["NUMBER"]
            }
        }
,       "input_order": {
            "required": ["number"]
        }
,       "output": ["FLOAT"]
,       "output_is_list": [false]
,       "output_name": ["FLOAT"]
,       "name": "Number to Float"
,       "display_name": "Number to Float"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number/Operations"
,       "output_node": false
    }
,   "Number Input Switch": {
        "input": {
            "required": {
                "number_a": ["NUMBER"]
,               "number_b": ["NUMBER"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["number_a","number_b","boolean"]
        }
,       "output": ["NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["NUMBER","FLOAT","INT"]
,       "name": "Number Input Switch"
,       "display_name": "Number Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Number Input Condition": {
        "input": {
            "required": {
                "number_a": ["NUMBER"]
,               "number_b": ["NUMBER"]
,               "return_boolean": [["false","true"]]
,               "comparison": [["and","or","greater-than","greater-than or equals","less-than","less-than or equals","equals","does not equal","divisible by","if A odd","if A even","if A prime","factor of"]]
            }
        }
,       "input_order": {
            "required": ["number_a","number_b","return_boolean","comparison"]
        }
,       "output": ["NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["NUMBER","FLOAT","INT"]
,       "name": "Number Input Condition"
,       "display_name": "Number Input Condition"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Number Multiple Of": {
        "input": {
            "required": {
                "number": ["NUMBER"]
,               "multiple": ["INT",{"default":8,"min":-18446744073709552000,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["number","multiple"]
        }
,       "output": ["NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["NUMBER","FLOAT","INT"]
,       "name": "Number Multiple Of"
,       "display_name": "Number Multiple Of"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number/Functions"
,       "output_node": false
    }
,   "Number PI": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["NUMBER","FLOAT"]
,       "output_is_list": [false,false]
,       "output_name": ["NUMBER","FLOAT"]
,       "name": "Number PI"
,       "display_name": "Number PI"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number"
,       "output_node": false
    }
,   "Number to Int": {
        "input": {
            "required": {
                "number": ["NUMBER"]
            }
        }
,       "input_order": {
            "required": ["number"]
        }
,       "output": ["INT"]
,       "output_is_list": [false]
,       "output_name": ["INT"]
,       "name": "Number to Int"
,       "display_name": "Number to Int"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number/Operations"
,       "output_node": false
    }
,   "Number to Seed": {
        "input": {
            "required": {
                "number": ["NUMBER"]
            }
        }
,       "input_order": {
            "required": ["number"]
        }
,       "output": ["SEED"]
,       "output_is_list": [false]
,       "output_name": ["SEED"]
,       "name": "Number to Seed"
,       "display_name": "Number to Seed"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number/Operations"
,       "output_node": false
    }
,   "Number to String": {
        "input": {
            "required": {
                "number": ["NUMBER"]
            }
        }
,       "input_order": {
            "required": ["number"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Number to String"
,       "display_name": "Number to String"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number/Operations"
,       "output_node": false
    }
,   "Number to Text": {
        "input": {
            "required": {
                "number": ["NUMBER"]
            }
        }
,       "input_order": {
            "required": ["number"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Number to Text"
,       "display_name": "Number to Text"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number/Operations"
,       "output_node": false
    }
,   "Boolean To Text": {
        "input": {
            "required": {
                "boolean": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["boolean"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Boolean To Text"
,       "display_name": "Boolean To Text"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Prompt Styles Selector": {
        "input": {
            "required": {
                "style": [["None"]]
            }
        }
,       "input_order": {
            "required": ["style"]
        }
,       "output": ["STRING","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["positive_string","negative_string"]
,       "name": "Prompt Styles Selector"
,       "display_name": "Prompt Styles Selector"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Prompt Multiple Styles Selector": {
        "input": {
            "required": {
                "style1": [["None"]]
,               "style2": [["None"]]
,               "style3": [["None"]]
,               "style4": [["None"]]
            }
        }
,       "input_order": {
            "required": ["style1","style2","style3","style4"]
        }
,       "output": ["STRING","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["positive_string","negative_string"]
,       "name": "Prompt Multiple Styles Selector"
,       "display_name": "Prompt Multiple Styles Selector"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Random Number": {
        "input": {
            "required": {
                "number_type": [["integer","float","bool"]]
,               "minimum": ["FLOAT",{"default":0,"min":-18446744073709552000,"max":18446744073709552000}]
,               "maximum": ["FLOAT",{"default":0,"min":-18446744073709552000,"max":18446744073709552000}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["number_type","minimum","maximum","seed"]
        }
,       "output": ["NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["NUMBER","FLOAT","INT"]
,       "name": "Random Number"
,       "display_name": "Random Number"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number"
,       "output_node": false
    }
,   "Save Text File": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "path": ["STRING",{"default":"./ComfyUI/output/[time(%Y-%m-%d)]","multiline":false}]
,               "filename_prefix": ["STRING",{"default":"ComfyUI"}]
,               "filename_delimiter": ["STRING",{"default":"_"}]
,               "filename_number_padding": ["INT",{"default":4,"min":0,"max":9,"step":1}]
            }
,           "optional": {
                "file_extension": ["STRING",{"default":".txt"}]
,               "encoding": ["STRING",{"default":"utf-8"}]
,               "filename_suffix": ["STRING",{"default":""}]
            }
        }
,       "input_order": {
            "required": ["text","path","filename_prefix","filename_delimiter","filename_number_padding"]
,           "optional": ["file_extension","encoding","filename_suffix"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "Save Text File"
,       "display_name": "Save Text File"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/IO"
,       "output_node": true
    }
,   "Seed": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["seed"]
        }
,       "output": ["SEED","NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["seed","number","float","int"]
,       "name": "Seed"
,       "display_name": "Seed"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number"
,       "output_node": false
    }
,   "Tensor Batch to Image": {
        "input": {
            "required": {
                "images_batch": ["IMAGE"]
,               "batch_image_number": ["INT",{"default":0,"min":0,"max":64,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images_batch","batch_image_number"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Tensor Batch to Image"
,       "display_name": "Tensor Batch to Image"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Latent/Transform"
,       "output_node": false
    }
,   "BLIP Analyze Image": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "mode": [["caption","interrogate"]]
,               "question": ["STRING",{"default":"What does the background consist of?","multiline":true,"dynamicPrompts":false}]
,               "blip_model": ["BLIP_MODEL"]
            }
,           "optional": {
                "min_length": ["INT",{"min":1,"max":1024,"default":24}]
,               "max_length": ["INT",{"min":2,"max":1024,"default":64}]
,               "num_beams": ["INT",{"min":1,"max":12,"default":5}]
,               "no_repeat_ngram_size": ["INT",{"min":1,"max":12,"default":3}]
,               "early_stopping": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["images","mode","question","blip_model"]
,           "optional": ["min_length","max_length","num_beams","no_repeat_ngram_size","early_stopping"]
        }
,       "output": ["STRING","STRING"]
,       "output_is_list": [false,true]
,       "output_name": ["FULL_CAPTIONS","CAPTIONS"]
,       "name": "BLIP Analyze Image"
,       "display_name": "BLIP Analyze Image"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/AI"
,       "output_node": false
    }
,   "SAM Model Loader": {
        "input": {
            "required": {
                "model_size": [["ViT-H","ViT-L","ViT-B"]]
            }
        }
,       "input_order": {
            "required": ["model_size"]
        }
,       "output": ["SAM_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["SAM_MODEL"]
,       "name": "SAM Model Loader"
,       "display_name": "SAM Model Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "SAM Parameters": {
        "input": {
            "required": {
                "points": ["STRING",{"default":"[128, 128]; [0, 0]","multiline":false}]
,               "labels": ["STRING",{"default":"[1, 0]","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["points","labels"]
        }
,       "output": ["SAM_PARAMETERS"]
,       "output_is_list": [false]
,       "output_name": ["SAM_PARAMETERS"]
,       "name": "SAM Parameters"
,       "display_name": "SAM Parameters"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "SAM Parameters Combine": {
        "input": {
            "required": {
                "sam_parameters_a": ["SAM_PARAMETERS"]
,               "sam_parameters_b": ["SAM_PARAMETERS"]
            }
        }
,       "input_order": {
            "required": ["sam_parameters_a","sam_parameters_b"]
        }
,       "output": ["SAM_PARAMETERS"]
,       "output_is_list": [false]
,       "output_name": ["SAM_PARAMETERS"]
,       "name": "SAM Parameters Combine"
,       "display_name": "SAM Parameters Combine"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "SAM Image Mask": {
        "input": {
            "required": {
                "sam_model": ["SAM_MODEL"]
,               "sam_parameters": ["SAM_PARAMETERS"]
,               "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["sam_model","sam_parameters","image"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "SAM Image Mask"
,       "display_name": "SAM Image Mask"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Masking"
,       "output_node": false
    }
,   "Samples Passthrough (Stat System)": {
        "input": {
            "required": {
                "samples": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["samples"]
,       "name": "Samples Passthrough (Stat System)"
,       "display_name": "Samples Passthrough (Stat System)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Debug"
,       "output_node": false
    }
,   "String to Text": {
        "input": {
            "required": {
                "string": ["STRING",{}]
            }
        }
,       "input_order": {
            "required": ["string"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "String to Text"
,       "display_name": "String to Text"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Operations"
,       "output_node": false
    }
,   "Image Bounds": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE_BOUNDS"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE_BOUNDS"]
,       "name": "Image Bounds"
,       "display_name": "Image Bounds"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Bound"
,       "output_node": false
    }
,   "Inset Image Bounds": {
        "input": {
            "required": {
                "image_bounds": ["IMAGE_BOUNDS"]
,               "inset_left": ["INT",{"default":64,"min":0,"max":18446744073709552000}]
,               "inset_right": ["INT",{"default":64,"min":0,"max":18446744073709552000}]
,               "inset_top": ["INT",{"default":64,"min":0,"max":18446744073709552000}]
,               "inset_bottom": ["INT",{"default":64,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["image_bounds","inset_left","inset_right","inset_top","inset_bottom"]
        }
,       "output": ["IMAGE_BOUNDS"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE_BOUNDS"]
,       "name": "Inset Image Bounds"
,       "display_name": "Inset Image Bounds"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Bound"
,       "output_node": false
    }
,   "Bounded Image Blend": {
        "input": {
            "required": {
                "target": ["IMAGE"]
,               "target_bounds": ["IMAGE_BOUNDS"]
,               "source": ["IMAGE"]
,               "blend_factor": ["FLOAT",{"default":1,"min":0,"max":1}]
,               "feathering": ["INT",{"default":16,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["target","target_bounds","source","blend_factor","feathering"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Bounded Image Blend"
,       "display_name": "Bounded Image Blend"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Bound"
,       "output_node": false
    }
,   "Bounded Image Blend with Mask": {
        "input": {
            "required": {
                "target": ["IMAGE"]
,               "target_mask": ["MASK"]
,               "target_bounds": ["IMAGE_BOUNDS"]
,               "source": ["IMAGE"]
,               "blend_factor": ["FLOAT",{"default":1,"min":0,"max":1}]
,               "feathering": ["INT",{"default":16,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["target","target_mask","target_bounds","source","blend_factor","feathering"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Bounded Image Blend with Mask"
,       "display_name": "Bounded Image Blend with Mask"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Bound"
,       "output_node": false
    }
,   "Bounded Image Crop": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "image_bounds": ["IMAGE_BOUNDS"]
            }
        }
,       "input_order": {
            "required": ["image","image_bounds"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Bounded Image Crop"
,       "display_name": "Bounded Image Crop"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Bound"
,       "output_node": false
    }
,   "Bounded Image Crop with Mask": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "mask": ["MASK"]
,               "padding_left": ["INT",{"default":64,"min":0,"max":18446744073709552000}]
,               "padding_right": ["INT",{"default":64,"min":0,"max":18446744073709552000}]
,               "padding_top": ["INT",{"default":64,"min":0,"max":18446744073709552000}]
,               "padding_bottom": ["INT",{"default":64,"min":0,"max":18446744073709552000}]
            }
,           "optional": {
                "return_list": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["image","mask","padding_left","padding_right","padding_top","padding_bottom"]
,           "optional": ["return_list"]
        }
,       "output": ["IMAGE","IMAGE_BOUNDS"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","IMAGE_BOUNDS"]
,       "name": "Bounded Image Crop with Mask"
,       "display_name": "Bounded Image Crop with Mask"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Image/Bound"
,       "output_node": false
    }
,   "Image Bounds to Console": {
        "input": {
            "required": {
                "image_bounds": ["IMAGE_BOUNDS"]
,               "label": ["STRING",{"default":"Debug to Console","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["image_bounds","label"]
        }
,       "output": ["IMAGE_BOUNDS"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE_BOUNDS"]
,       "name": "Image Bounds to Console"
,       "display_name": "Image Bounds to Console"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Debug"
,       "output_node": true
    }
,   "Text Dictionary Update": {
        "input": {
            "required": {
                "dictionary_a": ["DICT"]
,               "dictionary_b": ["DICT"]
            }
,           "optional": {
                "dictionary_c": ["DICT"]
,               "dictionary_d": ["DICT"]
            }
        }
,       "input_order": {
            "required": ["dictionary_a","dictionary_b"]
,           "optional": ["dictionary_c","dictionary_d"]
        }
,       "output": ["DICT"]
,       "output_is_list": [false]
,       "output_name": ["DICT"]
,       "name": "Text Dictionary Update"
,       "display_name": "Text Dictionary Update"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Dictionary Get": {
        "input": {
            "required": {
                "dictionary": ["DICT"]
,               "key": ["STRING",{"default":"","multiline":false}]
            }
,           "optional": {
                "default_value": ["STRING",{"default":"","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["dictionary","key"]
,           "optional": ["default_value"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Dictionary Get"
,       "display_name": "Text Dictionary Get"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Dictionary Convert": {
        "input": {
            "required": {
                "dictionary_text": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["dictionary_text"]
        }
,       "output": ["DICT"]
,       "output_is_list": [false]
,       "output_name": ["DICT"]
,       "name": "Text Dictionary Convert"
,       "display_name": "Text Dictionary Convert"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Dictionary New": {
        "input": {
            "required": {
                "key_1": ["STRING",{"default":"","multiline":false}]
,               "value_1": ["STRING",{"default":"","multiline":false}]
            }
,           "optional": {
                "key_2": ["STRING",{"default":"","multiline":false}]
,               "value_2": ["STRING",{"default":"","multiline":false}]
,               "key_3": ["STRING",{"default":"","multiline":false}]
,               "value_3": ["STRING",{"default":"","multiline":false}]
,               "key_4": ["STRING",{"default":"","multiline":false}]
,               "value_4": ["STRING",{"default":"","multiline":false}]
,               "key_5": ["STRING",{"default":"","multiline":false}]
,               "value_5": ["STRING",{"default":"","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["key_1","value_1"]
,           "optional": ["key_2","value_2","key_3","value_3","key_4","value_4","key_5","value_5"]
        }
,       "output": ["DICT"]
,       "output_is_list": [false]
,       "output_name": ["DICT"]
,       "name": "Text Dictionary New"
,       "display_name": "Text Dictionary New"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Dictionary Keys": {
        "input": {
            "required": {
                "dictionary": ["DICT"]
            }
,           "optional": {
            }
        }
,       "input_order": {
            "required": ["dictionary"]
,           "optional": []
        }
,       "output": ["LIST"]
,       "output_is_list": [false]
,       "output_name": ["LIST"]
,       "name": "Text Dictionary Keys"
,       "display_name": "Text Dictionary Keys"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Dictionary To Text": {
        "input": {
            "required": {
                "dictionary": ["DICT"]
            }
,           "optional": {
            }
        }
,       "input_order": {
            "required": ["dictionary"]
,           "optional": []
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Dictionary To Text"
,       "display_name": "Text Dictionary To Text"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Add Tokens": {
        "input": {
            "required": {
                "tokens": ["STRING",{"default":"[hello]: world","multiline":true}]
,               "print_current_tokens": [["false","true"]]
            }
        }
,       "input_order": {
            "required": ["tokens","print_current_tokens"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "Text Add Tokens"
,       "display_name": "Text Add Tokens"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Tokens"
,       "output_node": true
    }
,   "Text Add Token by Input": {
        "input": {
            "required": {
                "token_name": ["STRING",{"forceInput":true}]
,               "token_value": ["STRING",{"forceInput":true}]
,               "print_current_tokens": [["false","true"]]
            }
        }
,       "input_order": {
            "required": ["token_name","token_value","print_current_tokens"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "Text Add Token by Input"
,       "display_name": "Text Add Token by Input"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Tokens"
,       "output_node": true
    }
,   "Text Compare": {
        "input": {
            "required": {
                "text_a": ["STRING",{"forceInput":true}]
,               "text_b": ["STRING",{"forceInput":true}]
,               "mode": [["similarity","difference"]]
,               "tolerance": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["text_a","text_b","mode","tolerance"]
        }
,       "output": ["STRING","STRING","BOOLEAN","NUMBER","STRING"]
,       "output_is_list": [false,false,false,false,false]
,       "output_name": ["TEXT_A_PASS","TEXT_B_PASS","BOOLEAN","SCORE_NUMBER","COMPARISON_TEXT"]
,       "name": "Text Compare"
,       "display_name": "Text Compare"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Search"
,       "output_node": false
    }
,   "Text Concatenate": {
        "input": {
            "required": {
                "delimiter": ["STRING",{"default":", "}]
,               "clean_whitespace": [["true","false"]]
            }
,           "optional": {
                "text_a": ["STRING",{"forceInput":true}]
,               "text_b": ["STRING",{"forceInput":true}]
,               "text_c": ["STRING",{"forceInput":true}]
,               "text_d": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["delimiter","clean_whitespace"]
,           "optional": ["text_a","text_b","text_c","text_d"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Concatenate"
,       "display_name": "Text Concatenate"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text File History Loader": {
        "input": {
            "required": {
                "file": [["No History"]]
,               "dictionary_name": ["STRING",{"default":"[filename]","multiline":true}]
            }
        }
,       "input_order": {
            "required": ["file","dictionary_name"]
        }
,       "output": ["STRING","DICT"]
,       "output_is_list": [false,false]
,       "output_name": ["STRING","DICT"]
,       "name": "Text File History Loader"
,       "display_name": "Text File History Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/History"
,       "output_node": false
    }
,   "Text Find and Replace by Dictionary": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "dictionary": ["DICT"]
,               "replacement_key": ["STRING",{"default":"__","multiline":false}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["text","dictionary","replacement_key","seed"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Find and Replace by Dictionary"
,       "display_name": "Text Find and Replace by Dictionary"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Search"
,       "output_node": false
    }
,   "Text Find and Replace Input": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "find": ["STRING",{"forceInput":true}]
,               "replace": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["text","find","replace"]
        }
,       "output": ["STRING","NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["result_text","replacement_count_number","replacement_count_float","replacement_count_int"]
,       "name": "Text Find and Replace Input"
,       "display_name": "Text Find and Replace Input"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Search"
,       "output_node": false
    }
,   "Text Find and Replace": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "find": ["STRING",{"default":"","multiline":false}]
,               "replace": ["STRING",{"default":"","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["text","find","replace"]
        }
,       "output": ["STRING","NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["result_text","replacement_count_number","replacement_count_float","replacement_count_int"]
,       "name": "Text Find and Replace"
,       "display_name": "Text Find and Replace"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Search"
,       "output_node": false
    }
,   "Text Find": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "substring": ["STRING",{"default":"","multiline":false}]
,               "pattern": ["STRING",{"default":"","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["text","substring","pattern"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["found"]
,       "name": "Text Find"
,       "display_name": "Text Find"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Search"
,       "output_node": false
    }
,   "Text Input Switch": {
        "input": {
            "required": {
                "text_a": ["STRING",{"forceInput":true}]
,               "text_b": ["STRING",{"forceInput":true}]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["text_a","text_b","boolean"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Input Switch"
,       "display_name": "Text Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Text List": {
        "input": {
            "required": {
            }
,           "optional": {
                "text_a": ["STRING",{"forceInput":true}]
,               "text_b": ["STRING",{"forceInput":true}]
,               "text_c": ["STRING",{"forceInput":true}]
,               "text_d": ["STRING",{"forceInput":true}]
,               "text_e": ["STRING",{"forceInput":true}]
,               "text_f": ["STRING",{"forceInput":true}]
,               "text_g": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["text_a","text_b","text_c","text_d","text_e","text_f","text_g"]
        }
,       "output": ["LIST"]
,       "output_is_list": [false]
,       "output_name": ["LIST"]
,       "name": "Text List"
,       "display_name": "Text List"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text List Concatenate": {
        "input": {
            "required": {
            }
,           "optional": {
                "list_a": ["LIST",{"forceInput":true}]
,               "list_b": ["LIST",{"forceInput":true}]
,               "list_c": ["LIST",{"forceInput":true}]
,               "list_d": ["LIST",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["list_a","list_b","list_c","list_d"]
        }
,       "output": ["LIST"]
,       "output_is_list": [false]
,       "output_name": ["LIST"]
,       "name": "Text List Concatenate"
,       "display_name": "Text List Concatenate"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text List to Text": {
        "input": {
            "required": {
                "delimiter": ["STRING",{"default":", "}]
,               "text_list": ["LIST",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["delimiter","text_list"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text List to Text"
,       "display_name": "Text List to Text"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Load Line From File": {
        "input": {
            "required": {
                "file_path": ["STRING",{"default":"","multiline":false}]
,               "dictionary_name": ["STRING",{"default":"[filename]","multiline":false}]
,               "label": ["STRING",{"default":"TextBatch","multiline":false}]
,               "mode": [["automatic","index"]]
,               "index": ["INT",{"default":0,"min":0,"step":1}]
            }
,           "optional": {
                "multiline_text": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["file_path","dictionary_name","label","mode","index"]
,           "optional": ["multiline_text"]
        }
,       "output": ["STRING","DICT"]
,       "output_is_list": [false,false]
,       "output_name": ["line_text","dictionary"]
,       "name": "Text Load Line From File"
,       "display_name": "Text Load Line From File"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Multiline": {
        "input": {
            "required": {
                "text": ["STRING",{"default":"","multiline":true,"dynamicPrompts":true}]
            }
        }
,       "input_order": {
            "required": ["text"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Multiline"
,       "display_name": "Text Multiline"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Multiline (Code Compatible)": {
        "input": {
            "required": {
                "text": ["STRING",{"default":"","multiline":true,"dynamicPrompts":false}]
            }
        }
,       "input_order": {
            "required": ["text"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Multiline (Code Compatible)"
,       "display_name": "Text Multiline (Code Compatible)"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Parse A1111 Embeddings": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["text"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Parse A1111 Embeddings"
,       "display_name": "Text Parse A1111 Embeddings"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Parse"
,       "output_node": false
    }
,   "Text Parse Noodle Soup Prompts": {
        "input": {
            "required": {
                "mode": [["Noodle Soup Prompts","Wildcards"]]
,               "noodle_key": ["STRING",{"default":"__","multiline":false}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "text": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["mode","noodle_key","seed","text"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Parse Noodle Soup Prompts"
,       "display_name": "Text Parse Noodle Soup Prompts"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Parse"
,       "output_node": true
    }
,   "Text Parse Tokens": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["text"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Parse Tokens"
,       "display_name": "Text Parse Tokens"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Tokens"
,       "output_node": false
    }
,   "Text Random Line": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["text","seed"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Random Line"
,       "display_name": "Text Random Line"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Random Prompt": {
        "input": {
            "required": {
                "search_seed": ["STRING",{"multiline":false}]
            }
        }
,       "input_order": {
            "required": ["search_seed"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Random Prompt"
,       "display_name": "Text Random Prompt"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text String": {
        "input": {
            "required": {
                "text": ["STRING",{"default":"","multiline":false}]
            }
,           "optional": {
                "text_b": ["STRING",{"default":"","multiline":false}]
,               "text_c": ["STRING",{"default":"","multiline":false}]
,               "text_d": ["STRING",{"default":"","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["text"]
,           "optional": ["text_b","text_c","text_d"]
        }
,       "output": ["STRING","STRING","STRING","STRING"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["TEXT","TEXT_B","TEXT_C","TEXT_D"]
,       "name": "Text String"
,       "display_name": "Text String"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text"
,       "output_node": false
    }
,   "Text Contains": {
        "input": {
            "required": {
                "text": ["STRING",{"default":"","multiline":false}]
,               "sub_text": ["STRING",{"default":"","multiline":false}]
            }
,           "optional": {
                "case_insensitive": ["BOOLEAN",{"default":true}]
            }
        }
,       "input_order": {
            "required": ["text","sub_text"]
,           "optional": ["case_insensitive"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "Text Contains"
,       "display_name": "Text Contains"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Text Shuffle": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "separator": ["STRING",{"default":",","multiline":false}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["text","separator","seed"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Shuffle"
,       "display_name": "Text Shuffle"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Operations"
,       "output_node": false
    }
,   "Text Sort": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "separator": ["STRING",{"default":", ","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["text","separator"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text Sort"
,       "display_name": "Text Sort"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Operations"
,       "output_node": false
    }
,   "Text to Conditioning": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "text": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["clip","text"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "Text to Conditioning"
,       "display_name": "Text to Conditioning"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Operations"
,       "output_node": false
    }
,   "Text to Console": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "label": ["STRING",{"default":"Text Output","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["text","label"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text to Console"
,       "display_name": "Text to Console"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Debug"
,       "output_node": true
    }
,   "Text to Number": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["text"]
        }
,       "output": ["NUMBER"]
,       "output_is_list": [false]
,       "output_name": ["NUMBER"]
,       "name": "Text to Number"
,       "display_name": "Text to Number"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Operations"
,       "output_node": false
    }
,   "Text to String": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["text"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "Text to String"
,       "display_name": "Text to String"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Operations"
,       "output_node": false
    }
,   "Text String Truncate": {
        "input": {
            "required": {
                "text": ["STRING",{"forceInput":true}]
,               "truncate_by": [["characters","words"]]
,               "truncate_from": [["end","beginning"]]
,               "truncate_to": ["INT",{"default":10,"min":-99999999,"max":99999999,"step":1}]
            }
,           "optional": {
                "text_b": ["STRING",{"forceInput":true}]
,               "text_c": ["STRING",{"forceInput":true}]
,               "text_d": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["text","truncate_by","truncate_from","truncate_to"]
,           "optional": ["text_b","text_c","text_d"]
        }
,       "output": ["STRING","STRING","STRING","STRING"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["TEXT","TEXT_B","TEXT_C","TEXT_D"]
,       "name": "Text String Truncate"
,       "display_name": "Text String Truncate"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Text/Operations"
,       "output_node": false
    }
,   "True Random.org Number Generator": {
        "input": {
            "required": {
                "api_key": ["STRING",{"default":"00000000-0000-0000-0000-000000000000","multiline":false}]
,               "minimum": ["FLOAT",{"default":0,"min":-18446744073709552000,"max":18446744073709552000}]
,               "maximum": ["FLOAT",{"default":10000000,"min":-18446744073709552000,"max":18446744073709552000}]
,               "mode": [["random","fixed"]]
            }
        }
,       "input_order": {
            "required": ["api_key","minimum","maximum","mode"]
        }
,       "output": ["NUMBER","FLOAT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["NUMBER","FLOAT","INT"]
,       "name": "True Random.org Number Generator"
,       "display_name": "True Random.org Number Generator"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Number"
,       "output_node": false
    }
,   "unCLIP Checkpoint Loader": {
        "input": {
            "required": {
                "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["ckpt_name"]
        }
,       "output": ["MODEL","CLIP","VAE","CLIP_VISION","STRING"]
,       "output_is_list": [false,false,false,false,false]
,       "output_name": ["MODEL","CLIP","VAE","CLIP_VISION","NAME_STRING"]
,       "name": "unCLIP Checkpoint Loader"
,       "display_name": "unCLIP Checkpoint Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders"
,       "output_node": false
    }
,   "Upscale Model Loader": {
        "input": {
            "required": {
                "model_name": [["4x-UltraSharp.pth","RealESRGAN_x4plus.pth","RealESRGAN_x4plus_anime_6B.pth"]]
            }
        }
,       "input_order": {
            "required": ["model_name"]
        }
,       "output": ["UPSCALE_MODEL","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["UPSCALE_MODEL","MODEL_NAME_TEXT"]
,       "name": "Upscale Model Loader"
,       "display_name": "Upscale Model Loader"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Loaders"
,       "output_node": false
    }
,   "Upscale Model Switch": {
        "input": {
            "required": {
                "upscale_model_a": ["UPSCALE_MODEL"]
,               "upscale_model_b": ["UPSCALE_MODEL"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["upscale_model_a","upscale_model_b","boolean"]
        }
,       "output": ["UPSCALE_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALE_MODEL"]
,       "name": "Upscale Model Switch"
,       "display_name": "Upscale Model Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Write to GIF": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "transition_frames": ["INT",{"default":30,"min":2,"max":60,"step":1}]
,               "image_delay_ms": ["FLOAT",{"default":2500,"min":0.1,"max":60000,"step":0.1}]
,               "duration_ms": ["FLOAT",{"default":0.1,"min":0.1,"max":60000,"step":0.1}]
,               "loops": ["INT",{"default":0,"min":0,"max":100,"step":1}]
,               "max_size": ["INT",{"default":512,"min":128,"max":1280,"step":1}]
,               "output_path": ["STRING",{"default":"/home/runner/ComfyUI/output","multiline":false}]
,               "filename": ["STRING",{"default":"morph_writer","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["image","transition_frames","image_delay_ms","duration_ms","loops","max_size","output_path","filename"]
        }
,       "output": ["IMAGE","STRING","STRING"]
,       "output_is_list": [false,false,false]
,       "output_name": ["image_pass","filepath_text","filename_text"]
,       "name": "Write to GIF"
,       "display_name": "Write to GIF"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Animation/Writer"
,       "output_node": false
    }
,   "Write to Video": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "transition_frames": ["INT",{"default":30,"min":0,"max":120,"step":1}]
,               "image_delay_sec": ["FLOAT",{"default":2.5,"min":0.1,"max":60000,"step":0.1}]
,               "fps": ["INT",{"default":30,"min":1,"max":60,"step":1}]
,               "max_size": ["INT",{"default":512,"min":128,"max":1920,"step":1}]
,               "output_path": ["STRING",{"default":"./ComfyUI/output","multiline":false}]
,               "filename": ["STRING",{"default":"comfy_writer","multiline":false}]
,               "codec": [["AVC1","FFV1","H264","MP4V"]]
            }
        }
,       "input_order": {
            "required": ["image","transition_frames","image_delay_sec","fps","max_size","output_path","filename","codec"]
        }
,       "output": ["IMAGE","STRING","STRING"]
,       "output_is_list": [false,false,false]
,       "output_name": ["IMAGE_PASS","filepath_text","filename_text"]
,       "name": "Write to Video"
,       "display_name": "Write to Video"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Animation/Writer"
,       "output_node": false
    }
,   "VAE Input Switch": {
        "input": {
            "required": {
                "vae_a": ["VAE"]
,               "vae_b": ["VAE"]
,               "boolean": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["vae_a","vae_b","boolean"]
        }
,       "output": ["VAE"]
,       "output_is_list": [false]
,       "output_name": ["VAE"]
,       "name": "VAE Input Switch"
,       "display_name": "VAE Input Switch"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Logic"
,       "output_node": false
    }
,   "Video Dump Frames": {
        "input": {
            "required": {
                "video_path": ["STRING",{"default":"./ComfyUI/input/MyVideo.mp4","multiline":false}]
,               "output_path": ["STRING",{"default":"./ComfyUI/input/MyVideo","multiline":false}]
,               "prefix": ["STRING",{"default":"frame_","multiline":false}]
,               "filenumber_digits": ["INT",{"default":4,"min":-1,"max":8,"step":1}]
,               "extension": [["png","jpg","gif","tiff"]]
            }
        }
,       "input_order": {
            "required": ["video_path","output_path","prefix","filenumber_digits","extension"]
        }
,       "output": ["STRING","NUMBER"]
,       "output_is_list": [false,false]
,       "output_name": ["output_path","processed_count"]
,       "name": "Video Dump Frames"
,       "display_name": "Video Dump Frames"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "WAS Suite/Animation"
,       "output_node": false
    }
,   "CLIPSEG2": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "text": ["STRING",{"default":"","multiline":false}]
,               "use_cuda": ["BOOLEAN",{"default":false}]
            }
,           "optional": {
                "clipseg_model": ["CLIPSEG_MODEL"]
            }
        }
,       "input_order": {
            "required": ["image","text","use_cuda"]
,           "optional": ["clipseg_model"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "CLIPSEG2"
,       "display_name": "CLIPSEG2"
,       "description": ""
,       "python_module": "custom_nodes.was-node-suite-comfyui"
,       "category": "image/transformation"
,       "output_node": false
    }
,   "IPAdapter": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "weight_type": [["standard","prompt is more important","style transfer"]]
            }
,           "optional": {
                "attn_mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","start_at","end_at","weight_type"]
,           "optional": ["attn_mask"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapter"
,       "display_name": "IPAdapter"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter"
,       "output_node": false
    }
,   "IPAdapterAdvanced": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_type","combine_embeds","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterAdvanced"
,       "display_name": "IPAdapter Advanced"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter"
,       "output_node": false
    }
,   "IPAdapterBatch": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
,               "encode_batch_size": ["INT",{"default":0,"min":0,"max":4096}]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_type","start_at","end_at","embeds_scaling","encode_batch_size"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterBatch"
,       "display_name": "IPAdapter Batch (Adv.)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter"
,       "output_node": false
    }
,   "IPAdapterFaceID": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "weight_faceidv2": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
,               "insightface": ["INSIGHTFACE"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_faceidv2","weight_type","combine_embeds","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision","insightface"]
        }
,       "output": ["MODEL","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["MODEL","face_image"]
,       "name": "IPAdapterFaceID"
,       "display_name": "IPAdapter FaceID"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/faceid"
,       "output_node": false
    }
,   "IPAdapterFaceIDKolors": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "weight_faceidv2": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_kolors": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
,               "insightface": ["INSIGHTFACE"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_faceidv2","weight_kolors","weight_type","combine_embeds","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision","insightface"]
        }
,       "output": ["MODEL","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["MODEL","face_image"]
,       "name": "IPAdapterFaceIDKolors"
,       "display_name": "IPAdapter FaceID Kolors"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/faceid"
,       "output_node": false
    }
,   "IPAAdapterFaceIDBatch": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "weight_faceidv2": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
,               "insightface": ["INSIGHTFACE"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_faceidv2","weight_type","combine_embeds","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision","insightface"]
        }
,       "output": ["MODEL","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["MODEL","face_image"]
,       "name": "IPAAdapterFaceIDBatch"
,       "display_name": "IPAdapter FaceID Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/faceid"
,       "output_node": false
    }
,   "IPAdapterTiled": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "sharpening": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.05}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_type","combine_embeds","start_at","end_at","sharpening","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL","IMAGE","MASK"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","tiles","masks"]
,       "name": "IPAdapterTiled"
,       "display_name": "IPAdapter Tiled"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/tiled"
,       "output_node": false
    }
,   "IPAdapterTiledBatch": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "sharpening": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.05}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
,               "encode_batch_size": ["INT",{"default":0,"min":0,"max":4096}]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_type","start_at","end_at","sharpening","embeds_scaling","encode_batch_size"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL","IMAGE","MASK"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","tiles","masks"]
,       "name": "IPAdapterTiledBatch"
,       "display_name": "IPAdapter Tiled Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/tiled"
,       "output_node": false
    }
,   "IPAdapterEmbeds": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "pos_embed": ["EMBEDS"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "neg_embed": ["EMBEDS"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","pos_embed","weight","weight_type","start_at","end_at","embeds_scaling"]
,           "optional": ["neg_embed","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterEmbeds"
,       "display_name": "IPAdapter Embeds"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/embeds"
,       "output_node": false
    }
,   "IPAdapterEmbedsBatch": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "pos_embed": ["EMBEDS"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "neg_embed": ["EMBEDS"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","pos_embed","weight","weight_type","start_at","end_at","embeds_scaling"]
,           "optional": ["neg_embed","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterEmbedsBatch"
,       "display_name": "IPAdapter Embeds Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/embeds"
,       "output_node": false
    }
,   "IPAdapterStyleComposition": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image_style": ["IMAGE"]
,               "image_composition": ["IMAGE"]
,               "weight_style": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_composition": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "expand_style": ["BOOLEAN",{"default":false}]
,               "combine_embeds": [["concat","add","subtract","average","norm average"],{"default":"average"}]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image_style","image_composition","weight_style","weight_composition","expand_style","combine_embeds","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterStyleComposition"
,       "display_name": "IPAdapter Style & Composition SDXL"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/style_composition"
,       "output_node": false
    }
,   "IPAdapterStyleCompositionBatch": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image_style": ["IMAGE"]
,               "image_composition": ["IMAGE"]
,               "weight_style": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_composition": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "expand_style": ["BOOLEAN",{"default":false}]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image_style","image_composition","weight_style","weight_composition","expand_style","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterStyleCompositionBatch"
,       "display_name": "IPAdapter Style & Composition Batch SDXL"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/style_composition"
,       "output_node": false
    }
,   "IPAdapterMS": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_faceidv2": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
,               "layer_weights": ["STRING",{"default":"","multiline":true}]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
,               "insightface": ["INSIGHTFACE"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_faceidv2","weight_type","combine_embeds","start_at","end_at","embeds_scaling","layer_weights"]
,           "optional": ["image_negative","attn_mask","clip_vision","insightface"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterMS"
,       "display_name": "IPAdapter Mad Scientist"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/dev"
,       "output_node": false
    }
,   "IPAdapterClipVisionEnhancer": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
,               "enhance_tiles": ["INT",{"default":2,"min":1,"max":16}]
,               "enhance_ratio": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.05}]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_type","combine_embeds","start_at","end_at","embeds_scaling","enhance_tiles","enhance_ratio"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterClipVisionEnhancer"
,       "display_name": "IPAdapter ClipVision Enhancer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/dev"
,       "output_node": false
    }
,   "IPAdapterClipVisionEnhancerBatch": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
,               "enhance_tiles": ["INT",{"default":2,"min":1,"max":16}]
,               "enhance_ratio": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.05}]
,               "encode_batch_size": ["INT",{"default":0,"min":0,"max":4096}]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","weight_type","start_at","end_at","embeds_scaling","enhance_tiles","enhance_ratio","encode_batch_size"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterClipVisionEnhancerBatch"
,       "display_name": "IPAdapter ClipVision Enhancer Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/dev"
,       "output_node": false
    }
,   "IPAdapterFromParams": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "ipadapter_params": ["IPADAPTER_PARAMS"]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","ipadapter_params","combine_embeds","embeds_scaling"]
,           "optional": ["image_negative","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterFromParams"
,       "display_name": "IPAdapter from Params"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/params"
,       "output_node": false
    }
,   "IPAdapterPreciseStyleTransfer": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "style_boost": ["FLOAT",{"default":1,"min":-5,"max":5,"step":0.05}]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","style_boost","combine_embeds","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterPreciseStyleTransfer"
,       "display_name": "IPAdapter Precise Style Transfer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter"
,       "output_node": false
    }
,   "IPAdapterPreciseStyleTransferBatch": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "style_boost": ["FLOAT",{"default":1,"min":-5,"max":5,"step":0.05}]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","style_boost","combine_embeds","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterPreciseStyleTransferBatch"
,       "display_name": "IPAdapter Precise Style Transfer Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter"
,       "output_node": false
    }
,   "IPAdapterPreciseComposition": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "composition_boost": ["FLOAT",{"default":0,"min":-5,"max":5,"step":0.05}]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","composition_boost","combine_embeds","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterPreciseComposition"
,       "display_name": "IPAdapter Precise Composition"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter"
,       "output_node": false
    }
,   "IPAdapterPreciseCompositionBatch": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":5,"step":0.05}]
,               "composition_boost": ["FLOAT",{"default":0,"min":-5,"max":5,"step":0.05}]
,               "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
,               "embeds_scaling": [["V only","K+V","K+V w/ C penalty","K+mean(V) w/ C penalty"]]
            }
,           "optional": {
                "image_negative": ["IMAGE"]
,               "attn_mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["model","ipadapter","image","weight","composition_boost","combine_embeds","start_at","end_at","embeds_scaling"]
,           "optional": ["image_negative","attn_mask","clip_vision"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "IPAdapterPreciseCompositionBatch"
,       "display_name": "IPAdapter Precise Composition Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter"
,       "output_node": false
    }
,   "IPAdapterUnifiedLoader": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "preset": [["LIGHT - SD1.5 only (low strength)","STANDARD (medium strength)","VIT-G (medium strength)","PLUS (high strength)","PLUS FACE (portraits)","FULL FACE - SD1.5 only (portraits stronger)"]]
            }
,           "optional": {
                "ipadapter": ["IPADAPTER"]
            }
        }
,       "input_order": {
            "required": ["model","preset"]
,           "optional": ["ipadapter"]
        }
,       "output": ["MODEL","IPADAPTER"]
,       "output_is_list": [false,false]
,       "output_name": ["model","ipadapter"]
,       "name": "IPAdapterUnifiedLoader"
,       "display_name": "IPAdapter Unified Loader"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter"
,       "output_node": false
    }
,   "IPAdapterUnifiedLoaderFaceID": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "preset": [["FACEID","FACEID PLUS - SD1.5 only","FACEID PLUS V2","FACEID PORTRAIT (style transfer)","FACEID PORTRAIT UNNORM - SDXL only (strong)"]]
,               "lora_strength": ["FLOAT",{"default":0.6,"min":0,"max":1,"step":0.01}]
,               "provider": [["CPU","CUDA","ROCM","DirectML","OpenVINO","CoreML"]]
            }
,           "optional": {
                "ipadapter": ["IPADAPTER"]
            }
        }
,       "input_order": {
            "required": ["model","preset","lora_strength","provider"]
,           "optional": ["ipadapter"]
        }
,       "output": ["MODEL","IPADAPTER"]
,       "output_is_list": [false,false]
,       "output_name": ["MODEL","ipadapter"]
,       "name": "IPAdapterUnifiedLoaderFaceID"
,       "display_name": "IPAdapter Unified Loader FaceID"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/faceid"
,       "output_node": false
    }
,   "IPAdapterModelLoader": {
        "input": {
            "required": {
                "ipadapter_file": [[]]
            }
        }
,       "input_order": {
            "required": ["ipadapter_file"]
        }
,       "output": ["IPADAPTER"]
,       "output_is_list": [false]
,       "output_name": ["IPADAPTER"]
,       "name": "IPAdapterModelLoader"
,       "display_name": "IPAdapter Model Loader"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/loaders"
,       "output_node": false
    }
,   "IPAdapterInsightFaceLoader": {
        "input": {
            "required": {
                "provider": [["CPU","CUDA","ROCM"]]
,               "model_name": [["buffalo_l","antelopev2"]]
            }
        }
,       "input_order": {
            "required": ["provider","model_name"]
        }
,       "output": ["INSIGHTFACE"]
,       "output_is_list": [false]
,       "output_name": ["INSIGHTFACE"]
,       "name": "IPAdapterInsightFaceLoader"
,       "display_name": "IPAdapter InsightFace Loader"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/loaders"
,       "output_node": false
    }
,   "IPAdapterUnifiedLoaderCommunity": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "preset": [["Composition","Kolors"]]
            }
,           "optional": {
                "ipadapter": ["IPADAPTER"]
            }
        }
,       "input_order": {
            "required": ["model","preset"]
,           "optional": ["ipadapter"]
        }
,       "output": ["MODEL","IPADAPTER"]
,       "output_is_list": [false,false]
,       "output_name": ["model","ipadapter"]
,       "name": "IPAdapterUnifiedLoaderCommunity"
,       "display_name": "IPAdapter Unified Loader Community"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/loaders"
,       "output_node": false
    }
,   "IPAdapterEncoder": {
        "input": {
            "required": {
                "ipadapter": ["IPADAPTER"]
,               "image": ["IMAGE"]
,               "weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.01}]
            }
,           "optional": {
                "mask": ["MASK"]
,               "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["ipadapter","image","weight"]
,           "optional": ["mask","clip_vision"]
        }
,       "output": ["EMBEDS","EMBEDS"]
,       "output_is_list": [false,false]
,       "output_name": ["pos_embed","neg_embed"]
,       "name": "IPAdapterEncoder"
,       "display_name": "IPAdapter Encoder"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/embeds"
,       "output_node": false
    }
,   "IPAdapterCombineEmbeds": {
        "input": {
            "required": {
                "embed1": ["EMBEDS"]
,               "method": [["concat","add","subtract","average","norm average","max","min"]]
            }
,           "optional": {
                "embed2": ["EMBEDS"]
,               "embed3": ["EMBEDS"]
,               "embed4": ["EMBEDS"]
,               "embed5": ["EMBEDS"]
            }
        }
,       "input_order": {
            "required": ["embed1","method"]
,           "optional": ["embed2","embed3","embed4","embed5"]
        }
,       "output": ["EMBEDS"]
,       "output_is_list": [false]
,       "output_name": ["EMBEDS"]
,       "name": "IPAdapterCombineEmbeds"
,       "display_name": "IPAdapter Combine Embeds"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/embeds"
,       "output_node": false
    }
,   "IPAdapterNoise": {
        "input": {
            "required": {
                "type": [["fade","dissolve","gaussian","shuffle"]]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.05}]
,               "blur": ["INT",{"default":0,"min":0,"max":32,"step":1}]
            }
,           "optional": {
                "image_optional": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["type","strength","blur"]
,           "optional": ["image_optional"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "IPAdapterNoise"
,       "display_name": "IPAdapter Noise"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/utils"
,       "output_node": false
    }
,   "PrepImageForClipVision": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "interpolation": [["LANCZOS","BICUBIC","HAMMING","BILINEAR","BOX","NEAREST"]]
,               "crop_position": [["top","bottom","left","right","center","pad"]]
,               "sharpening": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.05}]
            }
        }
,       "input_order": {
            "required": ["image","interpolation","crop_position","sharpening"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "PrepImageForClipVision"
,       "display_name": "Prep Image For ClipVision"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/utils"
,       "output_node": false
    }
,   "IPAdapterSaveEmbeds": {
        "input": {
            "required": {
                "embeds": ["EMBEDS"]
,               "filename_prefix": ["STRING",{"default":"IP_embeds"}]
            }
        }
,       "input_order": {
            "required": ["embeds","filename_prefix"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "IPAdapterSaveEmbeds"
,       "display_name": "IPAdapter Save Embeds"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/embeds"
,       "output_node": true
    }
,   "IPAdapterLoadEmbeds": {
        "input": {
            "required": {
                "embeds": [[]]
            }
        }
,       "input_order": {
            "required": ["embeds"]
        }
,       "output": ["EMBEDS"]
,       "output_is_list": [false]
,       "output_name": ["EMBEDS"]
,       "name": "IPAdapterLoadEmbeds"
,       "display_name": "IPAdapter Load Embeds"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/embeds"
,       "output_node": false
    }
,   "IPAdapterWeights": {
        "input": {
            "required": {
                "weights": ["STRING",{"default":"1.0, 0.0","multiline":true}]
,               "timing": [["custom","linear","ease_in_out","ease_in","ease_out","random"],{"default":"linear"}]
,               "frames": ["INT",{"default":0,"min":0,"max":9999,"step":1}]
,               "start_frame": ["INT",{"default":0,"min":0,"max":9999,"step":1}]
,               "end_frame": ["INT",{"default":9999,"min":0,"max":9999,"step":1}]
,               "add_starting_frames": ["INT",{"default":0,"min":0,"max":9999,"step":1}]
,               "add_ending_frames": ["INT",{"default":0,"min":0,"max":9999,"step":1}]
,               "method": [["full batch","shift batches","alternate batches"],{"default":"full batch"}]
            }
,           "optional": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["weights","timing","frames","start_frame","end_frame","add_starting_frames","add_ending_frames","method"]
,           "optional": ["image"]
        }
,       "output": ["FLOAT","FLOAT","INT","IMAGE","IMAGE","WEIGHTS_STRATEGY"]
,       "output_is_list": [false,false,false,false,false,false]
,       "output_name": ["weights","weights_invert","total_frames","image_1","image_2","weights_strategy"]
,       "name": "IPAdapterWeights"
,       "display_name": "IPAdapter Weights"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/weights"
,       "output_node": false
    }
,   "IPAdapterCombineWeights": {
        "input": {
            "required": {
                "weights_1": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.05}]
,               "weights_2": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.05}]
            }
        }
,       "input_order": {
            "required": ["weights_1","weights_2"]
        }
,       "output": ["FLOAT","INT"]
,       "output_is_list": [false,false]
,       "output_name": ["weights","count"]
,       "name": "IPAdapterCombineWeights"
,       "display_name": "IPAdapter Combine Weights"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/utils"
,       "output_node": false
    }
,   "IPAdapterWeightsFromStrategy": {
        "input": {
            "required": {
                "weights_strategy": ["WEIGHTS_STRATEGY"]
            }
,           "optional": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["weights_strategy"]
,           "optional": ["image"]
        }
,       "output": ["FLOAT","FLOAT","INT","IMAGE","IMAGE","WEIGHTS_STRATEGY"]
,       "output_is_list": [false,false,false,false,false,false]
,       "output_name": ["weights","weights_invert","total_frames","image_1","image_2","weights_strategy"]
,       "name": "IPAdapterWeightsFromStrategy"
,       "display_name": "IPAdapter Weights From Strategy"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/weights"
,       "output_node": false
    }
,   "IPAdapterPromptScheduleFromWeightsStrategy": {
        "input": {
            "required": {
                "weights_strategy": ["WEIGHTS_STRATEGY"]
,               "prompt": ["STRING",{"default":"","multiline":true}]
            }
        }
,       "input_order": {
            "required": ["weights_strategy","prompt"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["prompt_schedule"]
,       "name": "IPAdapterPromptScheduleFromWeightsStrategy"
,       "display_name": "Prompt Schedule From Weights Strategy"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/weights"
,       "output_node": false
    }
,   "IPAdapterRegionalConditioning": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "image_weight": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "prompt_weight": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.05}]
,               "weight_type": [["linear","ease in","ease out","ease in-out","reverse in-out","weak input","weak output","weak middle","strong middle","style transfer","composition","strong style transfer","style and composition","style transfer precise","composition precise"]]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
,           "optional": {
                "mask": ["MASK"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["image","image_weight","prompt_weight","weight_type","start_at","end_at"]
,           "optional": ["mask","positive","negative"]
        }
,       "output": ["IPADAPTER_PARAMS","CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false,false]
,       "output_name": ["IPADAPTER_PARAMS","POSITIVE","NEGATIVE"]
,       "name": "IPAdapterRegionalConditioning"
,       "display_name": "IPAdapter Regional Conditioning"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/params"
,       "output_node": false
    }
,   "IPAdapterCombineParams": {
        "input": {
            "required": {
                "params_1": ["IPADAPTER_PARAMS"]
,               "params_2": ["IPADAPTER_PARAMS"]
            }
,           "optional": {
                "params_3": ["IPADAPTER_PARAMS"]
,               "params_4": ["IPADAPTER_PARAMS"]
,               "params_5": ["IPADAPTER_PARAMS"]
            }
        }
,       "input_order": {
            "required": ["params_1","params_2"]
,           "optional": ["params_3","params_4","params_5"]
        }
,       "output": ["IPADAPTER_PARAMS"]
,       "output_is_list": [false]
,       "output_name": ["IPADAPTER_PARAMS"]
,       "name": "IPAdapterCombineParams"
,       "display_name": "IPAdapter Combine Params"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI_IPAdapter_plus"
,       "category": "ipadapter/params"
,       "output_node": false
    }
,   "NNLatentUpscale": {
        "input": {
            "required": {
                "latent": ["LATENT"]
,               "version": [["SDXL","SD 1.x"]]
,               "upscale": ["FLOAT",{"default":1.5,"min":1,"max":2,"step":0.01,"display":"number"}]
            }
        }
,       "input_order": {
            "required": ["latent","version","upscale"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "NNLatentUpscale"
,       "display_name": "NNLatentUpscale"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUi_NNLatentUpscale"
,       "category": "latent"
,       "output_node": false
    }
,   "PerturbedAttention": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "scale": ["FLOAT",{"default":3,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "adaptive_scale": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001,"round":0.0001}]
,               "unet_block": [["input","middle","output"],{"default":"middle"}]
,               "unet_block_id": ["INT",{"default":0}]
,               "sigma_start": ["FLOAT",{"default":-1,"min":-1,"max":10000,"step":0.01,"round":false}]
,               "sigma_end": ["FLOAT",{"default":-1,"min":-1,"max":10000,"step":0.01,"round":false}]
,               "rescale": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "rescale_mode": [["full","partial","snf"],{"default":"full"}]
            }
,           "optional": {
                "unet_block_list": ["STRING",{"default":""}]
            }
        }
,       "input_order": {
            "required": ["model","scale","adaptive_scale","unet_block","unet_block_id","sigma_start","sigma_end","rescale","rescale_mode"]
,           "optional": ["unet_block_list"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "PerturbedAttention"
,       "display_name": "Perturbed-Attention Guidance (Advanced)"
,       "description": ""
,       "python_module": "custom_nodes.sd-perturbed-attention"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "SmoothedEnergyGuidanceAdvanced": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "scale": ["FLOAT",{"default":3,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "blur_sigma": ["FLOAT",{"default":-1,"min":-1,"max":9999,"step":0.01,"round":0.001}]
,               "unet_block": [["input","middle","output"],{"default":"middle"}]
,               "unet_block_id": ["INT",{"default":0}]
,               "sigma_start": ["FLOAT",{"default":-1,"min":-1,"max":10000,"step":0.01,"round":false}]
,               "sigma_end": ["FLOAT",{"default":-1,"min":-1,"max":10000,"step":0.01,"round":false}]
,               "rescale": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "rescale_mode": [["full","partial","snf"],{"default":"full"}]
            }
,           "optional": {
                "unet_block_list": ["STRING",{"default":""}]
            }
        }
,       "input_order": {
            "required": ["model","scale","blur_sigma","unet_block","unet_block_id","sigma_start","sigma_end","rescale","rescale_mode"]
,           "optional": ["unet_block_list"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "SmoothedEnergyGuidanceAdvanced"
,       "display_name": "Smoothed Energy Guidance (Advanced)"
,       "description": ""
,       "python_module": "custom_nodes.sd-perturbed-attention"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "TRTAttachPag": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "unet_block": [["input","middle","output"],{"default":"middle"}]
,               "unet_block_id": ["INT",{"default":0}]
            }
,           "optional": {
                "unet_block_list": ["STRING",{"default":""}]
            }
        }
,       "input_order": {
            "required": ["model","unet_block","unet_block_id"]
,           "optional": ["unet_block_list"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "TRTAttachPag"
,       "display_name": "TensorRT Attach PAG"
,       "description": ""
,       "python_module": "custom_nodes.sd-perturbed-attention"
,       "category": "TensorRT"
,       "output_node": false
    }
,   "TRTPerturbedAttention": {
        "input": {
            "required": {
                "model_base": ["MODEL"]
,               "model_pag": ["MODEL"]
,               "scale": ["FLOAT",{"default":3,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "adaptive_scale": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001,"round":0.0001}]
,               "sigma_start": ["FLOAT",{"default":-1,"min":-1,"max":10000,"step":0.01,"round":false}]
,               "sigma_end": ["FLOAT",{"default":-1,"min":-1,"max":10000,"step":0.01,"round":false}]
,               "rescale": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "rescale_mode": [["full","partial"],{"default":"full"}]
            }
        }
,       "input_order": {
            "required": ["model_base","model_pag","scale","adaptive_scale","sigma_start","sigma_end","rescale","rescale_mode"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "TRTPerturbedAttention"
,       "display_name": "TensorRT Perturbed-Attention Guidance"
,       "description": ""
,       "python_module": "custom_nodes.sd-perturbed-attention"
,       "category": "TensorRT"
,       "output_node": false
    }
,   "CivitAI_Lora_Loader": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "lora_air": ["STRING",{"default":"{model_id}@{model_version}","multiline":false}]
,               "lora_name": [["none"]]
,               "strength_model": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
,               "strength_clip": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
,           "optional": {
                "api_key": ["STRING",{"default":"","multiline":false}]
,               "download_chunks": ["INT",{"default":4,"min":1,"max":12,"step":1}]
,               "download_path": [["models/loras"]]
            }
,           "hidden": {
                "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["model","clip","lora_air","lora_name","strength_model","strength_clip"]
,           "optional": ["api_key","download_chunks","download_path"]
,           "hidden": ["extra_pnginfo"]
        }
,       "output": ["MODEL","CLIP"]
,       "output_is_list": [false,false]
,       "output_name": ["MODEL","CLIP"]
,       "name": "CivitAI_Lora_Loader"
,       "display_name": "CivitAI Lora Loader"
,       "description": ""
,       "python_module": "custom_nodes.civitai_comfy_nodes"
,       "category": "CivitAI/Loaders"
,       "output_node": false
    }
,   "CivitAI_Checkpoint_Loader": {
        "input": {
            "required": {
                "ckpt_air": ["STRING",{"default":"{model_id}@{model_version}","multiline":false}]
,               "ckpt_name": [["none","AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
,           "optional": {
                "api_key": ["STRING",{"default":"","multiline":false}]
,               "download_chunks": ["INT",{"default":4,"min":1,"max":12,"step":1}]
,               "download_path": [["models/checkpoints"]]
            }
,           "hidden": {
                "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["ckpt_air","ckpt_name"]
,           "optional": ["api_key","download_chunks","download_path"]
,           "hidden": ["extra_pnginfo"]
        }
,       "output": ["MODEL","CLIP","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP","VAE"]
,       "name": "CivitAI_Checkpoint_Loader"
,       "display_name": "CivitAI Checkpoint Loader"
,       "description": ""
,       "python_module": "custom_nodes.civitai_comfy_nodes"
,       "category": "CivitAI/Loaders"
,       "output_node": false
    }
,   "ShufflePreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution","seed"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ShufflePreprocessor"
,       "display_name": "Content Shuffle"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/T2IAdapter-only"
,       "output_node": false
    }
,   "DensePosePreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "model": [["densepose_r50_fpn_dl.torchscript","densepose_r101_fpn_dl.torchscript"],{"default":"densepose_r50_fpn_dl.torchscript"}]
,               "cmap": [["Viridis (MagicAnimate)","Parula (CivitAI)"],{"default":"Viridis (MagicAnimate)"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["model","cmap","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "DensePosePreprocessor"
,       "display_name": "DensePose Estimator"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Faces and Poses Estimators"
,       "output_node": false
    }
,   "LeReS-DepthMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "rm_nearest": ["FLOAT",{"default":0,"min":0,"max":100,"step":0.01}]
,               "rm_background": ["FLOAT",{"default":0,"min":0,"max":100,"step":0.01}]
,               "boost": [["disable","enable"],{"default":"disable"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["rm_nearest","rm_background","boost","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "LeReS-DepthMapPreprocessor"
,       "display_name": "LeReS Depth Map (enable boost for leres++)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "BinaryPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "bin_threshold": ["INT",{"default":100,"min":0,"max":255,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["bin_threshold","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "BinaryPreprocessor"
,       "display_name": "Binary Lines"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "AnimeFace_SemSegPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "remove_background_using_abg": ["BOOLEAN",{"default":true}]
,               "resolution": ["INT",{"default":512,"min":512,"max":512,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["remove_background_using_abg","resolution"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","ABG_CHARACTER_MASK (MASK)"]
,       "name": "AnimeFace_SemSegPreprocessor"
,       "display_name": "Anime Face Segmentor"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Semantic Segmentation"
,       "output_node": false
    }
,   "Zoe-DepthMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Zoe-DepthMapPreprocessor"
,       "display_name": "Zoe Depth Map"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "DepthAnythingPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "ckpt_name": [["depth_anything_vitl14.pth","depth_anything_vitb14.pth","depth_anything_vits14.pth"],{"default":"depth_anything_vitl14.pth"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["ckpt_name","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "DepthAnythingPreprocessor"
,       "display_name": "Depth Anything"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "Zoe_DepthAnythingPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "environment": [["indoor","outdoor"],{"default":"indoor"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["environment","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Zoe_DepthAnythingPreprocessor"
,       "display_name": "Zoe Depth Anything"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "DepthAnythingV2Preprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "ckpt_name": [["depth_anything_v2_vitg.pth","depth_anything_v2_vitl.pth","depth_anything_v2_vitb.pth","depth_anything_v2_vits.pth"],{"default":"depth_anything_v2_vitl.pth"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["ckpt_name","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "DepthAnythingV2Preprocessor"
,       "display_name": "Depth Anything V2 - Relative"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "CannyEdgePreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "low_threshold": ["INT",{"default":100,"min":0,"max":255,"step":1}]
,               "high_threshold": ["INT",{"default":200,"min":0,"max":255,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["low_threshold","high_threshold","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "CannyEdgePreprocessor"
,       "display_name": "Canny Edge"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "DWPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "detect_hand": [["enable","disable"],{"default":"enable"}]
,               "detect_body": [["enable","disable"],{"default":"enable"}]
,               "detect_face": [["enable","disable"],{"default":"enable"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
,               "bbox_detector": [["yolox_l.torchscript.pt","yolox_l.onnx","yolo_nas_l_fp16.onnx","yolo_nas_m_fp16.onnx","yolo_nas_s_fp16.onnx"],{"default":"yolox_l.onnx"}]
,               "pose_estimator": [["dw-ll_ucoco_384_bs5.torchscript.pt","dw-ll_ucoco_384.onnx","dw-ll_ucoco.onnx"],{"default":"dw-ll_ucoco_384_bs5.torchscript.pt"}]
,               "scale_stick_for_xinsr_cn": [["disable","enable"],{"default":"disable"}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["detect_hand","detect_body","detect_face","resolution","bbox_detector","pose_estimator","scale_stick_for_xinsr_cn"]
        }
,       "output": ["IMAGE","POSE_KEYPOINT"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","POSE_KEYPOINT"]
,       "name": "DWPreprocessor"
,       "display_name": "DWPose Estimator"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Faces and Poses Estimators"
,       "output_node": false
    }
,   "AnimalPosePreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "bbox_detector": [["yolox_l.torchscript.pt","yolox_l.onnx","yolo_nas_l_fp16.onnx","yolo_nas_m_fp16.onnx","yolo_nas_s_fp16.onnx"],{"default":"yolox_l.torchscript.pt"}]
,               "pose_estimator": [["rtmpose-m_ap10k_256_bs5.torchscript.pt","rtmpose-m_ap10k_256.onnx"],{"default":"rtmpose-m_ap10k_256_bs5.torchscript.pt"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["bbox_detector","pose_estimator","resolution"]
        }
,       "output": ["IMAGE","POSE_KEYPOINT"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","POSE_KEYPOINT"]
,       "name": "AnimalPosePreprocessor"
,       "display_name": "AnimalPose Estimator (AP10K)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Faces and Poses Estimators"
,       "output_node": false
    }
,   "ImageLuminanceDetector": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "gamma_correction": ["FLOAT",{"default":1,"min":0.1,"max":2,"step":0.01}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["gamma_correction","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageLuminanceDetector"
,       "display_name": "Image Luminance"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Recolor"
,       "output_node": false
    }
,   "ImageIntensityDetector": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "gamma_correction": ["FLOAT",{"default":1,"min":0.1,"max":2,"step":0.01}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["gamma_correction","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageIntensityDetector"
,       "display_name": "Image Intensity"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Recolor"
,       "output_node": false
    }
,   "MediaPipe-FaceMeshPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "max_faces": ["INT",{"default":10,"min":1,"max":50,"step":1}]
,               "min_confidence": ["FLOAT",{"default":0.5,"min":0.1,"max":1,"step":0.01}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["max_faces","min_confidence","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "MediaPipe-FaceMeshPreprocessor"
,       "display_name": "MediaPipe Face Mesh"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Faces and Poses Estimators"
,       "output_node": false
    }
,   "DiffusionEdge_Preprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "environment": [["indoor","urban","natrual"],{"default":"indoor"}]
,               "patch_batch_size": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["environment","patch_batch_size","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "DiffusionEdge_Preprocessor"
,       "display_name": "Diffusion Edge (batch size ↑ => speed ↑, VRAM ↑)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "M-LSDPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "score_threshold": ["FLOAT",{"default":0.1,"min":0.01,"max":2,"step":0.01}]
,               "dist_threshold": ["FLOAT",{"default":0.1,"min":0.01,"max":20,"step":0.01}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["score_threshold","dist_threshold","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "M-LSDPreprocessor"
,       "display_name": "M-LSD Lines"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "HEDPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "safe": [["enable","disable"],{"default":"enable"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["safe","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "HEDPreprocessor"
,       "display_name": "HED Soft-Edge Lines"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "FakeScribblePreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "safe": [["enable","disable"],{"default":"enable"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["safe","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "FakeScribblePreprocessor"
,       "display_name": "Fake Scribble Lines (aka scribble_hed)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "OneFormer-COCO-SemSegPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "OneFormer-COCO-SemSegPreprocessor"
,       "display_name": "OneFormer COCO Segmentor"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Semantic Segmentation"
,       "output_node": false
    }
,   "OneFormer-ADE20K-SemSegPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "OneFormer-ADE20K-SemSegPreprocessor"
,       "display_name": "OneFormer ADE20K Segmentor"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Semantic Segmentation"
,       "output_node": false
    }
,   "BAE-NormalMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "BAE-NormalMapPreprocessor"
,       "display_name": "BAE Normal Map"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "MeshGraphormer-DepthMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "mask_bbox_padding": ["INT",{"default":30,"min":0,"max":100}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
,               "mask_type": [["based_on_depth","tight_bboxes","original"],{"default":"based_on_depth"}]
,               "mask_expand": ["INT",{"default":5,"min":-16384,"max":16384,"step":1}]
,               "rand_seed": ["INT",{"default":88,"min":0,"max":18446744073709552000,"step":1}]
,               "detect_thr": ["FLOAT",{"default":0.6,"min":0.1,"max":1,"step":0.01}]
,               "presence_thr": ["FLOAT",{"default":0.6,"min":0.1,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["mask_bbox_padding","resolution","mask_type","mask_expand","rand_seed","detect_thr","presence_thr"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","INPAINTING_MASK"]
,       "name": "MeshGraphormer-DepthMapPreprocessor"
,       "display_name": "MeshGraphormer Hand Refiner"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "MeshGraphormer+ImpactDetector-DepthMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "bbox_detector": ["BBOX_DETECTOR"]
            }
,           "optional": {
                "bbox_threshold": ["FLOAT",{"default":0.5,"min":0.1,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "bbox_crop_factor": ["FLOAT",{"default":3,"min":1,"max":10,"step":0.01}]
,               "drop_size": ["INT",{"default":10,"min":1,"max":16384,"step":1}]
,               "mask_bbox_padding": ["INT",{"default":30,"min":0,"max":100,"step":1}]
,               "mask_type": [["based_on_depth","tight_bboxes","original"],{"default":"based_on_depth"}]
,               "mask_expand": ["INT",{"default":5,"min":-16384,"max":16384,"step":1}]
,               "rand_seed": ["INT",{"default":88,"min":0,"max":18446744073709552000,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image","bbox_detector"]
,           "optional": ["bbox_threshold","bbox_dilation","bbox_crop_factor","drop_size","mask_bbox_padding","mask_type","mask_expand","rand_seed","resolution"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","INPAINTING_MASK"]
,       "name": "MeshGraphormer+ImpactDetector-DepthMapPreprocessor"
,       "display_name": "MeshGraphormer Hand Refiner With External Detector"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "DSINE-NormalMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "fov": ["FLOAT",{"default":60,"min":0,"max":365,"step":0.01}]
,               "iterations": ["INT",{"default":5,"min":1,"max":20,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["fov","iterations","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "DSINE-NormalMapPreprocessor"
,       "display_name": "DSINE Normal Map"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "MiDaS-NormalMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "a": ["FLOAT",{"default":6.283185307179586,"min":0,"max":15.707963267948966,"step":0.01}]
,               "bg_threshold": ["FLOAT",{"default":0.1,"min":0,"max":1,"step":0.01}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["a","bg_threshold","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "MiDaS-NormalMapPreprocessor"
,       "display_name": "MiDaS Normal Map"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "MiDaS-DepthMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "a": ["FLOAT",{"default":6.283185307179586,"min":0,"max":15.707963267948966,"step":0.01}]
,               "bg_threshold": ["FLOAT",{"default":0.1,"min":0,"max":1,"step":0.01}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["a","bg_threshold","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "MiDaS-DepthMapPreprocessor"
,       "display_name": "MiDaS Depth Map"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "AnyLineArtPreprocessor_aux": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "merge_with_lineart": [["lineart_standard","lineart_realisitic","lineart_anime","manga_line"],{"default":"lineart_standard"}]
,               "resolution": ["INT",{"default":1280,"min":64,"max":16384,"step":8}]
,               "lineart_lower_bound": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "lineart_upper_bound": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "object_min_size": ["INT",{"default":36,"min":1,"max":16384,"step":1}]
,               "object_connectivity": ["INT",{"default":1,"min":1,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["merge_with_lineart","resolution","lineart_lower_bound","lineart_upper_bound","object_min_size","object_connectivity"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "AnyLineArtPreprocessor_aux"
,       "display_name": "AnyLine Lineart"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "SAMPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "SAMPreprocessor"
,       "display_name": "SAM Segmentor"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/others"
,       "output_node": false
    }
,   "UniFormer-SemSegPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "UniFormer-SemSegPreprocessor"
,       "display_name": "UniFormer Segmentor"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Semantic Segmentation"
,       "output_node": false
    }
,   "SemSegPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "SemSegPreprocessor"
,       "display_name": "Semantic Segmentor (legacy, alias for UniFormer)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Semantic Segmentation"
,       "output_node": false
    }
,   "PiDiNetPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "safe": [["enable","disable"],{"default":"enable"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["safe","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "PiDiNetPreprocessor"
,       "display_name": "PiDiNet Soft-Edge Lines"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "InpaintPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "mask": ["MASK"]
            }
,           "optional": {
                "black_pixel_for_xinsir_cn": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["image","mask"]
,           "optional": ["black_pixel_for_xinsir_cn"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "InpaintPreprocessor"
,       "display_name": "Inpaint Preprocessor"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/others"
,       "output_node": false
    }
,   "LineArtPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "coarse": [["disable","enable"],{"default":"disable"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["coarse","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "LineArtPreprocessor"
,       "display_name": "Realistic Lineart"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "OpenposePreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "detect_hand": [["enable","disable"],{"default":"enable"}]
,               "detect_body": [["enable","disable"],{"default":"enable"}]
,               "detect_face": [["enable","disable"],{"default":"enable"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
,               "scale_stick_for_xinsr_cn": [["disable","enable"],{"default":"disable"}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["detect_hand","detect_body","detect_face","resolution","scale_stick_for_xinsr_cn"]
        }
,       "output": ["IMAGE","POSE_KEYPOINT"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","POSE_KEYPOINT"]
,       "name": "OpenposePreprocessor"
,       "display_name": "OpenPose Pose"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Faces and Poses Estimators"
,       "output_node": false
    }
,   "Unimatch_OptFlowPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "ckpt_name": [["gmflow-scale1-mixdata.pth","gmflow-scale2-mixdata.pth","gmflow-scale2-regrefine6-mixdata.pth"],{"default":"gmflow-scale2-regrefine6-mixdata.pth"}]
,               "backward_flow": ["BOOLEAN",{"default":false}]
,               "bidirectional_flow": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["image","ckpt_name","backward_flow","bidirectional_flow"]
        }
,       "output": ["OPTICAL_FLOW","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["OPTICAL_FLOW","PREVIEW_IMAGE"]
,       "name": "Unimatch_OptFlowPreprocessor"
,       "display_name": "Unimatch Optical Flow"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Optical Flow"
,       "output_node": false
    }
,   "MaskOptFlow": {
        "input": {
            "required": {
                "optical_flow": ["OPTICAL_FLOW"]
,               "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["optical_flow","mask"]
        }
,       "output": ["OPTICAL_FLOW","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["OPTICAL_FLOW","PREVIEW_IMAGE"]
,       "name": "MaskOptFlow"
,       "display_name": "Mask Optical Flow (DragNUWA)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Optical Flow"
,       "output_node": false
    }
,   "SavePoseKpsAsJsonFile": {
        "input": {
            "required": {
                "pose_kps": ["POSE_KEYPOINT"]
,               "filename_prefix": ["STRING",{"default":"PoseKeypoint"}]
            }
        }
,       "input_order": {
            "required": ["pose_kps","filename_prefix"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SavePoseKpsAsJsonFile"
,       "display_name": "Save Pose Keypoints"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Pose Keypoint Postprocess"
,       "output_node": true
    }
,   "FacialPartColoringFromPoseKps": {
        "input": {
            "required": {
                "pose_kps": ["POSE_KEYPOINT"]
,               "mode": [["point","polygon"],{"default":"polygon"}]
,               "skin": ["STRING",{"default":"rgb(0, 153, 255)","multiline":false}]
,               "left_eye": ["STRING",{"default":"rgb(0, 204, 153)","multiline":false}]
,               "right_eye": ["STRING",{"default":"rgb(255, 153, 0)","multiline":false}]
,               "nose": ["STRING",{"default":"rgb(255, 102, 255)","multiline":false}]
,               "upper_lip": ["STRING",{"default":"rgb(102, 0, 51)","multiline":false}]
,               "inner_mouth": ["STRING",{"default":"rgb(255, 204, 255)","multiline":false}]
,               "lower_lip": ["STRING",{"default":"rgb(255, 0, 102)","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["pose_kps","mode","skin","left_eye","right_eye","nose","upper_lip","inner_mouth","lower_lip"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "FacialPartColoringFromPoseKps"
,       "display_name": "Colorize Facial Parts from PoseKPS"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Pose Keypoint Postprocess"
,       "output_node": false
    }
,   "UpperBodyTrackingFromPoseKps": {
        "input": {
            "required": {
                "pose_kps": ["POSE_KEYPOINT"]
,               "id_include": ["STRING",{"default":"","multiline":false}]
,               "Head_width_height": ["STRING",{"default":"256, 256","multiline":false}]
,               "Neck_width_height": ["STRING",{"default":"100, 100","multiline":false}]
,               "Shoulder_width_height": ["STRING",{"default":"","multiline":false}]
,               "Torso_width_height": ["STRING",{"default":"350, 450","multiline":false}]
,               "RArm_width_height": ["STRING",{"default":"128, 256","multiline":false}]
,               "RForearm_width_height": ["STRING",{"default":"128, 256","multiline":false}]
,               "LArm_width_height": ["STRING",{"default":"128, 256","multiline":false}]
,               "LForearm_width_height": ["STRING",{"default":"128, 256","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["pose_kps","id_include","Head_width_height","Neck_width_height","Shoulder_width_height","Torso_width_height","RArm_width_height","RForearm_width_height","LArm_width_height","LForearm_width_height"]
        }
,       "output": ["TRACKING","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["tracking","prompt"]
,       "name": "UpperBodyTrackingFromPoseKps"
,       "display_name": "Upper Body Tracking From PoseKps (InstanceDiffusion)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Pose Keypoint Postprocess"
,       "output_node": false
    }
,   "RenderPeopleKps": {
        "input": {
            "required": {
                "kps": ["POSE_KEYPOINT"]
,               "render_body": ["BOOLEAN",{"default":true}]
,               "render_hand": ["BOOLEAN",{"default":true}]
,               "render_face": ["BOOLEAN",{"default":true}]
            }
        }
,       "input_order": {
            "required": ["kps","render_body","render_hand","render_face"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "RenderPeopleKps"
,       "display_name": "Render Pose JSON (Human)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Pose Keypoint Postprocess"
,       "output_node": false
    }
,   "RenderAnimalKps": {
        "input": {
            "required": {
                "kps": ["POSE_KEYPOINT"]
            }
        }
,       "input_order": {
            "required": ["kps"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "RenderAnimalKps"
,       "display_name": "Render Pose JSON (Animal)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Pose Keypoint Postprocess"
,       "output_node": false
    }
,   "TEEDPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "safe_steps": ["INT",{"default":2,"min":0,"max":10,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["safe_steps","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "TEEDPreprocessor"
,       "display_name": "TEEDPreprocessor"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "PyraCannyPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "low_threshold": ["INT",{"default":64,"min":0,"max":255,"step":1}]
,               "high_threshold": ["INT",{"default":128,"min":0,"max":255,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["low_threshold","high_threshold","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "PyraCannyPreprocessor"
,       "display_name": "PyraCanny"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "Metric3D-DepthMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "backbone": [["vit-small","vit-large","vit-giant2"],{"default":"vit-small"}]
,               "fx": ["INT",{"default":1000,"min":1,"max":16384,"step":1}]
,               "fy": ["INT",{"default":1000,"min":1,"max":16384,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["backbone","fx","fy","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Metric3D-DepthMapPreprocessor"
,       "display_name": "Metric3D Depth Map"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "Metric3D-NormalMapPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "backbone": [["vit-small","vit-large","vit-giant2"],{"default":"vit-small"}]
,               "fx": ["INT",{"default":1000,"min":1,"max":16384,"step":1}]
,               "fy": ["INT",{"default":1000,"min":1,"max":16384,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["backbone","fx","fy","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Metric3D-NormalMapPreprocessor"
,       "display_name": "Metric3D Normal Map"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Normal and Depth Estimators"
,       "output_node": false
    }
,   "Manga2Anime_LineArt_Preprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Manga2Anime_LineArt_Preprocessor"
,       "display_name": "Manga Lineart (aka lineart_anime_denoise)"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "ScribblePreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ScribblePreprocessor"
,       "display_name": "Scribble Lines"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "Scribble_XDoG_Preprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "threshold": ["INT",{"default":32,"min":1,"max":64,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["threshold","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Scribble_XDoG_Preprocessor"
,       "display_name": "Scribble XDoG Lines"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "Scribble_PiDiNet_Preprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "safe": [["enable","disable"]]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["safe","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Scribble_PiDiNet_Preprocessor"
,       "display_name": "Scribble PiDiNet Lines"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "AnimeLineArtPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "AnimeLineArtPreprocessor"
,       "display_name": "Anime Lineart"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "LineartStandardPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "guassian_sigma": ["FLOAT",{"default":6,"min":0,"max":100,"step":0.01}]
,               "intensity_threshold": ["INT",{"default":8,"min":0,"max":16,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["guassian_sigma","intensity_threshold","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "LineartStandardPreprocessor"
,       "display_name": "Standard Lineart"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/Line Extractors"
,       "output_node": false
    }
,   "TilePreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "pyrUp_iters": ["INT",{"default":3,"min":1,"max":10,"step":1}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["pyrUp_iters","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "TilePreprocessor"
,       "display_name": "Tile"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/tile"
,       "output_node": false
    }
,   "TTPlanet_TileGF_Preprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "scale_factor": ["FLOAT",{"default":1,"min":1,"max":8,"step":0.01}]
,               "blur_strength": ["FLOAT",{"default":2,"min":1,"max":10,"step":0.01}]
,               "radius": ["INT",{"default":7,"min":1,"max":20,"step":1}]
,               "eps": ["FLOAT",{"default":0.01,"min":0.001,"max":0.1,"step":0.001}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["scale_factor","blur_strength","radius","eps","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "TTPlanet_TileGF_Preprocessor"
,       "display_name": "TTPlanet Tile GuidedFilter"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/tile"
,       "output_node": false
    }
,   "TTPlanet_TileSimple_Preprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "scale_factor": ["FLOAT",{"default":1,"min":1,"max":8,"step":0.01}]
,               "blur_strength": ["FLOAT",{"default":2,"min":1,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["scale_factor","blur_strength"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "TTPlanet_TileSimple_Preprocessor"
,       "display_name": "TTPlanet Tile Simple"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/tile"
,       "output_node": false
    }
,   "ColorPreprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ColorPreprocessor"
,       "display_name": "Color Pallete"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors/T2IAdapter-only"
,       "output_node": false
    }
,   "AIO_Preprocessor": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "preprocessor": [["none","ShufflePreprocessor","DensePosePreprocessor","LeReS-DepthMapPreprocessor","BinaryPreprocessor","AnimeFace_SemSegPreprocessor","Zoe-DepthMapPreprocessor","DepthAnythingPreprocessor","Zoe_DepthAnythingPreprocessor","DepthAnythingV2Preprocessor","CannyEdgePreprocessor","DWPreprocessor","AnimalPosePreprocessor","ImageLuminanceDetector","ImageIntensityDetector","MediaPipe-FaceMeshPreprocessor","M-LSDPreprocessor","HEDPreprocessor","FakeScribblePreprocessor","OneFormer-COCO-SemSegPreprocessor","OneFormer-ADE20K-SemSegPreprocessor","BAE-NormalMapPreprocessor","MeshGraphormer-DepthMapPreprocessor","DSINE-NormalMapPreprocessor","MiDaS-NormalMapPreprocessor","MiDaS-DepthMapPreprocessor","AnyLineArtPreprocessor_aux","SAMPreprocessor","UniFormer-SemSegPreprocessor","SemSegPreprocessor","PiDiNetPreprocessor","LineArtPreprocessor","OpenposePreprocessor","TEEDPreprocessor","PyraCannyPreprocessor","Metric3D-DepthMapPreprocessor","Metric3D-NormalMapPreprocessor","Manga2Anime_LineArt_Preprocessor","ScribblePreprocessor","Scribble_XDoG_Preprocessor","Scribble_PiDiNet_Preprocessor","AnimeLineArtPreprocessor","LineartStandardPreprocessor","TilePreprocessor","TTPlanet_TileGF_Preprocessor","TTPlanet_TileSimple_Preprocessor","ColorPreprocessor"],{"default":"none"}]
,               "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["preprocessor","resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "AIO_Preprocessor"
,       "display_name": "AIO Aux Preprocessor"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors"
,       "output_node": false
    }
,   "ControlNetPreprocessorSelector": {
        "input": {
            "required": {
                "preprocessor": [["none","ShufflePreprocessor","DensePosePreprocessor","LeReS-DepthMapPreprocessor","BinaryPreprocessor","AnimeFace_SemSegPreprocessor","Zoe-DepthMapPreprocessor","DepthAnythingPreprocessor","Zoe_DepthAnythingPreprocessor","DepthAnythingV2Preprocessor","CannyEdgePreprocessor","DWPreprocessor","AnimalPosePreprocessor","ImageLuminanceDetector","ImageIntensityDetector","MediaPipe-FaceMeshPreprocessor","M-LSDPreprocessor","HEDPreprocessor","FakeScribblePreprocessor","OneFormer-COCO-SemSegPreprocessor","OneFormer-ADE20K-SemSegPreprocessor","BAE-NormalMapPreprocessor","MeshGraphormer-DepthMapPreprocessor","DSINE-NormalMapPreprocessor","MiDaS-NormalMapPreprocessor","MiDaS-DepthMapPreprocessor","AnyLineArtPreprocessor_aux","SAMPreprocessor","UniFormer-SemSegPreprocessor","SemSegPreprocessor","PiDiNetPreprocessor","LineArtPreprocessor","OpenposePreprocessor","TEEDPreprocessor","PyraCannyPreprocessor","Metric3D-DepthMapPreprocessor","Metric3D-NormalMapPreprocessor","Manga2Anime_LineArt_Preprocessor","ScribblePreprocessor","Scribble_XDoG_Preprocessor","Scribble_PiDiNet_Preprocessor","AnimeLineArtPreprocessor","LineartStandardPreprocessor","TilePreprocessor","TTPlanet_TileGF_Preprocessor","TTPlanet_TileSimple_Preprocessor","ColorPreprocessor"]]
            }
        }
,       "input_order": {
            "required": ["preprocessor"]
        }
,       "output": [["none","ShufflePreprocessor","DensePosePreprocessor","LeReS-DepthMapPreprocessor","BinaryPreprocessor","AnimeFace_SemSegPreprocessor","Zoe-DepthMapPreprocessor","DepthAnythingPreprocessor","Zoe_DepthAnythingPreprocessor","DepthAnythingV2Preprocessor","CannyEdgePreprocessor","DWPreprocessor","AnimalPosePreprocessor","ImageLuminanceDetector","ImageIntensityDetector","MediaPipe-FaceMeshPreprocessor","M-LSDPreprocessor","HEDPreprocessor","FakeScribblePreprocessor","OneFormer-COCO-SemSegPreprocessor","OneFormer-ADE20K-SemSegPreprocessor","BAE-NormalMapPreprocessor","MeshGraphormer-DepthMapPreprocessor","DSINE-NormalMapPreprocessor","MiDaS-NormalMapPreprocessor","MiDaS-DepthMapPreprocessor","AnyLineArtPreprocessor_aux","SAMPreprocessor","UniFormer-SemSegPreprocessor","SemSegPreprocessor","PiDiNetPreprocessor","LineArtPreprocessor","OpenposePreprocessor","TEEDPreprocessor","PyraCannyPreprocessor","Metric3D-DepthMapPreprocessor","Metric3D-NormalMapPreprocessor","Manga2Anime_LineArt_Preprocessor","ScribblePreprocessor","Scribble_XDoG_Preprocessor","Scribble_PiDiNet_Preprocessor","AnimeLineArtPreprocessor","LineartStandardPreprocessor","TilePreprocessor","TTPlanet_TileGF_Preprocessor","TTPlanet_TileSimple_Preprocessor","ColorPreprocessor"]]
,       "output_is_list": [false]
,       "output_name": ["preprocessor"]
,       "name": "ControlNetPreprocessorSelector"
,       "display_name": "Preprocessor Selector"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors"
,       "output_node": false
    }
,   "PixelPerfectResolution": {
        "input": {
            "required": {
                "original_image": ["IMAGE"]
,               "image_gen_width": ["INT",{"default":512,"min":64,"max":8192,"step":8}]
,               "image_gen_height": ["INT",{"default":512,"min":64,"max":8192,"step":8}]
,               "resize_mode": [["Just Resize","Crop and Resize","Resize and Fill"],{"default":"Just Resize"}]
            }
        }
,       "input_order": {
            "required": ["original_image","image_gen_width","image_gen_height","resize_mode"]
        }
,       "output": ["INT"]
,       "output_is_list": [false]
,       "output_name": ["RESOLUTION (INT)"]
,       "name": "PixelPerfectResolution"
,       "display_name": "Pixel Perfect Resolution"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors"
,       "output_node": false
    }
,   "ImageGenResolutionFromImage": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["INT","INT"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE_GEN_WIDTH (INT)","IMAGE_GEN_HEIGHT (INT)"]
,       "name": "ImageGenResolutionFromImage"
,       "display_name": "Generation Resolution From Image"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors"
,       "output_node": false
    }
,   "ImageGenResolutionFromLatent": {
        "input": {
            "required": {
                "latent": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["latent"]
        }
,       "output": ["INT","INT"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE_GEN_WIDTH (INT)","IMAGE_GEN_HEIGHT (INT)"]
,       "name": "ImageGenResolutionFromLatent"
,       "display_name": "Generation Resolution From Latent"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors"
,       "output_node": false
    }
,   "HintImageEnchance": {
        "input": {
            "required": {
                "hint_image": ["IMAGE"]
,               "image_gen_width": ["INT",{"default":512,"min":64,"max":8192,"step":8}]
,               "image_gen_height": ["INT",{"default":512,"min":64,"max":8192,"step":8}]
,               "resize_mode": [["Just Resize","Crop and Resize","Resize and Fill"],{"default":"Just Resize"}]
            }
        }
,       "input_order": {
            "required": ["hint_image","image_gen_width","image_gen_height","resize_mode"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "HintImageEnchance"
,       "display_name": "Enchance And Resize Hint Images"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors"
,       "output_node": false
    }
,   "ExecuteAllControlNetPreprocessors": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
,           "optional": {
                "resolution": ["INT",{"default":512,"min":64,"max":16384,"step":64}]
            }
        }
,       "input_order": {
            "required": ["image"]
,           "optional": ["resolution"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ExecuteAllControlNetPreprocessors"
,       "display_name": "Execute All ControlNet Preprocessors"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors"
,       "output_node": false
    }
,   "ControlNetAuxSimpleAddText": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "text": ["STRING",{"default":"","multiline":false}]
            }
        }
,       "input_order": {
            "required": ["image","text"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ControlNetAuxSimpleAddText"
,       "display_name": "ControlNetAuxSimpleAddText"
,       "description": ""
,       "python_module": "custom_nodes.comfyui_controlnet_aux"
,       "category": "ControlNet Preprocessors"
,       "output_node": false
    }
,   "MarigoldModelLoader": {
        "input": {
            "required": {
                "model": [["prs-eth/marigold-v1-0","prs-eth/marigold-depth-lcm-v1-0","prs-eth/marigold-normals-v0-1","prs-eth/marigold-normals-lcm-v0-1","GonzaloMG/marigold-e2e-ft-depth","GonzaloMG/marigold-e2e-ft-normals"],{"default":"marigold-lcm-v1-0"}]
            }
        }
,       "input_order": {
            "required": ["model"]
        }
,       "output": ["MARIGOLDMODEL"]
,       "output_is_list": [false]
,       "output_name": ["marigold_model"]
,       "name": "MarigoldModelLoader"
,       "display_name": "MarigoldModelLoader"
,       "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n  \nUses Diffusers 0.28.0 Marigold pipelines.  \nModels are automatically downloaded to  \nComfyUI/models/diffusers -folder\n"
,       "python_module": "custom_nodes.ComfyUI-Marigold"
,       "category": "Marigold"
,       "output_node": false
    }
,   "MarigoldDepthEstimation_v2": {
        "input": {
            "required": {
                "marigold_model": ["MARIGOLDMODEL"]
,               "image": ["IMAGE"]
,               "seed": ["INT",{"default":123,"min":0,"max":18446744073709552000,"step":1}]
,               "denoise_steps": ["INT",{"default":4,"min":1,"max":4096,"step":1}]
,               "ensemble_size": ["INT",{"default":3,"min":1,"max":4096,"step":1}]
,               "processing_resolution": ["INT",{"default":768,"min":64,"max":4096,"step":8}]
,               "scheduler": [["DDIMScheduler","LCMScheduler"],{"default":"LCMScheduler"}]
,               "use_taesd_vae": ["BOOLEAN",{"default":false}]
            }
,           "optional": {
                "keep_model_loaded": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["marigold_model","image","seed","denoise_steps","ensemble_size","processing_resolution","scheduler","use_taesd_vae"]
,           "optional": ["keep_model_loaded"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "MarigoldDepthEstimation_v2"
,       "display_name": "MarigoldDepthEstimation_v2"
,       "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n  \nUses Diffusers 0.28.0 Marigold pipelines.  \n"
,       "python_module": "custom_nodes.ComfyUI-Marigold"
,       "category": "Marigold"
,       "output_node": false
    }
,   "MarigoldDepthEstimation_v2_video": {
        "input": {
            "required": {
                "marigold_model": ["MARIGOLDMODEL"]
,               "images": ["IMAGE"]
,               "seed": ["INT",{"default":123,"min":0,"max":18446744073709552000,"step":1}]
,               "denoise_steps": ["INT",{"default":4,"min":1,"max":4096,"step":1}]
,               "processing_resolution": ["INT",{"default":768,"min":64,"max":4096,"step":8}]
,               "scheduler": [["DDIMScheduler","LCMScheduler"],{"default":"LCMScheduler"}]
,               "blend_factor": ["FLOAT",{"default":0.1,"min":0,"max":1,"step":0.01}]
,               "use_taesd_vae": ["BOOLEAN",{"default":true}]
            }
,           "optional": {
                "keep_model_loaded": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["marigold_model","images","seed","denoise_steps","processing_resolution","scheduler","blend_factor","use_taesd_vae"]
,           "optional": ["keep_model_loaded"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "MarigoldDepthEstimation_v2_video"
,       "display_name": "MarigoldDepthEstimation_v2_video"
,       "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n  \nUses Diffusers 0.28.0 Marigold pipelines.  \nThis node uses the previous frame as init latent to  \nsmooth out the video.  \n"
,       "python_module": "custom_nodes.ComfyUI-Marigold"
,       "category": "Marigold"
,       "output_node": false
    }
,   "MarigoldDepthEstimation": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "seed": ["INT",{"default":123,"min":0,"max":18446744073709552000,"step":1}]
,               "denoise_steps": ["INT",{"default":10,"min":1,"max":4096,"step":1}]
,               "n_repeat": ["INT",{"default":10,"min":1,"max":4096,"step":1}]
,               "regularizer_strength": ["FLOAT",{"default":0.02,"min":0.001,"max":4096,"step":0.001}]
,               "reduction_method": [["median","mean"],{"default":"median"}]
,               "max_iter": ["INT",{"default":5,"min":1,"max":4096,"step":1}]
,               "tol": ["FLOAT",{"default":0.001,"min":0.000001,"max":0.1,"step":0.000001}]
,               "invert": ["BOOLEAN",{"default":true}]
,               "keep_model_loaded": ["BOOLEAN",{"default":true}]
,               "n_repeat_batch_size": ["INT",{"default":2,"min":1,"max":4096,"step":1}]
,               "use_fp16": ["BOOLEAN",{"default":true}]
,               "scheduler": [["DDIMScheduler","DDPMScheduler","PNDMScheduler","DEISMultistepScheduler","LCMScheduler"],{"default":"DDIMScheduler"}]
,               "normalize": ["BOOLEAN",{"default":true}]
            }
,           "optional": {
                "model": [["Marigold","marigold-lcm-v1-0"],{"default":"Marigold"}]
            }
        }
,       "input_order": {
            "required": ["image","seed","denoise_steps","n_repeat","regularizer_strength","reduction_method","max_iter","tol","invert","keep_model_loaded","n_repeat_batch_size","use_fp16","scheduler","normalize"]
,           "optional": ["model"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["ensembled_image"]
,       "name": "MarigoldDepthEstimation"
,       "display_name": "MarigoldDepthEstimation"
,       "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n  \n- denoise_steps: steps per depth map, increase for accuracy in exchange of processing time\n- n_repeat: amount of iterations to be ensembled into single depth map\n- n_repeat_batch_size: how many of the n_repeats are processed as a batch,  \nif you have the VRAM this can match the n_repeats for faster processing  \n- model: Marigold or it's LCM version marigold-lcm-v1-0  \nFor the LCM model use around 4 steps and the LCMScheduler  \n- scheduler: Different schedulers give bit different results  \n- invert: marigold by default produces depth map where black is front,  \nfor controlnets etc. we want the opposite.  \n- regularizer_strength, reduction_method, max_iter, tol (tolerance) are settings   \nfor the ensembling process, generally do not touch.  \n- use_fp16: if true, use fp16, if false use fp32  \nfp16 uses much less VRAM, but in some cases can lead to loss of quality.  \n"
,       "python_module": "custom_nodes.ComfyUI-Marigold"
,       "category": "Marigold"
,       "output_node": false
    }
,   "MarigoldDepthEstimationVideo": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "seed": ["INT",{"default":123,"min":0,"max":18446744073709552000,"step":1}]
,               "first_frame_denoise_steps": ["INT",{"default":4,"min":1,"max":4096,"step":1}]
,               "first_frame_n_repeat": ["INT",{"default":1,"min":1,"max":4096,"step":1}]
,               "n_repeat_batch_size": ["INT",{"default":1,"min":1,"max":4096,"step":1}]
,               "invert": ["BOOLEAN",{"default":true}]
,               "keep_model_loaded": ["BOOLEAN",{"default":true}]
,               "scheduler": [["DDIMScheduler","DDPMScheduler","PNDMScheduler","DEISMultistepScheduler","LCMScheduler"],{"default":"DEISMultistepScheduler"}]
,               "normalize": ["BOOLEAN",{"default":true}]
,               "denoise_steps": ["INT",{"default":4,"min":1,"max":4096,"step":1}]
,               "flow_warping": ["BOOLEAN",{"default":true}]
,               "flow_depth_mix": ["FLOAT",{"default":0.3,"min":0,"max":1,"step":0.05}]
,               "noise_ratio": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dtype": [["fp16","bf16","fp32"],{"default":"fp16"}]
            }
,           "optional": {
                "model": [["Marigold","marigold-lcm-v1-0"],{"default":"Marigold"}]
            }
        }
,       "input_order": {
            "required": ["image","seed","first_frame_denoise_steps","first_frame_n_repeat","n_repeat_batch_size","invert","keep_model_loaded","scheduler","normalize","denoise_steps","flow_warping","flow_depth_mix","noise_ratio","dtype"]
,           "optional": ["model"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["ensembled_image"]
,       "name": "MarigoldDepthEstimationVideo"
,       "display_name": "MarigoldDepthEstimationVideo"
,       "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n\nThis node is experimental version that includes optical flow  \nfor video consistency between frames.  \n\n- denoise_steps: steps per depth map, increase for accuracy in exchange of processing time\n- n_repeat: amount of iterations to be ensembled into single depth map\n- n_repeat_batch_size: how many of the n_repeats are processed as a batch,  \nif you have the VRAM this can match the n_repeats for faster processing  \n- model: Marigold or it's LCM version marigold-lcm-v1-0  \nFor the LCM model use around 4 steps and the LCMScheduler  \n- scheduler: Different schedulers give bit different results  \n- invert: marigold by default produces depth map where black is front,  \nfor controlnets etc. we want the opposite.  \n- regularizer_strength, reduction_method, max_iter, tol (tolerance) are settings   \nfor the ensembling process, generally do not touch.  \n"
,       "python_module": "custom_nodes.ComfyUI-Marigold"
,       "category": "Marigold"
,       "output_node": false
    }
,   "ColorizeDepthmap": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "colorize_method": [["Spectral","terrain","viridis","plasma","inferno","magma","cividis","twilight","rainbow","gist_rainbow","gist_ncar","gist_earth","turbo","jet","afmhot","copper","seismic","hsv","brg"],{"default":"Spectral"}]
            }
        }
,       "input_order": {
            "required": ["image","colorize_method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "ColorizeDepthmap"
,       "display_name": "Colorize Depthmap"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Marigold"
,       "category": "Marigold"
,       "output_node": false
    }
,   "SaveImageOpenEXR": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "filename_prefix": ["STRING",{"default":"ComfyUI_EXR"}]
            }
        }
,       "input_order": {
            "required": ["images","filename_prefix"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["file_url"]
,       "name": "SaveImageOpenEXR"
,       "display_name": "SaveImageOpenEXR"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Marigold"
,       "category": "Marigold"
,       "output_node": true
    }
,   "RemapDepth": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "min": ["FLOAT",{"default":0,"min":-10,"max":1,"step":0.01}]
,               "max": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "clamp": ["BOOLEAN",{"default":true}]
            }
        }
,       "input_order": {
            "required": ["image","min","max","clamp"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "RemapDepth"
,       "display_name": "Remap Depth"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Marigold"
,       "category": "Marigold"
,       "output_node": false
    }
,   "SAMLoader": {
        "input": {
            "required": {
                "model_name": [["sam_vit_b_01ec64.pth","ESAM"],{"tooltip":"The detection accuracy varies depending on the SAM model. ESAM can only be used if ComfyUI-YoloWorld-EfficientSAM is installed."}]
,               "device_mode": [["AUTO","Prefer GPU","CPU"],{"tooltip":"AUTO: Only applicable when a GPU is available. It temporarily loads the SAM_MODEL into VRAM only when the detection function is used.\nPrefer GPU: Tries to keep the SAM_MODEL on the GPU whenever possible. This can be used when there is sufficient VRAM available.\nCPU: Always loads only on the CPU."}]
            }
        }
,       "input_order": {
            "required": ["model_name","device_mode"]
        }
,       "output": ["SAM_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["SAM_MODEL"]
,       "name": "SAMLoader"
,       "display_name": "SAMLoader (Impact)"
,       "description": "Load the SAM (Segment Anything) model. This can be used in places that utilize SAM detection functionality, such as SAMDetector or SimpleDetector.\nThe SAM detection functionality in Impact Pack must use the SAM_MODEL loaded through this node."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack"
,       "output_node": false
    }
,   "CLIPSegDetectorProvider": {
        "input": {
            "required": {
                "text": ["STRING",{"multiline":false,"tooltip":"Enter the targets to be detected, separated by commas"}]
,               "blur": ["FLOAT",{"min":0,"max":15,"step":0.1,"default":7,"tooltip":"Blurs the detected mask"}]
,               "threshold": ["FLOAT",{"min":0,"max":1,"step":0.05,"default":0.4,"tooltip":"Detects only areas that are certain above the threshold."}]
,               "dilation_factor": ["INT",{"min":0,"max":10,"step":1,"default":4,"tooltip":"Dilates the detected mask."}]
            }
        }
,       "input_order": {
            "required": ["text","blur","threshold","dilation_factor"]
        }
,       "output": ["BBOX_DETECTOR"]
,       "output_is_list": [false]
,       "output_name": ["BBOX_DETECTOR"]
,       "name": "CLIPSegDetectorProvider"
,       "display_name": "CLIPSegDetectorProvider"
,       "description": "Provides a detection function using CLIPSeg, which generates masks based on text prompts.\nTo use this node, the CLIPSeg custom node must be installed."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ONNXDetectorProvider": {
        "input": {
            "required": {
                "model_name": [[]]
            }
        }
,       "input_order": {
            "required": ["model_name"]
        }
,       "output": ["BBOX_DETECTOR"]
,       "output_is_list": [false]
,       "output_name": ["BBOX_DETECTOR"]
,       "name": "ONNXDetectorProvider"
,       "display_name": "ONNXDetectorProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack"
,       "output_node": false
    }
,   "BitwiseAndMaskForEach": {
        "input": {
            "required": {
                "base_segs": ["SEGS"]
,               "mask_segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["base_segs","mask_segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "BitwiseAndMaskForEach"
,       "display_name": "Pixelwise(SEGS & SEGS)"
,       "description": "Retains only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "SubtractMaskForEach": {
        "input": {
            "required": {
                "base_segs": ["SEGS"]
,               "mask_segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["base_segs","mask_segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "SubtractMaskForEach"
,       "display_name": "Pixelwise(SEGS - SEGS)"
,       "description": "Removes only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "DetailerForEach": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","model","clip","vae","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","feather","noise_mask","force_inpaint","wildcard","cycle"]
,           "optional": ["detailer_hook","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "DetailerForEach"
,       "display_name": "Detailer (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DetailerForEachDebug": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","model","clip","vae","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","feather","noise_mask","force_inpaint","wildcard","cycle"]
,           "optional": ["detailer_hook","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE","IMAGE","IMAGE"]
,       "output_is_list": [false,true,true,true,true]
,       "output_name": ["image","cropped","cropped_refined","cropped_refined_alpha","cnet_images"]
,       "name": "DetailerForEachDebug"
,       "display_name": "DetailerDebug (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DetailerForEachPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","feather","noise_mask","force_inpaint","basic_pipe","wildcard","refiner_ratio","cycle"]
,           "optional": ["detailer_hook","refiner_basic_pipe_opt","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","SEGS","BASIC_PIPE","IMAGE"]
,       "output_is_list": [false,false,false,true]
,       "output_name": ["image","segs","basic_pipe","cnet_images"]
,       "name": "DetailerForEachPipe"
,       "display_name": "Detailer (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DetailerForEachDebugPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","feather","noise_mask","force_inpaint","basic_pipe","wildcard","refiner_ratio","cycle"]
,           "optional": ["detailer_hook","refiner_basic_pipe_opt","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","SEGS","BASIC_PIPE","IMAGE","IMAGE","IMAGE","IMAGE"]
,       "output_is_list": [false,false,false,true,true,true,true]
,       "output_name": ["image","segs","basic_pipe","cropped","cropped_refined","cropped_refined_alpha","cnet_images"]
,       "name": "DetailerForEachDebugPipe"
,       "display_name": "DetailerDebug (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DetailerForEachPipeForAnimateDiff": {
        "input": {
            "required": {
                "image_frames": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image_frames","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","feather","basic_pipe","refiner_ratio"]
,           "optional": ["detailer_hook","refiner_basic_pipe_opt","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","SEGS","BASIC_PIPE","IMAGE"]
,       "output_is_list": [false,false,false,true]
,       "output_name": ["image","segs","basic_pipe","cnet_images"]
,       "name": "DetailerForEachPipeForAnimateDiff"
,       "display_name": "Detailer For AnimateDiff (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "SAMDetectorCombined": {
        "input": {
            "required": {
                "sam_model": ["SAM_MODEL",{"tooltip":"Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."}]
,               "segs": ["SEGS",{"tooltip":"This is the segment information detected by the detector.\nIt refines the Mask through the SAM (Segment Anything) detector for all areas pointed to by SEGS, and combines all Masks to return as a single Mask."}]
,               "image": ["IMAGE",{"tooltip":"It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."}]
,               "detection_hint": [["center-1","horizontal-2","vertical-2","rect-4","diamond-4","mask-area","mask-points","mask-point-bbox","none"],{"tooltip":"It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."}]
,               "dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1,"tooltip":"Set the value to dilate the result mask. If the value is negative, it erodes the mask."}]
,               "threshold": ["FLOAT",{"default":0.93,"min":0,"max":1,"step":0.01,"tooltip":"Set the sensitivity threshold for the mask detected by SAM (Segment Anything). A higher value generates a more specific mask with a narrower range. For example, when pointing to a person's area, it might detect clothes, which is a narrower range, instead of the entire person."}]
,               "bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1,"tooltip":"When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."}]
,               "mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01,"tooltip":"When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."}]
,               "mask_hint_use_negative": [["False","Small","Outter"],{"tooltip":"When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"}]
            }
        }
,       "input_order": {
            "required": ["sam_model","segs","image","detection_hint","dilation","threshold","bbox_expansion","mask_hint_threshold","mask_hint_use_negative"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SAMDetectorCombined"
,       "display_name": "SAMDetector (combined)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "SAMDetectorSegmented": {
        "input": {
            "required": {
                "sam_model": ["SAM_MODEL",{"tooltip":"Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."}]
,               "segs": ["SEGS",{"tooltip":"This is the segment information detected by the detector.\nFor the SEGS region, the masks detected by SAM (Segment Anything) are created as a unified mask and a batch of individual masks."}]
,               "image": ["IMAGE",{"tooltip":"It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."}]
,               "detection_hint": [["center-1","horizontal-2","vertical-2","rect-4","diamond-4","mask-area","mask-points","mask-point-bbox","none"],{"tooltip":"It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."}]
,               "dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1,"tooltip":"Set the value to dilate the result mask. If the value is negative, it erodes the mask."}]
,               "threshold": ["FLOAT",{"default":0.93,"min":0,"max":1,"step":0.01}]
,               "bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1,"tooltip":"When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."}]
,               "mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01,"tooltip":"When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."}]
,               "mask_hint_use_negative": [["False","Small","Outter"],{"tooltip":"When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"}]
            }
        }
,       "input_order": {
            "required": ["sam_model","segs","image","detection_hint","dilation","threshold","bbox_expansion","mask_hint_threshold","mask_hint_use_negative"]
        }
,       "output": ["MASK","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["combined_mask","batch_masks"]
,       "name": "SAMDetectorSegmented"
,       "display_name": "SAMDetector (segmented)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "FaceDetailer": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "bbox_crop_factor": ["FLOAT",{"default":3,"min":1,"max":10,"step":0.1}]
,               "sam_detection_hint": [["center-1","horizontal-2","vertical-2","rect-4","diamond-4","mask-area","mask-points","mask-point-bbox","none"]]
,               "sam_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sam_threshold": ["FLOAT",{"default":0.93,"min":0,"max":1,"step":0.01}]
,               "sam_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
,               "sam_mask_hint_use_negative": [["False","Small","Outter"]]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","model","clip","vae","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","feather","noise_mask","force_inpaint","bbox_threshold","bbox_dilation","bbox_crop_factor","sam_detection_hint","sam_dilation","sam_threshold","sam_bbox_expansion","sam_mask_hint_threshold","sam_mask_hint_use_negative","drop_size","bbox_detector","wildcard","cycle"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE","MASK","DETAILER_PIPE","IMAGE"]
,       "output_is_list": [false,true,true,false,false,true]
,       "output_name": ["image","cropped_refined","cropped_enhanced_alpha","mask","detailer_pipe","cnet_images"]
,       "name": "FaceDetailer"
,       "display_name": "FaceDetailer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Simple"
,       "output_node": false
    }
,   "FaceDetailerPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "detailer_pipe": ["DETAILER_PIPE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "bbox_crop_factor": ["FLOAT",{"default":3,"min":1,"max":10,"step":0.1}]
,               "sam_detection_hint": [["center-1","horizontal-2","vertical-2","rect-4","diamond-4","mask-area","mask-points","mask-point-bbox","none"]]
,               "sam_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sam_threshold": ["FLOAT",{"default":0.93,"min":0,"max":1,"step":0.01}]
,               "sam_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
,               "sam_mask_hint_use_negative": [["False","Small","Outter"]]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","detailer_pipe","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","feather","noise_mask","force_inpaint","bbox_threshold","bbox_dilation","bbox_crop_factor","sam_detection_hint","sam_dilation","sam_threshold","sam_bbox_expansion","sam_mask_hint_threshold","sam_mask_hint_use_negative","drop_size","refiner_ratio","cycle"]
,           "optional": ["inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE","MASK","DETAILER_PIPE","IMAGE"]
,       "output_is_list": [false,true,true,false,false,true]
,       "output_name": ["image","cropped_refined","cropped_enhanced_alpha","mask","detailer_pipe","cnet_images"]
,       "name": "FaceDetailerPipe"
,       "display_name": "FaceDetailer (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Simple"
,       "output_node": false
    }
,   "MaskDetailerPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "mask": ["MASK"]
,               "basic_pipe": ["BASIC_PIPE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"mask bbox","label_off":"crop region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "mask_mode": ["BOOLEAN",{"default":true,"label_on":"masked only","label_off":"whole"}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":10,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":100}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "detailer_hook": ["DETAILER_HOOK"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "bbox_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "contour_fill": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","mask","basic_pipe","guide_size","guide_size_for","max_size","mask_mode","seed","steps","cfg","sampler_name","scheduler","denoise","feather","crop_factor","drop_size","refiner_ratio","batch_size","cycle"]
,           "optional": ["refiner_basic_pipe_opt","detailer_hook","inpaint_model","noise_mask_feather","bbox_fill","contour_fill","scheduler_func_opt"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE","BASIC_PIPE","BASIC_PIPE"]
,       "output_is_list": [false,true,true,false,false]
,       "output_name": ["image","cropped_refined","cropped_enhanced_alpha","basic_pipe","refiner_basic_pipe_opt"]
,       "name": "MaskDetailerPipe"
,       "display_name": "MaskDetailer (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "ToDetailerPipe": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["model","clip","vae","positive","negative","bbox_detector","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "ToDetailerPipe"
,       "display_name": "ToDetailerPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "ToDetailerPipeSDXL": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "refiner_model": ["MODEL"]
,               "refiner_clip": ["CLIP"]
,               "refiner_positive": ["CONDITIONING"]
,               "refiner_negative": ["CONDITIONING"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["model","clip","vae","positive","negative","refiner_model","refiner_clip","refiner_positive","refiner_negative","bbox_detector","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "ToDetailerPipeSDXL"
,       "display_name": "ToDetailerPipeSDXL"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromDetailerPipe": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe"]
        }
,       "output": ["MODEL","CLIP","VAE","CONDITIONING","CONDITIONING","BBOX_DETECTOR","SAM_MODEL","SEGM_DETECTOR","DETAILER_HOOK"]
,       "output_is_list": [false,false,false,false,false,false,false,false,false]
,       "output_name": ["model","clip","vae","positive","negative","bbox_detector","sam_model_opt","segm_detector_opt","detailer_hook"]
,       "name": "FromDetailerPipe"
,       "display_name": "FromDetailerPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromDetailerPipe_v2": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe"]
        }
,       "output": ["DETAILER_PIPE","MODEL","CLIP","VAE","CONDITIONING","CONDITIONING","BBOX_DETECTOR","SAM_MODEL","SEGM_DETECTOR","DETAILER_HOOK"]
,       "output_is_list": [false,false,false,false,false,false,false,false,false,false]
,       "output_name": ["detailer_pipe","model","clip","vae","positive","negative","bbox_detector","sam_model_opt","segm_detector_opt","detailer_hook"]
,       "name": "FromDetailerPipe_v2"
,       "display_name": "FromDetailerPipe_v2"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromDetailerPipeSDXL": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe"]
        }
,       "output": ["DETAILER_PIPE","MODEL","CLIP","VAE","CONDITIONING","CONDITIONING","BBOX_DETECTOR","SAM_MODEL","SEGM_DETECTOR","DETAILER_HOOK","MODEL","CLIP","CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false,false,false,false,false,false,false,false,false,false,false,false,false]
,       "output_name": ["detailer_pipe","model","clip","vae","positive","negative","bbox_detector","sam_model_opt","segm_detector_opt","detailer_hook","refiner_model","refiner_clip","refiner_positive","refiner_negative"]
,       "name": "FromDetailerPipeSDXL"
,       "display_name": "FromDetailer (SDXL/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "AnyPipeToBasic": {
        "input": {
            "required": {
                "any_pipe": ["*"]
            }
        }
,       "input_order": {
            "required": ["any_pipe"]
        }
,       "output": ["BASIC_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["basic_pipe"]
,       "name": "AnyPipeToBasic"
,       "display_name": "Any PIPE -> BasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "ToBasicPipe": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["model","clip","vae","positive","negative"]
        }
,       "output": ["BASIC_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["basic_pipe"]
,       "name": "ToBasicPipe"
,       "display_name": "ToBasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromBasicPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE"]
            }
        }
,       "input_order": {
            "required": ["basic_pipe"]
        }
,       "output": ["MODEL","CLIP","VAE","CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false,false,false,false]
,       "output_name": ["model","clip","vae","positive","negative"]
,       "name": "FromBasicPipe"
,       "display_name": "FromBasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromBasicPipe_v2": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE"]
            }
        }
,       "input_order": {
            "required": ["basic_pipe"]
        }
,       "output": ["BASIC_PIPE","MODEL","CLIP","VAE","CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false,false,false,false,false]
,       "output_name": ["basic_pipe","model","clip","vae","positive","negative"]
,       "name": "FromBasicPipe_v2"
,       "display_name": "FromBasicPipe_v2"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "BasicPipeToDetailerPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["basic_pipe","bbox_detector","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "BasicPipeToDetailerPipe"
,       "display_name": "BasicPipe -> DetailerPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "BasicPipeToDetailerPipeSDXL": {
        "input": {
            "required": {
                "base_basic_pipe": ["BASIC_PIPE"]
,               "refiner_basic_pipe": ["BASIC_PIPE"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["base_basic_pipe","refiner_basic_pipe","bbox_detector","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "BasicPipeToDetailerPipeSDXL"
,       "display_name": "BasicPipe -> DetailerPipe (SDXL)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "DetailerPipeToBasicPipe": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe"]
        }
,       "output": ["BASIC_PIPE","BASIC_PIPE"]
,       "output_is_list": [false,false]
,       "output_name": ["base_basic_pipe","refiner_basic_pipe"]
,       "name": "DetailerPipeToBasicPipe"
,       "display_name": "DetailerPipe -> BasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "EditBasicPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE"]
            }
,           "optional": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["basic_pipe"]
,           "optional": ["model","clip","vae","positive","negative"]
        }
,       "output": ["BASIC_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["basic_pipe"]
,       "name": "EditBasicPipe"
,       "display_name": "Edit BasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "EditDetailerPipe": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "sam_model": ["SAM_MODEL"]
,               "segm_detector": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["model","clip","vae","positive","negative","bbox_detector","sam_model","segm_detector","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "EditDetailerPipe"
,       "display_name": "Edit DetailerPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "EditDetailerPipeSDXL": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "refiner_model": ["MODEL"]
,               "refiner_clip": ["CLIP"]
,               "refiner_positive": ["CONDITIONING"]
,               "refiner_negative": ["CONDITIONING"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "sam_model": ["SAM_MODEL"]
,               "segm_detector": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["model","clip","vae","positive","negative","refiner_model","refiner_clip","refiner_positive","refiner_negative","bbox_detector","sam_model","segm_detector","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "EditDetailerPipeSDXL"
,       "display_name": "Edit DetailerPipe (SDXL)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "LatentPixelScale": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "scale_factor": ["FLOAT",{"default":1.5,"min":0.1,"max":10000,"step":0.1}]
,               "vae": ["VAE"]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
            }
        }
,       "input_order": {
            "required": ["samples","scale_method","scale_factor","vae","use_tiled_vae"]
,           "optional": ["upscale_model_opt"]
        }
,       "output": ["LATENT","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["LATENT","IMAGE"]
,       "name": "LatentPixelScale"
,       "display_name": "Latent Scale (on Pixel Space)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelKSampleUpscalerProvider": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "model": ["MODEL"]
,               "vae": ["VAE"]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_opt": ["PK_HOOK"]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["scale_method","model","vae","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","use_tiled_vae","tile_size"]
,           "optional": ["upscale_model_opt","pk_hook_opt","scheduler_func_opt"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "PixelKSampleUpscalerProvider"
,       "display_name": "PixelKSampleUpscalerProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelKSampleUpscalerProviderPipe": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_opt": ["PK_HOOK"]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
,               "tile_cnet_opt": ["CONTROL_NET"]
,               "tile_cnet_strength": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["scale_method","seed","steps","cfg","sampler_name","scheduler","denoise","use_tiled_vae","basic_pipe","tile_size"]
,           "optional": ["upscale_model_opt","pk_hook_opt","scheduler_func_opt","tile_cnet_opt","tile_cnet_strength"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "PixelKSampleUpscalerProviderPipe"
,       "display_name": "PixelKSampleUpscalerProviderPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "IterativeLatentUpscale": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "upscale_factor": ["FLOAT",{"default":1.5,"min":1,"max":10000,"step":0.1}]
,               "steps": ["INT",{"default":3,"min":1,"max":10000,"step":1}]
,               "temp_prefix": ["STRING",{"default":""}]
,               "upscaler": ["UPSCALER"]
,               "step_mode": [["simple","geometric"],{"default":"simple"}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["samples","upscale_factor","steps","temp_prefix","upscaler","step_mode"]
,           "hidden": ["unique_id"]
        }
,       "output": ["LATENT","VAE"]
,       "output_is_list": [false,false]
,       "output_name": ["latent","vae"]
,       "name": "IterativeLatentUpscale"
,       "display_name": "Iterative Upscale (Latent/on Pixel Space)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "IterativeImageUpscale": {
        "input": {
            "required": {
                "pixels": ["IMAGE"]
,               "upscale_factor": ["FLOAT",{"default":1.5,"min":1,"max":10000,"step":0.1}]
,               "steps": ["INT",{"default":3,"min":1,"max":10000,"step":1}]
,               "temp_prefix": ["STRING",{"default":""}]
,               "upscaler": ["UPSCALER"]
,               "vae": ["VAE"]
,               "step_mode": [["simple","geometric"],{"default":"simple"}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["pixels","upscale_factor","steps","temp_prefix","upscaler","vae","step_mode"]
,           "hidden": ["unique_id"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "IterativeImageUpscale"
,       "display_name": "Iterative Upscale (Image)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelTiledKSampleUpscalerProvider": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "model": ["MODEL"]
,               "vae": ["VAE"]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "tile_width": ["INT",{"default":512,"min":320,"max":16384,"step":64}]
,               "tile_height": ["INT",{"default":512,"min":320,"max":16384,"step":64}]
,               "tiling_strategy": [["random","padded","simple"]]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_opt": ["PK_HOOK"]
,               "tile_cnet_opt": ["CONTROL_NET"]
,               "tile_cnet_strength": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["scale_method","model","vae","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","tile_width","tile_height","tiling_strategy"]
,           "optional": ["upscale_model_opt","pk_hook_opt","tile_cnet_opt","tile_cnet_strength"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "PixelTiledKSampleUpscalerProvider"
,       "display_name": "PixelTiledKSampleUpscalerProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelTiledKSampleUpscalerProviderPipe": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "tile_width": ["INT",{"default":512,"min":320,"max":16384,"step":64}]
,               "tile_height": ["INT",{"default":512,"min":320,"max":16384,"step":64}]
,               "tiling_strategy": [["random","padded","simple"]]
,               "basic_pipe": ["BASIC_PIPE"]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_opt": ["PK_HOOK"]
,               "tile_cnet_opt": ["CONTROL_NET"]
,               "tile_cnet_strength": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["scale_method","seed","steps","cfg","sampler_name","scheduler","denoise","tile_width","tile_height","tiling_strategy","basic_pipe"]
,           "optional": ["upscale_model_opt","pk_hook_opt","tile_cnet_opt","tile_cnet_strength"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "PixelTiledKSampleUpscalerProviderPipe"
,       "display_name": "PixelTiledKSampleUpscalerProviderPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "TwoSamplersForMaskUpscalerProvider": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "full_sample_schedule": [["none","interleave1","interleave2","interleave3","last1","last2","interleave1+last1","interleave2+last1","interleave3+last1"]]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "base_sampler": ["KSAMPLER"]
,               "mask_sampler": ["KSAMPLER"]
,               "mask": ["MASK"]
,               "vae": ["VAE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
,           "optional": {
                "full_sampler_opt": ["KSAMPLER"]
,               "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_base_opt": ["PK_HOOK"]
,               "pk_hook_mask_opt": ["PK_HOOK"]
,               "pk_hook_full_opt": ["PK_HOOK"]
            }
        }
,       "input_order": {
            "required": ["scale_method","full_sample_schedule","use_tiled_vae","base_sampler","mask_sampler","mask","vae","tile_size"]
,           "optional": ["full_sampler_opt","upscale_model_opt","pk_hook_base_opt","pk_hook_mask_opt","pk_hook_full_opt"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "TwoSamplersForMaskUpscalerProvider"
,       "display_name": "TwoSamplersForMask Upscaler Provider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "TwoSamplersForMaskUpscalerProviderPipe": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "full_sample_schedule": [["none","interleave1","interleave2","interleave3","last1","last2","interleave1+last1","interleave2+last1","interleave3+last1"]]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "base_sampler": ["KSAMPLER"]
,               "mask_sampler": ["KSAMPLER"]
,               "mask": ["MASK"]
,               "basic_pipe": ["BASIC_PIPE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
,           "optional": {
                "full_sampler_opt": ["KSAMPLER"]
,               "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_base_opt": ["PK_HOOK"]
,               "pk_hook_mask_opt": ["PK_HOOK"]
,               "pk_hook_full_opt": ["PK_HOOK"]
            }
        }
,       "input_order": {
            "required": ["scale_method","full_sample_schedule","use_tiled_vae","base_sampler","mask_sampler","mask","basic_pipe","tile_size"]
,           "optional": ["full_sampler_opt","upscale_model_opt","pk_hook_base_opt","pk_hook_mask_opt","pk_hook_full_opt"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "TwoSamplersForMaskUpscalerProviderPipe"
,       "display_name": "TwoSamplersForMask Upscaler Provider (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelKSampleHookCombine": {
        "input": {
            "required": {
                "hook1": ["PK_HOOK"]
,               "hook2": ["PK_HOOK"]
            }
        }
,       "input_order": {
            "required": ["hook1","hook2"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "PixelKSampleHookCombine"
,       "display_name": "PixelKSampleHookCombine"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "DenoiseScheduleHookProvider": {
        "input": {
            "required": {
                "schedule_for_iteration": [["simple"]]
,               "target_denoise": ["FLOAT",{"default":0.2,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_iteration","target_denoise"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "DenoiseScheduleHookProvider"
,       "display_name": "DenoiseScheduleHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "StepsScheduleHookProvider": {
        "input": {
            "required": {
                "schedule_for_iteration": [["simple"]]
,               "target_steps": ["INT",{"default":20,"min":1,"max":10000}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_iteration","target_steps"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "StepsScheduleHookProvider"
,       "display_name": "StepsScheduleHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "CfgScheduleHookProvider": {
        "input": {
            "required": {
                "schedule_for_iteration": [["simple"]]
,               "target_cfg": ["FLOAT",{"default":3,"min":0,"max":100}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_iteration","target_cfg"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "CfgScheduleHookProvider"
,       "display_name": "CfgScheduleHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "NoiseInjectionHookProvider": {
        "input": {
            "required": {
                "schedule_for_iteration": [["simple"]]
,               "source": [["CPU","GPU"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "start_strength": ["FLOAT",{"default":1,"min":0,"max":200,"step":0.01}]
,               "end_strength": ["FLOAT",{"default":1,"min":0,"max":200,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_iteration","source","seed","start_strength","end_strength"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "NoiseInjectionHookProvider"
,       "display_name": "NoiseInjectionHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "UnsamplerHookProvider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "steps": ["INT",{"default":25,"min":1,"max":10000}]
,               "start_end_at_step": ["INT",{"default":21,"min":0,"max":10000}]
,               "end_end_at_step": ["INT",{"default":24,"min":0,"max":10000}]
,               "cfg": ["FLOAT",{"default":1,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "normalize": [["disable","enable"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "schedule_for_iteration": [["simple"]]
            }
        }
,       "input_order": {
            "required": ["model","steps","start_end_at_step","end_end_at_step","cfg","sampler_name","scheduler","normalize","positive","negative","schedule_for_iteration"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "UnsamplerHookProvider"
,       "display_name": "UnsamplerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "CoreMLDetailerHookProvider": {
        "input": {
            "required": {
                "mode": [["512x512","768x768","512x768","768x512"]]
            }
        }
,       "input_order": {
            "required": ["mode"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "CoreMLDetailerHookProvider"
,       "display_name": "CoreMLDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "PreviewDetailerHookProvider": {
        "input": {
            "required": {
                "quality": ["INT",{"default":95,"min":20,"max":100}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["quality"]
,           "hidden": ["unique_id"]
        }
,       "output": ["DETAILER_HOOK","UPSCALER_HOOK"]
,       "output_is_list": [false,false]
,       "output_name": ["DETAILER_HOOK","UPSCALER_HOOK"]
,       "name": "PreviewDetailerHookProvider"
,       "display_name": "PreviewDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "DetailerHookCombine": {
        "input": {
            "required": {
                "hook1": ["DETAILER_HOOK"]
,               "hook2": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["hook1","hook2"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "DetailerHookCombine"
,       "display_name": "DetailerHookCombine"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "NoiseInjectionDetailerHookProvider": {
        "input": {
            "required": {
                "schedule_for_cycle": [["skip_start","from_start"]]
,               "source": [["CPU","GPU"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "start_strength": ["FLOAT",{"default":2,"min":0,"max":200,"step":0.01}]
,               "end_strength": ["FLOAT",{"default":1,"min":0,"max":200,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_cycle","source","seed","start_strength","end_strength"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "NoiseInjectionDetailerHookProvider"
,       "display_name": "NoiseInjectionDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "UnsamplerDetailerHookProvider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "steps": ["INT",{"default":25,"min":1,"max":10000}]
,               "start_end_at_step": ["INT",{"default":21,"min":0,"max":10000}]
,               "end_end_at_step": ["INT",{"default":24,"min":0,"max":10000}]
,               "cfg": ["FLOAT",{"default":1,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "normalize": [["disable","enable"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "schedule_for_cycle": [["skip_start","from_start"]]
            }
        }
,       "input_order": {
            "required": ["model","steps","start_end_at_step","end_end_at_step","cfg","sampler_name","scheduler","normalize","positive","negative","schedule_for_cycle"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "UnsamplerDetailerHookProvider"
,       "display_name": "UnsamplerDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DenoiseSchedulerDetailerHookProvider": {
        "input": {
            "required": {
                "schedule_for_cycle": [["simple"]]
,               "target_denoise": ["FLOAT",{"default":0.3,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_cycle","target_denoise"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "DenoiseSchedulerDetailerHookProvider"
,       "display_name": "DenoiseSchedulerDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "SEGSOrderedFilterDetailerHookProvider": {
        "input": {
            "required": {
                "target": [["area(=w*h)","width","height","x1","y1","x2","y2"]]
,               "order": ["BOOLEAN",{"default":true,"label_on":"descending","label_off":"ascending"}]
,               "take_start": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "take_count": ["INT",{"default":1,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["target","order","take_start","take_count"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "SEGSOrderedFilterDetailerHookProvider"
,       "display_name": "SEGSOrderedFilterDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "SEGSRangeFilterDetailerHookProvider": {
        "input": {
            "required": {
                "target": [["area(=w*h)","width","height","x1","y1","x2","y2","length_percent"]]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"inside","label_off":"outside"}]
,               "min_value": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "max_value": ["INT",{"default":67108864,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["target","mode","min_value","max_value"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "SEGSRangeFilterDetailerHookProvider"
,       "display_name": "SEGSRangeFilterDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "SEGSLabelFilterDetailerHookProvider": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "preset": [["all","hand","face","mouth","eyes","eyebrows","pupils","left_eyebrow","left_eye","left_pupil","right_eyebrow","right_eye","right_pupil","short_sleeved_shirt","long_sleeved_shirt","short_sleeved_outwear","long_sleeved_outwear","vest","sling","shorts","trousers","skirt","short_sleeved_dress","long_sleeved_dress","vest_dress","sling_dress","person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"]]
,               "labels": ["STRING",{"multiline":true,"placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
        }
,       "input_order": {
            "required": ["segs","preset","labels"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "SEGSLabelFilterDetailerHookProvider"
,       "display_name": "SEGSLabelFilterDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "VariationNoiseDetailerHookProvider": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "strength": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["seed","strength"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "VariationNoiseDetailerHookProvider"
,       "display_name": "VariationNoiseDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "BitwiseAndMask": {
        "input": {
            "required": {
                "mask1": ["MASK"]
,               "mask2": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1","mask2"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "BitwiseAndMask"
,       "display_name": "Pixelwise(MASK & MASK)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "SubtractMask": {
        "input": {
            "required": {
                "mask1": ["MASK"]
,               "mask2": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1","mask2"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SubtractMask"
,       "display_name": "Pixelwise(MASK - MASK)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "AddMask": {
        "input": {
            "required": {
                "mask1": ["MASK"]
,               "mask2": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1","mask2"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "AddMask"
,       "display_name": "Pixelwise(MASK + MASK)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "ImpactSegsAndMask": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["segs","mask"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSegsAndMask"
,       "display_name": "Pixelwise(SEGS & MASK)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "ImpactSegsAndMaskForEach": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["segs","masks"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSegsAndMaskForEach"
,       "display_name": "Pixelwise(SEGS & MASKS ForEach)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "EmptySegs": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "EmptySegs"
,       "display_name": "EmptySegs"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactFlattenMask": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactFlattenMask"
,       "display_name": "Flatten Mask Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MediaPipeFaceMeshToSEGS": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "bbox_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "crop_min_size": ["INT",{"min":10,"max":16384,"step":1,"default":50}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":1}]
,               "dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "face": ["BOOLEAN",{"default":true,"label_on":"Enabled","label_off":"Disabled"}]
,               "mouth": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "left_eyebrow": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "left_eye": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "left_pupil": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "right_eyebrow": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "right_eye": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "right_pupil": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
            }
        }
,       "input_order": {
            "required": ["image","crop_factor","bbox_fill","crop_min_size","drop_size","dilation","face","mouth","left_eyebrow","left_eye","left_pupil","right_eyebrow","right_eye","right_pupil"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "MediaPipeFaceMeshToSEGS"
,       "display_name": "MediaPipe FaceMesh to SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MaskToSEGS": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "combined": ["BOOLEAN",{"default":false,"label_on":"True","label_off":"False"}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "bbox_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "contour_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
            }
        }
,       "input_order": {
            "required": ["mask","combined","crop_factor","bbox_fill","drop_size","contour_fill"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "MaskToSEGS"
,       "display_name": "MASK to SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MaskToSEGS_for_AnimateDiff": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "combined": ["BOOLEAN",{"default":false,"label_on":"True","label_off":"False"}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "bbox_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "contour_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
            }
        }
,       "input_order": {
            "required": ["mask","combined","crop_factor","bbox_fill","drop_size","contour_fill"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "MaskToSEGS_for_AnimateDiff"
,       "display_name": "MASK to SEGS for AnimateDiff"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "ToBinaryMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "threshold": ["INT",{"default":20,"min":1,"max":255}]
            }
        }
,       "input_order": {
            "required": ["mask","threshold"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ToBinaryMask"
,       "display_name": "ToBinaryMask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MasksToMaskList": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["MASK"]
,       "output_is_list": [true]
,       "output_name": ["MASK"]
,       "name": "MasksToMaskList"
,       "display_name": "Mask Batch to Mask List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MaskListToMaskBatch": {
        "input": {
            "required": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "MaskListToMaskBatch"
,       "display_name": "Mask List to Mask Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "ImageListToImageBatch": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageListToImageBatch"
,       "display_name": "Image List to Image Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "SetDefaultImageForSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "image": ["IMAGE"]
,               "override": ["BOOLEAN",{"default":true}]
            }
        }
,       "input_order": {
            "required": ["segs","image","override"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "SetDefaultImageForSEGS"
,       "display_name": "Set Default Image for SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "RemoveImageFromSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "RemoveImageFromSEGS"
,       "display_name": "Remove Image from SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "BboxDetectorSEGS": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "labels": ["STRING",{"multiline":true,"default":"all","placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image","threshold","dilation","crop_factor","drop_size","labels"]
,           "optional": ["detailer_hook"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "BboxDetectorSEGS"
,       "display_name": "BBOX Detector (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "SegmDetectorSEGS": {
        "input": {
            "required": {
                "segm_detector": ["SEGM_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "labels": ["STRING",{"multiline":true,"default":"all","placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["segm_detector","image","threshold","dilation","crop_factor","drop_size","labels"]
,           "optional": ["detailer_hook"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "SegmDetectorSEGS"
,       "display_name": "SEGM Detector (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ONNXDetectorSEGS": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "labels": ["STRING",{"multiline":true,"default":"all","placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image","threshold","dilation","crop_factor","drop_size","labels"]
,           "optional": ["detailer_hook"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ONNXDetectorSEGS"
,       "display_name": "ONNX Detector (SEGS/legacy) - use BBOXDetector"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ImpactSimpleDetectorSEGS_for_AD": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image_frames": ["IMAGE"]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":0,"min":-255,"max":255,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "sub_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "sub_dilation": ["INT",{"default":0,"min":-255,"max":255,"step":1}]
,               "sub_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
            }
,           "optional": {
                "masking_mode": [["Pivot SEGS","Combine neighboring frames","Don't combine"]]
,               "segs_pivot": [["Combined mask","1st frame mask"]]
,               "sam_model_opt": ["SAM_MODEL",{"tooltip":"[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."}]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image_frames","bbox_threshold","bbox_dilation","crop_factor","drop_size","sub_threshold","sub_dilation","sub_bbox_expansion","sam_mask_hint_threshold"]
,           "optional": ["masking_mode","segs_pivot","sam_model_opt","segm_detector_opt"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSimpleDetectorSEGS_for_AD"
,       "display_name": "Simple Detector for AnimateDiff (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ImpactSimpleDetectorSEGS": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image": ["IMAGE"]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "sub_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "sub_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sub_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
            }
,           "optional": {
                "post_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sam_model_opt": ["SAM_MODEL",{"tooltip":"[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."}]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image","bbox_threshold","bbox_dilation","crop_factor","drop_size","sub_threshold","sub_dilation","sub_bbox_expansion","sam_mask_hint_threshold"]
,           "optional": ["post_dilation","sam_model_opt","segm_detector_opt"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSimpleDetectorSEGS"
,       "display_name": "Simple Detector (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ImpactSimpleDetectorSEGSPipe": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
,               "image": ["IMAGE"]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "sub_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "sub_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sub_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
            }
,           "optional": {
                "post_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe","image","bbox_threshold","bbox_dilation","crop_factor","drop_size","sub_threshold","sub_dilation","sub_bbox_expansion","sam_mask_hint_threshold"]
,           "optional": ["post_dilation"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSimpleDetectorSEGSPipe"
,       "display_name": "Simple Detector (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ImpactControlNetApplySEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "control_net": ["CONTROL_NET"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
,           "optional": {
                "segs_preprocessor": ["SEGS_PREPROCESSOR"]
,               "control_image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["segs","control_net","strength"]
,           "optional": ["segs_preprocessor","control_image"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactControlNetApplySEGS"
,       "display_name": "ControlNetApply (SEGS) - DEPRECATED"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "deprecated": true
    }
,   "ImpactControlNetApplyAdvancedSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "control_net": ["CONTROL_NET"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
,           "optional": {
                "segs_preprocessor": ["SEGS_PREPROCESSOR"]
,               "control_image": ["IMAGE"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["segs","control_net","strength","start_percent","end_percent"]
,           "optional": ["segs_preprocessor","control_image","vae"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactControlNetApplyAdvancedSEGS"
,       "display_name": "ControlNetApply (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactControlNetClearSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactControlNetClearSEGS"
,       "display_name": "ImpactControlNetClearSEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactIPAdapterApplySEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "ipadapter_pipe": ["IPADAPTER_PIPE"]
,               "weight": ["FLOAT",{"default":0.7,"min":-1,"max":3,"step":0.05}]
,               "noise": ["FLOAT",{"default":0.4,"min":0,"max":1,"step":0.01}]
,               "weight_type": [["original","linear","channel penalty"],{"default":"channel penalty"}]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":0.9,"min":0,"max":1,"step":0.001}]
,               "unfold_batch": ["BOOLEAN",{"default":false}]
,               "faceid_v2": ["BOOLEAN",{"default":false}]
,               "weight_v2": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "context_crop_factor": ["FLOAT",{"default":1.2,"min":1,"max":100,"step":0.1}]
,               "reference_image": ["IMAGE"]
            }
,           "optional": {
                "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "neg_image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["segs","ipadapter_pipe","weight","noise","weight_type","start_at","end_at","unfold_batch","faceid_v2","weight_v2","context_crop_factor","reference_image"]
,           "optional": ["combine_embeds","neg_image"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactIPAdapterApplySEGS"
,       "display_name": "IPAdapterApply (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactDecomposeSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["SEGS_HEADER","SEG_ELT"]
,       "output_is_list": [false,true]
,       "output_name": ["SEGS_HEADER","SEG_ELT"]
,       "name": "ImpactDecomposeSEGS"
,       "display_name": "Decompose (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactAssembleSEGS": {
        "input": {
            "required": {
                "seg_header": ["SEGS_HEADER"]
,               "seg_elt": ["SEG_ELT"]
            }
        }
,       "input_order": {
            "required": ["seg_header","seg_elt"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactAssembleSEGS"
,       "display_name": "Assemble (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactFrom_SEG_ELT": {
        "input": {
            "required": {
                "seg_elt": ["SEG_ELT"]
            }
        }
,       "input_order": {
            "required": ["seg_elt"]
        }
,       "output": ["SEG_ELT","IMAGE","MASK","SEG_ELT_crop_region","SEG_ELT_bbox","SEG_ELT_control_net_wrapper","FLOAT","STRING"]
,       "output_is_list": [false,false,false,false,false,false,false,false]
,       "output_name": ["seg_elt","cropped_image","cropped_mask","crop_region","bbox","control_net_wrapper","confidence","label"]
,       "name": "ImpactFrom_SEG_ELT"
,       "display_name": "From SEG_ELT"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactEdit_SEG_ELT": {
        "input": {
            "required": {
                "seg_elt": ["SEG_ELT"]
            }
,           "optional": {
                "cropped_image_opt": ["IMAGE"]
,               "cropped_mask_opt": ["MASK"]
,               "crop_region_opt": ["SEG_ELT_crop_region"]
,               "bbox_opt": ["SEG_ELT_bbox"]
,               "control_net_wrapper_opt": ["SEG_ELT_control_net_wrapper"]
,               "confidence_opt": ["FLOAT",{"min":0,"max":1,"step":0.1,"forceInput":true}]
,               "label_opt": ["STRING",{"multiline":false,"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["seg_elt"]
,           "optional": ["cropped_image_opt","cropped_mask_opt","crop_region_opt","bbox_opt","control_net_wrapper_opt","confidence_opt","label_opt"]
        }
,       "output": ["SEG_ELT"]
,       "output_is_list": [false]
,       "output_name": ["SEG_ELT"]
,       "name": "ImpactEdit_SEG_ELT"
,       "display_name": "Edit SEG_ELT"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactDilate_Mask_SEG_ELT": {
        "input": {
            "required": {
                "seg_elt": ["SEG_ELT"]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["seg_elt","dilation"]
        }
,       "output": ["SEG_ELT"]
,       "output_is_list": [false]
,       "output_name": ["SEG_ELT"]
,       "name": "ImpactDilate_Mask_SEG_ELT"
,       "display_name": "Dilate Mask (SEG_ELT)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactDilateMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["mask","dilation"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactDilateMask"
,       "display_name": "Dilate Mask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactGaussianBlurMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "kernel_size": ["INT",{"default":10,"min":0,"max":100,"step":1}]
,               "sigma": ["FLOAT",{"default":10,"min":0.1,"max":100,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["mask","kernel_size","sigma"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactGaussianBlurMask"
,       "display_name": "Gaussian Blur Mask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactDilateMaskInSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["segs","dilation"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactDilateMaskInSEGS"
,       "display_name": "Dilate Mask (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactGaussianBlurMaskInSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "kernel_size": ["INT",{"default":10,"min":0,"max":100,"step":1}]
,               "sigma": ["FLOAT",{"default":10,"min":0.1,"max":100,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["segs","kernel_size","sigma"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactGaussianBlurMaskInSEGS"
,       "display_name": "Gaussian Blur Mask (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactScaleBy_BBOX_SEG_ELT": {
        "input": {
            "required": {
                "seg": ["SEG_ELT"]
,               "scale_by": ["FLOAT",{"default":1,"min":0.01,"max":8,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["seg","scale_by"]
        }
,       "output": ["SEG_ELT"]
,       "output_is_list": [false]
,       "output_name": ["SEG_ELT"]
,       "name": "ImpactScaleBy_BBOX_SEG_ELT"
,       "display_name": "ScaleBy BBOX (SEG_ELT)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactFrom_SEG_ELT_bbox": {
        "input": {
            "required": {
                "bbox": ["SEG_ELT_bbox"]
            }
        }
,       "input_order": {
            "required": ["bbox"]
        }
,       "output": ["INT","INT","INT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["left","top","right","bottom"]
,       "name": "ImpactFrom_SEG_ELT_bbox"
,       "display_name": "From SEG_ELT bbox"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactFrom_SEG_ELT_crop_region": {
        "input": {
            "required": {
                "crop_region": ["SEG_ELT_crop_region"]
            }
        }
,       "input_order": {
            "required": ["crop_region"]
        }
,       "output": ["INT","INT","INT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["left","top","right","bottom"]
,       "name": "ImpactFrom_SEG_ELT_crop_region"
,       "display_name": "From SEG_ELT crop_region"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactCount_Elts_in_SEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["INT"]
,       "output_is_list": [false]
,       "output_name": ["INT"]
,       "name": "ImpactCount_Elts_in_SEGS"
,       "display_name": "Count Elts in SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "BboxDetectorCombined_v2": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":4,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image","threshold","dilation"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "BboxDetectorCombined_v2"
,       "display_name": "BBOX Detector (combined)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "SegmDetectorCombined_v2": {
        "input": {
            "required": {
                "segm_detector": ["SEGM_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["segm_detector","image","threshold","dilation"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SegmDetectorCombined_v2"
,       "display_name": "SEGM Detector (combined)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "SegsToCombinedMask": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SegsToCombinedMask"
,       "display_name": "SEGS to MASK (combined)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "KSamplerProvider": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"tooltip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"],{"tooltip":"noise schedule"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
,               "basic_pipe": ["BASIC_PIPE",{"tooltip":"basic_pipe input for sampling"}]
            }
,           "optional": {
                "scheduler_func_opt": ["SCHEDULER_FUNC",{"tooltip":"[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]
            }
        }
,       "input_order": {
            "required": ["seed","steps","cfg","sampler_name","scheduler","denoise","basic_pipe"]
,           "optional": ["scheduler_func_opt"]
        }
,       "output": ["KSAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["KSAMPLER"]
,       "name": "KSamplerProvider"
,       "display_name": "KSamplerProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["sampler wrapper. (Can be used when generating a regional_prompt.)"]
    }
,   "TwoSamplersForMask": {
        "input": {
            "required": {
                "latent_image": ["LATENT",{"tooltip":"input latent image"}]
,               "base_sampler": ["KSAMPLER",{"tooltip":"Sampler to apply to the region outside the mask."}]
,               "mask_sampler": ["KSAMPLER",{"tooltip":"Sampler to apply to the masked region."}]
,               "mask": ["MASK",{"tooltip":"region mask"}]
            }
        }
,       "input_order": {
            "required": ["latent_image","base_sampler","mask_sampler","mask"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "TwoSamplersForMask"
,       "display_name": "TwoSamplersForMask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["result latent"]
    }
,   "TiledKSamplerProvider": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"tooltip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"],{"tooltip":"noise schedule"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
,               "tile_width": ["INT",{"default":512,"min":320,"max":16384,"step":64,"tooltip":"Sets the width of the tile to be used in TiledKSampler."}]
,               "tile_height": ["INT",{"default":512,"min":320,"max":16384,"step":64,"tooltip":"Sets the height of the tile to be used in TiledKSampler."}]
,               "tiling_strategy": [["random","padded","simple"],{"tooltip":"Sets the tiling strategy for TiledKSampler."}]
,               "basic_pipe": ["BASIC_PIPE",{"tooltip":"basic_pipe input for sampling"}]
            }
        }
,       "input_order": {
            "required": ["seed","steps","cfg","sampler_name","scheduler","denoise","tile_width","tile_height","tiling_strategy","basic_pipe"]
        }
,       "output": ["KSAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["KSAMPLER"]
,       "name": "TiledKSamplerProvider"
,       "display_name": "TiledKSamplerProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["sampler wrapper. (Can be used when generating a regional_prompt.)"]
    }
,   "KSamplerAdvancedProvider": {
        "input": {
            "required": {
                "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"toolip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"toolip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"],{"toolip":"noise schedule"}]
,               "sigma_factor": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01,"toolip":"Multiplier of noise schedule"}]
,               "basic_pipe": ["BASIC_PIPE",{"toolip":"basic_pipe input for sampling"}]
            }
,           "optional": {
                "sampler_opt": ["SAMPLER",{"toolip":"[OPTIONAL] Uses the passed sampler instead of internal impact_sampler."}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC",{"toolip":"[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]
            }
        }
,       "input_order": {
            "required": ["cfg","sampler_name","scheduler","sigma_factor","basic_pipe"]
,           "optional": ["sampler_opt","scheduler_func_opt"]
        }
,       "output": ["KSAMPLER_ADVANCED"]
,       "output_is_list": [false]
,       "output_name": ["KSAMPLER_ADVANCED"]
,       "name": "KSamplerAdvancedProvider"
,       "display_name": "KSamplerAdvancedProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["sampler wrapper. (Can be used when generating a regional_prompt.)"]
    }
,   "TwoAdvancedSamplersForMask": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
,               "samples": ["LATENT",{"tooltip":"input latent image"}]
,               "base_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"Sampler to apply to the region outside the mask."}]
,               "mask_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"Sampler to apply to the masked region."}]
,               "mask": ["MASK",{"tooltip":"region mask"}]
,               "overlap_factor": ["INT",{"default":10,"min":0,"max":10000,"tooltip":"To smooth the seams of the region boundaries, expand the mask by the overlap_factor amount to overlap with other regions."}]
            }
        }
,       "input_order": {
            "required": ["seed","steps","denoise","samples","base_sampler","mask_sampler","mask","overlap_factor"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "TwoAdvancedSamplersForMask"
,       "display_name": "TwoAdvancedSamplersForMask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["result latent"]
    }
,   "ImpactNegativeConditioningPlaceholder": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ImpactNegativeConditioningPlaceholder"
,       "display_name": "Negative Cond Placeholder"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/sampling"
,       "output_node": false
,       "output_tooltips": ["This is a Placeholder for the FLUX model that does not use Negative Conditioning."]
    }
,   "PreviewBridge": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "image": ["STRING",{"default":""}]
            }
,           "optional": {
                "block": ["BOOLEAN",{"default":false,"label_on":"if_empty_mask","label_off":"never","tooltip":"is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped."}]
,               "restore_mask": [["never","always","if_same_size"],{"tooltip":"if_same_size: If the changed input image is the same size as the previous image, restore using the last saved mask\nalways: Whenever the input image changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`"}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","image"]
,           "optional": ["block","restore_mask"]
,           "hidden": ["unique_id","extra_pnginfo"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "PreviewBridge"
,       "display_name": "Preview Bridge (Image)"
,       "description": "This is a feature that allows you to edit and send a Mask over a image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "PreviewBridgeLatent": {
        "input": {
            "required": {
                "latent": ["LATENT"]
,               "image": ["STRING",{"default":""}]
,               "preview_method": [["Latent2RGB-FLUX.1","Latent2RGB-SDXL","Latent2RGB-SD15","Latent2RGB-SD3","Latent2RGB-SD-X4","Latent2RGB-Playground-2.5","Latent2RGB-SC-Prior","Latent2RGB-SC-B","TAEF1","TAESDXL","TAESD15","TAESD3"]]
            }
,           "optional": {
                "vae_opt": ["VAE"]
,               "block": ["BOOLEAN",{"default":false,"label_on":"if_empty_mask","label_off":"never","tooltip":"is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped. Instead, it returns a white mask."}]
,               "restore_mask": [["never","always","if_same_size"],{"tooltip":"if_same_size: If the changed input latent is the same size as the previous latent, restore using the last saved mask\nalways: Whenever the input latent changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`\nIf the input latent already has a mask, do not restore mask."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["latent","image","preview_method"]
,           "optional": ["vae_opt","block","restore_mask"]
,           "hidden": ["unique_id","prompt","extra_pnginfo"]
        }
,       "output": ["LATENT","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["LATENT","MASK"]
,       "name": "PreviewBridgeLatent"
,       "display_name": "Preview Bridge (Latent)"
,       "description": "This is a feature that allows you to edit and send a Mask over a latent image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "ImageSender": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "filename_prefix": ["STRING",{"default":"ImgSender"}]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","filename_prefix","link_id"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImageSender"
,       "display_name": "Image Sender"
,       "description": "Saves the input images to your ComfyUI output directory."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "ImageReceiver": {
        "input": {
            "required": {
                "image": [["example.png"]]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "save_to_workflow": ["BOOLEAN",{"default":false}]
,               "image_data": ["STRING",{"multiline":false}]
,               "trigger_always": ["BOOLEAN",{"default":false,"label_on":"enable","label_off":"disable"}]
            }
        }
,       "input_order": {
            "required": ["image","link_id","save_to_workflow","image_data","trigger_always"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "ImageReceiver"
,       "display_name": "Image Receiver"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "LatentSender": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "filename_prefix": ["STRING",{"default":"latents/LatentSender"}]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "preview_method": [["Latent2RGB-SDXL","Latent2RGB-SD15","TAESDXL","TAESD15"]]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["samples","filename_prefix","link_id","preview_method"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "LatentSender"
,       "display_name": "LatentSender"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "LatentReceiver": {
        "input": {
            "required": {
                "latent": [[]]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "trigger_always": ["BOOLEAN",{"default":false,"label_on":"enable","label_off":"disable"}]
            }
        }
,       "input_order": {
            "required": ["latent","link_id","trigger_always"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentReceiver"
,       "display_name": "LatentReceiver"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImageMaskSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":4,"step":1}]
,               "images1": ["IMAGE"]
            }
,           "optional": {
                "mask1_opt": ["MASK"]
,               "images2_opt": ["IMAGE"]
,               "mask2_opt": ["MASK"]
,               "images3_opt": ["IMAGE"]
,               "mask3_opt": ["MASK"]
,               "images4_opt": ["IMAGE"]
,               "mask4_opt": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["select","images1"]
,           "optional": ["mask1_opt","images2_opt","mask2_opt","images3_opt","mask3_opt","images4_opt","mask4_opt"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "ImageMaskSwitch"
,       "display_name": "Switch (images, mask)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "LatentSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":999999,"step":1,"tooltip":"The input number you want to output among the inputs"}]
,               "sel_mode": ["BOOLEAN",{"default":false,"label_on":"select_on_prompt","label_off":"select_on_execution","forceInput":false,"tooltip":"In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]
            }
,           "optional": {
                "input1": ["*",{"lazy":true,"tooltip":"Any input. When connected, one more input slot is added."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["select","sel_mode"]
,           "optional": ["input1"]
,           "hidden": ["unique_id","extra_pnginfo"]
        }
,       "output": ["*","STRING","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["selected_value","selected_label","selected_index"]
,       "name": "LatentSwitch"
,       "display_name": "Switch (latent/legacy)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Output is generated only from the input chosen by the 'select' value.","Slot label of the selected input slot","Outputs the select value as is"]
    }
,   "SEGSSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":999999,"step":1,"tooltip":"The input number you want to output among the inputs"}]
,               "sel_mode": ["BOOLEAN",{"default":false,"label_on":"select_on_prompt","label_off":"select_on_execution","forceInput":false,"tooltip":"In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]
            }
,           "optional": {
                "input1": ["*",{"lazy":true,"tooltip":"Any input. When connected, one more input slot is added."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["select","sel_mode"]
,           "optional": ["input1"]
,           "hidden": ["unique_id","extra_pnginfo"]
        }
,       "output": ["*","STRING","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["selected_value","selected_label","selected_index"]
,       "name": "SEGSSwitch"
,       "display_name": "Switch (SEGS/legacy)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Output is generated only from the input chosen by the 'select' value.","Slot label of the selected input slot","Outputs the select value as is"]
    }
,   "ImpactSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":999999,"step":1,"tooltip":"The input number you want to output among the inputs"}]
,               "sel_mode": ["BOOLEAN",{"default":false,"label_on":"select_on_prompt","label_off":"select_on_execution","forceInput":false,"tooltip":"In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]
            }
,           "optional": {
                "input1": ["*",{"lazy":true,"tooltip":"Any input. When connected, one more input slot is added."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["select","sel_mode"]
,           "optional": ["input1"]
,           "hidden": ["unique_id","extra_pnginfo"]
        }
,       "output": ["*","STRING","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["selected_value","selected_label","selected_index"]
,       "name": "ImpactSwitch"
,       "display_name": "Switch (Any)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Output is generated only from the input chosen by the 'select' value.","Slot label of the selected input slot","Outputs the select value as is"]
    }
,   "ImpactInversedSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":999999,"step":1,"tooltip":"The output number you want to send from the input"}]
,               "input": ["*",{"tooltip":"Any input. When connected, one more input slot is added."}]
            }
,           "optional": {
                "sel_mode": ["BOOLEAN",{"default":false,"label_on":"select_on_prompt","label_off":"select_on_execution","forceInput":false,"tooltip":"In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["select","input"]
,           "optional": ["sel_mode"]
,           "hidden": ["prompt","unique_id"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactInversedSwitch"
,       "display_name": "Inversed Switch (Any)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Output occurs only from the output selected by the 'select' value.\nWhen slots are connected, additional slots are created."]
    }
,   "ImpactWildcardProcessor": {
        "input": {
            "required": {
                "wildcard_text": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "populated_text": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Populate","label_off":"Fixed"}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
        }
,       "input_order": {
            "required": ["wildcard_text","populated_text","mode","seed","Select to add Wildcard"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "ImpactWildcardProcessor"
,       "display_name": "ImpactWildcardProcessor"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Prompt"
,       "output_node": false
    }
,   "ImpactWildcardEncode": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "wildcard_text": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "populated_text": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Populate","label_off":"Fixed"}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["model","clip","wildcard_text","populated_text","mode","Select to add LoRA","Select to add Wildcard","seed"]
        }
,       "output": ["MODEL","CLIP","CONDITIONING","STRING"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["model","clip","conditioning","populated_text"]
,       "name": "ImpactWildcardEncode"
,       "display_name": "ImpactWildcardEncode"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Prompt"
,       "output_node": false
    }
,   "SEGSUpscaler": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "rescale_factor": ["FLOAT",{"default":2,"min":0.01,"max":100,"step":0.01}]
,               "resampling_method": [["lanczos","nearest","bilinear","bicubic"]]
,               "supersample": [["true","false"]]
,               "rounding_modulus": ["INT",{"default":8,"min":8,"max":1024,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "upscaler_hook_opt": ["UPSCALER_HOOK"]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","model","clip","vae","rescale_factor","resampling_method","supersample","rounding_modulus","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","feather","inpaint_model","noise_mask_feather"]
,           "optional": ["upscale_model_opt","upscaler_hook_opt","scheduler_func_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "SEGSUpscaler"
,       "display_name": "Upscaler (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "SEGSUpscalerPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "basic_pipe": ["BASIC_PIPE"]
,               "rescale_factor": ["FLOAT",{"default":2,"min":0.01,"max":100,"step":0.01}]
,               "resampling_method": [["lanczos","nearest","bilinear","bicubic"]]
,               "supersample": [["true","false"]]
,               "rounding_modulus": ["INT",{"default":8,"min":8,"max":1024,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "upscaler_hook_opt": ["UPSCALER_HOOK"]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","basic_pipe","rescale_factor","resampling_method","supersample","rounding_modulus","seed","steps","cfg","sampler_name","scheduler","denoise","feather","inpaint_model","noise_mask_feather"]
,           "optional": ["upscale_model_opt","upscaler_hook_opt","scheduler_func_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "SEGSUpscalerPipe"
,       "display_name": "Upscaler (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "SEGSDetailer": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":768,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":100}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","noise_mask","force_inpaint","basic_pipe","refiner_ratio","batch_size","cycle"]
,           "optional": ["refiner_basic_pipe_opt","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["SEGS","IMAGE"]
,       "output_is_list": [false,true]
,       "output_name": ["segs","cnet_images"]
,       "name": "SEGSDetailer"
,       "display_name": "SEGSDetailer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "SEGSPaste": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "alpha": ["INT",{"default":255,"min":0,"max":255,"step":1}]
            }
,           "optional": {
                "ref_image_opt": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image","segs","feather","alpha"]
,           "optional": ["ref_image_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "SEGSPaste"
,       "display_name": "SEGSPaste"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "SEGSPreview": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "alpha_mode": ["BOOLEAN",{"default":true,"label_on":"enable","label_off":"disable"}]
,               "min_alpha": ["FLOAT",{"default":0.2,"min":0,"max":1,"step":0.01}]
            }
,           "optional": {
                "fallback_image_opt": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["segs","alpha_mode","min_alpha"]
,           "optional": ["fallback_image_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "SEGSPreview"
,       "display_name": "SEGSPreview"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "SEGSPreviewCNet": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "SEGSPreviewCNet"
,       "display_name": "SEGSPreview (CNET Image)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "SEGSToImageList": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
,           "optional": {
                "fallback_image_opt": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["segs"]
,           "optional": ["fallback_image_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "SEGSToImageList"
,       "display_name": "SEGSToImageList"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSToMaskList": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["MASK"]
,       "output_is_list": [true]
,       "output_name": ["MASK"]
,       "name": "ImpactSEGSToMaskList"
,       "display_name": "SEGS to Mask List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSToMaskBatch": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactSEGSToMaskBatch"
,       "display_name": "SEGS to Mask Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSConcat": {
        "input": {
            "required": {
                "segs1": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs1"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSEGSConcat"
,       "display_name": "SEGS Concat"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSPicker": {
        "input": {
            "required": {
                "picks": ["STRING",{"multiline":true,"dynamicPrompts":false,"pysssss.autocomplete":false}]
,               "segs": ["SEGS"]
            }
,           "optional": {
                "fallback_image_opt": ["IMAGE"]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["picks","segs"]
,           "optional": ["fallback_image_opt"]
,           "hidden": ["unique_id"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSEGSPicker"
,       "display_name": "Picker (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeTileSEGS": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "bbox_size": ["INT",{"default":512,"min":64,"max":4096,"step":8}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":10,"step":0.01}]
,               "min_overlap": ["INT",{"default":5,"min":0,"max":512,"step":1}]
,               "filter_segs_dilation": ["INT",{"default":20,"min":-255,"max":255,"step":1}]
,               "mask_irregularity": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "irregular_mask_mode": [["Reuse fast","Reuse quality","All random fast","All random quality"]]
            }
,           "optional": {
                "filter_in_segs_opt": ["SEGS"]
,               "filter_out_segs_opt": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["images","bbox_size","crop_factor","min_overlap","filter_segs_dilation","mask_irregularity","irregular_mask_mode"]
,           "optional": ["filter_in_segs_opt","filter_out_segs_opt"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactMakeTileSEGS"
,       "display_name": "Make Tile SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/__for_testing"
,       "output_node": false
    }
,   "ImpactSEGSMerge": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSEGSMerge"
,       "display_name": "SEGS Merge"
,       "description": "SEGS contains multiple SEGs. SEGS Merge integrates several SEGs into a single merged SEG. The label is changed to `merged` and the confidence becomes the minimum confidence. The applied controlnet and cropped_image are removed."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "SEGSDetailerForAnimateDiff": {
        "input": {
            "required": {
                "image_frames": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":768,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
            }
,           "optional": {
                "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image_frames","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","basic_pipe","refiner_ratio"]
,           "optional": ["refiner_basic_pipe_opt","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["SEGS","IMAGE"]
,       "output_is_list": [false,true]
,       "output_name": ["segs","cnet_images"]
,       "name": "SEGSDetailerForAnimateDiff"
,       "display_name": "SEGSDetailer For AnimateDiff (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "ImpactKSamplerBasicPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE",{"tooltip":"basic_pipe input for sampling"}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"tooltip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"],{"tooltip":"noise schedule"}]
,               "latent_image": ["LATENT",{"tooltip":"input latent image"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
            }
,           "optional": {
                "scheduler_func_opt": ["SCHEDULER_FUNC",{"tooltip":"[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]
            }
        }
,       "input_order": {
            "required": ["basic_pipe","seed","steps","cfg","sampler_name","scheduler","latent_image","denoise"]
,           "optional": ["scheduler_func_opt"]
        }
,       "output": ["BASIC_PIPE","LATENT","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["BASIC_PIPE","LATENT","VAE"]
,       "name": "ImpactKSamplerBasicPipe"
,       "display_name": "KSampler (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/sampling"
,       "output_node": false
,       "output_tooltips": ["passthrough input basic_pipe","result latent","VAE in basic_pipe"]
    }
,   "ImpactKSamplerAdvancedBasicPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE",{"tooltip":"basic_pipe input for sampling"}]
,               "add_noise": ["BOOLEAN",{"default":true,"label_on":"enable","label_off":"disable","tooltip":"Whether to add noise"}]
,               "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"tooltip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"],{"tooltip":"noise schedule"}]
,               "latent_image": ["LATENT",{"tooltip":"input latent image"}]
,               "start_at_step": ["INT",{"default":0,"min":0,"max":10000,"tooltip":"The starting step of the sampling to be applied at this node within the range of 'steps'."}]
,               "end_at_step": ["INT",{"default":10000,"min":0,"max":10000,"tooltip":"The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."}]
,               "return_with_leftover_noise": ["BOOLEAN",{"default":false,"label_on":"enable","label_off":"disable","tooltip":"Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."}]
            }
,           "optional": {
                "scheduler_func_opt": ["SCHEDULER_FUNC",{"tooltip":"[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]
            }
        }
,       "input_order": {
            "required": ["basic_pipe","add_noise","noise_seed","steps","cfg","sampler_name","scheduler","latent_image","start_at_step","end_at_step","return_with_leftover_noise"]
,           "optional": ["scheduler_func_opt"]
        }
,       "output": ["BASIC_PIPE","LATENT","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["BASIC_PIPE","LATENT","VAE"]
,       "name": "ImpactKSamplerAdvancedBasicPipe"
,       "display_name": "KSampler (Advanced/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/sampling"
,       "output_node": false
,       "output_tooltips": ["passthrough input basic_pipe","result latent","VAE in basic_pipe"]
    }
,   "ReencodeLatent": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "tile_mode": [["None","Both","Decode(input) only","Encode(output) only"]]
,               "input_vae": ["VAE"]
,               "output_vae": ["VAE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
        }
,       "input_order": {
            "required": ["samples","tile_mode","input_vae","output_vae","tile_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "ReencodeLatent"
,       "display_name": "Reencode Latent"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ReencodeLatentPipe": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "tile_mode": [["None","Both","Decode(input) only","Encode(output) only"]]
,               "input_basic_pipe": ["BASIC_PIPE"]
,               "output_basic_pipe": ["BASIC_PIPE"]
            }
        }
,       "input_order": {
            "required": ["samples","tile_mode","input_basic_pipe","output_basic_pipe"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "ReencodeLatentPipe"
,       "display_name": "Reencode Latent (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactImageBatchToImageList": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "ImpactImageBatchToImageList"
,       "display_name": "Image Batch to Image List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeImageList": {
        "input": {
            "required": {
                "image1": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image1"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "ImpactMakeImageList"
,       "display_name": "Make Image List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeImageBatch": {
        "input": {
            "required": {
                "image1": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image1"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImpactMakeImageBatch"
,       "display_name": "Make Image Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeAnyList": {
        "input": {
            "required": {
            }
,           "optional": {
                "value1": ["*"]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["value1"]
        }
,       "output": ["*"]
,       "output_is_list": [true]
,       "output_name": ["*"]
,       "name": "ImpactMakeAnyList"
,       "display_name": "Make List (Any)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeMaskList": {
        "input": {
            "required": {
                "mask1": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1"]
        }
,       "output": ["MASK"]
,       "output_is_list": [true]
,       "output_name": ["MASK"]
,       "name": "ImpactMakeMaskList"
,       "display_name": "Make Mask List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeMaskBatch": {
        "input": {
            "required": {
                "mask1": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactMakeMaskBatch"
,       "display_name": "Make Mask Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "RegionalSampler": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "seed_2nd": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Additional noise seed. The behavior is determined by seed_2nd_mode."}]
,               "seed_2nd_mode": [["ignore","fixed","seed+seed_2nd","seed-seed_2nd","increment","decrement","randomize"],{"tooltip":"application method of seed_2nd. 1) ignore: Do not use seed_2nd. In the base only sampling stage, the seed is applied as a noise seed, and in the regional sampling stage, denoising is performed as it is without additional noise. 2) Others: In the base only sampling stage, the seed is applied as a noise seed, and once it is closed so that there is no leftover noise, new noise is added with seed_2nd and the regional samping stage is performed. a) fixed: Use seed_2nd as it is as an additional noise seed. b) seed+seed_2nd: Apply the value of seed+seed_2nd as an additional noise seed. c) seed-seed_2nd: Apply the value of seed-seed_2nd as an additional noise seed. d) increment: Not implemented yet. Same with fixed. e) decrement: Not implemented yet. Same with fixed. f) randomize: Not implemented yet. Same with fixed."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "base_only_steps": ["INT",{"default":2,"min":0,"max":10000,"tooltip":"total sampling steps"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
,               "samples": ["LATENT",{"tooltip":"input latent image"}]
,               "base_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"The sampler applied outside the area set by the regional_prompt."}]
,               "regional_prompts": ["REGIONAL_PROMPTS",{"tooltip":"The prompt applied to each region"}]
,               "overlap_factor": ["INT",{"default":10,"min":0,"max":10000,"tooltip":"To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."}]
,               "restore_latent": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled","tooltip":"At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."}]
,               "additional_mode": [["DISABLE","ratio additional","ratio between"],{"default":"ratio between","tooltip":"..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."}]
,               "additional_sampler": [["AUTO","euler","heun","heunpp2","dpm_2","dpm_fast","dpmpp_2m","ddpm"],{"tooltip":"1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."}]
,               "additional_sigma_ratio": ["FLOAT",{"default":0.3,"min":0,"max":1,"step":0.01,"tooltip":"Multiplier of noise schedule to be applied according to additional_mode."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["seed","seed_2nd","seed_2nd_mode","steps","base_only_steps","denoise","samples","base_sampler","regional_prompts","overlap_factor","restore_latent","additional_mode","additional_sampler","additional_sigma_ratio"]
,           "hidden": ["unique_id"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "RegionalSampler"
,       "display_name": "RegionalSampler"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Regional"
,       "output_node": false
,       "output_tooltips": ["result latent"]
    }
,   "RegionalSamplerAdvanced": {
        "input": {
            "required": {
                "add_noise": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled","tooltip":"Whether to add noise"}]
,               "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "start_at_step": ["INT",{"default":0,"min":0,"max":10000,"tooltip":"The starting step of the sampling to be applied at this node within the range of 'steps'."}]
,               "end_at_step": ["INT",{"default":10000,"min":0,"max":10000,"tooltip":"The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."}]
,               "overlap_factor": ["INT",{"default":10,"min":0,"max":10000,"tooltip":"To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."}]
,               "restore_latent": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled","tooltip":"At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."}]
,               "return_with_leftover_noise": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled","tooltip":"Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."}]
,               "latent_image": ["LATENT",{"tooltip":"input latent image"}]
,               "base_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"The sampler applied outside the area set by the regional_prompt."}]
,               "regional_prompts": ["REGIONAL_PROMPTS",{"tooltip":"The prompt applied to each region"}]
,               "additional_mode": [["DISABLE","ratio additional","ratio between"],{"default":"ratio between","tooltip":"..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."}]
,               "additional_sampler": [["AUTO","euler","heun","heunpp2","dpm_2","dpm_fast","dpmpp_2m","ddpm"],{"tooltip":"1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."}]
,               "additional_sigma_ratio": ["FLOAT",{"default":0.3,"min":0,"max":1,"step":0.01,"tooltip":"Multiplier of noise schedule to be applied according to additional_mode."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["add_noise","noise_seed","steps","start_at_step","end_at_step","overlap_factor","restore_latent","return_with_leftover_noise","latent_image","base_sampler","regional_prompts","additional_mode","additional_sampler","additional_sigma_ratio"]
,           "hidden": ["unique_id"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "RegionalSamplerAdvanced"
,       "display_name": "RegionalSamplerAdvanced"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Regional"
,       "output_node": false
,       "output_tooltips": ["result latent"]
    }
,   "CombineRegionalPrompts": {
        "input": {
            "required": {
                "regional_prompts1": ["REGIONAL_PROMPTS",{"tooltip":"input regional_prompts. (Connecting to the input slot increases the number of additional slots.)"}]
            }
        }
,       "input_order": {
            "required": ["regional_prompts1"]
        }
,       "output": ["REGIONAL_PROMPTS"]
,       "output_is_list": [false]
,       "output_name": ["REGIONAL_PROMPTS"]
,       "name": "CombineRegionalPrompts"
,       "display_name": "CombineRegionalPrompts"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Regional"
,       "output_node": false
,       "output_tooltips": ["Combined REGIONAL_PROMPTS"]
    }
,   "RegionalPrompt": {
        "input": {
            "required": {
                "mask": ["MASK",{"tooltip":"region mask"}]
,               "advanced_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"sampler for specified region"}]
            }
,           "optional": {
                "variation_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Sets the extra seed to be used for noise variation."}]
,               "variation_strength": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01,"tooltip":"Sets the strength of the noise variation."}]
,               "variation_method": [["linear","slerp"],{"tooltip":"Sets how the original noise and extra noise are blended together."}]
            }
        }
,       "input_order": {
            "required": ["mask","advanced_sampler"]
,           "optional": ["variation_seed","variation_strength","variation_method"]
        }
,       "output": ["REGIONAL_PROMPTS"]
,       "output_is_list": [false]
,       "output_name": ["REGIONAL_PROMPTS"]
,       "name": "RegionalPrompt"
,       "display_name": "RegionalPrompt"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Regional"
,       "output_node": false
,       "output_tooltips": ["regional prompts. (Can be used in the RegionalSampler.)"]
    }
,   "ImpactCombineConditionings": {
        "input": {
            "required": {
                "conditioning1": ["CONDITIONING",{"tooltip":"input conditionings. (Connecting to the input slot increases the number of additional slots.)"}]
            }
        }
,       "input_order": {
            "required": ["conditioning1"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ImpactCombineConditionings"
,       "display_name": "Combine Conditionings"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Combined conditioning"]
    }
,   "ImpactConcatConditionings": {
        "input": {
            "required": {
                "conditioning1": ["CONDITIONING",{"tooltip":"input conditionings. (Connecting to the input slot increases the number of additional slots.)"}]
            }
        }
,       "input_order": {
            "required": ["conditioning1"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ImpactConcatConditionings"
,       "display_name": "Concat Conditionings"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Concatenated conditioning"]
    }
,   "ImpactSEGSLabelAssign": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "labels": ["STRING",{"multiline":true,"placeholder":"List the label to be assigned in order of segs, separated by commas"}]
            }
        }
,       "input_order": {
            "required": ["segs","labels"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSEGSLabelAssign"
,       "display_name": "SEGS Assign (label)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSLabelFilter": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "preset": [["all","hand","face","mouth","eyes","eyebrows","pupils","left_eyebrow","left_eye","left_pupil","right_eyebrow","right_eye","right_pupil","short_sleeved_shirt","long_sleeved_shirt","short_sleeved_outwear","long_sleeved_outwear","vest","sling","shorts","trousers","skirt","short_sleeved_dress","long_sleeved_dress","vest_dress","sling_dress","person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"]]
,               "labels": ["STRING",{"multiline":true,"placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
        }
,       "input_order": {
            "required": ["segs","preset","labels"]
        }
,       "output": ["SEGS","SEGS"]
,       "output_is_list": [false,false]
,       "output_name": ["filtered_SEGS","remained_SEGS"]
,       "name": "ImpactSEGSLabelFilter"
,       "display_name": "SEGS Filter (label)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSRangeFilter": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "target": [["area(=w*h)","width","height","x1","y1","x2","y2","length_percent","confidence(0-100)"]]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"inside","label_off":"outside"}]
,               "min_value": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "max_value": ["INT",{"default":67108864,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["segs","target","mode","min_value","max_value"]
        }
,       "output": ["SEGS","SEGS"]
,       "output_is_list": [false,false]
,       "output_name": ["filtered_SEGS","remained_SEGS"]
,       "name": "ImpactSEGSRangeFilter"
,       "display_name": "SEGS Filter (range)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSOrderedFilter": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "target": [["area(=w*h)","width","height","x1","y1","x2","y2","confidence"]]
,               "order": ["BOOLEAN",{"default":true,"label_on":"descending","label_off":"ascending"}]
,               "take_start": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "take_count": ["INT",{"default":1,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["segs","target","order","take_start","take_count"]
        }
,       "output": ["SEGS","SEGS"]
,       "output_is_list": [false,false]
,       "output_name": ["filtered_SEGS","remained_SEGS"]
,       "name": "ImpactSEGSOrderedFilter"
,       "display_name": "SEGS Filter (ordered)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactCompare": {
        "input": {
            "required": {
                "cmp": [["a = b","a <> b","a > b","a < b","a >= b","a <= b","tt","ff"]]
,               "a": ["*"]
,               "b": ["*"]
            }
        }
,       "input_order": {
            "required": ["cmp","a","b"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactCompare"
,       "display_name": "ImpactCompare"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactConditionalBranch": {
        "input": {
            "required": {
                "cond": ["BOOLEAN"]
,               "tt_value": ["*",{"lazy":true}]
,               "ff_value": ["*",{"lazy":true}]
            }
        }
,       "input_order": {
            "required": ["cond","tt_value","ff_value"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactConditionalBranch"
,       "display_name": "ImpactConditionalBranch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactConditionalBranchSelMode": {
        "input": {
            "required": {
                "cond": ["BOOLEAN"]
            }
,           "optional": {
                "tt_value": ["*"]
,               "ff_value": ["*"]
            }
        }
,       "input_order": {
            "required": ["cond"]
,           "optional": ["tt_value","ff_value"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactConditionalBranchSelMode"
,       "display_name": "ImpactConditionalBranchSelMode"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactIfNone": {
        "input": {
            "required": {
            }
,           "optional": {
                "signal": ["*"]
,               "any_input": ["*"]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["signal","any_input"]
        }
,       "output": ["*","BOOLEAN"]
,       "output_is_list": [false,false]
,       "output_name": ["signal_opt","bool"]
,       "name": "ImpactIfNone"
,       "display_name": "ImpactIfNone"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactConvertDataType": {
        "input": {
            "required": {
                "value": ["*"]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["STRING","FLOAT","INT","BOOLEAN"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["STRING","FLOAT","INT","BOOLEAN"]
,       "name": "ImpactConvertDataType"
,       "display_name": "ImpactConvertDataType"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactLogicalOperators": {
        "input": {
            "required": {
                "operator": [["and","or","xor"]]
,               "bool_a": ["BOOLEAN",{"forceInput":true}]
,               "bool_b": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["operator","bool_a","bool_b"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactLogicalOperators"
,       "display_name": "ImpactLogicalOperators"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactInt": {
        "input": {
            "required": {
                "value": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["INT"]
,       "output_is_list": [false]
,       "output_name": ["INT"]
,       "name": "ImpactInt"
,       "display_name": "ImpactInt"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactFloat": {
        "input": {
            "required": {
                "value": ["FLOAT",{"default":1,"min":-3.402823466e+38,"max":3.402823466e+38}]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["FLOAT"]
,       "output_is_list": [false]
,       "output_name": ["FLOAT"]
,       "name": "ImpactFloat"
,       "display_name": "ImpactFloat"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactBoolean": {
        "input": {
            "required": {
                "value": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactBoolean"
,       "display_name": "ImpactBoolean"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactValueSender": {
        "input": {
            "required": {
                "value": ["*"]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
            }
,           "optional": {
                "signal_opt": ["*"]
            }
        }
,       "input_order": {
            "required": ["value","link_id"]
,           "optional": ["signal_opt"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal"]
,       "name": "ImpactValueSender"
,       "display_name": "ImpactValueSender"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": true
    }
,   "ImpactValueReceiver": {
        "input": {
            "required": {
                "typ": [["STRING","INT","FLOAT","BOOLEAN"]]
,               "value": ["STRING",{"default":""}]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["typ","value","link_id"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactValueReceiver"
,       "display_name": "ImpactValueReceiver"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactImageInfo": {
        "input": {
            "required": {
                "value": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["INT","INT","INT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["batch","height","width","channel"]
,       "name": "ImpactImageInfo"
,       "display_name": "ImpactImageInfo"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": false
    }
,   "ImpactLatentInfo": {
        "input": {
            "required": {
                "value": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["INT","INT","INT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["batch","height","width","channel"]
,       "name": "ImpactLatentInfo"
,       "display_name": "ImpactLatentInfo"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": false
    }
,   "ImpactMinMax": {
        "input": {
            "required": {
                "mode": ["BOOLEAN",{"default":true,"label_on":"max","label_off":"min"}]
,               "a": ["*"]
,               "b": ["*"]
            }
        }
,       "input_order": {
            "required": ["mode","a","b"]
        }
,       "output": ["INT"]
,       "output_is_list": [false]
,       "output_name": ["INT"]
,       "name": "ImpactMinMax"
,       "display_name": "ImpactMinMax"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": false
    }
,   "ImpactNeg": {
        "input": {
            "required": {
                "value": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactNeg"
,       "display_name": "ImpactNeg"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactConditionalStopIteration": {
        "input": {
            "required": {
                "cond": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["cond"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImpactConditionalStopIteration"
,       "display_name": "ImpactConditionalStopIteration"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": true
    }
,   "ImpactStringSelector": {
        "input": {
            "required": {
                "strings": ["STRING",{"multiline":true}]
,               "multiline": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "select": ["INT",{"min":0,"max":9223372036854776000,"step":1,"default":0}]
            }
        }
,       "input_order": {
            "required": ["strings","multiline","select"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "ImpactStringSelector"
,       "display_name": "String Selector"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "StringListToString": {
        "input": {
            "required": {
                "join_with": ["STRING",{"default":"\\n"}]
,               "string_list": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["join_with","string_list"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "StringListToString"
,       "display_name": "String List to String"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "WildcardPromptFromString": {
        "input": {
            "required": {
                "string": ["STRING",{"forceInput":true}]
,               "delimiter": ["STRING",{"multiline":false,"default":"\\n"}]
,               "prefix_all": ["STRING",{"multiline":false}]
,               "postfix_all": ["STRING",{"multiline":false}]
,               "restrict_to_tags": ["STRING",{"multiline":false}]
,               "exclude_tags": ["STRING",{"multiline":false}]
            }
        }
,       "input_order": {
            "required": ["string","delimiter","prefix_all","postfix_all","restrict_to_tags","exclude_tags"]
        }
,       "output": ["STRING","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["wildcard","segs_labels"]
,       "name": "WildcardPromptFromString"
,       "display_name": "Wildcard Prompt from String"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactExecutionOrderController": {
        "input": {
            "required": {
                "signal": ["*"]
,               "value": ["*"]
            }
        }
,       "input_order": {
            "required": ["signal","value"]
        }
,       "output": ["*","*"]
,       "output_is_list": [false,false]
,       "output_name": ["signal","value"]
,       "name": "ImpactExecutionOrderController"
,       "display_name": "Execution Order Controller"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "RemoveNoiseMask": {
        "input": {
            "required": {
                "samples": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "RemoveNoiseMask"
,       "display_name": "Remove Noise Mask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactLogger": {
        "input": {
            "required": {
                "data": ["*"]
,               "text": ["STRING",{"multiline":true}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
,               "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["data","text"]
,           "hidden": ["prompt","extra_pnginfo","unique_id"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImpactLogger"
,       "display_name": "ImpactLogger"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Debug"
,       "output_node": true
    }
,   "ImpactDummyInput": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactDummyInput"
,       "display_name": "ImpactDummyInput"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Debug"
,       "output_node": false
    }
,   "ImpactQueueTrigger": {
        "input": {
            "required": {
                "signal": ["*"]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Trigger","label_off":"Don't trigger"}]
            }
        }
,       "input_order": {
            "required": ["signal","mode"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal_opt"]
,       "name": "ImpactQueueTrigger"
,       "display_name": "Queue Trigger"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactQueueTriggerCountdown": {
        "input": {
            "required": {
                "count": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "total": ["INT",{"default":10,"min":1,"max":18446744073709552000}]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Trigger","label_off":"Don't trigger"}]
            }
,           "optional": {
                "signal": ["*"]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["count","total","mode"]
,           "optional": ["signal"]
,           "hidden": ["unique_id"]
        }
,       "output": ["*","INT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["signal_opt","count","total"]
,       "name": "ImpactQueueTriggerCountdown"
,       "display_name": "Queue Trigger (Countdown)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactSetWidgetValue": {
        "input": {
            "required": {
                "signal": ["*"]
,               "node_id": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "widget_name": ["STRING",{"multiline":false}]
            }
,           "optional": {
                "boolean_value": ["BOOLEAN",{"forceInput":true}]
,               "int_value": ["INT",{"forceInput":true}]
,               "float_value": ["FLOAT",{"forceInput":true}]
,               "string_value": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["signal","node_id","widget_name"]
,           "optional": ["boolean_value","int_value","float_value","string_value"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal_opt"]
,       "name": "ImpactSetWidgetValue"
,       "display_name": "Set Widget Value"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactNodeSetMuteState": {
        "input": {
            "required": {
                "signal": ["*"]
,               "node_id": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "set_state": ["BOOLEAN",{"default":true,"label_on":"active","label_off":"mute"}]
            }
        }
,       "input_order": {
            "required": ["signal","node_id","set_state"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal_opt"]
,       "name": "ImpactNodeSetMuteState"
,       "display_name": "Set Mute State"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactControlBridge": {
        "input": {
            "required": {
                "value": ["*"]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Active","label_off":"Stop/Mute/Bypass"}]
,               "behavior": [["Stop","Mute","Bypass"]]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["value","mode","behavior"]
,           "hidden": ["unique_id","prompt","extra_pnginfo"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["value"]
,       "name": "ImpactControlBridge"
,       "display_name": "Control Bridge"
,       "description": "When behavior is Stop and mode is active, the input value is passed directly to the output.\nWhen behavior is Mute/Bypass and mode is active, the node connected to the output is changed to active state.\nWhen behavior is Stop and mode is Stop/Mute/Bypass, the workflow execution of the current node is halted.\nWhen behavior is Mute/Bypass and mode is Stop/Mute/Bypass, the node connected to the output is changed to Mute/Bypass state."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": true
    }
,   "ImpactIsNotEmptySEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactIsNotEmptySEGS"
,       "display_name": "SEGS isn't Empty"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactSleep": {
        "input": {
            "required": {
                "signal": ["*"]
,               "seconds": ["FLOAT",{"default":0.5,"min":0,"max":3600}]
            }
        }
,       "input_order": {
            "required": ["signal","seconds"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal_opt"]
,       "name": "ImpactSleep"
,       "display_name": "Sleep"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactRemoteBoolean": {
        "input": {
            "required": {
                "node_id": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "widget_name": ["STRING",{"multiline":false}]
,               "value": ["BOOLEAN",{"default":true,"label_on":"True","label_off":"False"}]
            }
        }
,       "input_order": {
            "required": ["node_id","widget_name","value"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImpactRemoteBoolean"
,       "display_name": "Remote Boolean (on prompt)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactRemoteInt": {
        "input": {
            "required": {
                "node_id": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "widget_name": ["STRING",{"multiline":false}]
,               "value": ["INT",{"default":0,"min":-18446744073709552000,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["node_id","widget_name","value"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImpactRemoteInt"
,       "display_name": "Remote Int (on prompt)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactHFTransformersClassifierProvider": {
        "input": {
            "required": {
                "preset_repo_id": [["rizvandwiki/gender-classification-2","NTQAI/pedestrian_gender_recognition","Leilab/gender_class","ProjectPersonal/GenderClassifier","crangana/trained-gender","cledoux42/GenderNew_v002","ivensamdh/genderage2","Manual repo id"]]
,               "manual_repo_id": ["STRING",{"multiline":false}]
,               "device_mode": [["AUTO","Prefer GPU","CPU"]]
            }
        }
,       "input_order": {
            "required": ["preset_repo_id","manual_repo_id","device_mode"]
        }
,       "output": ["TRANSFORMERS_CLASSIFIER"]
,       "output_is_list": [false]
,       "output_name": ["TRANSFORMERS_CLASSIFIER"]
,       "name": "ImpactHFTransformersClassifierProvider"
,       "display_name": "HF Transformers Classifier Provider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/HuggingFace"
,       "output_node": false
    }
,   "ImpactSEGSClassify": {
        "input": {
            "required": {
                "classifier": ["TRANSFORMERS_CLASSIFIER"]
,               "segs": ["SEGS"]
,               "preset_expr": [["#Female > #Male","#Female < #Male","female > 0.5","male > 0.5","Age16to25 > 0.1","Age50to69 > 0.1","Manual expr"]]
,               "manual_expr": ["STRING",{"multiline":false}]
            }
,           "optional": {
                "ref_image_opt": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["classifier","segs","preset_expr","manual_expr"]
,           "optional": ["ref_image_opt"]
        }
,       "output": ["SEGS","SEGS","STRING"]
,       "output_is_list": [false,false,true]
,       "output_name": ["filtered_SEGS","remained_SEGS","detected_labels"]
,       "name": "ImpactSEGSClassify"
,       "display_name": "SEGS Classify"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/HuggingFace"
,       "output_node": false
    }
,   "ImpactSchedulerAdapter": {
        "input": {
            "required": {
                "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"],{"defaultInput":true}]
,               "extra_scheduler": [["None","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
            }
        }
,       "input_order": {
            "required": ["scheduler","extra_scheduler"]
        }
,       "output": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,       "output_is_list": [false]
,       "output_name": ["scheduler"]
,       "name": "ImpactSchedulerAdapter"
,       "display_name": "Impact Scheduler Adapter"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "GITSSchedulerFuncProvider": {
        "input": {
            "required": {
                "coeff": ["FLOAT",{"default":1.2,"min":0.8,"max":1.5,"step":0.05,"tooltip":"coeff factor of GITS Scheduler"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"denoise amount for noise schedule"}]
            }
        }
,       "input_order": {
            "required": ["coeff","denoise"]
        }
,       "output": ["SCHEDULER_FUNC"]
,       "output_is_list": [false]
,       "output_name": ["SCHEDULER_FUNC"]
,       "name": "GITSSchedulerFuncProvider"
,       "display_name": "GITSScheduler Func Provider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/sampling"
,       "output_node": false
,       "output_tooltips": ["Returns a function that generates a noise schedule using GITSScheduler. This can be used in place of a predetermined noise schedule to dynamically generate a noise schedule based on the steps."]
    }
,   "UltralyticsDetectorProvider": {
        "input": {
            "required": {
                "model_name": [["bbox/face_yolov8m.pt","bbox/hand_yolov8s.pt","segm/person_yolov8m-seg.pt"]]
            }
        }
,       "input_order": {
            "required": ["model_name"]
        }
,       "output": ["BBOX_DETECTOR","SEGM_DETECTOR"]
,       "output_is_list": [false,false]
,       "output_name": ["BBOX_DETECTOR","SEGM_DETECTOR"]
,       "name": "UltralyticsDetectorProvider"
,       "display_name": "UltralyticsDetectorProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack"
,       "output_node": false
    }
,   "BRIA_RMBG_ModelLoader_Zho": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["RMBGMODEL"]
,       "output_is_list": [false]
,       "output_name": ["rmbgmodel"]
,       "name": "BRIA_RMBG_ModelLoader_Zho"
,       "display_name": "🧹BRIA_RMBG Model Loader"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-BRIA_AI-RMBG"
,       "category": "🧹BRIA RMBG"
,       "output_node": false
    }
,   "BRIA_RMBG_Zho": {
        "input": {
            "required": {
                "rmbgmodel": ["RMBGMODEL"]
,               "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["rmbgmodel","image"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["image","mask"]
,       "name": "BRIA_RMBG_Zho"
,       "display_name": "🧹BRIA RMBG"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-BRIA_AI-RMBG"
,       "category": "🧹BRIA RMBG"
,       "output_node": false
    }
,   "AlphaChanelAdd": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "AlphaChanelAdd"
,       "display_name": "AlphaChanelAdd"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/alpha"
,       "output_node": false
    }
,   "AlphaChanelAddByMask": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "mask": ["MASK"]
,               "method": [["default","invert"]]
            }
        }
,       "input_order": {
            "required": ["images","mask","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "AlphaChanelAddByMask"
,       "display_name": "AlphaChanelAddByMask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/alpha"
,       "output_node": false
    }
,   "AlphaChanelAsMask": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "method": [["default","invert"]]
            }
        }
,       "input_order": {
            "required": ["images","method"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "AlphaChanelAsMask"
,       "display_name": "AlphaChanelAsMask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/alpha"
,       "output_node": false
    }
,   "AlphaChanelRestore": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "AlphaChanelRestore"
,       "display_name": "AlphaChanelRestore"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/alpha"
,       "output_node": false
    }
,   "AlphaChanelRemove": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "AlphaChanelRemove"
,       "display_name": "AlphaChanelRemove"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/alpha"
,       "output_node": false
    }
,   "ClipClamp": {
        "input": {
            "required": {
                "clip": ["CLIP"]
            }
        }
,       "input_order": {
            "required": ["clip"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "ClipClamp"
,       "display_name": "ClipClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "ClipVisionClamp": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
            }
        }
,       "input_order": {
            "required": ["clip_vision"]
        }
,       "output": ["CLIP_VISION"]
,       "output_is_list": [false]
,       "output_name": ["CLIP_VISION"]
,       "name": "ClipVisionClamp"
,       "display_name": "ClipVisionClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "ClipVisionOutputClamp": {
        "input": {
            "required": {
                "clip_vision_output": ["CLIP_VISION_OUTPUT"]
            }
        }
,       "input_order": {
            "required": ["clip_vision_output"]
        }
,       "output": ["CLIP_VISION_OUTPUT"]
,       "output_is_list": [false]
,       "output_name": ["CLIP_VISION_OUTPUT"]
,       "name": "ClipVisionOutputClamp"
,       "display_name": "ClipVisionOutputClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "ConditioningClamp": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["conditioning"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningClamp"
,       "display_name": "ConditioningClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "ControlNetClamp": {
        "input": {
            "required": {
                "control_net_clamp": ["CONTROL_NET"]
            }
        }
,       "input_order": {
            "required": ["control_net_clamp"]
        }
,       "output": ["CONTROL_NET"]
,       "output_is_list": [false]
,       "output_name": ["CONTROL_NET"]
,       "name": "ControlNetClamp"
,       "display_name": "ControlNetClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "GligenClamp": {
        "input": {
            "required": {
                "gligen": ["GLIGEN"]
            }
        }
,       "input_order": {
            "required": ["gligen"]
        }
,       "output": ["GLIGEN"]
,       "output_is_list": [false]
,       "output_name": ["GLIGEN"]
,       "name": "GligenClamp"
,       "display_name": "GligenClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "ImageClamp": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageClamp"
,       "display_name": "ImageClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "LatentClamp": {
        "input": {
            "required": {
                "latent": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["latent"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentClamp"
,       "display_name": "LatentClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "MaskClamp": {
        "input": {
            "required": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "MaskClamp"
,       "display_name": "MaskClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "ModelClamp": {
        "input": {
            "required": {
                "model": ["MODEL"]
            }
        }
,       "input_order": {
            "required": ["model"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelClamp"
,       "display_name": "ModelClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "StyleModelClamp": {
        "input": {
            "required": {
                "style_model": ["STYLE_MODEL"]
            }
        }
,       "input_order": {
            "required": ["style_model"]
        }
,       "output": ["STYLE_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["STYLE_MODEL"]
,       "name": "StyleModelClamp"
,       "display_name": "StyleModelClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "UpscaleModelClamp": {
        "input": {
            "required": {
                "upscale_model": ["UPSCALE_MODEL"]
            }
        }
,       "input_order": {
            "required": ["upscale_model"]
        }
,       "output": ["UPSCALE_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALE_MODEL"]
,       "name": "UpscaleModelClamp"
,       "display_name": "UpscaleModelClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "VaeClamp": {
        "input": {
            "required": {
                "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["vae"]
        }
,       "output": ["VAE"]
,       "output_is_list": [false]
,       "output_name": ["VAE"]
,       "name": "VaeClamp"
,       "display_name": "VaeClamp"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "clamp"
,       "output_node": false
    }
,   "ImageBatchGet": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "index": ["INT",{"default":1,"min":1,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images","index"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBatchGet"
,       "display_name": "ImageBatchGet"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ImageBatchCopy": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "index": ["INT",{"default":1,"min":1,"step":1}]
,               "quantity": ["INT",{"default":1,"min":2,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images","index","quantity"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBatchCopy"
,       "display_name": "ImageBatchCopy"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ImageBatchRemove": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "index": ["INT",{"default":1,"min":1,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images","index"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBatchRemove"
,       "display_name": "ImageBatchRemove"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ImageBatchFork": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "priority": [["first","second"]]
            }
        }
,       "input_order": {
            "required": ["images","priority"]
        }
,       "output": ["IMAGE","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","IMAGE"]
,       "name": "ImageBatchFork"
,       "display_name": "ImageBatchFork"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ImageBatchJoin": {
        "input": {
            "required": {
                "images_a": ["IMAGE"]
,               "images_b": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images_a","images_b"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBatchJoin"
,       "display_name": "ImageBatchJoin"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ImageBatchPermute": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "permute": ["STRING",{"multiline":false}]
,               "start_with_zero": ["BOOLEAN"]
            }
        }
,       "input_order": {
            "required": ["images","permute","start_with_zero"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBatchPermute"
,       "display_name": "ImageBatchPermute"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ImageCompositeAbsolute": {
        "input": {
            "required": {
                "images_a": ["IMAGE"]
,               "images_b": ["IMAGE"]
,               "images_a_x": ["INT",{"default":0,"step":1}]
,               "images_a_y": ["INT",{"default":0,"step":1}]
,               "images_b_x": ["INT",{"default":0,"step":1}]
,               "images_b_y": ["INT",{"default":0,"step":1}]
,               "container_width": ["INT",{"default":0,"step":1}]
,               "container_height": ["INT",{"default":0,"step":1}]
,               "background": [["images_a","images_b"]]
,               "method": [["pair","matrix"]]
            }
        }
,       "input_order": {
            "required": ["images_a","images_b","images_a_x","images_a_y","images_b_x","images_b_y","container_width","container_height","background","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageCompositeAbsolute"
,       "display_name": "ImageCompositeAbsolute"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/composite"
,       "output_node": false
    }
,   "ImageCompositeAbsoluteByContainer": {
        "input": {
            "required": {
                "container": ["IMAGE"]
,               "images_a": ["IMAGE"]
,               "images_b": ["IMAGE"]
,               "images_a_x": ["INT",{"default":0,"step":1}]
,               "images_a_y": ["INT",{"default":0,"step":1}]
,               "images_b_x": ["INT",{"default":0,"step":1}]
,               "images_b_y": ["INT",{"default":0,"step":1}]
,               "background": [["images_a","images_b"]]
,               "method": [["pair","matrix"]]
            }
        }
,       "input_order": {
            "required": ["container","images_a","images_b","images_a_x","images_a_y","images_b_x","images_b_y","background","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageCompositeAbsoluteByContainer"
,       "display_name": "ImageCompositeAbsoluteByContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/composite"
,       "output_node": false
    }
,   "ImageCompositeRelative": {
        "input": {
            "required": {
                "images_a": ["IMAGE"]
,               "images_b": ["IMAGE"]
,               "images_a_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "images_a_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "images_b_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "images_b_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "background": [["images_a","images_b"]]
,               "container_size_type": [["max","sum","sum_width","sum_height"]]
,               "method": [["pair","matrix"]]
            }
        }
,       "input_order": {
            "required": ["images_a","images_b","images_a_x","images_a_y","images_b_x","images_b_y","background","container_size_type","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageCompositeRelative"
,       "display_name": "ImageCompositeRelative"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/composite"
,       "output_node": false
    }
,   "ImageCompositeRelativeByContainer": {
        "input": {
            "required": {
                "container": ["IMAGE"]
,               "images_a": ["IMAGE"]
,               "images_b": ["IMAGE"]
,               "images_a_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "images_a_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "images_b_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "images_b_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "background": [["images_a","images_b"]]
,               "method": [["pair","matrix"]]
            }
        }
,       "input_order": {
            "required": ["container","images_a","images_b","images_a_x","images_a_y","images_b_x","images_b_y","background","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageCompositeRelativeByContainer"
,       "display_name": "ImageCompositeRelativeByContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/composite"
,       "output_node": false
    }
,   "ImageContainer": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"min":1,"step":1}]
,               "height": ["INT",{"default":512,"min":1,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["width","height","red","green","blue","alpha"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageContainer"
,       "display_name": "ImageContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/container"
,       "output_node": false
    }
,   "ImageContainerInheritanceAdd": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "add_width": ["INT",{"default":0,"step":1}]
,               "add_height": ["INT",{"default":0,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "method": [["single","for_each"]]
            }
        }
,       "input_order": {
            "required": ["images","add_width","add_height","red","green","blue","alpha","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageContainerInheritanceAdd"
,       "display_name": "ImageContainerInheritanceAdd"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/container"
,       "output_node": false
    }
,   "ImageContainerInheritanceScale": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "scale_width": ["FLOAT",{"default":1,"step":0.1}]
,               "scale_height": ["FLOAT",{"default":1,"step":0.1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "method": [["single","for_each"]]
            }
        }
,       "input_order": {
            "required": ["images","scale_width","scale_height","red","green","blue","alpha","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageContainerInheritanceScale"
,       "display_name": "ImageContainerInheritanceScale"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/container"
,       "output_node": false
    }
,   "ImageContainerInheritanceMax": {
        "input": {
            "required": {
                "images_a": ["IMAGE"]
,               "images_b": ["IMAGE"]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "method": [["single","for_each_pair","for_each_matrix"]]
            }
        }
,       "input_order": {
            "required": ["images_a","images_b","red","green","blue","alpha","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageContainerInheritanceMax"
,       "display_name": "ImageContainerInheritanceMax"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/container"
,       "output_node": false
    }
,   "ImageContainerInheritanceSum": {
        "input": {
            "required": {
                "images_a": ["IMAGE"]
,               "images_b": ["IMAGE"]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "container_size_type": [["sum","sum_width","sum_height"]]
,               "method": [["single","for_each_pair","for_each_matrix"]]
            }
        }
,       "input_order": {
            "required": ["images_a","images_b","red","green","blue","alpha","container_size_type","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageContainerInheritanceSum"
,       "display_name": "ImageContainerInheritanceSum"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/container"
,       "output_node": false
    }
,   "ImageDrawArc": {
        "input": {
            "required": {
                "width": ["INT",{"default":256,"min":1,"step":1}]
,               "height": ["INT",{"default":256,"min":1,"step":1}]
,               "size": ["INT",{"default":1,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "start": ["INT",{"default":0,"max":360,"step":1}]
,               "end": ["INT",{"default":180,"max":360,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["width","height","size","start_x","start_y","end_x","end_y","start","end","red","green","blue","alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawArc"
,       "display_name": "ImageDrawArc"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawArcByContainer": {
        "input": {
            "required": {
                "container": ["IMAGE"]
,               "size": ["INT",{"default":1,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "start": ["INT",{"default":0,"max":360,"step":1}]
,               "end": ["INT",{"default":180,"max":360,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["container","size","start_x","start_y","end_x","end_y","start","end","red","green","blue","alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawArcByContainer"
,       "display_name": "ImageDrawArcByContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawChord": {
        "input": {
            "required": {
                "width": ["INT",{"default":256,"min":1,"step":1}]
,               "height": ["INT",{"default":256,"min":1,"step":1}]
,               "size": ["INT",{"default":1,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "start": ["INT",{"default":0,"max":360,"step":1}]
,               "end": ["INT",{"default":180,"max":360,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["width","height","size","start_x","start_y","end_x","end_y","start","end","red","green","blue","alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawChord"
,       "display_name": "ImageDrawChord"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawChordByContainer": {
        "input": {
            "required": {
                "container": ["IMAGE"]
,               "size": ["INT",{"default":1,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "start": ["INT",{"default":0,"max":360,"step":1}]
,               "end": ["INT",{"default":180,"max":360,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["container","size","start_x","start_y","end_x","end_y","start","end","red","green","blue","alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawChordByContainer"
,       "display_name": "ImageDrawChordByContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawEllipse": {
        "input": {
            "required": {
                "width": ["INT",{"default":256,"min":1,"step":1}]
,               "height": ["INT",{"default":256,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "fill_red": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_green": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_blue": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["width","height","start_x","start_y","end_x","end_y","outline_size","outline_red","outline_green","outline_blue","outline_alpha","fill_red","fill_green","fill_blue","fill_alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawEllipse"
,       "display_name": "ImageDrawEllipse"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawEllipseByContainer": {
        "input": {
            "required": {
                "container": ["IMAGE"]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "fill_red": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_green": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_blue": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["container","start_x","start_y","end_x","end_y","outline_size","outline_red","outline_green","outline_blue","outline_alpha","fill_red","fill_green","fill_blue","fill_alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawEllipseByContainer"
,       "display_name": "ImageDrawEllipseByContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawLine": {
        "input": {
            "required": {
                "width": ["INT",{"default":256,"min":1,"step":1}]
,               "height": ["INT",{"default":256,"min":1,"step":1}]
,               "size": ["INT",{"default":1,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["width","height","size","start_x","start_y","end_x","end_y","red","green","blue","alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawLine"
,       "display_name": "ImageDrawLine"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawLineByContainer": {
        "input": {
            "required": {
                "container": ["IMAGE"]
,               "size": ["INT",{"default":1,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["container","size","start_x","start_y","end_x","end_y","red","green","blue","alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawLineByContainer"
,       "display_name": "ImageDrawLineByContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawPieslice": {
        "input": {
            "required": {
                "width": ["INT",{"default":256,"min":1,"step":1}]
,               "height": ["INT",{"default":256,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "start": ["INT",{"default":0,"max":360,"step":1}]
,               "end": ["INT",{"default":240,"max":360,"step":1}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "fill_red": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_green": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_blue": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["width","height","start_x","start_y","end_x","end_y","start","end","outline_size","outline_red","outline_green","outline_blue","outline_alpha","fill_red","fill_green","fill_blue","fill_alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawPieslice"
,       "display_name": "ImageDrawPieslice"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawPiesliceByContainer": {
        "input": {
            "required": {
                "container": ["IMAGE"]
,               "start_x": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "start": ["INT",{"default":0,"max":360,"step":1}]
,               "end": ["INT",{"default":240,"max":360,"step":1}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "fill_red": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_green": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_blue": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["container","start_x","start_y","end_x","end_y","start","end","outline_size","outline_red","outline_green","outline_blue","outline_alpha","fill_red","fill_green","fill_blue","fill_alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawPiesliceByContainer"
,       "display_name": "ImageDrawPiesliceByContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawRectangle": {
        "input": {
            "required": {
                "width": ["INT",{"default":256,"min":1,"step":1}]
,               "height": ["INT",{"default":256,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0.1,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0.2,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":0.9,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":0.8,"max":1,"step":0.01}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "fill_red": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_green": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_blue": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["width","height","start_x","start_y","end_x","end_y","outline_size","outline_red","outline_green","outline_blue","outline_alpha","fill_red","fill_green","fill_blue","fill_alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawRectangle"
,       "display_name": "ImageDrawRectangle"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawRectangleByContainer": {
        "input": {
            "required": {
                "container": ["IMAGE"]
,               "start_x": ["FLOAT",{"default":0.1,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0.2,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":0.9,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":0.8,"max":1,"step":0.01}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "fill_red": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_green": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_blue": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["container","start_x","start_y","end_x","end_y","outline_size","outline_red","outline_green","outline_blue","outline_alpha","fill_red","fill_green","fill_blue","fill_alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawRectangleByContainer"
,       "display_name": "ImageDrawRectangleByContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawRectangleRounded": {
        "input": {
            "required": {
                "width": ["INT",{"default":256,"min":1,"step":1}]
,               "height": ["INT",{"default":256,"min":1,"step":1}]
,               "start_x": ["FLOAT",{"default":0.1,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0.2,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":0.9,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":0.8,"max":1,"step":0.01}]
,               "radius": ["INT",{"default":180,"max":360,"step":1}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "fill_red": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_green": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_blue": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "top_left_corner": [["true","false"]]
,               "top_right_corner": [["true","false"]]
,               "bottom_right_corner": [["true","false"]]
,               "bottom_left_corner": [["true","false"]]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["width","height","start_x","start_y","end_x","end_y","radius","outline_size","outline_red","outline_green","outline_blue","outline_alpha","fill_red","fill_green","fill_blue","fill_alpha","top_left_corner","top_right_corner","bottom_right_corner","bottom_left_corner","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawRectangleRounded"
,       "display_name": "ImageDrawRectangleRounded"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawRectangleRoundedByContainer": {
        "input": {
            "required": {
                "container": ["IMAGE"]
,               "start_x": ["FLOAT",{"default":0.1,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0.2,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":0.9,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":0.8,"max":1,"step":0.01}]
,               "radius": ["INT",{"default":180,"max":360,"step":1}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "fill_red": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_green": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_blue": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "top_left_corner": [["true","false"]]
,               "top_right_corner": [["true","false"]]
,               "bottom_right_corner": [["true","false"]]
,               "bottom_left_corner": [["true","false"]]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["container","start_x","start_y","end_x","end_y","radius","outline_size","outline_red","outline_green","outline_blue","outline_alpha","fill_red","fill_green","fill_blue","fill_alpha","top_left_corner","top_right_corner","bottom_right_corner","bottom_left_corner","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawRectangleRoundedByContainer"
,       "display_name": "ImageDrawRectangleRoundedByContainer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageDrawPolygon": {
        "input": {
            "required": {
                "size": ["INT",{"default":256,"min":1,"step":1}]
,               "sides": ["INT",{"default":5,"min":3,"step":1}]
,               "rotation": ["INT",{"default":0,"max":360,"step":1}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "fill_red": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_green": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_blue": ["INT",{"default":255,"max":255,"step":1}]
,               "fill_alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["size","sides","rotation","outline_size","outline_red","outline_green","outline_blue","outline_alpha","fill_red","fill_green","fill_blue","fill_alpha","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageDrawPolygon"
,       "display_name": "ImageDrawPolygon"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageEffectsAdjustment": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "brightness": ["FLOAT",{"default":1,"step":0.01}]
,               "contrast": ["FLOAT",{"default":1,"step":0.01}]
,               "saturation": ["FLOAT",{"default":1,"step":0.01}]
,               "hue": ["FLOAT",{"default":0.5,"max":1,"step":0.01}]
,               "gamma": ["FLOAT",{"default":1,"step":0.01}]
,               "sharpness": ["FLOAT",{"default":1,"step":0.01}]
,               "red": ["FLOAT",{"default":1,"step":0.01}]
,               "green": ["FLOAT",{"default":1,"step":0.01}]
,               "blue": ["FLOAT",{"default":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["images","brightness","contrast","saturation","hue","gamma","sharpness","red","green","blue"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageEffectsAdjustment"
,       "display_name": "ImageEffectsAdjustment"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/effects"
,       "output_node": false
    }
,   "ImageEffectsGrayscale": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageEffectsGrayscale"
,       "display_name": "ImageEffectsGrayscale"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/effects"
,       "output_node": false
    }
,   "ImageEffectsNegative": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageEffectsNegative"
,       "display_name": "ImageEffectsNegative"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/effects"
,       "output_node": false
    }
,   "ImageEffectsSepia": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageEffectsSepia"
,       "display_name": "ImageEffectsSepia"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/effects"
,       "output_node": false
    }
,   "ImageEffectsLensZoomBurst": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "scale": ["FLOAT",{"default":1.5,"min":1,"step":0.01}]
,               "samples": ["INT",{"default":100,"min":1}]
,               "position_x": ["FLOAT",{"default":0.5,"max":1,"step":0.01}]
,               "position_y": ["FLOAT",{"default":0.5,"max":1,"step":0.01}]
,               "rotation": ["FLOAT",{"default":0,"min":0,"max":360}]
,               "method": [["circle","point"]]
,               "stabilization": [["true","false"]]
            }
        }
,       "input_order": {
            "required": ["images","scale","samples","position_x","position_y","rotation","method","stabilization"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageEffectsLensZoomBurst"
,       "display_name": "ImageEffectsLensZoomBurst"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/effects/lens"
,       "output_node": false
    }
,   "ImageEffectsLensChromaticAberration": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "shift": ["INT",{"default":10,"step":1}]
,               "method": [["reflect","edge","constant"]]
,               "shift_type": ["INT",{"default":1,"min":1,"max":4,"step":1}]
,               "mixing_type": ["INT",{"default":1,"min":1,"max":4,"step":1}]
,               "transpose": [["none","rotate","reflect"]]
,               "colors": [["rb","rg","gb"]]
,               "lens_curvy": ["FLOAT",{"default":1,"max":15,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["images","shift","method","shift_type","mixing_type","transpose","colors","lens_curvy"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageEffectsLensChromaticAberration"
,       "display_name": "ImageEffectsLensChromaticAberration"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/effects/lens"
,       "output_node": false
    }
,   "ImageEffectsLensBokeh": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "blades_shape": ["INT",{"default":5,"min":3}]
,               "blades_radius": ["INT",{"default":10,"min":1}]
,               "blades_rotation": ["FLOAT",{"default":0,"min":0,"max":360}]
,               "blur_size": ["INT",{"default":10,"min":1,"step":2}]
,               "blur_type": [["bilateral","stack","none"]]
,               "method": [["dilate","filter"]]
            }
        }
,       "input_order": {
            "required": ["images","blades_shape","blades_radius","blades_rotation","blur_size","blur_type","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageEffectsLensBokeh"
,       "display_name": "ImageEffectsLensBokeh"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/effects/lens"
,       "output_node": false
    }
,   "ImageEffectsLensOpticAxis": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "lens_shape": [["circle","square","rectangle","corners"]]
,               "lens_edge": [["around","symmetric"]]
,               "lens_curvy": ["FLOAT",{"default":4,"max":15,"step":0.1}]
,               "lens_zoom": ["FLOAT",{"default":2,"step":0.1}]
,               "lens_aperture": ["FLOAT",{"default":0.5,"max":10,"step":0.1}]
,               "blur_intensity": ["INT",{"default":30,"min":2,"step":2}]
            }
        }
,       "input_order": {
            "required": ["images","lens_shape","lens_edge","lens_curvy","lens_zoom","lens_aperture","blur_intensity"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "ImageEffectsLensOpticAxis"
,       "display_name": "ImageEffectsLensOpticAxis"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/effects/lens"
,       "output_node": false
    }
,   "ImageEffectsLensVignette": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "lens_shape": [["circle","rectangle"]]
,               "lens_edge": [["around","symmetric"]]
,               "lens_curvy": ["FLOAT",{"default":3,"max":15,"step":0.1}]
,               "lens_zoom": ["FLOAT",{"default":0,"step":0.1}]
,               "brightness": ["FLOAT",{"default":0.25,"max":1,"step":0.01}]
,               "saturation": ["FLOAT",{"default":0.5,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["images","lens_shape","lens_edge","lens_curvy","lens_zoom","brightness","saturation"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "ImageEffectsLensVignette"
,       "display_name": "ImageEffectsLensVignette"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/effects/lens"
,       "output_node": false
    }
,   "ImageFilterSmooth": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterSmooth"
,       "display_name": "ImageFilterSmooth"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterSmoothMore": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterSmoothMore"
,       "display_name": "ImageFilterSmoothMore"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterBlur": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size_x": ["INT",{"default":10,"min":1}]
,               "size_y": ["INT",{"default":10,"min":1}]
            }
        }
,       "input_order": {
            "required": ["images","size_x","size_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterBlur"
,       "display_name": "ImageFilterBlur"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterBoxBlur": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size_x": ["INT",{"default":10,"min":1}]
,               "size_y": ["INT",{"default":10,"min":1}]
            }
        }
,       "input_order": {
            "required": ["images","size_x","size_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterBoxBlur"
,       "display_name": "ImageFilterBoxBlur"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterGaussianBlur": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size_x": ["INT",{"default":10,"min":2,"step":2}]
,               "size_y": ["INT",{"default":10,"min":2,"step":2}]
            }
        }
,       "input_order": {
            "required": ["images","size_x","size_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterGaussianBlur"
,       "display_name": "ImageFilterGaussianBlur"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterGaussianBlurAdvanced": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size_x": ["INT",{"default":10,"min":2,"step":2}]
,               "size_y": ["INT",{"default":10,"min":2,"step":2}]
,               "sigma_x": ["INT",{"default":0}]
,               "sigma_y": ["INT",{"default":0}]
            }
        }
,       "input_order": {
            "required": ["images","size_x","size_y","sigma_x","sigma_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterGaussianBlurAdvanced"
,       "display_name": "ImageFilterGaussianBlurAdvanced"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterStackBlur": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size_x": ["INT",{"default":10,"min":1,"step":2}]
,               "size_y": ["INT",{"default":10,"min":1,"step":2}]
            }
        }
,       "input_order": {
            "required": ["images","size_x","size_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterStackBlur"
,       "display_name": "ImageFilterStackBlur"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterMedianBlur": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size": ["INT",{"default":10,"min":1,"step":2}]
            }
        }
,       "input_order": {
            "required": ["images","size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterMedianBlur"
,       "display_name": "ImageFilterMedianBlur"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterBilateralBlur": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size": ["INT",{"default":10,"min":1,"step":2}]
,               "sigma_color": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "sigma_intensity": ["FLOAT",{"default":1,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["images","size","sigma_color","sigma_intensity"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterBilateralBlur"
,       "display_name": "ImageFilterBilateralBlur"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterContour": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterContour"
,       "display_name": "ImageFilterContour"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterDetail": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterDetail"
,       "display_name": "ImageFilterDetail"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterEdgeEnhance": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterEdgeEnhance"
,       "display_name": "ImageFilterEdgeEnhance"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterEdgeEnhanceMore": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterEdgeEnhanceMore"
,       "display_name": "ImageFilterEdgeEnhanceMore"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterEmboss": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterEmboss"
,       "display_name": "ImageFilterEmboss"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterFindEdges": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterFindEdges"
,       "display_name": "ImageFilterFindEdges"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterSharpen": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterSharpen"
,       "display_name": "ImageFilterSharpen"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterRank": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size": ["INT",{"default":2,"min":0,"step":2}]
,               "rank": ["INT",{"default":1,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images","size","rank"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterRank"
,       "display_name": "ImageFilterRank"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterMin": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size": ["INT",{"default":2,"min":0,"step":2}]
            }
        }
,       "input_order": {
            "required": ["images","size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterMin"
,       "display_name": "ImageFilterMin"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterMax": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size": ["INT",{"default":2,"min":0,"step":2}]
            }
        }
,       "input_order": {
            "required": ["images","size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterMax"
,       "display_name": "ImageFilterMax"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageFilterMode": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "size": ["INT",{"default":2,"min":0,"step":2}]
            }
        }
,       "input_order": {
            "required": ["images","size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFilterMode"
,       "display_name": "ImageFilterMode"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/filter"
,       "output_node": false
    }
,   "ImageNoiseBeta": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "a": ["INT",{"default":1,"min":1}]
,               "b": ["INT",{"default":1,"min":1}]
,               "monochromatic": [["false","true"]]
,               "invert": [["false","true"]]
,               "channels": [["rgb","rgba","rg","rb","ra","gb","ga","ba","r","g","b","a"]]
            }
        }
,       "input_order": {
            "required": ["images","a","b","monochromatic","invert","channels"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageNoiseBeta"
,       "display_name": "ImageNoiseBeta"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/noise"
,       "output_node": false
    }
,   "ImageNoiseBinomial": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "n": ["INT",{"default":128,"min":1,"max":255}]
,               "p": ["FLOAT",{"default":0.5,"max":1,"step":0.01}]
,               "monochromatic": [["false","true"]]
,               "invert": [["false","true"]]
,               "channels": [["rgb","rgba","rg","rb","ra","gb","ga","ba","r","g","b","a"]]
            }
        }
,       "input_order": {
            "required": ["images","n","p","monochromatic","invert","channels"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageNoiseBinomial"
,       "display_name": "ImageNoiseBinomial"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/noise"
,       "output_node": false
    }
,   "ImageNoiseBytes": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "monochromatic": [["false","true"]]
,               "invert": [["false","true"]]
,               "channels": [["rgb","rgba","rg","rb","ra","gb","ga","ba","r","g","b","a"]]
            }
        }
,       "input_order": {
            "required": ["images","monochromatic","invert","channels"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageNoiseBytes"
,       "display_name": "ImageNoiseBytes"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/noise"
,       "output_node": false
    }
,   "ImageNoiseGaussian": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "strength": ["FLOAT",{"default":0.5,"step":0.01}]
,               "monochromatic": [["false","true"]]
,               "invert": [["false","true"]]
,               "channels": [["rgb","rgba","rg","rb","ra","gb","ga","ba","r","g","b","a"]]
            }
        }
,       "input_order": {
            "required": ["images","strength","monochromatic","invert","channels"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageNoiseGaussian"
,       "display_name": "ImageNoiseGaussian"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/noise"
,       "output_node": false
    }
,   "ImageSegmentation": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "model": [["u2net","u2netp","u2net_human_seg","u2net_cloth_seg","silueta","isnet-general-use","isnetis","modnet-p","modnet-w"]]
,               "alpha_matting": [["true","false"]]
,               "alpha_matting_foreground_threshold": ["INT",{"default":240,"max":250,"step":5}]
,               "alpha_matting_background_threshold": ["INT",{"default":20,"max":250,"step":5}]
,               "alpha_matting_erode_size": ["INT",{"default":10,"step":1}]
,               "post_process_mask": [["false","true"]]
            }
        }
,       "input_order": {
            "required": ["images","model","alpha_matting","alpha_matting_foreground_threshold","alpha_matting_background_threshold","alpha_matting_erode_size","post_process_mask"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageSegmentation"
,       "display_name": "ImageSegmentation"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/segmentation"
,       "output_node": false
    }
,   "ImageSegmentationCustom": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "model": [[]]
,               "alpha_matting": [["true","false"]]
,               "alpha_matting_foreground_threshold": ["INT",{"default":240,"max":250,"step":5}]
,               "alpha_matting_background_threshold": ["INT",{"default":20,"max":250,"step":5}]
,               "alpha_matting_erode_size": ["INT",{"default":10,"step":1}]
,               "post_process_mask": [["false","true"]]
,               "mean": ["FLOAT",{"default":0.485,"max":1,"step":0.01}]
,               "std": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "size": ["INT",{"default":1024,"step":8}]
            }
        }
,       "input_order": {
            "required": ["images","model","alpha_matting","alpha_matting_foreground_threshold","alpha_matting_background_threshold","alpha_matting_erode_size","post_process_mask","mean","std","size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageSegmentationCustom"
,       "display_name": "ImageSegmentationCustom"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/segmentation"
,       "output_node": false
    }
,   "ImageSegmentationCustomAdvanced": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "model": [[]]
,               "alpha_matting": [["true","false"]]
,               "alpha_matting_foreground_threshold": ["INT",{"default":240,"max":250,"step":5}]
,               "alpha_matting_background_threshold": ["INT",{"default":20,"max":250,"step":5}]
,               "alpha_matting_erode_size": ["INT",{"default":10,"step":1}]
,               "post_process_mask": [["false","true"]]
,               "mean_r": ["FLOAT",{"default":0.485,"max":1,"step":0.01}]
,               "mean_g": ["FLOAT",{"default":0.456,"max":1,"step":0.01}]
,               "mean_b": ["FLOAT",{"default":0.406,"max":1,"step":0.01}]
,               "std_r": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "std_g": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "std_b": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "width": ["INT",{"default":1024,"step":8}]
,               "height": ["INT",{"default":1024,"step":8}]
            }
        }
,       "input_order": {
            "required": ["images","model","alpha_matting","alpha_matting_foreground_threshold","alpha_matting_background_threshold","alpha_matting_erode_size","post_process_mask","mean_r","mean_g","mean_b","std_r","std_g","std_b","width","height"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageSegmentationCustomAdvanced"
,       "display_name": "ImageSegmentationCustomAdvanced"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/segmentation"
,       "output_node": false
    }
,   "ImageText": {
        "input": {
            "required": {
                "text": ["STRING",{"multiline":false}]
,               "font": [[]]
,               "size": ["INT",{"default":28,"min":1,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "margin_x": ["INT",{"default":0,"step":1}]
,               "margin_y": ["INT",{"default":0,"step":1}]
            }
        }
,       "input_order": {
            "required": ["text","font","size","red","green","blue","alpha","margin_x","margin_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageText"
,       "display_name": "ImageText"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageTextOutlined": {
        "input": {
            "required": {
                "text": ["STRING",{"multiline":false}]
,               "font": [[]]
,               "size": ["INT",{"default":28,"min":1,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "margin_x": ["INT",{"default":0,"step":1}]
,               "margin_y": ["INT",{"default":0,"step":1}]
            }
        }
,       "input_order": {
            "required": ["text","font","size","red","green","blue","outline_size","outline_red","outline_green","outline_blue","alpha","margin_x","margin_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTextOutlined"
,       "display_name": "ImageTextOutlined"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageTextMultiline": {
        "input": {
            "required": {
                "text": ["STRING",{"multiline":true}]
,               "font": [[]]
,               "align": [["left","center","right"]]
,               "size": ["INT",{"default":28,"min":1,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "margin_x": ["INT",{"default":0,"step":1}]
,               "margin_y": ["INT",{"default":0,"step":1}]
            }
        }
,       "input_order": {
            "required": ["text","font","align","size","red","green","blue","alpha","margin_x","margin_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTextMultiline"
,       "display_name": "ImageTextMultiline"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageTextMultilineOutlined": {
        "input": {
            "required": {
                "text": ["STRING",{"multiline":true}]
,               "font": [[]]
,               "align": [["left","center","right"]]
,               "size": ["INT",{"default":28,"min":1,"step":1}]
,               "red": ["INT",{"default":255,"max":255,"step":1}]
,               "green": ["INT",{"default":255,"max":255,"step":1}]
,               "blue": ["INT",{"default":255,"max":255,"step":1}]
,               "outline_size": ["INT",{"default":1,"step":1}]
,               "outline_red": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_green": ["INT",{"default":0,"max":255,"step":1}]
,               "outline_blue": ["INT",{"default":0,"max":255,"step":1}]
,               "alpha": ["FLOAT",{"default":1,"max":1,"step":0.01}]
,               "margin_x": ["INT",{"default":0,"step":1}]
,               "margin_y": ["INT",{"default":0,"step":1}]
            }
        }
,       "input_order": {
            "required": ["text","font","align","size","red","green","blue","outline_size","outline_red","outline_green","outline_blue","alpha","margin_x","margin_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTextMultilineOutlined"
,       "display_name": "ImageTextMultilineOutlined"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/draw"
,       "output_node": false
    }
,   "ImageTransformResizeAbsolute": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "width": ["INT",{"default":256,"min":1,"step":1}]
,               "height": ["INT",{"default":256,"min":1,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["images","width","height","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformResizeAbsolute"
,       "display_name": "ImageTransformResizeAbsolute"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
,   "ImageTransformResizeRelative": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "scale_width": ["FLOAT",{"default":1,"step":0.1}]
,               "scale_height": ["FLOAT",{"default":1,"step":0.1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["images","scale_width","scale_height","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformResizeRelative"
,       "display_name": "ImageTransformResizeRelative"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
,   "ImageTransformResizeClip": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "max_width": ["INT",{"default":1024}]
,               "max_height": ["INT",{"default":1024}]
,               "min_width": ["INT",{"default":0}]
,               "min_height": ["INT",{"default":0}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["images","max_width","max_height","min_width","min_height","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformResizeClip"
,       "display_name": "ImageTransformResizeClip"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
,   "ImageTransformCropAbsolute": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "start_x": ["INT",{"default":0,"step":1}]
,               "start_y": ["INT",{"default":0,"step":1}]
,               "end_x": ["INT",{"default":128,"step":1}]
,               "end_y": ["INT",{"default":128,"step":1}]
            }
        }
,       "input_order": {
            "required": ["images","start_x","start_y","end_x","end_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformCropAbsolute"
,       "display_name": "ImageTransformCropAbsolute"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
,   "ImageTransformCropRelative": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "start_x": ["FLOAT",{"default":0.25,"max":1,"step":0.01}]
,               "start_y": ["FLOAT",{"default":0.25,"max":1,"step":0.01}]
,               "end_x": ["FLOAT",{"default":0.75,"max":1,"step":0.01}]
,               "end_y": ["FLOAT",{"default":0.75,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["images","start_x","start_y","end_x","end_y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformCropRelative"
,       "display_name": "ImageTransformCropRelative"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
,   "ImageTransformCropCorners": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "radius": ["INT",{"default":180,"max":360,"step":1}]
,               "top_left_corner": [["true","false"]]
,               "top_right_corner": [["true","false"]]
,               "bottom_right_corner": [["true","false"]]
,               "bottom_left_corner": [["true","false"]]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["images","radius","top_left_corner","top_right_corner","bottom_right_corner","bottom_left_corner","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformCropCorners"
,       "display_name": "ImageTransformCropCorners"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
,   "ImageTransformPaddingAbsolute": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "add_width": ["INT",{"default":64,"min":0}]
,               "add_height": ["INT",{"default":64,"min":0}]
,               "method": [["reflect","edge","constant"]]
            }
        }
,       "input_order": {
            "required": ["images","add_width","add_height","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformPaddingAbsolute"
,       "display_name": "ImageTransformPaddingAbsolute"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
,   "ImageTransformPaddingRelative": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "scale_width": ["FLOAT",{"default":0.25,"step":0.1}]
,               "scale_height": ["FLOAT",{"default":0.25,"step":0.1}]
,               "method": [["reflect","edge","constant"]]
            }
        }
,       "input_order": {
            "required": ["images","scale_width","scale_height","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformPaddingRelative"
,       "display_name": "ImageTransformPaddingRelative"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
,   "ImageTransformRotate": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "angle": ["FLOAT",{"default":35,"max":360,"step":0.1}]
,               "expand": [["true","false"]]
,               "SSAA": ["INT",{"default":4,"min":1,"max":16,"step":1}]
,               "method": [["lanczos","bicubic","hamming","bilinear","box","nearest"]]
            }
        }
,       "input_order": {
            "required": ["images","angle","expand","SSAA","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformRotate"
,       "display_name": "ImageTransformRotate"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
,   "ImageTransformTranspose": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "method": [["flip_horizontally","flip_vertically","rotate_90","rotate_180","rotate_270","transpose","transverse"]]
            }
        }
,       "input_order": {
            "required": ["images","method"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageTransformTranspose"
,       "display_name": "ImageTransformTranspose"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Allor"
,       "category": "image/transform"
,       "output_node": false
    }
}