// const S1 = ... .extend({YESYES: (f) => f.Testtest.formFields(['yes', 'yes', 'yes', 'yes'], {readonly: true}),})

// const x = ({ field }) => [
//     //
//     <field.userAccessRules.UIMatrix />,
//     <field.userAccessRules.UIPreset />,
//     'foo',
//     'bar',
//     <hr />,
//     <field.foo.UISomeCustomSkin />,
//     (f) => f.Testtest.formFields(['yes', 'yes', 'yes', 'yes'], {readonly: true}),
//     <f.Testtest.YESYES />
//     'foo@UISomeCustomSkin',
// ]

// schema = {

// }.extend({YESYES: (f) => f.Testtest.formFields(['yes', 'yes', 'yes', 'yes'], {readonly: true}),})
// schema
//     .create()
//     .setPartialValue({
//         status: { id: 'Tech - New' },
//     })
//     .formReadonly()
//     .form()
//     .customCell()

// schema
//     .create()
//     .setPartialValue({
//         status: { id: 'Tech - New' },
//     })
//     .form(f => [
//         'status',// üü¢
//         'title',// üü¢
//         'description',// üü¢
//         'attachments',// üü¢
//         'resposTech',// üü¢
//         'priority',// üü¢
//         'customer',// üü¢
//         'resposCS',// üü¢
//         'testests:summary', // ‚ùå
//         f.Testtest.Summary, // ‚ùå
//         f.Testtest.formFields(['yes', 'yes', 'yes', 'yes'], {readonly: true}), // ‚ùå
//         'description', // üü¢
//         (f) => () => f.UIForm1.render(),
//     ],
//     {
//         defaultWellKnownSkin: 'cell',
//         readonly: true,
//         submitAction: (f) => table.createEvent(f), submitLabel: 'Cr√©er le ticket'
//     },
//     )
//     .asModal({
//         label: 'Cr√©er un ticket',
//         icon: 'mdiPlus',
//         title: 'Nouveau ticket',
//         look: 'success',
//     })
