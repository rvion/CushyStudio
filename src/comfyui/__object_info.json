{
    "KSampler": {
        "input": {
            "required": {
                "model": ["MODEL",{"tooltip":"The model used for denoising the input latent."}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"The random seed used for creating the noise."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"The number of steps used in the denoising process."}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01,"tooltip":"The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"],{"tooltip":"The scheduler controls how noise is gradually removed to form the image."}]
,               "positive": ["CONDITIONING",{"tooltip":"The conditioning describing the attributes you want to include in the image."}]
,               "negative": ["CONDITIONING",{"tooltip":"The conditioning describing the attributes you want to exclude from the image."}]
,               "latent_image": ["LATENT",{"tooltip":"The latent image to denoise."}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."}]
            }
        }
,       "input_order": {
            "required": ["model","seed","steps","cfg","sampler_name","scheduler","positive","negative","latent_image","denoise"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "KSampler"
,       "display_name": "KSampler"
,       "description": "Uses the provided model, positive and negative conditioning to denoise the latent image."
,       "python_module": "nodes"
,       "category": "sampling"
,       "output_node": false
,       "output_tooltips": ["The denoised latent."]
    }
,   "CheckpointLoaderSimple": {
        "input": {
            "required": {
                "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"],{"tooltip":"The name of the checkpoint (model) to load."}]
            }
        }
,       "input_order": {
            "required": ["ckpt_name"]
        }
,       "output": ["MODEL","CLIP","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP","VAE"]
,       "name": "CheckpointLoaderSimple"
,       "display_name": "Load Checkpoint"
,       "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents."
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
,       "output_tooltips": ["The model used for denoising latents.","The CLIP model used for encoding text prompts.","The VAE model used for encoding and decoding images to and from latent space."]
    }
,   "CLIPTextEncode": {
        "input": {
            "required": {
                "text": ["STRING",{"multiline":true,"dynamicPrompts":true,"tooltip":"The text to be encoded."}]
,               "clip": ["CLIP",{"tooltip":"The CLIP model used for encoding the text."}]
            }
        }
,       "input_order": {
            "required": ["text","clip"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncode"
,       "display_name": "CLIP Text Encode (Prompt)"
,       "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images."
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
,       "output_tooltips": ["A conditioning containing the embedded text used to guide the diffusion model."]
    }
,   "CLIPSetLastLayer": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "stop_at_clip_layer": ["INT",{"default":-1,"min":-24,"max":-1,"step":1}]
            }
        }
,       "input_order": {
            "required": ["clip","stop_at_clip_layer"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPSetLastLayer"
,       "display_name": "CLIP Set Last Layer"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "VAEDecode": {
        "input": {
            "required": {
                "samples": ["LATENT",{"tooltip":"The latent to be decoded."}]
,               "vae": ["VAE",{"tooltip":"The VAE model used for decoding the latent."}]
            }
        }
,       "input_order": {
            "required": ["samples","vae"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "VAEDecode"
,       "display_name": "VAE Decode"
,       "description": "Decodes latent images back into pixel space images."
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
,       "output_tooltips": ["The decoded image."]
    }
,   "VAEEncode": {
        "input": {
            "required": {
                "pixels": ["IMAGE"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["pixels","vae"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "VAEEncode"
,       "display_name": "VAE Encode"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
    }
,   "VAEEncodeForInpaint": {
        "input": {
            "required": {
                "pixels": ["IMAGE"]
,               "vae": ["VAE"]
,               "mask": ["MASK"]
,               "grow_mask_by": ["INT",{"default":6,"min":0,"max":64,"step":1}]
            }
        }
,       "input_order": {
            "required": ["pixels","vae","mask","grow_mask_by"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "VAEEncodeForInpaint"
,       "display_name": "VAE Encode (for Inpainting)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/inpaint"
,       "output_node": false
    }
,   "VAELoader": {
        "input": {
            "required": {
                "vae_name": [["vae-ft-mse-840000-ema-pruned.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["vae_name"]
        }
,       "output": ["VAE"]
,       "output_is_list": [false]
,       "output_name": ["VAE"]
,       "name": "VAELoader"
,       "display_name": "Load VAE"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "EmptyLatentImage": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"min":16,"max":16384,"step":8,"tooltip":"The width of the latent images in pixels."}]
,               "height": ["INT",{"default":512,"min":16,"max":16384,"step":8,"tooltip":"The height of the latent images in pixels."}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096,"tooltip":"The number of latent images in the batch."}]
            }
        }
,       "input_order": {
            "required": ["width","height","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "EmptyLatentImage"
,       "display_name": "Empty Latent Image"
,       "description": "Create a new batch of empty latent images to be denoised via sampling."
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
,       "output_tooltips": ["The empty latent image batch."]
    }
,   "LatentUpscale": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","bislerp"]]
,               "width": ["INT",{"default":512,"min":0,"max":16384,"step":8}]
,               "height": ["INT",{"default":512,"min":0,"max":16384,"step":8}]
,               "crop": [["disabled","center"]]
            }
        }
,       "input_order": {
            "required": ["samples","upscale_method","width","height","crop"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentUpscale"
,       "display_name": "Upscale Latent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
    }
,   "LatentUpscaleBy": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","bislerp"]]
,               "scale_by": ["FLOAT",{"default":1.5,"min":0.01,"max":8,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["samples","upscale_method","scale_by"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentUpscaleBy"
,       "display_name": "Upscale Latent By"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
    }
,   "LatentFromBatch": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "batch_index": ["INT",{"default":0,"min":0,"max":63}]
,               "length": ["INT",{"default":1,"min":1,"max":64}]
            }
        }
,       "input_order": {
            "required": ["samples","batch_index","length"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentFromBatch"
,       "display_name": "Latent From Batch"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/batch"
,       "output_node": false
    }
,   "RepeatLatentBatch": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "amount": ["INT",{"default":1,"min":1,"max":64}]
            }
        }
,       "input_order": {
            "required": ["samples","amount"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "RepeatLatentBatch"
,       "display_name": "Repeat Latent Batch"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/batch"
,       "output_node": false
    }
,   "SaveImage": {
        "input": {
            "required": {
                "images": ["IMAGE",{"tooltip":"The images to save."}]
,               "filename_prefix": ["STRING",{"default":"ComfyUI","tooltip":"The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveImage"
,       "display_name": "Save Image"
,       "description": "Saves the input images to your ComfyUI output directory."
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": true
    }
,   "PreviewImage": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "PreviewImage"
,       "display_name": "Preview Image"
,       "description": "Saves the input images to your ComfyUI output directory."
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": true
    }
,   "LoadImage": {
        "input": {
            "required": {
                "image": [["example.png"],{"image_upload":true}]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "LoadImage"
,       "display_name": "Load Image"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "LoadImageMask": {
        "input": {
            "required": {
                "image": [["example.png"],{"image_upload":true}]
,               "channel": [["alpha","red","green","blue"]]
            }
        }
,       "input_order": {
            "required": ["image","channel"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "LoadImageMask"
,       "display_name": "Load Image (as Mask)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "mask"
,       "output_node": false
    }
,   "ImageScale": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","lanczos"]]
,               "width": ["INT",{"default":512,"min":0,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":0,"max":16384,"step":1}]
,               "crop": [["disabled","center"]]
            }
        }
,       "input_order": {
            "required": ["image","upscale_method","width","height","crop"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageScale"
,       "display_name": "Upscale Image"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image/upscaling"
,       "output_node": false
    }
,   "ImageScaleBy": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","lanczos"]]
,               "scale_by": ["FLOAT",{"default":1,"min":0.01,"max":8,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image","upscale_method","scale_by"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageScaleBy"
,       "display_name": "Upscale Image By"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image/upscaling"
,       "output_node": false
    }
,   "ImageInvert": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageInvert"
,       "display_name": "Invert Image"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "ImageBatch": {
        "input": {
            "required": {
                "image1": ["IMAGE"]
,               "image2": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image1","image2"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBatch"
,       "display_name": "Batch Images"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "ImagePadForOutpaint": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "left": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "top": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "right": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "bottom": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "feathering": ["INT",{"default":40,"min":0,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","left","top","right","bottom","feathering"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "ImagePadForOutpaint"
,       "display_name": "Pad Image for Outpainting"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "EmptyImage": {
        "input": {
            "required": {
                "width": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
,               "color": ["INT",{"default":0,"min":0,"max":16777215,"step":1,"display":"color"}]
            }
        }
,       "input_order": {
            "required": ["width","height","batch_size","color"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "EmptyImage"
,       "display_name": "EmptyImage"
,       "description": ""
,       "python_module": "nodes"
,       "category": "image"
,       "output_node": false
    }
,   "ConditioningAverage": {
        "input": {
            "required": {
                "conditioning_to": ["CONDITIONING"]
,               "conditioning_from": ["CONDITIONING"]
,               "conditioning_to_strength": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning_to","conditioning_from","conditioning_to_strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningAverage"
,       "display_name": "ConditioningAverage"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningCombine": {
        "input": {
            "required": {
                "conditioning_1": ["CONDITIONING"]
,               "conditioning_2": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["conditioning_1","conditioning_2"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningCombine"
,       "display_name": "Conditioning (Combine)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningConcat": {
        "input": {
            "required": {
                "conditioning_to": ["CONDITIONING"]
,               "conditioning_from": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["conditioning_to","conditioning_from"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningConcat"
,       "display_name": "Conditioning (Concat)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningSetArea": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "width": ["INT",{"default":64,"min":64,"max":16384,"step":8}]
,               "height": ["INT",{"default":64,"min":64,"max":16384,"step":8}]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","width","height","x","y","strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetArea"
,       "display_name": "Conditioning (Set Area)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningSetAreaPercentage": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "width": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "height": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "x": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "y": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","width","height","x","y","strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetAreaPercentage"
,       "display_name": "Conditioning (Set Area with Percentage)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningSetAreaStrength": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetAreaStrength"
,       "display_name": "ConditioningSetAreaStrength"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ConditioningSetMask": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "mask": ["MASK"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "set_cond_area": [["default","mask bounds"]]
            }
        }
,       "input_order": {
            "required": ["conditioning","mask","strength","set_cond_area"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetMask"
,       "display_name": "Conditioning (Set Mask)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "KSamplerAdvanced": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "add_noise": [["enable","disable"]]
,               "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "latent_image": ["LATENT"]
,               "start_at_step": ["INT",{"default":0,"min":0,"max":10000}]
,               "end_at_step": ["INT",{"default":10000,"min":0,"max":10000}]
,               "return_with_leftover_noise": [["disable","enable"]]
            }
        }
,       "input_order": {
            "required": ["model","add_noise","noise_seed","steps","cfg","sampler_name","scheduler","positive","negative","latent_image","start_at_step","end_at_step","return_with_leftover_noise"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "KSamplerAdvanced"
,       "display_name": "KSampler (Advanced)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "sampling"
,       "output_node": false
    }
,   "SetLatentNoiseMask": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["samples","mask"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "SetLatentNoiseMask"
,       "display_name": "Set Latent Noise Mask"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/inpaint"
,       "output_node": false
    }
,   "LatentComposite": {
        "input": {
            "required": {
                "samples_to": ["LATENT"]
,               "samples_from": ["LATENT"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "feather": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
            }
        }
,       "input_order": {
            "required": ["samples_to","samples_from","x","y","feather"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentComposite"
,       "display_name": "Latent Composite"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent"
,       "output_node": false
    }
,   "LatentBlend": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
,               "blend_factor": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2","blend_factor"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentBlend"
,       "display_name": "Latent Blend"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "LatentRotate": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "rotation": [["none","90 degrees","180 degrees","270 degrees"]]
            }
        }
,       "input_order": {
            "required": ["samples","rotation"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentRotate"
,       "display_name": "Rotate Latent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/transform"
,       "output_node": false
    }
,   "LatentFlip": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "flip_method": [["x-axis: vertically","y-axis: horizontally"]]
            }
        }
,       "input_order": {
            "required": ["samples","flip_method"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentFlip"
,       "display_name": "Flip Latent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/transform"
,       "output_node": false
    }
,   "LatentCrop": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "width": ["INT",{"default":512,"min":64,"max":16384,"step":8}]
,               "height": ["INT",{"default":512,"min":64,"max":16384,"step":8}]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
            }
        }
,       "input_order": {
            "required": ["samples","width","height","x","y"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentCrop"
,       "display_name": "Crop Latent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "latent/transform"
,       "output_node": false
    }
,   "LoraLoader": {
        "input": {
            "required": {
                "model": ["MODEL",{"tooltip":"The diffusion model the LoRA will be applied to."}]
,               "clip": ["CLIP",{"tooltip":"The CLIP model the LoRA will be applied to."}]
,               "lora_name": [[],{"tooltip":"The name of the LoRA."}]
,               "strength_model": ["FLOAT",{"default":1,"min":-100,"max":100,"step":0.01,"tooltip":"How strongly to modify the diffusion model. This value can be negative."}]
,               "strength_clip": ["FLOAT",{"default":1,"min":-100,"max":100,"step":0.01,"tooltip":"How strongly to modify the CLIP model. This value can be negative."}]
            }
        }
,       "input_order": {
            "required": ["model","clip","lora_name","strength_model","strength_clip"]
        }
,       "output": ["MODEL","CLIP"]
,       "output_is_list": [false,false]
,       "output_name": ["MODEL","CLIP"]
,       "name": "LoraLoader"
,       "display_name": "Load LoRA"
,       "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together."
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
,       "output_tooltips": ["The modified diffusion model.","The modified CLIP model."]
    }
,   "CLIPLoader": {
        "input": {
            "required": {
                "clip_name": [[]]
,               "type": [["stable_diffusion","stable_cascade","sd3","stable_audio","mochi"]]
            }
        }
,       "input_order": {
            "required": ["clip_name","type"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPLoader"
,       "display_name": "Load CLIP"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders"
,       "output_node": false
    }
,   "UNETLoader": {
        "input": {
            "required": {
                "unet_name": [[]]
,               "weight_dtype": [["default","fp8_e4m3fn","fp8_e4m3fn_fast","fp8_e5m2"]]
            }
        }
,       "input_order": {
            "required": ["unet_name","weight_dtype"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "UNETLoader"
,       "display_name": "Load Diffusion Model"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders"
,       "output_node": false
    }
,   "DualCLIPLoader": {
        "input": {
            "required": {
                "clip_name1": [[]]
,               "clip_name2": [[]]
,               "type": [["sdxl","sd3","flux"]]
            }
        }
,       "input_order": {
            "required": ["clip_name1","clip_name2","type"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "DualCLIPLoader"
,       "display_name": "DualCLIPLoader"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders"
,       "output_node": false
    }
,   "CLIPVisionEncode": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["clip_vision","image"]
        }
,       "output": ["CLIP_VISION_OUTPUT"]
,       "output_is_list": [false]
,       "output_name": ["CLIP_VISION_OUTPUT"]
,       "name": "CLIPVisionEncode"
,       "display_name": "CLIP Vision Encode"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "StyleModelApply": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "style_model": ["STYLE_MODEL"]
,               "clip_vision_output": ["CLIP_VISION_OUTPUT"]
            }
        }
,       "input_order": {
            "required": ["conditioning","style_model","clip_vision_output"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "StyleModelApply"
,       "display_name": "Apply Style Model"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/style_model"
,       "output_node": false
    }
,   "unCLIPConditioning": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "clip_vision_output": ["CLIP_VISION_OUTPUT"]
,               "strength": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
,               "noise_augmentation": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","clip_vision_output","strength","noise_augmentation"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "unCLIPConditioning"
,       "display_name": "unCLIPConditioning"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning"
,       "output_node": false
    }
,   "ControlNetApply": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "control_net": ["CONTROL_NET"]
,               "image": ["IMAGE"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["conditioning","control_net","image","strength"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ControlNetApply"
,       "display_name": "Apply ControlNet (OLD)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/controlnet"
,       "output_node": false
,       "deprecated": true
    }
,   "ControlNetApplyAdvanced": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "control_net": ["CONTROL_NET"]
,               "image": ["IMAGE"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
,           "optional": {
                "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["positive","negative","control_net","image","strength","start_percent","end_percent"]
,           "optional": ["vae"]
        }
,       "output": ["CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false]
,       "output_name": ["positive","negative"]
,       "name": "ControlNetApplyAdvanced"
,       "display_name": "Apply ControlNet"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/controlnet"
,       "output_node": false
    }
,   "ControlNetLoader": {
        "input": {
            "required": {
                "control_net_name": [[]]
            }
        }
,       "input_order": {
            "required": ["control_net_name"]
        }
,       "output": ["CONTROL_NET"]
,       "output_is_list": [false]
,       "output_name": ["CONTROL_NET"]
,       "name": "ControlNetLoader"
,       "display_name": "Load ControlNet Model"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "DiffControlNetLoader": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "control_net_name": [[]]
            }
        }
,       "input_order": {
            "required": ["model","control_net_name"]
        }
,       "output": ["CONTROL_NET"]
,       "output_is_list": [false]
,       "output_name": ["CONTROL_NET"]
,       "name": "DiffControlNetLoader"
,       "display_name": "Load ControlNet Model (diff)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "StyleModelLoader": {
        "input": {
            "required": {
                "style_model_name": [[]]
            }
        }
,       "input_order": {
            "required": ["style_model_name"]
        }
,       "output": ["STYLE_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["STYLE_MODEL"]
,       "name": "StyleModelLoader"
,       "display_name": "Load Style Model"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "CLIPVisionLoader": {
        "input": {
            "required": {
                "clip_name": [[]]
            }
        }
,       "input_order": {
            "required": ["clip_name"]
        }
,       "output": ["CLIP_VISION"]
,       "output_is_list": [false]
,       "output_name": ["CLIP_VISION"]
,       "name": "CLIPVisionLoader"
,       "display_name": "Load CLIP Vision"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "VAEDecodeTiled": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "vae": ["VAE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
        }
,       "input_order": {
            "required": ["samples","vae","tile_size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "VAEDecodeTiled"
,       "display_name": "VAE Decode (Tiled)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "VAEEncodeTiled": {
        "input": {
            "required": {
                "pixels": ["IMAGE"]
,               "vae": ["VAE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
        }
,       "input_order": {
            "required": ["pixels","vae","tile_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "VAEEncodeTiled"
,       "display_name": "VAE Encode (Tiled)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "unCLIPCheckpointLoader": {
        "input": {
            "required": {
                "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["ckpt_name"]
        }
,       "output": ["MODEL","CLIP","VAE","CLIP_VISION"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["MODEL","CLIP","VAE","CLIP_VISION"]
,       "name": "unCLIPCheckpointLoader"
,       "display_name": "unCLIPCheckpointLoader"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "GLIGENLoader": {
        "input": {
            "required": {
                "gligen_name": [[]]
            }
        }
,       "input_order": {
            "required": ["gligen_name"]
        }
,       "output": ["GLIGEN"]
,       "output_is_list": [false]
,       "output_name": ["GLIGEN"]
,       "name": "GLIGENLoader"
,       "display_name": "GLIGENLoader"
,       "description": ""
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
    }
,   "GLIGENTextBoxApply": {
        "input": {
            "required": {
                "conditioning_to": ["CONDITIONING"]
,               "clip": ["CLIP"]
,               "gligen_textbox_model": ["GLIGEN"]
,               "text": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "width": ["INT",{"default":64,"min":8,"max":16384,"step":8}]
,               "height": ["INT",{"default":64,"min":8,"max":16384,"step":8}]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
            }
        }
,       "input_order": {
            "required": ["conditioning_to","clip","gligen_textbox_model","text","width","height","x","y"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "GLIGENTextBoxApply"
,       "display_name": "GLIGENTextBoxApply"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/gligen"
,       "output_node": false
    }
,   "InpaintModelConditioning": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "vae": ["VAE"]
,               "pixels": ["IMAGE"]
,               "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["positive","negative","vae","pixels","mask"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "InpaintModelConditioning"
,       "display_name": "InpaintModelConditioning"
,       "description": ""
,       "python_module": "nodes"
,       "category": "conditioning/inpaint"
,       "output_node": false
    }
,   "CheckpointLoader": {
        "input": {
            "required": {
                "config_name": [["anything_v3.yaml","v1-inference.yaml","v1-inference_clip_skip_2.yaml","v1-inference_clip_skip_2_fp16.yaml","v1-inference_fp16.yaml","v1-inpainting-inference.yaml","v2-inference-v.yaml","v2-inference-v_fp32.yaml","v2-inference.yaml","v2-inference_fp32.yaml","v2-inpainting-inference.yaml"]]
,               "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["config_name","ckpt_name"]
        }
,       "output": ["MODEL","CLIP","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP","VAE"]
,       "name": "CheckpointLoader"
,       "display_name": "Load Checkpoint With Config (DEPRECATED)"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders"
,       "output_node": false
,       "deprecated": true
    }
,   "DiffusersLoader": {
        "input": {
            "required": {
                "model_path": [[]]
            }
        }
,       "input_order": {
            "required": ["model_path"]
        }
,       "output": ["MODEL","CLIP","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP","VAE"]
,       "name": "DiffusersLoader"
,       "display_name": "DiffusersLoader"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/loaders/deprecated"
,       "output_node": false
    }
,   "LoadLatent": {
        "input": {
            "required": {
                "latent": [[]]
            }
        }
,       "input_order": {
            "required": ["latent"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LoadLatent"
,       "display_name": "LoadLatent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "SaveLatent": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "filename_prefix": ["STRING",{"default":"latents/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["samples","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveLatent"
,       "display_name": "SaveLatent"
,       "description": ""
,       "python_module": "nodes"
,       "category": "_for_testing"
,       "output_node": true
    }
,   "ConditioningZeroOut": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["conditioning"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningZeroOut"
,       "display_name": "ConditioningZeroOut"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "ConditioningSetTimestepRange": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "start": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["conditioning","start","end"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ConditioningSetTimestepRange"
,       "display_name": "ConditioningSetTimestepRange"
,       "description": ""
,       "python_module": "nodes"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "LoraLoaderModelOnly": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "lora_name": [[]]
,               "strength_model": ["FLOAT",{"default":1,"min":-100,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","lora_name","strength_model"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "LoraLoaderModelOnly"
,       "display_name": "LoraLoaderModelOnly"
,       "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together."
,       "python_module": "nodes"
,       "category": "loaders"
,       "output_node": false
,       "output_tooltips": ["The modified diffusion model.","The modified CLIP model."]
    }
,   "LatentAdd": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentAdd"
,       "display_name": "LatentAdd"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentSubtract": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentSubtract"
,       "display_name": "LatentSubtract"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentMultiply": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "multiplier": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["samples","multiplier"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentMultiply"
,       "display_name": "LatentMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentInterpolate": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
,               "ratio": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2","ratio"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentInterpolate"
,       "display_name": "LatentInterpolate"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentBatch": {
        "input": {
            "required": {
                "samples1": ["LATENT"]
,               "samples2": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples1","samples2"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentBatch"
,       "display_name": "LatentBatch"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/batch"
,       "output_node": false
    }
,   "LatentBatchSeedBehavior": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "seed_behavior": [["random","fixed"],{"default":"fixed"}]
            }
        }
,       "input_order": {
            "required": ["samples","seed_behavior"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentBatchSeedBehavior"
,       "display_name": "LatentBatchSeedBehavior"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced"
,       "output_node": false
    }
,   "LatentApplyOperation": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "operation": ["LATENT_OPERATION"]
            }
        }
,       "input_order": {
            "required": ["samples","operation"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentApplyOperation"
,       "display_name": "LatentApplyOperation"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced/operations"
,       "output_node": false
,       "experimental": true
    }
,   "LatentApplyOperationCFG": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "operation": ["LATENT_OPERATION"]
            }
        }
,       "input_order": {
            "required": ["model","operation"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "LatentApplyOperationCFG"
,       "display_name": "LatentApplyOperationCFG"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced/operations"
,       "output_node": false
,       "experimental": true
    }
,   "LatentOperationTonemapReinhard": {
        "input": {
            "required": {
                "multiplier": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["multiplier"]
        }
,       "output": ["LATENT_OPERATION"]
,       "output_is_list": [false]
,       "output_name": ["LATENT_OPERATION"]
,       "name": "LatentOperationTonemapReinhard"
,       "display_name": "LatentOperationTonemapReinhard"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced/operations"
,       "output_node": false
,       "experimental": true
    }
,   "LatentOperationSharpen": {
        "input": {
            "required": {
                "sharpen_radius": ["INT",{"default":9,"min":1,"max":31,"step":1}]
,               "sigma": ["FLOAT",{"default":1,"min":0.1,"max":10,"step":0.1}]
,               "alpha": ["FLOAT",{"default":0.1,"min":0,"max":5,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["sharpen_radius","sigma","alpha"]
        }
,       "output": ["LATENT_OPERATION"]
,       "output_is_list": [false]
,       "output_name": ["LATENT_OPERATION"]
,       "name": "LatentOperationSharpen"
,       "display_name": "LatentOperationSharpen"
,       "description": ""
,       "python_module": "comfy_extras.nodes_latent"
,       "category": "latent/advanced/operations"
,       "output_node": false
,       "experimental": true
    }
,   "HypernetworkLoader": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "hypernetwork_name": [[]]
,               "strength": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","hypernetwork_name","strength"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "HypernetworkLoader"
,       "display_name": "HypernetworkLoader"
,       "description": ""
,       "python_module": "comfy_extras.nodes_hypernetwork"
,       "category": "loaders"
,       "output_node": false
    }
,   "UpscaleModelLoader": {
        "input": {
            "required": {
                "model_name": [["RealESRGAN_x4plus.pth","RealESRGAN_x4plus_anime_6B.pth"]]
            }
        }
,       "input_order": {
            "required": ["model_name"]
        }
,       "output": ["UPSCALE_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALE_MODEL"]
,       "name": "UpscaleModelLoader"
,       "display_name": "Load Upscale Model"
,       "description": ""
,       "python_module": "comfy_extras.nodes_upscale_model"
,       "category": "loaders"
,       "output_node": false
    }
,   "ImageUpscaleWithModel": {
        "input": {
            "required": {
                "upscale_model": ["UPSCALE_MODEL"]
,               "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["upscale_model","image"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageUpscaleWithModel"
,       "display_name": "Upscale Image (using Model)"
,       "description": ""
,       "python_module": "comfy_extras.nodes_upscale_model"
,       "category": "image/upscaling"
,       "output_node": false
    }
,   "ImageBlend": {
        "input": {
            "required": {
                "image1": ["IMAGE"]
,               "image2": ["IMAGE"]
,               "blend_factor": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "blend_mode": [["normal","multiply","screen","overlay","soft_light","difference"]]
            }
        }
,       "input_order": {
            "required": ["image1","image2","blend_factor","blend_mode"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBlend"
,       "display_name": "Image Blend"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "ImageBlur": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "blur_radius": ["INT",{"default":1,"min":1,"max":31,"step":1}]
,               "sigma": ["FLOAT",{"default":1,"min":0.1,"max":10,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["image","blur_radius","sigma"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageBlur"
,       "display_name": "Image Blur"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "ImageQuantize": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "colors": ["INT",{"default":256,"min":1,"max":256,"step":1}]
,               "dither": [["none","floyd-steinberg","bayer-2","bayer-4","bayer-8","bayer-16"]]
            }
        }
,       "input_order": {
            "required": ["image","colors","dither"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageQuantize"
,       "display_name": "Image Quantize"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "ImageSharpen": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "sharpen_radius": ["INT",{"default":1,"min":1,"max":31,"step":1}]
,               "sigma": ["FLOAT",{"default":1,"min":0.1,"max":10,"step":0.01}]
,               "alpha": ["FLOAT",{"default":1,"min":0,"max":5,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image","sharpen_radius","sigma","alpha"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageSharpen"
,       "display_name": "Image Sharpen"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "ImageScaleToTotalPixels": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "upscale_method": [["nearest-exact","bilinear","area","bicubic","lanczos"]]
,               "megapixels": ["FLOAT",{"default":1,"min":0.01,"max":16,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image","upscale_method","megapixels"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageScaleToTotalPixels"
,       "display_name": "Scale Image to Total Pixels"
,       "description": ""
,       "python_module": "comfy_extras.nodes_post_processing"
,       "category": "image/upscaling"
,       "output_node": false
    }
,   "LatentCompositeMasked": {
        "input": {
            "required": {
                "destination": ["LATENT"]
,               "source": ["LATENT"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":8}]
,               "resize_source": ["BOOLEAN",{"default":false}]
            }
,           "optional": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["destination","source","x","y","resize_source"]
,           "optional": ["mask"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentCompositeMasked"
,       "display_name": "LatentCompositeMasked"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "latent"
,       "output_node": false
    }
,   "ImageCompositeMasked": {
        "input": {
            "required": {
                "destination": ["IMAGE"]
,               "source": ["IMAGE"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "resize_source": ["BOOLEAN",{"default":false}]
            }
,           "optional": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["destination","source","x","y","resize_source"]
,           "optional": ["mask"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageCompositeMasked"
,       "display_name": "ImageCompositeMasked"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "image"
,       "output_node": false
    }
,   "MaskToImage": {
        "input": {
            "required": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "MaskToImage"
,       "display_name": "Convert Mask to Image"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "ImageToMask": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "channel": [["red","green","blue","alpha"]]
            }
        }
,       "input_order": {
            "required": ["image","channel"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImageToMask"
,       "display_name": "Convert Image to Mask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "ImageColorToMask": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "color": ["INT",{"default":0,"min":0,"max":16777215,"step":1,"display":"color"}]
            }
        }
,       "input_order": {
            "required": ["image","color"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImageColorToMask"
,       "display_name": "ImageColorToMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "SolidMask": {
        "input": {
            "required": {
                "value": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "width": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["value","width","height"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SolidMask"
,       "display_name": "SolidMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "InvertMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "InvertMask"
,       "display_name": "InvertMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "CropMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "width": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["mask","x","y","width","height"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "CropMask"
,       "display_name": "CropMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "MaskComposite": {
        "input": {
            "required": {
                "destination": ["MASK"]
,               "source": ["MASK"]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "operation": [["multiply","add","subtract","and","or","xor"]]
            }
        }
,       "input_order": {
            "required": ["destination","source","x","y","operation"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "MaskComposite"
,       "display_name": "MaskComposite"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "FeatherMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "left": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "top": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "right": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "bottom": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["mask","left","top","right","bottom"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "FeatherMask"
,       "display_name": "FeatherMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "GrowMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "expand": ["INT",{"default":0,"min":-16384,"max":16384,"step":1}]
,               "tapered_corners": ["BOOLEAN",{"default":true}]
            }
        }
,       "input_order": {
            "required": ["mask","expand","tapered_corners"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "GrowMask"
,       "display_name": "GrowMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "ThresholdMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "value": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["mask","value"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ThresholdMask"
,       "display_name": "ThresholdMask"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mask"
,       "category": "mask"
,       "output_node": false
    }
,   "PorterDuffImageComposite": {
        "input": {
            "required": {
                "source": ["IMAGE"]
,               "source_alpha": ["MASK"]
,               "destination": ["IMAGE"]
,               "destination_alpha": ["MASK"]
,               "mode": [["ADD","CLEAR","DARKEN","DST","DST_ATOP","DST_IN","DST_OUT","DST_OVER","LIGHTEN","MULTIPLY","OVERLAY","SCREEN","SRC","SRC_ATOP","SRC_IN","SRC_OUT","SRC_OVER","XOR"],{"default":"DST"}]
            }
        }
,       "input_order": {
            "required": ["source","source_alpha","destination","destination_alpha","mode"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "PorterDuffImageComposite"
,       "display_name": "Porter-Duff Image Composite"
,       "description": ""
,       "python_module": "comfy_extras.nodes_compositing"
,       "category": "mask/compositing"
,       "output_node": false
    }
,   "SplitImageWithAlpha": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "SplitImageWithAlpha"
,       "display_name": "Split Image with Alpha"
,       "description": ""
,       "python_module": "comfy_extras.nodes_compositing"
,       "category": "mask/compositing"
,       "output_node": false
    }
,   "JoinImageWithAlpha": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "alpha": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["image","alpha"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "JoinImageWithAlpha"
,       "display_name": "Join Image with Alpha"
,       "description": ""
,       "python_module": "comfy_extras.nodes_compositing"
,       "category": "mask/compositing"
,       "output_node": false
    }
,   "RebatchLatents": {
        "input": {
            "required": {
                "latents": ["LATENT"]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["latents","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [true]
,       "output_name": ["LATENT"]
,       "name": "RebatchLatents"
,       "display_name": "Rebatch Latents"
,       "description": ""
,       "python_module": "comfy_extras.nodes_rebatch"
,       "category": "latent/batch"
,       "output_node": false
    }
,   "RebatchImages": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["images","batch_size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "RebatchImages"
,       "display_name": "Rebatch Images"
,       "description": ""
,       "python_module": "comfy_extras.nodes_rebatch"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ModelMergeSimple": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "ratio": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","ratio"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSimple"
,       "display_name": "ModelMergeSimple"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "ModelMergeBlocks": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "input": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "out": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","input","middle","out"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeBlocks"
,       "display_name": "ModelMergeBlocks"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "ModelMergeSubtract": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "multiplier": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","multiplier"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSubtract"
,       "display_name": "ModelMergeSubtract"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "ModelMergeAdd": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
            }
        }
,       "input_order": {
            "required": ["model1","model2"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeAdd"
,       "display_name": "ModelMergeAdd"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "CheckpointSave": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "filename_prefix": ["STRING",{"default":"checkpoints/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["model","clip","vae","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "CheckpointSave"
,       "display_name": "Save Checkpoint"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "CLIPMergeSimple": {
        "input": {
            "required": {
                "clip1": ["CLIP"]
,               "clip2": ["CLIP"]
,               "ratio": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["clip1","clip2","ratio"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPMergeSimple"
,       "display_name": "CLIPMergeSimple"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "CLIPMergeSubtract": {
        "input": {
            "required": {
                "clip1": ["CLIP"]
,               "clip2": ["CLIP"]
,               "multiplier": ["FLOAT",{"default":1,"min":-10,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["clip1","clip2","multiplier"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPMergeSubtract"
,       "display_name": "CLIPMergeSubtract"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "CLIPMergeAdd": {
        "input": {
            "required": {
                "clip1": ["CLIP"]
,               "clip2": ["CLIP"]
            }
        }
,       "input_order": {
            "required": ["clip1","clip2"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPMergeAdd"
,       "display_name": "CLIPMergeAdd"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": false
    }
,   "CLIPSave": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "filename_prefix": ["STRING",{"default":"clip/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["clip","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "CLIPSave"
,       "display_name": "CLIPSave"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "VAESave": {
        "input": {
            "required": {
                "vae": ["VAE"]
,               "filename_prefix": ["STRING",{"default":"vae/ComfyUI_vae"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["vae","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "VAESave"
,       "display_name": "VAESave"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "ModelSave": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "filename_prefix": ["STRING",{"default":"diffusion_models/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["model","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ModelSave"
,       "display_name": "ModelSave"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "TomePatchModel": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "ratio": ["FLOAT",{"default":0.3,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","ratio"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "TomePatchModel"
,       "display_name": "TomePatchModel"
,       "description": ""
,       "python_module": "comfy_extras.nodes_tomesd"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "CLIPTextEncodeSDXLRefiner": {
        "input": {
            "required": {
                "ascore": ["FLOAT",{"default":6,"min":0,"max":1000,"step":0.01}]
,               "width": ["INT",{"default":1024,"min":0,"max":16384}]
,               "height": ["INT",{"default":1024,"min":0,"max":16384}]
,               "text": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "clip": ["CLIP"]
            }
        }
,       "input_order": {
            "required": ["ascore","width","height","text","clip"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeSDXLRefiner"
,       "display_name": "CLIPTextEncodeSDXLRefiner"
,       "description": ""
,       "python_module": "comfy_extras.nodes_clip_sdxl"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "CLIPTextEncodeSDXL": {
        "input": {
            "required": {
                "width": ["INT",{"default":1024,"min":0,"max":16384}]
,               "height": ["INT",{"default":1024,"min":0,"max":16384}]
,               "crop_w": ["INT",{"default":0,"min":0,"max":16384}]
,               "crop_h": ["INT",{"default":0,"min":0,"max":16384}]
,               "target_width": ["INT",{"default":1024,"min":0,"max":16384}]
,               "target_height": ["INT",{"default":1024,"min":0,"max":16384}]
,               "text_g": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "clip": ["CLIP"]
,               "text_l": ["STRING",{"multiline":true,"dynamicPrompts":true}]
            }
        }
,       "input_order": {
            "required": ["width","height","crop_w","crop_h","target_width","target_height","text_g","clip","text_l"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeSDXL"
,       "display_name": "CLIPTextEncodeSDXL"
,       "description": ""
,       "python_module": "comfy_extras.nodes_clip_sdxl"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "Canny": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "low_threshold": ["FLOAT",{"default":0.4,"min":0.01,"max":0.99,"step":0.01}]
,               "high_threshold": ["FLOAT",{"default":0.8,"min":0.01,"max":0.99,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["image","low_threshold","high_threshold"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Canny"
,       "display_name": "Canny"
,       "description": ""
,       "python_module": "comfy_extras.nodes_canny"
,       "category": "image/preprocessors"
,       "output_node": false
    }
,   "FreeU": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "b1": ["FLOAT",{"default":1.1,"min":0,"max":10,"step":0.01}]
,               "b2": ["FLOAT",{"default":1.2,"min":0,"max":10,"step":0.01}]
,               "s1": ["FLOAT",{"default":0.9,"min":0,"max":10,"step":0.01}]
,               "s2": ["FLOAT",{"default":0.2,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","b1","b2","s1","s2"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "FreeU"
,       "display_name": "FreeU"
,       "description": ""
,       "python_module": "comfy_extras.nodes_freelunch"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "FreeU_V2": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "b1": ["FLOAT",{"default":1.3,"min":0,"max":10,"step":0.01}]
,               "b2": ["FLOAT",{"default":1.4,"min":0,"max":10,"step":0.01}]
,               "s1": ["FLOAT",{"default":0.9,"min":0,"max":10,"step":0.01}]
,               "s2": ["FLOAT",{"default":0.2,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","b1","b2","s1","s2"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "FreeU_V2"
,       "display_name": "FreeU_V2"
,       "description": ""
,       "python_module": "comfy_extras.nodes_freelunch"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "SamplerCustom": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "add_noise": ["BOOLEAN",{"default":true}]
,               "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "sampler": ["SAMPLER"]
,               "sigmas": ["SIGMAS"]
,               "latent_image": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["model","add_noise","noise_seed","cfg","positive","negative","sampler","sigmas","latent_image"]
        }
,       "output": ["LATENT","LATENT"]
,       "output_is_list": [false,false]
,       "output_name": ["output","denoised_output"]
,       "name": "SamplerCustom"
,       "display_name": "SamplerCustom"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling"
,       "output_node": false
    }
,   "BasicScheduler": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","scheduler","steps","denoise"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "BasicScheduler"
,       "display_name": "BasicScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "KarrasScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "sigma_max": ["FLOAT",{"default":14.614642,"min":0,"max":5000,"step":0.01,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.0291675,"min":0,"max":5000,"step":0.01,"round":false}]
,               "rho": ["FLOAT",{"default":7,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","sigma_max","sigma_min","rho"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "KarrasScheduler"
,       "display_name": "KarrasScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "ExponentialScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "sigma_max": ["FLOAT",{"default":14.614642,"min":0,"max":5000,"step":0.01,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.0291675,"min":0,"max":5000,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","sigma_max","sigma_min"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "ExponentialScheduler"
,       "display_name": "ExponentialScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "PolyexponentialScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "sigma_max": ["FLOAT",{"default":14.614642,"min":0,"max":5000,"step":0.01,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.0291675,"min":0,"max":5000,"step":0.01,"round":false}]
,               "rho": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","sigma_max","sigma_min","rho"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "PolyexponentialScheduler"
,       "display_name": "PolyexponentialScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "LaplaceScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "sigma_max": ["FLOAT",{"default":14.614642,"min":0,"max":5000,"step":0.01,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.0291675,"min":0,"max":5000,"step":0.01,"round":false}]
,               "mu": ["FLOAT",{"default":0,"min":-10,"max":10,"step":0.1,"round":false}]
,               "beta": ["FLOAT",{"default":0.5,"min":0,"max":10,"step":0.1,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","sigma_max","sigma_min","mu","beta"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "LaplaceScheduler"
,       "display_name": "LaplaceScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "VPScheduler": {
        "input": {
            "required": {
                "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "beta_d": ["FLOAT",{"default":19.9,"min":0,"max":5000,"step":0.01,"round":false}]
,               "beta_min": ["FLOAT",{"default":0.1,"min":0,"max":5000,"step":0.01,"round":false}]
,               "eps_s": ["FLOAT",{"default":0.001,"min":0,"max":1,"step":0.0001,"round":false}]
            }
        }
,       "input_order": {
            "required": ["steps","beta_d","beta_min","eps_s"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "VPScheduler"
,       "display_name": "VPScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "BetaSamplingScheduler": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "alpha": ["FLOAT",{"default":0.6,"min":0,"max":50,"step":0.01,"round":false}]
,               "beta": ["FLOAT",{"default":0.6,"min":0,"max":50,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["model","steps","alpha","beta"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "BetaSamplingScheduler"
,       "display_name": "BetaSamplingScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "SDTurboScheduler": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "steps": ["INT",{"default":1,"min":1,"max":10}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","steps","denoise"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "SDTurboScheduler"
,       "display_name": "SDTurboScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "KSamplerSelect": {
        "input": {
            "required": {
                "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
            }
        }
,       "input_order": {
            "required": ["sampler_name"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "KSamplerSelect"
,       "display_name": "KSamplerSelect"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerEulerAncestral": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerEulerAncestral"
,       "display_name": "SamplerEulerAncestral"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerEulerAncestralCFGPP": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerEulerAncestralCFGPP"
,       "display_name": "SamplerEulerAncestralCFG++"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerLMS": {
        "input": {
            "required": {
                "order": ["INT",{"default":4,"min":1,"max":100}]
            }
        }
,       "input_order": {
            "required": ["order"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerLMS"
,       "display_name": "SamplerLMS"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMPP_3M_SDE": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "noise_device": [["gpu","cpu"]]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise","noise_device"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMPP_3M_SDE"
,       "display_name": "SamplerDPMPP_3M_SDE"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMPP_2M_SDE": {
        "input": {
            "required": {
                "solver_type": [["midpoint","heun"]]
,               "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "noise_device": [["gpu","cpu"]]
            }
        }
,       "input_order": {
            "required": ["solver_type","eta","s_noise","noise_device"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMPP_2M_SDE"
,       "display_name": "SamplerDPMPP_2M_SDE"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMPP_SDE": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "r": ["FLOAT",{"default":0.5,"min":0,"max":100,"step":0.01,"round":false}]
,               "noise_device": [["gpu","cpu"]]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise","r","noise_device"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMPP_SDE"
,       "display_name": "SamplerDPMPP_SDE"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMPP_2S_Ancestral": {
        "input": {
            "required": {
                "eta": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["eta","s_noise"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMPP_2S_Ancestral"
,       "display_name": "SamplerDPMPP_2S_Ancestral"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerDPMAdaptative": {
        "input": {
            "required": {
                "order": ["INT",{"default":3,"min":2,"max":3}]
,               "rtol": ["FLOAT",{"default":0.05,"min":0,"max":100,"step":0.01,"round":false}]
,               "atol": ["FLOAT",{"default":0.0078,"min":0,"max":100,"step":0.01,"round":false}]
,               "h_init": ["FLOAT",{"default":0.05,"min":0,"max":100,"step":0.01,"round":false}]
,               "pcoeff": ["FLOAT",{"default":0,"min":0,"max":100,"step":0.01,"round":false}]
,               "icoeff": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
,               "dcoeff": ["FLOAT",{"default":0,"min":0,"max":100,"step":0.01,"round":false}]
,               "accept_safety": ["FLOAT",{"default":0.81,"min":0,"max":100,"step":0.01,"round":false}]
,               "eta": ["FLOAT",{"default":0,"min":0,"max":100,"step":0.01,"round":false}]
,               "s_noise": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01,"round":false}]
            }
        }
,       "input_order": {
            "required": ["order","rtol","atol","h_init","pcoeff","icoeff","dcoeff","accept_safety","eta","s_noise"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerDPMAdaptative"
,       "display_name": "SamplerDPMAdaptative"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SplitSigmas": {
        "input": {
            "required": {
                "sigmas": ["SIGMAS"]
,               "step": ["INT",{"default":0,"min":0,"max":10000}]
            }
        }
,       "input_order": {
            "required": ["sigmas","step"]
        }
,       "output": ["SIGMAS","SIGMAS"]
,       "output_is_list": [false,false]
,       "output_name": ["high_sigmas","low_sigmas"]
,       "name": "SplitSigmas"
,       "display_name": "SplitSigmas"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/sigmas"
,       "output_node": false
    }
,   "SplitSigmasDenoise": {
        "input": {
            "required": {
                "sigmas": ["SIGMAS"]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["sigmas","denoise"]
        }
,       "output": ["SIGMAS","SIGMAS"]
,       "output_is_list": [false,false]
,       "output_name": ["high_sigmas","low_sigmas"]
,       "name": "SplitSigmasDenoise"
,       "display_name": "SplitSigmasDenoise"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/sigmas"
,       "output_node": false
    }
,   "FlipSigmas": {
        "input": {
            "required": {
                "sigmas": ["SIGMAS"]
            }
        }
,       "input_order": {
            "required": ["sigmas"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "FlipSigmas"
,       "display_name": "FlipSigmas"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/sigmas"
,       "output_node": false
    }
,   "CFGGuider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","positive","negative","cfg"]
        }
,       "output": ["GUIDER"]
,       "output_is_list": [false]
,       "output_name": ["GUIDER"]
,       "name": "CFGGuider"
,       "display_name": "CFGGuider"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/guiders"
,       "output_node": false
    }
,   "DualCFGGuider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "cond1": ["CONDITIONING"]
,               "cond2": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "cfg_conds": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "cfg_cond2_negative": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","cond1","cond2","negative","cfg_conds","cfg_cond2_negative"]
        }
,       "output": ["GUIDER"]
,       "output_is_list": [false]
,       "output_name": ["GUIDER"]
,       "name": "DualCFGGuider"
,       "display_name": "DualCFGGuider"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/guiders"
,       "output_node": false
    }
,   "BasicGuider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "conditioning": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["model","conditioning"]
        }
,       "output": ["GUIDER"]
,       "output_is_list": [false]
,       "output_name": ["GUIDER"]
,       "name": "BasicGuider"
,       "display_name": "BasicGuider"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/guiders"
,       "output_node": false
    }
,   "RandomNoise": {
        "input": {
            "required": {
                "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["noise_seed"]
        }
,       "output": ["NOISE"]
,       "output_is_list": [false]
,       "output_name": ["NOISE"]
,       "name": "RandomNoise"
,       "display_name": "RandomNoise"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/noise"
,       "output_node": false
    }
,   "DisableNoise": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["NOISE"]
,       "output_is_list": [false]
,       "output_name": ["NOISE"]
,       "name": "DisableNoise"
,       "display_name": "DisableNoise"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling/noise"
,       "output_node": false
    }
,   "AddNoise": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "noise": ["NOISE"]
,               "sigmas": ["SIGMAS"]
,               "latent_image": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["model","noise","sigmas","latent_image"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "AddNoise"
,       "display_name": "AddNoise"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "_for_testing/custom_sampling/noise"
,       "output_node": false
    }
,   "SamplerCustomAdvanced": {
        "input": {
            "required": {
                "noise": ["NOISE"]
,               "guider": ["GUIDER"]
,               "sampler": ["SAMPLER"]
,               "sigmas": ["SIGMAS"]
,               "latent_image": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["noise","guider","sampler","sigmas","latent_image"]
        }
,       "output": ["LATENT","LATENT"]
,       "output_is_list": [false,false]
,       "output_name": ["output","denoised_output"]
,       "name": "SamplerCustomAdvanced"
,       "display_name": "SamplerCustomAdvanced"
,       "description": ""
,       "python_module": "comfy_extras.nodes_custom_sampler"
,       "category": "sampling/custom_sampling"
,       "output_node": false
    }
,   "HyperTile": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "tile_size": ["INT",{"default":256,"min":1,"max":2048}]
,               "swap_size": ["INT",{"default":2,"min":1,"max":128}]
,               "max_depth": ["INT",{"default":0,"min":0,"max":10}]
,               "scale_depth": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["model","tile_size","swap_size","max_depth","scale_depth"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "HyperTile"
,       "display_name": "HyperTile"
,       "description": ""
,       "python_module": "comfy_extras.nodes_hypertile"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "ModelSamplingDiscrete": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "sampling": [["eps","v_prediction","lcm","x0"]]
,               "zsnr": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["model","sampling","zsnr"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingDiscrete"
,       "display_name": "ModelSamplingDiscrete"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingContinuousEDM": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "sampling": [["v_prediction","edm_playground_v2.5","eps"]]
,               "sigma_max": ["FLOAT",{"default":120,"min":0,"max":1000,"step":0.001,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.002,"min":0,"max":1000,"step":0.001,"round":false}]
            }
        }
,       "input_order": {
            "required": ["model","sampling","sigma_max","sigma_min"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingContinuousEDM"
,       "display_name": "ModelSamplingContinuousEDM"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingContinuousV": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "sampling": [["v_prediction"]]
,               "sigma_max": ["FLOAT",{"default":500,"min":0,"max":1000,"step":0.001,"round":false}]
,               "sigma_min": ["FLOAT",{"default":0.03,"min":0,"max":1000,"step":0.001,"round":false}]
            }
        }
,       "input_order": {
            "required": ["model","sampling","sigma_max","sigma_min"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingContinuousV"
,       "display_name": "ModelSamplingContinuousV"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingStableCascade": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "shift": ["FLOAT",{"default":2,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","shift"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingStableCascade"
,       "display_name": "ModelSamplingStableCascade"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingSD3": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "shift": ["FLOAT",{"default":3,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","shift"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingSD3"
,       "display_name": "ModelSamplingSD3"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingAuraFlow": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "shift": ["FLOAT",{"default":1.73,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","shift"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingAuraFlow"
,       "display_name": "ModelSamplingAuraFlow"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "ModelSamplingFlux": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "max_shift": ["FLOAT",{"default":1.15,"min":0,"max":100,"step":0.01}]
,               "base_shift": ["FLOAT",{"default":0.5,"min":0,"max":100,"step":0.01}]
,               "width": ["INT",{"default":1024,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":1024,"min":16,"max":16384,"step":8}]
            }
        }
,       "input_order": {
            "required": ["model","max_shift","base_shift","width","height"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelSamplingFlux"
,       "display_name": "ModelSamplingFlux"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "RescaleCFG": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "multiplier": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","multiplier"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "RescaleCFG"
,       "display_name": "RescaleCFG"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_advanced"
,       "category": "advanced/model"
,       "output_node": false
    }
,   "PatchModelAddDownscale": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "block_number": ["INT",{"default":3,"min":1,"max":32,"step":1}]
,               "downscale_factor": ["FLOAT",{"default":2,"min":0.1,"max":9,"step":0.001}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":0.35,"min":0,"max":1,"step":0.001}]
,               "downscale_after_skip": ["BOOLEAN",{"default":true}]
,               "downscale_method": [["bicubic","nearest-exact","bilinear","area","bislerp"]]
,               "upscale_method": [["bicubic","nearest-exact","bilinear","area","bislerp"]]
            }
        }
,       "input_order": {
            "required": ["model","block_number","downscale_factor","start_percent","end_percent","downscale_after_skip","downscale_method","upscale_method"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "PatchModelAddDownscale"
,       "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_downscale"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "ImageCrop": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "width": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "height": ["INT",{"default":512,"min":1,"max":16384,"step":1}]
,               "x": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "y": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","width","height","x","y"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageCrop"
,       "display_name": "Image Crop"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/transform"
,       "output_node": false
    }
,   "RepeatImageBatch": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "amount": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["image","amount"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "RepeatImageBatch"
,       "display_name": "RepeatImageBatch"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/batch"
,       "output_node": false
    }
,   "ImageFromBatch": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "batch_index": ["INT",{"default":0,"min":0,"max":4095}]
,               "length": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["image","batch_index","length"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageFromBatch"
,       "display_name": "ImageFromBatch"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/batch"
,       "output_node": false
    }
,   "SaveAnimatedWEBP": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "filename_prefix": ["STRING",{"default":"ComfyUI"}]
,               "fps": ["FLOAT",{"default":6,"min":0.01,"max":1000,"step":0.01}]
,               "lossless": ["BOOLEAN",{"default":true}]
,               "quality": ["INT",{"default":80,"min":0,"max":100}]
,               "method": [["default","fastest","slowest"]]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","filename_prefix","fps","lossless","quality","method"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveAnimatedWEBP"
,       "display_name": "SaveAnimatedWEBP"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/animation"
,       "output_node": true
    }
,   "SaveAnimatedPNG": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "filename_prefix": ["STRING",{"default":"ComfyUI"}]
,               "fps": ["FLOAT",{"default":6,"min":0.01,"max":1000,"step":0.01}]
,               "compress_level": ["INT",{"default":4,"min":0,"max":9}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","filename_prefix","fps","compress_level"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveAnimatedPNG"
,       "display_name": "SaveAnimatedPNG"
,       "description": ""
,       "python_module": "comfy_extras.nodes_images"
,       "category": "image/animation"
,       "output_node": true
    }
,   "ImageOnlyCheckpointLoader": {
        "input": {
            "required": {
                "ckpt_name": [["AOM3A3_orangemixs.safetensors","photon_v1.safetensors"]]
            }
        }
,       "input_order": {
            "required": ["ckpt_name"]
        }
,       "output": ["MODEL","CLIP_VISION","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["MODEL","CLIP_VISION","VAE"]
,       "name": "ImageOnlyCheckpointLoader"
,       "display_name": "Image Only Checkpoint Loader (img2vid model)"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "loaders/video_models"
,       "output_node": false
    }
,   "SVD_img2vid_Conditioning": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "init_image": ["IMAGE"]
,               "vae": ["VAE"]
,               "width": ["INT",{"default":1024,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":576,"min":16,"max":16384,"step":8}]
,               "video_frames": ["INT",{"default":14,"min":1,"max":4096}]
,               "motion_bucket_id": ["INT",{"default":127,"min":1,"max":1023}]
,               "fps": ["INT",{"default":6,"min":1,"max":1024}]
,               "augmentation_level": ["FLOAT",{"default":0,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["clip_vision","init_image","vae","width","height","video_frames","motion_bucket_id","fps","augmentation_level"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "SVD_img2vid_Conditioning"
,       "display_name": "SVD_img2vid_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "conditioning/video_models"
,       "output_node": false
    }
,   "VideoLinearCFGGuidance": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "min_cfg": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.5,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","min_cfg"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "VideoLinearCFGGuidance"
,       "display_name": "VideoLinearCFGGuidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "sampling/video_models"
,       "output_node": false
    }
,   "VideoTriangleCFGGuidance": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "min_cfg": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.5,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","min_cfg"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "VideoTriangleCFGGuidance"
,       "display_name": "VideoTriangleCFGGuidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "sampling/video_models"
,       "output_node": false
    }
,   "ImageOnlyCheckpointSave": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip_vision": ["CLIP_VISION"]
,               "vae": ["VAE"]
,               "filename_prefix": ["STRING",{"default":"checkpoints/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["model","clip_vision","vae","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImageOnlyCheckpointSave"
,       "display_name": "ImageOnlyCheckpointSave"
,       "description": ""
,       "python_module": "comfy_extras.nodes_video_model"
,       "category": "advanced/model_merging"
,       "output_node": true
    }
,   "SelfAttentionGuidance": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "scale": ["FLOAT",{"default":0.5,"min":-2,"max":5,"step":0.01}]
,               "blur_sigma": ["FLOAT",{"default":2,"min":0,"max":10,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["model","scale","blur_sigma"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "SelfAttentionGuidance"
,       "display_name": "Self-Attention Guidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sag"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "PerpNeg": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "empty_conditioning": ["CONDITIONING"]
,               "neg_scale": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","empty_conditioning","neg_scale"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "PerpNeg"
,       "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)"
,       "description": ""
,       "python_module": "comfy_extras.nodes_perpneg"
,       "category": "_for_testing"
,       "output_node": false
,       "deprecated": true
    }
,   "PerpNegGuider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "empty_conditioning": ["CONDITIONING"]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"step":0.1,"round":0.01}]
,               "neg_scale": ["FLOAT",{"default":1,"min":0,"max":100,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","positive","negative","empty_conditioning","cfg","neg_scale"]
        }
,       "output": ["GUIDER"]
,       "output_is_list": [false]
,       "output_name": ["GUIDER"]
,       "name": "PerpNegGuider"
,       "display_name": "PerpNegGuider"
,       "description": ""
,       "python_module": "comfy_extras.nodes_perpneg"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "StableZero123_Conditioning": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "init_image": ["IMAGE"]
,               "vae": ["VAE"]
,               "width": ["INT",{"default":256,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":256,"min":16,"max":16384,"step":8}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
,               "elevation": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
,               "azimuth": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
            }
        }
,       "input_order": {
            "required": ["clip_vision","init_image","vae","width","height","batch_size","elevation","azimuth"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "StableZero123_Conditioning"
,       "display_name": "StableZero123_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable3d"
,       "category": "conditioning/3d_models"
,       "output_node": false
    }
,   "StableZero123_Conditioning_Batched": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "init_image": ["IMAGE"]
,               "vae": ["VAE"]
,               "width": ["INT",{"default":256,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":256,"min":16,"max":16384,"step":8}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
,               "elevation": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
,               "azimuth": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
,               "elevation_batch_increment": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
,               "azimuth_batch_increment": ["FLOAT",{"default":0,"min":-180,"max":180,"step":0.1,"round":false}]
            }
        }
,       "input_order": {
            "required": ["clip_vision","init_image","vae","width","height","batch_size","elevation","azimuth","elevation_batch_increment","azimuth_batch_increment"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "StableZero123_Conditioning_Batched"
,       "display_name": "StableZero123_Conditioning_Batched"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable3d"
,       "category": "conditioning/3d_models"
,       "output_node": false
    }
,   "SV3D_Conditioning": {
        "input": {
            "required": {
                "clip_vision": ["CLIP_VISION"]
,               "init_image": ["IMAGE"]
,               "vae": ["VAE"]
,               "width": ["INT",{"default":576,"min":16,"max":16384,"step":8}]
,               "height": ["INT",{"default":576,"min":16,"max":16384,"step":8}]
,               "video_frames": ["INT",{"default":21,"min":1,"max":4096}]
,               "elevation": ["FLOAT",{"default":0,"min":-90,"max":90,"step":0.1,"round":false}]
            }
        }
,       "input_order": {
            "required": ["clip_vision","init_image","vae","width","height","video_frames","elevation"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "SV3D_Conditioning"
,       "display_name": "SV3D_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable3d"
,       "category": "conditioning/3d_models"
,       "output_node": false
    }
,   "SD_4XUpscale_Conditioning": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "scale_ratio": ["FLOAT",{"default":4,"min":0,"max":10,"step":0.01}]
,               "noise_augmentation": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["images","positive","negative","scale_ratio","noise_augmentation"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "SD_4XUpscale_Conditioning"
,       "display_name": "SD_4XUpscale_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sdupscale"
,       "category": "conditioning/upscale_diffusion"
,       "output_node": false
    }
,   "PhotoMakerLoader": {
        "input": {
            "required": {
                "photomaker_model_name": [[]]
            }
        }
,       "input_order": {
            "required": ["photomaker_model_name"]
        }
,       "output": ["PHOTOMAKER"]
,       "output_is_list": [false]
,       "output_name": ["PHOTOMAKER"]
,       "name": "PhotoMakerLoader"
,       "display_name": "PhotoMakerLoader"
,       "description": ""
,       "python_module": "comfy_extras.nodes_photomaker"
,       "category": "_for_testing/photomaker"
,       "output_node": false
    }
,   "PhotoMakerEncode": {
        "input": {
            "required": {
                "photomaker": ["PHOTOMAKER"]
,               "image": ["IMAGE"]
,               "clip": ["CLIP"]
,               "text": ["STRING",{"multiline":true,"dynamicPrompts":true,"default":"photograph of photomaker"}]
            }
        }
,       "input_order": {
            "required": ["photomaker","image","clip","text"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "PhotoMakerEncode"
,       "display_name": "PhotoMakerEncode"
,       "description": ""
,       "python_module": "comfy_extras.nodes_photomaker"
,       "category": "_for_testing/photomaker"
,       "output_node": false
    }
,   "CLIPTextEncodeControlnet": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "conditioning": ["CONDITIONING"]
,               "text": ["STRING",{"multiline":true,"dynamicPrompts":true}]
            }
        }
,       "input_order": {
            "required": ["clip","conditioning","text"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeControlnet"
,       "display_name": "CLIPTextEncodeControlnet"
,       "description": ""
,       "python_module": "comfy_extras.nodes_cond"
,       "category": "_for_testing/conditioning"
,       "output_node": false
    }
,   "Morphology": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "operation": [["erode","dilate","open","close","gradient","bottom_hat","top_hat"]]
,               "kernel_size": ["INT",{"default":3,"min":3,"max":999,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","operation","kernel_size"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "Morphology"
,       "display_name": "ImageMorphology"
,       "description": ""
,       "python_module": "comfy_extras.nodes_morphology"
,       "category": "image/postprocessing"
,       "output_node": false
    }
,   "StableCascade_EmptyLatentImage": {
        "input": {
            "required": {
                "width": ["INT",{"default":1024,"min":256,"max":16384,"step":8}]
,               "height": ["INT",{"default":1024,"min":256,"max":16384,"step":8}]
,               "compression": ["INT",{"default":42,"min":4,"max":128,"step":1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["width","height","compression","batch_size"]
        }
,       "output": ["LATENT","LATENT"]
,       "output_is_list": [false,false]
,       "output_name": ["stage_c","stage_b"]
,       "name": "StableCascade_EmptyLatentImage"
,       "display_name": "StableCascade_EmptyLatentImage"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable_cascade"
,       "category": "latent/stable_cascade"
,       "output_node": false
    }
,   "StableCascade_StageB_Conditioning": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "stage_c": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["conditioning","stage_c"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "StableCascade_StageB_Conditioning"
,       "display_name": "StableCascade_StageB_Conditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable_cascade"
,       "category": "conditioning/stable_cascade"
,       "output_node": false
    }
,   "StableCascade_StageC_VAEEncode": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "vae": ["VAE"]
,               "compression": ["INT",{"default":42,"min":4,"max":128,"step":1}]
            }
        }
,       "input_order": {
            "required": ["image","vae","compression"]
        }
,       "output": ["LATENT","LATENT"]
,       "output_is_list": [false,false]
,       "output_name": ["stage_c","stage_b"]
,       "name": "StableCascade_StageC_VAEEncode"
,       "display_name": "StableCascade_StageC_VAEEncode"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable_cascade"
,       "category": "latent/stable_cascade"
,       "output_node": false
    }
,   "StableCascade_SuperResolutionControlnet": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["image","vae"]
        }
,       "output": ["IMAGE","LATENT","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["controlnet_input","stage_c","stage_b"]
,       "name": "StableCascade_SuperResolutionControlnet"
,       "display_name": "StableCascade_SuperResolutionControlnet"
,       "description": ""
,       "python_module": "comfy_extras.nodes_stable_cascade"
,       "category": "_for_testing/stable_cascade"
,       "output_node": false
,       "experimental": true
    }
,   "DifferentialDiffusion": {
        "input": {
            "required": {
                "model": ["MODEL"]
            }
        }
,       "input_order": {
            "required": ["model"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "DifferentialDiffusion"
,       "display_name": "Differential Diffusion"
,       "description": ""
,       "python_module": "comfy_extras.nodes_differential_diffusion"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "InstructPixToPixConditioning": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "vae": ["VAE"]
,               "pixels": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["positive","negative","vae","pixels"]
        }
,       "output": ["CONDITIONING","CONDITIONING","LATENT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["positive","negative","latent"]
,       "name": "InstructPixToPixConditioning"
,       "display_name": "InstructPixToPixConditioning"
,       "description": ""
,       "python_module": "comfy_extras.nodes_ip2p"
,       "category": "conditioning/instructpix2pix"
,       "output_node": false
    }
,   "ModelMergeSD1": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "time_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "label_emb.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "out.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","time_embed.","label_emb.","input_blocks.0.","input_blocks.1.","input_blocks.2.","input_blocks.3.","input_blocks.4.","input_blocks.5.","input_blocks.6.","input_blocks.7.","input_blocks.8.","input_blocks.9.","input_blocks.10.","input_blocks.11.","middle_block.0.","middle_block.1.","middle_block.2.","output_blocks.0.","output_blocks.1.","output_blocks.2.","output_blocks.3.","output_blocks.4.","output_blocks.5.","output_blocks.6.","output_blocks.7.","output_blocks.8.","output_blocks.9.","output_blocks.10.","output_blocks.11.","out."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSD1"
,       "display_name": "ModelMergeSD1"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeSD2": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "time_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "label_emb.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "out.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","time_embed.","label_emb.","input_blocks.0.","input_blocks.1.","input_blocks.2.","input_blocks.3.","input_blocks.4.","input_blocks.5.","input_blocks.6.","input_blocks.7.","input_blocks.8.","input_blocks.9.","input_blocks.10.","input_blocks.11.","middle_block.0.","middle_block.1.","middle_block.2.","output_blocks.0.","output_blocks.1.","output_blocks.2.","output_blocks.3.","output_blocks.4.","output_blocks.5.","output_blocks.6.","output_blocks.7.","output_blocks.8.","output_blocks.9.","output_blocks.10.","output_blocks.11.","out."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSD2"
,       "display_name": "ModelMergeSD2"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeSDXL": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "time_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "label_emb.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.0": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.1": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.2": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.3": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.4": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.5": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.6": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.7": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "input_blocks.8": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.0": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.1": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "middle_block.2": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.0": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.1": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.2": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.3": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.4": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.5": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.6": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.7": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "output_blocks.8": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "out.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","time_embed.","label_emb.","input_blocks.0","input_blocks.1","input_blocks.2","input_blocks.3","input_blocks.4","input_blocks.5","input_blocks.6","input_blocks.7","input_blocks.8","middle_block.0","middle_block.1","middle_block.2","output_blocks.0","output_blocks.1","output_blocks.2","output_blocks.3","output_blocks.4","output_blocks.5","output_blocks.6","output_blocks.7","output_blocks.8","out."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSDXL"
,       "display_name": "ModelMergeSDXL"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeSD3_2B": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "pos_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "x_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "context_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "y_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "t_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.12.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.13.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.14.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.15.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.16.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.17.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.18.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.19.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.20.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.21.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.22.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.23.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "final_layer.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","pos_embed.","x_embedder.","context_embedder.","y_embedder.","t_embedder.","joint_blocks.0.","joint_blocks.1.","joint_blocks.2.","joint_blocks.3.","joint_blocks.4.","joint_blocks.5.","joint_blocks.6.","joint_blocks.7.","joint_blocks.8.","joint_blocks.9.","joint_blocks.10.","joint_blocks.11.","joint_blocks.12.","joint_blocks.13.","joint_blocks.14.","joint_blocks.15.","joint_blocks.16.","joint_blocks.17.","joint_blocks.18.","joint_blocks.19.","joint_blocks.20.","joint_blocks.21.","joint_blocks.22.","joint_blocks.23.","final_layer."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSD3_2B"
,       "display_name": "ModelMergeSD3_2B"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeFlux1": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "img_in.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "time_in.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "guidance_in": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "vector_in.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "txt_in.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.12.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.13.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.14.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.15.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.16.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.17.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "double_blocks.18.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.12.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.13.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.14.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.15.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.16.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.17.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.18.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.19.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.20.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.21.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.22.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.23.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.24.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.25.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.26.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.27.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.28.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.29.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.30.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.31.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.32.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.33.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.34.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.35.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.36.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "single_blocks.37.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "final_layer.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","img_in.","time_in.","guidance_in","vector_in.","txt_in.","double_blocks.0.","double_blocks.1.","double_blocks.2.","double_blocks.3.","double_blocks.4.","double_blocks.5.","double_blocks.6.","double_blocks.7.","double_blocks.8.","double_blocks.9.","double_blocks.10.","double_blocks.11.","double_blocks.12.","double_blocks.13.","double_blocks.14.","double_blocks.15.","double_blocks.16.","double_blocks.17.","double_blocks.18.","single_blocks.0.","single_blocks.1.","single_blocks.2.","single_blocks.3.","single_blocks.4.","single_blocks.5.","single_blocks.6.","single_blocks.7.","single_blocks.8.","single_blocks.9.","single_blocks.10.","single_blocks.11.","single_blocks.12.","single_blocks.13.","single_blocks.14.","single_blocks.15.","single_blocks.16.","single_blocks.17.","single_blocks.18.","single_blocks.19.","single_blocks.20.","single_blocks.21.","single_blocks.22.","single_blocks.23.","single_blocks.24.","single_blocks.25.","single_blocks.26.","single_blocks.27.","single_blocks.28.","single_blocks.29.","single_blocks.30.","single_blocks.31.","single_blocks.32.","single_blocks.33.","single_blocks.34.","single_blocks.35.","single_blocks.36.","single_blocks.37.","final_layer."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeFlux1"
,       "display_name": "ModelMergeFlux1"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "ModelMergeSD35_Large": {
        "input": {
            "required": {
                "model1": ["MODEL"]
,               "model2": ["MODEL"]
,               "pos_embed.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "x_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "context_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "y_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "t_embedder.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.0.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.1.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.2.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.3.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.4.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.5.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.6.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.7.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.8.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.9.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.10.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.11.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.12.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.13.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.14.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.15.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.16.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.17.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.18.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.19.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.20.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.21.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.22.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.23.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.24.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.25.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.26.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.27.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.28.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.29.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.30.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.31.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.32.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.33.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.34.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.35.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.36.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "joint_blocks.37.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "final_layer.": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model1","model2","pos_embed.","x_embedder.","context_embedder.","y_embedder.","t_embedder.","joint_blocks.0.","joint_blocks.1.","joint_blocks.2.","joint_blocks.3.","joint_blocks.4.","joint_blocks.5.","joint_blocks.6.","joint_blocks.7.","joint_blocks.8.","joint_blocks.9.","joint_blocks.10.","joint_blocks.11.","joint_blocks.12.","joint_blocks.13.","joint_blocks.14.","joint_blocks.15.","joint_blocks.16.","joint_blocks.17.","joint_blocks.18.","joint_blocks.19.","joint_blocks.20.","joint_blocks.21.","joint_blocks.22.","joint_blocks.23.","joint_blocks.24.","joint_blocks.25.","joint_blocks.26.","joint_blocks.27.","joint_blocks.28.","joint_blocks.29.","joint_blocks.30.","joint_blocks.31.","joint_blocks.32.","joint_blocks.33.","joint_blocks.34.","joint_blocks.35.","joint_blocks.36.","joint_blocks.37.","final_layer."]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "ModelMergeSD35_Large"
,       "display_name": "ModelMergeSD35_Large"
,       "description": ""
,       "python_module": "comfy_extras.nodes_model_merging_model_specific"
,       "category": "advanced/model_merging/model_specific"
,       "output_node": false
    }
,   "PerturbedAttentionGuidance": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "scale": ["FLOAT",{"default":3,"min":0,"max":100,"step":0.01,"round":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","scale"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "PerturbedAttentionGuidance"
,       "display_name": "PerturbedAttentionGuidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_pag"
,       "category": "model_patches/unet"
,       "output_node": false
    }
,   "AlignYourStepsScheduler": {
        "input": {
            "required": {
                "model_type": [["SD1","SDXL","SVD"]]
,               "steps": ["INT",{"default":10,"min":10,"max":10000}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model_type","steps","denoise"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "AlignYourStepsScheduler"
,       "display_name": "AlignYourStepsScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_align_your_steps"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "UNetSelfAttentionMultiply": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "q": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "k": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "v": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "out": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","q","k","v","out"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "UNetSelfAttentionMultiply"
,       "display_name": "UNetSelfAttentionMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_attention_multiply"
,       "category": "_for_testing/attention_experiments"
,       "output_node": false
    }
,   "UNetCrossAttentionMultiply": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "q": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "k": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "v": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "out": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","q","k","v","out"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "UNetCrossAttentionMultiply"
,       "display_name": "UNetCrossAttentionMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_attention_multiply"
,       "category": "_for_testing/attention_experiments"
,       "output_node": false
    }
,   "CLIPAttentionMultiply": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "q": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "k": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "v": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "out": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["clip","q","k","v","out"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "CLIPAttentionMultiply"
,       "display_name": "CLIPAttentionMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_attention_multiply"
,       "category": "_for_testing/attention_experiments"
,       "output_node": false
    }
,   "UNetTemporalAttentionMultiply": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "self_structural": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "self_temporal": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "cross_structural": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "cross_temporal": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["model","self_structural","self_temporal","cross_structural","cross_temporal"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "UNetTemporalAttentionMultiply"
,       "display_name": "UNetTemporalAttentionMultiply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_attention_multiply"
,       "category": "_for_testing/attention_experiments"
,       "output_node": false
    }
,   "SamplerLCMUpscale": {
        "input": {
            "required": {
                "scale_ratio": ["FLOAT",{"default":1,"min":0.1,"max":20,"step":0.01}]
,               "scale_steps": ["INT",{"default":-1,"min":-1,"max":1000,"step":1}]
,               "upscale_method": [["bislerp","nearest-exact","bilinear","area","bicubic"]]
            }
        }
,       "input_order": {
            "required": ["scale_ratio","scale_steps","upscale_method"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerLCMUpscale"
,       "display_name": "SamplerLCMUpscale"
,       "description": ""
,       "python_module": "comfy_extras.nodes_advanced_samplers"
,       "category": "sampling/custom_sampling/samplers"
,       "output_node": false
    }
,   "SamplerEulerCFGpp": {
        "input": {
            "required": {
                "version": [["regular","alternative"]]
            }
        }
,       "input_order": {
            "required": ["version"]
        }
,       "output": ["SAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["SAMPLER"]
,       "name": "SamplerEulerCFGpp"
,       "display_name": "SamplerEulerCFG++"
,       "description": ""
,       "python_module": "comfy_extras.nodes_advanced_samplers"
,       "category": "_for_testing"
,       "output_node": false
    }
,   "WebcamCapture": {
        "input": {
            "required": {
                "image": ["WEBCAM",{}]
,               "width": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "height": ["INT",{"default":0,"min":0,"max":16384,"step":1}]
,               "capture_on_queue": ["BOOLEAN",{"default":true}]
            }
        }
,       "input_order": {
            "required": ["image","width","height","capture_on_queue"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "WebcamCapture"
,       "display_name": "Webcam Capture"
,       "description": ""
,       "python_module": "comfy_extras.nodes_webcam"
,       "category": "image"
,       "output_node": false
    }
,   "EmptyLatentAudio": {
        "input": {
            "required": {
                "seconds": ["FLOAT",{"default":47.6,"min":1,"max":1000,"step":0.1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096,"tooltip":"The number of latent images in the batch."}]
            }
        }
,       "input_order": {
            "required": ["seconds","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "EmptyLatentAudio"
,       "display_name": "EmptyLatentAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "latent/audio"
,       "output_node": false
    }
,   "VAEEncodeAudio": {
        "input": {
            "required": {
                "audio": ["AUDIO"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["audio","vae"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "VAEEncodeAudio"
,       "display_name": "VAEEncodeAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "latent/audio"
,       "output_node": false
    }
,   "VAEDecodeAudio": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["samples","vae"]
        }
,       "output": ["AUDIO"]
,       "output_is_list": [false]
,       "output_name": ["AUDIO"]
,       "name": "VAEDecodeAudio"
,       "display_name": "VAEDecodeAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "latent/audio"
,       "output_node": false
    }
,   "SaveAudio": {
        "input": {
            "required": {
                "audio": ["AUDIO"]
,               "filename_prefix": ["STRING",{"default":"audio/ComfyUI"}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["audio","filename_prefix"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveAudio"
,       "display_name": "SaveAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "audio"
,       "output_node": true
    }
,   "LoadAudio": {
        "input": {
            "required": {
                "audio": [[],{"audio_upload":true}]
            }
        }
,       "input_order": {
            "required": ["audio"]
        }
,       "output": ["AUDIO"]
,       "output_is_list": [false]
,       "output_name": ["AUDIO"]
,       "name": "LoadAudio"
,       "display_name": "LoadAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "audio"
,       "output_node": false
    }
,   "PreviewAudio": {
        "input": {
            "required": {
                "audio": ["AUDIO"]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["audio"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "PreviewAudio"
,       "display_name": "PreviewAudio"
,       "description": ""
,       "python_module": "comfy_extras.nodes_audio"
,       "category": "audio"
,       "output_node": true
    }
,   "TripleCLIPLoader": {
        "input": {
            "required": {
                "clip_name1": [[]]
,               "clip_name2": [[]]
,               "clip_name3": [[]]
            }
        }
,       "input_order": {
            "required": ["clip_name1","clip_name2","clip_name3"]
        }
,       "output": ["CLIP"]
,       "output_is_list": [false]
,       "output_name": ["CLIP"]
,       "name": "TripleCLIPLoader"
,       "display_name": "TripleCLIPLoader"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "advanced/loaders"
,       "output_node": false
    }
,   "EmptySD3LatentImage": {
        "input": {
            "required": {
                "width": ["INT",{"default":1024,"min":16,"max":16384,"step":16}]
,               "height": ["INT",{"default":1024,"min":16,"max":16384,"step":16}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["width","height","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "EmptySD3LatentImage"
,       "display_name": "EmptySD3LatentImage"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "latent/sd3"
,       "output_node": false
    }
,   "CLIPTextEncodeSD3": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "clip_l": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "clip_g": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "t5xxl": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "empty_padding": [["none","empty_prompt"]]
            }
        }
,       "input_order": {
            "required": ["clip","clip_l","clip_g","t5xxl","empty_padding"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeSD3"
,       "display_name": "CLIPTextEncodeSD3"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "ControlNetApplySD3": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "control_net": ["CONTROL_NET"]
,               "vae": ["VAE"]
,               "image": ["IMAGE"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["positive","negative","control_net","vae","image","strength","start_percent","end_percent"]
        }
,       "output": ["CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false]
,       "output_name": ["positive","negative"]
,       "name": "ControlNetApplySD3"
,       "display_name": "Apply Controlnet with VAE"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "conditioning/controlnet"
,       "output_node": false
,       "deprecated": true
    }
,   "SkipLayerGuidanceSD3": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "layers": ["STRING",{"default":"7, 8, 9","multiline":false}]
,               "scale": ["FLOAT",{"default":3,"min":0,"max":10,"step":0.1}]
,               "start_percent": ["FLOAT",{"default":0.01,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":0.15,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["model","layers","scale","start_percent","end_percent"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "SkipLayerGuidanceSD3"
,       "display_name": "SkipLayerGuidanceSD3"
,       "description": ""
,       "python_module": "comfy_extras.nodes_sd3"
,       "category": "advanced/guidance"
,       "output_node": false
    }
,   "GITSScheduler": {
        "input": {
            "required": {
                "coeff": ["FLOAT",{"default":1.2,"min":0.8,"max":1.5,"step":0.05}]
,               "steps": ["INT",{"default":10,"min":2,"max":1000}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["coeff","steps","denoise"]
        }
,       "output": ["SIGMAS"]
,       "output_is_list": [false]
,       "output_name": ["SIGMAS"]
,       "name": "GITSScheduler"
,       "display_name": "GITSScheduler"
,       "description": ""
,       "python_module": "comfy_extras.nodes_gits"
,       "category": "sampling/custom_sampling/schedulers"
,       "output_node": false
    }
,   "SetUnionControlNetType": {
        "input": {
            "required": {
                "control_net": ["CONTROL_NET"]
,               "type": [["auto","openpose","depth","hed/pidi/scribble/ted","canny/lineart/anime_lineart/mlsd","normal","segment","tile","repaint"]]
            }
        }
,       "input_order": {
            "required": ["control_net","type"]
        }
,       "output": ["CONTROL_NET"]
,       "output_is_list": [false]
,       "output_name": ["CONTROL_NET"]
,       "name": "SetUnionControlNetType"
,       "display_name": "SetUnionControlNetType"
,       "description": ""
,       "python_module": "comfy_extras.nodes_controlnet"
,       "category": "conditioning/controlnet"
,       "output_node": false
    }
,   "ControlNetInpaintingAliMamaApply": {
        "input": {
            "required": {
                "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "control_net": ["CONTROL_NET"]
,               "vae": ["VAE"]
,               "image": ["IMAGE"]
,               "mask": ["MASK"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
        }
,       "input_order": {
            "required": ["positive","negative","control_net","vae","image","mask","strength","start_percent","end_percent"]
        }
,       "output": ["CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false]
,       "output_name": ["positive","negative"]
,       "name": "ControlNetInpaintingAliMamaApply"
,       "display_name": "ControlNetInpaintingAliMamaApply"
,       "description": ""
,       "python_module": "comfy_extras.nodes_controlnet"
,       "category": "conditioning/controlnet"
,       "output_node": false
    }
,   "CLIPTextEncodeHunyuanDiT": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "bert": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "mt5xl": ["STRING",{"multiline":true,"dynamicPrompts":true}]
            }
        }
,       "input_order": {
            "required": ["clip","bert","mt5xl"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeHunyuanDiT"
,       "display_name": "CLIPTextEncodeHunyuanDiT"
,       "description": ""
,       "python_module": "comfy_extras.nodes_hunyuan"
,       "category": "advanced/conditioning"
,       "output_node": false
    }
,   "CLIPTextEncodeFlux": {
        "input": {
            "required": {
                "clip": ["CLIP"]
,               "clip_l": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "t5xxl": ["STRING",{"multiline":true,"dynamicPrompts":true}]
,               "guidance": ["FLOAT",{"default":3.5,"min":0,"max":100,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["clip","clip_l","t5xxl","guidance"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "CLIPTextEncodeFlux"
,       "display_name": "CLIPTextEncodeFlux"
,       "description": ""
,       "python_module": "comfy_extras.nodes_flux"
,       "category": "advanced/conditioning/flux"
,       "output_node": false
    }
,   "FluxGuidance": {
        "input": {
            "required": {
                "conditioning": ["CONDITIONING"]
,               "guidance": ["FLOAT",{"default":3.5,"min":0,"max":100,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["conditioning","guidance"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "FluxGuidance"
,       "display_name": "FluxGuidance"
,       "description": ""
,       "python_module": "comfy_extras.nodes_flux"
,       "category": "advanced/conditioning/flux"
,       "output_node": false
    }
,   "LoraSave": {
        "input": {
            "required": {
                "filename_prefix": ["STRING",{"default":"loras/ComfyUI_extracted_lora"}]
,               "rank": ["INT",{"default":8,"min":1,"max":4096,"step":1}]
,               "lora_type": [["standard","full_diff"]]
,               "bias_diff": ["BOOLEAN",{"default":true}]
            }
,           "optional": {
                "model_diff": ["MODEL",{"tooltip":"The ModelSubtract output to be converted to a lora."}]
,               "text_encoder_diff": ["CLIP",{"tooltip":"The CLIPSubtract output to be converted to a lora."}]
            }
        }
,       "input_order": {
            "required": ["filename_prefix","rank","lora_type","bias_diff"]
,           "optional": ["model_diff","text_encoder_diff"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "LoraSave"
,       "display_name": "Extract and Save Lora"
,       "description": ""
,       "python_module": "comfy_extras.nodes_lora_extract"
,       "category": "_for_testing"
,       "output_node": true
    }
,   "TorchCompileModel": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "backend": [["inductor","cudagraphs"]]
            }
        }
,       "input_order": {
            "required": ["model","backend"]
        }
,       "output": ["MODEL"]
,       "output_is_list": [false]
,       "output_name": ["MODEL"]
,       "name": "TorchCompileModel"
,       "display_name": "TorchCompileModel"
,       "description": ""
,       "python_module": "comfy_extras.nodes_torch_compile"
,       "category": "_for_testing"
,       "output_node": false
,       "experimental": true
    }
,   "EmptyMochiLatentVideo": {
        "input": {
            "required": {
                "width": ["INT",{"default":848,"min":16,"max":16384,"step":16}]
,               "height": ["INT",{"default":480,"min":16,"max":16384,"step":16}]
,               "length": ["INT",{"default":25,"min":7,"max":16384,"step":6}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":4096}]
            }
        }
,       "input_order": {
            "required": ["width","height","length","batch_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "EmptyMochiLatentVideo"
,       "display_name": "EmptyMochiLatentVideo"
,       "description": ""
,       "python_module": "comfy_extras.nodes_mochi"
,       "category": "latent/mochi"
,       "output_node": false
    }
,   "SaveImageWebsocket": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "SaveImageWebsocket"
,       "display_name": "SaveImageWebsocket"
,       "description": ""
,       "python_module": "custom_nodes.websocket_image_save"
,       "category": "api/image"
,       "output_node": true
    }
,   "SAMLoader": {
        "input": {
            "required": {
                "model_name": [["sam_vit_b_01ec64.pth","ESAM"],{"tooltip":"The detection accuracy varies depending on the SAM model. ESAM can only be used if ComfyUI-YoloWorld-EfficientSAM is installed."}]
,               "device_mode": [["AUTO","Prefer GPU","CPU"],{"tooltip":"AUTO: Only applicable when a GPU is available. It temporarily loads the SAM_MODEL into VRAM only when the detection function is used.\nPrefer GPU: Tries to keep the SAM_MODEL on the GPU whenever possible. This can be used when there is sufficient VRAM available.\nCPU: Always loads only on the CPU."}]
            }
        }
,       "input_order": {
            "required": ["model_name","device_mode"]
        }
,       "output": ["SAM_MODEL"]
,       "output_is_list": [false]
,       "output_name": ["SAM_MODEL"]
,       "name": "SAMLoader"
,       "display_name": "SAMLoader (Impact)"
,       "description": "Load the SAM (Segment Anything) model. This can be used in places that utilize SAM detection functionality, such as SAMDetector or SimpleDetector.\nThe SAM detection functionality in Impact Pack must use the SAM_MODEL loaded through this node."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack"
,       "output_node": false
    }
,   "CLIPSegDetectorProvider": {
        "input": {
            "required": {
                "text": ["STRING",{"multiline":false,"tooltip":"Enter the targets to be detected, separated by commas"}]
,               "blur": ["FLOAT",{"min":0,"max":15,"step":0.1,"default":7,"tooltip":"Blurs the detected mask"}]
,               "threshold": ["FLOAT",{"min":0,"max":1,"step":0.05,"default":0.4,"tooltip":"Detects only areas that are certain above the threshold."}]
,               "dilation_factor": ["INT",{"min":0,"max":10,"step":1,"default":4,"tooltip":"Dilates the detected mask."}]
            }
        }
,       "input_order": {
            "required": ["text","blur","threshold","dilation_factor"]
        }
,       "output": ["BBOX_DETECTOR"]
,       "output_is_list": [false]
,       "output_name": ["BBOX_DETECTOR"]
,       "name": "CLIPSegDetectorProvider"
,       "display_name": "CLIPSegDetectorProvider"
,       "description": "Provides a detection function using CLIPSeg, which generates masks based on text prompts.\nTo use this node, the CLIPSeg custom node must be installed."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ONNXDetectorProvider": {
        "input": {
            "required": {
                "model_name": [[]]
            }
        }
,       "input_order": {
            "required": ["model_name"]
        }
,       "output": ["BBOX_DETECTOR"]
,       "output_is_list": [false]
,       "output_name": ["BBOX_DETECTOR"]
,       "name": "ONNXDetectorProvider"
,       "display_name": "ONNXDetectorProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack"
,       "output_node": false
    }
,   "BitwiseAndMaskForEach": {
        "input": {
            "required": {
                "base_segs": ["SEGS"]
,               "mask_segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["base_segs","mask_segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "BitwiseAndMaskForEach"
,       "display_name": "Pixelwise(SEGS & SEGS)"
,       "description": "Retains only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "SubtractMaskForEach": {
        "input": {
            "required": {
                "base_segs": ["SEGS"]
,               "mask_segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["base_segs","mask_segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "SubtractMaskForEach"
,       "display_name": "Pixelwise(SEGS - SEGS)"
,       "description": "Removes only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "DetailerForEach": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","model","clip","vae","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","feather","noise_mask","force_inpaint","wildcard","cycle"]
,           "optional": ["detailer_hook","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "DetailerForEach"
,       "display_name": "Detailer (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DetailerForEachDebug": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","model","clip","vae","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","feather","noise_mask","force_inpaint","wildcard","cycle"]
,           "optional": ["detailer_hook","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE","IMAGE","IMAGE"]
,       "output_is_list": [false,true,true,true,true]
,       "output_name": ["image","cropped","cropped_refined","cropped_refined_alpha","cnet_images"]
,       "name": "DetailerForEachDebug"
,       "display_name": "DetailerDebug (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DetailerForEachPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","feather","noise_mask","force_inpaint","basic_pipe","wildcard","refiner_ratio","cycle"]
,           "optional": ["detailer_hook","refiner_basic_pipe_opt","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","SEGS","BASIC_PIPE","IMAGE"]
,       "output_is_list": [false,false,false,true]
,       "output_name": ["image","segs","basic_pipe","cnet_images"]
,       "name": "DetailerForEachPipe"
,       "display_name": "Detailer (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DetailerForEachDebugPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","feather","noise_mask","force_inpaint","basic_pipe","wildcard","refiner_ratio","cycle"]
,           "optional": ["detailer_hook","refiner_basic_pipe_opt","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","SEGS","BASIC_PIPE","IMAGE","IMAGE","IMAGE","IMAGE"]
,       "output_is_list": [false,false,false,true,true,true,true]
,       "output_name": ["image","segs","basic_pipe","cropped","cropped_refined","cropped_refined_alpha","cnet_images"]
,       "name": "DetailerForEachDebugPipe"
,       "display_name": "DetailerDebug (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DetailerForEachPipeForAnimateDiff": {
        "input": {
            "required": {
                "image_frames": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
,               "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image_frames","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","feather","basic_pipe","refiner_ratio"]
,           "optional": ["detailer_hook","refiner_basic_pipe_opt","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","SEGS","BASIC_PIPE","IMAGE"]
,       "output_is_list": [false,false,false,true]
,       "output_name": ["image","segs","basic_pipe","cnet_images"]
,       "name": "DetailerForEachPipeForAnimateDiff"
,       "display_name": "Detailer For AnimateDiff (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "SAMDetectorCombined": {
        "input": {
            "required": {
                "sam_model": ["SAM_MODEL",{"tooltip":"Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."}]
,               "segs": ["SEGS",{"tooltip":"This is the segment information detected by the detector.\nIt refines the Mask through the SAM (Segment Anything) detector for all areas pointed to by SEGS, and combines all Masks to return as a single Mask."}]
,               "image": ["IMAGE",{"tooltip":"It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."}]
,               "detection_hint": [["center-1","horizontal-2","vertical-2","rect-4","diamond-4","mask-area","mask-points","mask-point-bbox","none"],{"tooltip":"It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."}]
,               "dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1,"tooltip":"Set the value to dilate the result mask. If the value is negative, it erodes the mask."}]
,               "threshold": ["FLOAT",{"default":0.93,"min":0,"max":1,"step":0.01,"tooltip":"Set the sensitivity threshold for the mask detected by SAM (Segment Anything). A higher value generates a more specific mask with a narrower range. For example, when pointing to a person's area, it might detect clothes, which is a narrower range, instead of the entire person."}]
,               "bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1,"tooltip":"When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."}]
,               "mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01,"tooltip":"When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."}]
,               "mask_hint_use_negative": [["False","Small","Outter"],{"tooltip":"When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"}]
            }
        }
,       "input_order": {
            "required": ["sam_model","segs","image","detection_hint","dilation","threshold","bbox_expansion","mask_hint_threshold","mask_hint_use_negative"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SAMDetectorCombined"
,       "display_name": "SAMDetector (combined)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "SAMDetectorSegmented": {
        "input": {
            "required": {
                "sam_model": ["SAM_MODEL",{"tooltip":"Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."}]
,               "segs": ["SEGS",{"tooltip":"This is the segment information detected by the detector.\nFor the SEGS region, the masks detected by SAM (Segment Anything) are created as a unified mask and a batch of individual masks."}]
,               "image": ["IMAGE",{"tooltip":"It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."}]
,               "detection_hint": [["center-1","horizontal-2","vertical-2","rect-4","diamond-4","mask-area","mask-points","mask-point-bbox","none"],{"tooltip":"It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."}]
,               "dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1,"tooltip":"Set the value to dilate the result mask. If the value is negative, it erodes the mask."}]
,               "threshold": ["FLOAT",{"default":0.93,"min":0,"max":1,"step":0.01}]
,               "bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1,"tooltip":"When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."}]
,               "mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01,"tooltip":"When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."}]
,               "mask_hint_use_negative": [["False","Small","Outter"],{"tooltip":"When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"}]
            }
        }
,       "input_order": {
            "required": ["sam_model","segs","image","detection_hint","dilation","threshold","bbox_expansion","mask_hint_threshold","mask_hint_use_negative"]
        }
,       "output": ["MASK","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["combined_mask","batch_masks"]
,       "name": "SAMDetectorSegmented"
,       "display_name": "SAMDetector (segmented)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "FaceDetailer": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "bbox_crop_factor": ["FLOAT",{"default":3,"min":1,"max":10,"step":0.1}]
,               "sam_detection_hint": [["center-1","horizontal-2","vertical-2","rect-4","diamond-4","mask-area","mask-points","mask-point-bbox","none"]]
,               "sam_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sam_threshold": ["FLOAT",{"default":0.93,"min":0,"max":1,"step":0.01}]
,               "sam_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
,               "sam_mask_hint_use_negative": [["False","Small","Outter"]]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","model","clip","vae","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","feather","noise_mask","force_inpaint","bbox_threshold","bbox_dilation","bbox_crop_factor","sam_detection_hint","sam_dilation","sam_threshold","sam_bbox_expansion","sam_mask_hint_threshold","sam_mask_hint_use_negative","drop_size","bbox_detector","wildcard","cycle"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE","MASK","DETAILER_PIPE","IMAGE"]
,       "output_is_list": [false,true,true,false,false,true]
,       "output_name": ["image","cropped_refined","cropped_enhanced_alpha","mask","detailer_pipe","cnet_images"]
,       "name": "FaceDetailer"
,       "display_name": "FaceDetailer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Simple"
,       "output_node": false
    }
,   "FaceDetailerPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "detailer_pipe": ["DETAILER_PIPE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "bbox_crop_factor": ["FLOAT",{"default":3,"min":1,"max":10,"step":0.1}]
,               "sam_detection_hint": [["center-1","horizontal-2","vertical-2","rect-4","diamond-4","mask-area","mask-points","mask-point-bbox","none"]]
,               "sam_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sam_threshold": ["FLOAT",{"default":0.93,"min":0,"max":1,"step":0.01}]
,               "sam_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
,               "sam_mask_hint_use_negative": [["False","Small","Outter"]]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","detailer_pipe","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","feather","noise_mask","force_inpaint","bbox_threshold","bbox_dilation","bbox_crop_factor","sam_detection_hint","sam_dilation","sam_threshold","sam_bbox_expansion","sam_mask_hint_threshold","sam_mask_hint_use_negative","drop_size","refiner_ratio","cycle"]
,           "optional": ["inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE","MASK","DETAILER_PIPE","IMAGE"]
,       "output_is_list": [false,true,true,false,false,true]
,       "output_name": ["image","cropped_refined","cropped_enhanced_alpha","mask","detailer_pipe","cnet_images"]
,       "name": "FaceDetailerPipe"
,       "display_name": "FaceDetailer (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Simple"
,       "output_node": false
    }
,   "MaskDetailerPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "mask": ["MASK"]
,               "basic_pipe": ["BASIC_PIPE"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"mask bbox","label_off":"crop region"}]
,               "max_size": ["FLOAT",{"default":1024,"min":64,"max":16384,"step":8}]
,               "mask_mode": ["BOOLEAN",{"default":true,"label_on":"masked only","label_off":"whole"}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":10,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":100}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "detailer_hook": ["DETAILER_HOOK"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "bbox_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "contour_fill": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","mask","basic_pipe","guide_size","guide_size_for","max_size","mask_mode","seed","steps","cfg","sampler_name","scheduler","denoise","feather","crop_factor","drop_size","refiner_ratio","batch_size","cycle"]
,           "optional": ["refiner_basic_pipe_opt","detailer_hook","inpaint_model","noise_mask_feather","bbox_fill","contour_fill","scheduler_func_opt"]
        }
,       "output": ["IMAGE","IMAGE","IMAGE","BASIC_PIPE","BASIC_PIPE"]
,       "output_is_list": [false,true,true,false,false]
,       "output_name": ["image","cropped_refined","cropped_enhanced_alpha","basic_pipe","refiner_basic_pipe_opt"]
,       "name": "MaskDetailerPipe"
,       "display_name": "MaskDetailer (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "ToDetailerPipe": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["model","clip","vae","positive","negative","bbox_detector","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "ToDetailerPipe"
,       "display_name": "ToDetailerPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "ToDetailerPipeSDXL": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "refiner_model": ["MODEL"]
,               "refiner_clip": ["CLIP"]
,               "refiner_positive": ["CONDITIONING"]
,               "refiner_negative": ["CONDITIONING"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["model","clip","vae","positive","negative","refiner_model","refiner_clip","refiner_positive","refiner_negative","bbox_detector","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "ToDetailerPipeSDXL"
,       "display_name": "ToDetailerPipeSDXL"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromDetailerPipe": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe"]
        }
,       "output": ["MODEL","CLIP","VAE","CONDITIONING","CONDITIONING","BBOX_DETECTOR","SAM_MODEL","SEGM_DETECTOR","DETAILER_HOOK"]
,       "output_is_list": [false,false,false,false,false,false,false,false,false]
,       "output_name": ["model","clip","vae","positive","negative","bbox_detector","sam_model_opt","segm_detector_opt","detailer_hook"]
,       "name": "FromDetailerPipe"
,       "display_name": "FromDetailerPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromDetailerPipe_v2": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe"]
        }
,       "output": ["DETAILER_PIPE","MODEL","CLIP","VAE","CONDITIONING","CONDITIONING","BBOX_DETECTOR","SAM_MODEL","SEGM_DETECTOR","DETAILER_HOOK"]
,       "output_is_list": [false,false,false,false,false,false,false,false,false,false]
,       "output_name": ["detailer_pipe","model","clip","vae","positive","negative","bbox_detector","sam_model_opt","segm_detector_opt","detailer_hook"]
,       "name": "FromDetailerPipe_v2"
,       "display_name": "FromDetailerPipe_v2"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromDetailerPipeSDXL": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe"]
        }
,       "output": ["DETAILER_PIPE","MODEL","CLIP","VAE","CONDITIONING","CONDITIONING","BBOX_DETECTOR","SAM_MODEL","SEGM_DETECTOR","DETAILER_HOOK","MODEL","CLIP","CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false,false,false,false,false,false,false,false,false,false,false,false,false]
,       "output_name": ["detailer_pipe","model","clip","vae","positive","negative","bbox_detector","sam_model_opt","segm_detector_opt","detailer_hook","refiner_model","refiner_clip","refiner_positive","refiner_negative"]
,       "name": "FromDetailerPipeSDXL"
,       "display_name": "FromDetailer (SDXL/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "AnyPipeToBasic": {
        "input": {
            "required": {
                "any_pipe": ["*"]
            }
        }
,       "input_order": {
            "required": ["any_pipe"]
        }
,       "output": ["BASIC_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["basic_pipe"]
,       "name": "AnyPipeToBasic"
,       "display_name": "Any PIPE -> BasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "ToBasicPipe": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["model","clip","vae","positive","negative"]
        }
,       "output": ["BASIC_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["basic_pipe"]
,       "name": "ToBasicPipe"
,       "display_name": "ToBasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromBasicPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE"]
            }
        }
,       "input_order": {
            "required": ["basic_pipe"]
        }
,       "output": ["MODEL","CLIP","VAE","CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false,false,false,false]
,       "output_name": ["model","clip","vae","positive","negative"]
,       "name": "FromBasicPipe"
,       "display_name": "FromBasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "FromBasicPipe_v2": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE"]
            }
        }
,       "input_order": {
            "required": ["basic_pipe"]
        }
,       "output": ["BASIC_PIPE","MODEL","CLIP","VAE","CONDITIONING","CONDITIONING"]
,       "output_is_list": [false,false,false,false,false,false]
,       "output_name": ["basic_pipe","model","clip","vae","positive","negative"]
,       "name": "FromBasicPipe_v2"
,       "display_name": "FromBasicPipe_v2"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "BasicPipeToDetailerPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["basic_pipe","bbox_detector","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "BasicPipeToDetailerPipe"
,       "display_name": "BasicPipe -> DetailerPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "BasicPipeToDetailerPipeSDXL": {
        "input": {
            "required": {
                "base_basic_pipe": ["BASIC_PIPE"]
,               "refiner_basic_pipe": ["BASIC_PIPE"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "sam_model_opt": ["SAM_MODEL"]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["base_basic_pipe","refiner_basic_pipe","bbox_detector","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["sam_model_opt","segm_detector_opt","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "BasicPipeToDetailerPipeSDXL"
,       "display_name": "BasicPipe -> DetailerPipe (SDXL)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "DetailerPipeToBasicPipe": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe"]
        }
,       "output": ["BASIC_PIPE","BASIC_PIPE"]
,       "output_is_list": [false,false]
,       "output_name": ["base_basic_pipe","refiner_basic_pipe"]
,       "name": "DetailerPipeToBasicPipe"
,       "display_name": "DetailerPipe -> BasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "EditBasicPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE"]
            }
,           "optional": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
            }
        }
,       "input_order": {
            "required": ["basic_pipe"]
,           "optional": ["model","clip","vae","positive","negative"]
        }
,       "output": ["BASIC_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["basic_pipe"]
,       "name": "EditBasicPipe"
,       "display_name": "Edit BasicPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "EditDetailerPipe": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "sam_model": ["SAM_MODEL"]
,               "segm_detector": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["model","clip","vae","positive","negative","bbox_detector","sam_model","segm_detector","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "EditDetailerPipe"
,       "display_name": "Edit DetailerPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "EditDetailerPipeSDXL": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
,               "wildcard": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
,           "optional": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "refiner_model": ["MODEL"]
,               "refiner_clip": ["CLIP"]
,               "refiner_positive": ["CONDITIONING"]
,               "refiner_negative": ["CONDITIONING"]
,               "bbox_detector": ["BBOX_DETECTOR"]
,               "sam_model": ["SAM_MODEL"]
,               "segm_detector": ["SEGM_DETECTOR"]
,               "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe","wildcard","Select to add LoRA","Select to add Wildcard"]
,           "optional": ["model","clip","vae","positive","negative","refiner_model","refiner_clip","refiner_positive","refiner_negative","bbox_detector","sam_model","segm_detector","detailer_hook"]
        }
,       "output": ["DETAILER_PIPE"]
,       "output_is_list": [false]
,       "output_name": ["detailer_pipe"]
,       "name": "EditDetailerPipeSDXL"
,       "display_name": "Edit DetailerPipe (SDXL)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Pipe"
,       "output_node": false
    }
,   "LatentPixelScale": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "scale_factor": ["FLOAT",{"default":1.5,"min":0.1,"max":10000,"step":0.1}]
,               "vae": ["VAE"]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
            }
        }
,       "input_order": {
            "required": ["samples","scale_method","scale_factor","vae","use_tiled_vae"]
,           "optional": ["upscale_model_opt"]
        }
,       "output": ["LATENT","IMAGE"]
,       "output_is_list": [false,false]
,       "output_name": ["LATENT","IMAGE"]
,       "name": "LatentPixelScale"
,       "display_name": "Latent Scale (on Pixel Space)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelKSampleUpscalerProvider": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "model": ["MODEL"]
,               "vae": ["VAE"]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_opt": ["PK_HOOK"]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["scale_method","model","vae","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","use_tiled_vae","tile_size"]
,           "optional": ["upscale_model_opt","pk_hook_opt","scheduler_func_opt"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "PixelKSampleUpscalerProvider"
,       "display_name": "PixelKSampleUpscalerProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelKSampleUpscalerProviderPipe": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_opt": ["PK_HOOK"]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
,               "tile_cnet_opt": ["CONTROL_NET"]
,               "tile_cnet_strength": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["scale_method","seed","steps","cfg","sampler_name","scheduler","denoise","use_tiled_vae","basic_pipe","tile_size"]
,           "optional": ["upscale_model_opt","pk_hook_opt","scheduler_func_opt","tile_cnet_opt","tile_cnet_strength"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "PixelKSampleUpscalerProviderPipe"
,       "display_name": "PixelKSampleUpscalerProviderPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "IterativeLatentUpscale": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "upscale_factor": ["FLOAT",{"default":1.5,"min":1,"max":10000,"step":0.1}]
,               "steps": ["INT",{"default":3,"min":1,"max":10000,"step":1}]
,               "temp_prefix": ["STRING",{"default":""}]
,               "upscaler": ["UPSCALER"]
,               "step_mode": [["simple","geometric"],{"default":"simple"}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["samples","upscale_factor","steps","temp_prefix","upscaler","step_mode"]
,           "hidden": ["unique_id"]
        }
,       "output": ["LATENT","VAE"]
,       "output_is_list": [false,false]
,       "output_name": ["latent","vae"]
,       "name": "IterativeLatentUpscale"
,       "display_name": "Iterative Upscale (Latent/on Pixel Space)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "IterativeImageUpscale": {
        "input": {
            "required": {
                "pixels": ["IMAGE"]
,               "upscale_factor": ["FLOAT",{"default":1.5,"min":1,"max":10000,"step":0.1}]
,               "steps": ["INT",{"default":3,"min":1,"max":10000,"step":1}]
,               "temp_prefix": ["STRING",{"default":""}]
,               "upscaler": ["UPSCALER"]
,               "vae": ["VAE"]
,               "step_mode": [["simple","geometric"],{"default":"simple"}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["pixels","upscale_factor","steps","temp_prefix","upscaler","vae","step_mode"]
,           "hidden": ["unique_id"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["image"]
,       "name": "IterativeImageUpscale"
,       "display_name": "Iterative Upscale (Image)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelTiledKSampleUpscalerProvider": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "model": ["MODEL"]
,               "vae": ["VAE"]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "tile_width": ["INT",{"default":512,"min":320,"max":16384,"step":64}]
,               "tile_height": ["INT",{"default":512,"min":320,"max":16384,"step":64}]
,               "tiling_strategy": [["random","padded","simple"]]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_opt": ["PK_HOOK"]
,               "tile_cnet_opt": ["CONTROL_NET"]
,               "tile_cnet_strength": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["scale_method","model","vae","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","tile_width","tile_height","tiling_strategy"]
,           "optional": ["upscale_model_opt","pk_hook_opt","tile_cnet_opt","tile_cnet_strength"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "PixelTiledKSampleUpscalerProvider"
,       "display_name": "PixelTiledKSampleUpscalerProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelTiledKSampleUpscalerProviderPipe": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
,               "tile_width": ["INT",{"default":512,"min":320,"max":16384,"step":64}]
,               "tile_height": ["INT",{"default":512,"min":320,"max":16384,"step":64}]
,               "tiling_strategy": [["random","padded","simple"]]
,               "basic_pipe": ["BASIC_PIPE"]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_opt": ["PK_HOOK"]
,               "tile_cnet_opt": ["CONTROL_NET"]
,               "tile_cnet_strength": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["scale_method","seed","steps","cfg","sampler_name","scheduler","denoise","tile_width","tile_height","tiling_strategy","basic_pipe"]
,           "optional": ["upscale_model_opt","pk_hook_opt","tile_cnet_opt","tile_cnet_strength"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "PixelTiledKSampleUpscalerProviderPipe"
,       "display_name": "PixelTiledKSampleUpscalerProviderPipe"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "TwoSamplersForMaskUpscalerProvider": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "full_sample_schedule": [["none","interleave1","interleave2","interleave3","last1","last2","interleave1+last1","interleave2+last1","interleave3+last1"]]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "base_sampler": ["KSAMPLER"]
,               "mask_sampler": ["KSAMPLER"]
,               "mask": ["MASK"]
,               "vae": ["VAE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
,           "optional": {
                "full_sampler_opt": ["KSAMPLER"]
,               "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_base_opt": ["PK_HOOK"]
,               "pk_hook_mask_opt": ["PK_HOOK"]
,               "pk_hook_full_opt": ["PK_HOOK"]
            }
        }
,       "input_order": {
            "required": ["scale_method","full_sample_schedule","use_tiled_vae","base_sampler","mask_sampler","mask","vae","tile_size"]
,           "optional": ["full_sampler_opt","upscale_model_opt","pk_hook_base_opt","pk_hook_mask_opt","pk_hook_full_opt"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "TwoSamplersForMaskUpscalerProvider"
,       "display_name": "TwoSamplersForMask Upscaler Provider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "TwoSamplersForMaskUpscalerProviderPipe": {
        "input": {
            "required": {
                "scale_method": [["nearest-exact","bilinear","lanczos","area"]]
,               "full_sample_schedule": [["none","interleave1","interleave2","interleave3","last1","last2","interleave1+last1","interleave2+last1","interleave3+last1"]]
,               "use_tiled_vae": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "base_sampler": ["KSAMPLER"]
,               "mask_sampler": ["KSAMPLER"]
,               "mask": ["MASK"]
,               "basic_pipe": ["BASIC_PIPE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
,           "optional": {
                "full_sampler_opt": ["KSAMPLER"]
,               "upscale_model_opt": ["UPSCALE_MODEL"]
,               "pk_hook_base_opt": ["PK_HOOK"]
,               "pk_hook_mask_opt": ["PK_HOOK"]
,               "pk_hook_full_opt": ["PK_HOOK"]
            }
        }
,       "input_order": {
            "required": ["scale_method","full_sample_schedule","use_tiled_vae","base_sampler","mask_sampler","mask","basic_pipe","tile_size"]
,           "optional": ["full_sampler_opt","upscale_model_opt","pk_hook_base_opt","pk_hook_mask_opt","pk_hook_full_opt"]
        }
,       "output": ["UPSCALER"]
,       "output_is_list": [false]
,       "output_name": ["UPSCALER"]
,       "name": "TwoSamplersForMaskUpscalerProviderPipe"
,       "display_name": "TwoSamplersForMask Upscaler Provider (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "PixelKSampleHookCombine": {
        "input": {
            "required": {
                "hook1": ["PK_HOOK"]
,               "hook2": ["PK_HOOK"]
            }
        }
,       "input_order": {
            "required": ["hook1","hook2"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "PixelKSampleHookCombine"
,       "display_name": "PixelKSampleHookCombine"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "DenoiseScheduleHookProvider": {
        "input": {
            "required": {
                "schedule_for_iteration": [["simple"]]
,               "target_denoise": ["FLOAT",{"default":0.2,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_iteration","target_denoise"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "DenoiseScheduleHookProvider"
,       "display_name": "DenoiseScheduleHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "StepsScheduleHookProvider": {
        "input": {
            "required": {
                "schedule_for_iteration": [["simple"]]
,               "target_steps": ["INT",{"default":20,"min":1,"max":10000}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_iteration","target_steps"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "StepsScheduleHookProvider"
,       "display_name": "StepsScheduleHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "CfgScheduleHookProvider": {
        "input": {
            "required": {
                "schedule_for_iteration": [["simple"]]
,               "target_cfg": ["FLOAT",{"default":3,"min":0,"max":100}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_iteration","target_cfg"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "CfgScheduleHookProvider"
,       "display_name": "CfgScheduleHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "NoiseInjectionHookProvider": {
        "input": {
            "required": {
                "schedule_for_iteration": [["simple"]]
,               "source": [["CPU","GPU"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "start_strength": ["FLOAT",{"default":1,"min":0,"max":200,"step":0.01}]
,               "end_strength": ["FLOAT",{"default":1,"min":0,"max":200,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_iteration","source","seed","start_strength","end_strength"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "NoiseInjectionHookProvider"
,       "display_name": "NoiseInjectionHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "UnsamplerHookProvider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "steps": ["INT",{"default":25,"min":1,"max":10000}]
,               "start_end_at_step": ["INT",{"default":21,"min":0,"max":10000}]
,               "end_end_at_step": ["INT",{"default":24,"min":0,"max":10000}]
,               "cfg": ["FLOAT",{"default":1,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "normalize": [["disable","enable"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "schedule_for_iteration": [["simple"]]
            }
        }
,       "input_order": {
            "required": ["model","steps","start_end_at_step","end_end_at_step","cfg","sampler_name","scheduler","normalize","positive","negative","schedule_for_iteration"]
        }
,       "output": ["PK_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["PK_HOOK"]
,       "name": "UnsamplerHookProvider"
,       "display_name": "UnsamplerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "CoreMLDetailerHookProvider": {
        "input": {
            "required": {
                "mode": [["512x512","768x768","512x768","768x512"]]
            }
        }
,       "input_order": {
            "required": ["mode"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "CoreMLDetailerHookProvider"
,       "display_name": "CoreMLDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "PreviewDetailerHookProvider": {
        "input": {
            "required": {
                "quality": ["INT",{"default":95,"min":20,"max":100}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["quality"]
,           "hidden": ["unique_id"]
        }
,       "output": ["DETAILER_HOOK","UPSCALER_HOOK"]
,       "output_is_list": [false,false]
,       "output_name": ["DETAILER_HOOK","UPSCALER_HOOK"]
,       "name": "PreviewDetailerHookProvider"
,       "display_name": "PreviewDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "DetailerHookCombine": {
        "input": {
            "required": {
                "hook1": ["DETAILER_HOOK"]
,               "hook2": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["hook1","hook2"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "DetailerHookCombine"
,       "display_name": "DetailerHookCombine"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "NoiseInjectionDetailerHookProvider": {
        "input": {
            "required": {
                "schedule_for_cycle": [["skip_start","from_start"]]
,               "source": [["CPU","GPU"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "start_strength": ["FLOAT",{"default":2,"min":0,"max":200,"step":0.01}]
,               "end_strength": ["FLOAT",{"default":1,"min":0,"max":200,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_cycle","source","seed","start_strength","end_strength"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "NoiseInjectionDetailerHookProvider"
,       "display_name": "NoiseInjectionDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "UnsamplerDetailerHookProvider": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "steps": ["INT",{"default":25,"min":1,"max":10000}]
,               "start_end_at_step": ["INT",{"default":21,"min":0,"max":10000}]
,               "end_end_at_step": ["INT",{"default":24,"min":0,"max":10000}]
,               "cfg": ["FLOAT",{"default":1,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"]]
,               "normalize": [["disable","enable"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "schedule_for_cycle": [["skip_start","from_start"]]
            }
        }
,       "input_order": {
            "required": ["model","steps","start_end_at_step","end_end_at_step","cfg","sampler_name","scheduler","normalize","positive","negative","schedule_for_cycle"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "UnsamplerDetailerHookProvider"
,       "display_name": "UnsamplerDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "DenoiseSchedulerDetailerHookProvider": {
        "input": {
            "required": {
                "schedule_for_cycle": [["simple"]]
,               "target_denoise": ["FLOAT",{"default":0.3,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["schedule_for_cycle","target_denoise"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "DenoiseSchedulerDetailerHookProvider"
,       "display_name": "DenoiseSchedulerDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "SEGSOrderedFilterDetailerHookProvider": {
        "input": {
            "required": {
                "target": [["area(=w*h)","width","height","x1","y1","x2","y2"]]
,               "order": ["BOOLEAN",{"default":true,"label_on":"descending","label_off":"ascending"}]
,               "take_start": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "take_count": ["INT",{"default":1,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["target","order","take_start","take_count"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "SEGSOrderedFilterDetailerHookProvider"
,       "display_name": "SEGSOrderedFilterDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "SEGSRangeFilterDetailerHookProvider": {
        "input": {
            "required": {
                "target": [["area(=w*h)","width","height","x1","y1","x2","y2","length_percent"]]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"inside","label_off":"outside"}]
,               "min_value": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "max_value": ["INT",{"default":67108864,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["target","mode","min_value","max_value"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "SEGSRangeFilterDetailerHookProvider"
,       "display_name": "SEGSRangeFilterDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "SEGSLabelFilterDetailerHookProvider": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "preset": [["all","hand","face","mouth","eyes","eyebrows","pupils","left_eyebrow","left_eye","left_pupil","right_eyebrow","right_eye","right_pupil","short_sleeved_shirt","long_sleeved_shirt","short_sleeved_outwear","long_sleeved_outwear","vest","sling","shorts","trousers","skirt","short_sleeved_dress","long_sleeved_dress","vest_dress","sling_dress","person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"]]
,               "labels": ["STRING",{"multiline":true,"placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
        }
,       "input_order": {
            "required": ["segs","preset","labels"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "SEGSLabelFilterDetailerHookProvider"
,       "display_name": "SEGSLabelFilterDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "VariationNoiseDetailerHookProvider": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "strength": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["seed","strength"]
        }
,       "output": ["DETAILER_HOOK"]
,       "output_is_list": [false]
,       "output_name": ["DETAILER_HOOK"]
,       "name": "VariationNoiseDetailerHookProvider"
,       "display_name": "VariationNoiseDetailerHookProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "BitwiseAndMask": {
        "input": {
            "required": {
                "mask1": ["MASK"]
,               "mask2": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1","mask2"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "BitwiseAndMask"
,       "display_name": "Pixelwise(MASK & MASK)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "SubtractMask": {
        "input": {
            "required": {
                "mask1": ["MASK"]
,               "mask2": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1","mask2"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SubtractMask"
,       "display_name": "Pixelwise(MASK - MASK)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "AddMask": {
        "input": {
            "required": {
                "mask1": ["MASK"]
,               "mask2": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1","mask2"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "AddMask"
,       "display_name": "Pixelwise(MASK + MASK)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "ImpactSegsAndMask": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["segs","mask"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSegsAndMask"
,       "display_name": "Pixelwise(SEGS & MASK)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "ImpactSegsAndMaskForEach": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["segs","masks"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSegsAndMaskForEach"
,       "display_name": "Pixelwise(SEGS & MASKS ForEach)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "EmptySegs": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "EmptySegs"
,       "display_name": "EmptySegs"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactFlattenMask": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactFlattenMask"
,       "display_name": "Flatten Mask Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MediaPipeFaceMeshToSEGS": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "bbox_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "crop_min_size": ["INT",{"min":10,"max":16384,"step":1,"default":50}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":1}]
,               "dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "face": ["BOOLEAN",{"default":true,"label_on":"Enabled","label_off":"Disabled"}]
,               "mouth": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "left_eyebrow": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "left_eye": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "left_pupil": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "right_eyebrow": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "right_eye": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
,               "right_pupil": ["BOOLEAN",{"default":false,"label_on":"Enabled","label_off":"Disabled"}]
            }
        }
,       "input_order": {
            "required": ["image","crop_factor","bbox_fill","crop_min_size","drop_size","dilation","face","mouth","left_eyebrow","left_eye","left_pupil","right_eyebrow","right_eye","right_pupil"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "MediaPipeFaceMeshToSEGS"
,       "display_name": "MediaPipe FaceMesh to SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MaskToSEGS": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "combined": ["BOOLEAN",{"default":false,"label_on":"True","label_off":"False"}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "bbox_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "contour_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
            }
        }
,       "input_order": {
            "required": ["mask","combined","crop_factor","bbox_fill","drop_size","contour_fill"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "MaskToSEGS"
,       "display_name": "MASK to SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MaskToSEGS_for_AnimateDiff": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "combined": ["BOOLEAN",{"default":false,"label_on":"True","label_off":"False"}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "bbox_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "contour_fill": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
            }
        }
,       "input_order": {
            "required": ["mask","combined","crop_factor","bbox_fill","drop_size","contour_fill"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "MaskToSEGS_for_AnimateDiff"
,       "display_name": "MASK to SEGS for AnimateDiff"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "ToBinaryMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "threshold": ["INT",{"default":20,"min":1,"max":255}]
            }
        }
,       "input_order": {
            "required": ["mask","threshold"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ToBinaryMask"
,       "display_name": "ToBinaryMask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MasksToMaskList": {
        "input": {
            "required": {
                "masks": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["masks"]
        }
,       "output": ["MASK"]
,       "output_is_list": [true]
,       "output_name": ["MASK"]
,       "name": "MasksToMaskList"
,       "display_name": "Mask Batch to Mask List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "MaskListToMaskBatch": {
        "input": {
            "required": {
                "mask": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "MaskListToMaskBatch"
,       "display_name": "Mask List to Mask Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "ImageListToImageBatch": {
        "input": {
            "required": {
                "images": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["images"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImageListToImageBatch"
,       "display_name": "Image List to Image Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "SetDefaultImageForSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "image": ["IMAGE"]
,               "override": ["BOOLEAN",{"default":true}]
            }
        }
,       "input_order": {
            "required": ["segs","image","override"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "SetDefaultImageForSEGS"
,       "display_name": "Set Default Image for SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "RemoveImageFromSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "RemoveImageFromSEGS"
,       "display_name": "Remove Image from SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "BboxDetectorSEGS": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "labels": ["STRING",{"multiline":true,"default":"all","placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image","threshold","dilation","crop_factor","drop_size","labels"]
,           "optional": ["detailer_hook"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "BboxDetectorSEGS"
,       "display_name": "BBOX Detector (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "SegmDetectorSEGS": {
        "input": {
            "required": {
                "segm_detector": ["SEGM_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "labels": ["STRING",{"multiline":true,"default":"all","placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["segm_detector","image","threshold","dilation","crop_factor","drop_size","labels"]
,           "optional": ["detailer_hook"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "SegmDetectorSEGS"
,       "display_name": "SEGM Detector (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ONNXDetectorSEGS": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "labels": ["STRING",{"multiline":true,"default":"all","placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
,           "optional": {
                "detailer_hook": ["DETAILER_HOOK"]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image","threshold","dilation","crop_factor","drop_size","labels"]
,           "optional": ["detailer_hook"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ONNXDetectorSEGS"
,       "display_name": "ONNX Detector (SEGS/legacy) - use BBOXDetector"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ImpactSimpleDetectorSEGS_for_AD": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image_frames": ["IMAGE"]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":0,"min":-255,"max":255,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "sub_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "sub_dilation": ["INT",{"default":0,"min":-255,"max":255,"step":1}]
,               "sub_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
            }
,           "optional": {
                "masking_mode": [["Pivot SEGS","Combine neighboring frames","Don't combine"]]
,               "segs_pivot": [["Combined mask","1st frame mask"]]
,               "sam_model_opt": ["SAM_MODEL",{"tooltip":"[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."}]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image_frames","bbox_threshold","bbox_dilation","crop_factor","drop_size","sub_threshold","sub_dilation","sub_bbox_expansion","sam_mask_hint_threshold"]
,           "optional": ["masking_mode","segs_pivot","sam_model_opt","segm_detector_opt"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSimpleDetectorSEGS_for_AD"
,       "display_name": "Simple Detector for AnimateDiff (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ImpactSimpleDetectorSEGS": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image": ["IMAGE"]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "sub_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "sub_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sub_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
            }
,           "optional": {
                "post_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sam_model_opt": ["SAM_MODEL",{"tooltip":"[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."}]
,               "segm_detector_opt": ["SEGM_DETECTOR"]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image","bbox_threshold","bbox_dilation","crop_factor","drop_size","sub_threshold","sub_dilation","sub_bbox_expansion","sam_mask_hint_threshold"]
,           "optional": ["post_dilation","sam_model_opt","segm_detector_opt"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSimpleDetectorSEGS"
,       "display_name": "Simple Detector (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ImpactSimpleDetectorSEGSPipe": {
        "input": {
            "required": {
                "detailer_pipe": ["DETAILER_PIPE"]
,               "image": ["IMAGE"]
,               "bbox_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "bbox_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":100,"step":0.1}]
,               "drop_size": ["INT",{"min":1,"max":16384,"step":1,"default":10}]
,               "sub_threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "sub_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
,               "sub_bbox_expansion": ["INT",{"default":0,"min":0,"max":1000,"step":1}]
,               "sam_mask_hint_threshold": ["FLOAT",{"default":0.7,"min":0,"max":1,"step":0.01}]
            }
,           "optional": {
                "post_dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["detailer_pipe","image","bbox_threshold","bbox_dilation","crop_factor","drop_size","sub_threshold","sub_dilation","sub_bbox_expansion","sam_mask_hint_threshold"]
,           "optional": ["post_dilation"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSimpleDetectorSEGSPipe"
,       "display_name": "Simple Detector (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "ImpactControlNetApplySEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "control_net": ["CONTROL_NET"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
            }
,           "optional": {
                "segs_preprocessor": ["SEGS_PREPROCESSOR"]
,               "control_image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["segs","control_net","strength"]
,           "optional": ["segs_preprocessor","control_image"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactControlNetApplySEGS"
,       "display_name": "ControlNetApply (SEGS) - DEPRECATED"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "deprecated": true
    }
,   "ImpactControlNetApplyAdvancedSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "control_net": ["CONTROL_NET"]
,               "strength": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01}]
,               "start_percent": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_percent": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.001}]
            }
,           "optional": {
                "segs_preprocessor": ["SEGS_PREPROCESSOR"]
,               "control_image": ["IMAGE"]
,               "vae": ["VAE"]
            }
        }
,       "input_order": {
            "required": ["segs","control_net","strength","start_percent","end_percent"]
,           "optional": ["segs_preprocessor","control_image","vae"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactControlNetApplyAdvancedSEGS"
,       "display_name": "ControlNetApply (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactControlNetClearSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactControlNetClearSEGS"
,       "display_name": "ImpactControlNetClearSEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactIPAdapterApplySEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "ipadapter_pipe": ["IPADAPTER_PIPE"]
,               "weight": ["FLOAT",{"default":0.7,"min":-1,"max":3,"step":0.05}]
,               "noise": ["FLOAT",{"default":0.4,"min":0,"max":1,"step":0.01}]
,               "weight_type": [["original","linear","channel penalty"],{"default":"channel penalty"}]
,               "start_at": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.001}]
,               "end_at": ["FLOAT",{"default":0.9,"min":0,"max":1,"step":0.001}]
,               "unfold_batch": ["BOOLEAN",{"default":false}]
,               "faceid_v2": ["BOOLEAN",{"default":false}]
,               "weight_v2": ["FLOAT",{"default":1,"min":-1,"max":3,"step":0.05}]
,               "context_crop_factor": ["FLOAT",{"default":1.2,"min":1,"max":100,"step":0.1}]
,               "reference_image": ["IMAGE"]
            }
,           "optional": {
                "combine_embeds": [["concat","add","subtract","average","norm average"]]
,               "neg_image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["segs","ipadapter_pipe","weight","noise","weight_type","start_at","end_at","unfold_batch","faceid_v2","weight_v2","context_crop_factor","reference_image"]
,           "optional": ["combine_embeds","neg_image"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactIPAdapterApplySEGS"
,       "display_name": "IPAdapterApply (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactDecomposeSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["SEGS_HEADER","SEG_ELT"]
,       "output_is_list": [false,true]
,       "output_name": ["SEGS_HEADER","SEG_ELT"]
,       "name": "ImpactDecomposeSEGS"
,       "display_name": "Decompose (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactAssembleSEGS": {
        "input": {
            "required": {
                "seg_header": ["SEGS_HEADER"]
,               "seg_elt": ["SEG_ELT"]
            }
        }
,       "input_order": {
            "required": ["seg_header","seg_elt"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactAssembleSEGS"
,       "display_name": "Assemble (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactFrom_SEG_ELT": {
        "input": {
            "required": {
                "seg_elt": ["SEG_ELT"]
            }
        }
,       "input_order": {
            "required": ["seg_elt"]
        }
,       "output": ["SEG_ELT","IMAGE","MASK","SEG_ELT_crop_region","SEG_ELT_bbox","SEG_ELT_control_net_wrapper","FLOAT","STRING"]
,       "output_is_list": [false,false,false,false,false,false,false,false]
,       "output_name": ["seg_elt","cropped_image","cropped_mask","crop_region","bbox","control_net_wrapper","confidence","label"]
,       "name": "ImpactFrom_SEG_ELT"
,       "display_name": "From SEG_ELT"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactEdit_SEG_ELT": {
        "input": {
            "required": {
                "seg_elt": ["SEG_ELT"]
            }
,           "optional": {
                "cropped_image_opt": ["IMAGE"]
,               "cropped_mask_opt": ["MASK"]
,               "crop_region_opt": ["SEG_ELT_crop_region"]
,               "bbox_opt": ["SEG_ELT_bbox"]
,               "control_net_wrapper_opt": ["SEG_ELT_control_net_wrapper"]
,               "confidence_opt": ["FLOAT",{"min":0,"max":1,"step":0.1,"forceInput":true}]
,               "label_opt": ["STRING",{"multiline":false,"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["seg_elt"]
,           "optional": ["cropped_image_opt","cropped_mask_opt","crop_region_opt","bbox_opt","control_net_wrapper_opt","confidence_opt","label_opt"]
        }
,       "output": ["SEG_ELT"]
,       "output_is_list": [false]
,       "output_name": ["SEG_ELT"]
,       "name": "ImpactEdit_SEG_ELT"
,       "display_name": "Edit SEG_ELT"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactDilate_Mask_SEG_ELT": {
        "input": {
            "required": {
                "seg_elt": ["SEG_ELT"]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["seg_elt","dilation"]
        }
,       "output": ["SEG_ELT"]
,       "output_is_list": [false]
,       "output_name": ["SEG_ELT"]
,       "name": "ImpactDilate_Mask_SEG_ELT"
,       "display_name": "Dilate Mask (SEG_ELT)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactDilateMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["mask","dilation"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactDilateMask"
,       "display_name": "Dilate Mask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactGaussianBlurMask": {
        "input": {
            "required": {
                "mask": ["MASK"]
,               "kernel_size": ["INT",{"default":10,"min":0,"max":100,"step":1}]
,               "sigma": ["FLOAT",{"default":10,"min":0.1,"max":100,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["mask","kernel_size","sigma"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactGaussianBlurMask"
,       "display_name": "Gaussian Blur Mask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactDilateMaskInSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "dilation": ["INT",{"default":10,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["segs","dilation"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactDilateMaskInSEGS"
,       "display_name": "Dilate Mask (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactGaussianBlurMaskInSEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "kernel_size": ["INT",{"default":10,"min":0,"max":100,"step":1}]
,               "sigma": ["FLOAT",{"default":10,"min":0.1,"max":100,"step":0.1}]
            }
        }
,       "input_order": {
            "required": ["segs","kernel_size","sigma"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactGaussianBlurMaskInSEGS"
,       "display_name": "Gaussian Blur Mask (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactScaleBy_BBOX_SEG_ELT": {
        "input": {
            "required": {
                "seg": ["SEG_ELT"]
,               "scale_by": ["FLOAT",{"default":1,"min":0.01,"max":8,"step":0.01}]
            }
        }
,       "input_order": {
            "required": ["seg","scale_by"]
        }
,       "output": ["SEG_ELT"]
,       "output_is_list": [false]
,       "output_name": ["SEG_ELT"]
,       "name": "ImpactScaleBy_BBOX_SEG_ELT"
,       "display_name": "ScaleBy BBOX (SEG_ELT)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactFrom_SEG_ELT_bbox": {
        "input": {
            "required": {
                "bbox": ["SEG_ELT_bbox"]
            }
        }
,       "input_order": {
            "required": ["bbox"]
        }
,       "output": ["INT","INT","INT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["left","top","right","bottom"]
,       "name": "ImpactFrom_SEG_ELT_bbox"
,       "display_name": "From SEG_ELT bbox"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactFrom_SEG_ELT_crop_region": {
        "input": {
            "required": {
                "crop_region": ["SEG_ELT_crop_region"]
            }
        }
,       "input_order": {
            "required": ["crop_region"]
        }
,       "output": ["INT","INT","INT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["left","top","right","bottom"]
,       "name": "ImpactFrom_SEG_ELT_crop_region"
,       "display_name": "From SEG_ELT crop_region"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactCount_Elts_in_SEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["INT"]
,       "output_is_list": [false]
,       "output_name": ["INT"]
,       "name": "ImpactCount_Elts_in_SEGS"
,       "display_name": "Count Elts in SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "BboxDetectorCombined_v2": {
        "input": {
            "required": {
                "bbox_detector": ["BBOX_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":4,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["bbox_detector","image","threshold","dilation"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "BboxDetectorCombined_v2"
,       "display_name": "BBOX Detector (combined)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "SegmDetectorCombined_v2": {
        "input": {
            "required": {
                "segm_detector": ["SEGM_DETECTOR"]
,               "image": ["IMAGE"]
,               "threshold": ["FLOAT",{"default":0.5,"min":0,"max":1,"step":0.01}]
,               "dilation": ["INT",{"default":0,"min":-512,"max":512,"step":1}]
            }
        }
,       "input_order": {
            "required": ["segm_detector","image","threshold","dilation"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SegmDetectorCombined_v2"
,       "display_name": "SEGM Detector (combined)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detector"
,       "output_node": false
    }
,   "SegsToCombinedMask": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "SegsToCombinedMask"
,       "display_name": "SEGS to MASK (combined)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Operation"
,       "output_node": false
    }
,   "KSamplerProvider": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"tooltip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"],{"tooltip":"noise schedule"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
,               "basic_pipe": ["BASIC_PIPE",{"tooltip":"basic_pipe input for sampling"}]
            }
,           "optional": {
                "scheduler_func_opt": ["SCHEDULER_FUNC",{"tooltip":"[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]
            }
        }
,       "input_order": {
            "required": ["seed","steps","cfg","sampler_name","scheduler","denoise","basic_pipe"]
,           "optional": ["scheduler_func_opt"]
        }
,       "output": ["KSAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["KSAMPLER"]
,       "name": "KSamplerProvider"
,       "display_name": "KSamplerProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["sampler wrapper. (Can be used when generating a regional_prompt.)"]
    }
,   "TwoSamplersForMask": {
        "input": {
            "required": {
                "latent_image": ["LATENT",{"tooltip":"input latent image"}]
,               "base_sampler": ["KSAMPLER",{"tooltip":"Sampler to apply to the region outside the mask."}]
,               "mask_sampler": ["KSAMPLER",{"tooltip":"Sampler to apply to the masked region."}]
,               "mask": ["MASK",{"tooltip":"region mask"}]
            }
        }
,       "input_order": {
            "required": ["latent_image","base_sampler","mask_sampler","mask"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "TwoSamplersForMask"
,       "display_name": "TwoSamplersForMask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["result latent"]
    }
,   "TiledKSamplerProvider": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"tooltip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"],{"tooltip":"noise schedule"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
,               "tile_width": ["INT",{"default":512,"min":320,"max":16384,"step":64,"tooltip":"Sets the width of the tile to be used in TiledKSampler."}]
,               "tile_height": ["INT",{"default":512,"min":320,"max":16384,"step":64,"tooltip":"Sets the height of the tile to be used in TiledKSampler."}]
,               "tiling_strategy": [["random","padded","simple"],{"tooltip":"Sets the tiling strategy for TiledKSampler."}]
,               "basic_pipe": ["BASIC_PIPE",{"tooltip":"basic_pipe input for sampling"}]
            }
        }
,       "input_order": {
            "required": ["seed","steps","cfg","sampler_name","scheduler","denoise","tile_width","tile_height","tiling_strategy","basic_pipe"]
        }
,       "output": ["KSAMPLER"]
,       "output_is_list": [false]
,       "output_name": ["KSAMPLER"]
,       "name": "TiledKSamplerProvider"
,       "display_name": "TiledKSamplerProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["sampler wrapper. (Can be used when generating a regional_prompt.)"]
    }
,   "KSamplerAdvancedProvider": {
        "input": {
            "required": {
                "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"toolip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"toolip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"],{"toolip":"noise schedule"}]
,               "sigma_factor": ["FLOAT",{"default":1,"min":0,"max":10,"step":0.01,"toolip":"Multiplier of noise schedule"}]
,               "basic_pipe": ["BASIC_PIPE",{"toolip":"basic_pipe input for sampling"}]
            }
,           "optional": {
                "sampler_opt": ["SAMPLER",{"toolip":"[OPTIONAL] Uses the passed sampler instead of internal impact_sampler."}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC",{"toolip":"[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]
            }
        }
,       "input_order": {
            "required": ["cfg","sampler_name","scheduler","sigma_factor","basic_pipe"]
,           "optional": ["sampler_opt","scheduler_func_opt"]
        }
,       "output": ["KSAMPLER_ADVANCED"]
,       "output_is_list": [false]
,       "output_name": ["KSAMPLER_ADVANCED"]
,       "name": "KSamplerAdvancedProvider"
,       "display_name": "KSamplerAdvancedProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["sampler wrapper. (Can be used when generating a regional_prompt.)"]
    }
,   "TwoAdvancedSamplersForMask": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
,               "samples": ["LATENT",{"tooltip":"input latent image"}]
,               "base_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"Sampler to apply to the region outside the mask."}]
,               "mask_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"Sampler to apply to the masked region."}]
,               "mask": ["MASK",{"tooltip":"region mask"}]
,               "overlap_factor": ["INT",{"default":10,"min":0,"max":10000,"tooltip":"To smooth the seams of the region boundaries, expand the mask by the overlap_factor amount to overlap with other regions."}]
            }
        }
,       "input_order": {
            "required": ["seed","steps","denoise","samples","base_sampler","mask_sampler","mask","overlap_factor"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "TwoAdvancedSamplersForMask"
,       "display_name": "TwoAdvancedSamplersForMask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Sampler"
,       "output_node": false
,       "output_tooltips": ["result latent"]
    }
,   "ImpactNegativeConditioningPlaceholder": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ImpactNegativeConditioningPlaceholder"
,       "display_name": "Negative Cond Placeholder"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/sampling"
,       "output_node": false
,       "output_tooltips": ["This is a Placeholder for the FLUX model that does not use Negative Conditioning."]
    }
,   "PreviewBridge": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "image": ["STRING",{"default":""}]
            }
,           "optional": {
                "block": ["BOOLEAN",{"default":false,"label_on":"if_empty_mask","label_off":"never","tooltip":"is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped."}]
,               "restore_mask": [["never","always","if_same_size"],{"tooltip":"if_same_size: If the changed input image is the same size as the previous image, restore using the last saved mask\nalways: Whenever the input image changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`"}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","image"]
,           "optional": ["block","restore_mask"]
,           "hidden": ["unique_id","extra_pnginfo"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "PreviewBridge"
,       "display_name": "Preview Bridge (Image)"
,       "description": "This is a feature that allows you to edit and send a Mask over a image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "PreviewBridgeLatent": {
        "input": {
            "required": {
                "latent": ["LATENT"]
,               "image": ["STRING",{"default":""}]
,               "preview_method": [["Latent2RGB-FLUX.1","Latent2RGB-SDXL","Latent2RGB-SD15","Latent2RGB-SD3","Latent2RGB-SD-X4","Latent2RGB-Playground-2.5","Latent2RGB-SC-Prior","Latent2RGB-SC-B","TAEF1","TAESDXL","TAESD15","TAESD3"]]
            }
,           "optional": {
                "vae_opt": ["VAE"]
,               "block": ["BOOLEAN",{"default":false,"label_on":"if_empty_mask","label_off":"never","tooltip":"is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped. Instead, it returns a white mask."}]
,               "restore_mask": [["never","always","if_same_size"],{"tooltip":"if_same_size: If the changed input latent is the same size as the previous latent, restore using the last saved mask\nalways: Whenever the input latent changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`\nIf the input latent already has a mask, do not restore mask."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["latent","image","preview_method"]
,           "optional": ["vae_opt","block","restore_mask"]
,           "hidden": ["unique_id","prompt","extra_pnginfo"]
        }
,       "output": ["LATENT","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["LATENT","MASK"]
,       "name": "PreviewBridgeLatent"
,       "display_name": "Preview Bridge (Latent)"
,       "description": "This is a feature that allows you to edit and send a Mask over a latent image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "ImageSender": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "filename_prefix": ["STRING",{"default":"ImgSender"}]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["images","filename_prefix","link_id"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImageSender"
,       "display_name": "Image Sender"
,       "description": "Saves the input images to your ComfyUI output directory."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "ImageReceiver": {
        "input": {
            "required": {
                "image": [["example.png"]]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "save_to_workflow": ["BOOLEAN",{"default":false}]
,               "image_data": ["STRING",{"multiline":false}]
,               "trigger_always": ["BOOLEAN",{"default":false,"label_on":"enable","label_off":"disable"}]
            }
        }
,       "input_order": {
            "required": ["image","link_id","save_to_workflow","image_data","trigger_always"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "ImageReceiver"
,       "display_name": "Image Receiver"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "LatentSender": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "filename_prefix": ["STRING",{"default":"latents/LatentSender"}]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "preview_method": [["Latent2RGB-SDXL","Latent2RGB-SD15","TAESDXL","TAESD15"]]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["samples","filename_prefix","link_id","preview_method"]
,           "hidden": ["prompt","extra_pnginfo"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "LatentSender"
,       "display_name": "LatentSender"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "LatentReceiver": {
        "input": {
            "required": {
                "latent": [[]]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "trigger_always": ["BOOLEAN",{"default":false,"label_on":"enable","label_off":"disable"}]
            }
        }
,       "input_order": {
            "required": ["latent","link_id","trigger_always"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "LatentReceiver"
,       "display_name": "LatentReceiver"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImageMaskSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":4,"step":1}]
,               "images1": ["IMAGE"]
            }
,           "optional": {
                "mask1_opt": ["MASK"]
,               "images2_opt": ["IMAGE"]
,               "mask2_opt": ["MASK"]
,               "images3_opt": ["IMAGE"]
,               "mask3_opt": ["MASK"]
,               "images4_opt": ["IMAGE"]
,               "mask4_opt": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["select","images1"]
,           "optional": ["mask1_opt","images2_opt","mask2_opt","images3_opt","mask3_opt","images4_opt","mask4_opt"]
        }
,       "output": ["IMAGE","MASK"]
,       "output_is_list": [false,false]
,       "output_name": ["IMAGE","MASK"]
,       "name": "ImageMaskSwitch"
,       "display_name": "Switch (images, mask)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "LatentSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":999999,"step":1,"tooltip":"The input number you want to output among the inputs"}]
,               "sel_mode": ["BOOLEAN",{"default":false,"label_on":"select_on_prompt","label_off":"select_on_execution","forceInput":false,"tooltip":"In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]
            }
,           "optional": {
                "input1": ["*",{"lazy":true,"tooltip":"Any input. When connected, one more input slot is added."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["select","sel_mode"]
,           "optional": ["input1"]
,           "hidden": ["unique_id","extra_pnginfo"]
        }
,       "output": ["*","STRING","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["selected_value","selected_label","selected_index"]
,       "name": "LatentSwitch"
,       "display_name": "Switch (latent/legacy)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Output is generated only from the input chosen by the 'select' value.","Slot label of the selected input slot","Outputs the select value as is"]
    }
,   "SEGSSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":999999,"step":1,"tooltip":"The input number you want to output among the inputs"}]
,               "sel_mode": ["BOOLEAN",{"default":false,"label_on":"select_on_prompt","label_off":"select_on_execution","forceInput":false,"tooltip":"In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]
            }
,           "optional": {
                "input1": ["*",{"lazy":true,"tooltip":"Any input. When connected, one more input slot is added."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["select","sel_mode"]
,           "optional": ["input1"]
,           "hidden": ["unique_id","extra_pnginfo"]
        }
,       "output": ["*","STRING","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["selected_value","selected_label","selected_index"]
,       "name": "SEGSSwitch"
,       "display_name": "Switch (SEGS/legacy)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Output is generated only from the input chosen by the 'select' value.","Slot label of the selected input slot","Outputs the select value as is"]
    }
,   "ImpactSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":999999,"step":1,"tooltip":"The input number you want to output among the inputs"}]
,               "sel_mode": ["BOOLEAN",{"default":false,"label_on":"select_on_prompt","label_off":"select_on_execution","forceInput":false,"tooltip":"In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]
            }
,           "optional": {
                "input1": ["*",{"lazy":true,"tooltip":"Any input. When connected, one more input slot is added."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["select","sel_mode"]
,           "optional": ["input1"]
,           "hidden": ["unique_id","extra_pnginfo"]
        }
,       "output": ["*","STRING","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["selected_value","selected_label","selected_index"]
,       "name": "ImpactSwitch"
,       "display_name": "Switch (Any)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Output is generated only from the input chosen by the 'select' value.","Slot label of the selected input slot","Outputs the select value as is"]
    }
,   "ImpactInversedSwitch": {
        "input": {
            "required": {
                "select": ["INT",{"default":1,"min":1,"max":999999,"step":1,"tooltip":"The output number you want to send from the input"}]
,               "input": ["*",{"tooltip":"Any input. When connected, one more input slot is added."}]
            }
,           "optional": {
                "sel_mode": ["BOOLEAN",{"default":false,"label_on":"select_on_prompt","label_off":"select_on_execution","forceInput":false,"tooltip":"In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["select","input"]
,           "optional": ["sel_mode"]
,           "hidden": ["prompt","unique_id"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactInversedSwitch"
,       "display_name": "Inversed Switch (Any)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Output occurs only from the output selected by the 'select' value.\nWhen slots are connected, additional slots are created."]
    }
,   "ImpactWildcardProcessor": {
        "input": {
            "required": {
                "wildcard_text": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "populated_text": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Populate","label_off":"Fixed"}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
            }
        }
,       "input_order": {
            "required": ["wildcard_text","populated_text","mode","seed","Select to add Wildcard"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "ImpactWildcardProcessor"
,       "display_name": "ImpactWildcardProcessor"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Prompt"
,       "output_node": false
    }
,   "ImpactWildcardEncode": {
        "input": {
            "required": {
                "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "wildcard_text": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "populated_text": ["STRING",{"multiline":true,"dynamicPrompts":false}]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Populate","label_off":"Fixed"}]
,               "Select to add LoRA": [["Select the LoRA to add to the text"]]
,               "Select to add Wildcard": [["Select the Wildcard to add to the text"]]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["model","clip","wildcard_text","populated_text","mode","Select to add LoRA","Select to add Wildcard","seed"]
        }
,       "output": ["MODEL","CLIP","CONDITIONING","STRING"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["model","clip","conditioning","populated_text"]
,       "name": "ImpactWildcardEncode"
,       "display_name": "ImpactWildcardEncode"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Prompt"
,       "output_node": false
    }
,   "SEGSUpscaler": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "model": ["MODEL"]
,               "clip": ["CLIP"]
,               "vae": ["VAE"]
,               "rescale_factor": ["FLOAT",{"default":2,"min":0.01,"max":100,"step":0.01}]
,               "resampling_method": [["lanczos","nearest","bilinear","bicubic"]]
,               "supersample": [["true","false"]]
,               "rounding_modulus": ["INT",{"default":8,"min":8,"max":1024,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "positive": ["CONDITIONING"]
,               "negative": ["CONDITIONING"]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "upscaler_hook_opt": ["UPSCALER_HOOK"]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","model","clip","vae","rescale_factor","resampling_method","supersample","rounding_modulus","seed","steps","cfg","sampler_name","scheduler","positive","negative","denoise","feather","inpaint_model","noise_mask_feather"]
,           "optional": ["upscale_model_opt","upscaler_hook_opt","scheduler_func_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "SEGSUpscaler"
,       "display_name": "Upscaler (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "SEGSUpscalerPipe": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "basic_pipe": ["BASIC_PIPE"]
,               "rescale_factor": ["FLOAT",{"default":2,"min":0.01,"max":100,"step":0.01}]
,               "resampling_method": [["lanczos","nearest","bilinear","bicubic"]]
,               "supersample": [["true","false"]]
,               "rounding_modulus": ["INT",{"default":8,"min":8,"max":1024,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
            }
,           "optional": {
                "upscale_model_opt": ["UPSCALE_MODEL"]
,               "upscaler_hook_opt": ["UPSCALER_HOOK"]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","basic_pipe","rescale_factor","resampling_method","supersample","rounding_modulus","seed","steps","cfg","sampler_name","scheduler","denoise","feather","inpaint_model","noise_mask_feather"]
,           "optional": ["upscale_model_opt","upscaler_hook_opt","scheduler_func_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "SEGSUpscalerPipe"
,       "display_name": "Upscaler (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Upscale"
,       "output_node": false
    }
,   "SEGSDetailer": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":768,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "noise_mask": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "force_inpaint": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled"}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
,               "batch_size": ["INT",{"default":1,"min":1,"max":100}]
,               "cycle": ["INT",{"default":1,"min":1,"max":10,"step":1}]
            }
,           "optional": {
                "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "inpaint_model": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","noise_mask","force_inpaint","basic_pipe","refiner_ratio","batch_size","cycle"]
,           "optional": ["refiner_basic_pipe_opt","inpaint_model","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["SEGS","IMAGE"]
,       "output_is_list": [false,true]
,       "output_name": ["segs","cnet_images"]
,       "name": "SEGSDetailer"
,       "display_name": "SEGSDetailer"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "SEGSPaste": {
        "input": {
            "required": {
                "image": ["IMAGE"]
,               "segs": ["SEGS"]
,               "feather": ["INT",{"default":5,"min":0,"max":100,"step":1}]
,               "alpha": ["INT",{"default":255,"min":0,"max":255,"step":1}]
            }
,           "optional": {
                "ref_image_opt": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image","segs","feather","alpha"]
,           "optional": ["ref_image_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "SEGSPaste"
,       "display_name": "SEGSPaste"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "SEGSPreview": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "alpha_mode": ["BOOLEAN",{"default":true,"label_on":"enable","label_off":"disable"}]
,               "min_alpha": ["FLOAT",{"default":0.2,"min":0,"max":1,"step":0.01}]
            }
,           "optional": {
                "fallback_image_opt": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["segs","alpha_mode","min_alpha"]
,           "optional": ["fallback_image_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "SEGSPreview"
,       "display_name": "SEGSPreview"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "SEGSPreviewCNet": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "SEGSPreviewCNet"
,       "display_name": "SEGSPreview (CNET Image)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": true
    }
,   "SEGSToImageList": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
,           "optional": {
                "fallback_image_opt": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["segs"]
,           "optional": ["fallback_image_opt"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "SEGSToImageList"
,       "display_name": "SEGSToImageList"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSToMaskList": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["MASK"]
,       "output_is_list": [true]
,       "output_name": ["MASK"]
,       "name": "ImpactSEGSToMaskList"
,       "display_name": "SEGS to Mask List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSToMaskBatch": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactSEGSToMaskBatch"
,       "display_name": "SEGS to Mask Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSConcat": {
        "input": {
            "required": {
                "segs1": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs1"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSEGSConcat"
,       "display_name": "SEGS Concat"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSPicker": {
        "input": {
            "required": {
                "picks": ["STRING",{"multiline":true,"dynamicPrompts":false,"pysssss.autocomplete":false}]
,               "segs": ["SEGS"]
            }
,           "optional": {
                "fallback_image_opt": ["IMAGE"]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["picks","segs"]
,           "optional": ["fallback_image_opt"]
,           "hidden": ["unique_id"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSEGSPicker"
,       "display_name": "Picker (SEGS)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeTileSEGS": {
        "input": {
            "required": {
                "images": ["IMAGE"]
,               "bbox_size": ["INT",{"default":512,"min":64,"max":4096,"step":8}]
,               "crop_factor": ["FLOAT",{"default":3,"min":1,"max":10,"step":0.01}]
,               "min_overlap": ["INT",{"default":5,"min":0,"max":512,"step":1}]
,               "filter_segs_dilation": ["INT",{"default":20,"min":-255,"max":255,"step":1}]
,               "mask_irregularity": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01}]
,               "irregular_mask_mode": [["Reuse fast","Reuse quality","All random fast","All random quality"]]
            }
,           "optional": {
                "filter_in_segs_opt": ["SEGS"]
,               "filter_out_segs_opt": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["images","bbox_size","crop_factor","min_overlap","filter_segs_dilation","mask_irregularity","irregular_mask_mode"]
,           "optional": ["filter_in_segs_opt","filter_out_segs_opt"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactMakeTileSEGS"
,       "display_name": "Make Tile SEGS"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/__for_testing"
,       "output_node": false
    }
,   "ImpactSEGSMerge": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSEGSMerge"
,       "display_name": "SEGS Merge"
,       "description": "SEGS contains multiple SEGs. SEGS Merge integrates several SEGs into a single merged SEG. The label is changed to `merged` and the confidence becomes the minimum confidence. The applied controlnet and cropped_image are removed."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "SEGSDetailerForAnimateDiff": {
        "input": {
            "required": {
                "image_frames": ["IMAGE"]
,               "segs": ["SEGS"]
,               "guide_size": ["FLOAT",{"default":512,"min":64,"max":16384,"step":8}]
,               "guide_size_for": ["BOOLEAN",{"default":true,"label_on":"bbox","label_off":"crop_region"}]
,               "max_size": ["FLOAT",{"default":768,"min":64,"max":16384,"step":8}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"]]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,               "denoise": ["FLOAT",{"default":0.5,"min":0.0001,"max":1,"step":0.01}]
,               "basic_pipe": ["BASIC_PIPE"]
,               "refiner_ratio": ["FLOAT",{"default":0.2,"min":0,"max":1}]
            }
,           "optional": {
                "refiner_basic_pipe_opt": ["BASIC_PIPE"]
,               "noise_mask_feather": ["INT",{"default":20,"min":0,"max":100,"step":1}]
,               "scheduler_func_opt": ["SCHEDULER_FUNC"]
            }
        }
,       "input_order": {
            "required": ["image_frames","segs","guide_size","guide_size_for","max_size","seed","steps","cfg","sampler_name","scheduler","denoise","basic_pipe","refiner_ratio"]
,           "optional": ["refiner_basic_pipe_opt","noise_mask_feather","scheduler_func_opt"]
        }
,       "output": ["SEGS","IMAGE"]
,       "output_is_list": [false,true]
,       "output_name": ["segs","cnet_images"]
,       "name": "SEGSDetailerForAnimateDiff"
,       "display_name": "SEGSDetailer For AnimateDiff (SEGS/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Detailer"
,       "output_node": false
    }
,   "ImpactKSamplerBasicPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE",{"tooltip":"basic_pipe input for sampling"}]
,               "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"tooltip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"],{"tooltip":"noise schedule"}]
,               "latent_image": ["LATENT",{"tooltip":"input latent image"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
            }
,           "optional": {
                "scheduler_func_opt": ["SCHEDULER_FUNC",{"tooltip":"[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]
            }
        }
,       "input_order": {
            "required": ["basic_pipe","seed","steps","cfg","sampler_name","scheduler","latent_image","denoise"]
,           "optional": ["scheduler_func_opt"]
        }
,       "output": ["BASIC_PIPE","LATENT","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["BASIC_PIPE","LATENT","VAE"]
,       "name": "ImpactKSamplerBasicPipe"
,       "display_name": "KSampler (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/sampling"
,       "output_node": false
,       "output_tooltips": ["passthrough input basic_pipe","result latent","VAE in basic_pipe"]
    }
,   "ImpactKSamplerAdvancedBasicPipe": {
        "input": {
            "required": {
                "basic_pipe": ["BASIC_PIPE",{"tooltip":"basic_pipe input for sampling"}]
,               "add_noise": ["BOOLEAN",{"default":true,"label_on":"enable","label_off":"disable","tooltip":"Whether to add noise"}]
,               "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "cfg": ["FLOAT",{"default":8,"min":0,"max":100,"tooltip":"classifier free guidance value"}]
,               "sampler_name": [["euler","euler_cfg_pp","euler_ancestral","euler_ancestral_cfg_pp","heun","heunpp2","dpm_2","dpm_2_ancestral","lms","dpm_fast","dpm_adaptive","dpmpp_2s_ancestral","dpmpp_2s_ancestral_cfg_pp","dpmpp_sde","dpmpp_sde_gpu","dpmpp_2m","dpmpp_2m_cfg_pp","dpmpp_2m_sde","dpmpp_2m_sde_gpu","dpmpp_3m_sde","dpmpp_3m_sde_gpu","ddpm","lcm","ipndm","ipndm_v","deis","ddim","uni_pc","uni_pc_bh2"],{"tooltip":"sampler"}]
,               "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"],{"tooltip":"noise schedule"}]
,               "latent_image": ["LATENT",{"tooltip":"input latent image"}]
,               "start_at_step": ["INT",{"default":0,"min":0,"max":10000,"tooltip":"The starting step of the sampling to be applied at this node within the range of 'steps'."}]
,               "end_at_step": ["INT",{"default":10000,"min":0,"max":10000,"tooltip":"The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."}]
,               "return_with_leftover_noise": ["BOOLEAN",{"default":false,"label_on":"enable","label_off":"disable","tooltip":"Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."}]
            }
,           "optional": {
                "scheduler_func_opt": ["SCHEDULER_FUNC",{"tooltip":"[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]
            }
        }
,       "input_order": {
            "required": ["basic_pipe","add_noise","noise_seed","steps","cfg","sampler_name","scheduler","latent_image","start_at_step","end_at_step","return_with_leftover_noise"]
,           "optional": ["scheduler_func_opt"]
        }
,       "output": ["BASIC_PIPE","LATENT","VAE"]
,       "output_is_list": [false,false,false]
,       "output_name": ["BASIC_PIPE","LATENT","VAE"]
,       "name": "ImpactKSamplerAdvancedBasicPipe"
,       "display_name": "KSampler (Advanced/pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/sampling"
,       "output_node": false
,       "output_tooltips": ["passthrough input basic_pipe","result latent","VAE in basic_pipe"]
    }
,   "ReencodeLatent": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "tile_mode": [["None","Both","Decode(input) only","Encode(output) only"]]
,               "input_vae": ["VAE"]
,               "output_vae": ["VAE"]
,               "tile_size": ["INT",{"default":512,"min":320,"max":4096,"step":64}]
            }
        }
,       "input_order": {
            "required": ["samples","tile_mode","input_vae","output_vae","tile_size"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "ReencodeLatent"
,       "display_name": "Reencode Latent"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ReencodeLatentPipe": {
        "input": {
            "required": {
                "samples": ["LATENT"]
,               "tile_mode": [["None","Both","Decode(input) only","Encode(output) only"]]
,               "input_basic_pipe": ["BASIC_PIPE"]
,               "output_basic_pipe": ["BASIC_PIPE"]
            }
        }
,       "input_order": {
            "required": ["samples","tile_mode","input_basic_pipe","output_basic_pipe"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "ReencodeLatentPipe"
,       "display_name": "Reencode Latent (pipe)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactImageBatchToImageList": {
        "input": {
            "required": {
                "image": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "ImpactImageBatchToImageList"
,       "display_name": "Image Batch to Image List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeImageList": {
        "input": {
            "required": {
                "image1": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image1"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [true]
,       "output_name": ["IMAGE"]
,       "name": "ImpactMakeImageList"
,       "display_name": "Make Image List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeImageBatch": {
        "input": {
            "required": {
                "image1": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["image1"]
        }
,       "output": ["IMAGE"]
,       "output_is_list": [false]
,       "output_name": ["IMAGE"]
,       "name": "ImpactMakeImageBatch"
,       "display_name": "Make Image Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeAnyList": {
        "input": {
            "required": {
            }
,           "optional": {
                "value1": ["*"]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["value1"]
        }
,       "output": ["*"]
,       "output_is_list": [true]
,       "output_name": ["*"]
,       "name": "ImpactMakeAnyList"
,       "display_name": "Make List (Any)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeMaskList": {
        "input": {
            "required": {
                "mask1": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1"]
        }
,       "output": ["MASK"]
,       "output_is_list": [true]
,       "output_name": ["MASK"]
,       "name": "ImpactMakeMaskList"
,       "display_name": "Make Mask List"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactMakeMaskBatch": {
        "input": {
            "required": {
                "mask1": ["MASK"]
            }
        }
,       "input_order": {
            "required": ["mask1"]
        }
,       "output": ["MASK"]
,       "output_is_list": [false]
,       "output_name": ["MASK"]
,       "name": "ImpactMakeMaskBatch"
,       "display_name": "Make Mask Batch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "RegionalSampler": {
        "input": {
            "required": {
                "seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "seed_2nd": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Additional noise seed. The behavior is determined by seed_2nd_mode."}]
,               "seed_2nd_mode": [["ignore","fixed","seed+seed_2nd","seed-seed_2nd","increment","decrement","randomize"],{"tooltip":"application method of seed_2nd. 1) ignore: Do not use seed_2nd. In the base only sampling stage, the seed is applied as a noise seed, and in the regional sampling stage, denoising is performed as it is without additional noise. 2) Others: In the base only sampling stage, the seed is applied as a noise seed, and once it is closed so that there is no leftover noise, new noise is added with seed_2nd and the regional samping stage is performed. a) fixed: Use seed_2nd as it is as an additional noise seed. b) seed+seed_2nd: Apply the value of seed+seed_2nd as an additional noise seed. c) seed-seed_2nd: Apply the value of seed-seed_2nd as an additional noise seed. d) increment: Not implemented yet. Same with fixed. e) decrement: Not implemented yet. Same with fixed. f) randomize: Not implemented yet. Same with fixed."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "base_only_steps": ["INT",{"default":2,"min":0,"max":10000,"tooltip":"total sampling steps"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]
,               "samples": ["LATENT",{"tooltip":"input latent image"}]
,               "base_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"The sampler applied outside the area set by the regional_prompt."}]
,               "regional_prompts": ["REGIONAL_PROMPTS",{"tooltip":"The prompt applied to each region"}]
,               "overlap_factor": ["INT",{"default":10,"min":0,"max":10000,"tooltip":"To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."}]
,               "restore_latent": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled","tooltip":"At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."}]
,               "additional_mode": [["DISABLE","ratio additional","ratio between"],{"default":"ratio between","tooltip":"..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."}]
,               "additional_sampler": [["AUTO","euler","heun","heunpp2","dpm_2","dpm_fast","dpmpp_2m","ddpm"],{"tooltip":"1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."}]
,               "additional_sigma_ratio": ["FLOAT",{"default":0.3,"min":0,"max":1,"step":0.01,"tooltip":"Multiplier of noise schedule to be applied according to additional_mode."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["seed","seed_2nd","seed_2nd_mode","steps","base_only_steps","denoise","samples","base_sampler","regional_prompts","overlap_factor","restore_latent","additional_mode","additional_sampler","additional_sigma_ratio"]
,           "hidden": ["unique_id"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "RegionalSampler"
,       "display_name": "RegionalSampler"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Regional"
,       "output_node": false
,       "output_tooltips": ["result latent"]
    }
,   "RegionalSamplerAdvanced": {
        "input": {
            "required": {
                "add_noise": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled","tooltip":"Whether to add noise"}]
,               "noise_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Random seed to use for generating CPU noise for sampling."}]
,               "steps": ["INT",{"default":20,"min":1,"max":10000,"tooltip":"total sampling steps"}]
,               "start_at_step": ["INT",{"default":0,"min":0,"max":10000,"tooltip":"The starting step of the sampling to be applied at this node within the range of 'steps'."}]
,               "end_at_step": ["INT",{"default":10000,"min":0,"max":10000,"tooltip":"The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."}]
,               "overlap_factor": ["INT",{"default":10,"min":0,"max":10000,"tooltip":"To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."}]
,               "restore_latent": ["BOOLEAN",{"default":true,"label_on":"enabled","label_off":"disabled","tooltip":"At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."}]
,               "return_with_leftover_noise": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled","tooltip":"Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."}]
,               "latent_image": ["LATENT",{"tooltip":"input latent image"}]
,               "base_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"The sampler applied outside the area set by the regional_prompt."}]
,               "regional_prompts": ["REGIONAL_PROMPTS",{"tooltip":"The prompt applied to each region"}]
,               "additional_mode": [["DISABLE","ratio additional","ratio between"],{"default":"ratio between","tooltip":"..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."}]
,               "additional_sampler": [["AUTO","euler","heun","heunpp2","dpm_2","dpm_fast","dpmpp_2m","ddpm"],{"tooltip":"1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."}]
,               "additional_sigma_ratio": ["FLOAT",{"default":0.3,"min":0,"max":1,"step":0.01,"tooltip":"Multiplier of noise schedule to be applied according to additional_mode."}]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["add_noise","noise_seed","steps","start_at_step","end_at_step","overlap_factor","restore_latent","return_with_leftover_noise","latent_image","base_sampler","regional_prompts","additional_mode","additional_sampler","additional_sigma_ratio"]
,           "hidden": ["unique_id"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "RegionalSamplerAdvanced"
,       "display_name": "RegionalSamplerAdvanced"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Regional"
,       "output_node": false
,       "output_tooltips": ["result latent"]
    }
,   "CombineRegionalPrompts": {
        "input": {
            "required": {
                "regional_prompts1": ["REGIONAL_PROMPTS",{"tooltip":"input regional_prompts. (Connecting to the input slot increases the number of additional slots.)"}]
            }
        }
,       "input_order": {
            "required": ["regional_prompts1"]
        }
,       "output": ["REGIONAL_PROMPTS"]
,       "output_is_list": [false]
,       "output_name": ["REGIONAL_PROMPTS"]
,       "name": "CombineRegionalPrompts"
,       "display_name": "CombineRegionalPrompts"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Regional"
,       "output_node": false
,       "output_tooltips": ["Combined REGIONAL_PROMPTS"]
    }
,   "RegionalPrompt": {
        "input": {
            "required": {
                "mask": ["MASK",{"tooltip":"region mask"}]
,               "advanced_sampler": ["KSAMPLER_ADVANCED",{"tooltip":"sampler for specified region"}]
            }
,           "optional": {
                "variation_seed": ["INT",{"default":0,"min":0,"max":18446744073709552000,"tooltip":"Sets the extra seed to be used for noise variation."}]
,               "variation_strength": ["FLOAT",{"default":0,"min":0,"max":1,"step":0.01,"tooltip":"Sets the strength of the noise variation."}]
,               "variation_method": [["linear","slerp"],{"tooltip":"Sets how the original noise and extra noise are blended together."}]
            }
        }
,       "input_order": {
            "required": ["mask","advanced_sampler"]
,           "optional": ["variation_seed","variation_strength","variation_method"]
        }
,       "output": ["REGIONAL_PROMPTS"]
,       "output_is_list": [false]
,       "output_name": ["REGIONAL_PROMPTS"]
,       "name": "RegionalPrompt"
,       "display_name": "RegionalPrompt"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Regional"
,       "output_node": false
,       "output_tooltips": ["regional prompts. (Can be used in the RegionalSampler.)"]
    }
,   "ImpactCombineConditionings": {
        "input": {
            "required": {
                "conditioning1": ["CONDITIONING",{"tooltip":"input conditionings. (Connecting to the input slot increases the number of additional slots.)"}]
            }
        }
,       "input_order": {
            "required": ["conditioning1"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ImpactCombineConditionings"
,       "display_name": "Combine Conditionings"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Combined conditioning"]
    }
,   "ImpactConcatConditionings": {
        "input": {
            "required": {
                "conditioning1": ["CONDITIONING",{"tooltip":"input conditionings. (Connecting to the input slot increases the number of additional slots.)"}]
            }
        }
,       "input_order": {
            "required": ["conditioning1"]
        }
,       "output": ["CONDITIONING"]
,       "output_is_list": [false]
,       "output_name": ["CONDITIONING"]
,       "name": "ImpactConcatConditionings"
,       "display_name": "Concat Conditionings"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
,       "output_tooltips": ["Concatenated conditioning"]
    }
,   "ImpactSEGSLabelAssign": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "labels": ["STRING",{"multiline":true,"placeholder":"List the label to be assigned in order of segs, separated by commas"}]
            }
        }
,       "input_order": {
            "required": ["segs","labels"]
        }
,       "output": ["SEGS"]
,       "output_is_list": [false]
,       "output_name": ["SEGS"]
,       "name": "ImpactSEGSLabelAssign"
,       "display_name": "SEGS Assign (label)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSLabelFilter": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "preset": [["all","hand","face","mouth","eyes","eyebrows","pupils","left_eyebrow","left_eye","left_pupil","right_eyebrow","right_eye","right_pupil","short_sleeved_shirt","long_sleeved_shirt","short_sleeved_outwear","long_sleeved_outwear","vest","sling","shorts","trousers","skirt","short_sleeved_dress","long_sleeved_dress","vest_dress","sling_dress","person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"]]
,               "labels": ["STRING",{"multiline":true,"placeholder":"List the types of segments to be allowed, separated by commas"}]
            }
        }
,       "input_order": {
            "required": ["segs","preset","labels"]
        }
,       "output": ["SEGS","SEGS"]
,       "output_is_list": [false,false]
,       "output_name": ["filtered_SEGS","remained_SEGS"]
,       "name": "ImpactSEGSLabelFilter"
,       "display_name": "SEGS Filter (label)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSRangeFilter": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "target": [["area(=w*h)","width","height","x1","y1","x2","y2","length_percent","confidence(0-100)"]]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"inside","label_off":"outside"}]
,               "min_value": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "max_value": ["INT",{"default":67108864,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["segs","target","mode","min_value","max_value"]
        }
,       "output": ["SEGS","SEGS"]
,       "output_is_list": [false,false]
,       "output_name": ["filtered_SEGS","remained_SEGS"]
,       "name": "ImpactSEGSRangeFilter"
,       "display_name": "SEGS Filter (range)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactSEGSOrderedFilter": {
        "input": {
            "required": {
                "segs": ["SEGS"]
,               "target": [["area(=w*h)","width","height","x1","y1","x2","y2","confidence"]]
,               "order": ["BOOLEAN",{"default":true,"label_on":"descending","label_off":"ascending"}]
,               "take_start": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
,               "take_count": ["INT",{"default":1,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["segs","target","order","take_start","take_count"]
        }
,       "output": ["SEGS","SEGS"]
,       "output_is_list": [false,false]
,       "output_name": ["filtered_SEGS","remained_SEGS"]
,       "name": "ImpactSEGSOrderedFilter"
,       "display_name": "SEGS Filter (ordered)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactCompare": {
        "input": {
            "required": {
                "cmp": [["a = b","a <> b","a > b","a < b","a >= b","a <= b","tt","ff"]]
,               "a": ["*"]
,               "b": ["*"]
            }
        }
,       "input_order": {
            "required": ["cmp","a","b"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactCompare"
,       "display_name": "ImpactCompare"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactConditionalBranch": {
        "input": {
            "required": {
                "cond": ["BOOLEAN"]
,               "tt_value": ["*",{"lazy":true}]
,               "ff_value": ["*",{"lazy":true}]
            }
        }
,       "input_order": {
            "required": ["cond","tt_value","ff_value"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactConditionalBranch"
,       "display_name": "ImpactConditionalBranch"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactConditionalBranchSelMode": {
        "input": {
            "required": {
                "cond": ["BOOLEAN"]
            }
,           "optional": {
                "tt_value": ["*"]
,               "ff_value": ["*"]
            }
        }
,       "input_order": {
            "required": ["cond"]
,           "optional": ["tt_value","ff_value"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactConditionalBranchSelMode"
,       "display_name": "ImpactConditionalBranchSelMode"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactIfNone": {
        "input": {
            "required": {
            }
,           "optional": {
                "signal": ["*"]
,               "any_input": ["*"]
            }
        }
,       "input_order": {
            "required": []
,           "optional": ["signal","any_input"]
        }
,       "output": ["*","BOOLEAN"]
,       "output_is_list": [false,false]
,       "output_name": ["signal_opt","bool"]
,       "name": "ImpactIfNone"
,       "display_name": "ImpactIfNone"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactConvertDataType": {
        "input": {
            "required": {
                "value": ["*"]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["STRING","FLOAT","INT","BOOLEAN"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["STRING","FLOAT","INT","BOOLEAN"]
,       "name": "ImpactConvertDataType"
,       "display_name": "ImpactConvertDataType"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactLogicalOperators": {
        "input": {
            "required": {
                "operator": [["and","or","xor"]]
,               "bool_a": ["BOOLEAN",{"forceInput":true}]
,               "bool_b": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["operator","bool_a","bool_b"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactLogicalOperators"
,       "display_name": "ImpactLogicalOperators"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactInt": {
        "input": {
            "required": {
                "value": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["INT"]
,       "output_is_list": [false]
,       "output_name": ["INT"]
,       "name": "ImpactInt"
,       "display_name": "ImpactInt"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactFloat": {
        "input": {
            "required": {
                "value": ["FLOAT",{"default":1,"min":-3.402823466e+38,"max":3.402823466e+38}]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["FLOAT"]
,       "output_is_list": [false]
,       "output_name": ["FLOAT"]
,       "name": "ImpactFloat"
,       "display_name": "ImpactFloat"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactBoolean": {
        "input": {
            "required": {
                "value": ["BOOLEAN",{"default":false}]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactBoolean"
,       "display_name": "ImpactBoolean"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactValueSender": {
        "input": {
            "required": {
                "value": ["*"]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
            }
,           "optional": {
                "signal_opt": ["*"]
            }
        }
,       "input_order": {
            "required": ["value","link_id"]
,           "optional": ["signal_opt"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal"]
,       "name": "ImpactValueSender"
,       "display_name": "ImpactValueSender"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": true
    }
,   "ImpactValueReceiver": {
        "input": {
            "required": {
                "typ": [["STRING","INT","FLOAT","BOOLEAN"]]
,               "value": ["STRING",{"default":""}]
,               "link_id": ["INT",{"default":0,"min":0,"max":9223372036854776000,"step":1}]
            }
        }
,       "input_order": {
            "required": ["typ","value","link_id"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactValueReceiver"
,       "display_name": "ImpactValueReceiver"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactImageInfo": {
        "input": {
            "required": {
                "value": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["INT","INT","INT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["batch","height","width","channel"]
,       "name": "ImpactImageInfo"
,       "display_name": "ImpactImageInfo"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": false
    }
,   "ImpactLatentInfo": {
        "input": {
            "required": {
                "value": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["INT","INT","INT","INT"]
,       "output_is_list": [false,false,false,false]
,       "output_name": ["batch","height","width","channel"]
,       "name": "ImpactLatentInfo"
,       "display_name": "ImpactLatentInfo"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": false
    }
,   "ImpactMinMax": {
        "input": {
            "required": {
                "mode": ["BOOLEAN",{"default":true,"label_on":"max","label_off":"min"}]
,               "a": ["*"]
,               "b": ["*"]
            }
        }
,       "input_order": {
            "required": ["mode","a","b"]
        }
,       "output": ["INT"]
,       "output_is_list": [false]
,       "output_name": ["INT"]
,       "name": "ImpactMinMax"
,       "display_name": "ImpactMinMax"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": false
    }
,   "ImpactNeg": {
        "input": {
            "required": {
                "value": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["value"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactNeg"
,       "display_name": "ImpactNeg"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactConditionalStopIteration": {
        "input": {
            "required": {
                "cond": ["BOOLEAN",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["cond"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImpactConditionalStopIteration"
,       "display_name": "ImpactConditionalStopIteration"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": true
    }
,   "ImpactStringSelector": {
        "input": {
            "required": {
                "strings": ["STRING",{"multiline":true}]
,               "multiline": ["BOOLEAN",{"default":false,"label_on":"enabled","label_off":"disabled"}]
,               "select": ["INT",{"min":0,"max":9223372036854776000,"step":1,"default":0}]
            }
        }
,       "input_order": {
            "required": ["strings","multiline","select"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "ImpactStringSelector"
,       "display_name": "String Selector"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "StringListToString": {
        "input": {
            "required": {
                "join_with": ["STRING",{"default":"\\n"}]
,               "string_list": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["join_with","string_list"]
        }
,       "output": ["STRING"]
,       "output_is_list": [false]
,       "output_name": ["STRING"]
,       "name": "StringListToString"
,       "display_name": "String List to String"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "WildcardPromptFromString": {
        "input": {
            "required": {
                "string": ["STRING",{"forceInput":true}]
,               "delimiter": ["STRING",{"multiline":false,"default":"\\n"}]
,               "prefix_all": ["STRING",{"multiline":false}]
,               "postfix_all": ["STRING",{"multiline":false}]
,               "restrict_to_tags": ["STRING",{"multiline":false}]
,               "exclude_tags": ["STRING",{"multiline":false}]
            }
        }
,       "input_order": {
            "required": ["string","delimiter","prefix_all","postfix_all","restrict_to_tags","exclude_tags"]
        }
,       "output": ["STRING","STRING"]
,       "output_is_list": [false,false]
,       "output_name": ["wildcard","segs_labels"]
,       "name": "WildcardPromptFromString"
,       "display_name": "Wildcard Prompt from String"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactExecutionOrderController": {
        "input": {
            "required": {
                "signal": ["*"]
,               "value": ["*"]
            }
        }
,       "input_order": {
            "required": ["signal","value"]
        }
,       "output": ["*","*"]
,       "output_is_list": [false,false]
,       "output_name": ["signal","value"]
,       "name": "ImpactExecutionOrderController"
,       "display_name": "Execution Order Controller"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "RemoveNoiseMask": {
        "input": {
            "required": {
                "samples": ["LATENT"]
            }
        }
,       "input_order": {
            "required": ["samples"]
        }
,       "output": ["LATENT"]
,       "output_is_list": [false]
,       "output_name": ["LATENT"]
,       "name": "RemoveNoiseMask"
,       "display_name": "Remove Noise Mask"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "ImpactLogger": {
        "input": {
            "required": {
                "data": ["*"]
,               "text": ["STRING",{"multiline":true}]
            }
,           "hidden": {
                "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
,               "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["data","text"]
,           "hidden": ["prompt","extra_pnginfo","unique_id"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImpactLogger"
,       "display_name": "ImpactLogger"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Debug"
,       "output_node": true
    }
,   "ImpactDummyInput": {
        "input": {
            "required": {
            }
        }
,       "input_order": {
            "required": []
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["*"]
,       "name": "ImpactDummyInput"
,       "display_name": "ImpactDummyInput"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Debug"
,       "output_node": false
    }
,   "ImpactQueueTrigger": {
        "input": {
            "required": {
                "signal": ["*"]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Trigger","label_off":"Don't trigger"}]
            }
        }
,       "input_order": {
            "required": ["signal","mode"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal_opt"]
,       "name": "ImpactQueueTrigger"
,       "display_name": "Queue Trigger"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactQueueTriggerCountdown": {
        "input": {
            "required": {
                "count": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "total": ["INT",{"default":10,"min":1,"max":18446744073709552000}]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Trigger","label_off":"Don't trigger"}]
            }
,           "optional": {
                "signal": ["*"]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
            }
        }
,       "input_order": {
            "required": ["count","total","mode"]
,           "optional": ["signal"]
,           "hidden": ["unique_id"]
        }
,       "output": ["*","INT","INT"]
,       "output_is_list": [false,false,false]
,       "output_name": ["signal_opt","count","total"]
,       "name": "ImpactQueueTriggerCountdown"
,       "display_name": "Queue Trigger (Countdown)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactSetWidgetValue": {
        "input": {
            "required": {
                "signal": ["*"]
,               "node_id": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "widget_name": ["STRING",{"multiline":false}]
            }
,           "optional": {
                "boolean_value": ["BOOLEAN",{"forceInput":true}]
,               "int_value": ["INT",{"forceInput":true}]
,               "float_value": ["FLOAT",{"forceInput":true}]
,               "string_value": ["STRING",{"forceInput":true}]
            }
        }
,       "input_order": {
            "required": ["signal","node_id","widget_name"]
,           "optional": ["boolean_value","int_value","float_value","string_value"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal_opt"]
,       "name": "ImpactSetWidgetValue"
,       "display_name": "Set Widget Value"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactNodeSetMuteState": {
        "input": {
            "required": {
                "signal": ["*"]
,               "node_id": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "set_state": ["BOOLEAN",{"default":true,"label_on":"active","label_off":"mute"}]
            }
        }
,       "input_order": {
            "required": ["signal","node_id","set_state"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal_opt"]
,       "name": "ImpactNodeSetMuteState"
,       "display_name": "Set Mute State"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactControlBridge": {
        "input": {
            "required": {
                "value": ["*"]
,               "mode": ["BOOLEAN",{"default":true,"label_on":"Active","label_off":"Stop/Mute/Bypass"}]
,               "behavior": [["Stop","Mute","Bypass"]]
            }
,           "hidden": {
                "unique_id": "UNIQUE_ID"
,               "prompt": "PROMPT"
,               "extra_pnginfo": "EXTRA_PNGINFO"
            }
        }
,       "input_order": {
            "required": ["value","mode","behavior"]
,           "hidden": ["unique_id","prompt","extra_pnginfo"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["value"]
,       "name": "ImpactControlBridge"
,       "display_name": "Control Bridge"
,       "description": "When behavior is Stop and mode is active, the input value is passed directly to the output.\nWhen behavior is Mute/Bypass and mode is active, the node connected to the output is changed to active state.\nWhen behavior is Stop and mode is Stop/Mute/Bypass, the workflow execution of the current node is halted.\nWhen behavior is Mute/Bypass and mode is Stop/Mute/Bypass, the node connected to the output is changed to Mute/Bypass state."
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": true
    }
,   "ImpactIsNotEmptySEGS": {
        "input": {
            "required": {
                "segs": ["SEGS"]
            }
        }
,       "input_order": {
            "required": ["segs"]
        }
,       "output": ["BOOLEAN"]
,       "output_is_list": [false]
,       "output_name": ["BOOLEAN"]
,       "name": "ImpactIsNotEmptySEGS"
,       "display_name": "SEGS isn't Empty"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic"
,       "output_node": false
    }
,   "ImpactSleep": {
        "input": {
            "required": {
                "signal": ["*"]
,               "seconds": ["FLOAT",{"default":0.5,"min":0,"max":3600}]
            }
        }
,       "input_order": {
            "required": ["signal","seconds"]
        }
,       "output": ["*"]
,       "output_is_list": [false]
,       "output_name": ["signal_opt"]
,       "name": "ImpactSleep"
,       "display_name": "Sleep"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactRemoteBoolean": {
        "input": {
            "required": {
                "node_id": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "widget_name": ["STRING",{"multiline":false}]
,               "value": ["BOOLEAN",{"default":true,"label_on":"True","label_off":"False"}]
            }
        }
,       "input_order": {
            "required": ["node_id","widget_name","value"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImpactRemoteBoolean"
,       "display_name": "Remote Boolean (on prompt)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactRemoteInt": {
        "input": {
            "required": {
                "node_id": ["INT",{"default":0,"min":0,"max":18446744073709552000}]
,               "widget_name": ["STRING",{"multiline":false}]
,               "value": ["INT",{"default":0,"min":-18446744073709552000,"max":18446744073709552000}]
            }
        }
,       "input_order": {
            "required": ["node_id","widget_name","value"]
        }
,       "output": []
,       "output_is_list": []
,       "output_name": []
,       "name": "ImpactRemoteInt"
,       "display_name": "Remote Int (on prompt)"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Logic/_for_test"
,       "output_node": true
    }
,   "ImpactHFTransformersClassifierProvider": {
        "input": {
            "required": {
                "preset_repo_id": [["rizvandwiki/gender-classification-2","NTQAI/pedestrian_gender_recognition","Leilab/gender_class","ProjectPersonal/GenderClassifier","crangana/trained-gender","cledoux42/GenderNew_v002","ivensamdh/genderage2","Manual repo id"]]
,               "manual_repo_id": ["STRING",{"multiline":false}]
,               "device_mode": [["AUTO","Prefer GPU","CPU"]]
            }
        }
,       "input_order": {
            "required": ["preset_repo_id","manual_repo_id","device_mode"]
        }
,       "output": ["TRANSFORMERS_CLASSIFIER"]
,       "output_is_list": [false]
,       "output_name": ["TRANSFORMERS_CLASSIFIER"]
,       "name": "ImpactHFTransformersClassifierProvider"
,       "display_name": "HF Transformers Classifier Provider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/HuggingFace"
,       "output_node": false
    }
,   "ImpactSEGSClassify": {
        "input": {
            "required": {
                "classifier": ["TRANSFORMERS_CLASSIFIER"]
,               "segs": ["SEGS"]
,               "preset_expr": [["#Female > #Male","#Female < #Male","female > 0.5","male > 0.5","Age16to25 > 0.1","Age50to69 > 0.1","Manual expr"]]
,               "manual_expr": ["STRING",{"multiline":false}]
            }
,           "optional": {
                "ref_image_opt": ["IMAGE"]
            }
        }
,       "input_order": {
            "required": ["classifier","segs","preset_expr","manual_expr"]
,           "optional": ["ref_image_opt"]
        }
,       "output": ["SEGS","SEGS","STRING"]
,       "output_is_list": [false,false,true]
,       "output_name": ["filtered_SEGS","remained_SEGS","detected_labels"]
,       "name": "ImpactSEGSClassify"
,       "display_name": "SEGS Classify"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/HuggingFace"
,       "output_node": false
    }
,   "ImpactSchedulerAdapter": {
        "input": {
            "required": {
                "scheduler": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic"],{"defaultInput":true}]
,               "extra_scheduler": [["None","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
            }
        }
,       "input_order": {
            "required": ["scheduler","extra_scheduler"]
        }
,       "output": [["normal","karras","exponential","sgm_uniform","simple","ddim_uniform","beta","linear_quadratic","AYS SDXL","AYS SD1","AYS SVD","GITS[coeff=1.2]"]]
,       "output_is_list": [false]
,       "output_name": ["scheduler"]
,       "name": "ImpactSchedulerAdapter"
,       "display_name": "Impact Scheduler Adapter"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/Util"
,       "output_node": false
    }
,   "GITSSchedulerFuncProvider": {
        "input": {
            "required": {
                "coeff": ["FLOAT",{"default":1.2,"min":0.8,"max":1.5,"step":0.05,"tooltip":"coeff factor of GITS Scheduler"}]
,               "denoise": ["FLOAT",{"default":1,"min":0,"max":1,"step":0.01,"tooltip":"denoise amount for noise schedule"}]
            }
        }
,       "input_order": {
            "required": ["coeff","denoise"]
        }
,       "output": ["SCHEDULER_FUNC"]
,       "output_is_list": [false]
,       "output_name": ["SCHEDULER_FUNC"]
,       "name": "GITSSchedulerFuncProvider"
,       "display_name": "GITSScheduler Func Provider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack/sampling"
,       "output_node": false
,       "output_tooltips": ["Returns a function that generates a noise schedule using GITSScheduler. This can be used in place of a predetermined noise schedule to dynamically generate a noise schedule based on the steps."]
    }
,   "UltralyticsDetectorProvider": {
        "input": {
            "required": {
                "model_name": [["bbox/face_yolov8m.pt","bbox/hand_yolov8s.pt","segm/person_yolov8m-seg.pt"]]
            }
        }
,       "input_order": {
            "required": ["model_name"]
        }
,       "output": ["BBOX_DETECTOR","SEGM_DETECTOR"]
,       "output_is_list": [false,false]
,       "output_name": ["BBOX_DETECTOR","SEGM_DETECTOR"]
,       "name": "UltralyticsDetectorProvider"
,       "display_name": "UltralyticsDetectorProvider"
,       "description": ""
,       "python_module": "custom_nodes.ComfyUI-Impact-Pack"
,       "category": "ImpactPack"
,       "output_node": false
    }
}