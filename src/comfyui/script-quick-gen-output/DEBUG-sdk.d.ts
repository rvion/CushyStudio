
import type { ComfyNode } from '../../../src/core/ComfyNode'
import type { ComfyNodeMetadata } from '../../../src/types/ComfyNodeID'
import type { ComfyNodeOutput } from '../../../src/core/Slot'
import type { ComfyNodeSchemaJSON } from '../../../src/types/ComfySchemaJSON'


// CONTENT IN THIS FILE:
//
//  0. Entrypoint
//  1. Requirable
//  2. Embeddings
//  3. Suggestions
//  4. TYPES
//  5. ACCEPTABLE
//  6. ENUMS
//  7. INTERFACES
//  8. NODES
//  9. INDEX

declare global {



// 0. Entrypoint --------------------------
export interface ComfySetup {
    /* category:sampling, name:"KSampler", output:LATENT */
    KSampler(p: KSampler_input, meta?: ComfyNodeMetadata): KSampler
    /* category:loaders, name:"CheckpointLoaderSimple", output:MODEL+CLIP+VAE */
    CheckpointLoaderSimple(p: CheckpointLoaderSimple_input, meta?: ComfyNodeMetadata): CheckpointLoaderSimple
    /* category:conditioning, name:"CLIPTextEncode", output:CONDITIONING */
    CLIPTextEncode(p: CLIPTextEncode_input, meta?: ComfyNodeMetadata): CLIPTextEncode
    /* category:conditioning, name:"CLIPSetLastLayer", output:CLIP */
    CLIPSetLastLayer(p: CLIPSetLastLayer_input, meta?: ComfyNodeMetadata): CLIPSetLastLayer
    /* category:latent, name:"VAEDecode", output:IMAGE */
    VAEDecode(p: VAEDecode_input, meta?: ComfyNodeMetadata): VAEDecode
    /* category:latent, name:"VAEEncode", output:LATENT */
    VAEEncode(p: VAEEncode_input, meta?: ComfyNodeMetadata): VAEEncode
    /* category:latent_inpaint, name:"VAEEncodeForInpaint", output:LATENT */
    VAEEncodeForInpaint(p: VAEEncodeForInpaint_input, meta?: ComfyNodeMetadata): VAEEncodeForInpaint
    /* category:loaders, name:"VAELoader", output:VAE */
    VAELoader(p: VAELoader_input, meta?: ComfyNodeMetadata): VAELoader
    /* category:latent, name:"EmptyLatentImage", output:LATENT */
    EmptyLatentImage(p: EmptyLatentImage_input, meta?: ComfyNodeMetadata): EmptyLatentImage
    /* category:latent, name:"LatentUpscale", output:LATENT */
    LatentUpscale(p: LatentUpscale_input, meta?: ComfyNodeMetadata): LatentUpscale
    /* category:latent, name:"LatentUpscaleBy", output:LATENT */
    LatentUpscaleBy(p: LatentUpscaleBy_input, meta?: ComfyNodeMetadata): LatentUpscaleBy
    /* category:latent_batch, name:"LatentFromBatch", output:LATENT */
    LatentFromBatch(p: LatentFromBatch_input, meta?: ComfyNodeMetadata): LatentFromBatch
    /* category:latent_batch, name:"RepeatLatentBatch", output:LATENT */
    RepeatLatentBatch(p: RepeatLatentBatch_input, meta?: ComfyNodeMetadata): RepeatLatentBatch
    /* category:image, name:"SaveImage", output: */
    SaveImage(p: SaveImage_input, meta?: ComfyNodeMetadata): SaveImage
    /* category:image, name:"PreviewImage", output: */
    PreviewImage(p: PreviewImage_input, meta?: ComfyNodeMetadata): PreviewImage
    /* category:image, name:"LoadImage", output:IMAGE+MASK */
    LoadImage(p: LoadImage_input, meta?: ComfyNodeMetadata): LoadImage
    /* category:mask, name:"LoadImageMask", output:MASK */
    LoadImageMask(p: LoadImageMask_input, meta?: ComfyNodeMetadata): LoadImageMask
    /* category:image_upscaling, name:"ImageScale", output:IMAGE */
    ImageScale(p: ImageScale_input, meta?: ComfyNodeMetadata): ImageScale
    /* category:image_upscaling, name:"ImageScaleBy", output:IMAGE */
    ImageScaleBy(p: ImageScaleBy_input, meta?: ComfyNodeMetadata): ImageScaleBy
    /* category:image, name:"ImageInvert", output:IMAGE */
    ImageInvert(p: ImageInvert_input, meta?: ComfyNodeMetadata): ImageInvert
    /* category:image, name:"ImageBatch", output:IMAGE */
    ImageBatch(p: ImageBatch_input, meta?: ComfyNodeMetadata): ImageBatch
    /* category:image, name:"ImagePadForOutpaint", output:IMAGE+MASK */
    ImagePadForOutpaint(p: ImagePadForOutpaint_input, meta?: ComfyNodeMetadata): ImagePadForOutpaint
    /* category:image, name:"EmptyImage", output:IMAGE */
    EmptyImage(p: EmptyImage_input, meta?: ComfyNodeMetadata): EmptyImage
    /* category:conditioning, name:"ConditioningAverage", output:CONDITIONING */
    ConditioningAverage(p: ConditioningAverage_input, meta?: ComfyNodeMetadata): ConditioningAverage
    /* category:conditioning, name:"ConditioningCombine", output:CONDITIONING */
    ConditioningCombine(p: ConditioningCombine_input, meta?: ComfyNodeMetadata): ConditioningCombine
    /* category:conditioning, name:"ConditioningConcat", output:CONDITIONING */
    ConditioningConcat(p: ConditioningConcat_input, meta?: ComfyNodeMetadata): ConditioningConcat
    /* category:conditioning, name:"ConditioningSetArea", output:CONDITIONING */
    ConditioningSetArea(p: ConditioningSetArea_input, meta?: ComfyNodeMetadata): ConditioningSetArea
    /* category:conditioning, name:"ConditioningSetAreaPercentage", output:CONDITIONING */
    ConditioningSetAreaPercentage(p: ConditioningSetAreaPercentage_input, meta?: ComfyNodeMetadata): ConditioningSetAreaPercentage
    /* category:conditioning, name:"ConditioningSetAreaStrength", output:CONDITIONING */
    ConditioningSetAreaStrength(p: ConditioningSetAreaStrength_input, meta?: ComfyNodeMetadata): ConditioningSetAreaStrength
    /* category:conditioning, name:"ConditioningSetMask", output:CONDITIONING */
    ConditioningSetMask(p: ConditioningSetMask_input, meta?: ComfyNodeMetadata): ConditioningSetMask
    /* category:sampling, name:"KSamplerAdvanced", output:LATENT */
    KSamplerAdvanced(p: KSamplerAdvanced_input, meta?: ComfyNodeMetadata): KSamplerAdvanced
    /* category:latent_inpaint, name:"SetLatentNoiseMask", output:LATENT */
    SetLatentNoiseMask(p: SetLatentNoiseMask_input, meta?: ComfyNodeMetadata): SetLatentNoiseMask
    /* category:latent, name:"LatentComposite", output:LATENT */
    LatentComposite(p: LatentComposite_input, meta?: ComfyNodeMetadata): LatentComposite
    /* category:_for_testing, name:"LatentBlend", output:LATENT */
    LatentBlend(p: LatentBlend_input, meta?: ComfyNodeMetadata): LatentBlend
    /* category:latent_transform, name:"LatentRotate", output:LATENT */
    LatentRotate(p: LatentRotate_input, meta?: ComfyNodeMetadata): LatentRotate
    /* category:latent_transform, name:"LatentFlip", output:LATENT */
    LatentFlip(p: LatentFlip_input, meta?: ComfyNodeMetadata): LatentFlip
    /* category:latent_transform, name:"LatentCrop", output:LATENT */
    LatentCrop(p: LatentCrop_input, meta?: ComfyNodeMetadata): LatentCrop
    /* category:loaders, name:"LoraLoader", output:MODEL+CLIP */
    LoraLoader(p: LoraLoader_input, meta?: ComfyNodeMetadata): LoraLoader
    /* category:advanced_loaders, name:"CLIPLoader", output:CLIP */
    CLIPLoader(p: CLIPLoader_input, meta?: ComfyNodeMetadata): CLIPLoader
    /* category:advanced_loaders, name:"UNETLoader", output:MODEL */
    UNETLoader(p: UNETLoader_input, meta?: ComfyNodeMetadata): UNETLoader
    /* category:advanced_loaders, name:"DualCLIPLoader", output:CLIP */
    DualCLIPLoader(p: DualCLIPLoader_input, meta?: ComfyNodeMetadata): DualCLIPLoader
    /* category:conditioning, name:"CLIPVisionEncode", output:CLIP_VISION_OUTPUT */
    CLIPVisionEncode(p: CLIPVisionEncode_input, meta?: ComfyNodeMetadata): CLIPVisionEncode
    /* category:conditioning_style_model, name:"StyleModelApply", output:CONDITIONING */
    StyleModelApply(p: StyleModelApply_input, meta?: ComfyNodeMetadata): StyleModelApply
    /* category:conditioning, name:"unCLIPConditioning", output:CONDITIONING */
    unCLIPConditioning(p: unCLIPConditioning_input, meta?: ComfyNodeMetadata): unCLIPConditioning
    /* category:conditioning_controlnet, name:"ControlNetApply", output:CONDITIONING */
    ControlNetApply(p: ControlNetApply_input, meta?: ComfyNodeMetadata): ControlNetApply
    /* category:conditioning_controlnet, name:"ControlNetApplyAdvanced", output:positive+negative */
    ControlNetApplyAdvanced(p: ControlNetApplyAdvanced_input, meta?: ComfyNodeMetadata): ControlNetApplyAdvanced
    /* category:loaders, name:"ControlNetLoader", output:CONTROL_NET */
    ControlNetLoader(p: ControlNetLoader_input, meta?: ComfyNodeMetadata): ControlNetLoader
    /* category:loaders, name:"DiffControlNetLoader", output:CONTROL_NET */
    DiffControlNetLoader(p: DiffControlNetLoader_input, meta?: ComfyNodeMetadata): DiffControlNetLoader
    /* category:loaders, name:"StyleModelLoader", output:STYLE_MODEL */
    StyleModelLoader(p: StyleModelLoader_input, meta?: ComfyNodeMetadata): StyleModelLoader
    /* category:loaders, name:"CLIPVisionLoader", output:CLIP_VISION */
    CLIPVisionLoader(p: CLIPVisionLoader_input, meta?: ComfyNodeMetadata): CLIPVisionLoader
    /* category:_for_testing, name:"VAEDecodeTiled", output:IMAGE */
    VAEDecodeTiled(p: VAEDecodeTiled_input, meta?: ComfyNodeMetadata): VAEDecodeTiled
    /* category:_for_testing, name:"VAEEncodeTiled", output:LATENT */
    VAEEncodeTiled(p: VAEEncodeTiled_input, meta?: ComfyNodeMetadata): VAEEncodeTiled
    /* category:loaders, name:"unCLIPCheckpointLoader", output:MODEL+CLIP+VAE+CLIP_VISION */
    unCLIPCheckpointLoader(p: unCLIPCheckpointLoader_input, meta?: ComfyNodeMetadata): unCLIPCheckpointLoader
    /* category:loaders, name:"GLIGENLoader", output:GLIGEN */
    GLIGENLoader(p: GLIGENLoader_input, meta?: ComfyNodeMetadata): GLIGENLoader
    /* category:conditioning_gligen, name:"GLIGENTextBoxApply", output:CONDITIONING */
    GLIGENTextBoxApply(p: GLIGENTextBoxApply_input, meta?: ComfyNodeMetadata): GLIGENTextBoxApply
    /* category:conditioning_inpaint, name:"InpaintModelConditioning", output:positive+negative+latent */
    InpaintModelConditioning(p: InpaintModelConditioning_input, meta?: ComfyNodeMetadata): InpaintModelConditioning
    /* category:advanced_loaders, name:"CheckpointLoader", output:MODEL+CLIP+VAE */
    CheckpointLoader(p: CheckpointLoader_input, meta?: ComfyNodeMetadata): CheckpointLoader
    /* category:advanced_loaders_deprecated, name:"DiffusersLoader", output:MODEL+CLIP+VAE */
    DiffusersLoader(p: DiffusersLoader_input, meta?: ComfyNodeMetadata): DiffusersLoader
    /* category:_for_testing, name:"LoadLatent", output:LATENT */
    LoadLatent(p: LoadLatent_input, meta?: ComfyNodeMetadata): LoadLatent
    /* category:_for_testing, name:"SaveLatent", output: */
    SaveLatent(p: SaveLatent_input, meta?: ComfyNodeMetadata): SaveLatent
    /* category:advanced_conditioning, name:"ConditioningZeroOut", output:CONDITIONING */
    ConditioningZeroOut(p: ConditioningZeroOut_input, meta?: ComfyNodeMetadata): ConditioningZeroOut
    /* category:advanced_conditioning, name:"ConditioningSetTimestepRange", output:CONDITIONING */
    ConditioningSetTimestepRange(p: ConditioningSetTimestepRange_input, meta?: ComfyNodeMetadata): ConditioningSetTimestepRange
    /* category:loaders, name:"LoraLoaderModelOnly", output:MODEL */
    LoraLoaderModelOnly(p: LoraLoaderModelOnly_input, meta?: ComfyNodeMetadata): LoraLoaderModelOnly
    /* category:latent_advanced, name:"LatentAdd", output:LATENT */
    LatentAdd(p: LatentAdd_input, meta?: ComfyNodeMetadata): LatentAdd
    /* category:latent_advanced, name:"LatentSubtract", output:LATENT */
    LatentSubtract(p: LatentSubtract_input, meta?: ComfyNodeMetadata): LatentSubtract
    /* category:latent_advanced, name:"LatentMultiply", output:LATENT */
    LatentMultiply(p: LatentMultiply_input, meta?: ComfyNodeMetadata): LatentMultiply
    /* category:latent_advanced, name:"LatentInterpolate", output:LATENT */
    LatentInterpolate(p: LatentInterpolate_input, meta?: ComfyNodeMetadata): LatentInterpolate
    /* category:latent_batch, name:"LatentBatch", output:LATENT */
    LatentBatch(p: LatentBatch_input, meta?: ComfyNodeMetadata): LatentBatch
    /* category:latent_advanced, name:"LatentBatchSeedBehavior", output:LATENT */
    LatentBatchSeedBehavior(p: LatentBatchSeedBehavior_input, meta?: ComfyNodeMetadata): LatentBatchSeedBehavior
    /* category:latent_advanced_operations, name:"LatentApplyOperation", output:LATENT */
    LatentApplyOperation(p: LatentApplyOperation_input, meta?: ComfyNodeMetadata): LatentApplyOperation
    /* category:latent_advanced_operations, name:"LatentApplyOperationCFG", output:MODEL */
    LatentApplyOperationCFG(p: LatentApplyOperationCFG_input, meta?: ComfyNodeMetadata): LatentApplyOperationCFG
    /* category:latent_advanced_operations, name:"LatentOperationTonemapReinhard", output:LATENT_OPERATION */
    LatentOperationTonemapReinhard(p: LatentOperationTonemapReinhard_input, meta?: ComfyNodeMetadata): LatentOperationTonemapReinhard
    /* category:latent_advanced_operations, name:"LatentOperationSharpen", output:LATENT_OPERATION */
    LatentOperationSharpen(p: LatentOperationSharpen_input, meta?: ComfyNodeMetadata): LatentOperationSharpen
    /* category:loaders, name:"HypernetworkLoader", output:MODEL */
    HypernetworkLoader(p: HypernetworkLoader_input, meta?: ComfyNodeMetadata): HypernetworkLoader
    /* category:loaders, name:"UpscaleModelLoader", output:UPSCALE_MODEL */
    UpscaleModelLoader(p: UpscaleModelLoader_input, meta?: ComfyNodeMetadata): UpscaleModelLoader
    /* category:image_upscaling, name:"ImageUpscaleWithModel", output:IMAGE */
    ImageUpscaleWithModel(p: ImageUpscaleWithModel_input, meta?: ComfyNodeMetadata): ImageUpscaleWithModel
    /* category:image_postprocessing, name:"ImageBlend", output:IMAGE */
    ImageBlend(p: ImageBlend_input, meta?: ComfyNodeMetadata): ImageBlend
    /* category:image_postprocessing, name:"ImageBlur", output:IMAGE */
    ImageBlur(p: ImageBlur_input, meta?: ComfyNodeMetadata): ImageBlur
    /* category:image_postprocessing, name:"ImageQuantize", output:IMAGE */
    ImageQuantize(p: ImageQuantize_input, meta?: ComfyNodeMetadata): ImageQuantize
    /* category:image_postprocessing, name:"ImageSharpen", output:IMAGE */
    ImageSharpen(p: ImageSharpen_input, meta?: ComfyNodeMetadata): ImageSharpen
    /* category:image_upscaling, name:"ImageScaleToTotalPixels", output:IMAGE */
    ImageScaleToTotalPixels(p: ImageScaleToTotalPixels_input, meta?: ComfyNodeMetadata): ImageScaleToTotalPixels
    /* category:latent, name:"LatentCompositeMasked", output:LATENT */
    LatentCompositeMasked(p: LatentCompositeMasked_input, meta?: ComfyNodeMetadata): LatentCompositeMasked
    /* category:image, name:"ImageCompositeMasked", output:IMAGE */
    ImageCompositeMasked(p: ImageCompositeMasked_input, meta?: ComfyNodeMetadata): ImageCompositeMasked
    /* category:mask, name:"MaskToImage", output:IMAGE */
    MaskToImage(p: MaskToImage_input, meta?: ComfyNodeMetadata): MaskToImage
    /* category:mask, name:"ImageToMask", output:MASK */
    ImageToMask(p: ImageToMask_input, meta?: ComfyNodeMetadata): ImageToMask
    /* category:mask, name:"ImageColorToMask", output:MASK */
    ImageColorToMask(p: ImageColorToMask_input, meta?: ComfyNodeMetadata): ImageColorToMask
    /* category:mask, name:"SolidMask", output:MASK */
    SolidMask(p: SolidMask_input, meta?: ComfyNodeMetadata): SolidMask
    /* category:mask, name:"InvertMask", output:MASK */
    InvertMask(p: InvertMask_input, meta?: ComfyNodeMetadata): InvertMask
    /* category:mask, name:"CropMask", output:MASK */
    CropMask(p: CropMask_input, meta?: ComfyNodeMetadata): CropMask
    /* category:mask, name:"MaskComposite", output:MASK */
    MaskComposite(p: MaskComposite_input, meta?: ComfyNodeMetadata): MaskComposite
    /* category:mask, name:"FeatherMask", output:MASK */
    FeatherMask(p: FeatherMask_input, meta?: ComfyNodeMetadata): FeatherMask
    /* category:mask, name:"GrowMask", output:MASK */
    GrowMask(p: GrowMask_input, meta?: ComfyNodeMetadata): GrowMask
    /* category:mask, name:"ThresholdMask", output:MASK */
    ThresholdMask(p: ThresholdMask_input, meta?: ComfyNodeMetadata): ThresholdMask
    /* category:mask_compositing, name:"PorterDuffImageComposite", output:IMAGE+MASK */
    PorterDuffImageComposite(p: PorterDuffImageComposite_input, meta?: ComfyNodeMetadata): PorterDuffImageComposite
    /* category:mask_compositing, name:"SplitImageWithAlpha", output:IMAGE+MASK */
    SplitImageWithAlpha(p: SplitImageWithAlpha_input, meta?: ComfyNodeMetadata): SplitImageWithAlpha
    /* category:mask_compositing, name:"JoinImageWithAlpha", output:IMAGE */
    JoinImageWithAlpha(p: JoinImageWithAlpha_input, meta?: ComfyNodeMetadata): JoinImageWithAlpha
    /* category:latent_batch, name:"RebatchLatents", output:LATENT */
    RebatchLatents(p: RebatchLatents_input, meta?: ComfyNodeMetadata): RebatchLatents
    /* category:image_batch, name:"RebatchImages", output:IMAGE */
    RebatchImages(p: RebatchImages_input, meta?: ComfyNodeMetadata): RebatchImages
    /* category:advanced_model_merging, name:"ModelMergeSimple", output:MODEL */
    ModelMergeSimple(p: ModelMergeSimple_input, meta?: ComfyNodeMetadata): ModelMergeSimple
    /* category:advanced_model_merging, name:"ModelMergeBlocks", output:MODEL */
    ModelMergeBlocks(p: ModelMergeBlocks_input, meta?: ComfyNodeMetadata): ModelMergeBlocks
    /* category:advanced_model_merging, name:"ModelMergeSubtract", output:MODEL */
    ModelMergeSubtract(p: ModelMergeSubtract_input, meta?: ComfyNodeMetadata): ModelMergeSubtract
    /* category:advanced_model_merging, name:"ModelMergeAdd", output:MODEL */
    ModelMergeAdd(p: ModelMergeAdd_input, meta?: ComfyNodeMetadata): ModelMergeAdd
    /* category:advanced_model_merging, name:"CheckpointSave", output: */
    CheckpointSave(p: CheckpointSave_input, meta?: ComfyNodeMetadata): CheckpointSave
    /* category:advanced_model_merging, name:"CLIPMergeSimple", output:CLIP */
    CLIPMergeSimple(p: CLIPMergeSimple_input, meta?: ComfyNodeMetadata): CLIPMergeSimple
    /* category:advanced_model_merging, name:"CLIPMergeSubtract", output:CLIP */
    CLIPMergeSubtract(p: CLIPMergeSubtract_input, meta?: ComfyNodeMetadata): CLIPMergeSubtract
    /* category:advanced_model_merging, name:"CLIPMergeAdd", output:CLIP */
    CLIPMergeAdd(p: CLIPMergeAdd_input, meta?: ComfyNodeMetadata): CLIPMergeAdd
    /* category:advanced_model_merging, name:"CLIPSave", output: */
    CLIPSave(p: CLIPSave_input, meta?: ComfyNodeMetadata): CLIPSave
    /* category:advanced_model_merging, name:"VAESave", output: */
    VAESave(p: VAESave_input, meta?: ComfyNodeMetadata): VAESave
    /* category:advanced_model_merging, name:"ModelSave", output: */
    ModelSave(p: ModelSave_input, meta?: ComfyNodeMetadata): ModelSave
    /* category:model_patches_unet, name:"TomePatchModel", output:MODEL */
    TomePatchModel(p: TomePatchModel_input, meta?: ComfyNodeMetadata): TomePatchModel
    /* category:advanced_conditioning, name:"CLIPTextEncodeSDXLRefiner", output:CONDITIONING */
    CLIPTextEncodeSDXLRefiner(p: CLIPTextEncodeSDXLRefiner_input, meta?: ComfyNodeMetadata): CLIPTextEncodeSDXLRefiner
    /* category:advanced_conditioning, name:"CLIPTextEncodeSDXL", output:CONDITIONING */
    CLIPTextEncodeSDXL(p: CLIPTextEncodeSDXL_input, meta?: ComfyNodeMetadata): CLIPTextEncodeSDXL
    /* category:image_preprocessors, name:"Canny", output:IMAGE */
    Canny(p: Canny_input, meta?: ComfyNodeMetadata): Canny
    /* category:model_patches_unet, name:"FreeU", output:MODEL */
    FreeU(p: FreeU_input, meta?: ComfyNodeMetadata): FreeU
    /* category:model_patches_unet, name:"FreeU_V2", output:MODEL */
    FreeU$_V2(p: FreeU$_V2_input, meta?: ComfyNodeMetadata): FreeU$_V2
    /* category:sampling_custom_sampling, name:"SamplerCustom", output:output+denoised_output */
    SamplerCustom(p: SamplerCustom_input, meta?: ComfyNodeMetadata): SamplerCustom
    /* category:sampling_custom_sampling_schedulers, name:"BasicScheduler", output:SIGMAS */
    BasicScheduler(p: BasicScheduler_input, meta?: ComfyNodeMetadata): BasicScheduler
    /* category:sampling_custom_sampling_schedulers, name:"KarrasScheduler", output:SIGMAS */
    KarrasScheduler(p: KarrasScheduler_input, meta?: ComfyNodeMetadata): KarrasScheduler
    /* category:sampling_custom_sampling_schedulers, name:"ExponentialScheduler", output:SIGMAS */
    ExponentialScheduler(p: ExponentialScheduler_input, meta?: ComfyNodeMetadata): ExponentialScheduler
    /* category:sampling_custom_sampling_schedulers, name:"PolyexponentialScheduler", output:SIGMAS */
    PolyexponentialScheduler(p: PolyexponentialScheduler_input, meta?: ComfyNodeMetadata): PolyexponentialScheduler
    /* category:sampling_custom_sampling_schedulers, name:"LaplaceScheduler", output:SIGMAS */
    LaplaceScheduler(p: LaplaceScheduler_input, meta?: ComfyNodeMetadata): LaplaceScheduler
    /* category:sampling_custom_sampling_schedulers, name:"VPScheduler", output:SIGMAS */
    VPScheduler(p: VPScheduler_input, meta?: ComfyNodeMetadata): VPScheduler
    /* category:sampling_custom_sampling_schedulers, name:"BetaSamplingScheduler", output:SIGMAS */
    BetaSamplingScheduler(p: BetaSamplingScheduler_input, meta?: ComfyNodeMetadata): BetaSamplingScheduler
    /* category:sampling_custom_sampling_schedulers, name:"SDTurboScheduler", output:SIGMAS */
    SDTurboScheduler(p: SDTurboScheduler_input, meta?: ComfyNodeMetadata): SDTurboScheduler
    /* category:sampling_custom_sampling_samplers, name:"KSamplerSelect", output:SAMPLER */
    KSamplerSelect(p: KSamplerSelect_input, meta?: ComfyNodeMetadata): KSamplerSelect
    /* category:sampling_custom_sampling_samplers, name:"SamplerEulerAncestral", output:SAMPLER */
    SamplerEulerAncestral(p: SamplerEulerAncestral_input, meta?: ComfyNodeMetadata): SamplerEulerAncestral
    /* category:sampling_custom_sampling_samplers, name:"SamplerEulerAncestralCFGPP", output:SAMPLER */
    SamplerEulerAncestralCFGPP(p: SamplerEulerAncestralCFGPP_input, meta?: ComfyNodeMetadata): SamplerEulerAncestralCFGPP
    /* category:sampling_custom_sampling_samplers, name:"SamplerLMS", output:SAMPLER */
    SamplerLMS(p: SamplerLMS_input, meta?: ComfyNodeMetadata): SamplerLMS
    /* category:sampling_custom_sampling_samplers, name:"SamplerDPMPP_3M_SDE", output:SAMPLER */
    SamplerDPMPP$_3M$_SDE(p: SamplerDPMPP$_3M$_SDE_input, meta?: ComfyNodeMetadata): SamplerDPMPP$_3M$_SDE
    /* category:sampling_custom_sampling_samplers, name:"SamplerDPMPP_2M_SDE", output:SAMPLER */
    SamplerDPMPP$_2M$_SDE(p: SamplerDPMPP$_2M$_SDE_input, meta?: ComfyNodeMetadata): SamplerDPMPP$_2M$_SDE
    /* category:sampling_custom_sampling_samplers, name:"SamplerDPMPP_SDE", output:SAMPLER */
    SamplerDPMPP$_SDE(p: SamplerDPMPP$_SDE_input, meta?: ComfyNodeMetadata): SamplerDPMPP$_SDE
    /* category:sampling_custom_sampling_samplers, name:"SamplerDPMPP_2S_Ancestral", output:SAMPLER */
    SamplerDPMPP$_2S$_Ancestral(p: SamplerDPMPP$_2S$_Ancestral_input, meta?: ComfyNodeMetadata): SamplerDPMPP$_2S$_Ancestral
    /* category:sampling_custom_sampling_samplers, name:"SamplerDPMAdaptative", output:SAMPLER */
    SamplerDPMAdaptative(p: SamplerDPMAdaptative_input, meta?: ComfyNodeMetadata): SamplerDPMAdaptative
    /* category:sampling_custom_sampling_sigmas, name:"SplitSigmas", output:high_sigmas+low_sigmas */
    SplitSigmas(p: SplitSigmas_input, meta?: ComfyNodeMetadata): SplitSigmas
    /* category:sampling_custom_sampling_sigmas, name:"SplitSigmasDenoise", output:high_sigmas+low_sigmas */
    SplitSigmasDenoise(p: SplitSigmasDenoise_input, meta?: ComfyNodeMetadata): SplitSigmasDenoise
    /* category:sampling_custom_sampling_sigmas, name:"FlipSigmas", output:SIGMAS */
    FlipSigmas(p: FlipSigmas_input, meta?: ComfyNodeMetadata): FlipSigmas
    /* category:sampling_custom_sampling_guiders, name:"CFGGuider", output:GUIDER */
    CFGGuider(p: CFGGuider_input, meta?: ComfyNodeMetadata): CFGGuider
    /* category:sampling_custom_sampling_guiders, name:"DualCFGGuider", output:GUIDER */
    DualCFGGuider(p: DualCFGGuider_input, meta?: ComfyNodeMetadata): DualCFGGuider
    /* category:sampling_custom_sampling_guiders, name:"BasicGuider", output:GUIDER */
    BasicGuider(p: BasicGuider_input, meta?: ComfyNodeMetadata): BasicGuider
    /* category:sampling_custom_sampling_noise, name:"RandomNoise", output:NOISE */
    RandomNoise(p: RandomNoise_input, meta?: ComfyNodeMetadata): RandomNoise
    /* category:sampling_custom_sampling_noise, name:"DisableNoise", output:NOISE */
    DisableNoise(p: DisableNoise_input, meta?: ComfyNodeMetadata): DisableNoise
    /* category:_for_testing_custom_sampling_noise, name:"AddNoise", output:LATENT */
    AddNoise(p: AddNoise_input, meta?: ComfyNodeMetadata): AddNoise
    /* category:sampling_custom_sampling, name:"SamplerCustomAdvanced", output:output+denoised_output */
    SamplerCustomAdvanced(p: SamplerCustomAdvanced_input, meta?: ComfyNodeMetadata): SamplerCustomAdvanced
    /* category:model_patches_unet, name:"HyperTile", output:MODEL */
    HyperTile(p: HyperTile_input, meta?: ComfyNodeMetadata): HyperTile
    /* category:advanced_model, name:"ModelSamplingDiscrete", output:MODEL */
    ModelSamplingDiscrete(p: ModelSamplingDiscrete_input, meta?: ComfyNodeMetadata): ModelSamplingDiscrete
    /* category:advanced_model, name:"ModelSamplingContinuousEDM", output:MODEL */
    ModelSamplingContinuousEDM(p: ModelSamplingContinuousEDM_input, meta?: ComfyNodeMetadata): ModelSamplingContinuousEDM
    /* category:advanced_model, name:"ModelSamplingContinuousV", output:MODEL */
    ModelSamplingContinuousV(p: ModelSamplingContinuousV_input, meta?: ComfyNodeMetadata): ModelSamplingContinuousV
    /* category:advanced_model, name:"ModelSamplingStableCascade", output:MODEL */
    ModelSamplingStableCascade(p: ModelSamplingStableCascade_input, meta?: ComfyNodeMetadata): ModelSamplingStableCascade
    /* category:advanced_model, name:"ModelSamplingSD3", output:MODEL */
    ModelSamplingSD3(p: ModelSamplingSD3_input, meta?: ComfyNodeMetadata): ModelSamplingSD3
    /* category:advanced_model, name:"ModelSamplingAuraFlow", output:MODEL */
    ModelSamplingAuraFlow(p: ModelSamplingAuraFlow_input, meta?: ComfyNodeMetadata): ModelSamplingAuraFlow
    /* category:advanced_model, name:"ModelSamplingFlux", output:MODEL */
    ModelSamplingFlux(p: ModelSamplingFlux_input, meta?: ComfyNodeMetadata): ModelSamplingFlux
    /* category:advanced_model, name:"RescaleCFG", output:MODEL */
    RescaleCFG(p: RescaleCFG_input, meta?: ComfyNodeMetadata): RescaleCFG
    /* category:model_patches_unet, name:"PatchModelAddDownscale", output:MODEL */
    PatchModelAddDownscale(p: PatchModelAddDownscale_input, meta?: ComfyNodeMetadata): PatchModelAddDownscale
    /* category:image_transform, name:"ImageCrop", output:IMAGE */
    ImageCrop(p: ImageCrop_input, meta?: ComfyNodeMetadata): ImageCrop
    /* category:image_batch, name:"RepeatImageBatch", output:IMAGE */
    RepeatImageBatch(p: RepeatImageBatch_input, meta?: ComfyNodeMetadata): RepeatImageBatch
    /* category:image_batch, name:"ImageFromBatch", output:IMAGE */
    ImageFromBatch(p: ImageFromBatch_input, meta?: ComfyNodeMetadata): ImageFromBatch
    /* category:image_animation, name:"SaveAnimatedWEBP", output: */
    SaveAnimatedWEBP(p: SaveAnimatedWEBP_input, meta?: ComfyNodeMetadata): SaveAnimatedWEBP
    /* category:image_animation, name:"SaveAnimatedPNG", output: */
    SaveAnimatedPNG(p: SaveAnimatedPNG_input, meta?: ComfyNodeMetadata): SaveAnimatedPNG
    /* category:loaders_video_models, name:"ImageOnlyCheckpointLoader", output:MODEL+CLIP_VISION+VAE */
    ImageOnlyCheckpointLoader(p: ImageOnlyCheckpointLoader_input, meta?: ComfyNodeMetadata): ImageOnlyCheckpointLoader
    /* category:conditioning_video_models, name:"SVD_img2vid_Conditioning", output:positive+negative+latent */
    SVD$_img2vid$_Conditioning(p: SVD$_img2vid$_Conditioning_input, meta?: ComfyNodeMetadata): SVD$_img2vid$_Conditioning
    /* category:sampling_video_models, name:"VideoLinearCFGGuidance", output:MODEL */
    VideoLinearCFGGuidance(p: VideoLinearCFGGuidance_input, meta?: ComfyNodeMetadata): VideoLinearCFGGuidance
    /* category:sampling_video_models, name:"VideoTriangleCFGGuidance", output:MODEL */
    VideoTriangleCFGGuidance(p: VideoTriangleCFGGuidance_input, meta?: ComfyNodeMetadata): VideoTriangleCFGGuidance
    /* category:advanced_model_merging, name:"ImageOnlyCheckpointSave", output: */
    ImageOnlyCheckpointSave(p: ImageOnlyCheckpointSave_input, meta?: ComfyNodeMetadata): ImageOnlyCheckpointSave
    /* category:_for_testing, name:"SelfAttentionGuidance", output:MODEL */
    SelfAttentionGuidance(p: SelfAttentionGuidance_input, meta?: ComfyNodeMetadata): SelfAttentionGuidance
    /* category:_for_testing, name:"PerpNeg", output:MODEL */
    PerpNeg(p: PerpNeg_input, meta?: ComfyNodeMetadata): PerpNeg
    /* category:_for_testing, name:"PerpNegGuider", output:GUIDER */
    PerpNegGuider(p: PerpNegGuider_input, meta?: ComfyNodeMetadata): PerpNegGuider
    /* category:conditioning_3d_models, name:"StableZero123_Conditioning", output:positive+negative+latent */
    StableZero123$_Conditioning(p: StableZero123$_Conditioning_input, meta?: ComfyNodeMetadata): StableZero123$_Conditioning
    /* category:conditioning_3d_models, name:"StableZero123_Conditioning_Batched", output:positive+negative+latent */
    StableZero123$_Conditioning$_Batched(p: StableZero123$_Conditioning$_Batched_input, meta?: ComfyNodeMetadata): StableZero123$_Conditioning$_Batched
    /* category:conditioning_3d_models, name:"SV3D_Conditioning", output:positive+negative+latent */
    SV3D$_Conditioning(p: SV3D$_Conditioning_input, meta?: ComfyNodeMetadata): SV3D$_Conditioning
    /* category:conditioning_upscale_diffusion, name:"SD_4XUpscale_Conditioning", output:positive+negative+latent */
    SD$_4XUpscale$_Conditioning(p: SD$_4XUpscale$_Conditioning_input, meta?: ComfyNodeMetadata): SD$_4XUpscale$_Conditioning
    /* category:_for_testing_photomaker, name:"PhotoMakerLoader", output:PHOTOMAKER */
    PhotoMakerLoader(p: PhotoMakerLoader_input, meta?: ComfyNodeMetadata): PhotoMakerLoader
    /* category:_for_testing_photomaker, name:"PhotoMakerEncode", output:CONDITIONING */
    PhotoMakerEncode(p: PhotoMakerEncode_input, meta?: ComfyNodeMetadata): PhotoMakerEncode
    /* category:_for_testing_conditioning, name:"CLIPTextEncodeControlnet", output:CONDITIONING */
    CLIPTextEncodeControlnet(p: CLIPTextEncodeControlnet_input, meta?: ComfyNodeMetadata): CLIPTextEncodeControlnet
    /* category:image_postprocessing, name:"Morphology", output:IMAGE */
    Morphology(p: Morphology_input, meta?: ComfyNodeMetadata): Morphology
    /* category:latent_stable_cascade, name:"StableCascade_EmptyLatentImage", output:stage_c+stage_b */
    StableCascade$_EmptyLatentImage(p: StableCascade$_EmptyLatentImage_input, meta?: ComfyNodeMetadata): StableCascade$_EmptyLatentImage
    /* category:conditioning_stable_cascade, name:"StableCascade_StageB_Conditioning", output:CONDITIONING */
    StableCascade$_StageB$_Conditioning(p: StableCascade$_StageB$_Conditioning_input, meta?: ComfyNodeMetadata): StableCascade$_StageB$_Conditioning
    /* category:latent_stable_cascade, name:"StableCascade_StageC_VAEEncode", output:stage_c+stage_b */
    StableCascade$_StageC$_VAEEncode(p: StableCascade$_StageC$_VAEEncode_input, meta?: ComfyNodeMetadata): StableCascade$_StageC$_VAEEncode
    /* category:_for_testing_stable_cascade, name:"StableCascade_SuperResolutionControlnet", output:controlnet_input+stage_c+stage_b */
    StableCascade$_SuperResolutionControlnet(p: StableCascade$_SuperResolutionControlnet_input, meta?: ComfyNodeMetadata): StableCascade$_SuperResolutionControlnet
    /* category:_for_testing, name:"DifferentialDiffusion", output:MODEL */
    DifferentialDiffusion(p: DifferentialDiffusion_input, meta?: ComfyNodeMetadata): DifferentialDiffusion
    /* category:conditioning_instructpix2pix, name:"InstructPixToPixConditioning", output:positive+negative+latent */
    InstructPixToPixConditioning(p: InstructPixToPixConditioning_input, meta?: ComfyNodeMetadata): InstructPixToPixConditioning
    /* category:advanced_model_merging_model_specific, name:"ModelMergeSD1", output:MODEL */
    ModelMergeSD1(p: ModelMergeSD1_input, meta?: ComfyNodeMetadata): ModelMergeSD1
    /* category:advanced_model_merging_model_specific, name:"ModelMergeSD2", output:MODEL */
    ModelMergeSD2(p: ModelMergeSD2_input, meta?: ComfyNodeMetadata): ModelMergeSD2
    /* category:advanced_model_merging_model_specific, name:"ModelMergeSDXL", output:MODEL */
    ModelMergeSDXL(p: ModelMergeSDXL_input, meta?: ComfyNodeMetadata): ModelMergeSDXL
    /* category:advanced_model_merging_model_specific, name:"ModelMergeSD3_2B", output:MODEL */
    ModelMergeSD3$_2B(p: ModelMergeSD3$_2B_input, meta?: ComfyNodeMetadata): ModelMergeSD3$_2B
    /* category:advanced_model_merging_model_specific, name:"ModelMergeFlux1", output:MODEL */
    ModelMergeFlux1(p: ModelMergeFlux1_input, meta?: ComfyNodeMetadata): ModelMergeFlux1
    /* category:advanced_model_merging_model_specific, name:"ModelMergeSD35_Large", output:MODEL */
    ModelMergeSD35$_Large(p: ModelMergeSD35$_Large_input, meta?: ComfyNodeMetadata): ModelMergeSD35$_Large
    /* category:model_patches_unet, name:"PerturbedAttentionGuidance", output:MODEL */
    PerturbedAttentionGuidance(p: PerturbedAttentionGuidance_input, meta?: ComfyNodeMetadata): PerturbedAttentionGuidance
    /* category:sampling_custom_sampling_schedulers, name:"AlignYourStepsScheduler", output:SIGMAS */
    AlignYourStepsScheduler(p: AlignYourStepsScheduler_input, meta?: ComfyNodeMetadata): AlignYourStepsScheduler
    /* category:_for_testing_attention_experiments, name:"UNetSelfAttentionMultiply", output:MODEL */
    UNetSelfAttentionMultiply(p: UNetSelfAttentionMultiply_input, meta?: ComfyNodeMetadata): UNetSelfAttentionMultiply
    /* category:_for_testing_attention_experiments, name:"UNetCrossAttentionMultiply", output:MODEL */
    UNetCrossAttentionMultiply(p: UNetCrossAttentionMultiply_input, meta?: ComfyNodeMetadata): UNetCrossAttentionMultiply
    /* category:_for_testing_attention_experiments, name:"CLIPAttentionMultiply", output:CLIP */
    CLIPAttentionMultiply(p: CLIPAttentionMultiply_input, meta?: ComfyNodeMetadata): CLIPAttentionMultiply
    /* category:_for_testing_attention_experiments, name:"UNetTemporalAttentionMultiply", output:MODEL */
    UNetTemporalAttentionMultiply(p: UNetTemporalAttentionMultiply_input, meta?: ComfyNodeMetadata): UNetTemporalAttentionMultiply
    /* category:sampling_custom_sampling_samplers, name:"SamplerLCMUpscale", output:SAMPLER */
    SamplerLCMUpscale(p: SamplerLCMUpscale_input, meta?: ComfyNodeMetadata): SamplerLCMUpscale
    /* category:_for_testing, name:"SamplerEulerCFGpp", output:SAMPLER */
    SamplerEulerCFGpp(p: SamplerEulerCFGpp_input, meta?: ComfyNodeMetadata): SamplerEulerCFGpp
    /* category:image, name:"WebcamCapture", output:IMAGE */
    WebcamCapture(p: WebcamCapture_input, meta?: ComfyNodeMetadata): WebcamCapture
    /* category:latent_audio, name:"EmptyLatentAudio", output:LATENT */
    EmptyLatentAudio(p: EmptyLatentAudio_input, meta?: ComfyNodeMetadata): EmptyLatentAudio
    /* category:latent_audio, name:"VAEEncodeAudio", output:LATENT */
    VAEEncodeAudio(p: VAEEncodeAudio_input, meta?: ComfyNodeMetadata): VAEEncodeAudio
    /* category:latent_audio, name:"VAEDecodeAudio", output:AUDIO */
    VAEDecodeAudio(p: VAEDecodeAudio_input, meta?: ComfyNodeMetadata): VAEDecodeAudio
    /* category:audio, name:"SaveAudio", output: */
    SaveAudio(p: SaveAudio_input, meta?: ComfyNodeMetadata): SaveAudio
    /* category:audio, name:"LoadAudio", output:AUDIO */
    LoadAudio(p: LoadAudio_input, meta?: ComfyNodeMetadata): LoadAudio
    /* category:audio, name:"PreviewAudio", output: */
    PreviewAudio(p: PreviewAudio_input, meta?: ComfyNodeMetadata): PreviewAudio
    /* category:advanced_loaders, name:"TripleCLIPLoader", output:CLIP */
    TripleCLIPLoader(p: TripleCLIPLoader_input, meta?: ComfyNodeMetadata): TripleCLIPLoader
    /* category:latent_sd3, name:"EmptySD3LatentImage", output:LATENT */
    EmptySD3LatentImage(p: EmptySD3LatentImage_input, meta?: ComfyNodeMetadata): EmptySD3LatentImage
    /* category:advanced_conditioning, name:"CLIPTextEncodeSD3", output:CONDITIONING */
    CLIPTextEncodeSD3(p: CLIPTextEncodeSD3_input, meta?: ComfyNodeMetadata): CLIPTextEncodeSD3
    /* category:conditioning_controlnet, name:"ControlNetApplySD3", output:positive+negative */
    ControlNetApplySD3(p: ControlNetApplySD3_input, meta?: ComfyNodeMetadata): ControlNetApplySD3
    /* category:advanced_guidance, name:"SkipLayerGuidanceSD3", output:MODEL */
    SkipLayerGuidanceSD3(p: SkipLayerGuidanceSD3_input, meta?: ComfyNodeMetadata): SkipLayerGuidanceSD3
    /* category:sampling_custom_sampling_schedulers, name:"GITSScheduler", output:SIGMAS */
    GITSScheduler(p: GITSScheduler_input, meta?: ComfyNodeMetadata): GITSScheduler
    /* category:conditioning_controlnet, name:"SetUnionControlNetType", output:CONTROL_NET */
    SetUnionControlNetType(p: SetUnionControlNetType_input, meta?: ComfyNodeMetadata): SetUnionControlNetType
    /* category:conditioning_controlnet, name:"ControlNetInpaintingAliMamaApply", output:positive+negative */
    ControlNetInpaintingAliMamaApply(p: ControlNetInpaintingAliMamaApply_input, meta?: ComfyNodeMetadata): ControlNetInpaintingAliMamaApply
    /* category:advanced_conditioning, name:"CLIPTextEncodeHunyuanDiT", output:CONDITIONING */
    CLIPTextEncodeHunyuanDiT(p: CLIPTextEncodeHunyuanDiT_input, meta?: ComfyNodeMetadata): CLIPTextEncodeHunyuanDiT
    /* category:advanced_conditioning_flux, name:"CLIPTextEncodeFlux", output:CONDITIONING */
    CLIPTextEncodeFlux(p: CLIPTextEncodeFlux_input, meta?: ComfyNodeMetadata): CLIPTextEncodeFlux
    /* category:advanced_conditioning_flux, name:"FluxGuidance", output:CONDITIONING */
    FluxGuidance(p: FluxGuidance_input, meta?: ComfyNodeMetadata): FluxGuidance
    /* category:_for_testing, name:"LoraSave", output: */
    LoraSave(p: LoraSave_input, meta?: ComfyNodeMetadata): LoraSave
    /* category:_for_testing, name:"TorchCompileModel", output:MODEL */
    TorchCompileModel(p: TorchCompileModel_input, meta?: ComfyNodeMetadata): TorchCompileModel
    /* category:latent_mochi, name:"EmptyMochiLatentVideo", output:LATENT */
    EmptyMochiLatentVideo(p: EmptyMochiLatentVideo_input, meta?: ComfyNodeMetadata): EmptyMochiLatentVideo
    /* category:A8R8, name:"Base64ImageInput", output:IMAGE */
    Base64ImageInput(p: Base64ImageInput_input, meta?: ComfyNodeMetadata): Base64ImageInput
    /* category:A8R8, name:"Base64ImageOutput", output: */
    Base64ImageOutput(p: Base64ImageOutput_input, meta?: ComfyNodeMetadata): Base64ImageOutput
    /* category:A8R8, name:"AttentionCouple", output:model */
    AttentionCouple(p: AttentionCouple_input, meta?: ComfyNodeMetadata): AttentionCouple
    /* category:A8R8, name:"AttentionCoupleRegion", output:region */
    AttentionCoupleRegion(p: AttentionCoupleRegion_input, meta?: ComfyNodeMetadata): AttentionCoupleRegion
    /* category:A8R8, name:"AttentionCoupleRegions", output:regions */
    AttentionCoupleRegions(p: AttentionCoupleRegions_input, meta?: ComfyNodeMetadata): AttentionCoupleRegions
    /* category:image, name:"CLIPSeg", output:Mask+Heatmap$_Mask+BW$_Mask */
    CLIPSeg(p: CLIPSeg_input, meta?: ComfyNodeMetadata): CLIPSeg
    /* category:image, name:"CombineSegMasks", output:Combined$_Mask+Heatmap$_Mask+BW$_Mask */
    CombineSegMasks(p: CombineSegMasks_input, meta?: ComfyNodeMetadata): CombineSegMasks
    /* category:CivitAI_Loaders, name:"CivitAI_Lora_Loader", output:MODEL+CLIP */
    CivitAI$_Lora$_Loader(p: CivitAI$_Lora$_Loader_input, meta?: ComfyNodeMetadata): CivitAI$_Lora$_Loader
    /* category:CivitAI_Loaders, name:"CivitAI_Checkpoint_Loader", output:MODEL+CLIP+VAE */
    CivitAI$_Checkpoint$_Loader(p: CivitAI$_Checkpoint$_Loader_input, meta?: ComfyNodeMetadata): CivitAI$_Checkpoint$_Loader
    /* category:image_alpha, name:"AlphaChanelAdd", output:IMAGE */
    AlphaChanelAdd(p: AlphaChanelAdd_input, meta?: ComfyNodeMetadata): AlphaChanelAdd
    /* category:image_alpha, name:"AlphaChanelAddByMask", output:IMAGE */
    AlphaChanelAddByMask(p: AlphaChanelAddByMask_input, meta?: ComfyNodeMetadata): AlphaChanelAddByMask
    /* category:image_alpha, name:"AlphaChanelAsMask", output:MASK */
    AlphaChanelAsMask(p: AlphaChanelAsMask_input, meta?: ComfyNodeMetadata): AlphaChanelAsMask
    /* category:image_alpha, name:"AlphaChanelRestore", output:IMAGE */
    AlphaChanelRestore(p: AlphaChanelRestore_input, meta?: ComfyNodeMetadata): AlphaChanelRestore
    /* category:image_alpha, name:"AlphaChanelRemove", output:IMAGE */
    AlphaChanelRemove(p: AlphaChanelRemove_input, meta?: ComfyNodeMetadata): AlphaChanelRemove
    /* category:clamp, name:"ClipClamp", output:CLIP */
    ClipClamp(p: ClipClamp_input, meta?: ComfyNodeMetadata): ClipClamp
    /* category:clamp, name:"ClipVisionClamp", output:CLIP_VISION */
    ClipVisionClamp(p: ClipVisionClamp_input, meta?: ComfyNodeMetadata): ClipVisionClamp
    /* category:clamp, name:"ClipVisionOutputClamp", output:CLIP_VISION_OUTPUT */
    ClipVisionOutputClamp(p: ClipVisionOutputClamp_input, meta?: ComfyNodeMetadata): ClipVisionOutputClamp
    /* category:clamp, name:"ConditioningClamp", output:CONDITIONING */
    ConditioningClamp(p: ConditioningClamp_input, meta?: ComfyNodeMetadata): ConditioningClamp
    /* category:clamp, name:"ControlNetClamp", output:CONTROL_NET */
    ControlNetClamp(p: ControlNetClamp_input, meta?: ComfyNodeMetadata): ControlNetClamp
    /* category:clamp, name:"GligenClamp", output:GLIGEN */
    GligenClamp(p: GligenClamp_input, meta?: ComfyNodeMetadata): GligenClamp
    /* category:clamp, name:"ImageClamp", output:IMAGE */
    ImageClamp(p: ImageClamp_input, meta?: ComfyNodeMetadata): ImageClamp
    /* category:clamp, name:"LatentClamp", output:LATENT */
    LatentClamp(p: LatentClamp_input, meta?: ComfyNodeMetadata): LatentClamp
    /* category:clamp, name:"MaskClamp", output:MASK */
    MaskClamp(p: MaskClamp_input, meta?: ComfyNodeMetadata): MaskClamp
    /* category:clamp, name:"ModelClamp", output:MODEL */
    ModelClamp(p: ModelClamp_input, meta?: ComfyNodeMetadata): ModelClamp
    /* category:clamp, name:"StyleModelClamp", output:STYLE_MODEL */
    StyleModelClamp(p: StyleModelClamp_input, meta?: ComfyNodeMetadata): StyleModelClamp
    /* category:clamp, name:"UpscaleModelClamp", output:UPSCALE_MODEL */
    UpscaleModelClamp(p: UpscaleModelClamp_input, meta?: ComfyNodeMetadata): UpscaleModelClamp
    /* category:clamp, name:"VaeClamp", output:VAE */
    VaeClamp(p: VaeClamp_input, meta?: ComfyNodeMetadata): VaeClamp
    /* category:image_batch, name:"ImageBatchGet", output:IMAGE */
    ImageBatchGet(p: ImageBatchGet_input, meta?: ComfyNodeMetadata): ImageBatchGet
    /* category:image_batch, name:"ImageBatchCopy", output:IMAGE */
    ImageBatchCopy(p: ImageBatchCopy_input, meta?: ComfyNodeMetadata): ImageBatchCopy
    /* category:image_batch, name:"ImageBatchRemove", output:IMAGE */
    ImageBatchRemove(p: ImageBatchRemove_input, meta?: ComfyNodeMetadata): ImageBatchRemove
    /* category:image_batch, name:"ImageBatchFork", output:IMAGE+IMAGE_1 */
    ImageBatchFork(p: ImageBatchFork_input, meta?: ComfyNodeMetadata): ImageBatchFork
    /* category:image_batch, name:"ImageBatchJoin", output:IMAGE */
    ImageBatchJoin(p: ImageBatchJoin_input, meta?: ComfyNodeMetadata): ImageBatchJoin
    /* category:image_batch, name:"ImageBatchPermute", output:IMAGE */
    ImageBatchPermute(p: ImageBatchPermute_input, meta?: ComfyNodeMetadata): ImageBatchPermute
    /* category:image_composite, name:"ImageCompositeAbsolute", output:IMAGE */
    ImageCompositeAbsolute(p: ImageCompositeAbsolute_input, meta?: ComfyNodeMetadata): ImageCompositeAbsolute
    /* category:image_composite, name:"ImageCompositeAbsoluteByContainer", output:IMAGE */
    ImageCompositeAbsoluteByContainer(p: ImageCompositeAbsoluteByContainer_input, meta?: ComfyNodeMetadata): ImageCompositeAbsoluteByContainer
    /* category:image_composite, name:"ImageCompositeRelative", output:IMAGE */
    ImageCompositeRelative(p: ImageCompositeRelative_input, meta?: ComfyNodeMetadata): ImageCompositeRelative
    /* category:image_composite, name:"ImageCompositeRelativeByContainer", output:IMAGE */
    ImageCompositeRelativeByContainer(p: ImageCompositeRelativeByContainer_input, meta?: ComfyNodeMetadata): ImageCompositeRelativeByContainer
    /* category:image_container, name:"ImageContainer", output:IMAGE */
    ImageContainer(p: ImageContainer_input, meta?: ComfyNodeMetadata): ImageContainer
    /* category:image_container, name:"ImageContainerInheritanceAdd", output:IMAGE */
    ImageContainerInheritanceAdd(p: ImageContainerInheritanceAdd_input, meta?: ComfyNodeMetadata): ImageContainerInheritanceAdd
    /* category:image_container, name:"ImageContainerInheritanceScale", output:IMAGE */
    ImageContainerInheritanceScale(p: ImageContainerInheritanceScale_input, meta?: ComfyNodeMetadata): ImageContainerInheritanceScale
    /* category:image_container, name:"ImageContainerInheritanceMax", output:IMAGE */
    ImageContainerInheritanceMax(p: ImageContainerInheritanceMax_input, meta?: ComfyNodeMetadata): ImageContainerInheritanceMax
    /* category:image_container, name:"ImageContainerInheritanceSum", output:IMAGE */
    ImageContainerInheritanceSum(p: ImageContainerInheritanceSum_input, meta?: ComfyNodeMetadata): ImageContainerInheritanceSum
    /* category:image_draw, name:"ImageDrawArc", output:IMAGE */
    ImageDrawArc(p: ImageDrawArc_input, meta?: ComfyNodeMetadata): ImageDrawArc
    /* category:image_draw, name:"ImageDrawArcByContainer", output:IMAGE */
    ImageDrawArcByContainer(p: ImageDrawArcByContainer_input, meta?: ComfyNodeMetadata): ImageDrawArcByContainer
    /* category:image_draw, name:"ImageDrawChord", output:IMAGE */
    ImageDrawChord(p: ImageDrawChord_input, meta?: ComfyNodeMetadata): ImageDrawChord
    /* category:image_draw, name:"ImageDrawChordByContainer", output:IMAGE */
    ImageDrawChordByContainer(p: ImageDrawChordByContainer_input, meta?: ComfyNodeMetadata): ImageDrawChordByContainer
    /* category:image_draw, name:"ImageDrawEllipse", output:IMAGE */
    ImageDrawEllipse(p: ImageDrawEllipse_input, meta?: ComfyNodeMetadata): ImageDrawEllipse
    /* category:image_draw, name:"ImageDrawEllipseByContainer", output:IMAGE */
    ImageDrawEllipseByContainer(p: ImageDrawEllipseByContainer_input, meta?: ComfyNodeMetadata): ImageDrawEllipseByContainer
    /* category:image_draw, name:"ImageDrawLine", output:IMAGE */
    ImageDrawLine(p: ImageDrawLine_input, meta?: ComfyNodeMetadata): ImageDrawLine
    /* category:image_draw, name:"ImageDrawLineByContainer", output:IMAGE */
    ImageDrawLineByContainer(p: ImageDrawLineByContainer_input, meta?: ComfyNodeMetadata): ImageDrawLineByContainer
    /* category:image_draw, name:"ImageDrawPieslice", output:IMAGE */
    ImageDrawPieslice(p: ImageDrawPieslice_input, meta?: ComfyNodeMetadata): ImageDrawPieslice
    /* category:image_draw, name:"ImageDrawPiesliceByContainer", output:IMAGE */
    ImageDrawPiesliceByContainer(p: ImageDrawPiesliceByContainer_input, meta?: ComfyNodeMetadata): ImageDrawPiesliceByContainer
    /* category:image_draw, name:"ImageDrawRectangle", output:IMAGE */
    ImageDrawRectangle(p: ImageDrawRectangle_input, meta?: ComfyNodeMetadata): ImageDrawRectangle
    /* category:image_draw, name:"ImageDrawRectangleByContainer", output:IMAGE */
    ImageDrawRectangleByContainer(p: ImageDrawRectangleByContainer_input, meta?: ComfyNodeMetadata): ImageDrawRectangleByContainer
    /* category:image_draw, name:"ImageDrawRectangleRounded", output:IMAGE */
    ImageDrawRectangleRounded(p: ImageDrawRectangleRounded_input, meta?: ComfyNodeMetadata): ImageDrawRectangleRounded
    /* category:image_draw, name:"ImageDrawRectangleRoundedByContainer", output:IMAGE */
    ImageDrawRectangleRoundedByContainer(p: ImageDrawRectangleRoundedByContainer_input, meta?: ComfyNodeMetadata): ImageDrawRectangleRoundedByContainer
    /* category:image_draw, name:"ImageDrawPolygon", output:IMAGE */
    ImageDrawPolygon(p: ImageDrawPolygon_input, meta?: ComfyNodeMetadata): ImageDrawPolygon
    /* category:image_effects, name:"ImageEffectsAdjustment", output:IMAGE */
    ImageEffectsAdjustment(p: ImageEffectsAdjustment_input, meta?: ComfyNodeMetadata): ImageEffectsAdjustment
    /* category:image_effects, name:"ImageEffectsGrayscale", output:IMAGE */
    ImageEffectsGrayscale(p: ImageEffectsGrayscale_input, meta?: ComfyNodeMetadata): ImageEffectsGrayscale
    /* category:image_effects, name:"ImageEffectsNegative", output:IMAGE */
    ImageEffectsNegative(p: ImageEffectsNegative_input, meta?: ComfyNodeMetadata): ImageEffectsNegative
    /* category:image_effects, name:"ImageEffectsSepia", output:IMAGE */
    ImageEffectsSepia(p: ImageEffectsSepia_input, meta?: ComfyNodeMetadata): ImageEffectsSepia
    /* category:image_effects_lens, name:"ImageEffectsLensZoomBurst", output:IMAGE */
    ImageEffectsLensZoomBurst(p: ImageEffectsLensZoomBurst_input, meta?: ComfyNodeMetadata): ImageEffectsLensZoomBurst
    /* category:image_effects_lens, name:"ImageEffectsLensChromaticAberration", output:IMAGE */
    ImageEffectsLensChromaticAberration(p: ImageEffectsLensChromaticAberration_input, meta?: ComfyNodeMetadata): ImageEffectsLensChromaticAberration
    /* category:image_effects_lens, name:"ImageEffectsLensBokeh", output:IMAGE */
    ImageEffectsLensBokeh(p: ImageEffectsLensBokeh_input, meta?: ComfyNodeMetadata): ImageEffectsLensBokeh
    /* category:image_effects_lens, name:"ImageEffectsLensOpticAxis", output:IMAGE+MASK */
    ImageEffectsLensOpticAxis(p: ImageEffectsLensOpticAxis_input, meta?: ComfyNodeMetadata): ImageEffectsLensOpticAxis
    /* category:image_effects_lens, name:"ImageEffectsLensVignette", output:IMAGE+MASK */
    ImageEffectsLensVignette(p: ImageEffectsLensVignette_input, meta?: ComfyNodeMetadata): ImageEffectsLensVignette
    /* category:image_filter, name:"ImageFilterSmooth", output:IMAGE */
    ImageFilterSmooth(p: ImageFilterSmooth_input, meta?: ComfyNodeMetadata): ImageFilterSmooth
    /* category:image_filter, name:"ImageFilterSmoothMore", output:IMAGE */
    ImageFilterSmoothMore(p: ImageFilterSmoothMore_input, meta?: ComfyNodeMetadata): ImageFilterSmoothMore
    /* category:image_filter, name:"ImageFilterBlur", output:IMAGE */
    ImageFilterBlur(p: ImageFilterBlur_input, meta?: ComfyNodeMetadata): ImageFilterBlur
    /* category:image_filter, name:"ImageFilterBoxBlur", output:IMAGE */
    ImageFilterBoxBlur(p: ImageFilterBoxBlur_input, meta?: ComfyNodeMetadata): ImageFilterBoxBlur
    /* category:image_filter, name:"ImageFilterGaussianBlur", output:IMAGE */
    ImageFilterGaussianBlur(p: ImageFilterGaussianBlur_input, meta?: ComfyNodeMetadata): ImageFilterGaussianBlur
    /* category:image_filter, name:"ImageFilterGaussianBlurAdvanced", output:IMAGE */
    ImageFilterGaussianBlurAdvanced(p: ImageFilterGaussianBlurAdvanced_input, meta?: ComfyNodeMetadata): ImageFilterGaussianBlurAdvanced
    /* category:image_filter, name:"ImageFilterStackBlur", output:IMAGE */
    ImageFilterStackBlur(p: ImageFilterStackBlur_input, meta?: ComfyNodeMetadata): ImageFilterStackBlur
    /* category:image_filter, name:"ImageFilterMedianBlur", output:IMAGE */
    ImageFilterMedianBlur(p: ImageFilterMedianBlur_input, meta?: ComfyNodeMetadata): ImageFilterMedianBlur
    /* category:image_filter, name:"ImageFilterBilateralBlur", output:IMAGE */
    ImageFilterBilateralBlur(p: ImageFilterBilateralBlur_input, meta?: ComfyNodeMetadata): ImageFilterBilateralBlur
    /* category:image_filter, name:"ImageFilterContour", output:IMAGE */
    ImageFilterContour(p: ImageFilterContour_input, meta?: ComfyNodeMetadata): ImageFilterContour
    /* category:image_filter, name:"ImageFilterDetail", output:IMAGE */
    ImageFilterDetail(p: ImageFilterDetail_input, meta?: ComfyNodeMetadata): ImageFilterDetail
    /* category:image_filter, name:"ImageFilterEdgeEnhance", output:IMAGE */
    ImageFilterEdgeEnhance(p: ImageFilterEdgeEnhance_input, meta?: ComfyNodeMetadata): ImageFilterEdgeEnhance
    /* category:image_filter, name:"ImageFilterEdgeEnhanceMore", output:IMAGE */
    ImageFilterEdgeEnhanceMore(p: ImageFilterEdgeEnhanceMore_input, meta?: ComfyNodeMetadata): ImageFilterEdgeEnhanceMore
    /* category:image_filter, name:"ImageFilterEmboss", output:IMAGE */
    ImageFilterEmboss(p: ImageFilterEmboss_input, meta?: ComfyNodeMetadata): ImageFilterEmboss
    /* category:image_filter, name:"ImageFilterFindEdges", output:IMAGE */
    ImageFilterFindEdges(p: ImageFilterFindEdges_input, meta?: ComfyNodeMetadata): ImageFilterFindEdges
    /* category:image_filter, name:"ImageFilterSharpen", output:IMAGE */
    ImageFilterSharpen(p: ImageFilterSharpen_input, meta?: ComfyNodeMetadata): ImageFilterSharpen
    /* category:image_filter, name:"ImageFilterRank", output:IMAGE */
    ImageFilterRank(p: ImageFilterRank_input, meta?: ComfyNodeMetadata): ImageFilterRank
    /* category:image_filter, name:"ImageFilterMin", output:IMAGE */
    ImageFilterMin(p: ImageFilterMin_input, meta?: ComfyNodeMetadata): ImageFilterMin
    /* category:image_filter, name:"ImageFilterMax", output:IMAGE */
    ImageFilterMax(p: ImageFilterMax_input, meta?: ComfyNodeMetadata): ImageFilterMax
    /* category:image_filter, name:"ImageFilterMode", output:IMAGE */
    ImageFilterMode(p: ImageFilterMode_input, meta?: ComfyNodeMetadata): ImageFilterMode
    /* category:image_noise, name:"ImageNoiseBeta", output:IMAGE */
    ImageNoiseBeta(p: ImageNoiseBeta_input, meta?: ComfyNodeMetadata): ImageNoiseBeta
    /* category:image_noise, name:"ImageNoiseBinomial", output:IMAGE */
    ImageNoiseBinomial(p: ImageNoiseBinomial_input, meta?: ComfyNodeMetadata): ImageNoiseBinomial
    /* category:image_noise, name:"ImageNoiseBytes", output:IMAGE */
    ImageNoiseBytes(p: ImageNoiseBytes_input, meta?: ComfyNodeMetadata): ImageNoiseBytes
    /* category:image_noise, name:"ImageNoiseGaussian", output:IMAGE */
    ImageNoiseGaussian(p: ImageNoiseGaussian_input, meta?: ComfyNodeMetadata): ImageNoiseGaussian
    /* category:image_segmentation, name:"ImageSegmentation", output:IMAGE */
    ImageSegmentation(p: ImageSegmentation_input, meta?: ComfyNodeMetadata): ImageSegmentation
    /* category:image_segmentation, name:"ImageSegmentationCustom", output:IMAGE */
    ImageSegmentationCustom(p: ImageSegmentationCustom_input, meta?: ComfyNodeMetadata): ImageSegmentationCustom
    /* category:image_segmentation, name:"ImageSegmentationCustomAdvanced", output:IMAGE */
    ImageSegmentationCustomAdvanced(p: ImageSegmentationCustomAdvanced_input, meta?: ComfyNodeMetadata): ImageSegmentationCustomAdvanced
    /* category:image_draw, name:"ImageText", output:IMAGE */
    ImageText(p: ImageText_input, meta?: ComfyNodeMetadata): ImageText
    /* category:image_draw, name:"ImageTextOutlined", output:IMAGE */
    ImageTextOutlined(p: ImageTextOutlined_input, meta?: ComfyNodeMetadata): ImageTextOutlined
    /* category:image_draw, name:"ImageTextMultiline", output:IMAGE */
    ImageTextMultiline(p: ImageTextMultiline_input, meta?: ComfyNodeMetadata): ImageTextMultiline
    /* category:image_draw, name:"ImageTextMultilineOutlined", output:IMAGE */
    ImageTextMultilineOutlined(p: ImageTextMultilineOutlined_input, meta?: ComfyNodeMetadata): ImageTextMultilineOutlined
    /* category:image_transform, name:"ImageTransformResizeAbsolute", output:IMAGE */
    ImageTransformResizeAbsolute(p: ImageTransformResizeAbsolute_input, meta?: ComfyNodeMetadata): ImageTransformResizeAbsolute
    /* category:image_transform, name:"ImageTransformResizeRelative", output:IMAGE */
    ImageTransformResizeRelative(p: ImageTransformResizeRelative_input, meta?: ComfyNodeMetadata): ImageTransformResizeRelative
    /* category:image_transform, name:"ImageTransformResizeClip", output:IMAGE */
    ImageTransformResizeClip(p: ImageTransformResizeClip_input, meta?: ComfyNodeMetadata): ImageTransformResizeClip
    /* category:image_transform, name:"ImageTransformCropAbsolute", output:IMAGE */
    ImageTransformCropAbsolute(p: ImageTransformCropAbsolute_input, meta?: ComfyNodeMetadata): ImageTransformCropAbsolute
    /* category:image_transform, name:"ImageTransformCropRelative", output:IMAGE */
    ImageTransformCropRelative(p: ImageTransformCropRelative_input, meta?: ComfyNodeMetadata): ImageTransformCropRelative
    /* category:image_transform, name:"ImageTransformCropCorners", output:IMAGE */
    ImageTransformCropCorners(p: ImageTransformCropCorners_input, meta?: ComfyNodeMetadata): ImageTransformCropCorners
    /* category:image_transform, name:"ImageTransformPaddingAbsolute", output:IMAGE */
    ImageTransformPaddingAbsolute(p: ImageTransformPaddingAbsolute_input, meta?: ComfyNodeMetadata): ImageTransformPaddingAbsolute
    /* category:image_transform, name:"ImageTransformPaddingRelative", output:IMAGE */
    ImageTransformPaddingRelative(p: ImageTransformPaddingRelative_input, meta?: ComfyNodeMetadata): ImageTransformPaddingRelative
    /* category:image_transform, name:"ImageTransformRotate", output:IMAGE */
    ImageTransformRotate(p: ImageTransformRotate_input, meta?: ComfyNodeMetadata): ImageTransformRotate
    /* category:image_transform, name:"ImageTransformTranspose", output:IMAGE */
    ImageTransformTranspose(p: ImageTransformTranspose_input, meta?: ComfyNodeMetadata): ImageTransformTranspose
    /* category:Animate Diff 🎭🅐🅓, name:"ADE_AnimateDiffLoRALoader", output:MOTION_LORA */
    ADE$_AnimateDiffLoRALoader(p: ADE$_AnimateDiffLoRALoader_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffLoRALoader
    /* category:Animate Diff 🎭🅐🅓, name:"ADE_AnimateDiffSamplingSettings", output:settings */
    ADE$_AnimateDiffSamplingSettings(p: ADE$_AnimateDiffSamplingSettings_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffSamplingSettings
    /* category:Animate Diff 🎭🅐🅓, name:"ADE_AnimateDiffKeyframe", output:AD_KEYFRAMES */
    ADE$_AnimateDiffKeyframe(p: ADE$_AnimateDiffKeyframe_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffKeyframe
    /* category:Animate Diff 🎭🅐🅓_multival, name:"ADE_MultivalDynamic", output:MULTIVAL */
    ADE$_MultivalDynamic(p: ADE$_MultivalDynamic_input, meta?: ComfyNodeMetadata): ADE$_MultivalDynamic
    /* category:Animate Diff 🎭🅐🅓_multival, name:"ADE_MultivalDynamicFloatInput", output:MULTIVAL */
    ADE$_MultivalDynamicFloatInput(p: ADE$_MultivalDynamicFloatInput_input, meta?: ComfyNodeMetadata): ADE$_MultivalDynamicFloatInput
    /* category:Animate Diff 🎭🅐🅓_multival, name:"ADE_MultivalDynamicFloats", output:MULTIVAL */
    ADE$_MultivalDynamicFloats(p: ADE$_MultivalDynamicFloats_input, meta?: ComfyNodeMetadata): ADE$_MultivalDynamicFloats
    /* category:Animate Diff 🎭🅐🅓_multival, name:"ADE_MultivalScaledMask", output:MULTIVAL */
    ADE$_MultivalScaledMask(p: ADE$_MultivalScaledMask_input, meta?: ComfyNodeMetadata): ADE$_MultivalScaledMask
    /* category:Animate Diff 🎭🅐🅓_multival, name:"ADE_MultivalConvertToMask", output:MASK */
    ADE$_MultivalConvertToMask(p: ADE$_MultivalConvertToMask_input, meta?: ComfyNodeMetadata): ADE$_MultivalConvertToMask
    /* category:Animate Diff 🎭🅐🅓_context opts, name:"ADE_StandardStaticContextOptions", output:CONTEXT_OPTS */
    ADE$_StandardStaticContextOptions(p: ADE$_StandardStaticContextOptions_input, meta?: ComfyNodeMetadata): ADE$_StandardStaticContextOptions
    /* category:Animate Diff 🎭🅐🅓_context opts, name:"ADE_StandardUniformContextOptions", output:CONTEXT_OPTS */
    ADE$_StandardUniformContextOptions(p: ADE$_StandardUniformContextOptions_input, meta?: ComfyNodeMetadata): ADE$_StandardUniformContextOptions
    /* category:Animate Diff 🎭🅐🅓_context opts, name:"ADE_LoopedUniformContextOptions", output:CONTEXT_OPTS */
    ADE$_LoopedUniformContextOptions(p: ADE$_LoopedUniformContextOptions_input, meta?: ComfyNodeMetadata): ADE$_LoopedUniformContextOptions
    /* category:Animate Diff 🎭🅐🅓_context opts, name:"ADE_ViewsOnlyContextOptions", output:CONTEXT_OPTS */
    ADE$_ViewsOnlyContextOptions(p: ADE$_ViewsOnlyContextOptions_input, meta?: ComfyNodeMetadata): ADE$_ViewsOnlyContextOptions
    /* category:Animate Diff 🎭🅐🅓_context opts, name:"ADE_BatchedContextOptions", output:CONTEXT_OPTS */
    ADE$_BatchedContextOptions(p: ADE$_BatchedContextOptions_input, meta?: ComfyNodeMetadata): ADE$_BatchedContextOptions
    /* category:, name:"ADE_AnimateDiffUniformContextOptions", output:CONTEXT_OPTS */
    ADE$_AnimateDiffUniformContextOptions(p: ADE$_AnimateDiffUniformContextOptions_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffUniformContextOptions
    /* category:Animate Diff 🎭🅐🅓_context opts_visualize, name:"ADE_VisualizeContextOptionsK", output:IMAGE */
    ADE$_VisualizeContextOptionsK(p: ADE$_VisualizeContextOptionsK_input, meta?: ComfyNodeMetadata): ADE$_VisualizeContextOptionsK
    /* category:Animate Diff 🎭🅐🅓_context opts_visualize, name:"ADE_VisualizeContextOptionsKAdv", output:IMAGE */
    ADE$_VisualizeContextOptionsKAdv(p: ADE$_VisualizeContextOptionsKAdv_input, meta?: ComfyNodeMetadata): ADE$_VisualizeContextOptionsKAdv
    /* category:Animate Diff 🎭🅐🅓_context opts_visualize, name:"ADE_VisualizeContextOptionsSCustom", output:IMAGE */
    ADE$_VisualizeContextOptionsSCustom(p: ADE$_VisualizeContextOptionsSCustom_input, meta?: ComfyNodeMetadata): ADE$_VisualizeContextOptionsSCustom
    /* category:Animate Diff 🎭🅐🅓_context opts_view opts, name:"ADE_StandardStaticViewOptions", output:VIEW_OPTS */
    ADE$_StandardStaticViewOptions(p: ADE$_StandardStaticViewOptions_input, meta?: ComfyNodeMetadata): ADE$_StandardStaticViewOptions
    /* category:Animate Diff 🎭🅐🅓_context opts_view opts, name:"ADE_StandardUniformViewOptions", output:VIEW_OPTS */
    ADE$_StandardUniformViewOptions(p: ADE$_StandardUniformViewOptions_input, meta?: ComfyNodeMetadata): ADE$_StandardUniformViewOptions
    /* category:Animate Diff 🎭🅐🅓_context opts_view opts, name:"ADE_LoopedUniformViewOptions", output:VIEW_OPTS */
    ADE$_LoopedUniformViewOptions(p: ADE$_LoopedUniformViewOptions_input, meta?: ComfyNodeMetadata): ADE$_LoopedUniformViewOptions
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras, name:"ADE_ContextExtras_Set", output:CONTEXT_OPTS */
    ADE$_ContextExtras$_Set(p: ADE$_ContextExtras$_Set_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_Set
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras, name:"ADE_ContextExtras_ContextRef", output:CONTEXT_EXTRAS */
    ADE$_ContextExtras$_ContextRef(p: ADE$_ContextExtras$_ContextRef_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_ContextRef
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_contextref, name:"ADE_ContextExtras_ContextRef_ModeFirst", output:CONTEXTREF_MODE */
    ADE$_ContextExtras$_ContextRef$_ModeFirst(p: ADE$_ContextExtras$_ContextRef$_ModeFirst_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_ContextRef$_ModeFirst
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_contextref, name:"ADE_ContextExtras_ContextRef_ModeSliding", output:CONTEXTREF_MODE */
    ADE$_ContextExtras$_ContextRef$_ModeSliding(p: ADE$_ContextExtras$_ContextRef$_ModeSliding_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_ContextRef$_ModeSliding
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_contextref, name:"ADE_ContextExtras_ContextRef_ModeIndexes", output:CONTEXTREF_MODE */
    ADE$_ContextExtras$_ContextRef$_ModeIndexes(p: ADE$_ContextExtras$_ContextRef$_ModeIndexes_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_ContextRef$_ModeIndexes
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_contextref, name:"ADE_ContextExtras_ContextRef_TuneAttn", output:CONTEXTREF_TUNE */
    ADE$_ContextExtras$_ContextRef$_TuneAttn(p: ADE$_ContextExtras$_ContextRef$_TuneAttn_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_ContextRef$_TuneAttn
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_contextref, name:"ADE_ContextExtras_ContextRef_TuneAttnAdain", output:CONTEXTREF_TUNE */
    ADE$_ContextExtras$_ContextRef$_TuneAttnAdain(p: ADE$_ContextExtras$_ContextRef$_TuneAttnAdain_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_ContextRef$_TuneAttnAdain
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_contextref, name:"ADE_ContextExtras_ContextRef_Keyframe", output:CONTEXTREF_KF */
    ADE$_ContextExtras$_ContextRef$_Keyframe(p: ADE$_ContextExtras$_ContextRef$_Keyframe_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_ContextRef$_Keyframe
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_contextref, name:"ADE_ContextExtras_ContextRef_KeyframeInterpolation", output:CONTEXTREF_KF */
    ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation(p: ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_contextref, name:"ADE_ContextExtras_ContextRef_KeyframeFromList", output:CONTEXTREF_KF */
    ADE$_ContextExtras$_ContextRef$_KeyframeFromList(p: ADE$_ContextExtras$_ContextRef$_KeyframeFromList_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_ContextRef$_KeyframeFromList
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras, name:"ADE_ContextExtras_NaiveReuse", output:CONTEXT_EXTRAS */
    ADE$_ContextExtras$_NaiveReuse(p: ADE$_ContextExtras$_NaiveReuse_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_NaiveReuse
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_naivereuse, name:"ADE_ContextExtras_NaiveReuse_Keyframe", output:NAIVEREUSE_KF */
    ADE$_ContextExtras$_NaiveReuse$_Keyframe(p: ADE$_ContextExtras$_NaiveReuse$_Keyframe_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_NaiveReuse$_Keyframe
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_naivereuse, name:"ADE_ContextExtras_NaiveReuse_KeyframeInterpolation", output:NAIVEREUSE_KF */
    ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation(p: ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation
    /* category:Animate Diff 🎭🅐🅓_context opts_context extras_naivereuse, name:"ADE_ContextExtras_NaiveReuse_KeyframeFromList", output:NAIVEREUSE_KF */
    ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList(p: ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList_input, meta?: ComfyNodeMetadata): ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList
    /* category:Animate Diff 🎭🅐🅓_iteration opts, name:"ADE_IterationOptsDefault", output:ITERATION_OPTS */
    ADE$_IterationOptsDefault(p: ADE$_IterationOptsDefault_input, meta?: ComfyNodeMetadata): ADE$_IterationOptsDefault
    /* category:Animate Diff 🎭🅐🅓_iteration opts, name:"ADE_IterationOptsFreeInit", output:ITERATION_OPTS */
    ADE$_IterationOptsFreeInit(p: ADE$_IterationOptsFreeInit_input, meta?: ComfyNodeMetadata): ADE$_IterationOptsFreeInit
    /* category:Animate Diff 🎭🅐🅓_conditioning_register lora hooks, name:"ADE_RegisterLoraHook", output:MODEL+CLIP+LORA_HOOK */
    ADE$_RegisterLoraHook(p: ADE$_RegisterLoraHook_input, meta?: ComfyNodeMetadata): ADE$_RegisterLoraHook
    /* category:Animate Diff 🎭🅐🅓_conditioning_register lora hooks, name:"ADE_RegisterLoraHookModelOnly", output:MODEL+LORA_HOOK */
    ADE$_RegisterLoraHookModelOnly(p: ADE$_RegisterLoraHookModelOnly_input, meta?: ComfyNodeMetadata): ADE$_RegisterLoraHookModelOnly
    /* category:Animate Diff 🎭🅐🅓_conditioning_register lora hooks, name:"ADE_RegisterModelAsLoraHook", output:MODEL+CLIP+LORA_HOOK */
    ADE$_RegisterModelAsLoraHook(p: ADE$_RegisterModelAsLoraHook_input, meta?: ComfyNodeMetadata): ADE$_RegisterModelAsLoraHook
    /* category:Animate Diff 🎭🅐🅓_conditioning_register lora hooks, name:"ADE_RegisterModelAsLoraHookModelOnly", output:MODEL+LORA_HOOK */
    ADE$_RegisterModelAsLoraHookModelOnly(p: ADE$_RegisterModelAsLoraHookModelOnly_input, meta?: ComfyNodeMetadata): ADE$_RegisterModelAsLoraHookModelOnly
    /* category:Animate Diff 🎭🅐🅓_conditioning_combine lora hooks, name:"ADE_CombineLoraHooks", output:LORA_HOOK */
    ADE$_CombineLoraHooks(p: ADE$_CombineLoraHooks_input, meta?: ComfyNodeMetadata): ADE$_CombineLoraHooks
    /* category:Animate Diff 🎭🅐🅓_conditioning_combine lora hooks, name:"ADE_CombineLoraHooksFour", output:LORA_HOOK */
    ADE$_CombineLoraHooksFour(p: ADE$_CombineLoraHooksFour_input, meta?: ComfyNodeMetadata): ADE$_CombineLoraHooksFour
    /* category:Animate Diff 🎭🅐🅓_conditioning_combine lora hooks, name:"ADE_CombineLoraHooksEight", output:LORA_HOOK */
    ADE$_CombineLoraHooksEight(p: ADE$_CombineLoraHooksEight_input, meta?: ComfyNodeMetadata): ADE$_CombineLoraHooksEight
    /* category:Animate Diff 🎭🅐🅓_conditioning, name:"ADE_SetLoraHookKeyframe", output:LORA_HOOK */
    ADE$_SetLoraHookKeyframe(p: ADE$_SetLoraHookKeyframe_input, meta?: ComfyNodeMetadata): ADE$_SetLoraHookKeyframe
    /* category:Animate Diff 🎭🅐🅓_conditioning, name:"ADE_AttachLoraHookToCLIP", output:hook_CLIP */
    ADE$_AttachLoraHookToCLIP(p: ADE$_AttachLoraHookToCLIP_input, meta?: ComfyNodeMetadata): ADE$_AttachLoraHookToCLIP
    /* category:Animate Diff 🎭🅐🅓_conditioning_schedule lora hooks, name:"ADE_LoraHookKeyframe", output:HOOK_KF */
    ADE$_LoraHookKeyframe(p: ADE$_LoraHookKeyframe_input, meta?: ComfyNodeMetadata): ADE$_LoraHookKeyframe
    /* category:Animate Diff 🎭🅐🅓_conditioning_schedule lora hooks, name:"ADE_LoraHookKeyframeInterpolation", output:HOOK_KF */
    ADE$_LoraHookKeyframeInterpolation(p: ADE$_LoraHookKeyframeInterpolation_input, meta?: ComfyNodeMetadata): ADE$_LoraHookKeyframeInterpolation
    /* category:Animate Diff 🎭🅐🅓_conditioning_schedule lora hooks, name:"ADE_LoraHookKeyframeFromStrengthList", output:HOOK_KF */
    ADE$_LoraHookKeyframeFromStrengthList(p: ADE$_LoraHookKeyframeFromStrengthList_input, meta?: ComfyNodeMetadata): ADE$_LoraHookKeyframeFromStrengthList
    /* category:Animate Diff 🎭🅐🅓_conditioning_single cond ops, name:"ADE_AttachLoraHookToConditioning", output:CONDITIONING */
    ADE$_AttachLoraHookToConditioning(p: ADE$_AttachLoraHookToConditioning_input, meta?: ComfyNodeMetadata): ADE$_AttachLoraHookToConditioning
    /* category:Animate Diff 🎭🅐🅓_conditioning, name:"ADE_PairedConditioningSetMask", output:positive+negative */
    ADE$_PairedConditioningSetMask(p: ADE$_PairedConditioningSetMask_input, meta?: ComfyNodeMetadata): ADE$_PairedConditioningSetMask
    /* category:Animate Diff 🎭🅐🅓_conditioning_single cond ops, name:"ADE_ConditioningSetMask", output:CONDITIONING */
    ADE$_ConditioningSetMask(p: ADE$_ConditioningSetMask_input, meta?: ComfyNodeMetadata): ADE$_ConditioningSetMask
    /* category:Animate Diff 🎭🅐🅓_conditioning, name:"ADE_PairedConditioningSetMaskAndCombine", output:positive+negative */
    ADE$_PairedConditioningSetMaskAndCombine(p: ADE$_PairedConditioningSetMaskAndCombine_input, meta?: ComfyNodeMetadata): ADE$_PairedConditioningSetMaskAndCombine
    /* category:Animate Diff 🎭🅐🅓_conditioning_single cond ops, name:"ADE_ConditioningSetMaskAndCombine", output:CONDITIONING */
    ADE$_ConditioningSetMaskAndCombine(p: ADE$_ConditioningSetMaskAndCombine_input, meta?: ComfyNodeMetadata): ADE$_ConditioningSetMaskAndCombine
    /* category:Animate Diff 🎭🅐🅓_conditioning, name:"ADE_PairedConditioningSetUnmaskedAndCombine", output:positive+negative */
    ADE$_PairedConditioningSetUnmaskedAndCombine(p: ADE$_PairedConditioningSetUnmaskedAndCombine_input, meta?: ComfyNodeMetadata): ADE$_PairedConditioningSetUnmaskedAndCombine
    /* category:Animate Diff 🎭🅐🅓_conditioning_single cond ops, name:"ADE_ConditioningSetUnmaskedAndCombine", output:CONDITIONING */
    ADE$_ConditioningSetUnmaskedAndCombine(p: ADE$_ConditioningSetUnmaskedAndCombine_input, meta?: ComfyNodeMetadata): ADE$_ConditioningSetUnmaskedAndCombine
    /* category:Animate Diff 🎭🅐🅓_conditioning, name:"ADE_PairedConditioningCombine", output:positive+negative */
    ADE$_PairedConditioningCombine(p: ADE$_PairedConditioningCombine_input, meta?: ComfyNodeMetadata): ADE$_PairedConditioningCombine
    /* category:Animate Diff 🎭🅐🅓_conditioning_single cond ops, name:"ADE_ConditioningCombine", output:CONDITIONING */
    ADE$_ConditioningCombine(p: ADE$_ConditioningCombine_input, meta?: ComfyNodeMetadata): ADE$_ConditioningCombine
    /* category:Animate Diff 🎭🅐🅓_conditioning, name:"ADE_TimestepsConditioning", output:TIMESTEPS_COND */
    ADE$_TimestepsConditioning(p: ADE$_TimestepsConditioning_input, meta?: ComfyNodeMetadata): ADE$_TimestepsConditioning
    /* category:Animate Diff 🎭🅐🅓_noise layers, name:"ADE_NoiseLayerAdd", output:NOISE_LAYERS */
    ADE$_NoiseLayerAdd(p: ADE$_NoiseLayerAdd_input, meta?: ComfyNodeMetadata): ADE$_NoiseLayerAdd
    /* category:Animate Diff 🎭🅐🅓_noise layers, name:"ADE_NoiseLayerAddWeighted", output:NOISE_LAYERS */
    ADE$_NoiseLayerAddWeighted(p: ADE$_NoiseLayerAddWeighted_input, meta?: ComfyNodeMetadata): ADE$_NoiseLayerAddWeighted
    /* category:Animate Diff 🎭🅐🅓_noise layers, name:"ADE_NoiseLayerReplace", output:NOISE_LAYERS */
    ADE$_NoiseLayerReplace(p: ADE$_NoiseLayerReplace_input, meta?: ComfyNodeMetadata): ADE$_NoiseLayerReplace
    /* category:Animate Diff 🎭🅐🅓_ad settings, name:"ADE_AnimateDiffSettings", output:AD_SETTINGS */
    ADE$_AnimateDiffSettings(p: ADE$_AnimateDiffSettings_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffSettings
    /* category:Animate Diff 🎭🅐🅓_ad settings_pe adjust, name:"ADE_AdjustPESweetspotStretch", output:PE_ADJUST */
    ADE$_AdjustPESweetspotStretch(p: ADE$_AdjustPESweetspotStretch_input, meta?: ComfyNodeMetadata): ADE$_AdjustPESweetspotStretch
    /* category:Animate Diff 🎭🅐🅓_ad settings_pe adjust, name:"ADE_AdjustPEFullStretch", output:PE_ADJUST */
    ADE$_AdjustPEFullStretch(p: ADE$_AdjustPEFullStretch_input, meta?: ComfyNodeMetadata): ADE$_AdjustPEFullStretch
    /* category:Animate Diff 🎭🅐🅓_ad settings_pe adjust, name:"ADE_AdjustPEManual", output:PE_ADJUST */
    ADE$_AdjustPEManual(p: ADE$_AdjustPEManual_input, meta?: ComfyNodeMetadata): ADE$_AdjustPEManual
    /* category:Animate Diff 🎭🅐🅓_ad settings_weight adjust, name:"ADE_AdjustWeightAllAdd", output:WEIGHT_ADJUST */
    ADE$_AdjustWeightAllAdd(p: ADE$_AdjustWeightAllAdd_input, meta?: ComfyNodeMetadata): ADE$_AdjustWeightAllAdd
    /* category:Animate Diff 🎭🅐🅓_ad settings_weight adjust, name:"ADE_AdjustWeightAllMult", output:WEIGHT_ADJUST */
    ADE$_AdjustWeightAllMult(p: ADE$_AdjustWeightAllMult_input, meta?: ComfyNodeMetadata): ADE$_AdjustWeightAllMult
    /* category:Animate Diff 🎭🅐🅓_ad settings_weight adjust, name:"ADE_AdjustWeightIndivAdd", output:WEIGHT_ADJUST */
    ADE$_AdjustWeightIndivAdd(p: ADE$_AdjustWeightIndivAdd_input, meta?: ComfyNodeMetadata): ADE$_AdjustWeightIndivAdd
    /* category:Animate Diff 🎭🅐🅓_ad settings_weight adjust, name:"ADE_AdjustWeightIndivMult", output:WEIGHT_ADJUST */
    ADE$_AdjustWeightIndivMult(p: ADE$_AdjustWeightIndivMult_input, meta?: ComfyNodeMetadata): ADE$_AdjustWeightIndivMult
    /* category:Animate Diff 🎭🅐🅓_ad settings_weight adjust, name:"ADE_AdjustWeightIndivAttnAdd", output:WEIGHT_ADJUST */
    ADE$_AdjustWeightIndivAttnAdd(p: ADE$_AdjustWeightIndivAttnAdd_input, meta?: ComfyNodeMetadata): ADE$_AdjustWeightIndivAttnAdd
    /* category:Animate Diff 🎭🅐🅓_ad settings_weight adjust, name:"ADE_AdjustWeightIndivAttnMult", output:WEIGHT_ADJUST */
    ADE$_AdjustWeightIndivAttnMult(p: ADE$_AdjustWeightIndivAttnMult_input, meta?: ComfyNodeMetadata): ADE$_AdjustWeightIndivAttnMult
    /* category:Animate Diff 🎭🅐🅓_sample settings_custom cfg, name:"ADE_CustomCFGSimple", output:CUSTOM_CFG */
    ADE$_CustomCFGSimple(p: ADE$_CustomCFGSimple_input, meta?: ComfyNodeMetadata): ADE$_CustomCFGSimple
    /* category:Animate Diff 🎭🅐🅓_sample settings_custom cfg, name:"ADE_CustomCFG", output:CUSTOM_CFG */
    ADE$_CustomCFG(p: ADE$_CustomCFG_input, meta?: ComfyNodeMetadata): ADE$_CustomCFG
    /* category:Animate Diff 🎭🅐🅓_sample settings_custom cfg, name:"ADE_CustomCFGKeyframeSimple", output:CUSTOM_CFG */
    ADE$_CustomCFGKeyframeSimple(p: ADE$_CustomCFGKeyframeSimple_input, meta?: ComfyNodeMetadata): ADE$_CustomCFGKeyframeSimple
    /* category:Animate Diff 🎭🅐🅓_sample settings_custom cfg, name:"ADE_CustomCFGKeyframe", output:CUSTOM_CFG */
    ADE$_CustomCFGKeyframe(p: ADE$_CustomCFGKeyframe_input, meta?: ComfyNodeMetadata): ADE$_CustomCFGKeyframe
    /* category:Animate Diff 🎭🅐🅓_sample settings_custom cfg, name:"ADE_CustomCFGKeyframeInterpolation", output:CUSTOM_CFG */
    ADE$_CustomCFGKeyframeInterpolation(p: ADE$_CustomCFGKeyframeInterpolation_input, meta?: ComfyNodeMetadata): ADE$_CustomCFGKeyframeInterpolation
    /* category:Animate Diff 🎭🅐🅓_sample settings_custom cfg, name:"ADE_CustomCFGKeyframeFromList", output:CUSTOM_CFG */
    ADE$_CustomCFGKeyframeFromList(p: ADE$_CustomCFGKeyframeFromList_input, meta?: ComfyNodeMetadata): ADE$_CustomCFGKeyframeFromList
    /* category:Animate Diff 🎭🅐🅓_sample settings_cfg extras, name:"ADE_CFGExtrasPAGSimple", output:CFG_EXTRAS */
    ADE$_CFGExtrasPAGSimple(p: ADE$_CFGExtrasPAGSimple_input, meta?: ComfyNodeMetadata): ADE$_CFGExtrasPAGSimple
    /* category:Animate Diff 🎭🅐🅓_sample settings_cfg extras, name:"ADE_CFGExtrasPAG", output:CFG_EXTRAS */
    ADE$_CFGExtrasPAG(p: ADE$_CFGExtrasPAG_input, meta?: ComfyNodeMetadata): ADE$_CFGExtrasPAG
    /* category:Animate Diff 🎭🅐🅓_sample settings_cfg extras, name:"ADE_CFGExtrasRescaleCFGSimple", output:CFG_EXTRAS */
    ADE$_CFGExtrasRescaleCFGSimple(p: ADE$_CFGExtrasRescaleCFGSimple_input, meta?: ComfyNodeMetadata): ADE$_CFGExtrasRescaleCFGSimple
    /* category:Animate Diff 🎭🅐🅓_sample settings_cfg extras, name:"ADE_CFGExtrasRescaleCFG", output:CFG_EXTRAS */
    ADE$_CFGExtrasRescaleCFG(p: ADE$_CFGExtrasRescaleCFG_input, meta?: ComfyNodeMetadata): ADE$_CFGExtrasRescaleCFG
    /* category:Animate Diff 🎭🅐🅓_sample settings_sigma schedule, name:"ADE_SigmaSchedule", output:SIGMA_SCHEDULE */
    ADE$_SigmaSchedule(p: ADE$_SigmaSchedule_input, meta?: ComfyNodeMetadata): ADE$_SigmaSchedule
    /* category:Animate Diff 🎭🅐🅓_sample settings_sigma schedule, name:"ADE_RawSigmaSchedule", output:SIGMA_SCHEDULE */
    ADE$_RawSigmaSchedule(p: ADE$_RawSigmaSchedule_input, meta?: ComfyNodeMetadata): ADE$_RawSigmaSchedule
    /* category:Animate Diff 🎭🅐🅓_sample settings_sigma schedule, name:"ADE_SigmaScheduleWeightedAverage", output:SIGMA_SCHEDULE */
    ADE$_SigmaScheduleWeightedAverage(p: ADE$_SigmaScheduleWeightedAverage_input, meta?: ComfyNodeMetadata): ADE$_SigmaScheduleWeightedAverage
    /* category:Animate Diff 🎭🅐🅓_sample settings_sigma schedule, name:"ADE_SigmaScheduleWeightedAverageInterp", output:SIGMA_SCHEDULE */
    ADE$_SigmaScheduleWeightedAverageInterp(p: ADE$_SigmaScheduleWeightedAverageInterp_input, meta?: ComfyNodeMetadata): ADE$_SigmaScheduleWeightedAverageInterp
    /* category:Animate Diff 🎭🅐🅓_sample settings_sigma schedule, name:"ADE_SigmaScheduleSplitAndCombine", output:SIGMA_SCHEDULE */
    ADE$_SigmaScheduleSplitAndCombine(p: ADE$_SigmaScheduleSplitAndCombine_input, meta?: ComfyNodeMetadata): ADE$_SigmaScheduleSplitAndCombine
    /* category:Animate Diff 🎭🅐🅓_sample settings_sigma schedule, name:"ADE_SigmaScheduleToSigmas", output:SIGMAS */
    ADE$_SigmaScheduleToSigmas(p: ADE$_SigmaScheduleToSigmas_input, meta?: ComfyNodeMetadata): ADE$_SigmaScheduleToSigmas
    /* category:Animate Diff 🎭🅐🅓_sample settings_image inject, name:"ADE_NoisedImageInjection", output:IMAGE_INJECT */
    ADE$_NoisedImageInjection(p: ADE$_NoisedImageInjection_input, meta?: ComfyNodeMetadata): ADE$_NoisedImageInjection
    /* category:Animate Diff 🎭🅐🅓_sample settings_image inject, name:"ADE_NoisedImageInjectOptions", output:IMG_INJECT_OPTS */
    ADE$_NoisedImageInjectOptions(p: ADE$_NoisedImageInjectOptions_input, meta?: ComfyNodeMetadata): ADE$_NoisedImageInjectOptions
    /* category:Animate Diff 🎭🅐🅓_scheduling, name:"ADE_PromptScheduling", output:CONDITIONING */
    ADE$_PromptScheduling(p: ADE$_PromptScheduling_input, meta?: ComfyNodeMetadata): ADE$_PromptScheduling
    /* category:Animate Diff 🎭🅐🅓_scheduling, name:"ADE_PromptSchedulingLatents", output:CONDITIONING+LATENT */
    ADE$_PromptSchedulingLatents(p: ADE$_PromptSchedulingLatents_input, meta?: ComfyNodeMetadata): ADE$_PromptSchedulingLatents
    /* category:Animate Diff 🎭🅐🅓_scheduling, name:"ADE_ValueScheduling", output:FLOAT+FLOATS+INT+INTS */
    ADE$_ValueScheduling(p: ADE$_ValueScheduling_input, meta?: ComfyNodeMetadata): ADE$_ValueScheduling
    /* category:Animate Diff 🎭🅐🅓_scheduling, name:"ADE_ValueSchedulingLatents", output:FLOAT+FLOATS+INT+INTS */
    ADE$_ValueSchedulingLatents(p: ADE$_ValueSchedulingLatents_input, meta?: ComfyNodeMetadata): ADE$_ValueSchedulingLatents
    /* category:Animate Diff 🎭🅐🅓_scheduling, name:"ADE_ValuesReplace", output:VALUES_REPLACE */
    ADE$_ValuesReplace(p: ADE$_ValuesReplace_input, meta?: ComfyNodeMetadata): ADE$_ValuesReplace
    /* category:Animate Diff 🎭🅐🅓_scheduling, name:"ADE_FloatToFloats", output:FLOATS */
    ADE$_FloatToFloats(p: ADE$_FloatToFloats_input, meta?: ComfyNodeMetadata): ADE$_FloatToFloats
    /* category:Animate Diff 🎭🅐🅓_per block, name:"ADE_ADBlockCombo", output:AD_BLOCK */
    ADE$_ADBlockCombo(p: ADE$_ADBlockCombo_input, meta?: ComfyNodeMetadata): ADE$_ADBlockCombo
    /* category:Animate Diff 🎭🅐🅓_per block, name:"ADE_ADBlockIndiv", output:AD_BLOCK */
    ADE$_ADBlockIndiv(p: ADE$_ADBlockIndiv_input, meta?: ComfyNodeMetadata): ADE$_ADBlockIndiv
    /* category:Animate Diff 🎭🅐🅓_per block, name:"ADE_PerBlockHighLevel", output:PER_BLOCK */
    ADE$_PerBlockHighLevel(p: ADE$_PerBlockHighLevel_input, meta?: ComfyNodeMetadata): ADE$_PerBlockHighLevel
    /* category:Animate Diff 🎭🅐🅓_per block, name:"ADE_PerBlock_SD15_MidLevel", output:PER_BLOCK */
    ADE$_PerBlock$_SD15$_MidLevel(p: ADE$_PerBlock$_SD15$_MidLevel_input, meta?: ComfyNodeMetadata): ADE$_PerBlock$_SD15$_MidLevel
    /* category:Animate Diff 🎭🅐🅓_per block, name:"ADE_PerBlock_SD15_LowLevel", output:PER_BLOCK */
    ADE$_PerBlock$_SD15$_LowLevel(p: ADE$_PerBlock$_SD15$_LowLevel_input, meta?: ComfyNodeMetadata): ADE$_PerBlock$_SD15$_LowLevel
    /* category:Animate Diff 🎭🅐🅓_per block, name:"ADE_PerBlock_SD15_FromFloats", output:PER_BLOCK */
    ADE$_PerBlock$_SD15$_FromFloats(p: ADE$_PerBlock$_SD15$_FromFloats_input, meta?: ComfyNodeMetadata): ADE$_PerBlock$_SD15$_FromFloats
    /* category:Animate Diff 🎭🅐🅓_per block, name:"ADE_PerBlock_SDXL_MidLevel", output:PER_BLOCK */
    ADE$_PerBlock$_SDXL$_MidLevel(p: ADE$_PerBlock$_SDXL$_MidLevel_input, meta?: ComfyNodeMetadata): ADE$_PerBlock$_SDXL$_MidLevel
    /* category:Animate Diff 🎭🅐🅓_per block, name:"ADE_PerBlock_SDXL_LowLevel", output:PER_BLOCK */
    ADE$_PerBlock$_SDXL$_LowLevel(p: ADE$_PerBlock$_SDXL$_LowLevel_input, meta?: ComfyNodeMetadata): ADE$_PerBlock$_SDXL$_LowLevel
    /* category:Animate Diff 🎭🅐🅓_per block, name:"ADE_PerBlock_SDXL_FromFloats", output:PER_BLOCK */
    ADE$_PerBlock$_SDXL$_FromFloats(p: ADE$_PerBlock$_SDXL$_FromFloats_input, meta?: ComfyNodeMetadata): ADE$_PerBlock$_SDXL$_FromFloats
    /* category:Animate Diff 🎭🅐🅓_extras, name:"ADE_AnimateDiffUnload", output:MODEL */
    ADE$_AnimateDiffUnload(p: ADE$_AnimateDiffUnload_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffUnload
    /* category:Animate Diff 🎭🅐🅓_extras, name:"ADE_EmptyLatentImageLarge", output:LATENT */
    ADE$_EmptyLatentImageLarge(p: ADE$_EmptyLatentImageLarge_input, meta?: ComfyNodeMetadata): ADE$_EmptyLatentImageLarge
    /* category:Animate Diff 🎭🅐🅓_extras, name:"CheckpointLoaderSimpleWithNoiseSelect", output:MODEL+CLIP+VAE */
    CheckpointLoaderSimpleWithNoiseSelect(p: CheckpointLoaderSimpleWithNoiseSelect_input, meta?: ComfyNodeMetadata): CheckpointLoaderSimpleWithNoiseSelect
    /* category:Animate Diff 🎭🅐🅓_extras, name:"ADE_PerturbedAttentionGuidanceMultival", output:MODEL */
    ADE$_PerturbedAttentionGuidanceMultival(p: ADE$_PerturbedAttentionGuidanceMultival_input, meta?: ComfyNodeMetadata): ADE$_PerturbedAttentionGuidanceMultival
    /* category:Animate Diff 🎭🅐🅓_extras, name:"ADE_RescaleCFGMultival", output:MODEL */
    ADE$_RescaleCFGMultival(p: ADE$_RescaleCFGMultival_input, meta?: ComfyNodeMetadata): ADE$_RescaleCFGMultival
    /* category:Animate Diff 🎭🅐🅓_① Gen1 nodes ①, name:"ADE_AnimateDiffLoaderGen1", output:MODEL */
    ADE$_AnimateDiffLoaderGen1(p: ADE$_AnimateDiffLoaderGen1_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffLoaderGen1
    /* category:Animate Diff 🎭🅐🅓_① Gen1 nodes ①, name:"ADE_AnimateDiffLoaderWithContext", output:MODEL */
    ADE$_AnimateDiffLoaderWithContext(p: ADE$_AnimateDiffLoaderWithContext_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffLoaderWithContext
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②, name:"ADE_UseEvolvedSampling", output:MODEL */
    ADE$_UseEvolvedSampling(p: ADE$_UseEvolvedSampling_input, meta?: ComfyNodeMetadata): ADE$_UseEvolvedSampling
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②, name:"ADE_ApplyAnimateDiffModelSimple", output:M_MODELS */
    ADE$_ApplyAnimateDiffModelSimple(p: ADE$_ApplyAnimateDiffModelSimple_input, meta?: ComfyNodeMetadata): ADE$_ApplyAnimateDiffModelSimple
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②, name:"ADE_ApplyAnimateDiffModel", output:M_MODELS */
    ADE$_ApplyAnimateDiffModel(p: ADE$_ApplyAnimateDiffModel_input, meta?: ComfyNodeMetadata): ADE$_ApplyAnimateDiffModel
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②, name:"ADE_LoadAnimateDiffModel", output:MOTION_MODEL */
    ADE$_LoadAnimateDiffModel(p: ADE$_LoadAnimateDiffModel_input, meta?: ComfyNodeMetadata): ADE$_LoadAnimateDiffModel
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_AnimateLCM-I2V, name:"ADE_ApplyAnimateLCMI2VModel", output:M_MODELS */
    ADE$_ApplyAnimateLCMI2VModel(p: ADE$_ApplyAnimateLCMI2VModel_input, meta?: ComfyNodeMetadata): ADE$_ApplyAnimateLCMI2VModel
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_AnimateLCM-I2V, name:"ADE_LoadAnimateLCMI2VModel", output:MOTION_MODEL+encoder_only */
    ADE$_LoadAnimateLCMI2VModel(p: ADE$_LoadAnimateLCMI2VModel_input, meta?: ComfyNodeMetadata): ADE$_LoadAnimateLCMI2VModel
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_AnimateLCM-I2V, name:"ADE_UpscaleAndVAEEncode", output:LATENT */
    ADE$_UpscaleAndVAEEncode(p: ADE$_UpscaleAndVAEEncode_input, meta?: ComfyNodeMetadata): ADE$_UpscaleAndVAEEncode
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_AnimateLCM-I2V_🧪experimental, name:"ADE_InjectI2VIntoAnimateDiffModel", output:MOTION_MODEL */
    ADE$_InjectI2VIntoAnimateDiffModel(p: ADE$_InjectI2VIntoAnimateDiffModel_input, meta?: ComfyNodeMetadata): ADE$_InjectI2VIntoAnimateDiffModel
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl, name:"ADE_ApplyAnimateDiffModelWithCameraCtrl", output:M_MODELS */
    ADE$_ApplyAnimateDiffModelWithCameraCtrl(p: ADE$_ApplyAnimateDiffModelWithCameraCtrl_input, meta?: ComfyNodeMetadata): ADE$_ApplyAnimateDiffModelWithCameraCtrl
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl, name:"ADE_LoadAnimateDiffModelWithCameraCtrl", output:MOTION_MODEL */
    ADE$_LoadAnimateDiffModelWithCameraCtrl(p: ADE$_LoadAnimateDiffModelWithCameraCtrl_input, meta?: ComfyNodeMetadata): ADE$_LoadAnimateDiffModelWithCameraCtrl
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl, name:"ADE_CameraCtrlAnimateDiffKeyframe", output:AD_KEYFRAMES */
    ADE$_CameraCtrlAnimateDiffKeyframe(p: ADE$_CameraCtrlAnimateDiffKeyframe_input, meta?: ComfyNodeMetadata): ADE$_CameraCtrlAnimateDiffKeyframe
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses, name:"ADE_LoadCameraPoses", output:CAMERACTRL_POSES */
    ADE$_LoadCameraPoses(p: ADE$_LoadCameraPoses_input, meta?: ComfyNodeMetadata): ADE$_LoadCameraPoses
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses, name:"ADE_LoadCameraPosesFromPath", output:CAMERACTRL_POSES */
    ADE$_LoadCameraPosesFromPath(p: ADE$_LoadCameraPosesFromPath_input, meta?: ComfyNodeMetadata): ADE$_LoadCameraPosesFromPath
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses, name:"ADE_CameraPoseBasic", output:CAMERACTRL_POSES */
    ADE$_CameraPoseBasic(p: ADE$_CameraPoseBasic_input, meta?: ComfyNodeMetadata): ADE$_CameraPoseBasic
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses, name:"ADE_CameraPoseCombo", output:CAMERACTRL_POSES */
    ADE$_CameraPoseCombo(p: ADE$_CameraPoseCombo_input, meta?: ComfyNodeMetadata): ADE$_CameraPoseCombo
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses, name:"ADE_CameraPoseAdvanced", output:CAMERACTRL_POSES */
    ADE$_CameraPoseAdvanced(p: ADE$_CameraPoseAdvanced_input, meta?: ComfyNodeMetadata): ADE$_CameraPoseAdvanced
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses, name:"ADE_CameraManualPoseAppend", output:CAMERACTRL_POSES */
    ADE$_CameraManualPoseAppend(p: ADE$_CameraManualPoseAppend_input, meta?: ComfyNodeMetadata): ADE$_CameraManualPoseAppend
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses, name:"ADE_ReplaceCameraParameters", output:CAMERACTRL_POSES */
    ADE$_ReplaceCameraParameters(p: ADE$_ReplaceCameraParameters_input, meta?: ComfyNodeMetadata): ADE$_ReplaceCameraParameters
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses, name:"ADE_ReplaceOriginalPoseAspectRatio", output:CAMERACTRL_POSES */
    ADE$_ReplaceOriginalPoseAspectRatio(p: ADE$_ReplaceOriginalPoseAspectRatio_input, meta?: ComfyNodeMetadata): ADE$_ReplaceOriginalPoseAspectRatio
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA, name:"ADE_ApplyAnimateDiffModelWithPIA", output:M_MODELS */
    ADE$_ApplyAnimateDiffModelWithPIA(p: ADE$_ApplyAnimateDiffModelWithPIA_input, meta?: ComfyNodeMetadata): ADE$_ApplyAnimateDiffModelWithPIA
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA, name:"ADE_InputPIA_Multival", output:PIA_INPUT */
    ADE$_InputPIA$_Multival(p: ADE$_InputPIA$_Multival_input, meta?: ComfyNodeMetadata): ADE$_InputPIA$_Multival
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA, name:"ADE_InputPIA_PaperPresets", output:PIA_INPUT */
    ADE$_InputPIA$_PaperPresets(p: ADE$_InputPIA$_PaperPresets_input, meta?: ComfyNodeMetadata): ADE$_InputPIA$_PaperPresets
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA, name:"ADE_PIA_AnimateDiffKeyframe", output:AD_KEYFRAMES */
    ADE$_PIA$_AnimateDiffKeyframe(p: ADE$_PIA$_AnimateDiffKeyframe_input, meta?: ComfyNodeMetadata): ADE$_PIA$_AnimateDiffKeyframe
    /* category:Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA_🧪experimental, name:"ADE_InjectPIAIntoAnimateDiffModel", output:MOTION_MODEL */
    ADE$_InjectPIAIntoAnimateDiffModel(p: ADE$_InjectPIAIntoAnimateDiffModel_input, meta?: ComfyNodeMetadata): ADE$_InjectPIAIntoAnimateDiffModel
    /* category:, name:"AnimateDiffLoaderV1", output:MODEL+LATENT */
    AnimateDiffLoaderV1(p: AnimateDiffLoaderV1_input, meta?: ComfyNodeMetadata): AnimateDiffLoaderV1
    /* category:, name:"ADE_AnimateDiffLoaderV1Advanced", output:MODEL+LATENT */
    ADE$_AnimateDiffLoaderV1Advanced(p: ADE$_AnimateDiffLoaderV1Advanced_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffLoaderV1Advanced
    /* category:, name:"ADE_AnimateDiffCombine", output:GIF */
    ADE$_AnimateDiffCombine(p: ADE$_AnimateDiffCombine_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffCombine
    /* category:, name:"ADE_AnimateDiffModelSettings_Release", output:AD_SETTINGS */
    ADE$_AnimateDiffModelSettings$_Release(p: ADE$_AnimateDiffModelSettings$_Release_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffModelSettings$_Release
    /* category:, name:"ADE_AnimateDiffModelSettingsSimple", output:AD_SETTINGS */
    ADE$_AnimateDiffModelSettingsSimple(p: ADE$_AnimateDiffModelSettingsSimple_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffModelSettingsSimple
    /* category:, name:"ADE_AnimateDiffModelSettings", output:AD_SETTINGS */
    ADE$_AnimateDiffModelSettings(p: ADE$_AnimateDiffModelSettings_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffModelSettings
    /* category:, name:"ADE_AnimateDiffModelSettingsAdvancedAttnStrengths", output:AD_SETTINGS */
    ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths(p: ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths_input, meta?: ComfyNodeMetadata): ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths
    /* category:Art Venture_Parameters, name:"AV_CheckpointModelsToParametersPipe", output:PIPE */
    AV$_CheckpointModelsToParametersPipe(p: AV$_CheckpointModelsToParametersPipe_input, meta?: ComfyNodeMetadata): AV$_CheckpointModelsToParametersPipe
    /* category:Art Venture_Parameters, name:"AV_PromptsToParametersPipe", output:PIPE */
    AV$_PromptsToParametersPipe(p: AV$_PromptsToParametersPipe_input, meta?: ComfyNodeMetadata): AV$_PromptsToParametersPipe
    /* category:Art Venture_Parameters, name:"AV_ParametersPipeToCheckpointModels", output:pipe+ckpt_name+secondary_ckpt_name+vae_name+upscaler_name+secondary_upscaler_name+lora_1_name+lora_2_name+lora_3_name */
    AV$_ParametersPipeToCheckpointModels(p: AV$_ParametersPipeToCheckpointModels_input, meta?: ComfyNodeMetadata): AV$_ParametersPipeToCheckpointModels
    /* category:Art Venture_Parameters, name:"AV_ParametersPipeToPrompts", output:pipe+positive+negative+image+mask */
    AV$_ParametersPipeToPrompts(p: AV$_ParametersPipeToPrompts_input, meta?: ComfyNodeMetadata): AV$_ParametersPipeToPrompts
    /* category:Art Venture_Loaders, name:"AV_VAELoader", output:VAE */
    AV$_VAELoader(p: AV$_VAELoader_input, meta?: ComfyNodeMetadata): AV$_VAELoader
    /* category:Art Venture_Loaders, name:"AV_LoraLoader", output:MODEL+CLIP */
    AV$_LoraLoader(p: AV$_LoraLoader_input, meta?: ComfyNodeMetadata): AV$_LoraLoader
    /* category:Art Venture_Loaders, name:"AV_LoraListLoader", output:MODEL+CLIP */
    AV$_LoraListLoader(p: AV$_LoraListLoader_input, meta?: ComfyNodeMetadata): AV$_LoraListLoader
    /* category:Art Venture_Loaders, name:"AV_LoraListStacker", output:LORA_STACK */
    AV$_LoraListStacker(p: AV$_LoraListStacker_input, meta?: ComfyNodeMetadata): AV$_LoraListStacker
    /* category:Art Venture_Model Merging, name:"AV_CheckpointMerge", output:MODEL */
    AV$_CheckpointMerge(p: AV$_CheckpointMerge_input, meta?: ComfyNodeMetadata): AV$_CheckpointMerge
    /* category:Art Venture_Model Merging, name:"AV_CheckpointSave", output: */
    AV$_CheckpointSave(p: AV$_CheckpointSave_input, meta?: ComfyNodeMetadata): AV$_CheckpointSave
    /* category:Art Venture_Image, name:"LoadImageFromUrl", output:images+masks+has_image */
    LoadImageFromUrl(p: LoadImageFromUrl_input, meta?: ComfyNodeMetadata): LoadImageFromUrl
    /* category:Art Venture_Image, name:"LoadImageAsMaskFromUrl", output:masks */
    LoadImageAsMaskFromUrl(p: LoadImageAsMaskFromUrl_input, meta?: ComfyNodeMetadata): LoadImageAsMaskFromUrl
    /* category:Art Venture_Utils, name:"StringToInt", output:INT */
    StringToInt(p: StringToInt_input, meta?: ComfyNodeMetadata): StringToInt
    /* category:Art Venture_Utils, name:"StringToNumber", output:INT+FLOAT */
    StringToNumber(p: StringToNumber_input, meta?: ComfyNodeMetadata): StringToNumber
    /* category:Art Venture_Utils, name:"BooleanPrimitive", output:BOOLEAN+STRING */
    BooleanPrimitive(p: BooleanPrimitive_input, meta?: ComfyNodeMetadata): BooleanPrimitive
    /* category:Art Venture_Utils, name:"ImageMuxer", output:IMAGE */
    ImageMuxer(p: ImageMuxer_input, meta?: ComfyNodeMetadata): ImageMuxer
    /* category:Art Venture_Utils, name:"ImageScaleDown", output:IMAGE */
    ImageScaleDown(p: ImageScaleDown_input, meta?: ComfyNodeMetadata): ImageScaleDown
    /* category:Art Venture_Utils, name:"ImageScaleDownBy", output:IMAGE */
    ImageScaleDownBy(p: ImageScaleDownBy_input, meta?: ComfyNodeMetadata): ImageScaleDownBy
    /* category:Art Venture_Utils, name:"ImageScaleDownToSize", output:IMAGE */
    ImageScaleDownToSize(p: ImageScaleDownToSize_input, meta?: ComfyNodeMetadata): ImageScaleDownToSize
    /* category:Art Venture_Utils, name:"ImageScaleToMegapixels", output:IMAGE */
    ImageScaleToMegapixels(p: ImageScaleToMegapixels_input, meta?: ComfyNodeMetadata): ImageScaleToMegapixels
    /* category:Art Venture_Utils, name:"ImageAlphaComposite", output:IMAGE */
    ImageAlphaComposite(p: ImageAlphaComposite_input, meta?: ComfyNodeMetadata): ImageAlphaComposite
    /* category:Art Venture_Utils, name:"ImageGaussianBlur", output:IMAGE */
    ImageGaussianBlur(p: ImageGaussianBlur_input, meta?: ComfyNodeMetadata): ImageGaussianBlur
    /* category:Art Venture_Utils, name:"ImageRepeat", output:IMAGE */
    ImageRepeat(p: ImageRepeat_input, meta?: ComfyNodeMetadata): ImageRepeat
    /* category:Art Venture_Utils, name:"ImageExtractChannel", output:channel_data */
    ImageExtractChannel(p: ImageExtractChannel_input, meta?: ComfyNodeMetadata): ImageExtractChannel
    /* category:Art Venture_Utils, name:"ImageApplyChannel", output:IMAGE */
    ImageApplyChannel(p: ImageApplyChannel_input, meta?: ComfyNodeMetadata): ImageApplyChannel
    /* category:Art Venture_Utils, name:"QRCodeGenerator", output:IMAGE */
    QRCodeGenerator(p: QRCodeGenerator_input, meta?: ComfyNodeMetadata): QRCodeGenerator
    /* category:Art Venture_Utils, name:"DependenciesEdit", output:DEPENDENCIES */
    DependenciesEdit(p: DependenciesEdit_input, meta?: ComfyNodeMetadata): DependenciesEdit
    /* category:Art Venture_Utils, name:"AspectRatioSelector", output:ratio+width+height */
    AspectRatioSelector(p: AspectRatioSelector_input, meta?: ComfyNodeMetadata): AspectRatioSelector
    /* category:Art Venture_Utils, name:"SDXLAspectRatioSelector", output:ratio+width+height */
    SDXLAspectRatioSelector(p: SDXLAspectRatioSelector_input, meta?: ComfyNodeMetadata): SDXLAspectRatioSelector
    /* category:Art Venture_Utils, name:"SeedSelector", output:seed */
    SeedSelector(p: SeedSelector_input, meta?: ComfyNodeMetadata): SeedSelector
    /* category:Art Venture_Utils, name:"CheckpointNameSelector", output:ckpt_name+ckpt_name_str */
    CheckpointNameSelector(p: CheckpointNameSelector_input, meta?: ComfyNodeMetadata): CheckpointNameSelector
    /* category:Art Venture_Utils, name:"LoadJsonFromUrl", output:JSON */
    LoadJsonFromUrl(p: LoadJsonFromUrl_input, meta?: ComfyNodeMetadata): LoadJsonFromUrl
    /* category:Art Venture_Utils, name:"LoadJsonFromText", output:JSON */
    LoadJsonFromText(p: LoadJsonFromText_input, meta?: ComfyNodeMetadata): LoadJsonFromText
    /* category:Art Venture_Utils, name:"GetObjectFromJson", output:JSON */
    GetObjectFromJson(p: GetObjectFromJson_input, meta?: ComfyNodeMetadata): GetObjectFromJson
    /* category:Art Venture_Utils, name:"GetTextFromJson", output:STRING */
    GetTextFromJson(p: GetTextFromJson_input, meta?: ComfyNodeMetadata): GetTextFromJson
    /* category:Art Venture_Utils, name:"GetFloatFromJson", output:FLOAT */
    GetFloatFromJson(p: GetFloatFromJson_input, meta?: ComfyNodeMetadata): GetFloatFromJson
    /* category:Art Venture_Utils, name:"GetIntFromJson", output:INT */
    GetIntFromJson(p: GetIntFromJson_input, meta?: ComfyNodeMetadata): GetIntFromJson
    /* category:Art Venture_Utils, name:"GetBoolFromJson", output:BOOLEAN */
    GetBoolFromJson(p: GetBoolFromJson_input, meta?: ComfyNodeMetadata): GetBoolFromJson
    /* category:Art Venture_Utils, name:"RandomInt", output:INT+STRING */
    RandomInt(p: RandomInt_input, meta?: ComfyNodeMetadata): RandomInt
    /* category:Art Venture_Utils, name:"RandomFloat", output:FLOAT+STRING */
    RandomFloat(p: RandomFloat_input, meta?: ComfyNodeMetadata): RandomFloat
    /* category:Art Venture_Utils, name:"NumberScaler", output:FLOAT */
    NumberScaler(p: NumberScaler_input, meta?: ComfyNodeMetadata): NumberScaler
    /* category:Art Venture_Utils, name:"MergeModels", output:MODEL */
    MergeModels(p: MergeModels_input, meta?: ComfyNodeMetadata): MergeModels
    /* category:Art Venture_Utils, name:"TextRandomMultiline", output:lines */
    TextRandomMultiline(p: TextRandomMultiline_input, meta?: ComfyNodeMetadata): TextRandomMultiline
    /* category:utils, name:"SDXLPromptStyler", output:positive_prompt_text_g+negative_prompt_text_g */
    SDXLPromptStyler(p: SDXLPromptStyler_input, meta?: ComfyNodeMetadata): SDXLPromptStyler
    /* category:Art Venture_Captioning, name:"BLIPLoader", output:BLIP_MODEL */
    BLIPLoader(p: BLIPLoader_input, meta?: ComfyNodeMetadata): BLIPLoader
    /* category:Art Venture_Captioning, name:"BLIPCaption", output:caption */
    BLIPCaption(p: BLIPCaption_input, meta?: ComfyNodeMetadata): BLIPCaption
    /* category:Art Venture_Captioning, name:"DownloadAndLoadBlip", output:BLIP_MODEL */
    DownloadAndLoadBlip(p: DownloadAndLoadBlip_input, meta?: ComfyNodeMetadata): DownloadAndLoadBlip
    /* category:Art Venture_Utils, name:"DeepDanbooruCaption", output:caption */
    DeepDanbooruCaption(p: DeepDanbooruCaption_input, meta?: ComfyNodeMetadata): DeepDanbooruCaption
    /* category:Art Venture_Sampling, name:"Fooocus_KSampler", output:LATENT */
    Fooocus$_KSampler(p: Fooocus$_KSampler_input, meta?: ComfyNodeMetadata): Fooocus$_KSampler
    /* category:Art Venture_Sampling, name:"Fooocus_KSamplerAdvanced", output:LATENT */
    Fooocus$_KSamplerAdvanced(p: Fooocus$_KSamplerAdvanced_input, meta?: ComfyNodeMetadata): Fooocus$_KSamplerAdvanced
    /* category:Art Venture_Post Processing, name:"ColorBlend", output:IMAGE */
    ColorBlend(p: ColorBlend_input, meta?: ComfyNodeMetadata): ColorBlend
    /* category:Art Venture_Post Processing, name:"ColorCorrect", output:IMAGE */
    ColorCorrect(p: ColorCorrect_input, meta?: ComfyNodeMetadata): ColorCorrect
    /* category:Art Venture_Loaders, name:"AV_ControlNetLoader", output:CONTROL_NET */
    AV$_ControlNetLoader(p: AV$_ControlNetLoader_input, meta?: ComfyNodeMetadata): AV$_ControlNetLoader
    /* category:Art Venture_Loaders, name:"AV_ControlNetEfficientLoader", output:CONDITIONING */
    AV$_ControlNetEfficientLoader(p: AV$_ControlNetEfficientLoader_input, meta?: ComfyNodeMetadata): AV$_ControlNetEfficientLoader
    /* category:Art Venture_Loaders, name:"AV_ControlNetEfficientLoaderAdvanced", output:positive+negative */
    AV$_ControlNetEfficientLoaderAdvanced(p: AV$_ControlNetEfficientLoaderAdvanced_input, meta?: ComfyNodeMetadata): AV$_ControlNetEfficientLoaderAdvanced
    /* category:Art Venture_Loaders, name:"AV_ControlNetEfficientStacker", output:CNET_STACK */
    AV$_ControlNetEfficientStacker(p: AV$_ControlNetEfficientStacker_input, meta?: ComfyNodeMetadata): AV$_ControlNetEfficientStacker
    /* category:Art Venture_Loaders, name:"AV_ControlNetEfficientStackerSimple", output:CNET_STACK */
    AV$_ControlNetEfficientStackerSimple(p: AV$_ControlNetEfficientStackerSimple_input, meta?: ComfyNodeMetadata): AV$_ControlNetEfficientStackerSimple
    /* category:Art Venture_Loaders, name:"AV_ControlNetPreprocessor", output:IMAGE+CNET_NAME */
    AV$_ControlNetPreprocessor(p: AV$_ControlNetPreprocessor_input, meta?: ComfyNodeMetadata): AV$_ControlNetPreprocessor
    /* category:Art Venture_IP Adapter, name:"AV_IPAdapter", output:model+pipeline+clip_vision */
    AV$_IPAdapter(p: AV$_IPAdapter_input, meta?: ComfyNodeMetadata): AV$_IPAdapter
    /* category:Art Venture_IP Adapter, name:"AV_IPAdapterPipe", output:pipeline */
    AV$_IPAdapterPipe(p: AV$_IPAdapterPipe_input, meta?: ComfyNodeMetadata): AV$_IPAdapterPipe
    /* category:Art Venture_Segmentation, name:"ISNetLoader", output:ISNET_MODEL */
    ISNetLoader(p: ISNetLoader_input, meta?: ComfyNodeMetadata): ISNetLoader
    /* category:Art Venture_Segmentation, name:"ISNetSegment", output:segmented+mask */
    ISNetSegment(p: ISNetSegment_input, meta?: ComfyNodeMetadata): ISNetSegment
    /* category:Art Venture_Segmentation, name:"DownloadISNetModel", output:ISNET_MODEL */
    DownloadISNetModel(p: DownloadISNetModel_input, meta?: ComfyNodeMetadata): DownloadISNetModel
    /* category:Art Venture_Segmentation, name:"AV_SAMLoader", output:sam_model */
    AV$_SAMLoader(p: AV$_SAMLoader_input, meta?: ComfyNodeMetadata): AV$_SAMLoader
    /* category:Art Venture_Segmentation, name:"GetSAMEmbedding", output:SAM_EMBEDDING */
    GetSAMEmbedding(p: GetSAMEmbedding_input, meta?: ComfyNodeMetadata): GetSAMEmbedding
    /* category:Art Venture_Segmentation, name:"SAMEmbeddingToImage", output:IMAGE */
    SAMEmbeddingToImage(p: SAMEmbeddingToImage_input, meta?: ComfyNodeMetadata): SAMEmbeddingToImage
    /* category:Art Venture_Inpainting, name:"LaMaInpaint", output:IMAGE */
    LaMaInpaint(p: LaMaInpaint_input, meta?: ComfyNodeMetadata): LaMaInpaint
    /* category:Art Venture_Inpainting, name:"PrepareImageAndMaskForInpaint", output:inpaint_image+inpaint_mask+overlay_image+crop_region */
    PrepareImageAndMaskForInpaint(p: PrepareImageAndMaskForInpaint_input, meta?: ComfyNodeMetadata): PrepareImageAndMaskForInpaint
    /* category:Art Venture_Inpainting, name:"OverlayInpaintedLatent", output:LATENT */
    OverlayInpaintedLatent(p: OverlayInpaintedLatent_input, meta?: ComfyNodeMetadata): OverlayInpaintedLatent
    /* category:Art Venture_Inpainting, name:"OverlayInpaintedImage", output:IMAGE */
    OverlayInpaintedImage(p: OverlayInpaintedImage_input, meta?: ComfyNodeMetadata): OverlayInpaintedImage
    /* category:ArtVenture_Detailer, name:"AV_FaceDetailer", output:image+cropped_refined+cropped_enhanced_alpha+mask+detailer_pipe+cnet_images */
    AV$_FaceDetailer(p: AV$_FaceDetailer_input, meta?: ComfyNodeMetadata): AV$_FaceDetailer
    /* category:ArtVenture_Detailer, name:"AV_FaceDetailerPipe", output:image+cropped_refined+cropped_enhanced_alpha+mask+detailer_pipe+cnet_images */
    AV$_FaceDetailerPipe(p: AV$_FaceDetailerPipe_input, meta?: ComfyNodeMetadata): AV$_FaceDetailerPipe
    /* category:ArtVenture_LLM, name:"AV_OpenAIApi", output:LLM_API */
    AV$_OpenAIApi(p: AV$_OpenAIApi_input, meta?: ComfyNodeMetadata): AV$_OpenAIApi
    /* category:ArtVenture_LLM, name:"AV_ClaudeApi", output:llm_api */
    AV$_ClaudeApi(p: AV$_ClaudeApi_input, meta?: ComfyNodeMetadata): AV$_ClaudeApi
    /* category:ArtVenture_LLM, name:"AV_AwsBedrockClaudeApi", output:llm_api */
    AV$_AwsBedrockClaudeApi(p: AV$_AwsBedrockClaudeApi_input, meta?: ComfyNodeMetadata): AV$_AwsBedrockClaudeApi
    /* category:ArtVenture_LLM, name:"AV_AwsBedrockMistralApi", output:llm_api */
    AV$_AwsBedrockMistralApi(p: AV$_AwsBedrockMistralApi_input, meta?: ComfyNodeMetadata): AV$_AwsBedrockMistralApi
    /* category:ArtVenture_LLM, name:"AV_LLMApiConfig", output:llm_config */
    AV$_LLMApiConfig(p: AV$_LLMApiConfig_input, meta?: ComfyNodeMetadata): AV$_LLMApiConfig
    /* category:ArtVenture_LLM, name:"AV_LLMMessage", output:messages */
    AV$_LLMMessage(p: AV$_LLMMessage_input, meta?: ComfyNodeMetadata): AV$_LLMMessage
    /* category:ArtVenture_LLM, name:"AV_LLMChat", output:response */
    AV$_LLMChat(p: AV$_LLMChat_input, meta?: ComfyNodeMetadata): AV$_LLMChat
    /* category:ArtVenture_LLM, name:"AV_LLMCompletion", output:response */
    AV$_LLMCompletion(p: AV$_LLMCompletion_input, meta?: ComfyNodeMetadata): AV$_LLMCompletion
    /* category:🧹BRIA RMBG, name:"BRIA_RMBG_ModelLoader_Zho", output:rmbgmodel */
    BRIA$_RMBG$_ModelLoader$_Zho(p: BRIA$_RMBG$_ModelLoader$_Zho_input, meta?: ComfyNodeMetadata): BRIA$_RMBG$_ModelLoader$_Zho
    /* category:🧹BRIA RMBG, name:"BRIA_RMBG_Zho", output:image+mask */
    BRIA$_RMBG$_Zho(p: BRIA$_RMBG$_Zho_input, meta?: ComfyNodeMetadata): BRIA$_RMBG$_Zho
    /* category:loaders, name:"LoraLoader|pysssss", output:MODEL+CLIP+STRING */
    LoraLoader$8pysssss(p: LoraLoader$8pysssss_input, meta?: ComfyNodeMetadata): LoraLoader$8pysssss
    /* category:loaders, name:"CheckpointLoader|pysssss", output:MODEL+CLIP+VAE+STRING */
    CheckpointLoader$8pysssss(p: CheckpointLoader$8pysssss_input, meta?: ComfyNodeMetadata): CheckpointLoader$8pysssss
    /* category:image, name:"ConstrainImage|pysssss", output:IMAGE */
    ConstrainImage$8pysssss(p: ConstrainImage$8pysssss_input, meta?: ComfyNodeMetadata): ConstrainImage$8pysssss
    /* category:image, name:"ConstrainImageforVideo|pysssss", output:IMAGE */
    ConstrainImageforVideo$8pysssss(p: ConstrainImageforVideo$8pysssss_input, meta?: ComfyNodeMetadata): ConstrainImageforVideo$8pysssss
    /* category:utils, name:"MathExpression|pysssss", output:INT+FLOAT */
    MathExpression$8pysssss(p: MathExpression$8pysssss_input, meta?: ComfyNodeMetadata): MathExpression$8pysssss
    /* category:utils, name:"PlaySound|pysssss", output:$Star */
    PlaySound$8pysssss(p: PlaySound$8pysssss_input, meta?: ComfyNodeMetadata): PlaySound$8pysssss
    /* category:utils, name:"Repeater|pysssss", output:$Star */
    Repeater$8pysssss(p: Repeater$8pysssss_input, meta?: ComfyNodeMetadata): Repeater$8pysssss
    /* category:__hidden__, name:"ReroutePrimitive|pysssss", output:$Star */
    ReroutePrimitive$8pysssss(p: ReroutePrimitive$8pysssss_input, meta?: ComfyNodeMetadata): ReroutePrimitive$8pysssss
    /* category:utils, name:"ShowText|pysssss", output:STRING */
    ShowText$8pysssss(p: ShowText$8pysssss_input, meta?: ComfyNodeMetadata): ShowText$8pysssss
    /* category:utils, name:"StringFunction|pysssss", output:STRING */
    StringFunction$8pysssss(p: StringFunction$8pysssss_input, meta?: ComfyNodeMetadata): StringFunction$8pysssss
    /* category:utils, name:"SystemNotification|pysssss", output:$Star */
    SystemNotification$8pysssss(p: SystemNotification$8pysssss_input, meta?: ComfyNodeMetadata): SystemNotification$8pysssss
    /* category:utils, name:"LoadText|pysssss", output:STRING */
    LoadText$8pysssss(p: LoadText$8pysssss_input, meta?: ComfyNodeMetadata): LoadText$8pysssss
    /* category:utils, name:"SaveText|pysssss", output:STRING */
    SaveText$8pysssss(p: SaveText$8pysssss_input, meta?: ComfyNodeMetadata): SaveText$8pysssss
    /* category:Dynamic Prompts, name:"DPRandomGenerator", output:STRING */
    DPRandomGenerator(p: DPRandomGenerator_input, meta?: ComfyNodeMetadata): DPRandomGenerator
    /* category:Dynamic Prompts, name:"DPCombinatorialGenerator", output:STRING */
    DPCombinatorialGenerator(p: DPCombinatorialGenerator_input, meta?: ComfyNodeMetadata): DPCombinatorialGenerator
    /* category:Dynamic Prompts, name:"DPFeelingLucky", output:STRING */
    DPFeelingLucky(p: DPFeelingLucky_input, meta?: ComfyNodeMetadata): DPFeelingLucky
    /* category:Dynamic Prompts, name:"DPJinja", output:STRING */
    DPJinja(p: DPJinja_input, meta?: ComfyNodeMetadata): DPJinja
    /* category:Dynamic Prompts, name:"DPMagicPrompt", output:STRING */
    DPMagicPrompt(p: DPMagicPrompt_input, meta?: ComfyNodeMetadata): DPMagicPrompt
    /* category:utils, name:"DPOutput", output: */
    DPOutput(p: DPOutput_input, meta?: ComfyNodeMetadata): DPOutput
    /* category:ImpactPack, name:"SAMLoader", output:SAM_MODEL */
    SAMLoader(p: SAMLoader_input, meta?: ComfyNodeMetadata): SAMLoader
    /* category:ImpactPack_Util, name:"CLIPSegDetectorProvider", output:BBOX_DETECTOR */
    CLIPSegDetectorProvider(p: CLIPSegDetectorProvider_input, meta?: ComfyNodeMetadata): CLIPSegDetectorProvider
    /* category:ImpactPack, name:"ONNXDetectorProvider", output:BBOX_DETECTOR */
    ONNXDetectorProvider(p: ONNXDetectorProvider_input, meta?: ComfyNodeMetadata): ONNXDetectorProvider
    /* category:ImpactPack_Operation, name:"BitwiseAndMaskForEach", output:SEGS */
    BitwiseAndMaskForEach(p: BitwiseAndMaskForEach_input, meta?: ComfyNodeMetadata): BitwiseAndMaskForEach
    /* category:ImpactPack_Operation, name:"SubtractMaskForEach", output:SEGS */
    SubtractMaskForEach(p: SubtractMaskForEach_input, meta?: ComfyNodeMetadata): SubtractMaskForEach
    /* category:ImpactPack_Detailer, name:"DetailerForEach", output:IMAGE */
    DetailerForEach(p: DetailerForEach_input, meta?: ComfyNodeMetadata): DetailerForEach
    /* category:ImpactPack_Detailer, name:"DetailerForEachDebug", output:image+cropped+cropped_refined+cropped_refined_alpha+cnet_images */
    DetailerForEachDebug(p: DetailerForEachDebug_input, meta?: ComfyNodeMetadata): DetailerForEachDebug
    /* category:ImpactPack_Detailer, name:"DetailerForEachPipe", output:image+segs+basic_pipe+cnet_images */
    DetailerForEachPipe(p: DetailerForEachPipe_input, meta?: ComfyNodeMetadata): DetailerForEachPipe
    /* category:ImpactPack_Detailer, name:"DetailerForEachDebugPipe", output:image+segs+basic_pipe+cropped+cropped_refined+cropped_refined_alpha+cnet_images */
    DetailerForEachDebugPipe(p: DetailerForEachDebugPipe_input, meta?: ComfyNodeMetadata): DetailerForEachDebugPipe
    /* category:ImpactPack_Detailer, name:"DetailerForEachPipeForAnimateDiff", output:image+segs+basic_pipe+cnet_images */
    DetailerForEachPipeForAnimateDiff(p: DetailerForEachPipeForAnimateDiff_input, meta?: ComfyNodeMetadata): DetailerForEachPipeForAnimateDiff
    /* category:ImpactPack_Detector, name:"SAMDetectorCombined", output:MASK */
    SAMDetectorCombined(p: SAMDetectorCombined_input, meta?: ComfyNodeMetadata): SAMDetectorCombined
    /* category:ImpactPack_Detector, name:"SAMDetectorSegmented", output:combined_mask+batch_masks */
    SAMDetectorSegmented(p: SAMDetectorSegmented_input, meta?: ComfyNodeMetadata): SAMDetectorSegmented
    /* category:ImpactPack_Simple, name:"FaceDetailer", output:image+cropped_refined+cropped_enhanced_alpha+mask+detailer_pipe+cnet_images */
    FaceDetailer(p: FaceDetailer_input, meta?: ComfyNodeMetadata): FaceDetailer
    /* category:ImpactPack_Simple, name:"FaceDetailerPipe", output:image+cropped_refined+cropped_enhanced_alpha+mask+detailer_pipe+cnet_images */
    FaceDetailerPipe(p: FaceDetailerPipe_input, meta?: ComfyNodeMetadata): FaceDetailerPipe
    /* category:ImpactPack_Detailer, name:"MaskDetailerPipe", output:image+cropped_refined+cropped_enhanced_alpha+basic_pipe+refiner_basic_pipe_opt */
    MaskDetailerPipe(p: MaskDetailerPipe_input, meta?: ComfyNodeMetadata): MaskDetailerPipe
    /* category:ImpactPack_Pipe, name:"ToDetailerPipe", output:detailer_pipe */
    ToDetailerPipe(p: ToDetailerPipe_input, meta?: ComfyNodeMetadata): ToDetailerPipe
    /* category:ImpactPack_Pipe, name:"ToDetailerPipeSDXL", output:detailer_pipe */
    ToDetailerPipeSDXL(p: ToDetailerPipeSDXL_input, meta?: ComfyNodeMetadata): ToDetailerPipeSDXL
    /* category:ImpactPack_Pipe, name:"FromDetailerPipe", output:model+clip+vae+positive+negative+bbox_detector+sam_model_opt+segm_detector_opt+detailer_hook */
    FromDetailerPipe(p: FromDetailerPipe_input, meta?: ComfyNodeMetadata): FromDetailerPipe
    /* category:ImpactPack_Pipe, name:"FromDetailerPipe_v2", output:detailer_pipe+model+clip+vae+positive+negative+bbox_detector+sam_model_opt+segm_detector_opt+detailer_hook */
    FromDetailerPipe$_v2(p: FromDetailerPipe$_v2_input, meta?: ComfyNodeMetadata): FromDetailerPipe$_v2
    /* category:ImpactPack_Pipe, name:"FromDetailerPipeSDXL", output:detailer_pipe+model+clip+vae+positive+negative+bbox_detector+sam_model_opt+segm_detector_opt+detailer_hook+refiner_model+refiner_clip+refiner_positive+refiner_negative */
    FromDetailerPipeSDXL(p: FromDetailerPipeSDXL_input, meta?: ComfyNodeMetadata): FromDetailerPipeSDXL
    /* category:ImpactPack_Pipe, name:"AnyPipeToBasic", output:basic_pipe */
    AnyPipeToBasic(p: AnyPipeToBasic_input, meta?: ComfyNodeMetadata): AnyPipeToBasic
    /* category:ImpactPack_Pipe, name:"ToBasicPipe", output:basic_pipe */
    ToBasicPipe(p: ToBasicPipe_input, meta?: ComfyNodeMetadata): ToBasicPipe
    /* category:ImpactPack_Pipe, name:"FromBasicPipe", output:model+clip+vae+positive+negative */
    FromBasicPipe(p: FromBasicPipe_input, meta?: ComfyNodeMetadata): FromBasicPipe
    /* category:ImpactPack_Pipe, name:"FromBasicPipe_v2", output:basic_pipe+model+clip+vae+positive+negative */
    FromBasicPipe$_v2(p: FromBasicPipe$_v2_input, meta?: ComfyNodeMetadata): FromBasicPipe$_v2
    /* category:ImpactPack_Pipe, name:"BasicPipeToDetailerPipe", output:detailer_pipe */
    BasicPipeToDetailerPipe(p: BasicPipeToDetailerPipe_input, meta?: ComfyNodeMetadata): BasicPipeToDetailerPipe
    /* category:ImpactPack_Pipe, name:"BasicPipeToDetailerPipeSDXL", output:detailer_pipe */
    BasicPipeToDetailerPipeSDXL(p: BasicPipeToDetailerPipeSDXL_input, meta?: ComfyNodeMetadata): BasicPipeToDetailerPipeSDXL
    /* category:ImpactPack_Pipe, name:"DetailerPipeToBasicPipe", output:base_basic_pipe+refiner_basic_pipe */
    DetailerPipeToBasicPipe(p: DetailerPipeToBasicPipe_input, meta?: ComfyNodeMetadata): DetailerPipeToBasicPipe
    /* category:ImpactPack_Pipe, name:"EditBasicPipe", output:basic_pipe */
    EditBasicPipe(p: EditBasicPipe_input, meta?: ComfyNodeMetadata): EditBasicPipe
    /* category:ImpactPack_Pipe, name:"EditDetailerPipe", output:detailer_pipe */
    EditDetailerPipe(p: EditDetailerPipe_input, meta?: ComfyNodeMetadata): EditDetailerPipe
    /* category:ImpactPack_Pipe, name:"EditDetailerPipeSDXL", output:detailer_pipe */
    EditDetailerPipeSDXL(p: EditDetailerPipeSDXL_input, meta?: ComfyNodeMetadata): EditDetailerPipeSDXL
    /* category:ImpactPack_Upscale, name:"LatentPixelScale", output:LATENT+IMAGE */
    LatentPixelScale(p: LatentPixelScale_input, meta?: ComfyNodeMetadata): LatentPixelScale
    /* category:ImpactPack_Upscale, name:"PixelKSampleUpscalerProvider", output:UPSCALER */
    PixelKSampleUpscalerProvider(p: PixelKSampleUpscalerProvider_input, meta?: ComfyNodeMetadata): PixelKSampleUpscalerProvider
    /* category:ImpactPack_Upscale, name:"PixelKSampleUpscalerProviderPipe", output:UPSCALER */
    PixelKSampleUpscalerProviderPipe(p: PixelKSampleUpscalerProviderPipe_input, meta?: ComfyNodeMetadata): PixelKSampleUpscalerProviderPipe
    /* category:ImpactPack_Upscale, name:"IterativeLatentUpscale", output:latent+vae */
    IterativeLatentUpscale(p: IterativeLatentUpscale_input, meta?: ComfyNodeMetadata): IterativeLatentUpscale
    /* category:ImpactPack_Upscale, name:"IterativeImageUpscale", output:image */
    IterativeImageUpscale(p: IterativeImageUpscale_input, meta?: ComfyNodeMetadata): IterativeImageUpscale
    /* category:ImpactPack_Upscale, name:"PixelTiledKSampleUpscalerProvider", output:UPSCALER */
    PixelTiledKSampleUpscalerProvider(p: PixelTiledKSampleUpscalerProvider_input, meta?: ComfyNodeMetadata): PixelTiledKSampleUpscalerProvider
    /* category:ImpactPack_Upscale, name:"PixelTiledKSampleUpscalerProviderPipe", output:UPSCALER */
    PixelTiledKSampleUpscalerProviderPipe(p: PixelTiledKSampleUpscalerProviderPipe_input, meta?: ComfyNodeMetadata): PixelTiledKSampleUpscalerProviderPipe
    /* category:ImpactPack_Upscale, name:"TwoSamplersForMaskUpscalerProvider", output:UPSCALER */
    TwoSamplersForMaskUpscalerProvider(p: TwoSamplersForMaskUpscalerProvider_input, meta?: ComfyNodeMetadata): TwoSamplersForMaskUpscalerProvider
    /* category:ImpactPack_Upscale, name:"TwoSamplersForMaskUpscalerProviderPipe", output:UPSCALER */
    TwoSamplersForMaskUpscalerProviderPipe(p: TwoSamplersForMaskUpscalerProviderPipe_input, meta?: ComfyNodeMetadata): TwoSamplersForMaskUpscalerProviderPipe
    /* category:ImpactPack_Upscale, name:"PixelKSampleHookCombine", output:PK_HOOK */
    PixelKSampleHookCombine(p: PixelKSampleHookCombine_input, meta?: ComfyNodeMetadata): PixelKSampleHookCombine
    /* category:ImpactPack_Upscale, name:"DenoiseScheduleHookProvider", output:PK_HOOK */
    DenoiseScheduleHookProvider(p: DenoiseScheduleHookProvider_input, meta?: ComfyNodeMetadata): DenoiseScheduleHookProvider
    /* category:ImpactPack_Upscale, name:"StepsScheduleHookProvider", output:PK_HOOK */
    StepsScheduleHookProvider(p: StepsScheduleHookProvider_input, meta?: ComfyNodeMetadata): StepsScheduleHookProvider
    /* category:ImpactPack_Upscale, name:"CfgScheduleHookProvider", output:PK_HOOK */
    CfgScheduleHookProvider(p: CfgScheduleHookProvider_input, meta?: ComfyNodeMetadata): CfgScheduleHookProvider
    /* category:ImpactPack_Upscale, name:"NoiseInjectionHookProvider", output:PK_HOOK */
    NoiseInjectionHookProvider(p: NoiseInjectionHookProvider_input, meta?: ComfyNodeMetadata): NoiseInjectionHookProvider
    /* category:ImpactPack_Upscale, name:"UnsamplerHookProvider", output:PK_HOOK */
    UnsamplerHookProvider(p: UnsamplerHookProvider_input, meta?: ComfyNodeMetadata): UnsamplerHookProvider
    /* category:ImpactPack_Detailer, name:"CoreMLDetailerHookProvider", output:DETAILER_HOOK */
    CoreMLDetailerHookProvider(p: CoreMLDetailerHookProvider_input, meta?: ComfyNodeMetadata): CoreMLDetailerHookProvider
    /* category:ImpactPack_Util, name:"PreviewDetailerHookProvider", output:DETAILER_HOOK+UPSCALER_HOOK */
    PreviewDetailerHookProvider(p: PreviewDetailerHookProvider_input, meta?: ComfyNodeMetadata): PreviewDetailerHookProvider
    /* category:ImpactPack_Upscale, name:"DetailerHookCombine", output:DETAILER_HOOK */
    DetailerHookCombine(p: DetailerHookCombine_input, meta?: ComfyNodeMetadata): DetailerHookCombine
    /* category:ImpactPack_Detailer, name:"NoiseInjectionDetailerHookProvider", output:DETAILER_HOOK */
    NoiseInjectionDetailerHookProvider(p: NoiseInjectionDetailerHookProvider_input, meta?: ComfyNodeMetadata): NoiseInjectionDetailerHookProvider
    /* category:ImpactPack_Detailer, name:"UnsamplerDetailerHookProvider", output:DETAILER_HOOK */
    UnsamplerDetailerHookProvider(p: UnsamplerDetailerHookProvider_input, meta?: ComfyNodeMetadata): UnsamplerDetailerHookProvider
    /* category:ImpactPack_Detailer, name:"DenoiseSchedulerDetailerHookProvider", output:DETAILER_HOOK */
    DenoiseSchedulerDetailerHookProvider(p: DenoiseSchedulerDetailerHookProvider_input, meta?: ComfyNodeMetadata): DenoiseSchedulerDetailerHookProvider
    /* category:ImpactPack_Util, name:"SEGSOrderedFilterDetailerHookProvider", output:DETAILER_HOOK */
    SEGSOrderedFilterDetailerHookProvider(p: SEGSOrderedFilterDetailerHookProvider_input, meta?: ComfyNodeMetadata): SEGSOrderedFilterDetailerHookProvider
    /* category:ImpactPack_Util, name:"SEGSRangeFilterDetailerHookProvider", output:DETAILER_HOOK */
    SEGSRangeFilterDetailerHookProvider(p: SEGSRangeFilterDetailerHookProvider_input, meta?: ComfyNodeMetadata): SEGSRangeFilterDetailerHookProvider
    /* category:ImpactPack_Util, name:"SEGSLabelFilterDetailerHookProvider", output:DETAILER_HOOK */
    SEGSLabelFilterDetailerHookProvider(p: SEGSLabelFilterDetailerHookProvider_input, meta?: ComfyNodeMetadata): SEGSLabelFilterDetailerHookProvider
    /* category:ImpactPack_Detailer, name:"VariationNoiseDetailerHookProvider", output:DETAILER_HOOK */
    VariationNoiseDetailerHookProvider(p: VariationNoiseDetailerHookProvider_input, meta?: ComfyNodeMetadata): VariationNoiseDetailerHookProvider
    /* category:ImpactPack_Operation, name:"BitwiseAndMask", output:MASK */
    BitwiseAndMask(p: BitwiseAndMask_input, meta?: ComfyNodeMetadata): BitwiseAndMask
    /* category:ImpactPack_Operation, name:"SubtractMask", output:MASK */
    SubtractMask(p: SubtractMask_input, meta?: ComfyNodeMetadata): SubtractMask
    /* category:ImpactPack_Operation, name:"AddMask", output:MASK */
    AddMask(p: AddMask_input, meta?: ComfyNodeMetadata): AddMask
    /* category:ImpactPack_Operation, name:"ImpactSegsAndMask", output:SEGS */
    ImpactSegsAndMask(p: ImpactSegsAndMask_input, meta?: ComfyNodeMetadata): ImpactSegsAndMask
    /* category:ImpactPack_Operation, name:"ImpactSegsAndMaskForEach", output:SEGS */
    ImpactSegsAndMaskForEach(p: ImpactSegsAndMaskForEach_input, meta?: ComfyNodeMetadata): ImpactSegsAndMaskForEach
    /* category:ImpactPack_Util, name:"EmptySegs", output:SEGS */
    EmptySegs(p: EmptySegs_input, meta?: ComfyNodeMetadata): EmptySegs
    /* category:ImpactPack_Operation, name:"ImpactFlattenMask", output:MASK */
    ImpactFlattenMask(p: ImpactFlattenMask_input, meta?: ComfyNodeMetadata): ImpactFlattenMask
    /* category:ImpactPack_Operation, name:"MediaPipeFaceMeshToSEGS", output:SEGS */
    MediaPipeFaceMeshToSEGS(p: MediaPipeFaceMeshToSEGS_input, meta?: ComfyNodeMetadata): MediaPipeFaceMeshToSEGS
    /* category:ImpactPack_Operation, name:"MaskToSEGS", output:SEGS */
    MaskToSEGS(p: MaskToSEGS_input, meta?: ComfyNodeMetadata): MaskToSEGS
    /* category:ImpactPack_Operation, name:"MaskToSEGS_for_AnimateDiff", output:SEGS */
    MaskToSEGS$_for$_AnimateDiff(p: MaskToSEGS$_for$_AnimateDiff_input, meta?: ComfyNodeMetadata): MaskToSEGS$_for$_AnimateDiff
    /* category:ImpactPack_Operation, name:"ToBinaryMask", output:MASK */
    ToBinaryMask(p: ToBinaryMask_input, meta?: ComfyNodeMetadata): ToBinaryMask
    /* category:ImpactPack_Operation, name:"MasksToMaskList", output:MASK */
    MasksToMaskList(p: MasksToMaskList_input, meta?: ComfyNodeMetadata): MasksToMaskList
    /* category:ImpactPack_Operation, name:"MaskListToMaskBatch", output:MASK */
    MaskListToMaskBatch(p: MaskListToMaskBatch_input, meta?: ComfyNodeMetadata): MaskListToMaskBatch
    /* category:ImpactPack_Operation, name:"ImageListToImageBatch", output:IMAGE */
    ImageListToImageBatch(p: ImageListToImageBatch_input, meta?: ComfyNodeMetadata): ImageListToImageBatch
    /* category:ImpactPack_Util, name:"SetDefaultImageForSEGS", output:SEGS */
    SetDefaultImageForSEGS(p: SetDefaultImageForSEGS_input, meta?: ComfyNodeMetadata): SetDefaultImageForSEGS
    /* category:ImpactPack_Util, name:"RemoveImageFromSEGS", output:SEGS */
    RemoveImageFromSEGS(p: RemoveImageFromSEGS_input, meta?: ComfyNodeMetadata): RemoveImageFromSEGS
    /* category:ImpactPack_Detector, name:"BboxDetectorSEGS", output:SEGS */
    BboxDetectorSEGS(p: BboxDetectorSEGS_input, meta?: ComfyNodeMetadata): BboxDetectorSEGS
    /* category:ImpactPack_Detector, name:"SegmDetectorSEGS", output:SEGS */
    SegmDetectorSEGS(p: SegmDetectorSEGS_input, meta?: ComfyNodeMetadata): SegmDetectorSEGS
    /* category:ImpactPack_Detector, name:"ONNXDetectorSEGS", output:SEGS */
    ONNXDetectorSEGS(p: ONNXDetectorSEGS_input, meta?: ComfyNodeMetadata): ONNXDetectorSEGS
    /* category:ImpactPack_Detector, name:"ImpactSimpleDetectorSEGS_for_AD", output:SEGS */
    ImpactSimpleDetectorSEGS$_for$_AD(p: ImpactSimpleDetectorSEGS$_for$_AD_input, meta?: ComfyNodeMetadata): ImpactSimpleDetectorSEGS$_for$_AD
    /* category:ImpactPack_Detector, name:"ImpactSimpleDetectorSEGS", output:SEGS */
    ImpactSimpleDetectorSEGS(p: ImpactSimpleDetectorSEGS_input, meta?: ComfyNodeMetadata): ImpactSimpleDetectorSEGS
    /* category:ImpactPack_Detector, name:"ImpactSimpleDetectorSEGSPipe", output:SEGS */
    ImpactSimpleDetectorSEGSPipe(p: ImpactSimpleDetectorSEGSPipe_input, meta?: ComfyNodeMetadata): ImpactSimpleDetectorSEGSPipe
    /* category:ImpactPack_Util, name:"ImpactControlNetApplySEGS", output:SEGS */
    ImpactControlNetApplySEGS(p: ImpactControlNetApplySEGS_input, meta?: ComfyNodeMetadata): ImpactControlNetApplySEGS
    /* category:ImpactPack_Util, name:"ImpactControlNetApplyAdvancedSEGS", output:SEGS */
    ImpactControlNetApplyAdvancedSEGS(p: ImpactControlNetApplyAdvancedSEGS_input, meta?: ComfyNodeMetadata): ImpactControlNetApplyAdvancedSEGS
    /* category:ImpactPack_Util, name:"ImpactControlNetClearSEGS", output:SEGS */
    ImpactControlNetClearSEGS(p: ImpactControlNetClearSEGS_input, meta?: ComfyNodeMetadata): ImpactControlNetClearSEGS
    /* category:ImpactPack_Util, name:"ImpactIPAdapterApplySEGS", output:SEGS */
    ImpactIPAdapterApplySEGS(p: ImpactIPAdapterApplySEGS_input, meta?: ComfyNodeMetadata): ImpactIPAdapterApplySEGS
    /* category:ImpactPack_Util, name:"ImpactDecomposeSEGS", output:SEGS_HEADER+SEG_ELT */
    ImpactDecomposeSEGS(p: ImpactDecomposeSEGS_input, meta?: ComfyNodeMetadata): ImpactDecomposeSEGS
    /* category:ImpactPack_Util, name:"ImpactAssembleSEGS", output:SEGS */
    ImpactAssembleSEGS(p: ImpactAssembleSEGS_input, meta?: ComfyNodeMetadata): ImpactAssembleSEGS
    /* category:ImpactPack_Util, name:"ImpactFrom_SEG_ELT", output:seg_elt+cropped_image+cropped_mask+crop_region+bbox+control_net_wrapper+confidence+label */
    ImpactFrom$_SEG$_ELT(p: ImpactFrom$_SEG$_ELT_input, meta?: ComfyNodeMetadata): ImpactFrom$_SEG$_ELT
    /* category:ImpactPack_Util, name:"ImpactEdit_SEG_ELT", output:SEG_ELT */
    ImpactEdit$_SEG$_ELT(p: ImpactEdit$_SEG$_ELT_input, meta?: ComfyNodeMetadata): ImpactEdit$_SEG$_ELT
    /* category:ImpactPack_Util, name:"ImpactDilate_Mask_SEG_ELT", output:SEG_ELT */
    ImpactDilate$_Mask$_SEG$_ELT(p: ImpactDilate$_Mask$_SEG$_ELT_input, meta?: ComfyNodeMetadata): ImpactDilate$_Mask$_SEG$_ELT
    /* category:ImpactPack_Util, name:"ImpactDilateMask", output:MASK */
    ImpactDilateMask(p: ImpactDilateMask_input, meta?: ComfyNodeMetadata): ImpactDilateMask
    /* category:ImpactPack_Util, name:"ImpactGaussianBlurMask", output:MASK */
    ImpactGaussianBlurMask(p: ImpactGaussianBlurMask_input, meta?: ComfyNodeMetadata): ImpactGaussianBlurMask
    /* category:ImpactPack_Util, name:"ImpactDilateMaskInSEGS", output:SEGS */
    ImpactDilateMaskInSEGS(p: ImpactDilateMaskInSEGS_input, meta?: ComfyNodeMetadata): ImpactDilateMaskInSEGS
    /* category:ImpactPack_Util, name:"ImpactGaussianBlurMaskInSEGS", output:SEGS */
    ImpactGaussianBlurMaskInSEGS(p: ImpactGaussianBlurMaskInSEGS_input, meta?: ComfyNodeMetadata): ImpactGaussianBlurMaskInSEGS
    /* category:ImpactPack_Util, name:"ImpactScaleBy_BBOX_SEG_ELT", output:SEG_ELT */
    ImpactScaleBy$_BBOX$_SEG$_ELT(p: ImpactScaleBy$_BBOX$_SEG$_ELT_input, meta?: ComfyNodeMetadata): ImpactScaleBy$_BBOX$_SEG$_ELT
    /* category:ImpactPack_Util, name:"ImpactFrom_SEG_ELT_bbox", output:left+top+right+bottom */
    ImpactFrom$_SEG$_ELT$_bbox(p: ImpactFrom$_SEG$_ELT$_bbox_input, meta?: ComfyNodeMetadata): ImpactFrom$_SEG$_ELT$_bbox
    /* category:ImpactPack_Util, name:"ImpactFrom_SEG_ELT_crop_region", output:left+top+right+bottom */
    ImpactFrom$_SEG$_ELT$_crop$_region(p: ImpactFrom$_SEG$_ELT$_crop$_region_input, meta?: ComfyNodeMetadata): ImpactFrom$_SEG$_ELT$_crop$_region
    /* category:ImpactPack_Util, name:"ImpactCount_Elts_in_SEGS", output:INT */
    ImpactCount$_Elts$_in$_SEGS(p: ImpactCount$_Elts$_in$_SEGS_input, meta?: ComfyNodeMetadata): ImpactCount$_Elts$_in$_SEGS
    /* category:ImpactPack_Detector, name:"BboxDetectorCombined_v2", output:MASK */
    BboxDetectorCombined$_v2(p: BboxDetectorCombined$_v2_input, meta?: ComfyNodeMetadata): BboxDetectorCombined$_v2
    /* category:ImpactPack_Detector, name:"SegmDetectorCombined_v2", output:MASK */
    SegmDetectorCombined$_v2(p: SegmDetectorCombined$_v2_input, meta?: ComfyNodeMetadata): SegmDetectorCombined$_v2
    /* category:ImpactPack_Operation, name:"SegsToCombinedMask", output:MASK */
    SegsToCombinedMask(p: SegsToCombinedMask_input, meta?: ComfyNodeMetadata): SegsToCombinedMask
    /* category:ImpactPack_Sampler, name:"KSamplerProvider", output:KSAMPLER */
    KSamplerProvider(p: KSamplerProvider_input, meta?: ComfyNodeMetadata): KSamplerProvider
    /* category:ImpactPack_Sampler, name:"TwoSamplersForMask", output:LATENT */
    TwoSamplersForMask(p: TwoSamplersForMask_input, meta?: ComfyNodeMetadata): TwoSamplersForMask
    /* category:ImpactPack_Sampler, name:"TiledKSamplerProvider", output:KSAMPLER */
    TiledKSamplerProvider(p: TiledKSamplerProvider_input, meta?: ComfyNodeMetadata): TiledKSamplerProvider
    /* category:ImpactPack_Sampler, name:"KSamplerAdvancedProvider", output:KSAMPLER_ADVANCED */
    KSamplerAdvancedProvider(p: KSamplerAdvancedProvider_input, meta?: ComfyNodeMetadata): KSamplerAdvancedProvider
    /* category:ImpactPack_Sampler, name:"TwoAdvancedSamplersForMask", output:LATENT */
    TwoAdvancedSamplersForMask(p: TwoAdvancedSamplersForMask_input, meta?: ComfyNodeMetadata): TwoAdvancedSamplersForMask
    /* category:ImpactPack_sampling, name:"ImpactNegativeConditioningPlaceholder", output:CONDITIONING */
    ImpactNegativeConditioningPlaceholder(p: ImpactNegativeConditioningPlaceholder_input, meta?: ComfyNodeMetadata): ImpactNegativeConditioningPlaceholder
    /* category:ImpactPack_Util, name:"PreviewBridge", output:IMAGE+MASK */
    PreviewBridge(p: PreviewBridge_input, meta?: ComfyNodeMetadata): PreviewBridge
    /* category:ImpactPack_Util, name:"PreviewBridgeLatent", output:LATENT+MASK */
    PreviewBridgeLatent(p: PreviewBridgeLatent_input, meta?: ComfyNodeMetadata): PreviewBridgeLatent
    /* category:ImpactPack_Util, name:"ImageSender", output: */
    ImageSender(p: ImageSender_input, meta?: ComfyNodeMetadata): ImageSender
    /* category:ImpactPack_Util, name:"ImageReceiver", output:IMAGE+MASK */
    ImageReceiver(p: ImageReceiver_input, meta?: ComfyNodeMetadata): ImageReceiver
    /* category:ImpactPack_Util, name:"LatentSender", output: */
    LatentSender(p: LatentSender_input, meta?: ComfyNodeMetadata): LatentSender
    /* category:ImpactPack_Util, name:"LatentReceiver", output:LATENT */
    LatentReceiver(p: LatentReceiver_input, meta?: ComfyNodeMetadata): LatentReceiver
    /* category:ImpactPack_Util, name:"ImageMaskSwitch", output:IMAGE+MASK */
    ImageMaskSwitch(p: ImageMaskSwitch_input, meta?: ComfyNodeMetadata): ImageMaskSwitch
    /* category:ImpactPack_Util, name:"LatentSwitch", output:selected_value+selected_label+selected_index */
    LatentSwitch(p: LatentSwitch_input, meta?: ComfyNodeMetadata): LatentSwitch
    /* category:ImpactPack_Util, name:"SEGSSwitch", output:selected_value+selected_label+selected_index */
    SEGSSwitch(p: SEGSSwitch_input, meta?: ComfyNodeMetadata): SEGSSwitch
    /* category:ImpactPack_Util, name:"ImpactSwitch", output:selected_value+selected_label+selected_index */
    ImpactSwitch(p: ImpactSwitch_input, meta?: ComfyNodeMetadata): ImpactSwitch
    /* category:ImpactPack_Util, name:"ImpactInversedSwitch", output:$Star */
    ImpactInversedSwitch(p: ImpactInversedSwitch_input, meta?: ComfyNodeMetadata): ImpactInversedSwitch
    /* category:ImpactPack_Prompt, name:"ImpactWildcardProcessor", output:STRING */
    ImpactWildcardProcessor(p: ImpactWildcardProcessor_input, meta?: ComfyNodeMetadata): ImpactWildcardProcessor
    /* category:ImpactPack_Prompt, name:"ImpactWildcardEncode", output:model+clip+conditioning+populated_text */
    ImpactWildcardEncode(p: ImpactWildcardEncode_input, meta?: ComfyNodeMetadata): ImpactWildcardEncode
    /* category:ImpactPack_Upscale, name:"SEGSUpscaler", output:IMAGE */
    SEGSUpscaler(p: SEGSUpscaler_input, meta?: ComfyNodeMetadata): SEGSUpscaler
    /* category:ImpactPack_Upscale, name:"SEGSUpscalerPipe", output:IMAGE */
    SEGSUpscalerPipe(p: SEGSUpscalerPipe_input, meta?: ComfyNodeMetadata): SEGSUpscalerPipe
    /* category:ImpactPack_Detailer, name:"SEGSDetailer", output:segs+cnet_images */
    SEGSDetailer(p: SEGSDetailer_input, meta?: ComfyNodeMetadata): SEGSDetailer
    /* category:ImpactPack_Detailer, name:"SEGSPaste", output:IMAGE */
    SEGSPaste(p: SEGSPaste_input, meta?: ComfyNodeMetadata): SEGSPaste
    /* category:ImpactPack_Util, name:"SEGSPreview", output:IMAGE */
    SEGSPreview(p: SEGSPreview_input, meta?: ComfyNodeMetadata): SEGSPreview
    /* category:ImpactPack_Util, name:"SEGSPreviewCNet", output:IMAGE */
    SEGSPreviewCNet(p: SEGSPreviewCNet_input, meta?: ComfyNodeMetadata): SEGSPreviewCNet
    /* category:ImpactPack_Util, name:"SEGSToImageList", output:IMAGE */
    SEGSToImageList(p: SEGSToImageList_input, meta?: ComfyNodeMetadata): SEGSToImageList
    /* category:ImpactPack_Util, name:"ImpactSEGSToMaskList", output:MASK */
    ImpactSEGSToMaskList(p: ImpactSEGSToMaskList_input, meta?: ComfyNodeMetadata): ImpactSEGSToMaskList
    /* category:ImpactPack_Util, name:"ImpactSEGSToMaskBatch", output:MASK */
    ImpactSEGSToMaskBatch(p: ImpactSEGSToMaskBatch_input, meta?: ComfyNodeMetadata): ImpactSEGSToMaskBatch
    /* category:ImpactPack_Util, name:"ImpactSEGSConcat", output:SEGS */
    ImpactSEGSConcat(p: ImpactSEGSConcat_input, meta?: ComfyNodeMetadata): ImpactSEGSConcat
    /* category:ImpactPack_Util, name:"ImpactSEGSPicker", output:SEGS */
    ImpactSEGSPicker(p: ImpactSEGSPicker_input, meta?: ComfyNodeMetadata): ImpactSEGSPicker
    /* category:ImpactPack___for_testing, name:"ImpactMakeTileSEGS", output:SEGS */
    ImpactMakeTileSEGS(p: ImpactMakeTileSEGS_input, meta?: ComfyNodeMetadata): ImpactMakeTileSEGS
    /* category:ImpactPack_Util, name:"ImpactSEGSMerge", output:SEGS */
    ImpactSEGSMerge(p: ImpactSEGSMerge_input, meta?: ComfyNodeMetadata): ImpactSEGSMerge
    /* category:ImpactPack_Detailer, name:"SEGSDetailerForAnimateDiff", output:segs+cnet_images */
    SEGSDetailerForAnimateDiff(p: SEGSDetailerForAnimateDiff_input, meta?: ComfyNodeMetadata): SEGSDetailerForAnimateDiff
    /* category:ImpactPack_sampling, name:"ImpactKSamplerBasicPipe", output:BASIC_PIPE+LATENT+VAE */
    ImpactKSamplerBasicPipe(p: ImpactKSamplerBasicPipe_input, meta?: ComfyNodeMetadata): ImpactKSamplerBasicPipe
    /* category:ImpactPack_sampling, name:"ImpactKSamplerAdvancedBasicPipe", output:BASIC_PIPE+LATENT+VAE */
    ImpactKSamplerAdvancedBasicPipe(p: ImpactKSamplerAdvancedBasicPipe_input, meta?: ComfyNodeMetadata): ImpactKSamplerAdvancedBasicPipe
    /* category:ImpactPack_Util, name:"ReencodeLatent", output:LATENT */
    ReencodeLatent(p: ReencodeLatent_input, meta?: ComfyNodeMetadata): ReencodeLatent
    /* category:ImpactPack_Util, name:"ReencodeLatentPipe", output:LATENT */
    ReencodeLatentPipe(p: ReencodeLatentPipe_input, meta?: ComfyNodeMetadata): ReencodeLatentPipe
    /* category:ImpactPack_Util, name:"ImpactImageBatchToImageList", output:IMAGE */
    ImpactImageBatchToImageList(p: ImpactImageBatchToImageList_input, meta?: ComfyNodeMetadata): ImpactImageBatchToImageList
    /* category:ImpactPack_Util, name:"ImpactMakeImageList", output:IMAGE */
    ImpactMakeImageList(p: ImpactMakeImageList_input, meta?: ComfyNodeMetadata): ImpactMakeImageList
    /* category:ImpactPack_Util, name:"ImpactMakeImageBatch", output:IMAGE */
    ImpactMakeImageBatch(p: ImpactMakeImageBatch_input, meta?: ComfyNodeMetadata): ImpactMakeImageBatch
    /* category:ImpactPack_Util, name:"ImpactMakeAnyList", output:$Star */
    ImpactMakeAnyList(p: ImpactMakeAnyList_input, meta?: ComfyNodeMetadata): ImpactMakeAnyList
    /* category:ImpactPack_Util, name:"ImpactMakeMaskList", output:MASK */
    ImpactMakeMaskList(p: ImpactMakeMaskList_input, meta?: ComfyNodeMetadata): ImpactMakeMaskList
    /* category:ImpactPack_Util, name:"ImpactMakeMaskBatch", output:MASK */
    ImpactMakeMaskBatch(p: ImpactMakeMaskBatch_input, meta?: ComfyNodeMetadata): ImpactMakeMaskBatch
    /* category:ImpactPack_Regional, name:"RegionalSampler", output:LATENT */
    RegionalSampler(p: RegionalSampler_input, meta?: ComfyNodeMetadata): RegionalSampler
    /* category:ImpactPack_Regional, name:"RegionalSamplerAdvanced", output:LATENT */
    RegionalSamplerAdvanced(p: RegionalSamplerAdvanced_input, meta?: ComfyNodeMetadata): RegionalSamplerAdvanced
    /* category:ImpactPack_Regional, name:"CombineRegionalPrompts", output:REGIONAL_PROMPTS */
    CombineRegionalPrompts(p: CombineRegionalPrompts_input, meta?: ComfyNodeMetadata): CombineRegionalPrompts
    /* category:ImpactPack_Regional, name:"RegionalPrompt", output:REGIONAL_PROMPTS */
    RegionalPrompt(p: RegionalPrompt_input, meta?: ComfyNodeMetadata): RegionalPrompt
    /* category:ImpactPack_Util, name:"ImpactCombineConditionings", output:CONDITIONING */
    ImpactCombineConditionings(p: ImpactCombineConditionings_input, meta?: ComfyNodeMetadata): ImpactCombineConditionings
    /* category:ImpactPack_Util, name:"ImpactConcatConditionings", output:CONDITIONING */
    ImpactConcatConditionings(p: ImpactConcatConditionings_input, meta?: ComfyNodeMetadata): ImpactConcatConditionings
    /* category:ImpactPack_Util, name:"ImpactSEGSLabelAssign", output:SEGS */
    ImpactSEGSLabelAssign(p: ImpactSEGSLabelAssign_input, meta?: ComfyNodeMetadata): ImpactSEGSLabelAssign
    /* category:ImpactPack_Util, name:"ImpactSEGSLabelFilter", output:filtered_SEGS+remained_SEGS */
    ImpactSEGSLabelFilter(p: ImpactSEGSLabelFilter_input, meta?: ComfyNodeMetadata): ImpactSEGSLabelFilter
    /* category:ImpactPack_Util, name:"ImpactSEGSRangeFilter", output:filtered_SEGS+remained_SEGS */
    ImpactSEGSRangeFilter(p: ImpactSEGSRangeFilter_input, meta?: ComfyNodeMetadata): ImpactSEGSRangeFilter
    /* category:ImpactPack_Util, name:"ImpactSEGSOrderedFilter", output:filtered_SEGS+remained_SEGS */
    ImpactSEGSOrderedFilter(p: ImpactSEGSOrderedFilter_input, meta?: ComfyNodeMetadata): ImpactSEGSOrderedFilter
    /* category:ImpactPack_Logic, name:"ImpactCompare", output:BOOLEAN */
    ImpactCompare(p: ImpactCompare_input, meta?: ComfyNodeMetadata): ImpactCompare
    /* category:ImpactPack_Logic, name:"ImpactConditionalBranch", output:$Star */
    ImpactConditionalBranch(p: ImpactConditionalBranch_input, meta?: ComfyNodeMetadata): ImpactConditionalBranch
    /* category:ImpactPack_Logic, name:"ImpactConditionalBranchSelMode", output:$Star */
    ImpactConditionalBranchSelMode(p: ImpactConditionalBranchSelMode_input, meta?: ComfyNodeMetadata): ImpactConditionalBranchSelMode
    /* category:ImpactPack_Logic, name:"ImpactIfNone", output:signal_opt+bool */
    ImpactIfNone(p: ImpactIfNone_input, meta?: ComfyNodeMetadata): ImpactIfNone
    /* category:ImpactPack_Logic, name:"ImpactConvertDataType", output:STRING+FLOAT+INT+BOOLEAN */
    ImpactConvertDataType(p: ImpactConvertDataType_input, meta?: ComfyNodeMetadata): ImpactConvertDataType
    /* category:ImpactPack_Logic, name:"ImpactLogicalOperators", output:BOOLEAN */
    ImpactLogicalOperators(p: ImpactLogicalOperators_input, meta?: ComfyNodeMetadata): ImpactLogicalOperators
    /* category:ImpactPack_Logic, name:"ImpactInt", output:INT */
    ImpactInt(p: ImpactInt_input, meta?: ComfyNodeMetadata): ImpactInt
    /* category:ImpactPack_Logic, name:"ImpactFloat", output:FLOAT */
    ImpactFloat(p: ImpactFloat_input, meta?: ComfyNodeMetadata): ImpactFloat
    /* category:ImpactPack_Logic, name:"ImpactBoolean", output:BOOLEAN */
    ImpactBoolean(p: ImpactBoolean_input, meta?: ComfyNodeMetadata): ImpactBoolean
    /* category:ImpactPack_Logic, name:"ImpactValueSender", output:signal */
    ImpactValueSender(p: ImpactValueSender_input, meta?: ComfyNodeMetadata): ImpactValueSender
    /* category:ImpactPack_Logic, name:"ImpactValueReceiver", output:$Star */
    ImpactValueReceiver(p: ImpactValueReceiver_input, meta?: ComfyNodeMetadata): ImpactValueReceiver
    /* category:ImpactPack_Logic__for_test, name:"ImpactImageInfo", output:batch+height+width+channel */
    ImpactImageInfo(p: ImpactImageInfo_input, meta?: ComfyNodeMetadata): ImpactImageInfo
    /* category:ImpactPack_Logic__for_test, name:"ImpactLatentInfo", output:batch+height+width+channel */
    ImpactLatentInfo(p: ImpactLatentInfo_input, meta?: ComfyNodeMetadata): ImpactLatentInfo
    /* category:ImpactPack_Logic__for_test, name:"ImpactMinMax", output:INT */
    ImpactMinMax(p: ImpactMinMax_input, meta?: ComfyNodeMetadata): ImpactMinMax
    /* category:ImpactPack_Logic, name:"ImpactNeg", output:BOOLEAN */
    ImpactNeg(p: ImpactNeg_input, meta?: ComfyNodeMetadata): ImpactNeg
    /* category:ImpactPack_Logic, name:"ImpactConditionalStopIteration", output: */
    ImpactConditionalStopIteration(p: ImpactConditionalStopIteration_input, meta?: ComfyNodeMetadata): ImpactConditionalStopIteration
    /* category:ImpactPack_Util, name:"ImpactStringSelector", output:STRING */
    ImpactStringSelector(p: ImpactStringSelector_input, meta?: ComfyNodeMetadata): ImpactStringSelector
    /* category:ImpactPack_Util, name:"StringListToString", output:STRING */
    StringListToString(p: StringListToString_input, meta?: ComfyNodeMetadata): StringListToString
    /* category:ImpactPack_Util, name:"WildcardPromptFromString", output:wildcard+segs_labels */
    WildcardPromptFromString(p: WildcardPromptFromString_input, meta?: ComfyNodeMetadata): WildcardPromptFromString
    /* category:ImpactPack_Util, name:"ImpactExecutionOrderController", output:signal+value */
    ImpactExecutionOrderController(p: ImpactExecutionOrderController_input, meta?: ComfyNodeMetadata): ImpactExecutionOrderController
    /* category:ImpactPack_Util, name:"RemoveNoiseMask", output:LATENT */
    RemoveNoiseMask(p: RemoveNoiseMask_input, meta?: ComfyNodeMetadata): RemoveNoiseMask
    /* category:ImpactPack_Debug, name:"ImpactLogger", output: */
    ImpactLogger(p: ImpactLogger_input, meta?: ComfyNodeMetadata): ImpactLogger
    /* category:ImpactPack_Debug, name:"ImpactDummyInput", output:$Star */
    ImpactDummyInput(p: ImpactDummyInput_input, meta?: ComfyNodeMetadata): ImpactDummyInput
    /* category:ImpactPack_Logic__for_test, name:"ImpactQueueTrigger", output:signal_opt */
    ImpactQueueTrigger(p: ImpactQueueTrigger_input, meta?: ComfyNodeMetadata): ImpactQueueTrigger
    /* category:ImpactPack_Logic__for_test, name:"ImpactQueueTriggerCountdown", output:signal_opt+count+total */
    ImpactQueueTriggerCountdown(p: ImpactQueueTriggerCountdown_input, meta?: ComfyNodeMetadata): ImpactQueueTriggerCountdown
    /* category:ImpactPack_Logic__for_test, name:"ImpactSetWidgetValue", output:signal_opt */
    ImpactSetWidgetValue(p: ImpactSetWidgetValue_input, meta?: ComfyNodeMetadata): ImpactSetWidgetValue
    /* category:ImpactPack_Logic__for_test, name:"ImpactNodeSetMuteState", output:signal_opt */
    ImpactNodeSetMuteState(p: ImpactNodeSetMuteState_input, meta?: ComfyNodeMetadata): ImpactNodeSetMuteState
    /* category:ImpactPack_Logic, name:"ImpactControlBridge", output:value */
    ImpactControlBridge(p: ImpactControlBridge_input, meta?: ComfyNodeMetadata): ImpactControlBridge
    /* category:ImpactPack_Logic, name:"ImpactIsNotEmptySEGS", output:BOOLEAN */
    ImpactIsNotEmptySEGS(p: ImpactIsNotEmptySEGS_input, meta?: ComfyNodeMetadata): ImpactIsNotEmptySEGS
    /* category:ImpactPack_Logic__for_test, name:"ImpactSleep", output:signal_opt */
    ImpactSleep(p: ImpactSleep_input, meta?: ComfyNodeMetadata): ImpactSleep
    /* category:ImpactPack_Logic__for_test, name:"ImpactRemoteBoolean", output: */
    ImpactRemoteBoolean(p: ImpactRemoteBoolean_input, meta?: ComfyNodeMetadata): ImpactRemoteBoolean
    /* category:ImpactPack_Logic__for_test, name:"ImpactRemoteInt", output: */
    ImpactRemoteInt(p: ImpactRemoteInt_input, meta?: ComfyNodeMetadata): ImpactRemoteInt
    /* category:ImpactPack_HuggingFace, name:"ImpactHFTransformersClassifierProvider", output:TRANSFORMERS_CLASSIFIER */
    ImpactHFTransformersClassifierProvider(p: ImpactHFTransformersClassifierProvider_input, meta?: ComfyNodeMetadata): ImpactHFTransformersClassifierProvider
    /* category:ImpactPack_HuggingFace, name:"ImpactSEGSClassify", output:filtered_SEGS+remained_SEGS+detected_labels */
    ImpactSEGSClassify(p: ImpactSEGSClassify_input, meta?: ComfyNodeMetadata): ImpactSEGSClassify
    /* category:ImpactPack_Util, name:"ImpactSchedulerAdapter", output:scheduler */
    ImpactSchedulerAdapter(p: ImpactSchedulerAdapter_input, meta?: ComfyNodeMetadata): ImpactSchedulerAdapter
    /* category:ImpactPack_sampling, name:"GITSSchedulerFuncProvider", output:SCHEDULER_FUNC */
    GITSSchedulerFuncProvider(p: GITSSchedulerFuncProvider_input, meta?: ComfyNodeMetadata): GITSSchedulerFuncProvider
    /* category:ImpactPack, name:"UltralyticsDetectorProvider", output:BBOX_DETECTOR+SEGM_DETECTOR */
    UltralyticsDetectorProvider(p: UltralyticsDetectorProvider_input, meta?: ComfyNodeMetadata): UltralyticsDetectorProvider
    /* category:inpaint, name:"INPAINT_LoadFooocusInpaint", output:INPAINT_PATCH */
    INPAINT$_LoadFooocusInpaint(p: INPAINT$_LoadFooocusInpaint_input, meta?: ComfyNodeMetadata): INPAINT$_LoadFooocusInpaint
    /* category:inpaint, name:"INPAINT_ApplyFooocusInpaint", output:MODEL */
    INPAINT$_ApplyFooocusInpaint(p: INPAINT$_ApplyFooocusInpaint_input, meta?: ComfyNodeMetadata): INPAINT$_ApplyFooocusInpaint
    /* category:inpaint, name:"INPAINT_VAEEncodeInpaintConditioning", output:positive+negative+latent_inpaint+latent_samples */
    INPAINT$_VAEEncodeInpaintConditioning(p: INPAINT$_VAEEncodeInpaintConditioning_input, meta?: ComfyNodeMetadata): INPAINT$_VAEEncodeInpaintConditioning
    /* category:inpaint, name:"INPAINT_MaskedFill", output:IMAGE */
    INPAINT$_MaskedFill(p: INPAINT$_MaskedFill_input, meta?: ComfyNodeMetadata): INPAINT$_MaskedFill
    /* category:inpaint, name:"INPAINT_MaskedBlur", output:IMAGE */
    INPAINT$_MaskedBlur(p: INPAINT$_MaskedBlur_input, meta?: ComfyNodeMetadata): INPAINT$_MaskedBlur
    /* category:inpaint, name:"INPAINT_LoadInpaintModel", output:INPAINT_MODEL */
    INPAINT$_LoadInpaintModel(p: INPAINT$_LoadInpaintModel_input, meta?: ComfyNodeMetadata): INPAINT$_LoadInpaintModel
    /* category:inpaint, name:"INPAINT_InpaintWithModel", output:IMAGE */
    INPAINT$_InpaintWithModel(p: INPAINT$_InpaintWithModel_input, meta?: ComfyNodeMetadata): INPAINT$_InpaintWithModel
    /* category:inpaint, name:"INPAINT_ExpandMask", output:MASK */
    INPAINT$_ExpandMask(p: INPAINT$_ExpandMask_input, meta?: ComfyNodeMetadata): INPAINT$_ExpandMask
    /* category:inpaint, name:"INPAINT_DenoiseToCompositingMask", output:MASK */
    INPAINT$_DenoiseToCompositingMask(p: INPAINT$_DenoiseToCompositingMask_input, meta?: ComfyNodeMetadata): INPAINT$_DenoiseToCompositingMask
    /* category:InspirePack_LoraBlockWeight, name:"XY Input: Lora Block Weight //Inspire", output:X$_$1vectors$2+Y$_$1effect_compares$2 */
    XY_Input$4_Lora_Block_Weight_$3$3Inspire(p: XY_Input$4_Lora_Block_Weight_$3$3Inspire_input, meta?: ComfyNodeMetadata): XY_Input$4_Lora_Block_Weight_$3$3Inspire
    /* category:InspirePack_LoraBlockWeight, name:"LoraLoaderBlockWeight //Inspire", output:model+clip+populated_vector */
    LoraLoaderBlockWeight_$3$3Inspire(p: LoraLoaderBlockWeight_$3$3Inspire_input, meta?: ComfyNodeMetadata): LoraLoaderBlockWeight_$3$3Inspire
    /* category:InspirePack_LoraBlockWeight, name:"LoraBlockInfo //Inspire", output: */
    LoraBlockInfo_$3$3Inspire(p: LoraBlockInfo_$3$3Inspire_input, meta?: ComfyNodeMetadata): LoraBlockInfo_$3$3Inspire
    /* category:InspirePack_LoraBlockWeight, name:"MakeLBW //Inspire", output:lbw_model+populated_vector */
    MakeLBW_$3$3Inspire(p: MakeLBW_$3$3Inspire_input, meta?: ComfyNodeMetadata): MakeLBW_$3$3Inspire
    /* category:InspirePack_LoraBlockWeight, name:"ApplyLBW //Inspire", output:MODEL+CLIP */
    ApplyLBW_$3$3Inspire(p: ApplyLBW_$3$3Inspire_input, meta?: ComfyNodeMetadata): ApplyLBW_$3$3Inspire
    /* category:InspirePack_LoraBlockWeight, name:"SaveLBW //Inspire", output: */
    SaveLBW_$3$3Inspire(p: SaveLBW_$3$3Inspire_input, meta?: ComfyNodeMetadata): SaveLBW_$3$3Inspire
    /* category:InspirePack_LoraBlockWeight, name:"LoadLBW //Inspire", output:LBW_MODEL */
    LoadLBW_$3$3Inspire(p: LoadLBW_$3$3Inspire_input, meta?: ComfyNodeMetadata): LoadLBW_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"OpenPose_Preprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"DWPreprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"MiDaS_DepthMap_Preprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"LeRes_DepthMap_Preprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"Canny_Preprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"MediaPipe_FaceMesh_Preprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"HEDPreprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"FakeScribblePreprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"AnimeLineArt_Preprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"Manga2Anime_LineArt_Preprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"LineArt_Preprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"Color_Preprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"InpaintPreprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"TilePreprocessor_Provider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire(p: TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_SEGS_ControlNet, name:"MeshGraphormerDepthMapPreprocessorProvider_for_SEGS //Inspire", output:SEGS_PREPROCESSOR */
    MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire(p: MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire_input, meta?: ComfyNodeMetadata): MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire
    /* category:InspirePack_Detector, name:"MediaPipeFaceMeshDetectorProvider //Inspire", output:BBOX_DETECTOR+SEGM_DETECTOR */
    MediaPipeFaceMeshDetectorProvider_$3$3Inspire(p: MediaPipeFaceMeshDetectorProvider_$3$3Inspire_input, meta?: ComfyNodeMetadata): MediaPipeFaceMeshDetectorProvider_$3$3Inspire
    /* category:InspirePack_a1111_compat, name:"KSampler //Inspire", output:LATENT */
    KSampler_$3$3Inspire(p: KSampler_$3$3Inspire_input, meta?: ComfyNodeMetadata): KSampler_$3$3Inspire
    /* category:InspirePack_a1111_compat, name:"KSamplerAdvanced //Inspire", output:LATENT */
    KSamplerAdvanced_$3$3Inspire(p: KSamplerAdvanced_$3$3Inspire_input, meta?: ComfyNodeMetadata): KSamplerAdvanced_$3$3Inspire
    /* category:InspirePack_a1111_compat, name:"KSamplerPipe //Inspire", output:LATENT+VAE */
    KSamplerPipe_$3$3Inspire(p: KSamplerPipe_$3$3Inspire_input, meta?: ComfyNodeMetadata): KSamplerPipe_$3$3Inspire
    /* category:InspirePack_a1111_compat, name:"KSamplerAdvancedPipe //Inspire", output:LATENT+VAE */
    KSamplerAdvancedPipe_$3$3Inspire(p: KSamplerAdvancedPipe_$3$3Inspire_input, meta?: ComfyNodeMetadata): KSamplerAdvancedPipe_$3$3Inspire
    /* category:InspirePack_a1111_compat, name:"RandomNoise //Inspire", output:NOISE */
    RandomNoise_$3$3Inspire(p: RandomNoise_$3$3Inspire_input, meta?: ComfyNodeMetadata): RandomNoise_$3$3Inspire
    /* category:InspirePack___for_testing, name:"HyperTile //Inspire", output:MODEL */
    HyperTile_$3$3Inspire(p: HyperTile_$3$3Inspire_input, meta?: ComfyNodeMetadata): HyperTile_$3$3Inspire
    /* category:InspirePack_Prompt, name:"LoadPromptsFromDir //Inspire", output:ZIPPED_PROMPT */
    LoadPromptsFromDir_$3$3Inspire(p: LoadPromptsFromDir_$3$3Inspire_input, meta?: ComfyNodeMetadata): LoadPromptsFromDir_$3$3Inspire
    /* category:InspirePack_Prompt, name:"LoadPromptsFromFile //Inspire", output:ZIPPED_PROMPT */
    LoadPromptsFromFile_$3$3Inspire(p: LoadPromptsFromFile_$3$3Inspire_input, meta?: ComfyNodeMetadata): LoadPromptsFromFile_$3$3Inspire
    /* category:InspirePack_Prompt, name:"LoadSinglePromptFromFile //Inspire", output:ZIPPED_PROMPT */
    LoadSinglePromptFromFile_$3$3Inspire(p: LoadSinglePromptFromFile_$3$3Inspire_input, meta?: ComfyNodeMetadata): LoadSinglePromptFromFile_$3$3Inspire
    /* category:InspirePack_Prompt, name:"UnzipPrompt //Inspire", output:positive+negative+name */
    UnzipPrompt_$3$3Inspire(p: UnzipPrompt_$3$3Inspire_input, meta?: ComfyNodeMetadata): UnzipPrompt_$3$3Inspire
    /* category:InspirePack_Prompt, name:"ZipPrompt //Inspire", output:ZIPPED_PROMPT */
    ZipPrompt_$3$3Inspire(p: ZipPrompt_$3$3Inspire_input, meta?: ComfyNodeMetadata): ZipPrompt_$3$3Inspire
    /* category:InspirePack_Prompt, name:"PromptExtractor //Inspire", output:positive+negative */
    PromptExtractor_$3$3Inspire(p: PromptExtractor_$3$3Inspire_input, meta?: ComfyNodeMetadata): PromptExtractor_$3$3Inspire
    /* category:InspirePack_Prompt, name:"GlobalSeed //Inspire", output: */
    GlobalSeed_$3$3Inspire(p: GlobalSeed_$3$3Inspire_input, meta?: ComfyNodeMetadata): GlobalSeed_$3$3Inspire
    /* category:InspirePack_Prompt, name:"GlobalSampler //Inspire", output: */
    GlobalSampler_$3$3Inspire(p: GlobalSampler_$3$3Inspire_input, meta?: ComfyNodeMetadata): GlobalSampler_$3$3Inspire
    /* category:InspirePack_Prompt, name:"BindImageListPromptList //Inspire", output:image+positive+negative+prompt_label */
    BindImageListPromptList_$3$3Inspire(p: BindImageListPromptList_$3$3Inspire_input, meta?: ComfyNodeMetadata): BindImageListPromptList_$3$3Inspire
    /* category:InspirePack_Prompt, name:"WildcardEncode //Inspire", output:model+clip+conditioning+populated_text */
    WildcardEncode_$3$3Inspire(p: WildcardEncode_$3$3Inspire_input, meta?: ComfyNodeMetadata): WildcardEncode_$3$3Inspire
    /* category:InspirePack_Prompt, name:"PromptBuilder //Inspire", output:STRING */
    PromptBuilder_$3$3Inspire(p: PromptBuilder_$3$3Inspire_input, meta?: ComfyNodeMetadata): PromptBuilder_$3$3Inspire
    /* category:InspirePack_Prompt, name:"SeedExplorer //Inspire", output:NOISE */
    SeedExplorer_$3$3Inspire(p: SeedExplorer_$3$3Inspire_input, meta?: ComfyNodeMetadata): SeedExplorer_$3$3Inspire
    /* category:InspirePack_Util, name:"ListCounter //Inspire", output:INT */
    ListCounter_$3$3Inspire(p: ListCounter_$3$3Inspire_input, meta?: ComfyNodeMetadata): ListCounter_$3$3Inspire
    /* category:InspirePack_Util, name:"CLIPTextEncodeWithWeight //Inspire", output:CONDITIONING */
    CLIPTextEncodeWithWeight_$3$3Inspire(p: CLIPTextEncodeWithWeight_$3$3Inspire_input, meta?: ComfyNodeMetadata): CLIPTextEncodeWithWeight_$3$3Inspire
    /* category:InspirePack_Util, name:"RandomGeneratorForList //Inspire", output:signal+random_value */
    RandomGeneratorForList_$3$3Inspire(p: RandomGeneratorForList_$3$3Inspire_input, meta?: ComfyNodeMetadata): RandomGeneratorForList_$3$3Inspire
    /* category:InspirePack_Prompt, name:"MakeBasicPipe //Inspire", output:basic_pipe+cache_key */
    MakeBasicPipe_$3$3Inspire(p: MakeBasicPipe_$3$3Inspire_input, meta?: ComfyNodeMetadata): MakeBasicPipe_$3$3Inspire
    /* category:InspirePack_Util, name:"RemoveControlNet //Inspire", output:CONDITIONING */
    RemoveControlNet_$3$3Inspire(p: RemoveControlNet_$3$3Inspire_input, meta?: ComfyNodeMetadata): RemoveControlNet_$3$3Inspire
    /* category:InspirePack_Util, name:"RemoveControlNetFromRegionalPrompts //Inspire", output:REGIONAL_PROMPTS */
    RemoveControlNetFromRegionalPrompts_$3$3Inspire(p: RemoveControlNetFromRegionalPrompts_$3$3Inspire_input, meta?: ComfyNodeMetadata): RemoveControlNetFromRegionalPrompts_$3$3Inspire
    /* category:InspirePack_Prompt, name:"CompositeNoise //Inspire", output:NOISE */
    CompositeNoise_$3$3Inspire(p: CompositeNoise_$3$3Inspire_input, meta?: ComfyNodeMetadata): CompositeNoise_$3$3Inspire
    /* category:image, name:"LoadImagesFromDir //Inspire", output:IMAGE+MASK+INT */
    LoadImagesFromDir_$3$3Inspire(p: LoadImagesFromDir_$3$3Inspire_input, meta?: ComfyNodeMetadata): LoadImagesFromDir_$3$3Inspire
    /* category:image, name:"LoadImageListFromDir //Inspire", output:IMAGE+MASK+FILE$_PATH */
    LoadImageListFromDir_$3$3Inspire(p: LoadImageListFromDir_$3$3Inspire_input, meta?: ComfyNodeMetadata): LoadImageListFromDir_$3$3Inspire
    /* category:InspirePack_image, name:"LoadImage //Inspire", output:IMAGE+MASK */
    LoadImage_$3$3Inspire(p: LoadImage_$3$3Inspire_input, meta?: ComfyNodeMetadata): LoadImage_$3$3Inspire
    /* category:InspirePack_Util, name:"ChangeImageBatchSize //Inspire", output:IMAGE */
    ChangeImageBatchSize_$3$3Inspire(p: ChangeImageBatchSize_$3$3Inspire_input, meta?: ComfyNodeMetadata): ChangeImageBatchSize_$3$3Inspire
    /* category:InspirePack_Util, name:"ChangeLatentBatchSize //Inspire", output:LATENT */
    ChangeLatentBatchSize_$3$3Inspire(p: ChangeLatentBatchSize_$3$3Inspire_input, meta?: ComfyNodeMetadata): ChangeLatentBatchSize_$3$3Inspire
    /* category:InspirePack_Util, name:"ImageBatchSplitter //Inspire", output:IMAGE */
    ImageBatchSplitter_$3$3Inspire(p: ImageBatchSplitter_$3$3Inspire_input, meta?: ComfyNodeMetadata): ImageBatchSplitter_$3$3Inspire
    /* category:InspirePack_Util, name:"LatentBatchSplitter //Inspire", output:LATENT */
    LatentBatchSplitter_$3$3Inspire(p: LatentBatchSplitter_$3$3Inspire_input, meta?: ComfyNodeMetadata): LatentBatchSplitter_$3$3Inspire
    /* category:InspirePack_Util, name:"ColorMapToMasks //Inspire", output:MASK */
    ColorMapToMasks_$3$3Inspire(p: ColorMapToMasks_$3$3Inspire_input, meta?: ComfyNodeMetadata): ColorMapToMasks_$3$3Inspire
    /* category:InspirePack_Util, name:"SelectNthMask //Inspire", output:MASK */
    SelectNthMask_$3$3Inspire(p: SelectNthMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): SelectNthMask_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalPromptSimple //Inspire", output:REGIONAL_PROMPTS */
    RegionalPromptSimple_$3$3Inspire(p: RegionalPromptSimple_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalPromptSimple_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalPromptColorMask //Inspire", output:REGIONAL_PROMPTS+MASK */
    RegionalPromptColorMask_$3$3Inspire(p: RegionalPromptColorMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalPromptColorMask_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalConditioningSimple //Inspire", output:CONDITIONING */
    RegionalConditioningSimple_$3$3Inspire(p: RegionalConditioningSimple_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalConditioningSimple_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalConditioningColorMask //Inspire", output:CONDITIONING+MASK */
    RegionalConditioningColorMask_$3$3Inspire(p: RegionalConditioningColorMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalConditioningColorMask_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalIPAdapterMask //Inspire", output:REGIONAL_IPADAPTER */
    RegionalIPAdapterMask_$3$3Inspire(p: RegionalIPAdapterMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalIPAdapterMask_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalIPAdapterColorMask //Inspire", output:REGIONAL_IPADAPTER+MASK */
    RegionalIPAdapterColorMask_$3$3Inspire(p: RegionalIPAdapterColorMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalIPAdapterColorMask_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalIPAdapterEncodedMask //Inspire", output:REGIONAL_IPADAPTER */
    RegionalIPAdapterEncodedMask_$3$3Inspire(p: RegionalIPAdapterEncodedMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalIPAdapterEncodedMask_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalIPAdapterEncodedColorMask //Inspire", output:REGIONAL_IPADAPTER+MASK */
    RegionalIPAdapterEncodedColorMask_$3$3Inspire(p: RegionalIPAdapterEncodedColorMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalIPAdapterEncodedColorMask_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalSeedExplorerMask //Inspire", output:NOISE */
    RegionalSeedExplorerMask_$3$3Inspire(p: RegionalSeedExplorerMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalSeedExplorerMask_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalSeedExplorerColorMask //Inspire", output:NOISE+MASK */
    RegionalSeedExplorerColorMask_$3$3Inspire(p: RegionalSeedExplorerColorMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalSeedExplorerColorMask_$3$3Inspire
    /* category:InspirePack_Util, name:"ToIPAdapterPipe //Inspire", output:IPADAPTER_PIPE */
    ToIPAdapterPipe_$3$3Inspire(p: ToIPAdapterPipe_$3$3Inspire_input, meta?: ComfyNodeMetadata): ToIPAdapterPipe_$3$3Inspire
    /* category:InspirePack_Util, name:"FromIPAdapterPipe //Inspire", output:ipadapter+model+clip_vision+insight_face */
    FromIPAdapterPipe_$3$3Inspire(p: FromIPAdapterPipe_$3$3Inspire_input, meta?: ComfyNodeMetadata): FromIPAdapterPipe_$3$3Inspire
    /* category:InspirePack_Regional, name:"ApplyRegionalIPAdapters //Inspire", output:MODEL */
    ApplyRegionalIPAdapters_$3$3Inspire(p: ApplyRegionalIPAdapters_$3$3Inspire_input, meta?: ComfyNodeMetadata): ApplyRegionalIPAdapters_$3$3Inspire
    /* category:InspirePack_Regional, name:"RegionalCFG //Inspire", output:MODEL */
    RegionalCFG_$3$3Inspire(p: RegionalCFG_$3$3Inspire_input, meta?: ComfyNodeMetadata): RegionalCFG_$3$3Inspire
    /* category:InspirePack_Regional, name:"ColorMaskToDepthMask //Inspire", output:MASK */
    ColorMaskToDepthMask_$3$3Inspire(p: ColorMaskToDepthMask_$3$3Inspire_input, meta?: ComfyNodeMetadata): ColorMaskToDepthMask_$3$3Inspire
    /* category:InspirePack_analysis, name:"KSamplerProgress //Inspire", output:latent+progress_latent */
    KSamplerProgress_$3$3Inspire(p: KSamplerProgress_$3$3Inspire_input, meta?: ComfyNodeMetadata): KSamplerProgress_$3$3Inspire
    /* category:InspirePack_analysis, name:"KSamplerAdvancedProgress //Inspire", output:latent+progress_latent */
    KSamplerAdvancedProgress_$3$3Inspire(p: KSamplerAdvancedProgress_$3$3Inspire_input, meta?: ComfyNodeMetadata): KSamplerAdvancedProgress_$3$3Inspire
    /* category:sampling_custom_sampling_guiders, name:"ScheduledCFGGuider //Inspire", output:GUIDER+SIGMAS */
    ScheduledCFGGuider_$3$3Inspire(p: ScheduledCFGGuider_$3$3Inspire_input, meta?: ComfyNodeMetadata): ScheduledCFGGuider_$3$3Inspire
    /* category:sampling_custom_sampling_guiders, name:"ScheduledPerpNegCFGGuider //Inspire", output:GUIDER+SIGMAS */
    ScheduledPerpNegCFGGuider_$3$3Inspire(p: ScheduledPerpNegCFGGuider_$3$3Inspire_input, meta?: ComfyNodeMetadata): ScheduledPerpNegCFGGuider_$3$3Inspire
    /* category:InspirePack_Backend, name:"CacheBackendData //Inspire", output:data$_opt */
    CacheBackendData_$3$3Inspire(p: CacheBackendData_$3$3Inspire_input, meta?: ComfyNodeMetadata): CacheBackendData_$3$3Inspire
    /* category:InspirePack_Backend, name:"CacheBackendDataNumberKey //Inspire", output:data$_opt */
    CacheBackendDataNumberKey_$3$3Inspire(p: CacheBackendDataNumberKey_$3$3Inspire_input, meta?: ComfyNodeMetadata): CacheBackendDataNumberKey_$3$3Inspire
    /* category:InspirePack_Backend, name:"CacheBackendDataList //Inspire", output:data$_opt */
    CacheBackendDataList_$3$3Inspire(p: CacheBackendDataList_$3$3Inspire_input, meta?: ComfyNodeMetadata): CacheBackendDataList_$3$3Inspire
    /* category:InspirePack_Backend, name:"CacheBackendDataNumberKeyList //Inspire", output:data$_opt */
    CacheBackendDataNumberKeyList_$3$3Inspire(p: CacheBackendDataNumberKeyList_$3$3Inspire_input, meta?: ComfyNodeMetadata): CacheBackendDataNumberKeyList_$3$3Inspire
    /* category:InspirePack_Backend, name:"RetrieveBackendData //Inspire", output:data */
    RetrieveBackendData_$3$3Inspire(p: RetrieveBackendData_$3$3Inspire_input, meta?: ComfyNodeMetadata): RetrieveBackendData_$3$3Inspire
    /* category:InspirePack_Backend, name:"RetrieveBackendDataNumberKey //Inspire", output:data */
    RetrieveBackendDataNumberKey_$3$3Inspire(p: RetrieveBackendDataNumberKey_$3$3Inspire_input, meta?: ComfyNodeMetadata): RetrieveBackendDataNumberKey_$3$3Inspire
    /* category:InspirePack_Backend, name:"RemoveBackendData //Inspire", output:signal */
    RemoveBackendData_$3$3Inspire(p: RemoveBackendData_$3$3Inspire_input, meta?: ComfyNodeMetadata): RemoveBackendData_$3$3Inspire
    /* category:InspirePack_Backend, name:"RemoveBackendDataNumberKey //Inspire", output:signal */
    RemoveBackendDataNumberKey_$3$3Inspire(p: RemoveBackendDataNumberKey_$3$3Inspire_input, meta?: ComfyNodeMetadata): RemoveBackendDataNumberKey_$3$3Inspire
    /* category:InspirePack_Backend, name:"ShowCachedInfo //Inspire", output: */
    ShowCachedInfo_$3$3Inspire(p: ShowCachedInfo_$3$3Inspire_input, meta?: ComfyNodeMetadata): ShowCachedInfo_$3$3Inspire
    /* category:InspirePack_Backend, name:"CheckpointLoaderSimpleShared //Inspire", output:model+clip+vae+cache$_key */
    CheckpointLoaderSimpleShared_$3$3Inspire(p: CheckpointLoaderSimpleShared_$3$3Inspire_input, meta?: ComfyNodeMetadata): CheckpointLoaderSimpleShared_$3$3Inspire
    /* category:InspirePack_Backend, name:"StableCascade_CheckpointLoader //Inspire", output:b_model+b_vae+c_model+c_vae+c_clip_vision+clip+key_b+key_c */
    StableCascade$_CheckpointLoader_$3$3Inspire(p: StableCascade$_CheckpointLoader_$3$3Inspire_input, meta?: ComfyNodeMetadata): StableCascade$_CheckpointLoader_$3$3Inspire
    /* category:InspirePack_Util, name:"FloatRange //Inspire", output:FLOAT */
    FloatRange_$3$3Inspire(p: FloatRange_$3$3Inspire_input, meta?: ComfyNodeMetadata): FloatRange_$3$3Inspire
    /* category:InspirePack___for_testing, name:"ConcatConditioningsWithMultiplier //Inspire", output:CONDITIONING */
    ConcatConditioningsWithMultiplier_$3$3Inspire(p: ConcatConditioningsWithMultiplier_$3$3Inspire_input, meta?: ComfyNodeMetadata): ConcatConditioningsWithMultiplier_$3$3Inspire
    /* category:InspirePack_conditioning, name:"ConditioningUpscale //Inspire", output:CONDITIONING */
    ConditioningUpscale_$3$3Inspire(p: ConditioningUpscale_$3$3Inspire_input, meta?: ComfyNodeMetadata): ConditioningUpscale_$3$3Inspire
    /* category:InspirePack_conditioning, name:"ConditioningStretch //Inspire", output:CONDITIONING */
    ConditioningStretch_$3$3Inspire(p: ConditioningStretch_$3$3Inspire_input, meta?: ComfyNodeMetadata): ConditioningStretch_$3$3Inspire
    /* category:InspirePack_models, name:"IPAdapterModelHelper //Inspire", output:IPADAPTER_PIPE+IPADAPTER+CLIP_VISION+INSIGHTFACE+MODEL+CLIP+insightface_cache_key+clip_vision_cache_key */
    IPAdapterModelHelper_$3$3Inspire(p: IPAdapterModelHelper_$3$3Inspire_input, meta?: ComfyNodeMetadata): IPAdapterModelHelper_$3$3Inspire
    /* category:InspirePack_Util, name:"RGB_HexToHSV //Inspire", output:hue+saturation+value */
    RGB$_HexToHSV_$3$3Inspire(p: RGB$_HexToHSV_$3$3Inspire_input, meta?: ComfyNodeMetadata): RGB$_HexToHSV_$3$3Inspire
    /* category:KJNodes_constants, name:"BOOLConstant", output:value */
    BOOLConstant(p: BOOLConstant_input, meta?: ComfyNodeMetadata): BOOLConstant
    /* category:KJNodes_constants, name:"INTConstant", output:value */
    INTConstant(p: INTConstant_input, meta?: ComfyNodeMetadata): INTConstant
    /* category:KJNodes_constants, name:"FloatConstant", output:value */
    FloatConstant(p: FloatConstant_input, meta?: ComfyNodeMetadata): FloatConstant
    /* category:KJNodes_constants, name:"StringConstant", output:STRING */
    StringConstant(p: StringConstant_input, meta?: ComfyNodeMetadata): StringConstant
    /* category:KJNodes_constants, name:"StringConstantMultiline", output:STRING */
    StringConstantMultiline(p: StringConstantMultiline_input, meta?: ComfyNodeMetadata): StringConstantMultiline
    /* category:KJNodes_masking_conditioning, name:"ConditioningMultiCombine", output:combined+inputcount */
    ConditioningMultiCombine(p: ConditioningMultiCombine_input, meta?: ComfyNodeMetadata): ConditioningMultiCombine
    /* category:KJNodes_masking_conditioning, name:"ConditioningSetMaskAndCombine", output:combined_positive+combined_negative */
    ConditioningSetMaskAndCombine(p: ConditioningSetMaskAndCombine_input, meta?: ComfyNodeMetadata): ConditioningSetMaskAndCombine
    /* category:KJNodes_masking_conditioning, name:"ConditioningSetMaskAndCombine3", output:combined_positive+combined_negative */
    ConditioningSetMaskAndCombine3(p: ConditioningSetMaskAndCombine3_input, meta?: ComfyNodeMetadata): ConditioningSetMaskAndCombine3
    /* category:KJNodes_masking_conditioning, name:"ConditioningSetMaskAndCombine4", output:combined_positive+combined_negative */
    ConditioningSetMaskAndCombine4(p: ConditioningSetMaskAndCombine4_input, meta?: ComfyNodeMetadata): ConditioningSetMaskAndCombine4
    /* category:KJNodes_masking_conditioning, name:"ConditioningSetMaskAndCombine5", output:combined_positive+combined_negative */
    ConditioningSetMaskAndCombine5(p: ConditioningSetMaskAndCombine5_input, meta?: ComfyNodeMetadata): ConditioningSetMaskAndCombine5
    /* category:KJNodes_misc, name:"CondPassThrough", output:positive+negative */
    CondPassThrough(p: CondPassThrough_input, meta?: ComfyNodeMetadata): CondPassThrough
    /* category:KJNodes_masking, name:"DownloadAndLoadCLIPSeg", output:clipseg_model */
    DownloadAndLoadCLIPSeg(p: DownloadAndLoadCLIPSeg_input, meta?: ComfyNodeMetadata): DownloadAndLoadCLIPSeg
    /* category:KJNodes_masking, name:"BatchCLIPSeg", output:Mask+Image */
    BatchCLIPSeg(p: BatchCLIPSeg_input, meta?: ComfyNodeMetadata): BatchCLIPSeg
    /* category:KJNodes_masking, name:"ColorToMask", output:MASK */
    ColorToMask(p: ColorToMask_input, meta?: ComfyNodeMetadata): ColorToMask
    /* category:KJNodes_masking_generate, name:"CreateGradientMask", output:MASK */
    CreateGradientMask(p: CreateGradientMask_input, meta?: ComfyNodeMetadata): CreateGradientMask
    /* category:KJNodes_text, name:"CreateTextMask", output:IMAGE+MASK */
    CreateTextMask(p: CreateTextMask_input, meta?: ComfyNodeMetadata): CreateTextMask
    /* category:KJNodes_deprecated, name:"CreateAudioMask", output:IMAGE */
    CreateAudioMask(p: CreateAudioMask_input, meta?: ComfyNodeMetadata): CreateAudioMask
    /* category:KJNodes_deprecated, name:"CreateFadeMask", output:MASK */
    CreateFadeMask(p: CreateFadeMask_input, meta?: ComfyNodeMetadata): CreateFadeMask
    /* category:KJNodes_masking_generate, name:"CreateFadeMaskAdvanced", output:MASK */
    CreateFadeMaskAdvanced(p: CreateFadeMaskAdvanced_input, meta?: ComfyNodeMetadata): CreateFadeMaskAdvanced
    /* category:KJNodes_masking_generate, name:"CreateFluidMask", output:IMAGE+MASK */
    CreateFluidMask(p: CreateFluidMask_input, meta?: ComfyNodeMetadata): CreateFluidMask
    /* category:KJNodes_masking_generate, name:"CreateShapeMask", output:mask+mask_inverted */
    CreateShapeMask(p: CreateShapeMask_input, meta?: ComfyNodeMetadata): CreateShapeMask
    /* category:KJNodes_masking_generate, name:"CreateVoronoiMask", output:mask+mask_inverted */
    CreateVoronoiMask(p: CreateVoronoiMask_input, meta?: ComfyNodeMetadata): CreateVoronoiMask
    /* category:KJNodes_masking_generate, name:"CreateMagicMask", output:mask+mask_inverted */
    CreateMagicMask(p: CreateMagicMask_input, meta?: ComfyNodeMetadata): CreateMagicMask
    /* category:KJNodes_masking, name:"GetMaskSizeAndCount", output:mask+width+height+count */
    GetMaskSizeAndCount(p: GetMaskSizeAndCount_input, meta?: ComfyNodeMetadata): GetMaskSizeAndCount
    /* category:KJNodes_masking, name:"GrowMaskWithBlur", output:mask+mask_inverted */
    GrowMaskWithBlur(p: GrowMaskWithBlur_input, meta?: ComfyNodeMetadata): GrowMaskWithBlur
    /* category:KJNodes_masking, name:"MaskBatchMulti", output:masks */
    MaskBatchMulti(p: MaskBatchMulti_input, meta?: ComfyNodeMetadata): MaskBatchMulti
    /* category:KJNodes_masking, name:"OffsetMask", output:mask */
    OffsetMask(p: OffsetMask_input, meta?: ComfyNodeMetadata): OffsetMask
    /* category:KJNodes_masking, name:"RemapMaskRange", output:mask */
    RemapMaskRange(p: RemapMaskRange_input, meta?: ComfyNodeMetadata): RemapMaskRange
    /* category:KJNodes_masking, name:"ResizeMask", output:mask+width+height */
    ResizeMask(p: ResizeMask_input, meta?: ComfyNodeMetadata): ResizeMask
    /* category:KJNodes_masking, name:"RoundMask", output:MASK */
    RoundMask(p: RoundMask_input, meta?: ComfyNodeMetadata): RoundMask
    /* category:KJNodes_text, name:"AddLabel", output:IMAGE */
    AddLabel(p: AddLabel_input, meta?: ComfyNodeMetadata): AddLabel
    /* category:KJNodes_image, name:"ColorMatch", output:image */
    ColorMatch(p: ColorMatch_input, meta?: ComfyNodeMetadata): ColorMatch
    /* category:KJNodes_image, name:"CrossFadeImages", output:IMAGE */
    CrossFadeImages(p: CrossFadeImages_input, meta?: ComfyNodeMetadata): CrossFadeImages
    /* category:KJNodes_image, name:"CrossFadeImagesMulti", output:IMAGE */
    CrossFadeImagesMulti(p: CrossFadeImagesMulti_input, meta?: ComfyNodeMetadata): CrossFadeImagesMulti
    /* category:KJNodes_image, name:"GetImagesFromBatchIndexed", output:IMAGE */
    GetImagesFromBatchIndexed(p: GetImagesFromBatchIndexed_input, meta?: ComfyNodeMetadata): GetImagesFromBatchIndexed
    /* category:KJNodes_image, name:"GetImageRangeFromBatch", output:IMAGE+MASK */
    GetImageRangeFromBatch(p: GetImageRangeFromBatch_input, meta?: ComfyNodeMetadata): GetImageRangeFromBatch
    /* category:KJNodes_image, name:"GetImageSizeAndCount", output:image+width+height+count */
    GetImageSizeAndCount(p: GetImageSizeAndCount_input, meta?: ComfyNodeMetadata): GetImageSizeAndCount
    /* category:KJNodes_experimental, name:"FastPreview", output: */
    FastPreview(p: FastPreview_input, meta?: ComfyNodeMetadata): FastPreview
    /* category:KJNodes, name:"ImageAndMaskPreview", output:composite */
    ImageAndMaskPreview(p: ImageAndMaskPreview_input, meta?: ComfyNodeMetadata): ImageAndMaskPreview
    /* category:KJNodes_image, name:"ImageAddMulti", output:images */
    ImageAddMulti(p: ImageAddMulti_input, meta?: ComfyNodeMetadata): ImageAddMulti
    /* category:KJNodes_image, name:"ImageBatchMulti", output:images */
    ImageBatchMulti(p: ImageBatchMulti_input, meta?: ComfyNodeMetadata): ImageBatchMulti
    /* category:KJNodes_image, name:"ImageBatchRepeatInterleaving", output:IMAGE */
    ImageBatchRepeatInterleaving(p: ImageBatchRepeatInterleaving_input, meta?: ComfyNodeMetadata): ImageBatchRepeatInterleaving
    /* category:KJNodes_text, name:"ImageBatchTestPattern", output:IMAGE */
    ImageBatchTestPattern(p: ImageBatchTestPattern_input, meta?: ComfyNodeMetadata): ImageBatchTestPattern
    /* category:KJNodes_image, name:"ImageConcanate", output:IMAGE */
    ImageConcanate(p: ImageConcanate_input, meta?: ComfyNodeMetadata): ImageConcanate
    /* category:KJNodes_image, name:"ImageConcatFromBatch", output:IMAGE */
    ImageConcatFromBatch(p: ImageConcatFromBatch_input, meta?: ComfyNodeMetadata): ImageConcatFromBatch
    /* category:KJNodes_image, name:"ImageConcatMulti", output:images */
    ImageConcatMulti(p: ImageConcatMulti_input, meta?: ComfyNodeMetadata): ImageConcatMulti
    /* category:KJNodes_image, name:"ImageCropByMaskAndResize", output:images+masks+bbox */
    ImageCropByMaskAndResize(p: ImageCropByMaskAndResize_input, meta?: ComfyNodeMetadata): ImageCropByMaskAndResize
    /* category:KJNodes_image, name:"ImageUncropByMask", output:image */
    ImageUncropByMask(p: ImageUncropByMask_input, meta?: ComfyNodeMetadata): ImageUncropByMask
    /* category:KJNodes_experimental, name:"ImageGrabPIL", output:image */
    ImageGrabPIL(p: ImageGrabPIL_input, meta?: ComfyNodeMetadata): ImageGrabPIL
    /* category:KJNodes_image, name:"ImageGridComposite2x2", output:IMAGE */
    ImageGridComposite2x2(p: ImageGridComposite2x2_input, meta?: ComfyNodeMetadata): ImageGridComposite2x2
    /* category:KJNodes_image, name:"ImageGridComposite3x3", output:IMAGE */
    ImageGridComposite3x3(p: ImageGridComposite3x3_input, meta?: ComfyNodeMetadata): ImageGridComposite3x3
    /* category:KJNodes_image, name:"ImageGridtoBatch", output:IMAGE */
    ImageGridtoBatch(p: ImageGridtoBatch_input, meta?: ComfyNodeMetadata): ImageGridtoBatch
    /* category:KJNodes_image, name:"ImageNormalize_Neg1_To_1", output:IMAGE */
    ImageNormalize$_Neg1$_To$_1(p: ImageNormalize$_Neg1$_To$_1_input, meta?: ComfyNodeMetadata): ImageNormalize$_Neg1$_To$_1
    /* category:KJNodes_image, name:"ImagePass", output:IMAGE */
    ImagePass(p: ImagePass_input, meta?: ComfyNodeMetadata): ImagePass
    /* category:image, name:"ImagePadForOutpaintMasked", output:IMAGE+MASK */
    ImagePadForOutpaintMasked(p: ImagePadForOutpaintMasked_input, meta?: ComfyNodeMetadata): ImagePadForOutpaintMasked
    /* category:image, name:"ImagePadForOutpaintTargetSize", output:IMAGE+MASK */
    ImagePadForOutpaintTargetSize(p: ImagePadForOutpaintTargetSize_input, meta?: ComfyNodeMetadata): ImagePadForOutpaintTargetSize
    /* category:KJNodes_image, name:"ImageResizeKJ", output:IMAGE+width+height */
    ImageResizeKJ(p: ImageResizeKJ_input, meta?: ComfyNodeMetadata): ImageResizeKJ
    /* category:KJNodes_image, name:"ImageUpscaleWithModelBatched", output:IMAGE */
    ImageUpscaleWithModelBatched(p: ImageUpscaleWithModelBatched_input, meta?: ComfyNodeMetadata): ImageUpscaleWithModelBatched
    /* category:KJNodes_image, name:"InsertImagesToBatchIndexed", output:IMAGE */
    InsertImagesToBatchIndexed(p: InsertImagesToBatchIndexed_input, meta?: ComfyNodeMetadata): InsertImagesToBatchIndexed
    /* category:KJNodes_image, name:"LoadAndResizeImage", output:image+mask+width+height+image_path */
    LoadAndResizeImage(p: LoadAndResizeImage_input, meta?: ComfyNodeMetadata): LoadAndResizeImage
    /* category:image, name:"LoadImagesFromFolderKJ", output:image+mask+count+image_path */
    LoadImagesFromFolderKJ(p: LoadImagesFromFolderKJ_input, meta?: ComfyNodeMetadata): LoadImagesFromFolderKJ
    /* category:KJNodes_image, name:"MergeImageChannels", output:image */
    MergeImageChannels(p: MergeImageChannels_input, meta?: ComfyNodeMetadata): MergeImageChannels
    /* category:KJNodes_image, name:"PreviewAnimation", output: */
    PreviewAnimation(p: PreviewAnimation_input, meta?: ComfyNodeMetadata): PreviewAnimation
    /* category:KJNodes_image, name:"RemapImageRange", output:IMAGE */
    RemapImageRange(p: RemapImageRange_input, meta?: ComfyNodeMetadata): RemapImageRange
    /* category:KJNodes_image, name:"ReverseImageBatch", output:IMAGE */
    ReverseImageBatch(p: ReverseImageBatch_input, meta?: ComfyNodeMetadata): ReverseImageBatch
    /* category:KJNodes_image, name:"ReplaceImagesInBatch", output:IMAGE */
    ReplaceImagesInBatch(p: ReplaceImagesInBatch_input, meta?: ComfyNodeMetadata): ReplaceImagesInBatch
    /* category:KJNodes_image, name:"SaveImageWithAlpha", output: */
    SaveImageWithAlpha(p: SaveImageWithAlpha_input, meta?: ComfyNodeMetadata): SaveImageWithAlpha
    /* category:image, name:"SaveImageKJ", output:filename */
    SaveImageKJ(p: SaveImageKJ_input, meta?: ComfyNodeMetadata): SaveImageKJ
    /* category:KJNodes_image, name:"ShuffleImageBatch", output:IMAGE */
    ShuffleImageBatch(p: ShuffleImageBatch_input, meta?: ComfyNodeMetadata): ShuffleImageBatch
    /* category:KJNodes_image, name:"SplitImageChannels", output:red+green+blue+mask */
    SplitImageChannels(p: SplitImageChannels_input, meta?: ComfyNodeMetadata): SplitImageChannels
    /* category:KJNodes_image, name:"TransitionImagesMulti", output:IMAGE */
    TransitionImagesMulti(p: TransitionImagesMulti_input, meta?: ComfyNodeMetadata): TransitionImagesMulti
    /* category:KJNodes_image, name:"TransitionImagesInBatch", output:IMAGE */
    TransitionImagesInBatch(p: TransitionImagesInBatch_input, meta?: ComfyNodeMetadata): TransitionImagesInBatch
    /* category:KJNodes_masking, name:"BatchCropFromMask", output:original_images+cropped_images+bboxes+width+height */
    BatchCropFromMask(p: BatchCropFromMask_input, meta?: ComfyNodeMetadata): BatchCropFromMask
    /* category:KJNodes_masking, name:"BatchCropFromMaskAdvanced", output:original_images+cropped_images+cropped_masks+combined_crop_image+combined_crop_masks+bboxes+combined_bounding_box+bbox_width+bbox_height */
    BatchCropFromMaskAdvanced(p: BatchCropFromMaskAdvanced_input, meta?: ComfyNodeMetadata): BatchCropFromMaskAdvanced
    /* category:KJNodes_masking, name:"FilterZeroMasksAndCorrespondingImages", output:non_zero_masks_out+non_zero_mask_images_out+zero_mask_images_out+zero_mask_images_out_indexes */
    FilterZeroMasksAndCorrespondingImages(p: FilterZeroMasksAndCorrespondingImages_input, meta?: ComfyNodeMetadata): FilterZeroMasksAndCorrespondingImages
    /* category:KJNodes_image, name:"InsertImageBatchByIndexes", output:images_after_insert */
    InsertImageBatchByIndexes(p: InsertImageBatchByIndexes_input, meta?: ComfyNodeMetadata): InsertImageBatchByIndexes
    /* category:KJNodes_masking, name:"BatchUncrop", output:IMAGE */
    BatchUncrop(p: BatchUncrop_input, meta?: ComfyNodeMetadata): BatchUncrop
    /* category:KJNodes_masking, name:"BatchUncropAdvanced", output:IMAGE */
    BatchUncropAdvanced(p: BatchUncropAdvanced_input, meta?: ComfyNodeMetadata): BatchUncropAdvanced
    /* category:KJNodes_masking, name:"SplitBboxes", output:bboxes_a+bboxes_b */
    SplitBboxes(p: SplitBboxes_input, meta?: ComfyNodeMetadata): SplitBboxes
    /* category:KJNodes_masking, name:"BboxToInt", output:x_min+y_min+width+height+center_x+center_y */
    BboxToInt(p: BboxToInt_input, meta?: ComfyNodeMetadata): BboxToInt
    /* category:KJNodes_masking, name:"BboxVisualize", output:images */
    BboxVisualize(p: BboxVisualize_input, meta?: ComfyNodeMetadata): BboxVisualize
    /* category:KJNodes_noise, name:"GenerateNoise", output:LATENT */
    GenerateNoise(p: GenerateNoise_input, meta?: ComfyNodeMetadata): GenerateNoise
    /* category:KJNodes_noise, name:"FlipSigmasAdjusted", output:SIGMAS+sigmas_string */
    FlipSigmasAdjusted(p: FlipSigmasAdjusted_input, meta?: ComfyNodeMetadata): FlipSigmasAdjusted
    /* category:KJNodes_noise, name:"InjectNoiseToLatent", output:LATENT */
    InjectNoiseToLatent(p: InjectNoiseToLatent_input, meta?: ComfyNodeMetadata): InjectNoiseToLatent
    /* category:KJNodes_noise, name:"CustomSigmas", output:SIGMAS */
    CustomSigmas(p: CustomSigmas_input, meta?: ComfyNodeMetadata): CustomSigmas
    /* category:KJNodes_text, name:"WidgetToString", output:STRING */
    WidgetToString(p: WidgetToString_input, meta?: ComfyNodeMetadata): WidgetToString
    /* category:KJNodes_misc, name:"DummyOut", output:$Star */
    DummyOut(p: DummyOut_input, meta?: ComfyNodeMetadata): DummyOut
    /* category:KJNodes, name:"GetLatentsFromBatchIndexed", output:LATENT */
    GetLatentsFromBatchIndexed(p: GetLatentsFromBatchIndexed_input, meta?: ComfyNodeMetadata): GetLatentsFromBatchIndexed
    /* category:KJNodes, name:"ScaleBatchPromptSchedule", output:STRING */
    ScaleBatchPromptSchedule(p: ScaleBatchPromptSchedule_input, meta?: ComfyNodeMetadata): ScaleBatchPromptSchedule
    /* category:KJNodes_misc, name:"CameraPoseVisualizer", output:IMAGE */
    CameraPoseVisualizer(p: CameraPoseVisualizer_input, meta?: ComfyNodeMetadata): CameraPoseVisualizer
    /* category:KJNodes_constants, name:"AppendStringsToList", output:STRING */
    AppendStringsToList(p: AppendStringsToList_input, meta?: ComfyNodeMetadata): AppendStringsToList
    /* category:KJNodes_constants, name:"JoinStrings", output:STRING */
    JoinStrings(p: JoinStrings_input, meta?: ComfyNodeMetadata): JoinStrings
    /* category:KJNodes, name:"JoinStringMulti", output:string */
    JoinStringMulti(p: JoinStringMulti_input, meta?: ComfyNodeMetadata): JoinStringMulti
    /* category:KJNodes_text, name:"SomethingToString", output:STRING */
    SomethingToString(p: SomethingToString_input, meta?: ComfyNodeMetadata): SomethingToString
    /* category:KJNodes_misc, name:"Sleep", output:$Star */
    Sleep(p: Sleep_input, meta?: ComfyNodeMetadata): Sleep
    /* category:KJNodes_misc, name:"VRAM_Debug", output:any_output+image_pass+model_pass+freemem_before+freemem_after */
    VRAM$_Debug(p: VRAM$_Debug_input, meta?: ComfyNodeMetadata): VRAM$_Debug
    /* category:KJNodes, name:"EmptyLatentImagePresets", output:Latent+Width+Height */
    EmptyLatentImagePresets(p: EmptyLatentImagePresets_input, meta?: ComfyNodeMetadata): EmptyLatentImagePresets
    /* category:KJNodes, name:"EmptyLatentImageCustomPresets", output:Latent+Width+Height */
    EmptyLatentImageCustomPresets(p: EmptyLatentImageCustomPresets_input, meta?: ComfyNodeMetadata): EmptyLatentImageCustomPresets
    /* category:KJNodes_misc, name:"ModelPassThrough", output:model */
    ModelPassThrough(p: ModelPassThrough_input, meta?: ComfyNodeMetadata): ModelPassThrough
    /* category:advanced_model_merging, name:"ModelSaveKJ", output: */
    ModelSaveKJ(p: ModelSaveKJ_input, meta?: ComfyNodeMetadata): ModelSaveKJ
    /* category:conditioning_controlnet, name:"SetShakkerLabsUnionControlNetType", output:CONTROL_NET */
    SetShakkerLabsUnionControlNetType(p: SetShakkerLabsUnionControlNetType_input, meta?: ComfyNodeMetadata): SetShakkerLabsUnionControlNetType
    /* category:KJNodes_audio, name:"NormalizedAmplitudeToMask", output:MASK */
    NormalizedAmplitudeToMask(p: NormalizedAmplitudeToMask_input, meta?: ComfyNodeMetadata): NormalizedAmplitudeToMask
    /* category:KJNodes_audio, name:"NormalizedAmplitudeToFloatList", output:FLOAT */
    NormalizedAmplitudeToFloatList(p: NormalizedAmplitudeToFloatList_input, meta?: ComfyNodeMetadata): NormalizedAmplitudeToFloatList
    /* category:KJNodes_audio, name:"OffsetMaskByNormalizedAmplitude", output:mask */
    OffsetMaskByNormalizedAmplitude(p: OffsetMaskByNormalizedAmplitude_input, meta?: ComfyNodeMetadata): OffsetMaskByNormalizedAmplitude
    /* category:KJNodes_audio, name:"ImageTransformByNormalizedAmplitude", output:IMAGE */
    ImageTransformByNormalizedAmplitude(p: ImageTransformByNormalizedAmplitude_input, meta?: ComfyNodeMetadata): ImageTransformByNormalizedAmplitude
    /* category:KJNodes_weights, name:"SplineEditor", output:mask+coord_str+float+count+normalized_str */
    SplineEditor(p: SplineEditor_input, meta?: ComfyNodeMetadata): SplineEditor
    /* category:KJNodes_image, name:"CreateShapeImageOnPath", output:image+mask */
    CreateShapeImageOnPath(p: CreateShapeImageOnPath_input, meta?: ComfyNodeMetadata): CreateShapeImageOnPath
    /* category:KJNodes_masking_generate, name:"CreateShapeMaskOnPath", output:mask+mask_inverted */
    CreateShapeMaskOnPath(p: CreateShapeMaskOnPath_input, meta?: ComfyNodeMetadata): CreateShapeMaskOnPath
    /* category:KJNodes_masking_generate, name:"CreateTextOnPath", output:image+mask+mask_inverted */
    CreateTextOnPath(p: CreateTextOnPath_input, meta?: ComfyNodeMetadata): CreateTextOnPath
    /* category:KJNodes_image, name:"CreateGradientFromCoords", output:image */
    CreateGradientFromCoords(p: CreateGradientFromCoords_input, meta?: ComfyNodeMetadata): CreateGradientFromCoords
    /* category:KJNodes_image, name:"GradientToFloat", output:float_x+float_y */
    GradientToFloat(p: GradientToFloat_input, meta?: ComfyNodeMetadata): GradientToFloat
    /* category:KJNodes_weights, name:"WeightScheduleExtend", output:FLOAT */
    WeightScheduleExtend(p: WeightScheduleExtend_input, meta?: ComfyNodeMetadata): WeightScheduleExtend
    /* category:KJNodes_weights, name:"MaskOrImageToWeight", output:FLOAT+STRING */
    MaskOrImageToWeight(p: MaskOrImageToWeight_input, meta?: ComfyNodeMetadata): MaskOrImageToWeight
    /* category:KJNodes_weights, name:"WeightScheduleConvert", output:FLOAT+STRING+INT */
    WeightScheduleConvert(p: WeightScheduleConvert_input, meta?: ComfyNodeMetadata): WeightScheduleConvert
    /* category:KJNodes_masking_generate, name:"FloatToMask", output:MASK */
    FloatToMask(p: FloatToMask_input, meta?: ComfyNodeMetadata): FloatToMask
    /* category:KJNodes_noise, name:"FloatToSigmas", output:SIGMAS */
    FloatToSigmas(p: FloatToSigmas_input, meta?: ComfyNodeMetadata): FloatToSigmas
    /* category:KJNodes_experimental, name:"PlotCoordinates", output:images+width+height+bbox_width+bbox_height */
    PlotCoordinates(p: PlotCoordinates_input, meta?: ComfyNodeMetadata): PlotCoordinates
    /* category:KJNodes_experimental, name:"InterpolateCoords", output:coordinates */
    InterpolateCoords(p: InterpolateCoords_input, meta?: ComfyNodeMetadata): InterpolateCoords
    /* category:KJNodes_experimental, name:"PointsEditor", output:positive_coords+negative_coords+bbox+bbox_mask+cropped_image */
    PointsEditor(p: PointsEditor_input, meta?: ComfyNodeMetadata): PointsEditor
    /* category:KJNodes_experimental, name:"StabilityAPI_SD3", output:IMAGE */
    StabilityAPI$_SD3(p: StabilityAPI$_SD3_input, meta?: ComfyNodeMetadata): StabilityAPI$_SD3
    /* category:KJNodes_audio, name:"SoundReactive", output:sound_level+sound_level_int */
    SoundReactive(p: SoundReactive_input, meta?: ComfyNodeMetadata): SoundReactive
    /* category:KJNodes_experimental, name:"StableZero123_BatchSchedule", output:positive+negative+latent */
    StableZero123$_BatchSchedule(p: StableZero123$_BatchSchedule_input, meta?: ComfyNodeMetadata): StableZero123$_BatchSchedule
    /* category:KJNodes_experimental, name:"SV3D_BatchSchedule", output:positive+negative+latent */
    SV3D$_BatchSchedule(p: SV3D$_BatchSchedule_input, meta?: ComfyNodeMetadata): SV3D$_BatchSchedule
    /* category:KJNodes_experimental, name:"LoadResAdapterNormalization", output:MODEL */
    LoadResAdapterNormalization(p: LoadResAdapterNormalization_input, meta?: ComfyNodeMetadata): LoadResAdapterNormalization
    /* category:KJNodes_text, name:"Superprompt", output:STRING */
    Superprompt(p: Superprompt_input, meta?: ComfyNodeMetadata): Superprompt
    /* category:KJNodes_experimental, name:"GLIGENTextBoxApplyBatchCoords", output:conditioning+coord_preview */
    GLIGENTextBoxApplyBatchCoords(p: GLIGENTextBoxApplyBatchCoords_input, meta?: ComfyNodeMetadata): GLIGENTextBoxApplyBatchCoords
    /* category:KJNodes, name:"Intrinsic_lora_sampling", output:IMAGE+LATENT */
    Intrinsic$_lora$_sampling(p: Intrinsic$_lora$_sampling_input, meta?: ComfyNodeMetadata): Intrinsic$_lora$_sampling
    /* category:KJNodes_experimental, name:"CheckpointPerturbWeights", output:MODEL */
    CheckpointPerturbWeights(p: CheckpointPerturbWeights_input, meta?: ComfyNodeMetadata): CheckpointPerturbWeights
    /* category:KJNodes_experimental, name:"Screencap_mss", output:image */
    Screencap$_mss(p: Screencap$_mss_input, meta?: ComfyNodeMetadata): Screencap$_mss
    /* category:KJNodes_experimental, name:"WebcamCaptureCV2", output:image */
    WebcamCaptureCV2(p: WebcamCaptureCV2_input, meta?: ComfyNodeMetadata): WebcamCaptureCV2
    /* category:_for_testing, name:"DifferentialDiffusionAdvanced", output:MODEL+LATENT */
    DifferentialDiffusionAdvanced(p: DifferentialDiffusionAdvanced_input, meta?: ComfyNodeMetadata): DifferentialDiffusionAdvanced
    /* category:KJNodes_experimental, name:"FluxBlockLoraLoader", output:model+rank */
    FluxBlockLoraLoader(p: FluxBlockLoraLoader_input, meta?: ComfyNodeMetadata): FluxBlockLoraLoader
    /* category:KJNodes_experimental, name:"FluxBlockLoraSelect", output:blocks */
    FluxBlockLoraSelect(p: FluxBlockLoraSelect_input, meta?: ComfyNodeMetadata): FluxBlockLoraSelect
    /* category:KJNodes_controlnet, name:"CustomControlNetWeightsFluxFromList", output:CN_WEIGHTS+TK_SHORTCUT */
    CustomControlNetWeightsFluxFromList(p: CustomControlNetWeightsFluxFromList_input, meta?: ComfyNodeMetadata): CustomControlNetWeightsFluxFromList
    /* category:KJNodes_experimental, name:"CheckpointLoaderKJ", output:MODEL+CLIP+VAE */
    CheckpointLoaderKJ(p: CheckpointLoaderKJ_input, meta?: ComfyNodeMetadata): CheckpointLoaderKJ
    /* category:KJNodes_experimental, name:"TorchCompileModelFluxAdvanced", output:MODEL */
    TorchCompileModelFluxAdvanced(p: TorchCompileModelFluxAdvanced_input, meta?: ComfyNodeMetadata): TorchCompileModelFluxAdvanced
    /* category:KJNodes_experimental, name:"TorchCompileVAE", output:VAE */
    TorchCompileVAE(p: TorchCompileVAE_input, meta?: ComfyNodeMetadata): TorchCompileVAE
    /* category:KJNodes_experimental, name:"TorchCompileControlNet", output:CONTROL_NET */
    TorchCompileControlNet(p: TorchCompileControlNet_input, meta?: ComfyNodeMetadata): TorchCompileControlNet
    /* category:KJNodes_InstanceDiffusion, name:"CreateInstanceDiffusionTracking", output:tracking+prompt+width+height+bbox_width+bbox_height */
    CreateInstanceDiffusionTracking(p: CreateInstanceDiffusionTracking_input, meta?: ComfyNodeMetadata): CreateInstanceDiffusionTracking
    /* category:KJNodes_InstanceDiffusion, name:"AppendInstanceDiffusionTracking", output:tracking+prompt */
    AppendInstanceDiffusionTracking(p: AppendInstanceDiffusionTracking_input, meta?: ComfyNodeMetadata): AppendInstanceDiffusionTracking
    /* category:KJNodes_InstanceDiffusion, name:"DrawInstanceDiffusionTracking", output:image */
    DrawInstanceDiffusionTracking(p: DrawInstanceDiffusionTracking_input, meta?: ComfyNodeMetadata): DrawInstanceDiffusionTracking
    /* category:Logic, name:"Compare-🔬", output:BOOLEAN */
    Compare$7$$D83D$$DD2C(p: Compare$7$$D83D$$DD2C_input, meta?: ComfyNodeMetadata): Compare$7$$D83D$$DD2C
    /* category:Logic, name:"Int-🔬", output:INT */
    Int$7$$D83D$$DD2C(p: Int$7$$D83D$$DD2C_input, meta?: ComfyNodeMetadata): Int$7$$D83D$$DD2C
    /* category:Logic, name:"Float-🔬", output:FLOAT */
    Float$7$$D83D$$DD2C(p: Float$7$$D83D$$DD2C_input, meta?: ComfyNodeMetadata): Float$7$$D83D$$DD2C
    /* category:Logic, name:"Bool-🔬", output:BOOLEAN */
    Bool$7$$D83D$$DD2C(p: Bool$7$$D83D$$DD2C_input, meta?: ComfyNodeMetadata): Bool$7$$D83D$$DD2C
    /* category:Logic, name:"String-🔬", output:STRING */
    String$7$$D83D$$DD2C(p: String$7$$D83D$$DD2C_input, meta?: ComfyNodeMetadata): String$7$$D83D$$DD2C
    /* category:Logic, name:"If ANY return A else B-🔬", output:$$3F */
    If_ANY_return_A_else_B$7$$D83D$$DD2C(p: If_ANY_return_A_else_B$7$$D83D$$DD2C_input, meta?: ComfyNodeMetadata): If_ANY_return_A_else_B$7$$D83D$$DD2C
    /* category:Logic, name:"DebugPrint-🔬", output: */
    DebugPrint$7$$D83D$$DD2C(p: DebugPrint$7$$D83D$$DD2C_input, meta?: ComfyNodeMetadata): DebugPrint$7$$D83D$$DD2C
    /* category:Marigold, name:"MarigoldModelLoader", output:marigold_model */
    MarigoldModelLoader(p: MarigoldModelLoader_input, meta?: ComfyNodeMetadata): MarigoldModelLoader
    /* category:Marigold, name:"MarigoldDepthEstimation_v2", output:image */
    MarigoldDepthEstimation$_v2(p: MarigoldDepthEstimation$_v2_input, meta?: ComfyNodeMetadata): MarigoldDepthEstimation$_v2
    /* category:Marigold, name:"MarigoldDepthEstimation_v2_video", output:image */
    MarigoldDepthEstimation$_v2$_video(p: MarigoldDepthEstimation$_v2$_video_input, meta?: ComfyNodeMetadata): MarigoldDepthEstimation$_v2$_video
    /* category:Marigold, name:"MarigoldDepthEstimation", output:ensembled_image */
    MarigoldDepthEstimation(p: MarigoldDepthEstimation_input, meta?: ComfyNodeMetadata): MarigoldDepthEstimation
    /* category:Marigold, name:"MarigoldDepthEstimationVideo", output:ensembled_image */
    MarigoldDepthEstimationVideo(p: MarigoldDepthEstimationVideo_input, meta?: ComfyNodeMetadata): MarigoldDepthEstimationVideo
    /* category:Marigold, name:"ColorizeDepthmap", output:image */
    ColorizeDepthmap(p: ColorizeDepthmap_input, meta?: ComfyNodeMetadata): ColorizeDepthmap
    /* category:Marigold, name:"SaveImageOpenEXR", output:file_url */
    SaveImageOpenEXR(p: SaveImageOpenEXR_input, meta?: ComfyNodeMetadata): SaveImageOpenEXR
    /* category:Marigold, name:"RemapDepth", output:IMAGE */
    RemapDepth(p: RemapDepth_input, meta?: ComfyNodeMetadata): RemapDepth
    /* category:♾️Mixlab, name:"AppInfo", output: */
    AppInfo(p: AppInfo_input, meta?: ComfyNodeMetadata): AppInfo
    /* category:♾️Mixlab_Test, name:"TESTNODE_", output:$Star */
    TESTNODE$_(p: TESTNODE$__input, meta?: ComfyNodeMetadata): TESTNODE$_
    /* category:♾️Mixlab_Test, name:"TESTNODE_TOKEN", output:STRING */
    TESTNODE$_TOKEN(p: TESTNODE$_TOKEN_input, meta?: ComfyNodeMetadata): TESTNODE$_TOKEN
    /* category:♾️Mixlab_Prompt, name:"RandomPrompt", output:STRING */
    RandomPrompt(p: RandomPrompt_input, meta?: ComfyNodeMetadata): RandomPrompt
    /* category:♾️Mixlab_Prompt, name:"EmbeddingPrompt", output:STRING */
    EmbeddingPrompt(p: EmbeddingPrompt_input, meta?: ComfyNodeMetadata): EmbeddingPrompt
    /* category:♾️Mixlab_Prompt, name:"PromptSlide", output:prompt */
    PromptSlide(p: PromptSlide_input, meta?: ComfyNodeMetadata): PromptSlide
    /* category:♾️Mixlab_Prompt, name:"GLIGENTextBoxApply_Advanced", output:CONDITIONING+label */
    GLIGENTextBoxApply$_Advanced(p: GLIGENTextBoxApply$_Advanced_input, meta?: ComfyNodeMetadata): GLIGENTextBoxApply$_Advanced
    /* category:♾️Mixlab_Prompt, name:"PromptSimplification", output:prompts */
    PromptSimplification(p: PromptSimplification_input, meta?: ComfyNodeMetadata): PromptSimplification
    /* category:♾️Mixlab_Input, name:"GridInput", output:grids+labels+image */
    GridInput(p: GridInput_input, meta?: ComfyNodeMetadata): GridInput
    /* category:♾️Mixlab_Input, name:"ImagesPrompt_", output:image+text */
    ImagesPrompt$_(p: ImagesPrompt$__input, meta?: ComfyNodeMetadata): ImagesPrompt$_
    /* category:♾️Mixlab_Input, name:"KeyInput", output:key */
    KeyInput(p: KeyInput_input, meta?: ComfyNodeMetadata): KeyInput
    /* category:♾️Mixlab_Input, name:"FloatSlider", output:FLOAT */
    FloatSlider(p: FloatSlider_input, meta?: ComfyNodeMetadata): FloatSlider
    /* category:♾️Mixlab_Input, name:"IntNumber", output:INT */
    IntNumber(p: IntNumber_input, meta?: ComfyNodeMetadata): IntNumber
    /* category:♾️Mixlab_Input, name:"TextInput_", output:STRING */
    TextInput$_(p: TextInput$__input, meta?: ComfyNodeMetadata): TextInput$_
    /* category:♾️Mixlab_Input, name:"Font", output:STRING */
    Font(p: Font_input, meta?: ComfyNodeMetadata): Font
    /* category:♾️Mixlab_Input, name:"LimitNumber", output:number */
    LimitNumber(p: LimitNumber_input, meta?: ComfyNodeMetadata): LimitNumber
    /* category:♾️Mixlab_Output, name:"PromptImage", output:json_str */
    PromptImage(p: PromptImage_input, meta?: ComfyNodeMetadata): PromptImage
    /* category:♾️Mixlab_Output, name:"SaveImageToLocal", output: */
    SaveImageToLocal(p: SaveImageToLocal_input, meta?: ComfyNodeMetadata): SaveImageToLocal
    /* category:♾️Mixlab_Output, name:"SaveImageAndMetadata_", output: */
    SaveImageAndMetadata$_(p: SaveImageAndMetadata$__input, meta?: ComfyNodeMetadata): SaveImageAndMetadata$_
    /* category:♾️Mixlab_Output, name:"ComparingTwoFrames_", output: */
    ComparingTwoFrames$_(p: ComparingTwoFrames$__input, meta?: ComfyNodeMetadata): ComparingTwoFrames$_
    /* category:♾️Mixlab_Output, name:"CreateJsonNode", output:json_str */
    CreateJsonNode(p: CreateJsonNode_input, meta?: ComfyNodeMetadata): CreateJsonNode
    /* category:♾️Mixlab_Image, name:"MirroredImage", output:IMAGE */
    MirroredImage(p: MirroredImage_input, meta?: ComfyNodeMetadata): MirroredImage
    /* category:♾️Mixlab_Image, name:"NoiseImage", output:IMAGE */
    NoiseImage(p: NoiseImage_input, meta?: ComfyNodeMetadata): NoiseImage
    /* category:♾️Mixlab_Image, name:"GradientImage", output:IMAGE+MASK */
    GradientImage(p: GradientImage_input, meta?: ComfyNodeMetadata): GradientImage
    /* category:♾️Mixlab_Image, name:"TransparentImage", output:file_path+IMAGE+RGBA */
    TransparentImage(p: TransparentImage_input, meta?: ComfyNodeMetadata): TransparentImage
    /* category:♾️Mixlab_Image, name:"ResizeImageMixlab", output:image$_list+average_image+average_hex+mask */
    ResizeImageMixlab(p: ResizeImageMixlab_input, meta?: ComfyNodeMetadata): ResizeImageMixlab
    /* category:♾️Mixlab_Image, name:"LoadImagesFromPath", output:image$_list+MASK+prompt_for_FloatingVideo+filepaths */
    LoadImagesFromPath(p: LoadImagesFromPath_input, meta?: ComfyNodeMetadata): LoadImagesFromPath
    /* category:♾️Mixlab_Image, name:"LoadImagesFromURL", output:images+masks */
    LoadImagesFromURL(p: LoadImagesFromURL_input, meta?: ComfyNodeMetadata): LoadImagesFromURL
    /* category:♾️Mixlab_Image, name:"LoadImagesToBatch", output:IMAGE */
    LoadImagesToBatch(p: LoadImagesToBatch_input, meta?: ComfyNodeMetadata): LoadImagesToBatch
    /* category:♾️Mixlab_Image, name:"TextImage", output:image+mask */
    TextImage(p: TextImage_input, meta?: ComfyNodeMetadata): TextImage
    /* category:♾️Mixlab_Image, name:"EnhanceImage", output:IMAGE */
    EnhanceImage(p: EnhanceImage_input, meta?: ComfyNodeMetadata): EnhanceImage
    /* category:♾️Mixlab_Image, name:"SvgImage", output:IMAGE+layers */
    SvgImage(p: SvgImage_input, meta?: ComfyNodeMetadata): SvgImage
    /* category:♾️Mixlab_Image, name:"ImageListToBatch_", output:IMAGE */
    ImageListToBatch$_(p: ImageListToBatch$__input, meta?: ComfyNodeMetadata): ImageListToBatch$_
    /* category:♾️Mixlab_Image, name:"ImageBatchToList_", output:image_list */
    ImageBatchToList$_(p: ImageBatchToList$__input, meta?: ComfyNodeMetadata): ImageBatchToList$_
    /* category:♾️Mixlab_Image, name:"ImageCropByAlpha", output:IMAGE+MASK+AREA_MASK+x+y+width+height */
    ImageCropByAlpha(p: ImageCropByAlpha_input, meta?: ComfyNodeMetadata): ImageCropByAlpha
    /* category:♾️Mixlab_Image, name:"GetImageSize_", output:width+height+min_width+min_height */
    GetImageSize$_(p: GetImageSize$__input, meta?: ComfyNodeMetadata): GetImageSize$_
    /* category:♾️Mixlab_3D, name:"3DImage", output:IMAGE+MASK+BG_IMAGE+MATERIAL */
    _3DImage(p: _3DImage_input, meta?: ComfyNodeMetadata): _3DImage
    /* category:♾️Mixlab_3D, name:"DepthViewer", output:frames */
    DepthViewer(p: DepthViewer_input, meta?: ComfyNodeMetadata): DepthViewer
    /* category:♾️Mixlab_Color, name:"ImageColorTransfer", output:IMAGE */
    ImageColorTransfer(p: ImageColorTransfer_input, meta?: ComfyNodeMetadata): ImageColorTransfer
    /* category:♾️Mixlab_Color, name:"Color", output:hex+r+g+b+a */
    Color(p: Color_input, meta?: ComfyNodeMetadata): Color
    /* category:♾️Mixlab_Layer, name:"ShowLayer", output: */
    ShowLayer(p: ShowLayer_input, meta?: ComfyNodeMetadata): ShowLayer
    /* category:♾️Mixlab_Layer, name:"NewLayer", output:layers */
    NewLayer(p: NewLayer_input, meta?: ComfyNodeMetadata): NewLayer
    /* category:♾️Mixlab_Layer, name:"MergeLayers", output:IMAGE+MASK */
    MergeLayers(p: MergeLayers_input, meta?: ComfyNodeMetadata): MergeLayers
    /* category:♾️Mixlab_Layer, name:"CompositeImages_", output:IMAGE */
    CompositeImages$_(p: CompositeImages$__input, meta?: ComfyNodeMetadata): CompositeImages$_
    /* category:♾️Mixlab_Layer, name:"SplitImage", output:grids+grid+mask */
    SplitImage(p: SplitImage_input, meta?: ComfyNodeMetadata): SplitImage
    /* category:♾️Mixlab_Layer, name:"CenterImage", output:grid+mask */
    CenterImage(p: CenterImage_input, meta?: ComfyNodeMetadata): CenterImage
    /* category:♾️Mixlab_Layer, name:"GridOutput", output:x+y+width+height+mask */
    GridOutput(p: GridOutput_input, meta?: ComfyNodeMetadata): GridOutput
    /* category:♾️Mixlab_Layer, name:"GridDisplayAndSave", output: */
    GridDisplayAndSave(p: GridDisplayAndSave_input, meta?: ComfyNodeMetadata): GridDisplayAndSave
    /* category:♾️Mixlab_Mask, name:"SplitLongMask", output:MASK */
    SplitLongMask(p: SplitLongMask_input, meta?: ComfyNodeMetadata): SplitLongMask
    /* category:♾️Mixlab_Mask, name:"FeatheredMask", output:MASK */
    FeatheredMask(p: FeatheredMask_input, meta?: ComfyNodeMetadata): FeatheredMask
    /* category:♾️Mixlab_Mask, name:"SmoothMask", output:MASK */
    SmoothMask(p: SmoothMask_input, meta?: ComfyNodeMetadata): SmoothMask
    /* category:♾️Mixlab_Mask, name:"FaceToMask", output:MASK */
    FaceToMask(p: FaceToMask_input, meta?: ComfyNodeMetadata): FaceToMask
    /* category:♾️Mixlab_Mask, name:"AreaToMask", output:MASK */
    AreaToMask(p: AreaToMask_input, meta?: ComfyNodeMetadata): AreaToMask
    /* category:♾️Mixlab_Mask, name:"OutlineMask", output:MASK */
    OutlineMask(p: OutlineMask_input, meta?: ComfyNodeMetadata): OutlineMask
    /* category:♾️Mixlab_Mask, name:"MaskListMerge_", output:MASK */
    MaskListMerge$_(p: MaskListMerge$__input, meta?: ComfyNodeMetadata): MaskListMerge$_
    /* category:♾️Mixlab_Mask, name:"PreviewMask_", output: */
    PreviewMask$_(p: PreviewMask$__input, meta?: ComfyNodeMetadata): PreviewMask$_
    /* category:♾️Mixlab_Screen, name:"ScreenShare", output:current$_frame$_$1image$2+prompt+denoise$_$1float$2+seed$_$1int$2 */
    ScreenShare(p: ScreenShare_input, meta?: ComfyNodeMetadata): ScreenShare
    /* category:♾️Mixlab_Screen, name:"FloatingVideo", output: */
    FloatingVideo(p: FloatingVideo_input, meta?: ComfyNodeMetadata): FloatingVideo
    /* category:♾️Mixlab_Audio, name:"SpeechRecognition", output:prompt */
    SpeechRecognition(p: SpeechRecognition_input, meta?: ComfyNodeMetadata): SpeechRecognition
    /* category:♾️Mixlab_Audio, name:"SpeechSynthesis", output:STRING */
    SpeechSynthesis(p: SpeechSynthesis_input, meta?: ComfyNodeMetadata): SpeechSynthesis
    /* category:♾️Mixlab_Audio, name:"AudioPlay", output: */
    AudioPlay(p: AudioPlay_input, meta?: ComfyNodeMetadata): AudioPlay
    /* category:♾️Mixlab_Audio, name:"AnalyzeAudio", output:result */
    AnalyzeAudio(p: AnalyzeAudio_input, meta?: ComfyNodeMetadata): AnalyzeAudio
    /* category:♾️Mixlab_Text, name:"TextToNumber", output:INT */
    TextToNumber(p: TextToNumber_input, meta?: ComfyNodeMetadata): TextToNumber
    /* category:♾️Mixlab_Text, name:"JoinWithDelimiter", output:STRING */
    JoinWithDelimiter(p: JoinWithDelimiter_input, meta?: ComfyNodeMetadata): JoinWithDelimiter
    /* category:♾️Mixlab_Utils, name:"MultiplicationNode", output:FLOAT+INT */
    MultiplicationNode(p: MultiplicationNode_input, meta?: ComfyNodeMetadata): MultiplicationNode
    /* category:♾️Mixlab_Utils, name:"DynamicDelayProcessor", output:output */
    DynamicDelayProcessor(p: DynamicDelayProcessor_input, meta?: ComfyNodeMetadata): DynamicDelayProcessor
    /* category:♾️Mixlab_Utils, name:"SwitchByIndex", output:list+count */
    SwitchByIndex(p: SwitchByIndex_input, meta?: ComfyNodeMetadata): SwitchByIndex
    /* category:♾️Mixlab_Utils, name:"ListSplit_", output:B */
    ListSplit$_(p: ListSplit$__input, meta?: ComfyNodeMetadata): ListSplit$_
    /* category:♾️Mixlab_Experiment, name:"Seed_", output:seed */
    Seed$_(p: Seed$__input, meta?: ComfyNodeMetadata): Seed$_
    /* category:♾️Mixlab_Experiment, name:"CkptNames_", output:ckpt_names */
    CkptNames$_(p: CkptNames$__input, meta?: ComfyNodeMetadata): CkptNames$_
    /* category:♾️Mixlab_Experiment, name:"SamplerNames_", output:sampler_names */
    SamplerNames$_(p: SamplerNames$__input, meta?: ComfyNodeMetadata): SamplerNames$_
    /* category:♾️Mixlab_Experiment, name:"LoraNames_", output:lora_names+prompt */
    LoraNames$_(p: LoraNames$__input, meta?: ComfyNodeMetadata): LoraNames$_
    /* category:♾️Mixlab_Style, name:"ApplyVisualStylePrompting_", output:model+positive+negative+latents */
    ApplyVisualStylePrompting$_(p: ApplyVisualStylePrompting$__input, meta?: ComfyNodeMetadata): ApplyVisualStylePrompting$_
    /* category:♾️Mixlab_Style, name:"StyleAlignedReferenceSampler_", output:output+denoised_output */
    StyleAlignedReferenceSampler$_(p: StyleAlignedReferenceSampler$__input, meta?: ComfyNodeMetadata): StyleAlignedReferenceSampler$_
    /* category:♾️Mixlab_Style, name:"StyleAlignedSampleReferenceLatents_", output:ref_latents+noised_output */
    StyleAlignedSampleReferenceLatents$_(p: StyleAlignedSampleReferenceLatents$__input, meta?: ComfyNodeMetadata): StyleAlignedSampleReferenceLatents$_
    /* category:♾️Mixlab_Style, name:"StyleAlignedBatchAlign_", output:MODEL */
    StyleAlignedBatchAlign$_(p: StyleAlignedBatchAlign$__input, meta?: ComfyNodeMetadata): StyleAlignedBatchAlign$_
    /* category:♾️Mixlab_Video, name:"MaskListReplace_", output:MASK */
    MaskListReplace$_(p: MaskListReplace$__input, meta?: ComfyNodeMetadata): MaskListReplace$_
    /* category:♾️Mixlab_Video, name:"IncrementingListNode_", output:int_list+float_list */
    IncrementingListNode$_(p: IncrementingListNode$__input, meta?: ComfyNodeMetadata): IncrementingListNode$_
    /* category:♾️Mixlab_Input, name:"P5Input", output:frames */
    P5Input(p: P5Input_input, meta?: ComfyNodeMetadata): P5Input
    /* category:♾️Mixlab_GPT, name:"ChatGPTOpenAI", output:text+messages+session_history */
    ChatGPTOpenAI(p: ChatGPTOpenAI_input, meta?: ComfyNodeMetadata): ChatGPTOpenAI
    /* category:♾️Mixlab_GPT, name:"SiliconflowLLM", output:text+messages+session_history */
    SiliconflowLLM(p: SiliconflowLLM_input, meta?: ComfyNodeMetadata): SiliconflowLLM
    /* category:♾️Mixlab_Image, name:"SiliconflowTextToImageNode", output:image */
    SiliconflowTextToImageNode(p: SiliconflowTextToImageNode_input, meta?: ComfyNodeMetadata): SiliconflowTextToImageNode
    /* category:♾️Mixlab_Text, name:"ShowTextForGPT", output:STRING */
    ShowTextForGPT(p: ShowTextForGPT_input, meta?: ComfyNodeMetadata): ShowTextForGPT
    /* category:♾️Mixlab_Text, name:"CharacterInText", output:INT */
    CharacterInText(p: CharacterInText_input, meta?: ComfyNodeMetadata): CharacterInText
    /* category:♾️Mixlab_Text, name:"TextSplitByDelimiter", output:STRING */
    TextSplitByDelimiter(p: TextSplitByDelimiter_input, meta?: ComfyNodeMetadata): TextSplitByDelimiter
    /* category:♾️Mixlab_GPT, name:"JsonRepair", output:json_string+value */
    JsonRepair(p: JsonRepair_input, meta?: ComfyNodeMetadata): JsonRepair
    /* category:♾️Mixlab_GPT, name:"SimulateDevDesignDiscussions", output:text */
    SimulateDevDesignDiscussions(p: SimulateDevDesignDiscussions_input, meta?: ComfyNodeMetadata): SimulateDevDesignDiscussions
    /* category:♾️Mixlab_Mask, name:"EditMask", output:image+mask */
    EditMask(p: EditMask_input, meta?: ComfyNodeMetadata): EditMask
    /* category:♾️Mixlab_Image, name:"LaMaInpainting", output:IMAGE */
    LaMaInpainting(p: LaMaInpainting_input, meta?: ComfyNodeMetadata): LaMaInpainting
    /* category:♾️Mixlab_Prompt, name:"ClipInterrogator", output:prompt+random_samples */
    ClipInterrogator(p: ClipInterrogator_input, meta?: ComfyNodeMetadata): ClipInterrogator
    /* category:♾️Mixlab_Prompt, name:"PromptGenerate_Mix", output:prompt */
    PromptGenerate$_Mix(p: PromptGenerate$_Mix_input, meta?: ComfyNodeMetadata): PromptGenerate$_Mix
    /* category:♾️Mixlab_Prompt, name:"ChinesePrompt_Mix", output:prompt */
    ChinesePrompt$_Mix(p: ChinesePrompt$_Mix_input, meta?: ComfyNodeMetadata): ChinesePrompt$_Mix
    /* category:♾️Mixlab_Mask, name:"RembgNode_Mix", output:masks+images+RGBAs */
    RembgNode$_Mix(p: RembgNode$_Mix_input, meta?: ComfyNodeMetadata): RembgNode$_Mix
    /* category:♾️Mixlab_Video, name:"VAEEncodeForInpaint_Frames", output:LATENT */
    VAEEncodeForInpaint$_Frames(p: VAEEncodeForInpaint$_Frames_input, meta?: ComfyNodeMetadata): VAEEncodeForInpaint$_Frames
    /* category:♾️Mixlab_Video, name:"ImageListReplace_", output:images+select_images */
    ImageListReplace$_(p: ImageListReplace$__input, meta?: ComfyNodeMetadata): ImageListReplace$_
    /* category:♾️Mixlab_Video, name:"LoadVideoAndSegment_", output:scenes_video+scenes_count+frame_count+fps */
    LoadVideoAndSegment$_(p: LoadVideoAndSegment$__input, meta?: ComfyNodeMetadata): LoadVideoAndSegment$_
    /* category:♾️Mixlab_Video, name:"VideoCombine_Adv", output:scenes_video */
    VideoCombine$_Adv(p: VideoCombine$_Adv_input, meta?: ComfyNodeMetadata): VideoCombine$_Adv
    /* category:♾️Mixlab_Audio, name:"LoadAndCombinedAudio_", output:audio_file_path+audio */
    LoadAndCombinedAudio$_(p: LoadAndCombinedAudio$__input, meta?: ComfyNodeMetadata): LoadAndCombinedAudio$_
    /* category:♾️Mixlab_Video, name:"CombineAudioVideo", output:SCENE_VIDEO */
    CombineAudioVideo(p: CombineAudioVideo_input, meta?: ComfyNodeMetadata): CombineAudioVideo
    /* category:♾️Mixlab_Video, name:"ScenesNode_", output:video$_frames$_$1batch$2+count */
    ScenesNode$_(p: ScenesNode$__input, meta?: ComfyNodeMetadata): ScenesNode$_
    /* category:♾️Mixlab_Video, name:"GenerateFramesByCount", output:frames */
    GenerateFramesByCount(p: GenerateFramesByCount_input, meta?: ComfyNodeMetadata): GenerateFramesByCount
    /* category:♾️Mixlab_3D_TripoSR, name:"LoadTripoSRModel_", output:TRIPOSR_MODEL */
    LoadTripoSRModel$_(p: LoadTripoSRModel$__input, meta?: ComfyNodeMetadata): LoadTripoSRModel$_
    /* category:♾️Mixlab_3D_TripoSR, name:"TripoSRSampler_", output:MESH */
    TripoSRSampler$_(p: TripoSRSampler$__input, meta?: ComfyNodeMetadata): TripoSRSampler$_
    /* category:♾️Mixlab_3D_TripoSR, name:"SaveTripoSRMesh", output: */
    SaveTripoSRMesh(p: SaveTripoSRMesh_input, meta?: ComfyNodeMetadata): SaveTripoSRMesh
    /* category:♾️Mixlab_Image, name:"MiniCPM_VQA_Simple", output:result+keywords */
    MiniCPM$_VQA$_Simple(p: MiniCPM$_VQA$_Simple_input, meta?: ComfyNodeMetadata): MiniCPM$_VQA$_Simple
    /* category:♾️Mixlab_Video, name:"ScenedetectNode_", output:scenes_video+scenes+scene_len+total_frames */
    ScenedetectNode$_(p: ScenedetectNode$__input, meta?: ComfyNodeMetadata): ScenedetectNode$_
    /* category:♾️Mixlab_Video, name:"SceneInfoNode", output:sample_frames+middle_frames+start_frame+end_frame+scene_video */
    SceneInfoNode(p: SceneInfoNode_input, meta?: ComfyNodeMetadata): SceneInfoNode
    /* category:♾️Mixlab_Audio, name:"SenseVoiceNode", output:result+srt+text+total_seconds */
    SenseVoiceNode(p: SenseVoiceNode_input, meta?: ComfyNodeMetadata): SenseVoiceNode
    /* category:♾️Mixlab_Video, name:"VideoGenKlingNode", output:STRING */
    VideoGenKlingNode(p: VideoGenKlingNode_input, meta?: ComfyNodeMetadata): VideoGenKlingNode
    /* category:♾️Mixlab_Video, name:"VideoGenRunwayGen3Node", output:STRING */
    VideoGenRunwayGen3Node(p: VideoGenRunwayGen3Node_input, meta?: ComfyNodeMetadata): VideoGenRunwayGen3Node
    /* category:♾️Mixlab_Video, name:"VideoGenLumaDreamMachineNode", output:STRING */
    VideoGenLumaDreamMachineNode(p: VideoGenLumaDreamMachineNode_input, meta?: ComfyNodeMetadata): VideoGenLumaDreamMachineNode
    /* category:♾️Mixlab_Video, name:"LoadVideoFromURL", output:frames+frame_count+video_info */
    LoadVideoFromURL(p: LoadVideoFromURL_input, meta?: ComfyNodeMetadata): LoadVideoFromURL
    /* category:O_OpenAI, name:"ChatGPT Simple _O", output:STRING */
    ChatGPT_Simple_$_O(p: ChatGPT_Simple_$_O_input, meta?: ComfyNodeMetadata): ChatGPT_Simple_$_O
    /* category:O_OpenAI, name:"ChatGPT compact _O", output:STRING */
    ChatGPT_compact_$_O(p: ChatGPT_compact_$_O_input, meta?: ComfyNodeMetadata): ChatGPT_compact_$_O
    /* category:O_OpenAI_Advanced, name:"load_openAI _O", output:CLIENT */
    load$_openAI_$_O(p: load$_openAI_$_O_input, meta?: ComfyNodeMetadata): load$_openAI_$_O
    /* category:O_OpenAI_Advanced_ChatGPT, name:"Chat_Message _O", output:OPENAI_CHAT_MESSAGES */
    Chat$_Message_$_O(p: Chat$_Message_$_O_input, meta?: ComfyNodeMetadata): Chat$_Message_$_O
    /* category:O_OpenAI_Advanced_ChatGPT, name:"combine_chat_messages _O", output:OPENAI_CHAT_MESSAGES */
    combine$_chat$_messages_$_O(p: combine$_chat$_messages_$_O_input, meta?: ComfyNodeMetadata): combine$_chat$_messages_$_O
    /* category:O_OpenAI_Advanced_ChatGPT, name:"Chat completion _O", output:STRING+OPENAI_CHAT_COMPLETION */
    Chat_completion_$_O(p: Chat_completion_$_O_input, meta?: ComfyNodeMetadata): Chat_completion_$_O
    /* category:O_OpenAI_Advanced_Image, name:"create image _O", output:IMAGE+MASK */
    create_image_$_O(p: create_image_$_O_input, meta?: ComfyNodeMetadata): create_image_$_O
    /* category:O_OpenAI_Advanced_Image, name:"variation_image _O", output:IMAGE+MASK */
    variation$_image_$_O(p: variation$_image_$_O_input, meta?: ComfyNodeMetadata): variation$_image_$_O
    /* category:O_latent, name:"LatentUpscaleFactor _O", output:LATENT */
    LatentUpscaleFactor_$_O(p: LatentUpscaleFactor_$_O_input, meta?: ComfyNodeMetadata): LatentUpscaleFactor_$_O
    /* category:O_latent, name:"LatentUpscaleFactorSimple _O", output:LATENT */
    LatentUpscaleFactorSimple_$_O(p: LatentUpscaleFactorSimple_$_O_input, meta?: ComfyNodeMetadata): LatentUpscaleFactorSimple_$_O
    /* category:O_latent, name:"selectLatentFromBatch _O", output:LATENT */
    selectLatentFromBatch_$_O(p: selectLatentFromBatch_$_O_input, meta?: ComfyNodeMetadata): selectLatentFromBatch_$_O
    /* category:O_text_NSP, name:"RandomNSP _O", output:STRING */
    RandomNSP_$_O(p: RandomNSP_$_O_input, meta?: ComfyNodeMetadata): RandomNSP_$_O
    /* category:O_text_NSP, name:"ConcatRandomNSP_O", output:STRING */
    ConcatRandomNSP$_O(p: ConcatRandomNSP$_O_input, meta?: ComfyNodeMetadata): ConcatRandomNSP$_O
    /* category:O_text_operations, name:"Concat Text _O", output:STRING */
    Concat_Text_$_O(p: Concat_Text_$_O_input, meta?: ComfyNodeMetadata): Concat_Text_$_O
    /* category:O_text_operations, name:"QOL Split String", output:string_1+string_2+string_3+string_4+string_5+string_6+string_7+string_8+string_9+string_10+string_11+string_12+string_13 */
    QOL_Split_String(p: QOL_Split_String_input, meta?: ComfyNodeMetadata): QOL_Split_String
    /* category:O_text_operations, name:"Trim Text _O", output:STRING */
    Trim_Text_$_O(p: Trim_Text_$_O_input, meta?: ComfyNodeMetadata): Trim_Text_$_O
    /* category:O_text_operations, name:"Replace Text _O", output:STRING */
    Replace_Text_$_O(p: Replace_Text_$_O_input, meta?: ComfyNodeMetadata): Replace_Text_$_O
    /* category:O_text, name:"saveTextToFile _O", output: */
    saveTextToFile_$_O(p: saveTextToFile_$_O_input, meta?: ComfyNodeMetadata): saveTextToFile_$_O
    /* category:O_text, name:"Text2Image _O", output:IMAGE */
    Text2Image_$_O(p: Text2Image_$_O_input, meta?: ComfyNodeMetadata): Text2Image_$_O
    /* category:O_image, name:"ImageScaleFactor _O", output:IMAGE */
    ImageScaleFactor_$_O(p: ImageScaleFactor_$_O_input, meta?: ComfyNodeMetadata): ImageScaleFactor_$_O
    /* category:O_image, name:"ImageScaleFactorSimple _O", output:IMAGE */
    ImageScaleFactorSimple_$_O(p: ImageScaleFactorSimple_$_O_input, meta?: ComfyNodeMetadata): ImageScaleFactorSimple_$_O
    /* category:O_numbers, name:"Equation1param _O", output:FLOAT+int */
    Equation1param_$_O(p: Equation1param_$_O_input, meta?: ComfyNodeMetadata): Equation1param_$_O
    /* category:O_numbers, name:"Equation2params _O", output:FLOAT+INT+FLOAT_1+INT_1 */
    Equation2params_$_O(p: Equation2params_$_O_input, meta?: ComfyNodeMetadata): Equation2params_$_O
    /* category:O_numbers, name:"floatToInt _O", output:INT */
    floatToInt_$_O(p: floatToInt_$_O_input, meta?: ComfyNodeMetadata): floatToInt_$_O
    /* category:O_numbers, name:"intToFloat _O", output:FLOAT */
    intToFloat_$_O(p: intToFloat_$_O_input, meta?: ComfyNodeMetadata): intToFloat_$_O
    /* category:O_numbers, name:"floatToText _O", output:STRING */
    floatToText_$_O(p: floatToText_$_O_input, meta?: ComfyNodeMetadata): floatToText_$_O
    /* category:O_numbers, name:"GetImage_(Width&Height) _O", output:INT+INT_1 */
    GetImage$_$1Width$AndHeight$2_$_O(p: GetImage$_$1Width$AndHeight$2_$_O_input, meta?: ComfyNodeMetadata): GetImage$_$1Width$AndHeight$2_$_O
    /* category:O_numbers, name:"GetLatent_(Width&Height) _O", output:INT+INT_1 */
    GetLatent$_$1Width$AndHeight$2_$_O(p: GetLatent$_$1Width$AndHeight$2_$_O_input, meta?: ComfyNodeMetadata): GetLatent$_$1Width$AndHeight$2_$_O
    /* category:O_debug_OpenAI_Advanced_ChatGPT, name:"debug messages_O", output: */
    debug_messages$_O(p: debug_messages$_O_input, meta?: ComfyNodeMetadata): debug_messages$_O
    /* category:O_debug_OpenAI_Advanced_ChatGPT, name:"debug Completeion _O", output: */
    debug_Completeion_$_O(p: debug_Completeion_$_O_input, meta?: ComfyNodeMetadata): debug_Completeion_$_O
    /* category:O_debug_text, name:"Debug Text _O", output: */
    Debug_Text_$_O(p: Debug_Text_$_O_input, meta?: ComfyNodeMetadata): Debug_Text_$_O
    /* category:O_debug_text, name:"Debug Text route _O", output:STRING */
    Debug_Text_route_$_O(p: Debug_Text_route_$_O_input, meta?: ComfyNodeMetadata): Debug_Text_route_$_O
    /* category:O_utils, name:"Note _O", output: */
    Note_$_O(p: Note_$_O_input, meta?: ComfyNodeMetadata): Note_$_O
    /* category:O_utils, name:"Text _O", output:STRING */
    Text_$_O(p: Text_$_O_input, meta?: ComfyNodeMetadata): Text_$_O
    /* category:O_utils, name:"seed _O", output:INT */
    seed_$_O(p: seed_$_O_input, meta?: ComfyNodeMetadata): seed_$_O
    /* category:O_utils, name:"int _O", output:INT */
    int_$_O(p: int_$_O_input, meta?: ComfyNodeMetadata): int_$_O
    /* category:O_utils, name:"float _O", output:FLOAT */
    float_$_O(p: float_$_O_input, meta?: ComfyNodeMetadata): float_$_O
    /* category:O_OpenAI_Advanced, name:"ChatGPT _O", output:OPENAI */
    ChatGPT_$_O(p: ChatGPT_$_O_input, meta?: ComfyNodeMetadata): ChatGPT_$_O
    /* category:O_deprecated_OpenAI_Advanced_ChatGPT, name:"Chat_Message_fromString _O", output:OPENAI_CHAT_MESSAGES */
    Chat$_Message$_fromString_$_O(p: Chat$_Message$_fromString_$_O_input, meta?: ComfyNodeMetadata): Chat$_Message$_fromString_$_O
    /* category:O_deprecated_OpenAI_Advanced_ChatGPT, name:"compine_chat_messages _O", output:OPENAI_CHAT_MESSAGES */
    compine$_chat$_messages_$_O(p: compine$_chat$_messages_$_O_input, meta?: ComfyNodeMetadata): compine$_chat$_messages_$_O
    /* category:O_deprecated_OpenAI_Advanced_ChatGPT, name:"Chat_Completion _O", output:STR+OPENAI_CHAT_COMPLETION */
    Chat$_Completion_$_O(p: Chat$_Completion_$_O_input, meta?: ComfyNodeMetadata): Chat$_Completion_$_O
    /* category:O_deprecated_OpenAI_Advanced_Image, name:"create_image _O", output:IMAGE+MASK */
    create$_image_$_O(p: create$_image_$_O_input, meta?: ComfyNodeMetadata): create$_image_$_O
    /* category:O_deprecated_string, name:"String _O", output:STR */
    String_$_O(p: String_$_O_input, meta?: ComfyNodeMetadata): String_$_O
    /* category:O_deprecated_string, name:"Debug String _O", output: */
    Debug_String_$_O(p: Debug_String_$_O_input, meta?: ComfyNodeMetadata): Debug_String_$_O
    /* category:O_deprecated_string_operations, name:"concat Strings _O", output:STR */
    concat_Strings_$_O(p: concat_Strings_$_O_input, meta?: ComfyNodeMetadata): concat_Strings_$_O
    /* category:O_deprecated_string_operations, name:"trim String _O", output:STR */
    trim_String_$_O(p: trim_String_$_O_input, meta?: ComfyNodeMetadata): trim_String_$_O
    /* category:O_deprecated_string_operations, name:"replace String _O", output:STR */
    replace_String_$_O(p: replace_String_$_O_input, meta?: ComfyNodeMetadata): replace_String_$_O
    /* category:O_deprecated_string_operations, name:"replace String advanced _O", output:STR */
    replace_String_advanced_$_O(p: replace_String_advanced_$_O_input, meta?: ComfyNodeMetadata): replace_String_advanced_$_O
    /* category:O_deprecated_string, name:"string2Image _O", output:IMAGE */
    string2Image_$_O(p: string2Image_$_O_input, meta?: ComfyNodeMetadata): string2Image_$_O
    /* category:O_deprecated_string, name:"CLIPStringEncode _O", output:CONDITIONING */
    CLIPStringEncode_$_O(p: CLIPStringEncode_$_O_input, meta?: ComfyNodeMetadata): CLIPStringEncode_$_O
    /* category:O_deprecated_latent, name:"LatentUpscaleMultiply", output:LATENT */
    LatentUpscaleMultiply(p: LatentUpscaleMultiply_input, meta?: ComfyNodeMetadata): LatentUpscaleMultiply
    /* category:SAM2, name:"DownloadAndLoadSAM2Model", output:sam2_model */
    DownloadAndLoadSAM2Model(p: DownloadAndLoadSAM2Model_input, meta?: ComfyNodeMetadata): DownloadAndLoadSAM2Model
    /* category:SAM2, name:"Sam2Segmentation", output:mask */
    Sam2Segmentation(p: Sam2Segmentation_input, meta?: ComfyNodeMetadata): Sam2Segmentation
    /* category:SAM2, name:"Florence2toCoordinates", output:center_coordinates+bboxes */
    Florence2toCoordinates(p: Florence2toCoordinates_input, meta?: ComfyNodeMetadata): Florence2toCoordinates
    /* category:SAM2, name:"Sam2AutoSegmentation", output:mask+segmented_image+bbox */
    Sam2AutoSegmentation(p: Sam2AutoSegmentation_input, meta?: ComfyNodeMetadata): Sam2AutoSegmentation
    /* category:SAM2, name:"Sam2VideoSegmentationAddPoints", output:sam2_model+inference_state */
    Sam2VideoSegmentationAddPoints(p: Sam2VideoSegmentationAddPoints_input, meta?: ComfyNodeMetadata): Sam2VideoSegmentationAddPoints
    /* category:SAM2, name:"Sam2VideoSegmentation", output:mask */
    Sam2VideoSegmentation(p: Sam2VideoSegmentation_input, meta?: ComfyNodeMetadata): Sam2VideoSegmentation
    /* category:conditioning_advanced, name:"BNK_CLIPTextEncodeAdvanced", output:CONDITIONING */
    BNK$_CLIPTextEncodeAdvanced(p: BNK$_CLIPTextEncodeAdvanced_input, meta?: ComfyNodeMetadata): BNK$_CLIPTextEncodeAdvanced
    /* category:conditioning_advanced, name:"BNK_CLIPTextEncodeSDXLAdvanced", output:CONDITIONING */
    BNK$_CLIPTextEncodeSDXLAdvanced(p: BNK$_CLIPTextEncodeSDXLAdvanced_input, meta?: ComfyNodeMetadata): BNK$_CLIPTextEncodeSDXLAdvanced
    /* category:conditioning_advanced, name:"BNK_AddCLIPSDXLParams", output:CONDITIONING */
    BNK$_AddCLIPSDXLParams(p: BNK$_AddCLIPSDXLParams_input, meta?: ComfyNodeMetadata): BNK$_AddCLIPSDXLParams
    /* category:conditioning_advanced, name:"BNK_AddCLIPSDXLRParams", output:CONDITIONING */
    BNK$_AddCLIPSDXLRParams(p: BNK$_AddCLIPSDXLRParams_input, meta?: ComfyNodeMetadata): BNK$_AddCLIPSDXLRParams
    /* category:🧩 Comfyroll Studio_✨ Essential_📦 Core, name:"CR Image Output", output:trigger */
    CR_Image_Output(p: CR_Image_Output_input, meta?: ComfyNodeMetadata): CR_Image_Output
    /* category:🧩 Comfyroll Studio_✨ Essential_📦 Core, name:"CR Latent Batch Size", output:LATENT */
    CR_Latent_Batch_Size(p: CR_Latent_Batch_Size_input, meta?: ComfyNodeMetadata): CR_Latent_Batch_Size
    /* category:🧩 Comfyroll Studio_✨ Essential_📦 Core, name:"CR Conditioning Mixer", output:CONDITIONING+show_help */
    CR_Conditioning_Mixer(p: CR_Conditioning_Mixer_input, meta?: ComfyNodeMetadata): CR_Conditioning_Mixer
    /* category:🧩 Comfyroll Studio_✨ Essential_📦 Core, name:"CR Select Model", output:MODEL+CLIP+VAE+ckpt_name+show_help */
    CR_Select_Model(p: CR_Select_Model_input, meta?: ComfyNodeMetadata): CR_Select_Model
    /* category:🧩 Comfyroll Studio_✨ Essential_📦 Core, name:"CR Seed", output:seed+show_help */
    CR_Seed(p: CR_Seed_input, meta?: ComfyNodeMetadata): CR_Seed
    /* category:🧩 Comfyroll Studio_✨ Essential_📦 Core, name:"CR Prompt Text", output:prompt+show_help */
    CR_Prompt_Text(p: CR_Prompt_Text_input, meta?: ComfyNodeMetadata): CR_Prompt_Text
    /* category:🧩 Comfyroll Studio_✨ Essential_📦 Core, name:"CR Combine Prompt", output:prompt+show_help */
    CR_Combine_Prompt(p: CR_Combine_Prompt_input, meta?: ComfyNodeMetadata): CR_Combine_Prompt
    /* category:🧩 Comfyroll Studio_✨ Essential_📦 Core, name:"CR VAE Decode", output:IMAGE+show_help */
    CR_VAE_Decode(p: CR_VAE_Decode_input, meta?: ComfyNodeMetadata): CR_VAE_Decode
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List, name:"CR Text List", output:STRING+show_help */
    CR_Text_List(p: CR_Text_List_input, meta?: ComfyNodeMetadata): CR_Text_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List, name:"CR Prompt List", output:prompt+body_text+show_help */
    CR_Prompt_List(p: CR_Prompt_List_input, meta?: ComfyNodeMetadata): CR_Prompt_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List, name:"CR Simple List", output:LIST+show_help */
    CR_Simple_List(p: CR_Simple_List_input, meta?: ComfyNodeMetadata): CR_Simple_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List, name:"CR Float Range List", output:FLOAT+show_help */
    CR_Float_Range_List(p: CR_Float_Range_List_input, meta?: ComfyNodeMetadata): CR_Float_Range_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List, name:"CR Integer Range List", output:INT+show_help */
    CR_Integer_Range_List(p: CR_Integer_Range_List_input, meta?: ComfyNodeMetadata): CR_Integer_Range_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List, name:"CR Load Text List", output:STRING+show_help */
    CR_Load_Text_List(p: CR_Load_Text_List_input, meta?: ComfyNodeMetadata): CR_Load_Text_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List, name:"CR Binary To Bit List", output:STRING+show_help */
    CR_Binary_To_Bit_List(p: CR_Binary_To_Bit_List_input, meta?: ComfyNodeMetadata): CR_Binary_To_Bit_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List, name:"CR Text Cycler", output:STRING+show_text */
    CR_Text_Cycler(p: CR_Text_Cycler_input, meta?: ComfyNodeMetadata): CR_Text_Cycler
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List, name:"CR Value Cycler", output:FLOAT+INT+show_text */
    CR_Value_Cycler(p: CR_Value_Cycler_input, meta?: ComfyNodeMetadata): CR_Value_Cycler
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List_⌨️ IO, name:"CR Load Image List", output:IMAGE+show_help */
    CR_Load_Image_List(p: CR_Load_Image_List_input, meta?: ComfyNodeMetadata): CR_Load_Image_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List_⌨️ IO, name:"CR Load Image List Plus", output:IMAGE+MASK+index+filename+width+height+list_length+show_help */
    CR_Load_Image_List_Plus(p: CR_Load_Image_List_Plus_input, meta?: ComfyNodeMetadata): CR_Load_Image_List_Plus
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List_⌨️ IO, name:"CR Load GIF As List", output:IMAGE+MASK+show_help */
    CR_Load_GIF_As_List(p: CR_Load_GIF_As_List_input, meta?: ComfyNodeMetadata): CR_Load_GIF_As_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List_⌨️ IO, name:"CR Font File List", output:LIST+show_help */
    CR_Font_File_List(p: CR_Font_File_List_input, meta?: ComfyNodeMetadata): CR_Font_File_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils, name:"CR Batch Images From List", output:image_batch+show_help */
    CR_Batch_Images_From_List(p: CR_Batch_Images_From_List_input, meta?: ComfyNodeMetadata): CR_Batch_Images_From_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils, name:"CR Intertwine Lists", output:STRING+show_help */
    CR_Intertwine_Lists(p: CR_Intertwine_Lists_input, meta?: ComfyNodeMetadata): CR_Intertwine_Lists
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils, name:"CR Repeater", output:list+show_help */
    CR_Repeater(p: CR_Repeater_input, meta?: ComfyNodeMetadata): CR_Repeater
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils, name:"CR XY Product", output:x_values+y_values+show_help */
    CR_XY_Product(p: CR_XY_Product_input, meta?: ComfyNodeMetadata): CR_XY_Product
    /* category:🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils, name:"CR Text List To String", output:STRING+show_help */
    CR_Text_List_To_String(p: CR_Text_List_To_String_input, meta?: ComfyNodeMetadata): CR_Text_List_To_String
    /* category:🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio, name:"CR SD1.5 Aspect Ratio", output:width+height+upscale_factor+batch_size+empty_latent+show_help */
    CR_SD1$55_Aspect_Ratio(p: CR_SD1$55_Aspect_Ratio_input, meta?: ComfyNodeMetadata): CR_SD1$55_Aspect_Ratio
    /* category:🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio, name:"CR SDXL Aspect Ratio", output:width+height+upscale_factor+batch_size+empty_latent+show_help */
    CR_SDXL_Aspect_Ratio(p: CR_SDXL_Aspect_Ratio_input, meta?: ComfyNodeMetadata): CR_SDXL_Aspect_Ratio
    /* category:🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio, name:"CR Aspect Ratio", output:width+height+upscale_factor+prescale_factor+batch_size+empty_latent+show_help */
    CR_Aspect_Ratio(p: CR_Aspect_Ratio_input, meta?: ComfyNodeMetadata): CR_Aspect_Ratio
    /* category:🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio, name:"CR Aspect Ratio Banners", output:width+height+upscale_factor+prescale_factor+batch_size+empty_latent+show_help */
    CR_Aspect_Ratio_Banners(p: CR_Aspect_Ratio_Banners_input, meta?: ComfyNodeMetadata): CR_Aspect_Ratio_Banners
    /* category:🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio, name:"CR Aspect Ratio Social Media", output:width+height+upscale_factor+prescale_factor+batch_size+empty_latent+show_help */
    CR_Aspect_Ratio_Social_Media(p: CR_Aspect_Ratio_Social_Media_input, meta?: ComfyNodeMetadata): CR_Aspect_Ratio_Social_Media
    /* category:🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio, name:"CR_Aspect Ratio For Print", output:width+height+upscale_factor+prescale_factor+batch_size+empty_latent+show_help */
    CR$_Aspect_Ratio_For_Print(p: CR$_Aspect_Ratio_For_Print_input, meta?: ComfyNodeMetadata): CR$_Aspect_Ratio_For_Print
    /* category:🧩 Comfyroll Studio_✨ Essential_💀 Legacy, name:"CR Image Size", output:Width+Height+upscale_factor+show_help */
    CR_Image_Size(p: CR_Image_Size_input, meta?: ComfyNodeMetadata): CR_Image_Size
    /* category:🧩 Comfyroll Studio_✨ Essential_💀 Legacy, name:"CR Aspect Ratio SDXL", output:INT+INT_1+FLOAT+FLOAT_1+INT_2+show_help */
    CR_Aspect_Ratio_SDXL(p: CR_Aspect_Ratio_SDXL_input, meta?: ComfyNodeMetadata): CR_Aspect_Ratio_SDXL
    /* category:🧩 Comfyroll Studio_✨ Essential_💀 Legacy, name:"CR SDXL Prompt Mixer", output:pos_g+pos_l+pos_r+neg_g+neg_l+neg_r */
    CR_SDXL_Prompt_Mixer(p: CR_SDXL_Prompt_Mixer_input, meta?: ComfyNodeMetadata): CR_SDXL_Prompt_Mixer
    /* category:🧩 Comfyroll Studio_✨ Essential_💀 Legacy, name:"CR Seed to Int", output:INT+show_help */
    CR_Seed_to_Int(p: CR_Seed_to_Int_input, meta?: ComfyNodeMetadata): CR_Seed_to_Int
    /* category:🧩 Comfyroll Studio_✨ Essential_🕹️ ControlNet, name:"CR Apply ControlNet", output:CONDITIONING+show_help */
    CR_Apply_ControlNet(p: CR_Apply_ControlNet_input, meta?: ComfyNodeMetadata): CR_Apply_ControlNet
    /* category:🧩 Comfyroll Studio_✨ Essential_🕹️ ControlNet, name:"CR Multi-ControlNet Stack", output:CONTROLNET_STACK+show_help */
    CR_Multi$7ControlNet_Stack(p: CR_Multi$7ControlNet_Stack_input, meta?: ComfyNodeMetadata): CR_Multi$7ControlNet_Stack
    /* category:🧩 Comfyroll Studio_✨ Essential_🕹️ ControlNet, name:"CR Apply Multi-ControlNet", output:base_pos+base_neg+show_help */
    CR_Apply_Multi$7ControlNet(p: CR_Apply_Multi$7ControlNet_input, meta?: ComfyNodeMetadata): CR_Apply_Multi$7ControlNet
    /* category:🧩 Comfyroll Studio_✨ Essential_💊 LoRA, name:"CR Load LoRA", output:MODEL+CLIP+show_help */
    CR_Load_LoRA(p: CR_Load_LoRA_input, meta?: ComfyNodeMetadata): CR_Load_LoRA
    /* category:🧩 Comfyroll Studio_✨ Essential_💊 LoRA, name:"CR LoRA Stack", output:LORA_STACK+show_help */
    CR_LoRA_Stack(p: CR_LoRA_Stack_input, meta?: ComfyNodeMetadata): CR_LoRA_Stack
    /* category:🧩 Comfyroll Studio_✨ Essential_💊 LoRA, name:"CR Random LoRA Stack", output:LORA_STACK */
    CR_Random_LoRA_Stack(p: CR_Random_LoRA_Stack_input, meta?: ComfyNodeMetadata): CR_Random_LoRA_Stack
    /* category:🧩 Comfyroll Studio_✨ Essential_💊 LoRA, name:"CR Random Weight LoRA", output:LORA_STACK */
    CR_Random_Weight_LoRA(p: CR_Random_Weight_LoRA_input, meta?: ComfyNodeMetadata): CR_Random_Weight_LoRA
    /* category:🧩 Comfyroll Studio_✨ Essential_💊 LoRA, name:"CR Apply LoRA Stack", output:MODEL+CLIP+show_help */
    CR_Apply_LoRA_Stack(p: CR_Apply_LoRA_Stack_input, meta?: ComfyNodeMetadata): CR_Apply_LoRA_Stack
    /* category:🧩 Comfyroll Studio_✨ Essential_⛏️ Model Merge, name:"CR Apply Model Merge", output:MODEL+CLIP+model_mix_info+show_help */
    CR_Apply_Model_Merge(p: CR_Apply_Model_Merge_input, meta?: ComfyNodeMetadata): CR_Apply_Model_Merge
    /* category:🧩 Comfyroll Studio_✨ Essential_⛏️ Model Merge, name:"CR Model Merge Stack", output:MODEL_STACK+show_help */
    CR_Model_Merge_Stack(p: CR_Model_Merge_Stack_input, meta?: ComfyNodeMetadata): CR_Model_Merge_Stack
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🚌 Bus, name:"CR Data Bus In", output:pipe+show_help */
    CR_Data_Bus_In(p: CR_Data_Bus_In_input, meta?: ComfyNodeMetadata): CR_Data_Bus_In
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🚌 Bus, name:"CR Data Bus Out", output:pipe+any1+any2+any3+any4+show_help */
    CR_Data_Bus_Out(p: CR_Data_Bus_Out_input, meta?: ComfyNodeMetadata): CR_Data_Bus_Out
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🚌 Bus, name:"CR 8 Channel In", output:pipe+show_help */
    CR_8_Channel_In(p: CR_8_Channel_In_input, meta?: ComfyNodeMetadata): CR_8_Channel_In
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🚌 Bus, name:"CR 8 Channel Out", output:pipe+ch1+ch2+ch3+ch4+ch5+ch6+ch7+ch8+show_help */
    CR_8_Channel_Out(p: CR_8_Channel_Out_input, meta?: ComfyNodeMetadata): CR_8_Channel_Out
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_✈️ Module, name:"CR Module Pipe Loader", output:pipe+show_help */
    CR_Module_Pipe_Loader(p: CR_Module_Pipe_Loader_input, meta?: ComfyNodeMetadata): CR_Module_Pipe_Loader
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_✈️ Module, name:"CR Module Input", output:pipe+model+pos+neg+latent+vae+clip+controlnet+image+seed+show_help */
    CR_Module_Input(p: CR_Module_Input_input, meta?: ComfyNodeMetadata): CR_Module_Input
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_✈️ Module, name:"CR Module Output", output:pipe+show_help */
    CR_Module_Output(p: CR_Module_Output_input, meta?: ComfyNodeMetadata): CR_Module_Output
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🛩️ Image, name:"CR Image Pipe In", output:pipe+show_help */
    CR_Image_Pipe_In(p: CR_Image_Pipe_In_input, meta?: ComfyNodeMetadata): CR_Image_Pipe_In
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🛩️ Image, name:"CR Image Pipe Edit", output:pipe+show_help */
    CR_Image_Pipe_Edit(p: CR_Image_Pipe_Edit_input, meta?: ComfyNodeMetadata): CR_Image_Pipe_Edit
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🛩️ Image, name:"CR Image Pipe Out", output:pipe+image+width+height+upscale_factor+show_help */
    CR_Image_Pipe_Out(p: CR_Image_Pipe_Out_input, meta?: ComfyNodeMetadata): CR_Image_Pipe_Out
    /* category:🧩 Comfyroll Studio_✨ Essential_🎷 Pipe, name:"CR Pipe Switch", output:PIPE_LINE+show_help */
    CR_Pipe_Switch(p: CR_Pipe_Switch_input, meta?: ComfyNodeMetadata): CR_Pipe_Switch
    /* category:🧩 Comfyroll Studio_✨ Essential_🌟 SDXL, name:"CR SDXL Prompt Mix Presets", output:pos_g+pos_l+pos_r+neg_g+neg_l+neg_r+show_help */
    CR_SDXL_Prompt_Mix_Presets(p: CR_SDXL_Prompt_Mix_Presets_input, meta?: ComfyNodeMetadata): CR_SDXL_Prompt_Mix_Presets
    /* category:🧩 Comfyroll Studio_✨ Essential_🌟 SDXL, name:"CR SDXL Style Text", output:positive_prompt_text_l+negative_prompt_text_l+show_help */
    CR_SDXL_Style_Text(p: CR_SDXL_Style_Text_input, meta?: ComfyNodeMetadata): CR_SDXL_Style_Text
    /* category:🧩 Comfyroll Studio_✨ Essential_🌟 SDXL, name:"CR SDXL Base Prompt Encoder", output:base_positive+base_negative+show_help */
    CR_SDXL_Base_Prompt_Encoder(p: CR_SDXL_Base_Prompt_Encoder_input, meta?: ComfyNodeMetadata): CR_SDXL_Base_Prompt_Encoder
    /* category:🧩 Comfyroll Studio_✨ Essential_🔍 Upscale, name:"CR Multi Upscale Stack", output:UPSCALE_STACK+show_help */
    CR_Multi_Upscale_Stack(p: CR_Multi_Upscale_Stack_input, meta?: ComfyNodeMetadata): CR_Multi_Upscale_Stack
    /* category:🧩 Comfyroll Studio_✨ Essential_🔍 Upscale, name:"CR Upscale Image", output:IMAGE+show_help */
    CR_Upscale_Image(p: CR_Upscale_Image_input, meta?: ComfyNodeMetadata): CR_Upscale_Image
    /* category:🧩 Comfyroll Studio_✨ Essential_🔍 Upscale, name:"CR Apply Multi Upscale", output:IMAGE+show_help */
    CR_Apply_Multi_Upscale(p: CR_Apply_Multi_Upscale_input, meta?: ComfyNodeMetadata): CR_Apply_Multi_Upscale
    /* category:🧩 Comfyroll Studio_✨ Essential_📉 XY Grid, name:"CR XY List", output:X+Y+x_annotation+y_annotation+trigger+show_help */
    CR_XY_List(p: CR_XY_List_input, meta?: ComfyNodeMetadata): CR_XY_List
    /* category:🧩 Comfyroll Studio_✨ Essential_📉 XY Grid, name:"CR XY Interpolate", output:X+Y+x_annotation+y_annotation+trigger+show_help */
    CR_XY_Interpolate(p: CR_XY_Interpolate_input, meta?: ComfyNodeMetadata): CR_XY_Interpolate
    /* category:🧩 Comfyroll Studio_✨ Essential_📉 XY Grid, name:"CR XY From Folder", output:IMAGE+trigger+show_help */
    CR_XY_From_Folder(p: CR_XY_From_Folder_input, meta?: ComfyNodeMetadata): CR_XY_From_Folder
    /* category:🧩 Comfyroll Studio_✨ Essential_📉 XY Grid, name:"CR XY Save Grid Image", output: */
    CR_XY_Save_Grid_Image(p: CR_XY_Save_Grid_Image_input, meta?: ComfyNodeMetadata): CR_XY_Save_Grid_Image
    /* category:🧩 Comfyroll Studio_✨ Essential_📉 XY Grid, name:"CR XY Index", output:x+y+show_help */
    CR_XY_Index(p: CR_XY_Index_input, meta?: ComfyNodeMetadata): CR_XY_Index
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Halftone Grid", output:IMAGE+show_help */
    CR_Halftone_Grid(p: CR_Halftone_Grid_input, meta?: ComfyNodeMetadata): CR_Halftone_Grid
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Color Bars", output:IMAGE+show_help */
    CR_Color_Bars(p: CR_Color_Bars_input, meta?: ComfyNodeMetadata): CR_Color_Bars
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Style Bars", output:IMAGE+show_help */
    CR_Style_Bars(p: CR_Style_Bars_input, meta?: ComfyNodeMetadata): CR_Style_Bars
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Checker Pattern", output:IMAGE+show_help */
    CR_Checker_Pattern(p: CR_Checker_Pattern_input, meta?: ComfyNodeMetadata): CR_Checker_Pattern
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Polygons", output:IMAGE+show_help */
    CR_Polygons(p: CR_Polygons_input, meta?: ComfyNodeMetadata): CR_Polygons
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Color Gradient", output:IMAGE+show_help */
    CR_Color_Gradient(p: CR_Color_Gradient_input, meta?: ComfyNodeMetadata): CR_Color_Gradient
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Radial Gradient", output:IMAGE+show_Help */
    CR_Radial_Gradient(p: CR_Radial_Gradient_input, meta?: ComfyNodeMetadata): CR_Radial_Gradient
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Starburst Lines", output:IMAGE+show_help */
    CR_Starburst_Lines(p: CR_Starburst_Lines_input, meta?: ComfyNodeMetadata): CR_Starburst_Lines
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Starburst Colors", output:IMAGE+show_help */
    CR_Starburst_Colors(p: CR_Starburst_Colors_input, meta?: ComfyNodeMetadata): CR_Starburst_Colors
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Simple Binary Pattern", output:IMAGE+show_help */
    CR_Simple_Binary_Pattern(p: CR_Simple_Binary_Pattern_input, meta?: ComfyNodeMetadata): CR_Simple_Binary_Pattern
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern, name:"CR Binary Pattern", output:IMAGE+show_help */
    CR_Binary_Pattern(p: CR_Binary_Pattern_input, meta?: ComfyNodeMetadata): CR_Binary_Pattern
    /* category:🧩 Comfyroll Studio_👾 Graphics_🟣 Shape, name:"CR Draw Shape", output:IMAGE+show_help */
    CR_Draw_Shape(p: CR_Draw_Shape_input, meta?: ComfyNodeMetadata): CR_Draw_Shape
    /* category:🧩 Comfyroll Studio_👾 Graphics_🟣 Shape, name:"CR Draw Pie", output:IMAGE+show_help */
    CR_Draw_Pie(p: CR_Draw_Pie_input, meta?: ComfyNodeMetadata): CR_Draw_Pie
    /* category:🧩 Comfyroll Studio_👾 Graphics_🟣 Shape, name:"CR Random Shape Pattern", output:IMAGE+show_help */
    CR_Random_Shape_Pattern(p: CR_Random_Shape_Pattern_input, meta?: ComfyNodeMetadata): CR_Random_Shape_Pattern
    /* category:🧩 Comfyroll Studio_👾 Graphics_🔤 Text, name:"CR Overlay Text", output:IMAGE+show_help */
    CR_Overlay_Text(p: CR_Overlay_Text_input, meta?: ComfyNodeMetadata): CR_Overlay_Text
    /* category:🧩 Comfyroll Studio_👾 Graphics_🔤 Text, name:"CR Draw Text", output:IMAGE+show_help */
    CR_Draw_Text(p: CR_Draw_Text_input, meta?: ComfyNodeMetadata): CR_Draw_Text
    /* category:🧩 Comfyroll Studio_👾 Graphics_🔤 Text, name:"CR Mask Text", output:IMAGE+show_help */
    CR_Mask_Text(p: CR_Mask_Text_input, meta?: ComfyNodeMetadata): CR_Mask_Text
    /* category:🧩 Comfyroll Studio_👾 Graphics_🔤 Text, name:"CR Composite Text", output:IMAGE+show_help */
    CR_Composite_Text(p: CR_Composite_Text_input, meta?: ComfyNodeMetadata): CR_Composite_Text
    /* category:🧩 Comfyroll Studio_👾 Graphics_🔤 Text, name:"CR Simple Text Watermark", output:IMAGE+show_help */
    CR_Simple_Text_Watermark(p: CR_Simple_Text_Watermark_input, meta?: ComfyNodeMetadata): CR_Simple_Text_Watermark
    /* category:🧩 Comfyroll Studio_👾 Graphics_🔤 Text, name:"CR Select Font", output:font_name+show_help */
    CR_Select_Font(p: CR_Select_Font_input, meta?: ComfyNodeMetadata): CR_Select_Font
    /* category:🧩 Comfyroll Studio_👾 Graphics_🎨 Filter, name:"CR Halftone Filter", output:IMAGE+show_help */
    CR_Halftone_Filter(p: CR_Halftone_Filter_input, meta?: ComfyNodeMetadata): CR_Halftone_Filter
    /* category:🧩 Comfyroll Studio_👾 Graphics_🎨 Filter, name:"CR Color Tint", output:IMAGE+show_help */
    CR_Color_Tint(p: CR_Color_Tint_input, meta?: ComfyNodeMetadata): CR_Color_Tint
    /* category:🧩 Comfyroll Studio_👾 Graphics_🎨 Filter, name:"CR Vignette Filter", output:IMAGE+MASK+show_help */
    CR_Vignette_Filter(p: CR_Vignette_Filter_input, meta?: ComfyNodeMetadata): CR_Vignette_Filter
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Page Layout", output:image+show_help */
    CR_Page_Layout(p: CR_Page_Layout_input, meta?: ComfyNodeMetadata): CR_Page_Layout
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Image Panel", output:image+show_help */
    CR_Image_Panel(p: CR_Image_Panel_input, meta?: ComfyNodeMetadata): CR_Image_Panel
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Image Grid Panel", output:image+show_help */
    CR_Image_Grid_Panel(p: CR_Image_Grid_Panel_input, meta?: ComfyNodeMetadata): CR_Image_Grid_Panel
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Image Border", output:image+show_help */
    CR_Image_Border(p: CR_Image_Border_input, meta?: ComfyNodeMetadata): CR_Image_Border
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Feathered Border", output:image+show_help */
    CR_Feathered_Border(p: CR_Feathered_Border_input, meta?: ComfyNodeMetadata): CR_Feathered_Border
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Simple Text Panel", output:image+show_help */
    CR_Simple_Text_Panel(p: CR_Simple_Text_Panel_input, meta?: ComfyNodeMetadata): CR_Simple_Text_Panel
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Color Panel", output:image+show_help */
    CR_Color_Panel(p: CR_Color_Panel_input, meta?: ComfyNodeMetadata): CR_Color_Panel
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Overlay Transparent Image", output:IMAGE */
    CR_Overlay_Transparent_Image(p: CR_Overlay_Transparent_Image_input, meta?: ComfyNodeMetadata): CR_Overlay_Transparent_Image
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Half Drop Panel", output:image+show_help */
    CR_Half_Drop_Panel(p: CR_Half_Drop_Panel_input, meta?: ComfyNodeMetadata): CR_Half_Drop_Panel
    /* category:🧩 Comfyroll Studio_👾 Graphics_🌁 Layout, name:"CR Diamond Panel", output:image+show_help */
    CR_Diamond_Panel(p: CR_Diamond_Panel_input, meta?: ComfyNodeMetadata): CR_Diamond_Panel
    /* category:🧩 Comfyroll Studio_👾 Graphics_📱 Template, name:"CR Simple Meme Template", output:image+show_help */
    CR_Simple_Meme_Template(p: CR_Simple_Meme_Template_input, meta?: ComfyNodeMetadata): CR_Simple_Meme_Template
    /* category:🧩 Comfyroll Studio_👾 Graphics_📱 Template, name:"CR Simple Banner", output:image+show_help */
    CR_Simple_Banner(p: CR_Simple_Banner_input, meta?: ComfyNodeMetadata): CR_Simple_Banner
    /* category:🧩 Comfyroll Studio_👾 Graphics_📱 Template, name:"CR Comic Panel Templates", output:image+show_help */
    CR_Comic_Panel_Templates(p: CR_Comic_Panel_Templates_input, meta?: ComfyNodeMetadata): CR_Comic_Panel_Templates
    /* category:🧩 Comfyroll Studio_👾 Graphics_📱 Template, name:"CR Simple Image Compare", output:image+show_help */
    CR_Simple_Image_Compare(p: CR_Simple_Image_Compare_input, meta?: ComfyNodeMetadata): CR_Simple_Image_Compare
    /* category:🧩 Comfyroll Studio_👾 Graphics_📱 Template, name:"CR Thumbnail Preview", output:show_help */
    CR_Thumbnail_Preview(p: CR_Thumbnail_Preview_input, meta?: ComfyNodeMetadata): CR_Thumbnail_Preview
    /* category:🧩 Comfyroll Studio_👾 Graphics_📱 Template, name:"CR Seamless Checker", output:show_help */
    CR_Seamless_Checker(p: CR_Seamless_Checker_input, meta?: ComfyNodeMetadata): CR_Seamless_Checker
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR Image Input Switch", output:IMAGE+show_help */
    CR_Image_Input_Switch(p: CR_Image_Input_Switch_input, meta?: ComfyNodeMetadata): CR_Image_Input_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR Image Input Switch (4 way)", output:IMAGE+show_help */
    CR_Image_Input_Switch_$14_way$2(p: CR_Image_Input_Switch_$14_way$2_input, meta?: ComfyNodeMetadata): CR_Image_Input_Switch_$14_way$2
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR Latent Input Switch", output:LATENT+show_help */
    CR_Latent_Input_Switch(p: CR_Latent_Input_Switch_input, meta?: ComfyNodeMetadata): CR_Latent_Input_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR Conditioning Input Switch", output:CONDITIONING+show_help */
    CR_Conditioning_Input_Switch(p: CR_Conditioning_Input_Switch_input, meta?: ComfyNodeMetadata): CR_Conditioning_Input_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR Clip Input Switch", output:CLIP+show_help */
    CR_Clip_Input_Switch(p: CR_Clip_Input_Switch_input, meta?: ComfyNodeMetadata): CR_Clip_Input_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR Model Input Switch", output:MODEL+show_help */
    CR_Model_Input_Switch(p: CR_Model_Input_Switch_input, meta?: ComfyNodeMetadata): CR_Model_Input_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR ControlNet Input Switch", output:CONTROL_NET+show_help */
    CR_ControlNet_Input_Switch(p: CR_ControlNet_Input_Switch_input, meta?: ComfyNodeMetadata): CR_ControlNet_Input_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR VAE Input Switch", output:VAE+show_help */
    CR_VAE_Input_Switch(p: CR_VAE_Input_Switch_input, meta?: ComfyNodeMetadata): CR_VAE_Input_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR Text Input Switch", output:STRING+show_help */
    CR_Text_Input_Switch(p: CR_Text_Input_Switch_input, meta?: ComfyNodeMetadata): CR_Text_Input_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR Text Input Switch (4 way)", output:STRING+show_help */
    CR_Text_Input_Switch_$14_way$2(p: CR_Text_Input_Switch_$14_way$2_input, meta?: ComfyNodeMetadata): CR_Text_Input_Switch_$14_way$2
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic, name:"CR Switch Model and CLIP", output:MODEL+CLIP+show_help */
    CR_Switch_Model_and_CLIP(p: CR_Switch_Model_and_CLIP_input, meta?: ComfyNodeMetadata): CR_Switch_Model_and_CLIP
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔂 Process, name:"CR Batch Process Switch", output:IMAGE+show_help */
    CR_Batch_Process_Switch(p: CR_Batch_Process_Switch_input, meta?: ComfyNodeMetadata): CR_Batch_Process_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔂 Process, name:"CR Img2Img Process Switch", output:LATENT+show_help */
    CR_Img2Img_Process_Switch(p: CR_Img2Img_Process_Switch_input, meta?: ComfyNodeMetadata): CR_Img2Img_Process_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔂 Process, name:"CR Hires Fix Process Switch", output:LATENT+STRING */
    CR_Hires_Fix_Process_Switch(p: CR_Hires_Fix_Process_Switch_input, meta?: ComfyNodeMetadata): CR_Hires_Fix_Process_Switch
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔢 Index, name:"CR Index", output:INT+show_help */
    CR_Index(p: CR_Index_input, meta?: ComfyNodeMetadata): CR_Index
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔢 Index, name:"CR Index Increment", output:index+interval+show_help */
    CR_Index_Increment(p: CR_Index_Increment_input, meta?: ComfyNodeMetadata): CR_Index_Increment
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔢 Index, name:"CR Index Multiply", output:index+factor+show_help */
    CR_Index_Multiply(p: CR_Index_Multiply_input, meta?: ComfyNodeMetadata): CR_Index_Multiply
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔢 Index, name:"CR Index Reset", output:index+reset_to+show_help */
    CR_Index_Reset(p: CR_Index_Reset_input, meta?: ComfyNodeMetadata): CR_Index_Reset
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔢 Index, name:"CR Trigger", output:index+trigger+show_help */
    CR_Trigger(p: CR_Trigger_input, meta?: ComfyNodeMetadata): CR_Trigger
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion, name:"CR String To Number", output:INT+FLOAT+show_help */
    CR_String_To_Number(p: CR_String_To_Number_input, meta?: ComfyNodeMetadata): CR_String_To_Number
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion, name:"CR String To Combo", output:any+show_help */
    CR_String_To_Combo(p: CR_String_To_Combo_input, meta?: ComfyNodeMetadata): CR_String_To_Combo
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion, name:"CR Float To String", output:STRING+show_help */
    CR_Float_To_String(p: CR_Float_To_String_input, meta?: ComfyNodeMetadata): CR_Float_To_String
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion, name:"CR Float To Integer", output:INT+show_help */
    CR_Float_To_Integer(p: CR_Float_To_Integer_input, meta?: ComfyNodeMetadata): CR_Float_To_Integer
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion, name:"CR Integer To String", output:STRING+show_help */
    CR_Integer_To_String(p: CR_Integer_To_String_input, meta?: ComfyNodeMetadata): CR_Integer_To_String
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion, name:"CR String To Boolean", output:BOOLEAN+show_help */
    CR_String_To_Boolean(p: CR_String_To_Boolean_input, meta?: ComfyNodeMetadata): CR_String_To_Boolean
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🎲 Random, name:"CR Random Hex Color", output:hex_color1+hex_color2+hex_color3+hex_color4+show_help */
    CR_Random_Hex_Color(p: CR_Random_Hex_Color_input, meta?: ComfyNodeMetadata): CR_Random_Hex_Color
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🎲 Random, name:"CR Random RGB", output:rgb_1+rgb_2+rgb_3+rgb_4+show_help */
    CR_Random_RGB(p: CR_Random_RGB_input, meta?: ComfyNodeMetadata): CR_Random_RGB
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🎲 Random, name:"CR Random Multiline Values", output:multiline_text+show_help */
    CR_Random_Multiline_Values(p: CR_Random_Multiline_Values_input, meta?: ComfyNodeMetadata): CR_Random_Multiline_Values
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🎲 Random, name:"CR Random Multiline Colors", output:multiline_text+show_help */
    CR_Random_Multiline_Colors(p: CR_Random_Multiline_Colors_input, meta?: ComfyNodeMetadata): CR_Random_Multiline_Colors
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🎲 Random, name:"CR Random RGB Gradient", output:multiline_text+show_help */
    CR_Random_RGB_Gradient(p: CR_Random_RGB_Gradient_input, meta?: ComfyNodeMetadata): CR_Random_RGB_Gradient
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🎲 Random, name:"CR Random Panel Codes", output:multiline_text+show_help */
    CR_Random_Panel_Codes(p: CR_Random_Panel_Codes_input, meta?: ComfyNodeMetadata): CR_Random_Panel_Codes
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔤 Text, name:"CR Text", output:text+show_help */
    CR_Text(p: CR_Text_input, meta?: ComfyNodeMetadata): CR_Text
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔤 Text, name:"CR Multiline Text", output:multiline_text+show_help */
    CR_Multiline_Text(p: CR_Multiline_Text_input, meta?: ComfyNodeMetadata): CR_Multiline_Text
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔤 Text, name:"CR Split String", output:string_1+string_2+string_3+string_4+show_help */
    CR_Split_String(p: CR_Split_String_input, meta?: ComfyNodeMetadata): CR_Split_String
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔤 Text, name:"CR Text Concatenate", output:STRING+show_help */
    CR_Text_Concatenate(p: CR_Text_Concatenate_input, meta?: ComfyNodeMetadata): CR_Text_Concatenate
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔤 Text, name:"CR Text Replace", output:STRING+show_help */
    CR_Text_Replace(p: CR_Text_Replace_input, meta?: ComfyNodeMetadata): CR_Text_Replace
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔤 Text, name:"CR Text Length", output:INT+show_help */
    CR_Text_Length(p: CR_Text_Length_input, meta?: ComfyNodeMetadata): CR_Text_Length
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔤 Text, name:"CR Text Operation", output:STRING+show_help */
    CR_Text_Operation(p: CR_Text_Operation_input, meta?: ComfyNodeMetadata): CR_Text_Operation
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔤 Text, name:"CR Text Blacklist", output:STRING+show_help */
    CR_Text_Blacklist(p: CR_Text_Blacklist_input, meta?: ComfyNodeMetadata): CR_Text_Blacklist
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔤 Text, name:"CR Save Text To File", output:show_help */
    CR_Save_Text_To_File(p: CR_Save_Text_To_File_input, meta?: ComfyNodeMetadata): CR_Save_Text_To_File
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Conditional, name:"CR Set Value On Boolean", output:INT+FLOAT+show_help */
    CR_Set_Value_On_Boolean(p: CR_Set_Value_On_Boolean_input, meta?: ComfyNodeMetadata): CR_Set_Value_On_Boolean
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Conditional, name:"CR Set Value On Binary", output:INT+FLOAT+show_help */
    CR_Set_Value_On_Binary(p: CR_Set_Value_On_Binary_input, meta?: ComfyNodeMetadata): CR_Set_Value_On_Binary
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Conditional, name:"CR Set Value on String", output:STRING+BOOLEAN+show_help */
    CR_Set_Value_on_String(p: CR_Set_Value_on_String_input, meta?: ComfyNodeMetadata): CR_Set_Value_on_String
    /* category:🧩 Comfyroll Studio_🛠️ Utils_🔀 Conditional, name:"CR Set Switch From String", output:switch+show_help */
    CR_Set_Switch_From_String(p: CR_Set_Switch_From_String_input, meta?: ComfyNodeMetadata): CR_Set_Switch_From_String
    /* category:🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other, name:"CR Value", output:FLOAT+INT+show_help */
    CR_Value(p: CR_Value_input, meta?: ComfyNodeMetadata): CR_Value
    /* category:🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other, name:"CR Integer Multiple", output:INT+show_help */
    CR_Integer_Multiple(p: CR_Integer_Multiple_input, meta?: ComfyNodeMetadata): CR_Integer_Multiple
    /* category:🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other, name:"CR Clamp Value", output:a+show_help */
    CR_Clamp_Value(p: CR_Clamp_Value_input, meta?: ComfyNodeMetadata): CR_Clamp_Value
    /* category:🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other, name:"CR Math Operation", output:a+show_help */
    CR_Math_Operation(p: CR_Math_Operation_input, meta?: ComfyNodeMetadata): CR_Math_Operation
    /* category:🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other, name:"CR Get Parameter From Prompt", output:prompt+text+float+boolean+show_help */
    CR_Get_Parameter_From_Prompt(p: CR_Get_Parameter_From_Prompt_input, meta?: ComfyNodeMetadata): CR_Get_Parameter_From_Prompt
    /* category:🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other, name:"CR Select Resize Method", output:method+show_help */
    CR_Select_Resize_Method(p: CR_Select_Resize_Method_input, meta?: ComfyNodeMetadata): CR_Select_Resize_Method
    /* category:🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other, name:"CR Select ISO Size", output:width+height+show_help */
    CR_Select_ISO_Size(p: CR_Select_ISO_Size_input, meta?: ComfyNodeMetadata): CR_Select_ISO_Size
    /* category:🧩 Comfyroll Studio_🎥 Animation_📋 Schedule, name:"CR Simple Schedule", output:SCHEDULE+show_help */
    CR_Simple_Schedule(p: CR_Simple_Schedule_input, meta?: ComfyNodeMetadata): CR_Simple_Schedule
    /* category:🧩 Comfyroll Studio_🎥 Animation_📋 Schedule, name:"CR Central Schedule", output:SCHEDULE+show_text */
    CR_Central_Schedule(p: CR_Central_Schedule_input, meta?: ComfyNodeMetadata): CR_Central_Schedule
    /* category:🧩 Comfyroll Studio_🎥 Animation_📋 Schedule, name:"CR Combine Schedules", output:SCHEDULE+show_text */
    CR_Combine_Schedules(p: CR_Combine_Schedules_input, meta?: ComfyNodeMetadata): CR_Combine_Schedules
    /* category:🧩 Comfyroll Studio_🎥 Animation_📋 Schedule, name:"CR Output Schedule To File", output: */
    CR_Output_Schedule_To_File(p: CR_Output_Schedule_To_File_input, meta?: ComfyNodeMetadata): CR_Output_Schedule_To_File
    /* category:🧩 Comfyroll Studio_🎥 Animation_📋 Schedule, name:"CR Load Schedule From File", output:SCHEDULE+show_text */
    CR_Load_Schedule_From_File(p: CR_Load_Schedule_From_File_input, meta?: ComfyNodeMetadata): CR_Load_Schedule_From_File
    /* category:🧩 Comfyroll Studio_🎥 Animation_📋 Schedule, name:"CR Schedule Input Switch", output:SCHEDULE+show_help */
    CR_Schedule_Input_Switch(p: CR_Schedule_Input_Switch_input, meta?: ComfyNodeMetadata): CR_Schedule_Input_Switch
    /* category:🧩 Comfyroll Studio_🎥 Animation_📋 Schedule, name:"CR Bit Schedule", output:SCHEDULE+show_text */
    CR_Bit_Schedule(p: CR_Bit_Schedule_input, meta?: ComfyNodeMetadata): CR_Bit_Schedule
    /* category:🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers, name:"CR Simple Value Scheduler", output:INT+FLOAT+show_help */
    CR_Simple_Value_Scheduler(p: CR_Simple_Value_Scheduler_input, meta?: ComfyNodeMetadata): CR_Simple_Value_Scheduler
    /* category:🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers, name:"CR Simple Text Scheduler", output:STRING+show_help */
    CR_Simple_Text_Scheduler(p: CR_Simple_Text_Scheduler_input, meta?: ComfyNodeMetadata): CR_Simple_Text_Scheduler
    /* category:🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers, name:"CR Value Scheduler", output:INT+FLOAT+show_help */
    CR_Value_Scheduler(p: CR_Value_Scheduler_input, meta?: ComfyNodeMetadata): CR_Value_Scheduler
    /* category:🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers, name:"CR Text Scheduler", output:STRING+show_help */
    CR_Text_Scheduler(p: CR_Text_Scheduler_input, meta?: ComfyNodeMetadata): CR_Text_Scheduler
    /* category:🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers, name:"CR Load Scheduled Models", output:MODEL+CLIP+VAE+show_help */
    CR_Load_Scheduled_Models(p: CR_Load_Scheduled_Models_input, meta?: ComfyNodeMetadata): CR_Load_Scheduled_Models
    /* category:🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers, name:"CR Load Scheduled LoRAs", output:MODEL+CLIP+show_help */
    CR_Load_Scheduled_LoRAs(p: CR_Load_Scheduled_LoRAs_input, meta?: ComfyNodeMetadata): CR_Load_Scheduled_LoRAs
    /* category:🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers, name:"CR Prompt Scheduler", output:current_prompt+next_prompt+weight+show_help */
    CR_Prompt_Scheduler(p: CR_Prompt_Scheduler_input, meta?: ComfyNodeMetadata): CR_Prompt_Scheduler
    /* category:🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers, name:"CR Simple Prompt Scheduler", output:current_prompt+next_prompt+weight+show_help */
    CR_Simple_Prompt_Scheduler(p: CR_Simple_Prompt_Scheduler_input, meta?: ComfyNodeMetadata): CR_Simple_Prompt_Scheduler
    /* category:🧩 Comfyroll Studio_🎥 Animation_📝 Prompt, name:"CR Keyframe List", output:keyframe_list+show_help */
    CR_Keyframe_List(p: CR_Keyframe_List_input, meta?: ComfyNodeMetadata): CR_Keyframe_List
    /* category:🧩 Comfyroll Studio_🎥 Animation_📝 Prompt, name:"CR Encode Scheduled Prompts", output:CONDITIONING+show_help */
    CR_Encode_Scheduled_Prompts(p: CR_Encode_Scheduled_Prompts_input, meta?: ComfyNodeMetadata): CR_Encode_Scheduled_Prompts
    /* category:🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate, name:"CR Gradient Float", output:FLOAT+show_help */
    CR_Gradient_Float(p: CR_Gradient_Float_input, meta?: ComfyNodeMetadata): CR_Gradient_Float
    /* category:🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate, name:"CR Gradient Integer", output:INT+show_help */
    CR_Gradient_Integer(p: CR_Gradient_Integer_input, meta?: ComfyNodeMetadata): CR_Gradient_Integer
    /* category:🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate, name:"CR Increment Float", output:FLOAT+show_help */
    CR_Increment_Float(p: CR_Increment_Float_input, meta?: ComfyNodeMetadata): CR_Increment_Float
    /* category:🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate, name:"CR Increment Integer", output:INT+show_help */
    CR_Increment_Integer(p: CR_Increment_Integer_input, meta?: ComfyNodeMetadata): CR_Increment_Integer
    /* category:🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate, name:"CR Interpolate Latents", output:LATENT+show_help */
    CR_Interpolate_Latents(p: CR_Interpolate_Latents_input, meta?: ComfyNodeMetadata): CR_Interpolate_Latents
    /* category:🧩 Comfyroll Studio_🎥 Animation_🛠️ Utils, name:"CR Debatch Frames", output:debatched_frames */
    CR_Debatch_Frames(p: CR_Debatch_Frames_input, meta?: ComfyNodeMetadata): CR_Debatch_Frames
    /* category:🧩 Comfyroll Studio_🎥 Animation_🛠️ Utils, name:"CR Current Frame", output:index */
    CR_Current_Frame(p: CR_Current_Frame_input, meta?: ComfyNodeMetadata): CR_Current_Frame
    /* category:🧩 Comfyroll Studio_🎥 Animation_⌨️ IO, name:"CR Load Animation Frames", output:IMAGE+show_help */
    CR_Load_Animation_Frames(p: CR_Load_Animation_Frames_input, meta?: ComfyNodeMetadata): CR_Load_Animation_Frames
    /* category:🧩 Comfyroll Studio_🎥 Animation_⌨️ IO, name:"CR Load Flow Frames", output:current_image+previous_image+current_frame+show_help */
    CR_Load_Flow_Frames(p: CR_Load_Flow_Frames_input, meta?: ComfyNodeMetadata): CR_Load_Flow_Frames
    /* category:🧩 Comfyroll Studio_🎥 Animation_⌨️ IO, name:"CR Output Flow Frames", output: */
    CR_Output_Flow_Frames(p: CR_Output_Flow_Frames_input, meta?: ComfyNodeMetadata): CR_Output_Flow_Frames
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Prompt List Keyframes", output:keyframe_list+show_help */
    CR_Prompt_List_Keyframes(p: CR_Prompt_List_Keyframes_input, meta?: ComfyNodeMetadata): CR_Prompt_List_Keyframes
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Simple Prompt List", output:SIMPLE_PROMPT_LIST+show_help */
    CR_Simple_Prompt_List(p: CR_Simple_Prompt_List_input, meta?: ComfyNodeMetadata): CR_Simple_Prompt_List
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Simple Prompt List Keyframes", output:keyframe_list+show_help */
    CR_Simple_Prompt_List_Keyframes(p: CR_Simple_Prompt_List_Keyframes_input, meta?: ComfyNodeMetadata): CR_Simple_Prompt_List_Keyframes
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Cycle Models", output:MODEL+CLIP+VAE+show_help */
    CR_Cycle_Models(p: CR_Cycle_Models_input, meta?: ComfyNodeMetadata): CR_Cycle_Models
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Cycle LoRAs", output:MODEL+CLIP+show_help */
    CR_Cycle_LoRAs(p: CR_Cycle_LoRAs_input, meta?: ComfyNodeMetadata): CR_Cycle_LoRAs
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Cycle Text", output:STRING+show_help */
    CR_Cycle_Text(p: CR_Cycle_Text_input, meta?: ComfyNodeMetadata): CR_Cycle_Text
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Cycle Text Simple", output:STRING+show_help */
    CR_Cycle_Text_Simple(p: CR_Cycle_Text_Simple_input, meta?: ComfyNodeMetadata): CR_Cycle_Text_Simple
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Cycle Images", output:IMAGE+show_help */
    CR_Cycle_Images(p: CR_Cycle_Images_input, meta?: ComfyNodeMetadata): CR_Cycle_Images
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Cycle Images Simple", output:IMAGE+show_help */
    CR_Cycle_Images_Simple(p: CR_Cycle_Images_Simple_input, meta?: ComfyNodeMetadata): CR_Cycle_Images_Simple
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Model List", output:MODEL_LIST+show_text */
    CR_Model_List(p: CR_Model_List_input, meta?: ComfyNodeMetadata): CR_Model_List
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR LoRA List", output:LORA_LIST+show_text */
    CR_LoRA_List(p: CR_LoRA_List_input, meta?: ComfyNodeMetadata): CR_LoRA_List
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Text List Simple", output:TEXT_LIST_SIMPLE+show_help */
    CR_Text_List_Simple(p: CR_Text_List_Simple_input, meta?: ComfyNodeMetadata): CR_Text_List_Simple
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Image List", output:IMAGE_LIST+show_help */
    CR_Image_List(p: CR_Image_List_input, meta?: ComfyNodeMetadata): CR_Image_List
    /* category:🧩 Comfyroll Studio_🎥 Animation_💀 Legacy, name:"CR Image List Simple", output:IMAGE_LIST_SIMPLE+show_help */
    CR_Image_List_Simple(p: CR_Image_List_Simple_input, meta?: ComfyNodeMetadata): CR_Image_List_Simple
    /* category:ControlNet Preprocessors_Semantic Segmentation, name:"AnimeFace_SemSegPreprocessor", output:IMAGE+ABG_CHARACTER_MASK$_$1MASK$2 */
    AnimeFace$_SemSegPreprocessor(p: AnimeFace$_SemSegPreprocessor_input, meta?: ComfyNodeMetadata): AnimeFace$_SemSegPreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"AnyLineArtPreprocessor_aux", output:image */
    AnyLineArtPreprocessor$_aux(p: AnyLineArtPreprocessor$_aux_input, meta?: ComfyNodeMetadata): AnyLineArtPreprocessor$_aux
    /* category:ControlNet Preprocessors_Line Extractors, name:"BinaryPreprocessor", output:IMAGE */
    BinaryPreprocessor(p: BinaryPreprocessor_input, meta?: ComfyNodeMetadata): BinaryPreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"CannyEdgePreprocessor", output:IMAGE */
    CannyEdgePreprocessor(p: CannyEdgePreprocessor_input, meta?: ComfyNodeMetadata): CannyEdgePreprocessor
    /* category:ControlNet Preprocessors_T2IAdapter-only, name:"ColorPreprocessor", output:IMAGE */
    ColorPreprocessor(p: ColorPreprocessor_input, meta?: ComfyNodeMetadata): ColorPreprocessor
    /* category:ControlNet Preprocessors_Faces and Poses Estimators, name:"DensePosePreprocessor", output:IMAGE */
    DensePosePreprocessor(p: DensePosePreprocessor_input, meta?: ComfyNodeMetadata): DensePosePreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"DepthAnythingPreprocessor", output:IMAGE */
    DepthAnythingPreprocessor(p: DepthAnythingPreprocessor_input, meta?: ComfyNodeMetadata): DepthAnythingPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"Zoe_DepthAnythingPreprocessor", output:IMAGE */
    Zoe$_DepthAnythingPreprocessor(p: Zoe$_DepthAnythingPreprocessor_input, meta?: ComfyNodeMetadata): Zoe$_DepthAnythingPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"DepthAnythingV2Preprocessor", output:IMAGE */
    DepthAnythingV2Preprocessor(p: DepthAnythingV2Preprocessor_input, meta?: ComfyNodeMetadata): DepthAnythingV2Preprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"DiffusionEdge_Preprocessor", output:IMAGE */
    DiffusionEdge$_Preprocessor(p: DiffusionEdge$_Preprocessor_input, meta?: ComfyNodeMetadata): DiffusionEdge$_Preprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"DSINE-NormalMapPreprocessor", output:IMAGE */
    DSINE$7NormalMapPreprocessor(p: DSINE$7NormalMapPreprocessor_input, meta?: ComfyNodeMetadata): DSINE$7NormalMapPreprocessor
    /* category:ControlNet Preprocessors_Faces and Poses Estimators, name:"DWPreprocessor", output:IMAGE+POSE_KEYPOINT */
    DWPreprocessor(p: DWPreprocessor_input, meta?: ComfyNodeMetadata): DWPreprocessor
    /* category:ControlNet Preprocessors_Faces and Poses Estimators, name:"AnimalPosePreprocessor", output:IMAGE+POSE_KEYPOINT */
    AnimalPosePreprocessor(p: AnimalPosePreprocessor_input, meta?: ComfyNodeMetadata): AnimalPosePreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"HEDPreprocessor", output:IMAGE */
    HEDPreprocessor(p: HEDPreprocessor_input, meta?: ComfyNodeMetadata): HEDPreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"FakeScribblePreprocessor", output:IMAGE */
    FakeScribblePreprocessor(p: FakeScribblePreprocessor_input, meta?: ComfyNodeMetadata): FakeScribblePreprocessor
    /* category:ControlNet Preprocessors_others, name:"InpaintPreprocessor", output:IMAGE */
    InpaintPreprocessor(p: InpaintPreprocessor_input, meta?: ComfyNodeMetadata): InpaintPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"LeReS-DepthMapPreprocessor", output:IMAGE */
    LeReS$7DepthMapPreprocessor(p: LeReS$7DepthMapPreprocessor_input, meta?: ComfyNodeMetadata): LeReS$7DepthMapPreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"LineArtPreprocessor", output:IMAGE */
    LineArtPreprocessor(p: LineArtPreprocessor_input, meta?: ComfyNodeMetadata): LineArtPreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"AnimeLineArtPreprocessor", output:IMAGE */
    AnimeLineArtPreprocessor(p: AnimeLineArtPreprocessor_input, meta?: ComfyNodeMetadata): AnimeLineArtPreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"LineartStandardPreprocessor", output:IMAGE */
    LineartStandardPreprocessor(p: LineartStandardPreprocessor_input, meta?: ComfyNodeMetadata): LineartStandardPreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"Manga2Anime_LineArt_Preprocessor", output:IMAGE */
    Manga2Anime$_LineArt$_Preprocessor(p: Manga2Anime$_LineArt$_Preprocessor_input, meta?: ComfyNodeMetadata): Manga2Anime$_LineArt$_Preprocessor
    /* category:ControlNet Preprocessors_Faces and Poses Estimators, name:"MediaPipe-FaceMeshPreprocessor", output:IMAGE */
    MediaPipe$7FaceMeshPreprocessor(p: MediaPipe$7FaceMeshPreprocessor_input, meta?: ComfyNodeMetadata): MediaPipe$7FaceMeshPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"MeshGraphormer-DepthMapPreprocessor", output:IMAGE+INPAINTING_MASK */
    MeshGraphormer$7DepthMapPreprocessor(p: MeshGraphormer$7DepthMapPreprocessor_input, meta?: ComfyNodeMetadata): MeshGraphormer$7DepthMapPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"MeshGraphormer+ImpactDetector-DepthMapPreprocessor", output:IMAGE+INPAINTING_MASK */
    MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor(p: MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor_input, meta?: ComfyNodeMetadata): MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"Metric3D-DepthMapPreprocessor", output:IMAGE */
    Metric3D$7DepthMapPreprocessor(p: Metric3D$7DepthMapPreprocessor_input, meta?: ComfyNodeMetadata): Metric3D$7DepthMapPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"Metric3D-NormalMapPreprocessor", output:IMAGE */
    Metric3D$7NormalMapPreprocessor(p: Metric3D$7NormalMapPreprocessor_input, meta?: ComfyNodeMetadata): Metric3D$7NormalMapPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"MiDaS-NormalMapPreprocessor", output:IMAGE */
    MiDaS$7NormalMapPreprocessor(p: MiDaS$7NormalMapPreprocessor_input, meta?: ComfyNodeMetadata): MiDaS$7NormalMapPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"MiDaS-DepthMapPreprocessor", output:IMAGE */
    MiDaS$7DepthMapPreprocessor(p: MiDaS$7DepthMapPreprocessor_input, meta?: ComfyNodeMetadata): MiDaS$7DepthMapPreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"M-LSDPreprocessor", output:IMAGE */
    M$7LSDPreprocessor(p: M$7LSDPreprocessor_input, meta?: ComfyNodeMetadata): M$7LSDPreprocessor
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"BAE-NormalMapPreprocessor", output:IMAGE */
    BAE$7NormalMapPreprocessor(p: BAE$7NormalMapPreprocessor_input, meta?: ComfyNodeMetadata): BAE$7NormalMapPreprocessor
    /* category:ControlNet Preprocessors_Semantic Segmentation, name:"OneFormer-COCO-SemSegPreprocessor", output:IMAGE */
    OneFormer$7COCO$7SemSegPreprocessor(p: OneFormer$7COCO$7SemSegPreprocessor_input, meta?: ComfyNodeMetadata): OneFormer$7COCO$7SemSegPreprocessor
    /* category:ControlNet Preprocessors_Semantic Segmentation, name:"OneFormer-ADE20K-SemSegPreprocessor", output:IMAGE */
    OneFormer$7ADE20K$7SemSegPreprocessor(p: OneFormer$7ADE20K$7SemSegPreprocessor_input, meta?: ComfyNodeMetadata): OneFormer$7ADE20K$7SemSegPreprocessor
    /* category:ControlNet Preprocessors_Faces and Poses Estimators, name:"OpenposePreprocessor", output:IMAGE+POSE_KEYPOINT */
    OpenposePreprocessor(p: OpenposePreprocessor_input, meta?: ComfyNodeMetadata): OpenposePreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"PiDiNetPreprocessor", output:IMAGE */
    PiDiNetPreprocessor(p: PiDiNetPreprocessor_input, meta?: ComfyNodeMetadata): PiDiNetPreprocessor
    /* category:ControlNet Preprocessors_Pose Keypoint Postprocess, name:"SavePoseKpsAsJsonFile", output: */
    SavePoseKpsAsJsonFile(p: SavePoseKpsAsJsonFile_input, meta?: ComfyNodeMetadata): SavePoseKpsAsJsonFile
    /* category:ControlNet Preprocessors_Pose Keypoint Postprocess, name:"FacialPartColoringFromPoseKps", output:IMAGE */
    FacialPartColoringFromPoseKps(p: FacialPartColoringFromPoseKps_input, meta?: ComfyNodeMetadata): FacialPartColoringFromPoseKps
    /* category:ControlNet Preprocessors_Pose Keypoint Postprocess, name:"UpperBodyTrackingFromPoseKps", output:tracking+prompt */
    UpperBodyTrackingFromPoseKps(p: UpperBodyTrackingFromPoseKps_input, meta?: ComfyNodeMetadata): UpperBodyTrackingFromPoseKps
    /* category:ControlNet Preprocessors_Pose Keypoint Postprocess, name:"RenderPeopleKps", output:IMAGE */
    RenderPeopleKps(p: RenderPeopleKps_input, meta?: ComfyNodeMetadata): RenderPeopleKps
    /* category:ControlNet Preprocessors_Pose Keypoint Postprocess, name:"RenderAnimalKps", output:IMAGE */
    RenderAnimalKps(p: RenderAnimalKps_input, meta?: ComfyNodeMetadata): RenderAnimalKps
    /* category:ControlNet Preprocessors_Line Extractors, name:"PyraCannyPreprocessor", output:IMAGE */
    PyraCannyPreprocessor(p: PyraCannyPreprocessor_input, meta?: ComfyNodeMetadata): PyraCannyPreprocessor
    /* category:ControlNet Preprocessors_Recolor, name:"ImageLuminanceDetector", output:IMAGE */
    ImageLuminanceDetector(p: ImageLuminanceDetector_input, meta?: ComfyNodeMetadata): ImageLuminanceDetector
    /* category:ControlNet Preprocessors_Recolor, name:"ImageIntensityDetector", output:IMAGE */
    ImageIntensityDetector(p: ImageIntensityDetector_input, meta?: ComfyNodeMetadata): ImageIntensityDetector
    /* category:ControlNet Preprocessors_Line Extractors, name:"ScribblePreprocessor", output:IMAGE */
    ScribblePreprocessor(p: ScribblePreprocessor_input, meta?: ComfyNodeMetadata): ScribblePreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"Scribble_XDoG_Preprocessor", output:IMAGE */
    Scribble$_XDoG$_Preprocessor(p: Scribble$_XDoG$_Preprocessor_input, meta?: ComfyNodeMetadata): Scribble$_XDoG$_Preprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"Scribble_PiDiNet_Preprocessor", output:IMAGE */
    Scribble$_PiDiNet$_Preprocessor(p: Scribble$_PiDiNet$_Preprocessor_input, meta?: ComfyNodeMetadata): Scribble$_PiDiNet$_Preprocessor
    /* category:ControlNet Preprocessors_others, name:"SAMPreprocessor", output:IMAGE */
    SAMPreprocessor(p: SAMPreprocessor_input, meta?: ComfyNodeMetadata): SAMPreprocessor
    /* category:ControlNet Preprocessors_T2IAdapter-only, name:"ShufflePreprocessor", output:IMAGE */
    ShufflePreprocessor(p: ShufflePreprocessor_input, meta?: ComfyNodeMetadata): ShufflePreprocessor
    /* category:ControlNet Preprocessors_Line Extractors, name:"TEEDPreprocessor", output:IMAGE */
    TEEDPreprocessor(p: TEEDPreprocessor_input, meta?: ComfyNodeMetadata): TEEDPreprocessor
    /* category:ControlNet Preprocessors_tile, name:"TilePreprocessor", output:IMAGE */
    TilePreprocessor(p: TilePreprocessor_input, meta?: ComfyNodeMetadata): TilePreprocessor
    /* category:ControlNet Preprocessors_tile, name:"TTPlanet_TileGF_Preprocessor", output:IMAGE */
    TTPlanet$_TileGF$_Preprocessor(p: TTPlanet$_TileGF$_Preprocessor_input, meta?: ComfyNodeMetadata): TTPlanet$_TileGF$_Preprocessor
    /* category:ControlNet Preprocessors_tile, name:"TTPlanet_TileSimple_Preprocessor", output:IMAGE */
    TTPlanet$_TileSimple$_Preprocessor(p: TTPlanet$_TileSimple$_Preprocessor_input, meta?: ComfyNodeMetadata): TTPlanet$_TileSimple$_Preprocessor
    /* category:ControlNet Preprocessors_Semantic Segmentation, name:"UniFormer-SemSegPreprocessor", output:IMAGE */
    UniFormer$7SemSegPreprocessor(p: UniFormer$7SemSegPreprocessor_input, meta?: ComfyNodeMetadata): UniFormer$7SemSegPreprocessor
    /* category:ControlNet Preprocessors_Semantic Segmentation, name:"SemSegPreprocessor", output:IMAGE */
    SemSegPreprocessor(p: SemSegPreprocessor_input, meta?: ComfyNodeMetadata): SemSegPreprocessor
    /* category:ControlNet Preprocessors_Optical Flow, name:"Unimatch_OptFlowPreprocessor", output:OPTICAL_FLOW+PREVIEW_IMAGE */
    Unimatch$_OptFlowPreprocessor(p: Unimatch$_OptFlowPreprocessor_input, meta?: ComfyNodeMetadata): Unimatch$_OptFlowPreprocessor
    /* category:ControlNet Preprocessors_Optical Flow, name:"MaskOptFlow", output:OPTICAL_FLOW+PREVIEW_IMAGE */
    MaskOptFlow(p: MaskOptFlow_input, meta?: ComfyNodeMetadata): MaskOptFlow
    /* category:ControlNet Preprocessors_Normal and Depth Estimators, name:"Zoe-DepthMapPreprocessor", output:IMAGE */
    Zoe$7DepthMapPreprocessor(p: Zoe$7DepthMapPreprocessor_input, meta?: ComfyNodeMetadata): Zoe$7DepthMapPreprocessor
    /* category:ControlNet Preprocessors, name:"AIO_Preprocessor", output:IMAGE */
    AIO$_Preprocessor(p: AIO$_Preprocessor_input, meta?: ComfyNodeMetadata): AIO$_Preprocessor
    /* category:ControlNet Preprocessors, name:"ControlNetPreprocessorSelector", output:preprocessor */
    ControlNetPreprocessorSelector(p: ControlNetPreprocessorSelector_input, meta?: ComfyNodeMetadata): ControlNetPreprocessorSelector
    /* category:ControlNet Preprocessors, name:"PixelPerfectResolution", output:RESOLUTION$_$1INT$2 */
    PixelPerfectResolution(p: PixelPerfectResolution_input, meta?: ComfyNodeMetadata): PixelPerfectResolution
    /* category:ControlNet Preprocessors, name:"ImageGenResolutionFromImage", output:IMAGE_GEN_WIDTH$_$1INT$2+IMAGE_GEN_HEIGHT$_$1INT$2 */
    ImageGenResolutionFromImage(p: ImageGenResolutionFromImage_input, meta?: ComfyNodeMetadata): ImageGenResolutionFromImage
    /* category:ControlNet Preprocessors, name:"ImageGenResolutionFromLatent", output:IMAGE_GEN_WIDTH$_$1INT$2+IMAGE_GEN_HEIGHT$_$1INT$2 */
    ImageGenResolutionFromLatent(p: ImageGenResolutionFromLatent_input, meta?: ComfyNodeMetadata): ImageGenResolutionFromLatent
    /* category:ControlNet Preprocessors, name:"HintImageEnchance", output:IMAGE */
    HintImageEnchance(p: HintImageEnchance_input, meta?: ComfyNodeMetadata): HintImageEnchance
    /* category:ControlNet Preprocessors, name:"ExecuteAllControlNetPreprocessors", output:IMAGE */
    ExecuteAllControlNetPreprocessors(p: ExecuteAllControlNetPreprocessors_input, meta?: ComfyNodeMetadata): ExecuteAllControlNetPreprocessors
    /* category:ControlNet Preprocessors, name:"ControlNetAuxSimpleAddText", output:IMAGE */
    ControlNetAuxSimpleAddText(p: ControlNetAuxSimpleAddText_input, meta?: ComfyNodeMetadata): ControlNetAuxSimpleAddText
    /* category:conditioning_cutoff, name:"BNK_CutoffBasePrompt", output:CLIPREGION */
    BNK$_CutoffBasePrompt(p: BNK$_CutoffBasePrompt_input, meta?: ComfyNodeMetadata): BNK$_CutoffBasePrompt
    /* category:conditioning_cutoff, name:"BNK_CutoffSetRegions", output:CLIPREGION */
    BNK$_CutoffSetRegions(p: BNK$_CutoffSetRegions_input, meta?: ComfyNodeMetadata): BNK$_CutoffSetRegions
    /* category:conditioning_cutoff, name:"BNK_CutoffRegionsToConditioning", output:CONDITIONING */
    BNK$_CutoffRegionsToConditioning(p: BNK$_CutoffRegionsToConditioning_input, meta?: ComfyNodeMetadata): BNK$_CutoffRegionsToConditioning
    /* category:conditioning_cutoff, name:"BNK_CutoffRegionsToConditioning_ADV", output:CONDITIONING */
    BNK$_CutoffRegionsToConditioning$_ADV(p: BNK$_CutoffRegionsToConditioning$_ADV_input, meta?: ComfyNodeMetadata): BNK$_CutoffRegionsToConditioning$_ADV
    /* category:essentials_conditioning, name:"CLIPTextEncodeSDXL+", output:CONDITIONING */
    CLIPTextEncodeSDXL$6(p: CLIPTextEncodeSDXL$6_input, meta?: ComfyNodeMetadata): CLIPTextEncodeSDXL$6
    /* category:essentials_conditioning, name:"ConditioningCombineMultiple+", output:CONDITIONING */
    ConditioningCombineMultiple$6(p: ConditioningCombineMultiple$6_input, meta?: ComfyNodeMetadata): ConditioningCombineMultiple$6
    /* category:essentials_conditioning, name:"SD3NegativeConditioning+", output:CONDITIONING */
    SD3NegativeConditioning$6(p: SD3NegativeConditioning$6_input, meta?: ComfyNodeMetadata): SD3NegativeConditioning$6
    /* category:essentials_conditioning, name:"FluxAttentionSeeker+", output:CLIP */
    FluxAttentionSeeker$6(p: FluxAttentionSeeker$6_input, meta?: ComfyNodeMetadata): FluxAttentionSeeker$6
    /* category:essentials_conditioning, name:"SD3AttentionSeekerLG+", output:CLIP */
    SD3AttentionSeekerLG$6(p: SD3AttentionSeekerLG$6_input, meta?: ComfyNodeMetadata): SD3AttentionSeekerLG$6
    /* category:essentials_conditioning, name:"SD3AttentionSeekerT5+", output:CLIP */
    SD3AttentionSeekerT5$6(p: SD3AttentionSeekerT5$6_input, meta?: ComfyNodeMetadata): SD3AttentionSeekerT5$6
    /* category:essentials_conditioning, name:"FluxBlocksBuster+", output:MODEL+patched_blocks */
    FluxBlocksBuster$6(p: FluxBlocksBuster$6_input, meta?: ComfyNodeMetadata): FluxBlocksBuster$6
    /* category:essentials_image analysis, name:"ImageEnhanceDifference+", output:IMAGE */
    ImageEnhanceDifference$6(p: ImageEnhanceDifference$6_input, meta?: ComfyNodeMetadata): ImageEnhanceDifference$6
    /* category:essentials_image batch, name:"ImageBatchMultiple+", output:IMAGE */
    ImageBatchMultiple$6(p: ImageBatchMultiple$6_input, meta?: ComfyNodeMetadata): ImageBatchMultiple$6
    /* category:essentials_image batch, name:"ImageExpandBatch+", output:IMAGE */
    ImageExpandBatch$6(p: ImageExpandBatch$6_input, meta?: ComfyNodeMetadata): ImageExpandBatch$6
    /* category:essentials_image batch, name:"ImageFromBatch+", output:IMAGE */
    ImageFromBatch$6(p: ImageFromBatch$6_input, meta?: ComfyNodeMetadata): ImageFromBatch$6
    /* category:essentials_image batch, name:"ImageListToBatch+", output:IMAGE */
    ImageListToBatch$6(p: ImageListToBatch$6_input, meta?: ComfyNodeMetadata): ImageListToBatch$6
    /* category:essentials_image batch, name:"ImageBatchToList+", output:IMAGE */
    ImageBatchToList$6(p: ImageBatchToList$6_input, meta?: ComfyNodeMetadata): ImageBatchToList$6
    /* category:essentials_image manipulation, name:"ImageCompositeFromMaskBatch+", output:IMAGE */
    ImageCompositeFromMaskBatch$6(p: ImageCompositeFromMaskBatch$6_input, meta?: ComfyNodeMetadata): ImageCompositeFromMaskBatch$6
    /* category:essentials_image manipulation, name:"ImageComposite+", output:IMAGE */
    ImageComposite$6(p: ImageComposite$6_input, meta?: ComfyNodeMetadata): ImageComposite$6
    /* category:essentials_image manipulation, name:"ImageCrop+", output:IMAGE+x+y */
    ImageCrop$6(p: ImageCrop$6_input, meta?: ComfyNodeMetadata): ImageCrop$6
    /* category:essentials_image manipulation, name:"ImageFlip+", output:IMAGE */
    ImageFlip$6(p: ImageFlip$6_input, meta?: ComfyNodeMetadata): ImageFlip$6
    /* category:essentials_image manipulation, name:"ImageRandomTransform+", output:IMAGE */
    ImageRandomTransform$6(p: ImageRandomTransform$6_input, meta?: ComfyNodeMetadata): ImageRandomTransform$6
    /* category:essentials_image utils, name:"ImageRemoveAlpha+", output:IMAGE */
    ImageRemoveAlpha$6(p: ImageRemoveAlpha$6_input, meta?: ComfyNodeMetadata): ImageRemoveAlpha$6
    /* category:essentials_image manipulation, name:"ImageRemoveBackground+", output:IMAGE+MASK */
    ImageRemoveBackground$6(p: ImageRemoveBackground$6_input, meta?: ComfyNodeMetadata): ImageRemoveBackground$6
    /* category:essentials_image manipulation, name:"ImageResize+", output:IMAGE+width+height */
    ImageResize$6(p: ImageResize$6_input, meta?: ComfyNodeMetadata): ImageResize$6
    /* category:essentials_image manipulation, name:"ImageSeamCarving+", output:IMAGE */
    ImageSeamCarving$6(p: ImageSeamCarving$6_input, meta?: ComfyNodeMetadata): ImageSeamCarving$6
    /* category:essentials_image manipulation, name:"ImageTile+", output:IMAGE+tile_width+tile_height+overlap_x+overlap_y */
    ImageTile$6(p: ImageTile$6_input, meta?: ComfyNodeMetadata): ImageTile$6
    /* category:essentials_image manipulation, name:"ImageUntile+", output:IMAGE */
    ImageUntile$6(p: ImageUntile$6_input, meta?: ComfyNodeMetadata): ImageUntile$6
    /* category:essentials_image manipulation, name:"RemBGSession+", output:REMBG_SESSION */
    RemBGSession$6(p: RemBGSession$6_input, meta?: ComfyNodeMetadata): RemBGSession$6
    /* category:essentials_image manipulation, name:"TransparentBGSession+", output:REMBG_SESSION */
    TransparentBGSession$6(p: TransparentBGSession$6_input, meta?: ComfyNodeMetadata): TransparentBGSession$6
    /* category:essentials_image processing, name:"ImageApplyLUT+", output:IMAGE */
    ImageApplyLUT$6(p: ImageApplyLUT$6_input, meta?: ComfyNodeMetadata): ImageApplyLUT$6
    /* category:essentials_image processing, name:"ImageCASharpening+", output:IMAGE */
    ImageCASharpening$6(p: ImageCASharpening$6_input, meta?: ComfyNodeMetadata): ImageCASharpening$6
    /* category:essentials_image processing, name:"ImageDesaturate+", output:IMAGE */
    ImageDesaturate$6(p: ImageDesaturate$6_input, meta?: ComfyNodeMetadata): ImageDesaturate$6
    /* category:essentials_image processing, name:"PixelOEPixelize+", output:IMAGE */
    PixelOEPixelize$6(p: PixelOEPixelize$6_input, meta?: ComfyNodeMetadata): PixelOEPixelize$6
    /* category:essentials_image processing, name:"ImagePosterize+", output:IMAGE */
    ImagePosterize$6(p: ImagePosterize$6_input, meta?: ComfyNodeMetadata): ImagePosterize$6
    /* category:essentials_image processing, name:"ImageColorMatch+", output:IMAGE */
    ImageColorMatch$6(p: ImageColorMatch$6_input, meta?: ComfyNodeMetadata): ImageColorMatch$6
    /* category:essentials_image processing, name:"ImageColorMatchAdobe+", output:IMAGE */
    ImageColorMatchAdobe$6(p: ImageColorMatchAdobe$6_input, meta?: ComfyNodeMetadata): ImageColorMatchAdobe$6
    /* category:essentials_image processing, name:"ImageHistogramMatch+", output:IMAGE */
    ImageHistogramMatch$6(p: ImageHistogramMatch$6_input, meta?: ComfyNodeMetadata): ImageHistogramMatch$6
    /* category:essentials_image processing, name:"ImageSmartSharpen+", output:IMAGE */
    ImageSmartSharpen$6(p: ImageSmartSharpen$6_input, meta?: ComfyNodeMetadata): ImageSmartSharpen$6
    /* category:essentials_image utils, name:"GetImageSize+", output:width+height+count */
    GetImageSize$6(p: GetImageSize$6_input, meta?: ComfyNodeMetadata): GetImageSize$6
    /* category:essentials_image utils, name:"ImageToDevice+", output:IMAGE */
    ImageToDevice$6(p: ImageToDevice$6_input, meta?: ComfyNodeMetadata): ImageToDevice$6
    /* category:essentials_image utils, name:"ImagePreviewFromLatent+", output:IMAGE+MASK+width+height */
    ImagePreviewFromLatent$6(p: ImagePreviewFromLatent$6_input, meta?: ComfyNodeMetadata): ImagePreviewFromLatent$6
    /* category:essentials_image utils, name:"NoiseFromImage+", output:IMAGE */
    NoiseFromImage$6(p: NoiseFromImage$6_input, meta?: ComfyNodeMetadata): NoiseFromImage$6
    /* category:essentials_mask, name:"MaskBlur+", output:MASK */
    MaskBlur$6(p: MaskBlur$6_input, meta?: ComfyNodeMetadata): MaskBlur$6
    /* category:essentials_mask, name:"MaskBoundingBox+", output:MASK+IMAGE+x+y+width+height */
    MaskBoundingBox$6(p: MaskBoundingBox$6_input, meta?: ComfyNodeMetadata): MaskBoundingBox$6
    /* category:essentials_mask, name:"MaskFix+", output:MASK */
    MaskFix$6(p: MaskFix$6_input, meta?: ComfyNodeMetadata): MaskFix$6
    /* category:essentials_mask, name:"MaskFlip+", output:MASK */
    MaskFlip$6(p: MaskFlip$6_input, meta?: ComfyNodeMetadata): MaskFlip$6
    /* category:essentials_mask, name:"MaskFromColor+", output:MASK */
    MaskFromColor$6(p: MaskFromColor$6_input, meta?: ComfyNodeMetadata): MaskFromColor$6
    /* category:essentials_mask, name:"MaskFromList+", output:MASK */
    MaskFromList$6(p: MaskFromList$6_input, meta?: ComfyNodeMetadata): MaskFromList$6
    /* category:essentials_mask, name:"MaskFromRGBCMYBW+", output:red+green+blue+cyan+magenta+yellow+black+white */
    MaskFromRGBCMYBW$6(p: MaskFromRGBCMYBW$6_input, meta?: ComfyNodeMetadata): MaskFromRGBCMYBW$6
    /* category:essentials_mask, name:"MaskFromSegmentation+", output:MASK */
    MaskFromSegmentation$6(p: MaskFromSegmentation$6_input, meta?: ComfyNodeMetadata): MaskFromSegmentation$6
    /* category:essentials_mask, name:"MaskPreview+", output: */
    MaskPreview$6(p: MaskPreview$6_input, meta?: ComfyNodeMetadata): MaskPreview$6
    /* category:essentials_mask, name:"MaskSmooth+", output:MASK */
    MaskSmooth$6(p: MaskSmooth$6_input, meta?: ComfyNodeMetadata): MaskSmooth$6
    /* category:essentials_mask, name:"TransitionMask+", output:MASK */
    TransitionMask$6(p: TransitionMask$6_input, meta?: ComfyNodeMetadata): TransitionMask$6
    /* category:essentials_mask batch, name:"MaskBatch+", output:MASK */
    MaskBatch$6(p: MaskBatch$6_input, meta?: ComfyNodeMetadata): MaskBatch$6
    /* category:essentials_mask batch, name:"MaskExpandBatch+", output:MASK */
    MaskExpandBatch$6(p: MaskExpandBatch$6_input, meta?: ComfyNodeMetadata): MaskExpandBatch$6
    /* category:essentials_mask batch, name:"MaskFromBatch+", output:MASK */
    MaskFromBatch$6(p: MaskFromBatch$6_input, meta?: ComfyNodeMetadata): MaskFromBatch$6
    /* category:essentials_sampling, name:"KSamplerVariationsStochastic+", output:LATENT */
    KSamplerVariationsStochastic$6(p: KSamplerVariationsStochastic$6_input, meta?: ComfyNodeMetadata): KSamplerVariationsStochastic$6
    /* category:essentials_sampling, name:"KSamplerVariationsWithNoise+", output:LATENT */
    KSamplerVariationsWithNoise$6(p: KSamplerVariationsWithNoise$6_input, meta?: ComfyNodeMetadata): KSamplerVariationsWithNoise$6
    /* category:essentials_sampling, name:"InjectLatentNoise+", output:LATENT */
    InjectLatentNoise$6(p: InjectLatentNoise$6_input, meta?: ComfyNodeMetadata): InjectLatentNoise$6
    /* category:essentials_sampling, name:"FluxSamplerParams+", output:latent+params */
    FluxSamplerParams$6(p: FluxSamplerParams$6_input, meta?: ComfyNodeMetadata): FluxSamplerParams$6
    /* category:essentials_sampling, name:"GuidanceTimestepping+", output:MODEL */
    GuidanceTimestepping$6(p: GuidanceTimestepping$6_input, meta?: ComfyNodeMetadata): GuidanceTimestepping$6
    /* category:essentials_sampling, name:"PlotParameters+", output:IMAGE */
    PlotParameters$6(p: PlotParameters$6_input, meta?: ComfyNodeMetadata): PlotParameters$6
    /* category:essentials_sampling, name:"TextEncodeForSamplerParams+", output:CONDITIONING */
    TextEncodeForSamplerParams$6(p: TextEncodeForSamplerParams$6_input, meta?: ComfyNodeMetadata): TextEncodeForSamplerParams$6
    /* category:essentials_sampling, name:"SamplerSelectHelper+", output:STRING */
    SamplerSelectHelper$6(p: SamplerSelectHelper$6_input, meta?: ComfyNodeMetadata): SamplerSelectHelper$6
    /* category:essentials_sampling, name:"SchedulerSelectHelper+", output:STRING */
    SchedulerSelectHelper$6(p: SchedulerSelectHelper$6_input, meta?: ComfyNodeMetadata): SchedulerSelectHelper$6
    /* category:essentials_sampling, name:"LorasForFluxParams+", output:LORA_PARAMS */
    LorasForFluxParams$6(p: LorasForFluxParams$6_input, meta?: ComfyNodeMetadata): LorasForFluxParams$6
    /* category:essentials_sampling, name:"ModelSamplingSD3Advanced+", output:MODEL */
    ModelSamplingSD3Advanced$6(p: ModelSamplingSD3Advanced$6_input, meta?: ComfyNodeMetadata): ModelSamplingSD3Advanced$6
    /* category:essentials_segmentation, name:"ApplyCLIPSeg+", output:MASK */
    ApplyCLIPSeg$6(p: ApplyCLIPSeg$6_input, meta?: ComfyNodeMetadata): ApplyCLIPSeg$6
    /* category:essentials_segmentation, name:"LoadCLIPSegModels+", output:CLIP_SEG */
    LoadCLIPSegModels$6(p: LoadCLIPSegModels$6_input, meta?: ComfyNodeMetadata): LoadCLIPSegModels$6
    /* category:essentials_text, name:"DrawText+", output:IMAGE+MASK */
    DrawText$6(p: DrawText$6_input, meta?: ComfyNodeMetadata): DrawText$6
    /* category:essentials_utilities, name:"BatchCount+", output:INT */
    BatchCount$6(p: BatchCount$6_input, meta?: ComfyNodeMetadata): BatchCount$6
    /* category:essentials_utilities, name:"ConsoleDebug+", output: */
    ConsoleDebug$6(p: ConsoleDebug$6_input, meta?: ComfyNodeMetadata): ConsoleDebug$6
    /* category:essentials_utilities, name:"DebugTensorShape+", output: */
    DebugTensorShape$6(p: DebugTensorShape$6_input, meta?: ComfyNodeMetadata): DebugTensorShape$6
    /* category:essentials_utilities, name:"DisplayAny", output:STRING */
    DisplayAny(p: DisplayAny_input, meta?: ComfyNodeMetadata): DisplayAny
    /* category:essentials_utilities, name:"ModelCompile+", output:MODEL */
    ModelCompile$6(p: ModelCompile$6_input, meta?: ComfyNodeMetadata): ModelCompile$6
    /* category:essentials_utilities, name:"RemoveLatentMask+", output:LATENT */
    RemoveLatentMask$6(p: RemoveLatentMask$6_input, meta?: ComfyNodeMetadata): RemoveLatentMask$6
    /* category:essentials_utilities, name:"SDXLEmptyLatentSizePicker+", output:LATENT+width+height */
    SDXLEmptyLatentSizePicker$6(p: SDXLEmptyLatentSizePicker$6_input, meta?: ComfyNodeMetadata): SDXLEmptyLatentSizePicker$6
    /* category:essentials_utilities, name:"SimpleComparison+", output:BOOLEAN */
    SimpleComparison$6(p: SimpleComparison$6_input, meta?: ComfyNodeMetadata): SimpleComparison$6
    /* category:essentials_utilities, name:"SimpleCondition+", output:result */
    SimpleCondition$6(p: SimpleCondition$6_input, meta?: ComfyNodeMetadata): SimpleCondition$6
    /* category:essentials_utilities, name:"SimpleMath+", output:INT+FLOAT */
    SimpleMath$6(p: SimpleMath$6_input, meta?: ComfyNodeMetadata): SimpleMath$6
    /* category:essentials_utilities, name:"SimpleMathDual+", output:int_1+float_1+int_2+float_2 */
    SimpleMathDual$6(p: SimpleMathDual$6_input, meta?: ComfyNodeMetadata): SimpleMathDual$6
    /* category:essentials_utilities, name:"SimpleMathCondition+", output:INT+FLOAT */
    SimpleMathCondition$6(p: SimpleMathCondition$6_input, meta?: ComfyNodeMetadata): SimpleMathCondition$6
    /* category:essentials_utilities, name:"SimpleMathBoolean+", output:BOOLEAN */
    SimpleMathBoolean$6(p: SimpleMathBoolean$6_input, meta?: ComfyNodeMetadata): SimpleMathBoolean$6
    /* category:essentials_utilities, name:"SimpleMathFloat+", output:FLOAT */
    SimpleMathFloat$6(p: SimpleMathFloat$6_input, meta?: ComfyNodeMetadata): SimpleMathFloat$6
    /* category:essentials_utilities, name:"SimpleMathInt+", output:INT */
    SimpleMathInt$6(p: SimpleMathInt$6_input, meta?: ComfyNodeMetadata): SimpleMathInt$6
    /* category:essentials_utilities, name:"SimpleMathPercent+", output:FLOAT */
    SimpleMathPercent$6(p: SimpleMathPercent$6_input, meta?: ComfyNodeMetadata): SimpleMathPercent$6
    /* category:essentials_utilities, name:"SimpleMathSlider+", output:FLOAT+INT */
    SimpleMathSlider$6(p: SimpleMathSlider$6_input, meta?: ComfyNodeMetadata): SimpleMathSlider$6
    /* category:essentials_utilities, name:"SimpleMathSliderLowRes+", output:FLOAT+INT */
    SimpleMathSliderLowRes$6(p: SimpleMathSliderLowRes$6_input, meta?: ComfyNodeMetadata): SimpleMathSliderLowRes$6
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"Lerp", output:FLOAT+INT */
    Lerp(p: Lerp_input, meta?: ComfyNodeMetadata): Lerp
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"SinWave", output:FLOAT+INT */
    SinWave(p: SinWave_input, meta?: ComfyNodeMetadata): SinWave
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"InvSinWave", output:FLOAT+INT */
    InvSinWave(p: InvSinWave_input, meta?: ComfyNodeMetadata): InvSinWave
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"CosWave", output:FLOAT+INT */
    CosWave(p: CosWave_input, meta?: ComfyNodeMetadata): CosWave
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"InvCosWave", output:FLOAT+INT */
    InvCosWave(p: InvCosWave_input, meta?: ComfyNodeMetadata): InvCosWave
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"SquareWave", output:FLOAT+INT */
    SquareWave(p: SquareWave_input, meta?: ComfyNodeMetadata): SquareWave
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"SawtoothWave", output:FLOAT+INT */
    SawtoothWave(p: SawtoothWave_input, meta?: ComfyNodeMetadata): SawtoothWave
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"TriangleWave", output:FLOAT+INT */
    TriangleWave(p: TriangleWave_input, meta?: ComfyNodeMetadata): TriangleWave
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"AbsCosWave", output:FLOAT+INT */
    AbsCosWave(p: AbsCosWave_input, meta?: ComfyNodeMetadata): AbsCosWave
    /* category:FizzNodes 📅🅕🅝_WaveNodes, name:"AbsSinWave", output:FLOAT+INT */
    AbsSinWave(p: AbsSinWave_input, meta?: ComfyNodeMetadata): AbsSinWave
    /* category:FizzNodes 📅🅕🅝_ScheduleNodes, name:"PromptSchedule", output:POS+NEG */
    PromptSchedule(p: PromptSchedule_input, meta?: ComfyNodeMetadata): PromptSchedule
    /* category:FizzNodes 📅🅕🅝_ScheduleNodes, name:"ValueSchedule", output:FLOAT+INT */
    ValueSchedule(p: ValueSchedule_input, meta?: ComfyNodeMetadata): ValueSchedule
    /* category:FizzNodes 📅🅕🅝_ScheduleNodes, name:"PromptScheduleNodeFlow", output:INT+STRING */
    PromptScheduleNodeFlow(p: PromptScheduleNodeFlow_input, meta?: ComfyNodeMetadata): PromptScheduleNodeFlow
    /* category:FizzNodes 📅🅕🅝_ScheduleNodes, name:"PromptScheduleNodeFlowEnd", output:POS+NEG */
    PromptScheduleNodeFlowEnd(p: PromptScheduleNodeFlowEnd_input, meta?: ComfyNodeMetadata): PromptScheduleNodeFlowEnd
    /* category:FizzNodes 📅🅕🅝_ScheduleNodes, name:"PromptScheduleEncodeSDXL", output:POS+NEG */
    PromptScheduleEncodeSDXL(p: PromptScheduleEncodeSDXL_input, meta?: ComfyNodeMetadata): PromptScheduleEncodeSDXL
    /* category:FizzNodes 📅🅕🅝_ScheduleNodes, name:"StringSchedule", output:POS+NEG */
    StringSchedule(p: StringSchedule_input, meta?: ComfyNodeMetadata): StringSchedule
    /* category:FizzNodes 📅🅕🅝_BatchScheduleNodes, name:"BatchPromptSchedule", output:POS+NEG */
    BatchPromptSchedule(p: BatchPromptSchedule_input, meta?: ComfyNodeMetadata): BatchPromptSchedule
    /* category:FizzNodes 📅🅕🅝_BatchScheduleNodes, name:"BatchValueSchedule", output:FLOAT+INT */
    BatchValueSchedule(p: BatchValueSchedule_input, meta?: ComfyNodeMetadata): BatchValueSchedule
    /* category:FizzNodes 📅🅕🅝_BatchScheduleNodes, name:"BatchPromptScheduleEncodeSDXL", output:POS+NEG */
    BatchPromptScheduleEncodeSDXL(p: BatchPromptScheduleEncodeSDXL_input, meta?: ComfyNodeMetadata): BatchPromptScheduleEncodeSDXL
    /* category:FizzNodes 📅🅕🅝_BatchScheduleNodes, name:"BatchStringSchedule", output:POS+NEG */
    BatchStringSchedule(p: BatchStringSchedule_input, meta?: ComfyNodeMetadata): BatchStringSchedule
    /* category:FizzNodes 📅🅕🅝_BatchScheduleNodes, name:"BatchValueScheduleLatentInput", output:FLOAT+INT+LATENT */
    BatchValueScheduleLatentInput(p: BatchValueScheduleLatentInput_input, meta?: ComfyNodeMetadata): BatchValueScheduleLatentInput
    /* category:FizzNodes 📅🅕🅝_BatchScheduleNodes, name:"BatchPromptScheduleSDXLLatentInput", output:POS+NEG+INPUT_LATENTS */
    BatchPromptScheduleSDXLLatentInput(p: BatchPromptScheduleSDXLLatentInput_input, meta?: ComfyNodeMetadata): BatchPromptScheduleSDXLLatentInput
    /* category:FizzNodes 📅🅕🅝_BatchScheduleNodes, name:"BatchPromptScheduleLatentInput", output:POS+NEG+INPUT_LATENTS */
    BatchPromptScheduleLatentInput(p: BatchPromptScheduleLatentInput_input, meta?: ComfyNodeMetadata): BatchPromptScheduleLatentInput
    /* category:FizzNodes 📅🅕🅝_ScheduleNodes, name:"ImagesFromBatchSchedule", output:IMAGE */
    ImagesFromBatchSchedule(p: ImagesFromBatchSchedule_input, meta?: ComfyNodeMetadata): ImagesFromBatchSchedule
    /* category:FizzNodes 📅🅕🅝_FrameNodes, name:"StringConcatenate", output:STRING */
    StringConcatenate(p: StringConcatenate_input, meta?: ComfyNodeMetadata): StringConcatenate
    /* category:FizzNodes 📅🅕🅝_FrameNodes, name:"Init FizzFrame", output:FIZZFRAME+POS_COND+NEG_COND */
    Init_FizzFrame(p: Init_FizzFrame_input, meta?: ComfyNodeMetadata): Init_FizzFrame
    /* category:FizzNodes 📅🅕🅝_FrameNodes, name:"FizzFrame", output:FIZZFRAME+POS_COND+NEG_COND */
    FizzFrame(p: FizzFrame_input, meta?: ComfyNodeMetadata): FizzFrame
    /* category:FizzNodes 📅🅕🅝_FrameNodes, name:"FizzFrameConcatenate", output:STRING */
    FizzFrameConcatenate(p: FizzFrameConcatenate_input, meta?: ComfyNodeMetadata): FizzFrameConcatenate
    /* category:FizzNodes 📅🅕🅝_HelperNodes, name:"ConcatStringSingle", output:STRING */
    ConcatStringSingle(p: ConcatStringSingle_input, meta?: ComfyNodeMetadata): ConcatStringSingle
    /* category:FizzNodes 📅🅕🅝_HelperNodes, name:"convertKeyframeKeysToBatchKeys", output:INT */
    convertKeyframeKeysToBatchKeys(p: convertKeyframeKeysToBatchKeys_input, meta?: ComfyNodeMetadata): convertKeyframeKeysToBatchKeys
    /* category:FizzNodes 📅🅕🅝_HelperNodes, name:"CalculateFrameOffset", output:INT */
    CalculateFrameOffset(p: CalculateFrameOffset_input, meta?: ComfyNodeMetadata): CalculateFrameOffset
    /* category:ipadapter, name:"IPAdapter", output:MODEL */
    IPAdapter(p: IPAdapter_input, meta?: ComfyNodeMetadata): IPAdapter
    /* category:ipadapter, name:"IPAdapterAdvanced", output:MODEL */
    IPAdapterAdvanced(p: IPAdapterAdvanced_input, meta?: ComfyNodeMetadata): IPAdapterAdvanced
    /* category:ipadapter, name:"IPAdapterBatch", output:MODEL */
    IPAdapterBatch(p: IPAdapterBatch_input, meta?: ComfyNodeMetadata): IPAdapterBatch
    /* category:ipadapter_faceid, name:"IPAdapterFaceID", output:MODEL+face_image */
    IPAdapterFaceID(p: IPAdapterFaceID_input, meta?: ComfyNodeMetadata): IPAdapterFaceID
    /* category:ipadapter_faceid, name:"IPAdapterFaceIDKolors", output:MODEL+face_image */
    IPAdapterFaceIDKolors(p: IPAdapterFaceIDKolors_input, meta?: ComfyNodeMetadata): IPAdapterFaceIDKolors
    /* category:ipadapter_faceid, name:"IPAAdapterFaceIDBatch", output:MODEL+face_image */
    IPAAdapterFaceIDBatch(p: IPAAdapterFaceIDBatch_input, meta?: ComfyNodeMetadata): IPAAdapterFaceIDBatch
    /* category:ipadapter_tiled, name:"IPAdapterTiled", output:MODEL+tiles+masks */
    IPAdapterTiled(p: IPAdapterTiled_input, meta?: ComfyNodeMetadata): IPAdapterTiled
    /* category:ipadapter_tiled, name:"IPAdapterTiledBatch", output:MODEL+tiles+masks */
    IPAdapterTiledBatch(p: IPAdapterTiledBatch_input, meta?: ComfyNodeMetadata): IPAdapterTiledBatch
    /* category:ipadapter_embeds, name:"IPAdapterEmbeds", output:MODEL */
    IPAdapterEmbeds(p: IPAdapterEmbeds_input, meta?: ComfyNodeMetadata): IPAdapterEmbeds
    /* category:ipadapter_embeds, name:"IPAdapterEmbedsBatch", output:MODEL */
    IPAdapterEmbedsBatch(p: IPAdapterEmbedsBatch_input, meta?: ComfyNodeMetadata): IPAdapterEmbedsBatch
    /* category:ipadapter_style_composition, name:"IPAdapterStyleComposition", output:MODEL */
    IPAdapterStyleComposition(p: IPAdapterStyleComposition_input, meta?: ComfyNodeMetadata): IPAdapterStyleComposition
    /* category:ipadapter_style_composition, name:"IPAdapterStyleCompositionBatch", output:MODEL */
    IPAdapterStyleCompositionBatch(p: IPAdapterStyleCompositionBatch_input, meta?: ComfyNodeMetadata): IPAdapterStyleCompositionBatch
    /* category:ipadapter_dev, name:"IPAdapterMS", output:MODEL */
    IPAdapterMS(p: IPAdapterMS_input, meta?: ComfyNodeMetadata): IPAdapterMS
    /* category:ipadapter_dev, name:"IPAdapterClipVisionEnhancer", output:MODEL */
    IPAdapterClipVisionEnhancer(p: IPAdapterClipVisionEnhancer_input, meta?: ComfyNodeMetadata): IPAdapterClipVisionEnhancer
    /* category:ipadapter_dev, name:"IPAdapterClipVisionEnhancerBatch", output:MODEL */
    IPAdapterClipVisionEnhancerBatch(p: IPAdapterClipVisionEnhancerBatch_input, meta?: ComfyNodeMetadata): IPAdapterClipVisionEnhancerBatch
    /* category:ipadapter_params, name:"IPAdapterFromParams", output:MODEL */
    IPAdapterFromParams(p: IPAdapterFromParams_input, meta?: ComfyNodeMetadata): IPAdapterFromParams
    /* category:ipadapter, name:"IPAdapterPreciseStyleTransfer", output:MODEL */
    IPAdapterPreciseStyleTransfer(p: IPAdapterPreciseStyleTransfer_input, meta?: ComfyNodeMetadata): IPAdapterPreciseStyleTransfer
    /* category:ipadapter, name:"IPAdapterPreciseStyleTransferBatch", output:MODEL */
    IPAdapterPreciseStyleTransferBatch(p: IPAdapterPreciseStyleTransferBatch_input, meta?: ComfyNodeMetadata): IPAdapterPreciseStyleTransferBatch
    /* category:ipadapter, name:"IPAdapterPreciseComposition", output:MODEL */
    IPAdapterPreciseComposition(p: IPAdapterPreciseComposition_input, meta?: ComfyNodeMetadata): IPAdapterPreciseComposition
    /* category:ipadapter, name:"IPAdapterPreciseCompositionBatch", output:MODEL */
    IPAdapterPreciseCompositionBatch(p: IPAdapterPreciseCompositionBatch_input, meta?: ComfyNodeMetadata): IPAdapterPreciseCompositionBatch
    /* category:ipadapter, name:"IPAdapterUnifiedLoader", output:model+ipadapter */
    IPAdapterUnifiedLoader(p: IPAdapterUnifiedLoader_input, meta?: ComfyNodeMetadata): IPAdapterUnifiedLoader
    /* category:ipadapter_faceid, name:"IPAdapterUnifiedLoaderFaceID", output:MODEL+ipadapter */
    IPAdapterUnifiedLoaderFaceID(p: IPAdapterUnifiedLoaderFaceID_input, meta?: ComfyNodeMetadata): IPAdapterUnifiedLoaderFaceID
    /* category:ipadapter_loaders, name:"IPAdapterModelLoader", output:IPADAPTER */
    IPAdapterModelLoader(p: IPAdapterModelLoader_input, meta?: ComfyNodeMetadata): IPAdapterModelLoader
    /* category:ipadapter_loaders, name:"IPAdapterInsightFaceLoader", output:INSIGHTFACE */
    IPAdapterInsightFaceLoader(p: IPAdapterInsightFaceLoader_input, meta?: ComfyNodeMetadata): IPAdapterInsightFaceLoader
    /* category:ipadapter_loaders, name:"IPAdapterUnifiedLoaderCommunity", output:model+ipadapter */
    IPAdapterUnifiedLoaderCommunity(p: IPAdapterUnifiedLoaderCommunity_input, meta?: ComfyNodeMetadata): IPAdapterUnifiedLoaderCommunity
    /* category:ipadapter_embeds, name:"IPAdapterEncoder", output:pos_embed+neg_embed */
    IPAdapterEncoder(p: IPAdapterEncoder_input, meta?: ComfyNodeMetadata): IPAdapterEncoder
    /* category:ipadapter_embeds, name:"IPAdapterCombineEmbeds", output:EMBEDS */
    IPAdapterCombineEmbeds(p: IPAdapterCombineEmbeds_input, meta?: ComfyNodeMetadata): IPAdapterCombineEmbeds
    /* category:ipadapter_utils, name:"IPAdapterNoise", output:IMAGE */
    IPAdapterNoise(p: IPAdapterNoise_input, meta?: ComfyNodeMetadata): IPAdapterNoise
    /* category:ipadapter_utils, name:"PrepImageForClipVision", output:IMAGE */
    PrepImageForClipVision(p: PrepImageForClipVision_input, meta?: ComfyNodeMetadata): PrepImageForClipVision
    /* category:ipadapter_embeds, name:"IPAdapterSaveEmbeds", output: */
    IPAdapterSaveEmbeds(p: IPAdapterSaveEmbeds_input, meta?: ComfyNodeMetadata): IPAdapterSaveEmbeds
    /* category:ipadapter_embeds, name:"IPAdapterLoadEmbeds", output:EMBEDS */
    IPAdapterLoadEmbeds(p: IPAdapterLoadEmbeds_input, meta?: ComfyNodeMetadata): IPAdapterLoadEmbeds
    /* category:ipadapter_weights, name:"IPAdapterWeights", output:weights+weights_invert+total_frames+image_1+image_2+weights_strategy */
    IPAdapterWeights(p: IPAdapterWeights_input, meta?: ComfyNodeMetadata): IPAdapterWeights
    /* category:ipadapter_utils, name:"IPAdapterCombineWeights", output:weights+count */
    IPAdapterCombineWeights(p: IPAdapterCombineWeights_input, meta?: ComfyNodeMetadata): IPAdapterCombineWeights
    /* category:ipadapter_weights, name:"IPAdapterWeightsFromStrategy", output:weights+weights_invert+total_frames+image_1+image_2+weights_strategy */
    IPAdapterWeightsFromStrategy(p: IPAdapterWeightsFromStrategy_input, meta?: ComfyNodeMetadata): IPAdapterWeightsFromStrategy
    /* category:ipadapter_weights, name:"IPAdapterPromptScheduleFromWeightsStrategy", output:prompt_schedule */
    IPAdapterPromptScheduleFromWeightsStrategy(p: IPAdapterPromptScheduleFromWeightsStrategy_input, meta?: ComfyNodeMetadata): IPAdapterPromptScheduleFromWeightsStrategy
    /* category:ipadapter_params, name:"IPAdapterRegionalConditioning", output:IPADAPTER_PARAMS+POSITIVE+NEGATIVE */
    IPAdapterRegionalConditioning(p: IPAdapterRegionalConditioning_input, meta?: ComfyNodeMetadata): IPAdapterRegionalConditioning
    /* category:ipadapter_params, name:"IPAdapterCombineParams", output:IPADAPTER_PARAMS */
    IPAdapterCombineParams(p: IPAdapterCombineParams_input, meta?: ComfyNodeMetadata): IPAdapterCombineParams
    /* category:JPS Nodes_IO, name:"Lora Loader (JPS)", output:MODEL+CLIP */
    Lora_Loader_$1JPS$2(p: Lora_Loader_$1JPS$2_input, meta?: ComfyNodeMetadata): Lora_Loader_$1JPS$2
    /* category:JPS Nodes_Settings, name:"SDXL Resolutions (JPS)", output:width+height */
    SDXL_Resolutions_$1JPS$2(p: SDXL_Resolutions_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Resolutions_$1JPS$2
    /* category:JPS Nodes_Settings, name:"SDXL Basic Settings (JPS)", output:sdxl_basic_settings */
    SDXL_Basic_Settings_$1JPS$2(p: SDXL_Basic_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Basic_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"SDXL Settings (JPS)", output:sdxl_settings */
    SDXL_Settings_$1JPS$2(p: SDXL_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"Generation TXT IMG Settings (JPS)", output:gen_mode+img_strength */
    Generation_TXT_IMG_Settings_$1JPS$2(p: Generation_TXT_IMG_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): Generation_TXT_IMG_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"Crop Image Settings (JPS)", output:cropimage_settings */
    Crop_Image_Settings_$1JPS$2(p: Crop_Image_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): Crop_Image_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"ImageToImage Settings (JPS)", output:img2img_settings */
    ImageToImage_Settings_$1JPS$2(p: ImageToImage_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): ImageToImage_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"CtrlNet CannyEdge Settings (JPS)", output:cannyedge_settings */
    CtrlNet_CannyEdge_Settings_$1JPS$2(p: CtrlNet_CannyEdge_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): CtrlNet_CannyEdge_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"CtrlNet ZoeDepth Settings (JPS)", output:zoedepth_settings */
    CtrlNet_ZoeDepth_Settings_$1JPS$2(p: CtrlNet_ZoeDepth_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): CtrlNet_ZoeDepth_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"CtrlNet MiDaS Settings (JPS)", output:midas_settings */
    CtrlNet_MiDaS_Settings_$1JPS$2(p: CtrlNet_MiDaS_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): CtrlNet_MiDaS_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"CtrlNet OpenPose Settings (JPS)", output:openpose_settings */
    CtrlNet_OpenPose_Settings_$1JPS$2(p: CtrlNet_OpenPose_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): CtrlNet_OpenPose_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"Revision Settings (JPS)", output:revision_settings */
    Revision_Settings_$1JPS$2(p: Revision_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): Revision_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"IP Adapter Settings (JPS)", output:ip_adapter_single_settings */
    IP_Adapter_Settings_$1JPS$2(p: IP_Adapter_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): IP_Adapter_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"IP Adapter Tiled Settings (JPS)", output:ip_adapter_tiled_settings */
    IP_Adapter_Tiled_Settings_$1JPS$2(p: IP_Adapter_Tiled_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): IP_Adapter_Tiled_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"InstantID Settings (JPS)", output:instantid_settings */
    InstantID_Settings_$1JPS$2(p: InstantID_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): InstantID_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"Image Prepare Settings (JPS)", output:imageprepare_settings */
    Image_Prepare_Settings_$1JPS$2(p: Image_Prepare_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): Image_Prepare_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"InstantID Source Prepare Settings (JPS)", output:imageprepare_settings */
    InstantID_Source_Prepare_Settings_$1JPS$2(p: InstantID_Source_Prepare_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): InstantID_Source_Prepare_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"InstantID Pose Prepare Settings (JPS)", output:imageprepare_settings */
    InstantID_Pose_Prepare_Settings_$1JPS$2(p: InstantID_Pose_Prepare_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): InstantID_Pose_Prepare_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"InstantID Mask Prepare Settings (JPS)", output:imageprepare_settings */
    InstantID_Mask_Prepare_Settings_$1JPS$2(p: InstantID_Mask_Prepare_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): InstantID_Mask_Prepare_Settings_$1JPS$2
    /* category:JPS Nodes_Settings, name:"Sampler Scheduler Settings (JPS)", output:sampler_name+scheduler */
    Sampler_Scheduler_Settings_$1JPS$2(p: Sampler_Scheduler_Settings_$1JPS$2_input, meta?: ComfyNodeMetadata): Sampler_Scheduler_Settings_$1JPS$2
    /* category:JPS Nodes_Switches, name:"Integer Switch (JPS)", output:int_out */
    Integer_Switch_$1JPS$2(p: Integer_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): Integer_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"Image Switch (JPS)", output:img_out */
    Image_Switch_$1JPS$2(p: Image_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): Image_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"Latent Switch (JPS)", output:latent_out */
    Latent_Switch_$1JPS$2(p: Latent_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): Latent_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"Conditioning Switch (JPS)", output:con_out */
    Conditioning_Switch_$1JPS$2(p: Conditioning_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): Conditioning_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"Model Switch (JPS)", output:model_out */
    Model_Switch_$1JPS$2(p: Model_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): Model_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"IPA Switch (JPS)", output:IPA_out */
    IPA_Switch_$1JPS$2(p: IPA_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): IPA_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"VAE Switch (JPS)", output:vae_out */
    VAE_Switch_$1JPS$2(p: VAE_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): VAE_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"Mask Switch (JPS)", output:mask_out */
    Mask_Switch_$1JPS$2(p: Mask_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): Mask_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"ControlNet Switch (JPS)", output:ctrlnet_out */
    ControlNet_Switch_$1JPS$2(p: ControlNet_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): ControlNet_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"Disable Enable Switch (JPS)", output:disable_enable */
    Disable_Enable_Switch_$1JPS$2(p: Disable_Enable_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): Disable_Enable_Switch_$1JPS$2
    /* category:JPS Nodes_Switches, name:"Enable Disable Switch (JPS)", output:enable_disable */
    Enable_Disable_Switch_$1JPS$2(p: Enable_Disable_Switch_$1JPS$2_input, meta?: ComfyNodeMetadata): Enable_Disable_Switch_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"SDXL Basic Settings Pipe (JPS)", output:image_res+width+height+sampler_name+scheduler+steps_total+step_split+cfg+cfg_rescale+cfg_refiner+ascore_refiner+res_factor+clip_skip+filename */
    SDXL_Basic_Settings_Pipe_$1JPS$2(p: SDXL_Basic_Settings_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Basic_Settings_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"SDXL Settings Pipe (JPS)", output:image_res+width+height+res_factor+sampler_name+scheduler+steps+cfg+cfg_rescale+clip_skip+filename */
    SDXL_Settings_Pipe_$1JPS$2(p: SDXL_Settings_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Settings_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"Crop Image Pipe (JPS)", output:source_crop_pos+source_crop_offset+support_crop_pos+support_crop_offset+crop_intpol */
    Crop_Image_Pipe_$1JPS$2(p: Crop_Image_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): Crop_Image_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"ImageToImage Pipe (JPS)", output:img2img_strength+inpaint_strength+inpaint_grow_mask+unsampler_strength+unsampler_cfg+unsampler_sampler+unsampler_scheduler */
    ImageToImage_Pipe_$1JPS$2(p: ImageToImage_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): ImageToImage_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"CtrlNet CannyEdge Pipe (JPS)", output:cannyedge_source+cannyedge_strength+cannyedge_start+cannyedge_end+cannyedge_low+cannyedge_high */
    CtrlNet_CannyEdge_Pipe_$1JPS$2(p: CtrlNet_CannyEdge_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): CtrlNet_CannyEdge_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"CtrlNet ZoeDepth Pipe (JPS)", output:zoe_source+zoe_strength+zoe_start+zoe_end */
    CtrlNet_ZoeDepth_Pipe_$1JPS$2(p: CtrlNet_ZoeDepth_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): CtrlNet_ZoeDepth_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"CtrlNet MiDaS Pipe (JPS)", output:midas_source+midas_strength+midas_start+midas_end+midas_a+midas_bg */
    CtrlNet_MiDaS_Pipe_$1JPS$2(p: CtrlNet_MiDaS_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): CtrlNet_MiDaS_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"CtrlNet OpenPose Pipe (JPS)", output:openpose_source+openpose_strength+openpose_start+openpose_end+openpose_body+openpose_face+openpose_hand */
    CtrlNet_OpenPose_Pipe_$1JPS$2(p: CtrlNet_OpenPose_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): CtrlNet_OpenPose_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"IP Adapter Settings Pipe (JPS)", output:ipa_weight+ipa_wtype+ipa_noise+ipa_start+ipa_stop+ipa_crop+ipa_zoom+ipa_offset_x+ipa_offset_y+ipa_mask+crop_intpol+sharpening+ipa_model */
    IP_Adapter_Settings_Pipe_$1JPS$2(p: IP_Adapter_Settings_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): IP_Adapter_Settings_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"IP Adapter Tiled Settings Pipe (JPS)", output:ipa_model+ipa_wtype+ipa_weight+ipa_noise+ipa_start+ipa_end+tile_short+tile_weight+zoom+offset_w+offset_h+prepare_type+prepare_intpol+prepare_sharpening */
    IP_Adapter_Tiled_Settings_Pipe_$1JPS$2(p: IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): IP_Adapter_Tiled_Settings_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"InstantID Pipe (JPS)", output:ip_weight+cn_strength+noise+start+end */
    InstantID_Pipe_$1JPS$2(p: InstantID_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): InstantID_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"Image Prepare Pipe (JPS)", output:offset_width+offset_height+crop_left+crop_right+crop_top+crop_bottom+padding_left+padding_right+padding_top+padding_bottom+interpolation+sharpening */
    Image_Prepare_Pipe_$1JPS$2(p: Image_Prepare_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): Image_Prepare_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"InstantID Source Prepare Pipe (JPS)", output:resize_to+offset_width+offset_height+crop_left+crop_right+crop_top+crop_bottom+interpolation+sharpening+flip */
    InstantID_Source_Prepare_Pipe_$1JPS$2(p: InstantID_Source_Prepare_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): InstantID_Source_Prepare_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"InstantID Pose Prepare Pipe (JPS)", output:resize_to+offset_width+offset_height+crop_left+crop_right+crop_top+crop_bottom+padding_left+padding_right+padding_top+padding_bottom+interpolation+sharpening+flip */
    InstantID_Pose_Prepare_Pipe_$1JPS$2(p: InstantID_Pose_Prepare_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): InstantID_Pose_Prepare_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"InstantID Mask Prepare Pipe (JPS)", output:mask_type+resize_to+resize_type+offset_width+offset_height+crop_left+crop_right+crop_top+crop_bottom+padding_left+padding_right+padding_top+padding_bottom+interpolation+sharpening */
    InstantID_Mask_Prepare_Pipe_$1JPS$2(p: InstantID_Mask_Prepare_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): InstantID_Mask_Prepare_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"Revision Settings Pipe (JPS)", output:crop_res+crop_intpol+rev1_crop+rev1_offset+rev2_crop+rev2_offset+rev1_strength+rev2_strength+rev1_noiseaug+rev2_noiseaug */
    Revision_Settings_Pipe_$1JPS$2(p: Revision_Settings_Pipe_$1JPS$2_input, meta?: ComfyNodeMetadata): Revision_Settings_Pipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"SDXL Fundamentals MultiPipe (JPS)", output:vae+model_base+model_refiner+clip_base+clip_refiner+pos_base+neg_base+pos_refiner+neg_refiner+seed */
    SDXL_Fundamentals_MultiPipe_$1JPS$2(p: SDXL_Fundamentals_MultiPipe_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Fundamentals_MultiPipe_$1JPS$2
    /* category:JPS Nodes_Pipes, name:"Images Masks MultiPipe (JPS)", output:generation_img+generation_mask+ipa1_img+ipa2_img+ipa1_mask+ipa2_mask+revision1_img+revision2_img+inpaint_model */
    Images_Masks_MultiPipe_$1JPS$2(p: Images_Masks_MultiPipe_$1JPS$2_input, meta?: ComfyNodeMetadata): Images_Masks_MultiPipe_$1JPS$2
    /* category:JPS Nodes_Math, name:"SDXL Recommended Resolution Calc (JPS)", output:SDXL_width+SDXL_height */
    SDXL_Recommended_Resolution_Calc_$1JPS$2(p: SDXL_Recommended_Resolution_Calc_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Recommended_Resolution_Calc_$1JPS$2
    /* category:JPS Nodes_Math, name:"Resolution Multiply (JPS)", output:width_resized+height_resized */
    Resolution_Multiply_$1JPS$2(p: Resolution_Multiply_$1JPS$2_input, meta?: ComfyNodeMetadata): Resolution_Multiply_$1JPS$2
    /* category:JPS Nodes_Math, name:"Largest Int (JPS)", output:larger_int+smaller_int+is_a_larger */
    Largest_Int_$1JPS$2(p: Largest_Int_$1JPS$2_input, meta?: ComfyNodeMetadata): Largest_Int_$1JPS$2
    /* category:JPS Nodes_Math, name:"Multiply Int Int (JPS)", output:int_multiply+float_multiply */
    Multiply_Int_Int_$1JPS$2(p: Multiply_Int_Int_$1JPS$2_input, meta?: ComfyNodeMetadata): Multiply_Int_Int_$1JPS$2
    /* category:JPS Nodes_Math, name:"Multiply Int Float (JPS)", output:int_multiply+float_multiply */
    Multiply_Int_Float_$1JPS$2(p: Multiply_Int_Float_$1JPS$2_input, meta?: ComfyNodeMetadata): Multiply_Int_Float_$1JPS$2
    /* category:JPS Nodes_Math, name:"Multiply Float Float (JPS)", output:int_multiply+float_multiply */
    Multiply_Float_Float_$1JPS$2(p: Multiply_Float_Float_$1JPS$2_input, meta?: ComfyNodeMetadata): Multiply_Float_Float_$1JPS$2
    /* category:JPS Nodes_Math, name:"Substract Int Int (JPS)", output:int_substract+float_substract */
    Substract_Int_Int_$1JPS$2(p: Substract_Int_Int_$1JPS$2_input, meta?: ComfyNodeMetadata): Substract_Int_Int_$1JPS$2
    /* category:JPS Nodes_Text, name:"Text Concatenate (JPS)", output:text */
    Text_Concatenate_$1JPS$2(p: Text_Concatenate_$1JPS$2_input, meta?: ComfyNodeMetadata): Text_Concatenate_$1JPS$2
    /* category:JPS Nodes_Text, name:"Get Date Time String (JPS)", output:time_format */
    Get_Date_Time_String_$1JPS$2(p: Get_Date_Time_String_$1JPS$2_input, meta?: ComfyNodeMetadata): Get_Date_Time_String_$1JPS$2
    /* category:JPS Nodes_Image, name:"Get Image Size (JPS)", output:width+height */
    Get_Image_Size_$1JPS$2(p: Get_Image_Size_$1JPS$2_input, meta?: ComfyNodeMetadata): Get_Image_Size_$1JPS$2
    /* category:JPS Nodes_Image, name:"Crop Image Square (JPS)", output:IMAGE */
    Crop_Image_Square_$1JPS$2(p: Crop_Image_Square_$1JPS$2_input, meta?: ComfyNodeMetadata): Crop_Image_Square_$1JPS$2
    /* category:JPS Nodes_Image, name:"Crop Image TargetSize (JPS)", output:IMAGE */
    Crop_Image_TargetSize_$1JPS$2(p: Crop_Image_TargetSize_$1JPS$2_input, meta?: ComfyNodeMetadata): Crop_Image_TargetSize_$1JPS$2
    /* category:JPS Nodes_Image, name:"Prepare Image (JPS)", output:IMAGE */
    Prepare_Image_$1JPS$2(p: Prepare_Image_$1JPS$2_input, meta?: ComfyNodeMetadata): Prepare_Image_$1JPS$2
    /* category:JPS Nodes_Image, name:"Prepare Image Plus (JPS)", output:IMAGE */
    Prepare_Image_Plus_$1JPS$2(p: Prepare_Image_Plus_$1JPS$2_input, meta?: ComfyNodeMetadata): Prepare_Image_Plus_$1JPS$2
    /* category:JPS Nodes_Image, name:"Prepare Image Tiled IPA (JPS)", output:IMAGE */
    Prepare_Image_Tiled_IPA_$1JPS$2(p: Prepare_Image_Tiled_IPA_$1JPS$2_input, meta?: ComfyNodeMetadata): Prepare_Image_Tiled_IPA_$1JPS$2
    /* category:JPS Nodes_Style, name:"SDXL Prompt Styler (JPS)", output:text_positive_g+text_positive_l+text_positive+text_negative */
    SDXL_Prompt_Styler_$1JPS$2(p: SDXL_Prompt_Styler_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Prompt_Styler_$1JPS$2
    /* category:JPS Nodes_Text, name:"SDXL Prompt Handling (JPS)", output:pos_g+pos_l */
    SDXL_Prompt_Handling_$1JPS$2(p: SDXL_Prompt_Handling_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Prompt_Handling_$1JPS$2
    /* category:JPS Nodes_Text, name:"SDXL Prompt Handling Plus (JPS)", output:pos_g+pos_l */
    SDXL_Prompt_Handling_Plus_$1JPS$2(p: SDXL_Prompt_Handling_Plus_$1JPS$2_input, meta?: ComfyNodeMetadata): SDXL_Prompt_Handling_Plus_$1JPS$2
    /* category:JPS Nodes_Text, name:"Text Prompt (JPS)", output:text */
    Text_Prompt_$1JPS$2(p: Text_Prompt_$1JPS$2_input, meta?: ComfyNodeMetadata): Text_Prompt_$1JPS$2
    /* category:JPS Nodes_Text, name:"Text Prompt Combo (JPS)", output:pos+neg */
    Text_Prompt_Combo_$1JPS$2(p: Text_Prompt_Combo_$1JPS$2_input, meta?: ComfyNodeMetadata): Text_Prompt_Combo_$1JPS$2
    /* category:JPS Nodes_IO, name:"Save Images Plus (JPS)", output:dummy_out */
    Save_Images_Plus_$1JPS$2(p: Save_Images_Plus_$1JPS$2_input, meta?: ComfyNodeMetadata): Save_Images_Plus_$1JPS$2
    /* category:JPS Nodes_Conditioning, name:"CLIPTextEncode SDXL Plus (JPS)", output:cond_pos+cond_neg */
    CLIPTextEncode_SDXL_Plus_$1JPS$2(p: CLIPTextEncode_SDXL_Plus_$1JPS$2_input, meta?: ComfyNodeMetadata): CLIPTextEncode_SDXL_Plus_$1JPS$2
    /* category:JPS Nodes_Text, name:"Time Seed (JPS)", output:seed */
    Time_Seed_$1JPS$2(p: Time_Seed_$1JPS$2_input, meta?: ComfyNodeMetadata): Time_Seed_$1JPS$2
    /* category:latent, name:"NNLatentUpscale", output:LATENT */
    NNLatentUpscale(p: NNLatentUpscale_input, meta?: ComfyNodeMetadata): NNLatentUpscale
    /* category:latent_noise, name:"BNK_NoisyLatentImage", output:LATENT */
    BNK$_NoisyLatentImage(p: BNK$_NoisyLatentImage_input, meta?: ComfyNodeMetadata): BNK$_NoisyLatentImage
    /* category:latent, name:"BNK_SlerpLatent", output:LATENT */
    BNK$_SlerpLatent(p: BNK$_SlerpLatent_input, meta?: ComfyNodeMetadata): BNK$_SlerpLatent
    /* category:latent_noise, name:"BNK_GetSigma", output:FLOAT */
    BNK$_GetSigma(p: BNK$_GetSigma_input, meta?: ComfyNodeMetadata): BNK$_GetSigma
    /* category:latent_noise, name:"BNK_InjectNoise", output:LATENT */
    BNK$_InjectNoise(p: BNK$_InjectNoise_input, meta?: ComfyNodeMetadata): BNK$_InjectNoise
    /* category:sampling, name:"BNK_Unsampler", output:LATENT */
    BNK$_Unsampler(p: BNK$_Unsampler_input, meta?: ComfyNodeMetadata): BNK$_Unsampler
    /* category:sampling, name:"BNK_TiledKSamplerAdvanced", output:LATENT */
    BNK$_TiledKSamplerAdvanced(p: BNK$_TiledKSamplerAdvanced_input, meta?: ComfyNodeMetadata): BNK$_TiledKSamplerAdvanced
    /* category:sampling, name:"BNK_TiledKSampler", output:LATENT */
    BNK$_TiledKSampler(p: BNK$_TiledKSampler_input, meta?: ComfyNodeMetadata): BNK$_TiledKSampler
    /* category:🌏 tinyterra_base, name:"ttN tinyLoader", output:model+latent+vae+clip+width+height */
    ttN_tinyLoader(p: ttN_tinyLoader_input, meta?: ComfyNodeMetadata): ttN_tinyLoader
    /* category:🌏 tinyterra_base, name:"ttN conditioning", output:model+positive+negative+clip+pos_string+neg_string */
    ttN_conditioning(p: ttN_conditioning_input, meta?: ComfyNodeMetadata): ttN_conditioning
    /* category:🌏 tinyterra_base, name:"ttN KSampler_v2", output:model+positive+negative+latent+vae+clip+images+seed+plot_image */
    ttN_KSampler$_v2(p: ttN_KSampler$_v2_input, meta?: ComfyNodeMetadata): ttN_KSampler$_v2
    /* category:🌏 tinyterra_pipe, name:"ttN pipeLoader_v2", output:pipe+model+positive+negative+latent+vae+clip+seed+width+height+pos_string+neg_string */
    ttN_pipeLoader$_v2(p: ttN_pipeLoader$_v2_input, meta?: ComfyNodeMetadata): ttN_pipeLoader$_v2
    /* category:🌏 tinyterra_pipe, name:"ttN pipeKSampler_v2", output:pipe+model+positive+negative+latent+vae+clip+images+seed+plot_image */
    ttN_pipeKSampler$_v2(p: ttN_pipeKSampler$_v2_input, meta?: ComfyNodeMetadata): ttN_pipeKSampler$_v2
    /* category:🌏 tinyterra_pipe, name:"ttN pipeKSamplerAdvanced_v2", output:pipe+model+positive+negative+latent+vae+clip+image+seed */
    ttN_pipeKSamplerAdvanced$_v2(p: ttN_pipeKSamplerAdvanced$_v2_input, meta?: ComfyNodeMetadata): ttN_pipeKSamplerAdvanced$_v2
    /* category:🌏 tinyterra_pipe, name:"ttN pipeLoaderSDXL_v2", output:sdxl_pipe+model+positive+negative+vae+clip+refiner_model+refiner_positive+refiner_negative+refiner_clip+latent+seed+width+height+pos_string+neg_string */
    ttN_pipeLoaderSDXL$_v2(p: ttN_pipeLoaderSDXL$_v2_input, meta?: ComfyNodeMetadata): ttN_pipeLoaderSDXL$_v2
    /* category:🌏 tinyterra_pipe, name:"ttN pipeKSamplerSDXL_v2", output:sdxl_pipe+pipe+model+positive+negative+refiner_model+refiner_positive+refiner_negative+latent+vae+clip+images+seed+plot_image */
    ttN_pipeKSamplerSDXL$_v2(p: ttN_pipeKSamplerSDXL$_v2_input, meta?: ComfyNodeMetadata): ttN_pipeKSamplerSDXL$_v2
    /* category:🌏 tinyterra_xyPlot, name:"ttN advanced xyPlot", output:adv_xyPlot */
    ttN_advanced_xyPlot(p: ttN_advanced_xyPlot_input, meta?: ComfyNodeMetadata): ttN_advanced_xyPlot
    /* category:🌏 tinyterra_xyPlot, name:"ttN advPlot images", output:images+plot_image */
    ttN_advPlot_images(p: ttN_advPlot_images_input, meta?: ComfyNodeMetadata): ttN_advPlot_images
    /* category:🌏 tinyterra_xyPlot, name:"ttN advPlot range", output:plot_text */
    ttN_advPlot_range(p: ttN_advPlot_range_input, meta?: ComfyNodeMetadata): ttN_advPlot_range
    /* category:🌏 tinyterra_xyPlot, name:"ttN advPlot string", output:plot_text */
    ttN_advPlot_string(p: ttN_advPlot_string_input, meta?: ComfyNodeMetadata): ttN_advPlot_string
    /* category:🌏 tinyterra_xyPlot, name:"ttN advPlot combo", output:plot_text */
    ttN_advPlot_combo(p: ttN_advPlot_combo_input, meta?: ComfyNodeMetadata): ttN_advPlot_combo
    /* category:🌏 tinyterra_pipe, name:"ttN pipeEDIT", output:pipe+model+pos+neg+latent+vae+clip+image+seed */
    ttN_pipeEDIT(p: ttN_pipeEDIT_input, meta?: ComfyNodeMetadata): ttN_pipeEDIT
    /* category:🌏 tinyterra_pipe, name:"ttN pipe2BASIC", output:basic_pipe+pipe */
    ttN_pipe2BASIC(p: ttN_pipe2BASIC_input, meta?: ComfyNodeMetadata): ttN_pipe2BASIC
    /* category:🌏 tinyterra_pipe, name:"ttN pipe2DETAILER", output:detailer_pipe+pipe */
    ttN_pipe2DETAILER(p: ttN_pipe2DETAILER_input, meta?: ComfyNodeMetadata): ttN_pipe2DETAILER
    /* category:🌏 tinyterra_pipe, name:"ttN pipeEncodeConcat", output:pipe+positive+negative+clip */
    ttN_pipeEncodeConcat(p: ttN_pipeEncodeConcat_input, meta?: ComfyNodeMetadata): ttN_pipeEncodeConcat
    /* category:🌏 tinyterra_pipe, name:"ttN pipeLoraStack", output:optional_pipe+lora_stack */
    ttN_pipeLoraStack(p: ttN_pipeLoraStack_input, meta?: ComfyNodeMetadata): ttN_pipeLoraStack
    /* category:🌏 tinyterra, name:"ttN multiModelMerge", output:model+clip */
    ttN_multiModelMerge(p: ttN_multiModelMerge_input, meta?: ComfyNodeMetadata): ttN_multiModelMerge
    /* category:🌏 tinyterra_util, name:"ttN debugInput", output: */
    ttN_debugInput(p: ttN_debugInput_input, meta?: ComfyNodeMetadata): ttN_debugInput
    /* category:🌏 tinyterra_text, name:"ttN text", output:text */
    ttN_text(p: ttN_text_input, meta?: ComfyNodeMetadata): ttN_text
    /* category:🌏 tinyterra_text, name:"ttN textDebug", output:text */
    ttN_textDebug(p: ttN_textDebug_input, meta?: ComfyNodeMetadata): ttN_textDebug
    /* category:🌏 tinyterra_text, name:"ttN concat", output:concat */
    ttN_concat(p: ttN_concat_input, meta?: ComfyNodeMetadata): ttN_concat
    /* category:🌏 tinyterra_text, name:"ttN text3BOX_3WAYconcat", output:text1+text2+text3+_1$_$And$_2+_1$_$And$_3+_2$_$And$_3+concat */
    ttN_text3BOX$_3WAYconcat(p: ttN_text3BOX$_3WAYconcat_input, meta?: ComfyNodeMetadata): ttN_text3BOX$_3WAYconcat
    /* category:🌏 tinyterra_text, name:"ttN text7BOX_concat", output:text1+text2+text3+text4+text5+text6+text7+concat */
    ttN_text7BOX$_concat(p: ttN_text7BOX$_concat_input, meta?: ComfyNodeMetadata): ttN_text7BOX$_concat
    /* category:🌏 tinyterra_text, name:"ttN textCycleLine", output:STRING */
    ttN_textCycleLine(p: ttN_textCycleLine_input, meta?: ComfyNodeMetadata): ttN_textCycleLine
    /* category:🌏 tinyterra_text, name:"ttN textOutput", output:text */
    ttN_textOutput(p: ttN_textOutput_input, meta?: ComfyNodeMetadata): ttN_textOutput
    /* category:🌏 tinyterra_image, name:"ttN imageOutput", output:image */
    ttN_imageOutput(p: ttN_imageOutput_input, meta?: ComfyNodeMetadata): ttN_imageOutput
    /* category:🌏 tinyterra_image, name:"ttN imageREMBG", output:image+mask */
    ttN_imageREMBG(p: ttN_imageREMBG_input, meta?: ComfyNodeMetadata): ttN_imageREMBG
    /* category:🌏 tinyterra_image, name:"ttN hiresfixScale", output:latent+image */
    ttN_hiresfixScale(p: ttN_hiresfixScale_input, meta?: ComfyNodeMetadata): ttN_hiresfixScale
    /* category:🌏 tinyterra_util, name:"ttN int", output:int+float+text */
    ttN_int(p: ttN_int_input, meta?: ComfyNodeMetadata): ttN_int
    /* category:🌏 tinyterra_util, name:"ttN float", output:float+int+text */
    ttN_float(p: ttN_float_input, meta?: ComfyNodeMetadata): ttN_float
    /* category:🌏 tinyterra_util, name:"ttN seed", output:seed */
    ttN_seed(p: ttN_seed_input, meta?: ComfyNodeMetadata): ttN_seed
    /* category:🌏 tinyterra_legacy, name:"ttN xyPlot", output:xyPlot */
    ttN_xyPlot(p: ttN_xyPlot_input, meta?: ComfyNodeMetadata): ttN_xyPlot
    /* category:🌏 tinyterra_legacy, name:"ttN pipeIN", output:pipe */
    ttN_pipeIN(p: ttN_pipeIN_input, meta?: ComfyNodeMetadata): ttN_pipeIN
    /* category:🌏 tinyterra_legacy, name:"ttN pipeOUT", output:model+pos+neg+latent+vae+clip+image+seed+pipe */
    ttN_pipeOUT(p: ttN_pipeOUT_input, meta?: ComfyNodeMetadata): ttN_pipeOUT
    /* category:🌏 tinyterra_legacy, name:"ttN pipeLoader", output:pipe+model+positive+negative+latent+vae+clip+seed */
    ttN_pipeLoader(p: ttN_pipeLoader_input, meta?: ComfyNodeMetadata): ttN_pipeLoader
    /* category:🌏 tinyterra_legacy, name:"ttN pipeKSampler", output:pipe+model+positive+negative+latent+vae+clip+image+seed */
    ttN_pipeKSampler(p: ttN_pipeKSampler_input, meta?: ComfyNodeMetadata): ttN_pipeKSampler
    /* category:🌏 tinyterra_legacy, name:"ttN pipeKSamplerAdvanced", output:pipe+model+positive+negative+latent+vae+clip+image+seed */
    ttN_pipeKSamplerAdvanced(p: ttN_pipeKSamplerAdvanced_input, meta?: ComfyNodeMetadata): ttN_pipeKSamplerAdvanced
    /* category:🌏 tinyterra_legacy, name:"ttN pipeLoaderSDXL", output:sdxl_pipe+model+positive+negative+vae+clip+refiner_model+refiner_positive+refiner_negative+refiner_vae+refiner_clip+latent+seed */
    ttN_pipeLoaderSDXL(p: ttN_pipeLoaderSDXL_input, meta?: ComfyNodeMetadata): ttN_pipeLoaderSDXL
    /* category:🌏 tinyterra_legacy, name:"ttN pipeKSamplerSDXL", output:sdxl_pipe+model+positive+negative+vae+refiner_model+refiner_positive+refiner_negative+refiner_vae+latent+clip+image+seed */
    ttN_pipeKSamplerSDXL(p: ttN_pipeKSamplerSDXL_input, meta?: ComfyNodeMetadata): ttN_pipeKSamplerSDXL
    /* category:Derfuu_Nodes_Variables, name:"DF_Float", output:FLOAT */
    DF$_Float(p: DF$_Float_input, meta?: ComfyNodeMetadata): DF$_Float
    /* category:Derfuu_Nodes_Variables, name:"DF_Integer", output:INT */
    DF$_Integer(p: DF$_Integer_input, meta?: ComfyNodeMetadata): DF$_Integer
    /* category:Derfuu_Nodes_Variables, name:"DF_Text", output:STRING */
    DF$_Text(p: DF$_Text_input, meta?: ComfyNodeMetadata): DF$_Text
    /* category:Derfuu_Nodes_Variables, name:"DF_Text_Box", output:STRING */
    DF$_Text$_Box(p: DF$_Text$_Box_input, meta?: ComfyNodeMetadata): DF$_Text$_Box
    /* category:Derfuu_Nodes_Variables, name:"DF_DynamicPrompts_Text_Box", output:STRING */
    DF$_DynamicPrompts$_Text$_Box(p: DF$_DynamicPrompts$_Text$_Box_input, meta?: ComfyNodeMetadata): DF$_DynamicPrompts$_Text$_Box
    /* category:Derfuu_Nodes_Functions_String Operations, name:"DF_String_Concatenate", output:TEXT */
    DF$_String$_Concatenate(p: DF$_String$_Concatenate_input, meta?: ComfyNodeMetadata): DF$_String$_Concatenate
    /* category:Derfuu_Nodes_Functions_String Operations, name:"DF_String_Replace", output:TEXT */
    DF$_String$_Replace(p: DF$_String$_Replace_input, meta?: ComfyNodeMetadata): DF$_String$_Replace
    /* category:Derfuu_Nodes_Functions_String Operations, name:"DF_Search_In_Text", output:BOOLEAN+OCCURRENCES */
    DF$_Search$_In$_Text(p: DF$_Search$_In$_Text_input, meta?: ComfyNodeMetadata): DF$_Search$_In$_Text
    /* category:Derfuu_Nodes_Debug, name:"DF_To_text_(Debug)", output:SAME$_AS$_INPUT+STRING */
    DF$_To$_text$_$1Debug$2(p: DF$_To$_text$_$1Debug$2_input, meta?: ComfyNodeMetadata): DF$_To$_text$_$1Debug$2
    /* category:Derfuu_Nodes_Functions, name:"DF_Random", output:FLOAT */
    DF$_Random(p: DF$_Random_input, meta?: ComfyNodeMetadata): DF$_Random
    /* category:Derfuu_Nodes_Functions_Converters, name:"DF_Int_to_Float", output:FLOAT */
    DF$_Int$_to$_Float(p: DF$_Int$_to$_Float_input, meta?: ComfyNodeMetadata): DF$_Int$_to$_Float
    /* category:Derfuu_Nodes_Functions_Converters, name:"DF_Ceil", output:INT */
    DF$_Ceil(p: DF$_Ceil_input, meta?: ComfyNodeMetadata): DF$_Ceil
    /* category:Derfuu_Nodes_Functions_Converters, name:"DF_Floor", output:INT */
    DF$_Floor(p: DF$_Floor_input, meta?: ComfyNodeMetadata): DF$_Floor
    /* category:Derfuu_Nodes_Functions_Converters, name:"DF_Absolute_value", output:FLOAT */
    DF$_Absolute$_value(p: DF$_Absolute$_value_input, meta?: ComfyNodeMetadata): DF$_Absolute$_value
    /* category:Derfuu_Nodes_Functions, name:"DF_Get_latent_size", output:WIDTH+HEIGHT */
    DF$_Get$_latent$_size(p: DF$_Get$_latent$_size_input, meta?: ComfyNodeMetadata): DF$_Get$_latent$_size
    /* category:Derfuu_Nodes_Functions, name:"DF_Get_image_size", output:WIDTH+HEIGHT */
    DF$_Get$_image$_size(p: DF$_Get$_image$_size_input, meta?: ComfyNodeMetadata): DF$_Get$_image$_size
    /* category:Derfuu_Nodes_Math, name:"DF_Sum", output:FLOAT */
    DF$_Sum(p: DF$_Sum_input, meta?: ComfyNodeMetadata): DF$_Sum
    /* category:Derfuu_Nodes_Math, name:"DF_Subtract", output:FLOAT */
    DF$_Subtract(p: DF$_Subtract_input, meta?: ComfyNodeMetadata): DF$_Subtract
    /* category:Derfuu_Nodes_Math, name:"DF_Multiply", output:FLOAT */
    DF$_Multiply(p: DF$_Multiply_input, meta?: ComfyNodeMetadata): DF$_Multiply
    /* category:Derfuu_Nodes_Math, name:"DF_Divide", output:FLOAT */
    DF$_Divide(p: DF$_Divide_input, meta?: ComfyNodeMetadata): DF$_Divide
    /* category:Derfuu_Nodes_Math, name:"DF_Power", output:FLOAT */
    DF$_Power(p: DF$_Power_input, meta?: ComfyNodeMetadata): DF$_Power
    /* category:Derfuu_Nodes_Math, name:"DF_Square_root", output:FLOAT+FLOAT_1 */
    DF$_Square$_root(p: DF$_Square$_root_input, meta?: ComfyNodeMetadata): DF$_Square$_root
    /* category:Derfuu_Nodes_Math_Trigonometry, name:"DF_Sinus", output:FLOAT */
    DF$_Sinus(p: DF$_Sinus_input, meta?: ComfyNodeMetadata): DF$_Sinus
    /* category:Derfuu_Nodes_Math_Trigonometry, name:"DF_Cosines", output:FLOAT */
    DF$_Cosines(p: DF$_Cosines_input, meta?: ComfyNodeMetadata): DF$_Cosines
    /* category:Derfuu_Nodes_Math_Trigonometry, name:"DF_Tangent", output:FLOAT */
    DF$_Tangent(p: DF$_Tangent_input, meta?: ComfyNodeMetadata): DF$_Tangent
    /* category:Derfuu_Nodes_Functions, name:"DF_Logic_node", output:$Star */
    DF$_Logic$_node(p: DF$_Logic$_node_input, meta?: ComfyNodeMetadata): DF$_Logic$_node
    /* category:Derfuu_Nodes_Modded nodes_Latent, name:"DF_Latent_Scale_by_ratio", output:LATENT */
    DF$_Latent$_Scale$_by$_ratio(p: DF$_Latent$_Scale$_by$_ratio_input, meta?: ComfyNodeMetadata): DF$_Latent$_Scale$_by$_ratio
    /* category:Derfuu_Nodes_Modded nodes_Latent, name:"DF_Latent_Scale_to_side", output:LATENT */
    DF$_Latent$_Scale$_to$_side(p: DF$_Latent$_Scale$_to$_side_input, meta?: ComfyNodeMetadata): DF$_Latent$_Scale$_to$_side
    /* category:Derfuu_Nodes_Modded nodes_Image, name:"DF_Image_scale_by_ratio", output:IMAGE */
    DF$_Image$_scale$_by$_ratio(p: DF$_Image$_scale$_by$_ratio_input, meta?: ComfyNodeMetadata): DF$_Image$_scale$_by$_ratio
    /* category:Derfuu_Nodes_Modded nodes_Image, name:"DF_Image_scale_to_side", output:IMAGE */
    DF$_Image$_scale$_to$_side(p: DF$_Image$_scale$_to$_side_input, meta?: ComfyNodeMetadata): DF$_Image$_scale$_to$_side
    /* category:Derfuu_Nodes_Modded nodes_Conditions, name:"DF_Conditioning_area_scale_by_ratio", output:CONDITIONING */
    DF$_Conditioning$_area$_scale$_by$_ratio(p: DF$_Conditioning$_area$_scale$_by$_ratio_input, meta?: ComfyNodeMetadata): DF$_Conditioning$_area$_scale$_by$_ratio
    /* category:JNode, name:"LatentByRatio", output:LATENT */
    LatentByRatio(p: LatentByRatio_input, meta?: ComfyNodeMetadata): LatentByRatio
    /* category:sampling_custom_sampling, name:"SamplerLCM", output:SAMPLER */
    SamplerLCM(p: SamplerLCM_input, meta?: ComfyNodeMetadata): SamplerLCM
    /* category:loaders, name:"TAESDLoader", output:VAE */
    TAESDLoader(p: TAESDLoader_input, meta?: ComfyNodeMetadata): TAESDLoader
    /* category:Masquerade Nodes, name:"Mask By Text", output:thresholded_mask+raw_mask */
    Mask_By_Text(p: Mask_By_Text_input, meta?: ComfyNodeMetadata): Mask_By_Text
    /* category:Masquerade Nodes, name:"Mask Morphology", output:IMAGE */
    Mask_Morphology(p: Mask_Morphology_input, meta?: ComfyNodeMetadata): Mask_Morphology
    /* category:Masquerade Nodes, name:"Combine Masks", output:IMAGE */
    Combine_Masks(p: Combine_Masks_input, meta?: ComfyNodeMetadata): Combine_Masks
    /* category:Masquerade Nodes, name:"Unary Mask Op", output:IMAGE */
    Unary_Mask_Op(p: Unary_Mask_Op_input, meta?: ComfyNodeMetadata): Unary_Mask_Op
    /* category:Masquerade Nodes, name:"Unary Image Op", output:IMAGE */
    Unary_Image_Op(p: Unary_Image_Op_input, meta?: ComfyNodeMetadata): Unary_Image_Op
    /* category:Masquerade Nodes, name:"Blur", output:IMAGE */
    Blur(p: Blur_input, meta?: ComfyNodeMetadata): Blur
    /* category:Masquerade Nodes, name:"Image To Mask", output:MASK */
    Image_To_Mask(p: Image_To_Mask_input, meta?: ComfyNodeMetadata): Image_To_Mask
    /* category:Masquerade Nodes, name:"Mix Images By Mask", output:IMAGE */
    Mix_Images_By_Mask(p: Mix_Images_By_Mask_input, meta?: ComfyNodeMetadata): Mix_Images_By_Mask
    /* category:Masquerade Nodes, name:"Mix Color By Mask", output:IMAGE */
    Mix_Color_By_Mask(p: Mix_Color_By_Mask_input, meta?: ComfyNodeMetadata): Mix_Color_By_Mask
    /* category:Masquerade Nodes, name:"Mask To Region", output:IMAGE */
    Mask_To_Region(p: Mask_To_Region_input, meta?: ComfyNodeMetadata): Mask_To_Region
    /* category:Masquerade Nodes, name:"Cut By Mask", output:IMAGE */
    Cut_By_Mask(p: Cut_By_Mask_input, meta?: ComfyNodeMetadata): Cut_By_Mask
    /* category:Masquerade Nodes, name:"Paste By Mask", output:IMAGE */
    Paste_By_Mask(p: Paste_By_Mask_input, meta?: ComfyNodeMetadata): Paste_By_Mask
    /* category:Masquerade Nodes, name:"Get Image Size", output:width+height */
    Get_Image_Size(p: Get_Image_Size_input, meta?: ComfyNodeMetadata): Get_Image_Size
    /* category:Masquerade Nodes, name:"Change Channel Count", output:IMAGE */
    Change_Channel_Count(p: Change_Channel_Count_input, meta?: ComfyNodeMetadata): Change_Channel_Count
    /* category:Masquerade Nodes, name:"Constant Mask", output:IMAGE */
    Constant_Mask(p: Constant_Mask_input, meta?: ComfyNodeMetadata): Constant_Mask
    /* category:Masquerade Nodes, name:"Prune By Mask", output:IMAGE */
    Prune_By_Mask(p: Prune_By_Mask_input, meta?: ComfyNodeMetadata): Prune_By_Mask
    /* category:Masquerade Nodes, name:"Separate Mask Components", output:mask+mask_mappings */
    Separate_Mask_Components(p: Separate_Mask_Components_input, meta?: ComfyNodeMetadata): Separate_Mask_Components
    /* category:Masquerade Nodes, name:"Create Rect Mask", output:IMAGE */
    Create_Rect_Mask(p: Create_Rect_Mask_input, meta?: ComfyNodeMetadata): Create_Rect_Mask
    /* category:Masquerade Nodes, name:"Make Image Batch", output:IMAGE */
    Make_Image_Batch(p: Make_Image_Batch_input, meta?: ComfyNodeMetadata): Make_Image_Batch
    /* category:Masquerade Nodes, name:"Create QR Code", output:IMAGE */
    Create_QR_Code(p: Create_QR_Code_input, meta?: ComfyNodeMetadata): Create_QR_Code
    /* category:Masquerade Nodes, name:"Convert Color Space", output:IMAGE */
    Convert_Color_Space(p: Convert_Color_Space_input, meta?: ComfyNodeMetadata): Convert_Color_Space
    /* category:Masquerade Nodes, name:"MasqueradeIncrementer", output:INT */
    MasqueradeIncrementer(p: MasqueradeIncrementer_input, meta?: ComfyNodeMetadata): MasqueradeIncrementer
    /* category:image, name:"Image Remove Background (rembg)", output:IMAGE */
    Image_Remove_Background_$1rembg$2(p: Image_Remove_Background_$1rembg$2_input, meta?: ComfyNodeMetadata): Image_Remove_Background_$1rembg$2
    /* category:rgthree, name:"Context Big (rgthree)", output:CONTEXT+MODEL+CLIP+VAE+POSITIVE+NEGATIVE+LATENT+IMAGE+SEED+STEPS+STEP_REFINER+CFG+CKPT_NAME+SAMPLER+SCHEDULER+CLIP_WIDTH+CLIP_HEIGHT+TEXT_POS_G+TEXT_POS_L+TEXT_NEG_G+TEXT_NEG_L+MASK+CONTROL_NET */
    Context_Big_$1rgthree$2(p: Context_Big_$1rgthree$2_input, meta?: ComfyNodeMetadata): Context_Big_$1rgthree$2
    /* category:rgthree, name:"Context (rgthree)", output:CONTEXT+MODEL+CLIP+VAE+POSITIVE+NEGATIVE+LATENT+IMAGE+SEED */
    Context_$1rgthree$2(p: Context_$1rgthree$2_input, meta?: ComfyNodeMetadata): Context_$1rgthree$2
    /* category:rgthree, name:"Context Switch (rgthree)", output:CONTEXT+MODEL+CLIP+VAE+POSITIVE+NEGATIVE+LATENT+IMAGE+SEED */
    Context_Switch_$1rgthree$2(p: Context_Switch_$1rgthree$2_input, meta?: ComfyNodeMetadata): Context_Switch_$1rgthree$2
    /* category:rgthree, name:"Context Switch Big (rgthree)", output:CONTEXT+MODEL+CLIP+VAE+POSITIVE+NEGATIVE+LATENT+IMAGE+SEED+STEPS+STEP_REFINER+CFG+CKPT_NAME+SAMPLER+SCHEDULER+CLIP_WIDTH+CLIP_HEIGHT+TEXT_POS_G+TEXT_POS_L+TEXT_NEG_G+TEXT_NEG_L+MASK+CONTROL_NET */
    Context_Switch_Big_$1rgthree$2(p: Context_Switch_Big_$1rgthree$2_input, meta?: ComfyNodeMetadata): Context_Switch_Big_$1rgthree$2
    /* category:rgthree, name:"Context Merge (rgthree)", output:CONTEXT+MODEL+CLIP+VAE+POSITIVE+NEGATIVE+LATENT+IMAGE+SEED */
    Context_Merge_$1rgthree$2(p: Context_Merge_$1rgthree$2_input, meta?: ComfyNodeMetadata): Context_Merge_$1rgthree$2
    /* category:rgthree, name:"Context Merge Big (rgthree)", output:CONTEXT+MODEL+CLIP+VAE+POSITIVE+NEGATIVE+LATENT+IMAGE+SEED+STEPS+STEP_REFINER+CFG+CKPT_NAME+SAMPLER+SCHEDULER+CLIP_WIDTH+CLIP_HEIGHT+TEXT_POS_G+TEXT_POS_L+TEXT_NEG_G+TEXT_NEG_L+MASK+CONTROL_NET */
    Context_Merge_Big_$1rgthree$2(p: Context_Merge_Big_$1rgthree$2_input, meta?: ComfyNodeMetadata): Context_Merge_Big_$1rgthree$2
    /* category:rgthree, name:"Display Int (rgthree)", output: */
    Display_Int_$1rgthree$2(p: Display_Int_$1rgthree$2_input, meta?: ComfyNodeMetadata): Display_Int_$1rgthree$2
    /* category:rgthree, name:"Display Any (rgthree)", output: */
    Display_Any_$1rgthree$2(p: Display_Any_$1rgthree$2_input, meta?: ComfyNodeMetadata): Display_Any_$1rgthree$2
    /* category:rgthree, name:"Lora Loader Stack (rgthree)", output:MODEL+CLIP */
    Lora_Loader_Stack_$1rgthree$2(p: Lora_Loader_Stack_$1rgthree$2_input, meta?: ComfyNodeMetadata): Lora_Loader_Stack_$1rgthree$2
    /* category:rgthree, name:"Seed (rgthree)", output:SEED */
    Seed_$1rgthree$2(p: Seed_$1rgthree$2_input, meta?: ComfyNodeMetadata): Seed_$1rgthree$2
    /* category:rgthree, name:"Image Inset Crop (rgthree)", output:IMAGE */
    Image_Inset_Crop_$1rgthree$2(p: Image_Inset_Crop_$1rgthree$2_input, meta?: ComfyNodeMetadata): Image_Inset_Crop_$1rgthree$2
    /* category:rgthree, name:"Power Prompt (rgthree)", output:CONDITIONING+MODEL+CLIP+TEXT */
    Power_Prompt_$1rgthree$2(p: Power_Prompt_$1rgthree$2_input, meta?: ComfyNodeMetadata): Power_Prompt_$1rgthree$2
    /* category:rgthree, name:"Power Prompt - Simple (rgthree)", output:CONDITIONING+TEXT */
    Power_Prompt_$7_Simple_$1rgthree$2(p: Power_Prompt_$7_Simple_$1rgthree$2_input, meta?: ComfyNodeMetadata): Power_Prompt_$7_Simple_$1rgthree$2
    /* category:rgthree, name:"KSampler Config (rgthree)", output:STEPS+REFINER_STEP+CFG+SAMPLER+SCHEDULER */
    KSampler_Config_$1rgthree$2(p: KSampler_Config_$1rgthree$2_input, meta?: ComfyNodeMetadata): KSampler_Config_$1rgthree$2
    /* category:rgthree, name:"SDXL Empty Latent Image (rgthree)", output:LATENT+CLIP_WIDTH+CLIP_HEIGHT */
    SDXL_Empty_Latent_Image_$1rgthree$2(p: SDXL_Empty_Latent_Image_$1rgthree$2_input, meta?: ComfyNodeMetadata): SDXL_Empty_Latent_Image_$1rgthree$2
    /* category:rgthree, name:"SDXL Power Prompt - Positive (rgthree)", output:CONDITIONING+MODEL+CLIP+TEXT_G+TEXT_L */
    SDXL_Power_Prompt_$7_Positive_$1rgthree$2(p: SDXL_Power_Prompt_$7_Positive_$1rgthree$2_input, meta?: ComfyNodeMetadata): SDXL_Power_Prompt_$7_Positive_$1rgthree$2
    /* category:rgthree, name:"SDXL Power Prompt - Simple / Negative (rgthree)", output:CONDITIONING+TEXT_G+TEXT_L */
    SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2(p: SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_input, meta?: ComfyNodeMetadata): SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2
    /* category:rgthree, name:"Any Switch (rgthree)", output:$Star */
    Any_Switch_$1rgthree$2(p: Any_Switch_$1rgthree$2_input, meta?: ComfyNodeMetadata): Any_Switch_$1rgthree$2
    /* category:rgthree, name:"Image Comparer (rgthree)", output: */
    Image_Comparer_$1rgthree$2(p: Image_Comparer_$1rgthree$2_input, meta?: ComfyNodeMetadata): Image_Comparer_$1rgthree$2
    /* category:rgthree, name:"Power Lora Loader (rgthree)", output:MODEL+CLIP */
    Power_Lora_Loader_$1rgthree$2(p: Power_Lora_Loader_$1rgthree$2_input, meta?: ComfyNodeMetadata): Power_Lora_Loader_$1rgthree$2
    /* category:model_patches_unet, name:"PerturbedAttention", output:MODEL */
    PerturbedAttention(p: PerturbedAttention_input, meta?: ComfyNodeMetadata): PerturbedAttention
    /* category:model_patches_unet, name:"SmoothedEnergyGuidanceAdvanced", output:MODEL */
    SmoothedEnergyGuidanceAdvanced(p: SmoothedEnergyGuidanceAdvanced_input, meta?: ComfyNodeMetadata): SmoothedEnergyGuidanceAdvanced
    /* category:TensorRT, name:"TRTAttachPag", output:MODEL */
    TRTAttachPag(p: TRTAttachPag_input, meta?: ComfyNodeMetadata): TRTAttachPag
    /* category:TensorRT, name:"TRTPerturbedAttention", output:MODEL */
    TRTPerturbedAttention(p: TRTPerturbedAttention_input, meta?: ComfyNodeMetadata): TRTPerturbedAttention
    /* category:JNode, name:"SDXLMixSampler", output:LATENT */
    SDXLMixSampler(p: SDXLMixSampler_input, meta?: ComfyNodeMetadata): SDXLMixSampler
    /* category:WAS Suite_Loaders, name:"BLIP Model Loader", output:BLIP_MODEL */
    BLIP_Model_Loader(p: BLIP_Model_Loader_input, meta?: ComfyNodeMetadata): BLIP_Model_Loader
    /* category:WAS Suite_Latent, name:"Blend Latents", output:LATENT */
    Blend_Latents(p: Blend_Latents_input, meta?: ComfyNodeMetadata): Blend_Latents
    /* category:WAS Suite_Utilities, name:"Bus Node", output:bus+model+clip+vae+positive+negative */
    Bus_Node(p: Bus_Node_input, meta?: ComfyNodeMetadata): Bus_Node
    /* category:WAS Suite_IO, name:"Cache Node", output:latent_filename+image_filename+conditioning_filename */
    Cache_Node(p: Cache_Node_input, meta?: ComfyNodeMetadata): Cache_Node
    /* category:WAS Suite_Loaders_Advanced, name:"Checkpoint Loader", output:MODEL+CLIP+VAE+NAME_STRING */
    Checkpoint_Loader(p: Checkpoint_Loader_input, meta?: ComfyNodeMetadata): Checkpoint_Loader
    /* category:WAS Suite_Loaders, name:"Checkpoint Loader (Simple)", output:MODEL+CLIP+VAE+NAME_STRING */
    Checkpoint_Loader_$1Simple$2(p: Checkpoint_Loader_$1Simple$2_input, meta?: ComfyNodeMetadata): Checkpoint_Loader_$1Simple$2
    /* category:WAS Suite_Conditioning, name:"CLIPTextEncode (NSP)", output:conditioning+parsed_text+raw_text */
    CLIPTextEncode_$1NSP$2(p: CLIPTextEncode_$1NSP$2_input, meta?: ComfyNodeMetadata): CLIPTextEncode_$1NSP$2
    /* category:WAS Suite_Logic, name:"CLIP Input Switch", output:CLIP */
    CLIP_Input_Switch(p: CLIP_Input_Switch_input, meta?: ComfyNodeMetadata): CLIP_Input_Switch
    /* category:WAS Suite_Logic, name:"CLIP Vision Input Switch", output:CLIP_VISION */
    CLIP_Vision_Input_Switch(p: CLIP_Vision_Input_Switch_input, meta?: ComfyNodeMetadata): CLIP_Vision_Input_Switch
    /* category:WAS Suite_Logic, name:"Conditioning Input Switch", output:CONDITIONING */
    Conditioning_Input_Switch(p: Conditioning_Input_Switch_input, meta?: ComfyNodeMetadata): Conditioning_Input_Switch
    /* category:WAS Suite_Number, name:"Constant Number", output:NUMBER+FLOAT+INT */
    Constant_Number(p: Constant_Number_input, meta?: ComfyNodeMetadata): Constant_Number
    /* category:WAS Suite_Image_Process, name:"Create Grid Image", output:IMAGE */
    Create_Grid_Image(p: Create_Grid_Image_input, meta?: ComfyNodeMetadata): Create_Grid_Image
    /* category:WAS Suite_Image_Process, name:"Create Grid Image from Batch", output:IMAGE */
    Create_Grid_Image_from_Batch(p: Create_Grid_Image_from_Batch_input, meta?: ComfyNodeMetadata): Create_Grid_Image_from_Batch
    /* category:WAS Suite_Animation, name:"Create Morph Image", output:image_a_pass+image_b_pass+filepath_text+filename_text */
    Create_Morph_Image(p: Create_Morph_Image_input, meta?: ComfyNodeMetadata): Create_Morph_Image
    /* category:WAS Suite_Animation, name:"Create Morph Image from Path", output:filepath_text+filename_text */
    Create_Morph_Image_from_Path(p: Create_Morph_Image_from_Path_input, meta?: ComfyNodeMetadata): Create_Morph_Image_from_Path
    /* category:WAS Suite_Animation, name:"Create Video from Path", output:filepath_text+filename_text */
    Create_Video_from_Path(p: Create_Video_from_Path_input, meta?: ComfyNodeMetadata): Create_Video_from_Path
    /* category:WAS Suite_Image_Masking, name:"CLIPSeg Masking", output:MASK+MASK_IMAGE */
    CLIPSeg_Masking(p: CLIPSeg_Masking_input, meta?: ComfyNodeMetadata): CLIPSeg_Masking
    /* category:WAS Suite_Loaders, name:"CLIPSeg Model Loader", output:clipseg_model */
    CLIPSeg_Model_Loader(p: CLIPSeg_Model_Loader_input, meta?: ComfyNodeMetadata): CLIPSeg_Model_Loader
    /* category:WAS Suite_Image_Masking, name:"CLIPSeg Batch Masking", output:IMAGES_BATCH+MASKS_BATCH+MASK_IMAGES_BATCH */
    CLIPSeg_Batch_Masking(p: CLIPSeg_Batch_Masking_input, meta?: ComfyNodeMetadata): CLIPSeg_Batch_Masking
    /* category:WAS Suite_Image_Masking, name:"Convert Masks to Images", output:IMAGES */
    Convert_Masks_to_Images(p: Convert_Masks_to_Images_input, meta?: ComfyNodeMetadata): Convert_Masks_to_Images
    /* category:WAS Suite_Logic, name:"Control Net Model Input Switch", output:CONTROL_NET */
    Control_Net_Model_Input_Switch(p: Control_Net_Model_Input_Switch_input, meta?: ComfyNodeMetadata): Control_Net_Model_Input_Switch
    /* category:WAS Suite_Debug, name:"Debug Number to Console", output:NUMBER */
    Debug_Number_to_Console(p: Debug_Number_to_Console_input, meta?: ComfyNodeMetadata): Debug_Number_to_Console
    /* category:WAS Suite_Debug, name:"Dictionary to Console", output:DICT */
    Dictionary_to_Console(p: Dictionary_to_Console_input, meta?: ComfyNodeMetadata): Dictionary_to_Console
    /* category:WAS Suite_Loaders_Advanced, name:"Diffusers Model Loader", output:MODEL+CLIP+VAE+NAME_STRING */
    Diffusers_Model_Loader(p: Diffusers_Model_Loader_input, meta?: ComfyNodeMetadata): Diffusers_Model_Loader
    /* category:WAS Suite_Loaders_Advanced, name:"Diffusers Hub Model Down-Loader", output:MODEL+CLIP+VAE+NAME_STRING */
    Diffusers_Hub_Model_Down$7Loader(p: Diffusers_Hub_Model_Down$7Loader_input, meta?: ComfyNodeMetadata): Diffusers_Hub_Model_Down$7Loader
    /* category:WAS Suite_Debug, name:"Export API", output: */
    Export_API(p: Export_API_input, meta?: ComfyNodeMetadata): Export_API
    /* category:WAS Suite_Logic, name:"Latent Input Switch", output:LATENT */
    Latent_Input_Switch(p: Latent_Input_Switch_input, meta?: ComfyNodeMetadata): Latent_Input_Switch
    /* category:WAS Suite_IO, name:"Load Cache", output:LATENT+IMAGE+CONDITIONING */
    Load_Cache(p: Load_Cache_input, meta?: ComfyNodeMetadata): Load_Cache
    /* category:WAS Suite_Logic, name:"Logic Boolean", output:BOOLEAN+NUMBER+INT+FLOAT */
    Logic_Boolean(p: Logic_Boolean_input, meta?: ComfyNodeMetadata): Logic_Boolean
    /* category:WAS Suite_Logic, name:"Logic Boolean Primitive", output:BOOLEAN */
    Logic_Boolean_Primitive(p: Logic_Boolean_Primitive_input, meta?: ComfyNodeMetadata): Logic_Boolean_Primitive
    /* category:WAS Suite_Logic, name:"Logic Comparison OR", output:BOOLEAN */
    Logic_Comparison_OR(p: Logic_Comparison_OR_input, meta?: ComfyNodeMetadata): Logic_Comparison_OR
    /* category:WAS Suite_Logic, name:"Logic Comparison AND", output:BOOLEAN */
    Logic_Comparison_AND(p: Logic_Comparison_AND_input, meta?: ComfyNodeMetadata): Logic_Comparison_AND
    /* category:WAS Suite_Logic, name:"Logic Comparison XOR", output:BOOLEAN */
    Logic_Comparison_XOR(p: Logic_Comparison_XOR_input, meta?: ComfyNodeMetadata): Logic_Comparison_XOR
    /* category:WAS Suite_Logic, name:"Logic NOT", output:BOOLEAN */
    Logic_NOT(p: Logic_NOT_input, meta?: ComfyNodeMetadata): Logic_NOT
    /* category:WAS Suite_Loaders, name:"Lora Loader", output:MODEL+CLIP+NAME_STRING */
    Lora_Loader(p: Lora_Loader_input, meta?: ComfyNodeMetadata): Lora_Loader
    /* category:WAS Suite_Utilities, name:"Hex to HSL", output:hue+saturation+lightness+alpha+hsl */
    Hex_to_HSL(p: Hex_to_HSL_input, meta?: ComfyNodeMetadata): Hex_to_HSL
    /* category:WAS Suite_Utilities, name:"HSL to Hex", output:hex_color */
    HSL_to_Hex(p: HSL_to_Hex_input, meta?: ComfyNodeMetadata): HSL_to_Hex
    /* category:WAS Suite_Image_Filter, name:"Image SSAO (Ambient Occlusion)", output:composited_images+ssao_images+specular_mask_images */
    Image_SSAO_$1Ambient_Occlusion$2(p: Image_SSAO_$1Ambient_Occlusion$2_input, meta?: ComfyNodeMetadata): Image_SSAO_$1Ambient_Occlusion$2
    /* category:WAS Suite_Image_Filter, name:"Image SSDO (Direct Occlusion)", output:composited_images+ssdo_images+ssdo_image_masks+light_source_image_masks */
    Image_SSDO_$1Direct_Occlusion$2(p: Image_SSDO_$1Direct_Occlusion$2_input, meta?: ComfyNodeMetadata): Image_SSDO_$1Direct_Occlusion$2
    /* category:WAS Suite_Image_Analyze, name:"Image Analyze", output:IMAGE */
    Image_Analyze(p: Image_Analyze_input, meta?: ComfyNodeMetadata): Image_Analyze
    /* category:WAS Suite_Logic, name:"Image Aspect Ratio", output:aspect_number+aspect_float+is_landscape_bool+aspect_ratio_common+aspect_type */
    Image_Aspect_Ratio(p: Image_Aspect_Ratio_input, meta?: ComfyNodeMetadata): Image_Aspect_Ratio
    /* category:WAS Suite_Image, name:"Image Batch", output:image */
    Image_Batch(p: Image_Batch_input, meta?: ComfyNodeMetadata): Image_Batch
    /* category:WAS Suite_Image, name:"Image Blank", output:IMAGE */
    Image_Blank(p: Image_Blank_input, meta?: ComfyNodeMetadata): Image_Blank
    /* category:WAS Suite_Image, name:"Image Blend by Mask", output:IMAGE */
    Image_Blend_by_Mask(p: Image_Blend_by_Mask_input, meta?: ComfyNodeMetadata): Image_Blend_by_Mask
    /* category:WAS Suite_Image, name:"Image Blend", output:image */
    Image_Blend(p: Image_Blend_input, meta?: ComfyNodeMetadata): Image_Blend
    /* category:WAS Suite_Image, name:"Image Blending Mode", output:image */
    Image_Blending_Mode(p: Image_Blending_Mode_input, meta?: ComfyNodeMetadata): Image_Blending_Mode
    /* category:WAS Suite_Image_Filter, name:"Image Bloom Filter", output:IMAGE */
    Image_Bloom_Filter(p: Image_Bloom_Filter_input, meta?: ComfyNodeMetadata): Image_Bloom_Filter
    /* category:WAS Suite_Image_Filter, name:"Image Canny Filter", output:images */
    Image_Canny_Filter(p: Image_Canny_Filter_input, meta?: ComfyNodeMetadata): Image_Canny_Filter
    /* category:WAS Suite_Image_Filter, name:"Image Chromatic Aberration", output:IMAGE */
    Image_Chromatic_Aberration(p: Image_Chromatic_Aberration_input, meta?: ComfyNodeMetadata): Image_Chromatic_Aberration
    /* category:WAS Suite_Image_Analyze, name:"Image Color Palette", output:image+color_palettes */
    Image_Color_Palette(p: Image_Color_Palette_input, meta?: ComfyNodeMetadata): Image_Color_Palette
    /* category:WAS Suite_Image_Process, name:"Image Crop Face", output:IMAGE+CROP_DATA */
    Image_Crop_Face(p: Image_Crop_Face_input, meta?: ComfyNodeMetadata): Image_Crop_Face
    /* category:WAS Suite_Image_Process, name:"Image Crop Location", output:IMAGE+CROP_DATA */
    Image_Crop_Location(p: Image_Crop_Location_input, meta?: ComfyNodeMetadata): Image_Crop_Location
    /* category:WAS Suite_Image_Process, name:"Image Crop Square Location", output:IMAGE+CROP_DATA */
    Image_Crop_Square_Location(p: Image_Crop_Square_Location_input, meta?: ComfyNodeMetadata): Image_Crop_Square_Location
    /* category:WAS Suite_Image_Transform, name:"Image Displacement Warp", output:images */
    Image_Displacement_Warp(p: Image_Displacement_Warp_input, meta?: ComfyNodeMetadata): Image_Displacement_Warp
    /* category:WAS Suite_Image_Filter, name:"Image Lucy Sharpen", output:IMAGE */
    Image_Lucy_Sharpen(p: Image_Lucy_Sharpen_input, meta?: ComfyNodeMetadata): Image_Lucy_Sharpen
    /* category:WAS Suite_Image_Process, name:"Image Paste Face", output:IMAGE+MASK_IMAGE */
    Image_Paste_Face(p: Image_Paste_Face_input, meta?: ComfyNodeMetadata): Image_Paste_Face
    /* category:WAS Suite_Image_Process, name:"Image Paste Crop", output:IMAGE+MASK */
    Image_Paste_Crop(p: Image_Paste_Crop_input, meta?: ComfyNodeMetadata): Image_Paste_Crop
    /* category:WAS Suite_Image_Process, name:"Image Paste Crop by Location", output:IMAGE+MASK */
    Image_Paste_Crop_by_Location(p: Image_Paste_Crop_by_Location_input, meta?: ComfyNodeMetadata): Image_Paste_Crop_by_Location
    /* category:WAS Suite_Image_Process, name:"Image Pixelate", output:images */
    Image_Pixelate(p: Image_Pixelate_input, meta?: ComfyNodeMetadata): Image_Pixelate
    /* category:WAS Suite_Image_Generate_Noise, name:"Image Power Noise", output:image */
    Image_Power_Noise(p: Image_Power_Noise_input, meta?: ComfyNodeMetadata): Image_Power_Noise
    /* category:WAS Suite_Image_Filter, name:"Image Dragan Photography Filter", output:IMAGE */
    Image_Dragan_Photography_Filter(p: Image_Dragan_Photography_Filter_input, meta?: ComfyNodeMetadata): Image_Dragan_Photography_Filter
    /* category:WAS Suite_Image_Filter, name:"Image Edge Detection Filter", output:IMAGE */
    Image_Edge_Detection_Filter(p: Image_Edge_Detection_Filter_input, meta?: ComfyNodeMetadata): Image_Edge_Detection_Filter
    /* category:WAS Suite_Image_Filter, name:"Image Film Grain", output:IMAGE */
    Image_Film_Grain(p: Image_Film_Grain_input, meta?: ComfyNodeMetadata): Image_Film_Grain
    /* category:WAS Suite_Image_Filter, name:"Image Filter Adjustments", output:IMAGE */
    Image_Filter_Adjustments(p: Image_Filter_Adjustments_input, meta?: ComfyNodeMetadata): Image_Filter_Adjustments
    /* category:WAS Suite_Image_Transform, name:"Image Flip", output:images */
    Image_Flip(p: Image_Flip_input, meta?: ComfyNodeMetadata): Image_Flip
    /* category:WAS Suite_Image_Filter, name:"Image Gradient Map", output:IMAGE */
    Image_Gradient_Map(p: Image_Gradient_Map_input, meta?: ComfyNodeMetadata): Image_Gradient_Map
    /* category:WAS Suite_Image_Generate, name:"Image Generate Gradient", output:IMAGE */
    Image_Generate_Gradient(p: Image_Generate_Gradient_input, meta?: ComfyNodeMetadata): Image_Generate_Gradient
    /* category:WAS Suite_Image_Filter, name:"Image High Pass Filter", output:images */
    Image_High_Pass_Filter(p: Image_High_Pass_Filter_input, meta?: ComfyNodeMetadata): Image_High_Pass_Filter
    /* category:WAS Suite_History, name:"Image History Loader", output:image+filename_text */
    Image_History_Loader(p: Image_History_Loader_input, meta?: ComfyNodeMetadata): Image_History_Loader
    /* category:WAS Suite_Logic, name:"Image Input Switch", output:IMAGE */
    Image_Input_Switch(p: Image_Input_Switch_input, meta?: ComfyNodeMetadata): Image_Input_Switch
    /* category:WAS Suite_Image_Adjustment, name:"Image Levels Adjustment", output:IMAGE */
    Image_Levels_Adjustment(p: Image_Levels_Adjustment_input, meta?: ComfyNodeMetadata): Image_Levels_Adjustment
    /* category:WAS Suite_IO, name:"Image Load", output:image+mask+filename_text */
    Image_Load(p: Image_Load_input, meta?: ComfyNodeMetadata): Image_Load
    /* category:WAS Suite_Image_Filter, name:"Image Median Filter", output:IMAGE */
    Image_Median_Filter(p: Image_Median_Filter_input, meta?: ComfyNodeMetadata): Image_Median_Filter
    /* category:WAS Suite_Image_Process, name:"Image Mix RGB Channels", output:IMAGE */
    Image_Mix_RGB_Channels(p: Image_Mix_RGB_Channels_input, meta?: ComfyNodeMetadata): Image_Mix_RGB_Channels
    /* category:WAS Suite_Image_Filter, name:"Image Monitor Effects Filter", output:image */
    Image_Monitor_Effects_Filter(p: Image_Monitor_Effects_Filter_input, meta?: ComfyNodeMetadata): Image_Monitor_Effects_Filter
    /* category:WAS Suite_Image_Filter, name:"Image Nova Filter", output:IMAGE */
    Image_Nova_Filter(p: Image_Nova_Filter_input, meta?: ComfyNodeMetadata): Image_Nova_Filter
    /* category:WAS Suite_Image_Transform, name:"Image Padding", output:IMAGE+MASK */
    Image_Padding(p: Image_Padding_input, meta?: ComfyNodeMetadata): Image_Padding
    /* category:WAS Suite_Image_Generate_Noise, name:"Image Perlin Noise", output:image */
    Image_Perlin_Noise(p: Image_Perlin_Noise_input, meta?: ComfyNodeMetadata): Image_Perlin_Noise
    /* category:WAS Suite_Image_AI, name:"Image Rembg (Remove Background)", output:images */
    Image_Rembg_$1Remove_Background$2(p: Image_Rembg_$1Remove_Background$2_input, meta?: ComfyNodeMetadata): Image_Rembg_$1Remove_Background$2
    /* category:WAS Suite_Image_Generate_Noise, name:"Image Perlin Power Fractal", output:image */
    Image_Perlin_Power_Fractal(p: Image_Perlin_Power_Fractal_input, meta?: ComfyNodeMetadata): Image_Perlin_Power_Fractal
    /* category:WAS Suite_Image_Process, name:"Image Remove Background (Alpha)", output:images */
    Image_Remove_Background_$1Alpha$2(p: Image_Remove_Background_$1Alpha$2_input, meta?: ComfyNodeMetadata): Image_Remove_Background_$1Alpha$2
    /* category:WAS Suite_Image_Process, name:"Image Remove Color", output:IMAGE */
    Image_Remove_Color(p: Image_Remove_Color_input, meta?: ComfyNodeMetadata): Image_Remove_Color
    /* category:WAS Suite_Image_Transform, name:"Image Resize", output:IMAGE */
    Image_Resize(p: Image_Resize_input, meta?: ComfyNodeMetadata): Image_Resize
    /* category:WAS Suite_Image_Transform, name:"Image Rotate", output:images */
    Image_Rotate(p: Image_Rotate_input, meta?: ComfyNodeMetadata): Image_Rotate
    /* category:WAS Suite_Image_Adjustment, name:"Image Rotate Hue", output:IMAGE */
    Image_Rotate_Hue(p: Image_Rotate_Hue_input, meta?: ComfyNodeMetadata): Image_Rotate_Hue
    /* category:WAS Suite_IO, name:"Image Send HTTP", output:status_code+result_text */
    Image_Send_HTTP(p: Image_Send_HTTP_input, meta?: ComfyNodeMetadata): Image_Send_HTTP
    /* category:WAS Suite_IO, name:"Image Save", output:images+files */
    Image_Save(p: Image_Save_input, meta?: ComfyNodeMetadata): Image_Save
    /* category:WAS Suite_Image_Process, name:"Image Seamless Texture", output:images */
    Image_Seamless_Texture(p: Image_Seamless_Texture_input, meta?: ComfyNodeMetadata): Image_Seamless_Texture
    /* category:WAS Suite_Image_Process, name:"Image Select Channel", output:IMAGE */
    Image_Select_Channel(p: Image_Select_Channel_input, meta?: ComfyNodeMetadata): Image_Select_Channel
    /* category:WAS Suite_Image_Process, name:"Image Select Color", output:IMAGE */
    Image_Select_Color(p: Image_Select_Color_input, meta?: ComfyNodeMetadata): Image_Select_Color
    /* category:WAS Suite_Image_Adjustment, name:"Image Shadows and Highlights", output:image+shadow_map+highlight_map */
    Image_Shadows_and_Highlights(p: Image_Shadows_and_Highlights_input, meta?: ComfyNodeMetadata): Image_Shadows_and_Highlights
    /* category:WAS Suite_Number_Operations, name:"Image Size to Number", output:width_num+height_num+width_float+height_float+width_int+height_int */
    Image_Size_to_Number(p: Image_Size_to_Number_input, meta?: ComfyNodeMetadata): Image_Size_to_Number
    /* category:WAS Suite_Image_Transform, name:"Image Stitch", output:IMAGE */
    Image_Stitch(p: Image_Stitch_input, meta?: ComfyNodeMetadata): Image_Stitch
    /* category:WAS Suite_Image_Filter, name:"Image Style Filter", output:IMAGE */
    Image_Style_Filter(p: Image_Style_Filter_input, meta?: ComfyNodeMetadata): Image_Style_Filter
    /* category:WAS Suite_Image_Process, name:"Image Threshold", output:IMAGE */
    Image_Threshold(p: Image_Threshold_input, meta?: ComfyNodeMetadata): Image_Threshold
    /* category:WAS Suite_Image_Process, name:"Image Tiled", output:IMAGES */
    Image_Tiled(p: Image_Tiled_input, meta?: ComfyNodeMetadata): Image_Tiled
    /* category:WAS Suite_Image_Transform, name:"Image Transpose", output:IMAGE */
    Image_Transpose(p: Image_Transpose_input, meta?: ComfyNodeMetadata): Image_Transpose
    /* category:WAS Suite_Image_Filter, name:"Image fDOF Filter", output:IMAGE */
    Image_fDOF_Filter(p: Image_fDOF_Filter_input, meta?: ComfyNodeMetadata): Image_fDOF_Filter
    /* category:WAS Suite_Image_Masking, name:"Image to Latent Mask", output:MASKS */
    Image_to_Latent_Mask(p: Image_to_Latent_Mask_input, meta?: ComfyNodeMetadata): Image_to_Latent_Mask
    /* category:WAS Suite_Image_Generate_Noise, name:"Image to Noise", output:image */
    Image_to_Noise(p: Image_to_Noise_input, meta?: ComfyNodeMetadata): Image_to_Noise
    /* category:WAS Suite_Image_Analyze, name:"Image to Seed", output:INT */
    Image_to_Seed(p: Image_to_Seed_input, meta?: ComfyNodeMetadata): Image_to_Seed
    /* category:WAS Suite_Image, name:"Images to RGB", output:IMAGE */
    Images_to_RGB(p: Images_to_RGB_input, meta?: ComfyNodeMetadata): Images_to_RGB
    /* category:WAS Suite_Image, name:"Images to Linear", output:IMAGE */
    Images_to_Linear(p: Images_to_Linear_input, meta?: ComfyNodeMetadata): Images_to_Linear
    /* category:WAS Suite_Integer, name:"Integer place counter", output:INT_PLACES */
    Integer_place_counter(p: Integer_place_counter_input, meta?: ComfyNodeMetadata): Integer_place_counter
    /* category:WAS Suite_Image_Generate_Noise, name:"Image Voronoi Noise Filter", output:image */
    Image_Voronoi_Noise_Filter(p: Image_Voronoi_Noise_Filter_input, meta?: ComfyNodeMetadata): Image_Voronoi_Noise_Filter
    /* category:WAS Suite_Sampling, name:"KSampler (WAS)", output:LATENT */
    KSampler_$1WAS$2(p: KSampler_$1WAS$2_input, meta?: ComfyNodeMetadata): KSampler_$1WAS$2
    /* category:WAS Suite_Sampling, name:"KSampler Cycle", output:latent$1s$2 */
    KSampler_Cycle(p: KSampler_Cycle_input, meta?: ComfyNodeMetadata): KSampler_Cycle
    /* category:WAS Suite_Latent, name:"Latent Batch", output:latent */
    Latent_Batch(p: Latent_Batch_input, meta?: ComfyNodeMetadata): Latent_Batch
    /* category:WAS Suite_Latent_Generate, name:"Latent Noise Injection", output:LATENT */
    Latent_Noise_Injection(p: Latent_Noise_Injection_input, meta?: ComfyNodeMetadata): Latent_Noise_Injection
    /* category:WAS Suite_Number_Operations, name:"Latent Size to Number", output:tensor_w_num+tensor_h_num+tensor_w_float+tensor_h_float+tensor_w_int+tensor_h_int */
    Latent_Size_to_Number(p: Latent_Size_to_Number_input, meta?: ComfyNodeMetadata): Latent_Size_to_Number
    /* category:WAS Suite_Latent_Transform, name:"Latent Upscale by Factor (WAS)", output:LATENT */
    Latent_Upscale_by_Factor_$1WAS$2(p: Latent_Upscale_by_Factor_$1WAS$2_input, meta?: ComfyNodeMetadata): Latent_Upscale_by_Factor_$1WAS$2
    /* category:WAS Suite_IO, name:"Load Image Batch", output:image+filename_text */
    Load_Image_Batch(p: Load_Image_Batch_input, meta?: ComfyNodeMetadata): Load_Image_Batch
    /* category:WAS Suite_IO, name:"Load Text File", output:STRING+DICT */
    Load_Text_File(p: Load_Text_File_input, meta?: ComfyNodeMetadata): Load_Text_File
    /* category:WAS Suite_Loaders, name:"Load Lora", output:MODEL+CLIP+NAME_STRING */
    Load_Lora(p: Load_Lora_input, meta?: ComfyNodeMetadata): Load_Lora
    /* category:WAS Suite_Logic, name:"Lora Input Switch", output:MODEL+CLIP */
    Lora_Input_Switch(p: Lora_Input_Switch_input, meta?: ComfyNodeMetadata): Lora_Input_Switch
    /* category:WAS Suite_Image_Masking, name:"Masks Add", output:MASKS */
    Masks_Add(p: Masks_Add_input, meta?: ComfyNodeMetadata): Masks_Add
    /* category:WAS Suite_Image_Masking, name:"Masks Subtract", output:MASKS */
    Masks_Subtract(p: Masks_Subtract_input, meta?: ComfyNodeMetadata): Masks_Subtract
    /* category:WAS Suite_Image_Masking, name:"Mask Arbitrary Region", output:MASKS */
    Mask_Arbitrary_Region(p: Mask_Arbitrary_Region_input, meta?: ComfyNodeMetadata): Mask_Arbitrary_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Batch to Mask", output:MASK */
    Mask_Batch_to_Mask(p: Mask_Batch_to_Mask_input, meta?: ComfyNodeMetadata): Mask_Batch_to_Mask
    /* category:WAS Suite_Image_Masking, name:"Mask Batch", output:masks */
    Mask_Batch(p: Mask_Batch_input, meta?: ComfyNodeMetadata): Mask_Batch
    /* category:WAS Suite_Image_Masking, name:"Mask Ceiling Region", output:MASKS */
    Mask_Ceiling_Region(p: Mask_Ceiling_Region_input, meta?: ComfyNodeMetadata): Mask_Ceiling_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Crop Dominant Region", output:MASKS */
    Mask_Crop_Dominant_Region(p: Mask_Crop_Dominant_Region_input, meta?: ComfyNodeMetadata): Mask_Crop_Dominant_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Crop Minority Region", output:MASKS */
    Mask_Crop_Minority_Region(p: Mask_Crop_Minority_Region_input, meta?: ComfyNodeMetadata): Mask_Crop_Minority_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Crop Region", output:cropped_mask+crop_data+top_int+left_int+right_int+bottom_int+width_int+height_int */
    Mask_Crop_Region(p: Mask_Crop_Region_input, meta?: ComfyNodeMetadata): Mask_Crop_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Paste Region", output:RESULT_MASK+CROP_MASK */
    Mask_Paste_Region(p: Mask_Paste_Region_input, meta?: ComfyNodeMetadata): Mask_Paste_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Dilate Region", output:MASKS */
    Mask_Dilate_Region(p: Mask_Dilate_Region_input, meta?: ComfyNodeMetadata): Mask_Dilate_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Dominant Region", output:MASKS */
    Mask_Dominant_Region(p: Mask_Dominant_Region_input, meta?: ComfyNodeMetadata): Mask_Dominant_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Erode Region", output:MASKS */
    Mask_Erode_Region(p: Mask_Erode_Region_input, meta?: ComfyNodeMetadata): Mask_Erode_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Fill Holes", output:MASKS */
    Mask_Fill_Holes(p: Mask_Fill_Holes_input, meta?: ComfyNodeMetadata): Mask_Fill_Holes
    /* category:WAS Suite_Image_Masking, name:"Mask Floor Region", output:MASKS */
    Mask_Floor_Region(p: Mask_Floor_Region_input, meta?: ComfyNodeMetadata): Mask_Floor_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Gaussian Region", output:MASKS */
    Mask_Gaussian_Region(p: Mask_Gaussian_Region_input, meta?: ComfyNodeMetadata): Mask_Gaussian_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Invert", output:MASKS */
    Mask_Invert(p: Mask_Invert_input, meta?: ComfyNodeMetadata): Mask_Invert
    /* category:WAS Suite_Image_Masking, name:"Mask Minority Region", output:MASKS */
    Mask_Minority_Region(p: Mask_Minority_Region_input, meta?: ComfyNodeMetadata): Mask_Minority_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Smooth Region", output:MASKS */
    Mask_Smooth_Region(p: Mask_Smooth_Region_input, meta?: ComfyNodeMetadata): Mask_Smooth_Region
    /* category:WAS Suite_Image_Masking, name:"Mask Threshold Region", output:MASKS */
    Mask_Threshold_Region(p: Mask_Threshold_Region_input, meta?: ComfyNodeMetadata): Mask_Threshold_Region
    /* category:WAS Suite_Image_Masking, name:"Masks Combine Regions", output:MASK */
    Masks_Combine_Regions(p: Masks_Combine_Regions_input, meta?: ComfyNodeMetadata): Masks_Combine_Regions
    /* category:WAS Suite_Image_Masking, name:"Masks Combine Batch", output:MASK */
    Masks_Combine_Batch(p: Masks_Combine_Batch_input, meta?: ComfyNodeMetadata): Masks_Combine_Batch
    /* category:WAS Suite_Loaders, name:"MiDaS Model Loader", output:midas_model */
    MiDaS_Model_Loader(p: MiDaS_Model_Loader_input, meta?: ComfyNodeMetadata): MiDaS_Model_Loader
    /* category:WAS Suite_Image_AI, name:"MiDaS Depth Approximation", output:images */
    MiDaS_Depth_Approximation(p: MiDaS_Depth_Approximation_input, meta?: ComfyNodeMetadata): MiDaS_Depth_Approximation
    /* category:WAS Suite_Image_AI, name:"MiDaS Mask Image", output:RESULT+DEPTH */
    MiDaS_Mask_Image(p: MiDaS_Mask_Image_input, meta?: ComfyNodeMetadata): MiDaS_Mask_Image
    /* category:WAS Suite_Logic, name:"Model Input Switch", output:MODEL */
    Model_Input_Switch(p: Model_Input_Switch_input, meta?: ComfyNodeMetadata): Model_Input_Switch
    /* category:WAS Suite_Number, name:"Number Counter", output:number+float+int */
    Number_Counter(p: Number_Counter_input, meta?: ComfyNodeMetadata): Number_Counter
    /* category:WAS Suite_Number_Operations, name:"Number Operation", output:NUMBER+FLOAT+INT */
    Number_Operation(p: Number_Operation_input, meta?: ComfyNodeMetadata): Number_Operation
    /* category:WAS Suite_Number_Operations, name:"Number to Float", output:FLOAT */
    Number_to_Float(p: Number_to_Float_input, meta?: ComfyNodeMetadata): Number_to_Float
    /* category:WAS Suite_Logic, name:"Number Input Switch", output:NUMBER+FLOAT+INT */
    Number_Input_Switch(p: Number_Input_Switch_input, meta?: ComfyNodeMetadata): Number_Input_Switch
    /* category:WAS Suite_Logic, name:"Number Input Condition", output:NUMBER+FLOAT+INT */
    Number_Input_Condition(p: Number_Input_Condition_input, meta?: ComfyNodeMetadata): Number_Input_Condition
    /* category:WAS Suite_Number_Functions, name:"Number Multiple Of", output:NUMBER+FLOAT+INT */
    Number_Multiple_Of(p: Number_Multiple_Of_input, meta?: ComfyNodeMetadata): Number_Multiple_Of
    /* category:WAS Suite_Number, name:"Number PI", output:NUMBER+FLOAT */
    Number_PI(p: Number_PI_input, meta?: ComfyNodeMetadata): Number_PI
    /* category:WAS Suite_Number_Operations, name:"Number to Int", output:INT */
    Number_to_Int(p: Number_to_Int_input, meta?: ComfyNodeMetadata): Number_to_Int
    /* category:WAS Suite_Number_Operations, name:"Number to Seed", output:SEED */
    Number_to_Seed(p: Number_to_Seed_input, meta?: ComfyNodeMetadata): Number_to_Seed
    /* category:WAS Suite_Number_Operations, name:"Number to String", output:STRING */
    Number_to_String(p: Number_to_String_input, meta?: ComfyNodeMetadata): Number_to_String
    /* category:WAS Suite_Number_Operations, name:"Number to Text", output:STRING */
    Number_to_Text(p: Number_to_Text_input, meta?: ComfyNodeMetadata): Number_to_Text
    /* category:WAS Suite_Logic, name:"Boolean To Text", output:STRING */
    Boolean_To_Text(p: Boolean_To_Text_input, meta?: ComfyNodeMetadata): Boolean_To_Text
    /* category:WAS Suite_Text, name:"Prompt Styles Selector", output:positive_string+negative_string */
    Prompt_Styles_Selector(p: Prompt_Styles_Selector_input, meta?: ComfyNodeMetadata): Prompt_Styles_Selector
    /* category:WAS Suite_Text, name:"Prompt Multiple Styles Selector", output:positive_string+negative_string */
    Prompt_Multiple_Styles_Selector(p: Prompt_Multiple_Styles_Selector_input, meta?: ComfyNodeMetadata): Prompt_Multiple_Styles_Selector
    /* category:WAS Suite_Number, name:"Random Number", output:NUMBER+FLOAT+INT */
    Random_Number(p: Random_Number_input, meta?: ComfyNodeMetadata): Random_Number
    /* category:WAS Suite_IO, name:"Save Text File", output: */
    Save_Text_File(p: Save_Text_File_input, meta?: ComfyNodeMetadata): Save_Text_File
    /* category:WAS Suite_Number, name:"Seed", output:seed+number+float+int */
    Seed(p: Seed_input, meta?: ComfyNodeMetadata): Seed
    /* category:WAS Suite_Latent_Transform, name:"Tensor Batch to Image", output:IMAGE */
    Tensor_Batch_to_Image(p: Tensor_Batch_to_Image_input, meta?: ComfyNodeMetadata): Tensor_Batch_to_Image
    /* category:WAS Suite_Text_AI, name:"BLIP Analyze Image", output:FULL_CAPTIONS+CAPTIONS */
    BLIP_Analyze_Image(p: BLIP_Analyze_Image_input, meta?: ComfyNodeMetadata): BLIP_Analyze_Image
    /* category:WAS Suite_Image_Masking, name:"SAM Model Loader", output:SAM_MODEL */
    SAM_Model_Loader(p: SAM_Model_Loader_input, meta?: ComfyNodeMetadata): SAM_Model_Loader
    /* category:WAS Suite_Image_Masking, name:"SAM Parameters", output:SAM_PARAMETERS */
    SAM_Parameters(p: SAM_Parameters_input, meta?: ComfyNodeMetadata): SAM_Parameters
    /* category:WAS Suite_Image_Masking, name:"SAM Parameters Combine", output:SAM_PARAMETERS */
    SAM_Parameters_Combine(p: SAM_Parameters_Combine_input, meta?: ComfyNodeMetadata): SAM_Parameters_Combine
    /* category:WAS Suite_Image_Masking, name:"SAM Image Mask", output:IMAGE+MASK */
    SAM_Image_Mask(p: SAM_Image_Mask_input, meta?: ComfyNodeMetadata): SAM_Image_Mask
    /* category:WAS Suite_Debug, name:"Samples Passthrough (Stat System)", output:samples */
    Samples_Passthrough_$1Stat_System$2(p: Samples_Passthrough_$1Stat_System$2_input, meta?: ComfyNodeMetadata): Samples_Passthrough_$1Stat_System$2
    /* category:WAS Suite_Text_Operations, name:"String to Text", output:STRING */
    String_to_Text(p: String_to_Text_input, meta?: ComfyNodeMetadata): String_to_Text
    /* category:WAS Suite_Image_Bound, name:"Image Bounds", output:IMAGE_BOUNDS */
    Image_Bounds(p: Image_Bounds_input, meta?: ComfyNodeMetadata): Image_Bounds
    /* category:WAS Suite_Image_Bound, name:"Inset Image Bounds", output:IMAGE_BOUNDS */
    Inset_Image_Bounds(p: Inset_Image_Bounds_input, meta?: ComfyNodeMetadata): Inset_Image_Bounds
    /* category:WAS Suite_Image_Bound, name:"Bounded Image Blend", output:IMAGE */
    Bounded_Image_Blend(p: Bounded_Image_Blend_input, meta?: ComfyNodeMetadata): Bounded_Image_Blend
    /* category:WAS Suite_Image_Bound, name:"Bounded Image Blend with Mask", output:IMAGE */
    Bounded_Image_Blend_with_Mask(p: Bounded_Image_Blend_with_Mask_input, meta?: ComfyNodeMetadata): Bounded_Image_Blend_with_Mask
    /* category:WAS Suite_Image_Bound, name:"Bounded Image Crop", output:IMAGE */
    Bounded_Image_Crop(p: Bounded_Image_Crop_input, meta?: ComfyNodeMetadata): Bounded_Image_Crop
    /* category:WAS Suite_Image_Bound, name:"Bounded Image Crop with Mask", output:IMAGE+IMAGE_BOUNDS */
    Bounded_Image_Crop_with_Mask(p: Bounded_Image_Crop_with_Mask_input, meta?: ComfyNodeMetadata): Bounded_Image_Crop_with_Mask
    /* category:WAS Suite_Debug, name:"Image Bounds to Console", output:IMAGE_BOUNDS */
    Image_Bounds_to_Console(p: Image_Bounds_to_Console_input, meta?: ComfyNodeMetadata): Image_Bounds_to_Console
    /* category:WAS Suite_Text, name:"Text Dictionary Update", output:DICT */
    Text_Dictionary_Update(p: Text_Dictionary_Update_input, meta?: ComfyNodeMetadata): Text_Dictionary_Update
    /* category:WAS Suite_Text, name:"Text Dictionary Get", output:STRING */
    Text_Dictionary_Get(p: Text_Dictionary_Get_input, meta?: ComfyNodeMetadata): Text_Dictionary_Get
    /* category:WAS Suite_Text, name:"Text Dictionary Convert", output:DICT */
    Text_Dictionary_Convert(p: Text_Dictionary_Convert_input, meta?: ComfyNodeMetadata): Text_Dictionary_Convert
    /* category:WAS Suite_Text, name:"Text Dictionary New", output:DICT */
    Text_Dictionary_New(p: Text_Dictionary_New_input, meta?: ComfyNodeMetadata): Text_Dictionary_New
    /* category:WAS Suite_Text, name:"Text Dictionary Keys", output:LIST */
    Text_Dictionary_Keys(p: Text_Dictionary_Keys_input, meta?: ComfyNodeMetadata): Text_Dictionary_Keys
    /* category:WAS Suite_Text, name:"Text Dictionary To Text", output:STRING */
    Text_Dictionary_To_Text(p: Text_Dictionary_To_Text_input, meta?: ComfyNodeMetadata): Text_Dictionary_To_Text
    /* category:WAS Suite_Text_Tokens, name:"Text Add Tokens", output: */
    Text_Add_Tokens(p: Text_Add_Tokens_input, meta?: ComfyNodeMetadata): Text_Add_Tokens
    /* category:WAS Suite_Text_Tokens, name:"Text Add Token by Input", output: */
    Text_Add_Token_by_Input(p: Text_Add_Token_by_Input_input, meta?: ComfyNodeMetadata): Text_Add_Token_by_Input
    /* category:WAS Suite_Text_Search, name:"Text Compare", output:TEXT_A_PASS+TEXT_B_PASS+BOOLEAN+SCORE_NUMBER+COMPARISON_TEXT */
    Text_Compare(p: Text_Compare_input, meta?: ComfyNodeMetadata): Text_Compare
    /* category:WAS Suite_Text, name:"Text Concatenate", output:STRING */
    Text_Concatenate(p: Text_Concatenate_input, meta?: ComfyNodeMetadata): Text_Concatenate
    /* category:WAS Suite_History, name:"Text File History Loader", output:STRING+DICT */
    Text_File_History_Loader(p: Text_File_History_Loader_input, meta?: ComfyNodeMetadata): Text_File_History_Loader
    /* category:WAS Suite_Text_Search, name:"Text Find and Replace by Dictionary", output:STRING */
    Text_Find_and_Replace_by_Dictionary(p: Text_Find_and_Replace_by_Dictionary_input, meta?: ComfyNodeMetadata): Text_Find_and_Replace_by_Dictionary
    /* category:WAS Suite_Text_Search, name:"Text Find and Replace Input", output:result_text+replacement_count_number+replacement_count_float+replacement_count_int */
    Text_Find_and_Replace_Input(p: Text_Find_and_Replace_Input_input, meta?: ComfyNodeMetadata): Text_Find_and_Replace_Input
    /* category:WAS Suite_Text_Search, name:"Text Find and Replace", output:result_text+replacement_count_number+replacement_count_float+replacement_count_int */
    Text_Find_and_Replace(p: Text_Find_and_Replace_input, meta?: ComfyNodeMetadata): Text_Find_and_Replace
    /* category:WAS Suite_Text_Search, name:"Text Find", output:found */
    Text_Find(p: Text_Find_input, meta?: ComfyNodeMetadata): Text_Find
    /* category:WAS Suite_Logic, name:"Text Input Switch", output:STRING */
    Text_Input_Switch(p: Text_Input_Switch_input, meta?: ComfyNodeMetadata): Text_Input_Switch
    /* category:WAS Suite_Text, name:"Text List", output:LIST */
    Text_List(p: Text_List_input, meta?: ComfyNodeMetadata): Text_List
    /* category:WAS Suite_Text, name:"Text List Concatenate", output:LIST */
    Text_List_Concatenate(p: Text_List_Concatenate_input, meta?: ComfyNodeMetadata): Text_List_Concatenate
    /* category:WAS Suite_Text, name:"Text List to Text", output:STRING */
    Text_List_to_Text(p: Text_List_to_Text_input, meta?: ComfyNodeMetadata): Text_List_to_Text
    /* category:WAS Suite_Text, name:"Text Load Line From File", output:line_text+dictionary */
    Text_Load_Line_From_File(p: Text_Load_Line_From_File_input, meta?: ComfyNodeMetadata): Text_Load_Line_From_File
    /* category:WAS Suite_Text, name:"Text Multiline", output:STRING */
    Text_Multiline(p: Text_Multiline_input, meta?: ComfyNodeMetadata): Text_Multiline
    /* category:WAS Suite_Text, name:"Text Multiline (Code Compatible)", output:STRING */
    Text_Multiline_$1Code_Compatible$2(p: Text_Multiline_$1Code_Compatible$2_input, meta?: ComfyNodeMetadata): Text_Multiline_$1Code_Compatible$2
    /* category:WAS Suite_Text_Parse, name:"Text Parse A1111 Embeddings", output:STRING */
    Text_Parse_A1111_Embeddings(p: Text_Parse_A1111_Embeddings_input, meta?: ComfyNodeMetadata): Text_Parse_A1111_Embeddings
    /* category:WAS Suite_Text_Parse, name:"Text Parse Noodle Soup Prompts", output:STRING */
    Text_Parse_Noodle_Soup_Prompts(p: Text_Parse_Noodle_Soup_Prompts_input, meta?: ComfyNodeMetadata): Text_Parse_Noodle_Soup_Prompts
    /* category:WAS Suite_Text_Tokens, name:"Text Parse Tokens", output:STRING */
    Text_Parse_Tokens(p: Text_Parse_Tokens_input, meta?: ComfyNodeMetadata): Text_Parse_Tokens
    /* category:WAS Suite_Text, name:"Text Random Line", output:STRING */
    Text_Random_Line(p: Text_Random_Line_input, meta?: ComfyNodeMetadata): Text_Random_Line
    /* category:WAS Suite_Text, name:"Text Random Prompt", output:STRING */
    Text_Random_Prompt(p: Text_Random_Prompt_input, meta?: ComfyNodeMetadata): Text_Random_Prompt
    /* category:WAS Suite_Text, name:"Text String", output:TEXT+TEXT_B+TEXT_C+TEXT_D */
    Text_String(p: Text_String_input, meta?: ComfyNodeMetadata): Text_String
    /* category:WAS Suite_Logic, name:"Text Contains", output:BOOLEAN */
    Text_Contains(p: Text_Contains_input, meta?: ComfyNodeMetadata): Text_Contains
    /* category:WAS Suite_Text_Operations, name:"Text Shuffle", output:STRING */
    Text_Shuffle(p: Text_Shuffle_input, meta?: ComfyNodeMetadata): Text_Shuffle
    /* category:WAS Suite_Text_Operations, name:"Text Sort", output:STRING */
    Text_Sort(p: Text_Sort_input, meta?: ComfyNodeMetadata): Text_Sort
    /* category:WAS Suite_Text_Operations, name:"Text to Conditioning", output:CONDITIONING */
    Text_to_Conditioning(p: Text_to_Conditioning_input, meta?: ComfyNodeMetadata): Text_to_Conditioning
    /* category:WAS Suite_Debug, name:"Text to Console", output:STRING */
    Text_to_Console(p: Text_to_Console_input, meta?: ComfyNodeMetadata): Text_to_Console
    /* category:WAS Suite_Text_Operations, name:"Text to Number", output:NUMBER */
    Text_to_Number(p: Text_to_Number_input, meta?: ComfyNodeMetadata): Text_to_Number
    /* category:WAS Suite_Text_Operations, name:"Text to String", output:STRING */
    Text_to_String(p: Text_to_String_input, meta?: ComfyNodeMetadata): Text_to_String
    /* category:WAS Suite_Text_Operations, name:"Text String Truncate", output:TEXT+TEXT_B+TEXT_C+TEXT_D */
    Text_String_Truncate(p: Text_String_Truncate_input, meta?: ComfyNodeMetadata): Text_String_Truncate
    /* category:WAS Suite_Number, name:"True Random.org Number Generator", output:NUMBER+FLOAT+INT */
    True_Random$5org_Number_Generator(p: True_Random$5org_Number_Generator_input, meta?: ComfyNodeMetadata): True_Random$5org_Number_Generator
    /* category:WAS Suite_Loaders, name:"unCLIP Checkpoint Loader", output:MODEL+CLIP+VAE+CLIP_VISION+NAME_STRING */
    unCLIP_Checkpoint_Loader(p: unCLIP_Checkpoint_Loader_input, meta?: ComfyNodeMetadata): unCLIP_Checkpoint_Loader
    /* category:WAS Suite_Loaders, name:"Upscale Model Loader", output:UPSCALE_MODEL+MODEL_NAME_TEXT */
    Upscale_Model_Loader(p: Upscale_Model_Loader_input, meta?: ComfyNodeMetadata): Upscale_Model_Loader
    /* category:WAS Suite_Logic, name:"Upscale Model Switch", output:UPSCALE_MODEL */
    Upscale_Model_Switch(p: Upscale_Model_Switch_input, meta?: ComfyNodeMetadata): Upscale_Model_Switch
    /* category:WAS Suite_Animation_Writer, name:"Write to GIF", output:image_pass+filepath_text+filename_text */
    Write_to_GIF(p: Write_to_GIF_input, meta?: ComfyNodeMetadata): Write_to_GIF
    /* category:WAS Suite_Animation_Writer, name:"Write to Video", output:IMAGE_PASS+filepath_text+filename_text */
    Write_to_Video(p: Write_to_Video_input, meta?: ComfyNodeMetadata): Write_to_Video
    /* category:WAS Suite_Logic, name:"VAE Input Switch", output:VAE */
    VAE_Input_Switch(p: VAE_Input_Switch_input, meta?: ComfyNodeMetadata): VAE_Input_Switch
    /* category:WAS Suite_Animation, name:"Video Dump Frames", output:output_path+processed_count */
    Video_Dump_Frames(p: Video_Dump_Frames_input, meta?: ComfyNodeMetadata): Video_Dump_Frames
    /* category:image_transformation, name:"CLIPSEG2", output:IMAGE */
    CLIPSEG2(p: CLIPSEG2_input, meta?: ComfyNodeMetadata): CLIPSEG2
    /* category:WAS Suite_Conditioning, name:"CLIPTextEncode (BlenderNeko Advanced + NSP)", output:conditioning+parsed_text+raw_text */
    CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2(p: CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_input, meta?: ComfyNodeMetadata): CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2
    /* category:conditioning, name:"ConditioningBlend", output:conditioning */
    ConditioningBlend(p: ConditioningBlend_input, meta?: ComfyNodeMetadata): ConditioningBlend
    /* category:debug, name:"DebugInput", output: */
    DebugInput(p: DebugInput_input, meta?: ComfyNodeMetadata): DebugInput
    /* category:latent_inpaint, name:"VAEEncodeForInpaint (WAS)", output:LATENT */
    VAEEncodeForInpaint_$1WAS$2(p: VAEEncodeForInpaint_$1WAS$2_input, meta?: ComfyNodeMetadata): VAEEncodeForInpaint_$1WAS$2
    /* category:image_postprocessing, name:"VividSharpen", output:images */
    VividSharpen(p: VividSharpen_input, meta?: ComfyNodeMetadata): VividSharpen
    /* category:conditioning, name:"CLIPTextEncodeList", output:conditioning_sequence */
    CLIPTextEncodeList(p: CLIPTextEncodeList_input, meta?: ComfyNodeMetadata): CLIPTextEncodeList
    /* category:conditioning, name:"CLIPTextEncodeSequence2", output:conditioning_sequence+cond_keyframes+frame_count */
    CLIPTextEncodeSequence2(p: CLIPTextEncodeSequence2_input, meta?: ComfyNodeMetadata): CLIPTextEncodeSequence2
    /* category:sampling, name:"KSamplerSeq", output:LATENT */
    KSamplerSeq(p: KSamplerSeq_input, meta?: ComfyNodeMetadata): KSamplerSeq
    /* category:sampling, name:"KSamplerSeq2", output:LATENT */
    KSamplerSeq2(p: KSamplerSeq2_input, meta?: ComfyNodeMetadata): KSamplerSeq2
    /* category:latent, name:"BLVAEEncode", output:latent */
    BLVAEEncode(p: BLVAEEncode_input, meta?: ComfyNodeMetadata): BLVAEEncode
    /* category:api_image, name:"SaveImageWebsocket", output: */
    SaveImageWebsocket(p: SaveImageWebsocket_input, meta?: ComfyNodeMetadata): SaveImageWebsocket
    /* category:WLSH Nodes_loaders, name:"Checkpoint Loader w/Name (WLSH)", output:MODEL+CLIP+VAE+modelname */
    Checkpoint_Loader_w$3Name_$1WLSH$2(p: Checkpoint_Loader_w$3Name_$1WLSH$2_input, meta?: ComfyNodeMetadata): Checkpoint_Loader_w$3Name_$1WLSH$2
    /* category:WLSH Nodes_sampling, name:"KSamplerAdvanced (WLSH)", output:LATENT+INFO */
    KSamplerAdvanced_$1WLSH$2(p: KSamplerAdvanced_$1WLSH$2_input, meta?: ComfyNodeMetadata): KSamplerAdvanced_$1WLSH$2
    /* category:WLSH Nodes_conditioning, name:"CLIP Positive-Negative (WLSH)", output:positive+negative */
    CLIP_Positive$7Negative_$1WLSH$2(p: CLIP_Positive$7Negative_$1WLSH$2_input, meta?: ComfyNodeMetadata): CLIP_Positive$7Negative_$1WLSH$2
    /* category:WLSH Nodes_conditioning, name:"CLIP Positive-Negative w/Text (WLSH)", output:positive+negative+positive_text+negative_text */
    CLIP_Positive$7Negative_w$3Text_$1WLSH$2(p: CLIP_Positive$7Negative_w$3Text_$1WLSH$2_input, meta?: ComfyNodeMetadata): CLIP_Positive$7Negative_w$3Text_$1WLSH$2
    /* category:WLSH Nodes_conditioning, name:"CLIP Positive-Negative XL (WLSH)", output:positive+negative */
    CLIP_Positive$7Negative_XL_$1WLSH$2(p: CLIP_Positive$7Negative_XL_$1WLSH$2_input, meta?: ComfyNodeMetadata): CLIP_Positive$7Negative_XL_$1WLSH$2
    /* category:WLSH Nodes_conditioning, name:"CLIP Positive-Negative XL w/Text (WLSH)", output:positive+negative+positive_text+negative_text */
    CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2(p: CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2_input, meta?: ComfyNodeMetadata): CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2
    /* category:WLSH Nodes_conditioning, name:"CLIP +/- w/Text Unified (WLSH)", output:positive+negative+positive_text+negative_text */
    CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2(p: CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_input, meta?: ComfyNodeMetadata): CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2
    /* category:WLSH Nodes_latent, name:"Empty Latent by Pixels (WLSH)", output:latent+width+height */
    Empty_Latent_by_Pixels_$1WLSH$2(p: Empty_Latent_by_Pixels_$1WLSH$2_input, meta?: ComfyNodeMetadata): Empty_Latent_by_Pixels_$1WLSH$2
    /* category:WLSH Nodes_latent, name:"Empty Latent by Ratio (WLSH)", output:latent+width+height */
    Empty_Latent_by_Ratio_$1WLSH$2(p: Empty_Latent_by_Ratio_$1WLSH$2_input, meta?: ComfyNodeMetadata): Empty_Latent_by_Ratio_$1WLSH$2
    /* category:WLSH Nodes_latent, name:"Empty Latent by Size (WLSH)", output:latent+width+height */
    Empty_Latent_by_Size_$1WLSH$2(p: Empty_Latent_by_Size_$1WLSH$2_input, meta?: ComfyNodeMetadata): Empty_Latent_by_Size_$1WLSH$2
    /* category:WLSH Nodes_latent, name:"SDXL Quick Empty Latent (WLSH)", output:latent+width+height */
    SDXL_Quick_Empty_Latent_$1WLSH$2(p: SDXL_Quick_Empty_Latent_$1WLSH$2_input, meta?: ComfyNodeMetadata): SDXL_Quick_Empty_Latent_$1WLSH$2
    /* category:WLSH Nodes_image, name:"Image Load with Metadata (WLSH)", output:image+positive+negative+seed+steps+cfg+width+height */
    Image_Load_with_Metadata_$1WLSH$2(p: Image_Load_with_Metadata_$1WLSH$2_input, meta?: ComfyNodeMetadata): Image_Load_with_Metadata_$1WLSH$2
    /* category:WLSH Nodes_image, name:"Grayscale Image (WLSH)", output:grayscale */
    Grayscale_Image_$1WLSH$2(p: Grayscale_Image_$1WLSH$2_input, meta?: ComfyNodeMetadata): Grayscale_Image_$1WLSH$2
    /* category:WLSH Nodes_inpainting, name:"Generate Border Mask (WLSH)", output:IMAGE */
    Generate_Border_Mask_$1WLSH$2(p: Generate_Border_Mask_$1WLSH$2_input, meta?: ComfyNodeMetadata): Generate_Border_Mask_$1WLSH$2
    /* category:WLSH Nodes_inpainting, name:"Outpaint to Image (WLSH)", output:IMAGE+MASK */
    Outpaint_to_Image_$1WLSH$2(p: Outpaint_to_Image_$1WLSH$2_input, meta?: ComfyNodeMetadata): Outpaint_to_Image_$1WLSH$2
    /* category:WLSH Nodes_inpainting, name:"VAE Encode for Inpaint w/Padding (WLSH)", output:LATENT */
    VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2(p: VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2_input, meta?: ComfyNodeMetadata): VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2
    /* category:WLSH Nodes_upscaling, name:"Image Scale By Factor (WLSH)", output:IMAGE */
    Image_Scale_By_Factor_$1WLSH$2(p: Image_Scale_By_Factor_$1WLSH$2_input, meta?: ComfyNodeMetadata): Image_Scale_By_Factor_$1WLSH$2
    /* category:WLSH Nodes_upscaling, name:"Image Scale by Shortside (WLSH)", output:IMAGE+width+height */
    Image_Scale_by_Shortside_$1WLSH$2(p: Image_Scale_by_Shortside_$1WLSH$2_input, meta?: ComfyNodeMetadata): Image_Scale_by_Shortside_$1WLSH$2
    /* category:WLSH Nodes_upscaling, name:"SDXL Quick Image Scale (WLSH)", output:IMAGE */
    SDXL_Quick_Image_Scale_$1WLSH$2(p: SDXL_Quick_Image_Scale_$1WLSH$2_input, meta?: ComfyNodeMetadata): SDXL_Quick_Image_Scale_$1WLSH$2
    /* category:WLSH Nodes_upscaling, name:"Upscale by Factor with Model (WLSH)", output:IMAGE */
    Upscale_by_Factor_with_Model_$1WLSH$2(p: Upscale_by_Factor_with_Model_$1WLSH$2_input, meta?: ComfyNodeMetadata): Upscale_by_Factor_with_Model_$1WLSH$2
    /* category:WLSH Nodes_number, name:"Multiply Integer (WLSH)", output:INT */
    Multiply_Integer_$1WLSH$2(p: Multiply_Integer_$1WLSH$2_input, meta?: ComfyNodeMetadata): Multiply_Integer_$1WLSH$2
    /* category:WLSH Nodes_number, name:"Quick Resolution Multiply (WLSH)", output:width+height */
    Quick_Resolution_Multiply_$1WLSH$2(p: Quick_Resolution_Multiply_$1WLSH$2_input, meta?: ComfyNodeMetadata): Quick_Resolution_Multiply_$1WLSH$2
    /* category:WLSH Nodes_number, name:"Resolutions by Ratio (WLSH)", output:width+height */
    Resolutions_by_Ratio_$1WLSH$2(p: Resolutions_by_Ratio_$1WLSH$2_input, meta?: ComfyNodeMetadata): Resolutions_by_Ratio_$1WLSH$2
    /* category:WLSH Nodes_number, name:"Seed to Number (WLSH)", output:INT */
    Seed_to_Number_$1WLSH$2(p: Seed_to_Number_$1WLSH$2_input, meta?: ComfyNodeMetadata): Seed_to_Number_$1WLSH$2
    /* category:WLSH Nodes_number, name:"Seed and Int (WLSH)", output:INT+SEED */
    Seed_and_Int_$1WLSH$2(p: Seed_and_Int_$1WLSH$2_input, meta?: ComfyNodeMetadata): Seed_and_Int_$1WLSH$2
    /* category:WLSH Nodes_number, name:"SDXL Steps (WLSH)", output:pre+base+total */
    SDXL_Steps_$1WLSH$2(p: SDXL_Steps_$1WLSH$2_input, meta?: ComfyNodeMetadata): SDXL_Steps_$1WLSH$2
    /* category:WLSH Nodes_number, name:"SDXL Resolutions (WLSH)", output:width+height */
    SDXL_Resolutions_$1WLSH$2(p: SDXL_Resolutions_$1WLSH$2_input, meta?: ComfyNodeMetadata): SDXL_Resolutions_$1WLSH$2
    /* category:WLSH Nodes_text, name:"Build Filename String (WLSH)", output:filename */
    Build_Filename_String_$1WLSH$2(p: Build_Filename_String_$1WLSH$2_input, meta?: ComfyNodeMetadata): Build_Filename_String_$1WLSH$2
    /* category:WLSH Nodes_text, name:"Time String (WLSH)", output:time_format */
    Time_String_$1WLSH$2(p: Time_String_$1WLSH$2_input, meta?: ComfyNodeMetadata): Time_String_$1WLSH$2
    /* category:WLSH Nodes_text, name:"Simple Pattern Replace (WLSH)", output:string */
    Simple_Pattern_Replace_$1WLSH$2(p: Simple_Pattern_Replace_$1WLSH$2_input, meta?: ComfyNodeMetadata): Simple_Pattern_Replace_$1WLSH$2
    /* category:WLSH Nodes_text, name:"Simple String Combine (WLSH)", output:combined */
    Simple_String_Combine_$1WLSH$2(p: Simple_String_Combine_$1WLSH$2_input, meta?: ComfyNodeMetadata): Simple_String_Combine_$1WLSH$2
    /* category:WLSH Nodes_text, name:"Prompt Weight (WLSH)", output:prompt */
    Prompt_Weight_$1WLSH$2(p: Prompt_Weight_$1WLSH$2_input, meta?: ComfyNodeMetadata): Prompt_Weight_$1WLSH$2
    /* category:WLSH Nodes_IO, name:"Image Save with Prompt (WLSH)", output: */
    Image_Save_with_Prompt_$1WLSH$2(p: Image_Save_with_Prompt_$1WLSH$2_input, meta?: ComfyNodeMetadata): Image_Save_with_Prompt_$1WLSH$2
    /* category:WLSH Nodes_IO, name:"Image Save with Prompt/Info (WLSH)", output: */
    Image_Save_with_Prompt$3Info_$1WLSH$2(p: Image_Save_with_Prompt$3Info_$1WLSH$2_input, meta?: ComfyNodeMetadata): Image_Save_with_Prompt$3Info_$1WLSH$2
    /* category:WLSH Nodes_IO, name:"Image Save with Prompt File (WLSH)", output: */
    Image_Save_with_Prompt_File_$1WLSH$2(p: Image_Save_with_Prompt_File_$1WLSH$2_input, meta?: ComfyNodeMetadata): Image_Save_with_Prompt_File_$1WLSH$2
    /* category:WLSH Nodes_IO, name:"Image Save with Prompt/Info File (WLSH)", output: */
    Image_Save_with_Prompt$3Info_File_$1WLSH$2(p: Image_Save_with_Prompt$3Info_File_$1WLSH$2_input, meta?: ComfyNodeMetadata): Image_Save_with_Prompt$3Info_File_$1WLSH$2
    /* category:WLSH Nodes_IO, name:"Save Prompt (WLSH)", output: */
    Save_Prompt_$1WLSH$2(p: Save_Prompt_$1WLSH$2_input, meta?: ComfyNodeMetadata): Save_Prompt_$1WLSH$2
    /* category:WLSH Nodes_IO, name:"Save Prompt/Info (WLSH)", output: */
    Save_Prompt$3Info_$1WLSH$2(p: Save_Prompt$3Info_$1WLSH$2_input, meta?: ComfyNodeMetadata): Save_Prompt$3Info_$1WLSH$2
    /* category:WLSH Nodes_IO, name:"Save Positive Prompt(WLSH)", output: */
    Save_Positive_Prompt$1WLSH$2(p: Save_Positive_Prompt$1WLSH$2_input, meta?: ComfyNodeMetadata): Save_Positive_Prompt$1WLSH$2
    /* category:test, name:"UnknownNodeXX", output: */
    UnknownNodeXX(p: UnknownNodeXX_input, meta?: ComfyNodeMetadata): UnknownNodeXX
}

// 1. Requirable --------------------------
export interface Requirable {
    Enum_KSampler_sampler_name: { $Name: "Enum_KSampler_sampler_name", $Value: Enum_KSampler_sampler_name },
    Enum_KSampler_scheduler: { $Name: "Enum_KSampler_scheduler", $Value: Enum_KSampler_scheduler },
    Enum_CheckpointLoaderSimple_ckpt_name: { $Name: "Enum_CheckpointLoaderSimple_ckpt_name", $Value: Enum_CheckpointLoaderSimple_ckpt_name },
    Enum_VAELoader_vae_name: { $Name: "Enum_VAELoader_vae_name", $Value: Enum_VAELoader_vae_name },
    Enum_LatentUpscale_upscale_method: { $Name: "Enum_LatentUpscale_upscale_method", $Value: Enum_LatentUpscale_upscale_method },
    Enum_LatentUpscale_crop: { $Name: "Enum_LatentUpscale_crop", $Value: Enum_LatentUpscale_crop },
    Enum_LatentUpscaleBy_upscale_method: { $Name: "Enum_LatentUpscaleBy_upscale_method", $Value: Enum_LatentUpscaleBy_upscale_method },
    Enum_LoadImage_image: { $Name: "Enum_LoadImage_image", $Value: Enum_LoadImage_image },
    Enum_LoadImageMask_image: { $Name: "Enum_LoadImageMask_image", $Value: Enum_LoadImageMask_image },
    Enum_LoadImageMask_channel: { $Name: "Enum_LoadImageMask_channel", $Value: Enum_LoadImageMask_channel },
    Enum_ImageScale_upscale_method: { $Name: "Enum_ImageScale_upscale_method", $Value: Enum_ImageScale_upscale_method },
    Enum_ImageScale_crop: { $Name: "Enum_ImageScale_crop", $Value: Enum_ImageScale_crop },
    Enum_ImageScaleBy_upscale_method: { $Name: "Enum_ImageScaleBy_upscale_method", $Value: Enum_ImageScaleBy_upscale_method },
    Enum_ConditioningSetMask_set_cond_area: { $Name: "Enum_ConditioningSetMask_set_cond_area", $Value: Enum_ConditioningSetMask_set_cond_area },
    Enum_KSamplerAdvanced_add_noise: { $Name: "Enum_KSamplerAdvanced_add_noise", $Value: Enum_KSamplerAdvanced_add_noise },
    Enum_KSamplerAdvanced_sampler_name: { $Name: "Enum_KSamplerAdvanced_sampler_name", $Value: Enum_KSamplerAdvanced_sampler_name },
    Enum_KSamplerAdvanced_scheduler: { $Name: "Enum_KSamplerAdvanced_scheduler", $Value: Enum_KSamplerAdvanced_scheduler },
    Enum_KSamplerAdvanced_return_with_leftover_noise: { $Name: "Enum_KSamplerAdvanced_return_with_leftover_noise", $Value: Enum_KSamplerAdvanced_return_with_leftover_noise },
    Enum_LatentRotate_rotation: { $Name: "Enum_LatentRotate_rotation", $Value: Enum_LatentRotate_rotation },
    Enum_LatentFlip_flip_method: { $Name: "Enum_LatentFlip_flip_method", $Value: Enum_LatentFlip_flip_method },
    Enum_LoraLoader_lora_name: { $Name: "Enum_LoraLoader_lora_name", $Value: Enum_LoraLoader_lora_name },
    Enum_CLIPLoader_clip_name: { $Name: "Enum_CLIPLoader_clip_name", $Value: Enum_CLIPLoader_clip_name },
    Enum_CLIPLoader_type: { $Name: "Enum_CLIPLoader_type", $Value: Enum_CLIPLoader_type },
    Enum_UNETLoader_unet_name: { $Name: "Enum_UNETLoader_unet_name", $Value: Enum_UNETLoader_unet_name },
    Enum_UNETLoader_weight_dtype: { $Name: "Enum_UNETLoader_weight_dtype", $Value: Enum_UNETLoader_weight_dtype },
    Enum_DualCLIPLoader_clip_name1: { $Name: "Enum_DualCLIPLoader_clip_name1", $Value: Enum_DualCLIPLoader_clip_name1 },
    Enum_DualCLIPLoader_clip_name2: { $Name: "Enum_DualCLIPLoader_clip_name2", $Value: Enum_DualCLIPLoader_clip_name2 },
    Enum_DualCLIPLoader_type: { $Name: "Enum_DualCLIPLoader_type", $Value: Enum_DualCLIPLoader_type },
    Enum_ControlNetLoader_control_net_name: { $Name: "Enum_ControlNetLoader_control_net_name", $Value: Enum_ControlNetLoader_control_net_name },
    Enum_DiffControlNetLoader_control_net_name: { $Name: "Enum_DiffControlNetLoader_control_net_name", $Value: Enum_DiffControlNetLoader_control_net_name },
    Enum_StyleModelLoader_style_model_name: { $Name: "Enum_StyleModelLoader_style_model_name", $Value: Enum_StyleModelLoader_style_model_name },
    Enum_CLIPVisionLoader_clip_name: { $Name: "Enum_CLIPVisionLoader_clip_name", $Value: Enum_CLIPVisionLoader_clip_name },
    Enum_unCLIPCheckpointLoader_ckpt_name: { $Name: "Enum_unCLIPCheckpointLoader_ckpt_name", $Value: Enum_unCLIPCheckpointLoader_ckpt_name },
    Enum_GLIGENLoader_gligen_name: { $Name: "Enum_GLIGENLoader_gligen_name", $Value: Enum_GLIGENLoader_gligen_name },
    Enum_CheckpointLoader_config_name: { $Name: "Enum_CheckpointLoader_config_name", $Value: Enum_CheckpointLoader_config_name },
    Enum_CheckpointLoader_ckpt_name: { $Name: "Enum_CheckpointLoader_ckpt_name", $Value: Enum_CheckpointLoader_ckpt_name },
    Enum_DiffusersLoader_model_path: { $Name: "Enum_DiffusersLoader_model_path", $Value: Enum_DiffusersLoader_model_path },
    Enum_LoadLatent_latent: { $Name: "Enum_LoadLatent_latent", $Value: Enum_LoadLatent_latent },
    Enum_LoraLoaderModelOnly_lora_name: { $Name: "Enum_LoraLoaderModelOnly_lora_name", $Value: Enum_LoraLoaderModelOnly_lora_name },
    Enum_LatentBatchSeedBehavior_seed_behavior: { $Name: "Enum_LatentBatchSeedBehavior_seed_behavior", $Value: Enum_LatentBatchSeedBehavior_seed_behavior },
    Enum_HypernetworkLoader_hypernetwork_name: { $Name: "Enum_HypernetworkLoader_hypernetwork_name", $Value: Enum_HypernetworkLoader_hypernetwork_name },
    Enum_UpscaleModelLoader_model_name: { $Name: "Enum_UpscaleModelLoader_model_name", $Value: Enum_UpscaleModelLoader_model_name },
    Enum_ImageBlend_blend_mode: { $Name: "Enum_ImageBlend_blend_mode", $Value: Enum_ImageBlend_blend_mode },
    Enum_ImageQuantize_dither: { $Name: "Enum_ImageQuantize_dither", $Value: Enum_ImageQuantize_dither },
    Enum_ImageScaleToTotalPixels_upscale_method: { $Name: "Enum_ImageScaleToTotalPixels_upscale_method", $Value: Enum_ImageScaleToTotalPixels_upscale_method },
    Enum_ImageToMask_channel: { $Name: "Enum_ImageToMask_channel", $Value: Enum_ImageToMask_channel },
    Enum_MaskComposite_operation: { $Name: "Enum_MaskComposite_operation", $Value: Enum_MaskComposite_operation },
    Enum_PorterDuffImageComposite_mode: { $Name: "Enum_PorterDuffImageComposite_mode", $Value: Enum_PorterDuffImageComposite_mode },
    Enum_BasicScheduler_scheduler: { $Name: "Enum_BasicScheduler_scheduler", $Value: Enum_BasicScheduler_scheduler },
    Enum_KSamplerSelect_sampler_name: { $Name: "Enum_KSamplerSelect_sampler_name", $Value: Enum_KSamplerSelect_sampler_name },
    "Enum_SamplerDPMPP$_3M$_SDE_noise_device": { $Name: "Enum_SamplerDPMPP$_3M$_SDE_noise_device", $Value: Enum_SamplerDPMPP$_3M$_SDE_noise_device },
    "Enum_SamplerDPMPP$_2M$_SDE_solver_type": { $Name: "Enum_SamplerDPMPP$_2M$_SDE_solver_type", $Value: Enum_SamplerDPMPP$_2M$_SDE_solver_type },
    "Enum_SamplerDPMPP$_2M$_SDE_noise_device": { $Name: "Enum_SamplerDPMPP$_2M$_SDE_noise_device", $Value: Enum_SamplerDPMPP$_2M$_SDE_noise_device },
    "Enum_SamplerDPMPP$_SDE_noise_device": { $Name: "Enum_SamplerDPMPP$_SDE_noise_device", $Value: Enum_SamplerDPMPP$_SDE_noise_device },
    Enum_ModelSamplingDiscrete_sampling: { $Name: "Enum_ModelSamplingDiscrete_sampling", $Value: Enum_ModelSamplingDiscrete_sampling },
    Enum_ModelSamplingContinuousEDM_sampling: { $Name: "Enum_ModelSamplingContinuousEDM_sampling", $Value: Enum_ModelSamplingContinuousEDM_sampling },
    Enum_ModelSamplingContinuousV_sampling: { $Name: "Enum_ModelSamplingContinuousV_sampling", $Value: Enum_ModelSamplingContinuousV_sampling },
    Enum_PatchModelAddDownscale_downscale_method: { $Name: "Enum_PatchModelAddDownscale_downscale_method", $Value: Enum_PatchModelAddDownscale_downscale_method },
    Enum_PatchModelAddDownscale_upscale_method: { $Name: "Enum_PatchModelAddDownscale_upscale_method", $Value: Enum_PatchModelAddDownscale_upscale_method },
    Enum_SaveAnimatedWEBP_method: { $Name: "Enum_SaveAnimatedWEBP_method", $Value: Enum_SaveAnimatedWEBP_method },
    Enum_ImageOnlyCheckpointLoader_ckpt_name: { $Name: "Enum_ImageOnlyCheckpointLoader_ckpt_name", $Value: Enum_ImageOnlyCheckpointLoader_ckpt_name },
    Enum_PhotoMakerLoader_photomaker_model_name: { $Name: "Enum_PhotoMakerLoader_photomaker_model_name", $Value: Enum_PhotoMakerLoader_photomaker_model_name },
    Enum_Morphology_operation: { $Name: "Enum_Morphology_operation", $Value: Enum_Morphology_operation },
    Enum_AlignYourStepsScheduler_model_type: { $Name: "Enum_AlignYourStepsScheduler_model_type", $Value: Enum_AlignYourStepsScheduler_model_type },
    Enum_SamplerLCMUpscale_upscale_method: { $Name: "Enum_SamplerLCMUpscale_upscale_method", $Value: Enum_SamplerLCMUpscale_upscale_method },
    Enum_SamplerEulerCFGpp_version: { $Name: "Enum_SamplerEulerCFGpp_version", $Value: Enum_SamplerEulerCFGpp_version },
    Enum_LoadAudio_audio: { $Name: "Enum_LoadAudio_audio", $Value: Enum_LoadAudio_audio },
    Enum_TripleCLIPLoader_clip_name1: { $Name: "Enum_TripleCLIPLoader_clip_name1", $Value: Enum_TripleCLIPLoader_clip_name1 },
    Enum_TripleCLIPLoader_clip_name2: { $Name: "Enum_TripleCLIPLoader_clip_name2", $Value: Enum_TripleCLIPLoader_clip_name2 },
    Enum_TripleCLIPLoader_clip_name3: { $Name: "Enum_TripleCLIPLoader_clip_name3", $Value: Enum_TripleCLIPLoader_clip_name3 },
    Enum_CLIPTextEncodeSD3_empty_padding: { $Name: "Enum_CLIPTextEncodeSD3_empty_padding", $Value: Enum_CLIPTextEncodeSD3_empty_padding },
    Enum_SetUnionControlNetType_type: { $Name: "Enum_SetUnionControlNetType_type", $Value: Enum_SetUnionControlNetType_type },
    Enum_LoraSave_lora_type: { $Name: "Enum_LoraSave_lora_type", $Value: Enum_LoraSave_lora_type },
    Enum_TorchCompileModel_backend: { $Name: "Enum_TorchCompileModel_backend", $Value: Enum_TorchCompileModel_backend },
    "Enum_CivitAI$_Lora$_Loader_lora_name": { $Name: "Enum_CivitAI$_Lora$_Loader_lora_name", $Value: Enum_CivitAI$_Lora$_Loader_lora_name },
    "Enum_CivitAI$_Lora$_Loader_download_path": { $Name: "Enum_CivitAI$_Lora$_Loader_download_path", $Value: Enum_CivitAI$_Lora$_Loader_download_path },
    "Enum_CivitAI$_Checkpoint$_Loader_ckpt_name": { $Name: "Enum_CivitAI$_Checkpoint$_Loader_ckpt_name", $Value: Enum_CivitAI$_Checkpoint$_Loader_ckpt_name },
    "Enum_CivitAI$_Checkpoint$_Loader_download_path": { $Name: "Enum_CivitAI$_Checkpoint$_Loader_download_path", $Value: Enum_CivitAI$_Checkpoint$_Loader_download_path },
    Enum_AlphaChanelAddByMask_method: { $Name: "Enum_AlphaChanelAddByMask_method", $Value: Enum_AlphaChanelAddByMask_method },
    Enum_AlphaChanelAsMask_method: { $Name: "Enum_AlphaChanelAsMask_method", $Value: Enum_AlphaChanelAsMask_method },
    Enum_ImageBatchFork_priority: { $Name: "Enum_ImageBatchFork_priority", $Value: Enum_ImageBatchFork_priority },
    Enum_ImageCompositeAbsolute_background: { $Name: "Enum_ImageCompositeAbsolute_background", $Value: Enum_ImageCompositeAbsolute_background },
    Enum_ImageCompositeAbsolute_method: { $Name: "Enum_ImageCompositeAbsolute_method", $Value: Enum_ImageCompositeAbsolute_method },
    Enum_ImageCompositeAbsoluteByContainer_background: { $Name: "Enum_ImageCompositeAbsoluteByContainer_background", $Value: Enum_ImageCompositeAbsoluteByContainer_background },
    Enum_ImageCompositeAbsoluteByContainer_method: { $Name: "Enum_ImageCompositeAbsoluteByContainer_method", $Value: Enum_ImageCompositeAbsoluteByContainer_method },
    Enum_ImageCompositeRelative_background: { $Name: "Enum_ImageCompositeRelative_background", $Value: Enum_ImageCompositeRelative_background },
    Enum_ImageCompositeRelative_container_size_type: { $Name: "Enum_ImageCompositeRelative_container_size_type", $Value: Enum_ImageCompositeRelative_container_size_type },
    Enum_ImageCompositeRelative_method: { $Name: "Enum_ImageCompositeRelative_method", $Value: Enum_ImageCompositeRelative_method },
    Enum_ImageCompositeRelativeByContainer_background: { $Name: "Enum_ImageCompositeRelativeByContainer_background", $Value: Enum_ImageCompositeRelativeByContainer_background },
    Enum_ImageCompositeRelativeByContainer_method: { $Name: "Enum_ImageCompositeRelativeByContainer_method", $Value: Enum_ImageCompositeRelativeByContainer_method },
    Enum_ImageContainerInheritanceAdd_method: { $Name: "Enum_ImageContainerInheritanceAdd_method", $Value: Enum_ImageContainerInheritanceAdd_method },
    Enum_ImageContainerInheritanceScale_method: { $Name: "Enum_ImageContainerInheritanceScale_method", $Value: Enum_ImageContainerInheritanceScale_method },
    Enum_ImageContainerInheritanceMax_method: { $Name: "Enum_ImageContainerInheritanceMax_method", $Value: Enum_ImageContainerInheritanceMax_method },
    Enum_ImageContainerInheritanceSum_container_size_type: { $Name: "Enum_ImageContainerInheritanceSum_container_size_type", $Value: Enum_ImageContainerInheritanceSum_container_size_type },
    Enum_ImageContainerInheritanceSum_method: { $Name: "Enum_ImageContainerInheritanceSum_method", $Value: Enum_ImageContainerInheritanceSum_method },
    Enum_ImageDrawArc_method: { $Name: "Enum_ImageDrawArc_method", $Value: Enum_ImageDrawArc_method },
    Enum_ImageDrawArcByContainer_method: { $Name: "Enum_ImageDrawArcByContainer_method", $Value: Enum_ImageDrawArcByContainer_method },
    Enum_ImageDrawChord_method: { $Name: "Enum_ImageDrawChord_method", $Value: Enum_ImageDrawChord_method },
    Enum_ImageDrawChordByContainer_method: { $Name: "Enum_ImageDrawChordByContainer_method", $Value: Enum_ImageDrawChordByContainer_method },
    Enum_ImageDrawEllipse_method: { $Name: "Enum_ImageDrawEllipse_method", $Value: Enum_ImageDrawEllipse_method },
    Enum_ImageDrawEllipseByContainer_method: { $Name: "Enum_ImageDrawEllipseByContainer_method", $Value: Enum_ImageDrawEllipseByContainer_method },
    Enum_ImageDrawLine_method: { $Name: "Enum_ImageDrawLine_method", $Value: Enum_ImageDrawLine_method },
    Enum_ImageDrawLineByContainer_method: { $Name: "Enum_ImageDrawLineByContainer_method", $Value: Enum_ImageDrawLineByContainer_method },
    Enum_ImageDrawPieslice_method: { $Name: "Enum_ImageDrawPieslice_method", $Value: Enum_ImageDrawPieslice_method },
    Enum_ImageDrawPiesliceByContainer_method: { $Name: "Enum_ImageDrawPiesliceByContainer_method", $Value: Enum_ImageDrawPiesliceByContainer_method },
    Enum_ImageDrawRectangle_method: { $Name: "Enum_ImageDrawRectangle_method", $Value: Enum_ImageDrawRectangle_method },
    Enum_ImageDrawRectangleByContainer_method: { $Name: "Enum_ImageDrawRectangleByContainer_method", $Value: Enum_ImageDrawRectangleByContainer_method },
    Enum_ImageDrawRectangleRounded_top_left_corner: { $Name: "Enum_ImageDrawRectangleRounded_top_left_corner", $Value: Enum_ImageDrawRectangleRounded_top_left_corner },
    Enum_ImageDrawRectangleRounded_top_right_corner: { $Name: "Enum_ImageDrawRectangleRounded_top_right_corner", $Value: Enum_ImageDrawRectangleRounded_top_right_corner },
    Enum_ImageDrawRectangleRounded_bottom_right_corner: { $Name: "Enum_ImageDrawRectangleRounded_bottom_right_corner", $Value: Enum_ImageDrawRectangleRounded_bottom_right_corner },
    Enum_ImageDrawRectangleRounded_bottom_left_corner: { $Name: "Enum_ImageDrawRectangleRounded_bottom_left_corner", $Value: Enum_ImageDrawRectangleRounded_bottom_left_corner },
    Enum_ImageDrawRectangleRounded_method: { $Name: "Enum_ImageDrawRectangleRounded_method", $Value: Enum_ImageDrawRectangleRounded_method },
    Enum_ImageDrawRectangleRoundedByContainer_top_left_corner: { $Name: "Enum_ImageDrawRectangleRoundedByContainer_top_left_corner", $Value: Enum_ImageDrawRectangleRoundedByContainer_top_left_corner },
    Enum_ImageDrawRectangleRoundedByContainer_top_right_corner: { $Name: "Enum_ImageDrawRectangleRoundedByContainer_top_right_corner", $Value: Enum_ImageDrawRectangleRoundedByContainer_top_right_corner },
    Enum_ImageDrawRectangleRoundedByContainer_bottom_right_corner: { $Name: "Enum_ImageDrawRectangleRoundedByContainer_bottom_right_corner", $Value: Enum_ImageDrawRectangleRoundedByContainer_bottom_right_corner },
    Enum_ImageDrawRectangleRoundedByContainer_bottom_left_corner: { $Name: "Enum_ImageDrawRectangleRoundedByContainer_bottom_left_corner", $Value: Enum_ImageDrawRectangleRoundedByContainer_bottom_left_corner },
    Enum_ImageDrawRectangleRoundedByContainer_method: { $Name: "Enum_ImageDrawRectangleRoundedByContainer_method", $Value: Enum_ImageDrawRectangleRoundedByContainer_method },
    Enum_ImageDrawPolygon_method: { $Name: "Enum_ImageDrawPolygon_method", $Value: Enum_ImageDrawPolygon_method },
    Enum_ImageEffectsLensZoomBurst_method: { $Name: "Enum_ImageEffectsLensZoomBurst_method", $Value: Enum_ImageEffectsLensZoomBurst_method },
    Enum_ImageEffectsLensZoomBurst_stabilization: { $Name: "Enum_ImageEffectsLensZoomBurst_stabilization", $Value: Enum_ImageEffectsLensZoomBurst_stabilization },
    Enum_ImageEffectsLensChromaticAberration_method: { $Name: "Enum_ImageEffectsLensChromaticAberration_method", $Value: Enum_ImageEffectsLensChromaticAberration_method },
    Enum_ImageEffectsLensChromaticAberration_transpose: { $Name: "Enum_ImageEffectsLensChromaticAberration_transpose", $Value: Enum_ImageEffectsLensChromaticAberration_transpose },
    Enum_ImageEffectsLensChromaticAberration_colors: { $Name: "Enum_ImageEffectsLensChromaticAberration_colors", $Value: Enum_ImageEffectsLensChromaticAberration_colors },
    Enum_ImageEffectsLensBokeh_blur_type: { $Name: "Enum_ImageEffectsLensBokeh_blur_type", $Value: Enum_ImageEffectsLensBokeh_blur_type },
    Enum_ImageEffectsLensBokeh_method: { $Name: "Enum_ImageEffectsLensBokeh_method", $Value: Enum_ImageEffectsLensBokeh_method },
    Enum_ImageEffectsLensOpticAxis_lens_shape: { $Name: "Enum_ImageEffectsLensOpticAxis_lens_shape", $Value: Enum_ImageEffectsLensOpticAxis_lens_shape },
    Enum_ImageEffectsLensOpticAxis_lens_edge: { $Name: "Enum_ImageEffectsLensOpticAxis_lens_edge", $Value: Enum_ImageEffectsLensOpticAxis_lens_edge },
    Enum_ImageEffectsLensVignette_lens_shape: { $Name: "Enum_ImageEffectsLensVignette_lens_shape", $Value: Enum_ImageEffectsLensVignette_lens_shape },
    Enum_ImageEffectsLensVignette_lens_edge: { $Name: "Enum_ImageEffectsLensVignette_lens_edge", $Value: Enum_ImageEffectsLensVignette_lens_edge },
    Enum_ImageNoiseBeta_monochromatic: { $Name: "Enum_ImageNoiseBeta_monochromatic", $Value: Enum_ImageNoiseBeta_monochromatic },
    Enum_ImageNoiseBeta_invert: { $Name: "Enum_ImageNoiseBeta_invert", $Value: Enum_ImageNoiseBeta_invert },
    Enum_ImageNoiseBeta_channels: { $Name: "Enum_ImageNoiseBeta_channels", $Value: Enum_ImageNoiseBeta_channels },
    Enum_ImageNoiseBinomial_monochromatic: { $Name: "Enum_ImageNoiseBinomial_monochromatic", $Value: Enum_ImageNoiseBinomial_monochromatic },
    Enum_ImageNoiseBinomial_invert: { $Name: "Enum_ImageNoiseBinomial_invert", $Value: Enum_ImageNoiseBinomial_invert },
    Enum_ImageNoiseBinomial_channels: { $Name: "Enum_ImageNoiseBinomial_channels", $Value: Enum_ImageNoiseBinomial_channels },
    Enum_ImageNoiseBytes_monochromatic: { $Name: "Enum_ImageNoiseBytes_monochromatic", $Value: Enum_ImageNoiseBytes_monochromatic },
    Enum_ImageNoiseBytes_invert: { $Name: "Enum_ImageNoiseBytes_invert", $Value: Enum_ImageNoiseBytes_invert },
    Enum_ImageNoiseBytes_channels: { $Name: "Enum_ImageNoiseBytes_channels", $Value: Enum_ImageNoiseBytes_channels },
    Enum_ImageNoiseGaussian_monochromatic: { $Name: "Enum_ImageNoiseGaussian_monochromatic", $Value: Enum_ImageNoiseGaussian_monochromatic },
    Enum_ImageNoiseGaussian_invert: { $Name: "Enum_ImageNoiseGaussian_invert", $Value: Enum_ImageNoiseGaussian_invert },
    Enum_ImageNoiseGaussian_channels: { $Name: "Enum_ImageNoiseGaussian_channels", $Value: Enum_ImageNoiseGaussian_channels },
    Enum_ImageSegmentation_model: { $Name: "Enum_ImageSegmentation_model", $Value: Enum_ImageSegmentation_model },
    Enum_ImageSegmentation_alpha_matting: { $Name: "Enum_ImageSegmentation_alpha_matting", $Value: Enum_ImageSegmentation_alpha_matting },
    Enum_ImageSegmentation_post_process_mask: { $Name: "Enum_ImageSegmentation_post_process_mask", $Value: Enum_ImageSegmentation_post_process_mask },
    Enum_ImageSegmentationCustom_model: { $Name: "Enum_ImageSegmentationCustom_model", $Value: Enum_ImageSegmentationCustom_model },
    Enum_ImageSegmentationCustom_alpha_matting: { $Name: "Enum_ImageSegmentationCustom_alpha_matting", $Value: Enum_ImageSegmentationCustom_alpha_matting },
    Enum_ImageSegmentationCustom_post_process_mask: { $Name: "Enum_ImageSegmentationCustom_post_process_mask", $Value: Enum_ImageSegmentationCustom_post_process_mask },
    Enum_ImageSegmentationCustomAdvanced_model: { $Name: "Enum_ImageSegmentationCustomAdvanced_model", $Value: Enum_ImageSegmentationCustomAdvanced_model },
    Enum_ImageSegmentationCustomAdvanced_alpha_matting: { $Name: "Enum_ImageSegmentationCustomAdvanced_alpha_matting", $Value: Enum_ImageSegmentationCustomAdvanced_alpha_matting },
    Enum_ImageSegmentationCustomAdvanced_post_process_mask: { $Name: "Enum_ImageSegmentationCustomAdvanced_post_process_mask", $Value: Enum_ImageSegmentationCustomAdvanced_post_process_mask },
    Enum_ImageText_font: { $Name: "Enum_ImageText_font", $Value: Enum_ImageText_font },
    Enum_ImageTextOutlined_font: { $Name: "Enum_ImageTextOutlined_font", $Value: Enum_ImageTextOutlined_font },
    Enum_ImageTextMultiline_font: { $Name: "Enum_ImageTextMultiline_font", $Value: Enum_ImageTextMultiline_font },
    Enum_ImageTextMultiline_align: { $Name: "Enum_ImageTextMultiline_align", $Value: Enum_ImageTextMultiline_align },
    Enum_ImageTextMultilineOutlined_font: { $Name: "Enum_ImageTextMultilineOutlined_font", $Value: Enum_ImageTextMultilineOutlined_font },
    Enum_ImageTextMultilineOutlined_align: { $Name: "Enum_ImageTextMultilineOutlined_align", $Value: Enum_ImageTextMultilineOutlined_align },
    Enum_ImageTransformResizeAbsolute_method: { $Name: "Enum_ImageTransformResizeAbsolute_method", $Value: Enum_ImageTransformResizeAbsolute_method },
    Enum_ImageTransformResizeRelative_method: { $Name: "Enum_ImageTransformResizeRelative_method", $Value: Enum_ImageTransformResizeRelative_method },
    Enum_ImageTransformResizeClip_method: { $Name: "Enum_ImageTransformResizeClip_method", $Value: Enum_ImageTransformResizeClip_method },
    Enum_ImageTransformCropCorners_top_left_corner: { $Name: "Enum_ImageTransformCropCorners_top_left_corner", $Value: Enum_ImageTransformCropCorners_top_left_corner },
    Enum_ImageTransformCropCorners_top_right_corner: { $Name: "Enum_ImageTransformCropCorners_top_right_corner", $Value: Enum_ImageTransformCropCorners_top_right_corner },
    Enum_ImageTransformCropCorners_bottom_right_corner: { $Name: "Enum_ImageTransformCropCorners_bottom_right_corner", $Value: Enum_ImageTransformCropCorners_bottom_right_corner },
    Enum_ImageTransformCropCorners_bottom_left_corner: { $Name: "Enum_ImageTransformCropCorners_bottom_left_corner", $Value: Enum_ImageTransformCropCorners_bottom_left_corner },
    Enum_ImageTransformCropCorners_method: { $Name: "Enum_ImageTransformCropCorners_method", $Value: Enum_ImageTransformCropCorners_method },
    Enum_ImageTransformPaddingAbsolute_method: { $Name: "Enum_ImageTransformPaddingAbsolute_method", $Value: Enum_ImageTransformPaddingAbsolute_method },
    Enum_ImageTransformPaddingRelative_method: { $Name: "Enum_ImageTransformPaddingRelative_method", $Value: Enum_ImageTransformPaddingRelative_method },
    Enum_ImageTransformRotate_expand: { $Name: "Enum_ImageTransformRotate_expand", $Value: Enum_ImageTransformRotate_expand },
    Enum_ImageTransformRotate_method: { $Name: "Enum_ImageTransformRotate_method", $Value: Enum_ImageTransformRotate_method },
    Enum_ImageTransformTranspose_method: { $Name: "Enum_ImageTransformTranspose_method", $Value: Enum_ImageTransformTranspose_method },
    "Enum_ADE$_AnimateDiffLoRALoader_name": { $Name: "Enum_ADE$_AnimateDiffLoRALoader_name", $Value: Enum_ADE$_AnimateDiffLoRALoader_name },
    "Enum_ADE$_AnimateDiffSamplingSettings_noise_type": { $Name: "Enum_ADE$_AnimateDiffSamplingSettings_noise_type", $Value: Enum_ADE$_AnimateDiffSamplingSettings_noise_type },
    "Enum_ADE$_AnimateDiffSamplingSettings_seed_gen": { $Name: "Enum_ADE$_AnimateDiffSamplingSettings_seed_gen", $Value: Enum_ADE$_AnimateDiffSamplingSettings_seed_gen },
    "Enum_ADE$_MultivalScaledMask_scaling": { $Name: "Enum_ADE$_MultivalScaledMask_scaling", $Value: Enum_ADE$_MultivalScaledMask_scaling },
    "Enum_ADE$_StandardStaticContextOptions_fuse_method": { $Name: "Enum_ADE$_StandardStaticContextOptions_fuse_method", $Value: Enum_ADE$_StandardStaticContextOptions_fuse_method },
    "Enum_ADE$_StandardUniformContextOptions_fuse_method": { $Name: "Enum_ADE$_StandardUniformContextOptions_fuse_method", $Value: Enum_ADE$_StandardUniformContextOptions_fuse_method },
    "Enum_ADE$_LoopedUniformContextOptions_fuse_method": { $Name: "Enum_ADE$_LoopedUniformContextOptions_fuse_method", $Value: Enum_ADE$_LoopedUniformContextOptions_fuse_method },
    "Enum_ADE$_AnimateDiffUniformContextOptions_context_schedule": { $Name: "Enum_ADE$_AnimateDiffUniformContextOptions_context_schedule", $Value: Enum_ADE$_AnimateDiffUniformContextOptions_context_schedule },
    "Enum_ADE$_AnimateDiffUniformContextOptions_fuse_method": { $Name: "Enum_ADE$_AnimateDiffUniformContextOptions_fuse_method", $Value: Enum_ADE$_AnimateDiffUniformContextOptions_fuse_method },
    "Enum_ADE$_VisualizeContextOptionsK_sampler_name": { $Name: "Enum_ADE$_VisualizeContextOptionsK_sampler_name", $Value: Enum_ADE$_VisualizeContextOptionsK_sampler_name },
    "Enum_ADE$_VisualizeContextOptionsK_scheduler": { $Name: "Enum_ADE$_VisualizeContextOptionsK_scheduler", $Value: Enum_ADE$_VisualizeContextOptionsK_scheduler },
    "Enum_ADE$_VisualizeContextOptionsKAdv_sampler_name": { $Name: "Enum_ADE$_VisualizeContextOptionsKAdv_sampler_name", $Value: Enum_ADE$_VisualizeContextOptionsKAdv_sampler_name },
    "Enum_ADE$_VisualizeContextOptionsKAdv_scheduler": { $Name: "Enum_ADE$_VisualizeContextOptionsKAdv_scheduler", $Value: Enum_ADE$_VisualizeContextOptionsKAdv_scheduler },
    "Enum_ADE$_StandardStaticViewOptions_fuse_method": { $Name: "Enum_ADE$_StandardStaticViewOptions_fuse_method", $Value: Enum_ADE$_StandardStaticViewOptions_fuse_method },
    "Enum_ADE$_StandardUniformViewOptions_fuse_method": { $Name: "Enum_ADE$_StandardUniformViewOptions_fuse_method", $Value: Enum_ADE$_StandardUniformViewOptions_fuse_method },
    "Enum_ADE$_LoopedUniformViewOptions_fuse_method": { $Name: "Enum_ADE$_LoopedUniformViewOptions_fuse_method", $Value: Enum_ADE$_LoopedUniformViewOptions_fuse_method },
    "Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation": { $Name: "Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation", $Value: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation },
    "Enum_ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation_interpolation": { $Name: "Enum_ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation_interpolation", $Value: Enum_ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation_interpolation },
    "Enum_ADE$_IterationOptsFreeInit_filter": { $Name: "Enum_ADE$_IterationOptsFreeInit_filter", $Value: Enum_ADE$_IterationOptsFreeInit_filter },
    "Enum_ADE$_IterationOptsFreeInit_init_type": { $Name: "Enum_ADE$_IterationOptsFreeInit_init_type", $Value: Enum_ADE$_IterationOptsFreeInit_init_type },
    "Enum_ADE$_RegisterLoraHook_lora_name": { $Name: "Enum_ADE$_RegisterLoraHook_lora_name", $Value: Enum_ADE$_RegisterLoraHook_lora_name },
    "Enum_ADE$_RegisterLoraHookModelOnly_lora_name": { $Name: "Enum_ADE$_RegisterLoraHookModelOnly_lora_name", $Value: Enum_ADE$_RegisterLoraHookModelOnly_lora_name },
    "Enum_ADE$_RegisterModelAsLoraHook_ckpt_name": { $Name: "Enum_ADE$_RegisterModelAsLoraHook_ckpt_name", $Value: Enum_ADE$_RegisterModelAsLoraHook_ckpt_name },
    "Enum_ADE$_RegisterModelAsLoraHookModelOnly_ckpt_name": { $Name: "Enum_ADE$_RegisterModelAsLoraHookModelOnly_ckpt_name", $Value: Enum_ADE$_RegisterModelAsLoraHookModelOnly_ckpt_name },
    "Enum_ADE$_LoraHookKeyframeInterpolation_interpolation": { $Name: "Enum_ADE$_LoraHookKeyframeInterpolation_interpolation", $Value: Enum_ADE$_LoraHookKeyframeInterpolation_interpolation },
    "Enum_ADE$_PairedConditioningSetMask_set_cond_area": { $Name: "Enum_ADE$_PairedConditioningSetMask_set_cond_area", $Value: Enum_ADE$_PairedConditioningSetMask_set_cond_area },
    "Enum_ADE$_ConditioningSetMask_set_cond_area": { $Name: "Enum_ADE$_ConditioningSetMask_set_cond_area", $Value: Enum_ADE$_ConditioningSetMask_set_cond_area },
    "Enum_ADE$_PairedConditioningSetMaskAndCombine_set_cond_area": { $Name: "Enum_ADE$_PairedConditioningSetMaskAndCombine_set_cond_area", $Value: Enum_ADE$_PairedConditioningSetMaskAndCombine_set_cond_area },
    "Enum_ADE$_ConditioningSetMaskAndCombine_set_cond_area": { $Name: "Enum_ADE$_ConditioningSetMaskAndCombine_set_cond_area", $Value: Enum_ADE$_ConditioningSetMaskAndCombine_set_cond_area },
    "Enum_ADE$_NoiseLayerAdd_noise_type": { $Name: "Enum_ADE$_NoiseLayerAdd_noise_type", $Value: Enum_ADE$_NoiseLayerAdd_noise_type },
    "Enum_ADE$_NoiseLayerAdd_seed_gen_override": { $Name: "Enum_ADE$_NoiseLayerAdd_seed_gen_override", $Value: Enum_ADE$_NoiseLayerAdd_seed_gen_override },
    "Enum_ADE$_NoiseLayerAddWeighted_noise_type": { $Name: "Enum_ADE$_NoiseLayerAddWeighted_noise_type", $Value: Enum_ADE$_NoiseLayerAddWeighted_noise_type },
    "Enum_ADE$_NoiseLayerAddWeighted_seed_gen_override": { $Name: "Enum_ADE$_NoiseLayerAddWeighted_seed_gen_override", $Value: Enum_ADE$_NoiseLayerAddWeighted_seed_gen_override },
    "Enum_ADE$_NoiseLayerReplace_noise_type": { $Name: "Enum_ADE$_NoiseLayerReplace_noise_type", $Value: Enum_ADE$_NoiseLayerReplace_noise_type },
    "Enum_ADE$_NoiseLayerReplace_seed_gen_override": { $Name: "Enum_ADE$_NoiseLayerReplace_seed_gen_override", $Value: Enum_ADE$_NoiseLayerReplace_seed_gen_override },
    "Enum_ADE$_CustomCFGKeyframeInterpolation_interpolation": { $Name: "Enum_ADE$_CustomCFGKeyframeInterpolation_interpolation", $Value: Enum_ADE$_CustomCFGKeyframeInterpolation_interpolation },
    "Enum_ADE$_SigmaSchedule_beta_schedule": { $Name: "Enum_ADE$_SigmaSchedule_beta_schedule", $Value: Enum_ADE$_SigmaSchedule_beta_schedule },
    "Enum_ADE$_RawSigmaSchedule_raw_beta_schedule": { $Name: "Enum_ADE$_RawSigmaSchedule_raw_beta_schedule", $Value: Enum_ADE$_RawSigmaSchedule_raw_beta_schedule },
    "Enum_ADE$_RawSigmaSchedule_sampling": { $Name: "Enum_ADE$_RawSigmaSchedule_sampling", $Value: Enum_ADE$_RawSigmaSchedule_sampling },
    "Enum_ADE$_SigmaScheduleWeightedAverageInterp_interpolation": { $Name: "Enum_ADE$_SigmaScheduleWeightedAverageInterp_interpolation", $Value: Enum_ADE$_SigmaScheduleWeightedAverageInterp_interpolation },
    "Enum_ADE$_SigmaScheduleToSigmas_scheduler": { $Name: "Enum_ADE$_SigmaScheduleToSigmas_scheduler", $Value: Enum_ADE$_SigmaScheduleToSigmas_scheduler },
    "Enum_ADE$_PromptScheduling_tensor_interp": { $Name: "Enum_ADE$_PromptScheduling_tensor_interp", $Value: Enum_ADE$_PromptScheduling_tensor_interp },
    "Enum_ADE$_PromptSchedulingLatents_tensor_interp": { $Name: "Enum_ADE$_PromptSchedulingLatents_tensor_interp", $Value: Enum_ADE$_PromptSchedulingLatents_tensor_interp },
    Enum_CheckpointLoaderSimpleWithNoiseSelect_ckpt_name: { $Name: "Enum_CheckpointLoaderSimpleWithNoiseSelect_ckpt_name", $Value: Enum_CheckpointLoaderSimpleWithNoiseSelect_ckpt_name },
    Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule: { $Name: "Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule", $Value: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule },
    "Enum_ADE$_AnimateDiffLoaderGen1_model_name": { $Name: "Enum_ADE$_AnimateDiffLoaderGen1_model_name", $Value: Enum_ADE$_AnimateDiffLoaderGen1_model_name },
    "Enum_ADE$_AnimateDiffLoaderGen1_beta_schedule": { $Name: "Enum_ADE$_AnimateDiffLoaderGen1_beta_schedule", $Value: Enum_ADE$_AnimateDiffLoaderGen1_beta_schedule },
    "Enum_ADE$_AnimateDiffLoaderWithContext_model_name": { $Name: "Enum_ADE$_AnimateDiffLoaderWithContext_model_name", $Value: Enum_ADE$_AnimateDiffLoaderWithContext_model_name },
    "Enum_ADE$_AnimateDiffLoaderWithContext_beta_schedule": { $Name: "Enum_ADE$_AnimateDiffLoaderWithContext_beta_schedule", $Value: Enum_ADE$_AnimateDiffLoaderWithContext_beta_schedule },
    "Enum_ADE$_UseEvolvedSampling_beta_schedule": { $Name: "Enum_ADE$_UseEvolvedSampling_beta_schedule", $Value: Enum_ADE$_UseEvolvedSampling_beta_schedule },
    "Enum_ADE$_LoadAnimateDiffModel_model_name": { $Name: "Enum_ADE$_LoadAnimateDiffModel_model_name", $Value: Enum_ADE$_LoadAnimateDiffModel_model_name },
    "Enum_ADE$_LoadAnimateLCMI2VModel_model_name": { $Name: "Enum_ADE$_LoadAnimateLCMI2VModel_model_name", $Value: Enum_ADE$_LoadAnimateLCMI2VModel_model_name },
    "Enum_ADE$_UpscaleAndVAEEncode_scale_method": { $Name: "Enum_ADE$_UpscaleAndVAEEncode_scale_method", $Value: Enum_ADE$_UpscaleAndVAEEncode_scale_method },
    "Enum_ADE$_UpscaleAndVAEEncode_crop": { $Name: "Enum_ADE$_UpscaleAndVAEEncode_crop", $Value: Enum_ADE$_UpscaleAndVAEEncode_crop },
    "Enum_ADE$_InjectI2VIntoAnimateDiffModel_model_name": { $Name: "Enum_ADE$_InjectI2VIntoAnimateDiffModel_model_name", $Value: Enum_ADE$_InjectI2VIntoAnimateDiffModel_model_name },
    "Enum_ADE$_LoadAnimateDiffModelWithCameraCtrl_model_name": { $Name: "Enum_ADE$_LoadAnimateDiffModelWithCameraCtrl_model_name", $Value: Enum_ADE$_LoadAnimateDiffModelWithCameraCtrl_model_name },
    "Enum_ADE$_LoadAnimateDiffModelWithCameraCtrl_camera_ctrl": { $Name: "Enum_ADE$_LoadAnimateDiffModelWithCameraCtrl_camera_ctrl", $Value: Enum_ADE$_LoadAnimateDiffModelWithCameraCtrl_camera_ctrl },
    "Enum_ADE$_LoadCameraPoses_pose_filename": { $Name: "Enum_ADE$_LoadCameraPoses_pose_filename", $Value: Enum_ADE$_LoadCameraPoses_pose_filename },
    "Enum_ADE$_CameraPoseBasic_motion_type": { $Name: "Enum_ADE$_CameraPoseBasic_motion_type", $Value: Enum_ADE$_CameraPoseBasic_motion_type },
    "Enum_ADE$_CameraPoseCombo_motion_type1": { $Name: "Enum_ADE$_CameraPoseCombo_motion_type1", $Value: Enum_ADE$_CameraPoseCombo_motion_type1 },
    "Enum_ADE$_CameraPoseCombo_motion_type2": { $Name: "Enum_ADE$_CameraPoseCombo_motion_type2", $Value: Enum_ADE$_CameraPoseCombo_motion_type2 },
    "Enum_ADE$_CameraPoseCombo_motion_type3": { $Name: "Enum_ADE$_CameraPoseCombo_motion_type3", $Value: Enum_ADE$_CameraPoseCombo_motion_type3 },
    "Enum_ADE$_CameraPoseCombo_motion_type4": { $Name: "Enum_ADE$_CameraPoseCombo_motion_type4", $Value: Enum_ADE$_CameraPoseCombo_motion_type4 },
    "Enum_ADE$_CameraPoseCombo_motion_type5": { $Name: "Enum_ADE$_CameraPoseCombo_motion_type5", $Value: Enum_ADE$_CameraPoseCombo_motion_type5 },
    "Enum_ADE$_CameraPoseCombo_motion_type6": { $Name: "Enum_ADE$_CameraPoseCombo_motion_type6", $Value: Enum_ADE$_CameraPoseCombo_motion_type6 },
    "Enum_ADE$_CameraPoseAdvanced_motion_type1": { $Name: "Enum_ADE$_CameraPoseAdvanced_motion_type1", $Value: Enum_ADE$_CameraPoseAdvanced_motion_type1 },
    "Enum_ADE$_CameraPoseAdvanced_motion_type2": { $Name: "Enum_ADE$_CameraPoseAdvanced_motion_type2", $Value: Enum_ADE$_CameraPoseAdvanced_motion_type2 },
    "Enum_ADE$_CameraPoseAdvanced_motion_type3": { $Name: "Enum_ADE$_CameraPoseAdvanced_motion_type3", $Value: Enum_ADE$_CameraPoseAdvanced_motion_type3 },
    "Enum_ADE$_CameraPoseAdvanced_motion_type4": { $Name: "Enum_ADE$_CameraPoseAdvanced_motion_type4", $Value: Enum_ADE$_CameraPoseAdvanced_motion_type4 },
    "Enum_ADE$_CameraPoseAdvanced_motion_type5": { $Name: "Enum_ADE$_CameraPoseAdvanced_motion_type5", $Value: Enum_ADE$_CameraPoseAdvanced_motion_type5 },
    "Enum_ADE$_CameraPoseAdvanced_motion_type6": { $Name: "Enum_ADE$_CameraPoseAdvanced_motion_type6", $Value: Enum_ADE$_CameraPoseAdvanced_motion_type6 },
    "Enum_ADE$_InputPIA$_PaperPresets_preset": { $Name: "Enum_ADE$_InputPIA$_PaperPresets_preset", $Value: Enum_ADE$_InputPIA$_PaperPresets_preset },
    "Enum_ADE$_InjectPIAIntoAnimateDiffModel_model_name": { $Name: "Enum_ADE$_InjectPIAIntoAnimateDiffModel_model_name", $Value: Enum_ADE$_InjectPIAIntoAnimateDiffModel_model_name },
    Enum_AnimateDiffLoaderV1_model_name: { $Name: "Enum_AnimateDiffLoaderV1_model_name", $Value: Enum_AnimateDiffLoaderV1_model_name },
    Enum_AnimateDiffLoaderV1_beta_schedule: { $Name: "Enum_AnimateDiffLoaderV1_beta_schedule", $Value: Enum_AnimateDiffLoaderV1_beta_schedule },
    "Enum_ADE$_AnimateDiffLoaderV1Advanced_model_name": { $Name: "Enum_ADE$_AnimateDiffLoaderV1Advanced_model_name", $Value: Enum_ADE$_AnimateDiffLoaderV1Advanced_model_name },
    "Enum_ADE$_AnimateDiffLoaderV1Advanced_context_schedule": { $Name: "Enum_ADE$_AnimateDiffLoaderV1Advanced_context_schedule", $Value: Enum_ADE$_AnimateDiffLoaderV1Advanced_context_schedule },
    "Enum_ADE$_AnimateDiffLoaderV1Advanced_beta_schedule": { $Name: "Enum_ADE$_AnimateDiffLoaderV1Advanced_beta_schedule", $Value: Enum_ADE$_AnimateDiffLoaderV1Advanced_beta_schedule },
    "Enum_ADE$_AnimateDiffCombine_format": { $Name: "Enum_ADE$_AnimateDiffCombine_format", $Value: Enum_ADE$_AnimateDiffCombine_format },
    "Enum_AV$_CheckpointModelsToParametersPipe_ckpt_name": { $Name: "Enum_AV$_CheckpointModelsToParametersPipe_ckpt_name", $Value: Enum_AV$_CheckpointModelsToParametersPipe_ckpt_name },
    "Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name": { $Name: "Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name", $Value: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name },
    "Enum_AV$_CheckpointModelsToParametersPipe_vae_name": { $Name: "Enum_AV$_CheckpointModelsToParametersPipe_vae_name", $Value: Enum_AV$_CheckpointModelsToParametersPipe_vae_name },
    "Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name": { $Name: "Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name", $Value: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name },
    "Enum_AV$_CheckpointModelsToParametersPipe_secondary_upscaler_name": { $Name: "Enum_AV$_CheckpointModelsToParametersPipe_secondary_upscaler_name", $Value: Enum_AV$_CheckpointModelsToParametersPipe_secondary_upscaler_name },
    "Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name": { $Name: "Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name", $Value: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name },
    "Enum_AV$_CheckpointModelsToParametersPipe_lora_2_name": { $Name: "Enum_AV$_CheckpointModelsToParametersPipe_lora_2_name", $Value: Enum_AV$_CheckpointModelsToParametersPipe_lora_2_name },
    "Enum_AV$_CheckpointModelsToParametersPipe_lora_3_name": { $Name: "Enum_AV$_CheckpointModelsToParametersPipe_lora_3_name", $Value: Enum_AV$_CheckpointModelsToParametersPipe_lora_3_name },
    "Enum_AV$_VAELoader_vae_name": { $Name: "Enum_AV$_VAELoader_vae_name", $Value: Enum_AV$_VAELoader_vae_name },
    "Enum_AV$_LoraLoader_lora_name": { $Name: "Enum_AV$_LoraLoader_lora_name", $Value: Enum_AV$_LoraLoader_lora_name },
    "Enum_AV$_CheckpointSave_dtype": { $Name: "Enum_AV$_CheckpointSave_dtype", $Value: Enum_AV$_CheckpointSave_dtype },
    Enum_LoadImageAsMaskFromUrl_channel: { $Name: "Enum_LoadImageAsMaskFromUrl_channel", $Value: Enum_LoadImageAsMaskFromUrl_channel },
    Enum_StringToNumber_rounding: { $Name: "Enum_StringToNumber_rounding", $Value: Enum_StringToNumber_rounding },
    Enum_ImageScaleDown_crop: { $Name: "Enum_ImageScaleDown_crop", $Value: Enum_ImageScaleDown_crop },
    Enum_ImageExtractChannel_channel: { $Name: "Enum_ImageExtractChannel_channel", $Value: Enum_ImageExtractChannel_channel },
    Enum_ImageApplyChannel_channel: { $Name: "Enum_ImageApplyChannel_channel", $Value: Enum_ImageApplyChannel_channel },
    Enum_QRCodeGenerator_error_correction: { $Name: "Enum_QRCodeGenerator_error_correction", $Value: Enum_QRCodeGenerator_error_correction },
    Enum_DependenciesEdit_ckpt_name: { $Name: "Enum_DependenciesEdit_ckpt_name", $Value: Enum_DependenciesEdit_ckpt_name },
    Enum_DependenciesEdit_vae_name: { $Name: "Enum_DependenciesEdit_vae_name", $Value: Enum_DependenciesEdit_vae_name },
    Enum_AspectRatioSelector_aspect_ratio: { $Name: "Enum_AspectRatioSelector_aspect_ratio", $Value: Enum_AspectRatioSelector_aspect_ratio },
    Enum_SDXLAspectRatioSelector_aspect_ratio: { $Name: "Enum_SDXLAspectRatioSelector_aspect_ratio", $Value: Enum_SDXLAspectRatioSelector_aspect_ratio },
    Enum_CheckpointNameSelector_ckpt_name_out: { $Name: "Enum_CheckpointNameSelector_ckpt_name_out", $Value: Enum_CheckpointNameSelector_ckpt_name_out },
    Enum_CheckpointNameSelector_ckpt_name: { $Name: "Enum_CheckpointNameSelector_ckpt_name", $Value: Enum_CheckpointNameSelector_ckpt_name },
    Enum_SDXLPromptStyler_style: { $Name: "Enum_SDXLPromptStyler_style", $Value: Enum_SDXLPromptStyler_style },
    Enum_SDXLPromptStyler_log_prompt: { $Name: "Enum_SDXLPromptStyler_log_prompt", $Value: Enum_SDXLPromptStyler_log_prompt },
    Enum_BLIPLoader_model_name: { $Name: "Enum_BLIPLoader_model_name", $Value: Enum_BLIPLoader_model_name },
    Enum_BLIPCaption_device_mode: { $Name: "Enum_BLIPCaption_device_mode", $Value: Enum_BLIPCaption_device_mode },
    Enum_DownloadAndLoadBlip_model_name: { $Name: "Enum_DownloadAndLoadBlip_model_name", $Value: Enum_DownloadAndLoadBlip_model_name },
    Enum_DeepDanbooruCaption_device_mode: { $Name: "Enum_DeepDanbooruCaption_device_mode", $Value: Enum_DeepDanbooruCaption_device_mode },
    "Enum_Fooocus$_KSampler_sampler_name": { $Name: "Enum_Fooocus$_KSampler_sampler_name", $Value: Enum_Fooocus$_KSampler_sampler_name },
    "Enum_Fooocus$_KSampler_scheduler": { $Name: "Enum_Fooocus$_KSampler_scheduler", $Value: Enum_Fooocus$_KSampler_scheduler },
    "Enum_Fooocus$_KSamplerAdvanced_add_noise": { $Name: "Enum_Fooocus$_KSamplerAdvanced_add_noise", $Value: Enum_Fooocus$_KSamplerAdvanced_add_noise },
    "Enum_Fooocus$_KSamplerAdvanced_sampler_name": { $Name: "Enum_Fooocus$_KSamplerAdvanced_sampler_name", $Value: Enum_Fooocus$_KSamplerAdvanced_sampler_name },
    "Enum_Fooocus$_KSamplerAdvanced_scheduler": { $Name: "Enum_Fooocus$_KSamplerAdvanced_scheduler", $Value: Enum_Fooocus$_KSamplerAdvanced_scheduler },
    "Enum_Fooocus$_KSamplerAdvanced_return_with_leftover_noise": { $Name: "Enum_Fooocus$_KSamplerAdvanced_return_with_leftover_noise", $Value: Enum_Fooocus$_KSamplerAdvanced_return_with_leftover_noise },
    "Enum_AV$_ControlNetLoader_control_net_name": { $Name: "Enum_AV$_ControlNetLoader_control_net_name", $Value: Enum_AV$_ControlNetLoader_control_net_name },
    "Enum_AV$_ControlNetEfficientLoader_control_net_name": { $Name: "Enum_AV$_ControlNetEfficientLoader_control_net_name", $Value: Enum_AV$_ControlNetEfficientLoader_control_net_name },
    "Enum_AV$_ControlNetEfficientLoader_preprocessor": { $Name: "Enum_AV$_ControlNetEfficientLoader_preprocessor", $Value: Enum_AV$_ControlNetEfficientLoader_preprocessor },
    "Enum_AV$_ControlNetEfficientLoaderAdvanced_control_net_name": { $Name: "Enum_AV$_ControlNetEfficientLoaderAdvanced_control_net_name", $Value: Enum_AV$_ControlNetEfficientLoaderAdvanced_control_net_name },
    "Enum_AV$_ControlNetEfficientLoaderAdvanced_preprocessor": { $Name: "Enum_AV$_ControlNetEfficientLoaderAdvanced_preprocessor", $Value: Enum_AV$_ControlNetEfficientLoaderAdvanced_preprocessor },
    "Enum_AV$_ControlNetEfficientStacker_control_net_name": { $Name: "Enum_AV$_ControlNetEfficientStacker_control_net_name", $Value: Enum_AV$_ControlNetEfficientStacker_control_net_name },
    "Enum_AV$_ControlNetEfficientStacker_preprocessor": { $Name: "Enum_AV$_ControlNetEfficientStacker_preprocessor", $Value: Enum_AV$_ControlNetEfficientStacker_preprocessor },
    "Enum_AV$_ControlNetEfficientStackerSimple_control_net_name": { $Name: "Enum_AV$_ControlNetEfficientStackerSimple_control_net_name", $Value: Enum_AV$_ControlNetEfficientStackerSimple_control_net_name },
    "Enum_AV$_ControlNetEfficientStackerSimple_preprocessor": { $Name: "Enum_AV$_ControlNetEfficientStackerSimple_preprocessor", $Value: Enum_AV$_ControlNetEfficientStackerSimple_preprocessor },
    "Enum_AV$_ControlNetPreprocessor_preprocessor": { $Name: "Enum_AV$_ControlNetPreprocessor_preprocessor", $Value: Enum_AV$_ControlNetPreprocessor_preprocessor },
    "Enum_AV$_ControlNetPreprocessor_sd_version": { $Name: "Enum_AV$_ControlNetPreprocessor_sd_version", $Value: Enum_AV$_ControlNetPreprocessor_sd_version },
    "Enum_AV$_IPAdapter_ip_adapter_name": { $Name: "Enum_AV$_IPAdapter_ip_adapter_name", $Value: Enum_AV$_IPAdapter_ip_adapter_name },
    "Enum_AV$_IPAdapter_clip_name": { $Name: "Enum_AV$_IPAdapter_clip_name", $Value: Enum_AV$_IPAdapter_clip_name },
    "Enum_AV$_IPAdapter_weight_type": { $Name: "Enum_AV$_IPAdapter_weight_type", $Value: Enum_AV$_IPAdapter_weight_type },
    "Enum_AV$_IPAdapterPipe_ip_adapter_name": { $Name: "Enum_AV$_IPAdapterPipe_ip_adapter_name", $Value: Enum_AV$_IPAdapterPipe_ip_adapter_name },
    "Enum_AV$_IPAdapterPipe_clip_name": { $Name: "Enum_AV$_IPAdapterPipe_clip_name", $Value: Enum_AV$_IPAdapterPipe_clip_name },
    Enum_ISNetLoader_model_name: { $Name: "Enum_ISNetLoader_model_name", $Value: Enum_ISNetLoader_model_name },
    Enum_ISNetSegment_device_mode: { $Name: "Enum_ISNetSegment_device_mode", $Value: Enum_ISNetSegment_device_mode },
    Enum_DownloadISNetModel_model_name: { $Name: "Enum_DownloadISNetModel_model_name", $Value: Enum_DownloadISNetModel_model_name },
    "Enum_AV$_SAMLoader_model_name": { $Name: "Enum_AV$_SAMLoader_model_name", $Value: Enum_AV$_SAMLoader_model_name },
    Enum_GetSAMEmbedding_device_mode: { $Name: "Enum_GetSAMEmbedding_device_mode", $Value: Enum_GetSAMEmbedding_device_mode },
    Enum_LaMaInpaint_device_mode: { $Name: "Enum_LaMaInpaint_device_mode", $Value: Enum_LaMaInpaint_device_mode },
    "Enum_AV$_FaceDetailer_sampler_name": { $Name: "Enum_AV$_FaceDetailer_sampler_name", $Value: Enum_AV$_FaceDetailer_sampler_name },
    "Enum_AV$_FaceDetailer_scheduler": { $Name: "Enum_AV$_FaceDetailer_scheduler", $Value: Enum_AV$_FaceDetailer_scheduler },
    "Enum_AV$_FaceDetailer_sam_detection_hint": { $Name: "Enum_AV$_FaceDetailer_sam_detection_hint", $Value: Enum_AV$_FaceDetailer_sam_detection_hint },
    "Enum_AV$_FaceDetailer_sam_mask_hint_use_negative": { $Name: "Enum_AV$_FaceDetailer_sam_mask_hint_use_negative", $Value: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative },
    "Enum_AV$_FaceDetailerPipe_sampler_name": { $Name: "Enum_AV$_FaceDetailerPipe_sampler_name", $Value: Enum_AV$_FaceDetailerPipe_sampler_name },
    "Enum_AV$_FaceDetailerPipe_scheduler": { $Name: "Enum_AV$_FaceDetailerPipe_scheduler", $Value: Enum_AV$_FaceDetailerPipe_scheduler },
    "Enum_AV$_FaceDetailerPipe_sam_detection_hint": { $Name: "Enum_AV$_FaceDetailerPipe_sam_detection_hint", $Value: Enum_AV$_FaceDetailerPipe_sam_detection_hint },
    "Enum_AV$_FaceDetailerPipe_sam_mask_hint_use_negative": { $Name: "Enum_AV$_FaceDetailerPipe_sam_mask_hint_use_negative", $Value: Enum_AV$_FaceDetailerPipe_sam_mask_hint_use_negative },
    "Enum_AV$_ClaudeApi_version": { $Name: "Enum_AV$_ClaudeApi_version", $Value: Enum_AV$_ClaudeApi_version },
    "Enum_AV$_AwsBedrockClaudeApi_region": { $Name: "Enum_AV$_AwsBedrockClaudeApi_region", $Value: Enum_AV$_AwsBedrockClaudeApi_region },
    "Enum_AV$_AwsBedrockClaudeApi_version": { $Name: "Enum_AV$_AwsBedrockClaudeApi_version", $Value: Enum_AV$_AwsBedrockClaudeApi_version },
    "Enum_AV$_AwsBedrockMistralApi_region": { $Name: "Enum_AV$_AwsBedrockMistralApi_region", $Value: Enum_AV$_AwsBedrockMistralApi_region },
    "Enum_AV$_LLMApiConfig_model": { $Name: "Enum_AV$_LLMApiConfig_model", $Value: Enum_AV$_LLMApiConfig_model },
    "Enum_AV$_LLMMessage_role": { $Name: "Enum_AV$_LLMMessage_role", $Value: Enum_AV$_LLMMessage_role },
    "Enum_LoraLoader$8pysssss_lora_name": { $Name: "Enum_LoraLoader$8pysssss_lora_name", $Value: Enum_LoraLoader$8pysssss_lora_name },
    "Enum_CheckpointLoader$8pysssss_ckpt_name": { $Name: "Enum_CheckpointLoader$8pysssss_ckpt_name", $Value: Enum_CheckpointLoader$8pysssss_ckpt_name },
    "Enum_ConstrainImage$8pysssss_crop_if_required": { $Name: "Enum_ConstrainImage$8pysssss_crop_if_required", $Value: Enum_ConstrainImage$8pysssss_crop_if_required },
    "Enum_ConstrainImageforVideo$8pysssss_crop_if_required": { $Name: "Enum_ConstrainImageforVideo$8pysssss_crop_if_required", $Value: Enum_ConstrainImageforVideo$8pysssss_crop_if_required },
    "Enum_PlaySound$8pysssss_mode": { $Name: "Enum_PlaySound$8pysssss_mode", $Value: Enum_PlaySound$8pysssss_mode },
    "Enum_Repeater$8pysssss_output": { $Name: "Enum_Repeater$8pysssss_output", $Value: Enum_Repeater$8pysssss_output },
    "Enum_Repeater$8pysssss_node_mode": { $Name: "Enum_Repeater$8pysssss_node_mode", $Value: Enum_Repeater$8pysssss_node_mode },
    "Enum_StringFunction$8pysssss_action": { $Name: "Enum_StringFunction$8pysssss_action", $Value: Enum_StringFunction$8pysssss_action },
    "Enum_StringFunction$8pysssss_tidy_tags": { $Name: "Enum_StringFunction$8pysssss_tidy_tags", $Value: Enum_StringFunction$8pysssss_tidy_tags },
    "Enum_SystemNotification$8pysssss_mode": { $Name: "Enum_SystemNotification$8pysssss_mode", $Value: Enum_SystemNotification$8pysssss_mode },
    "Enum_LoadText$8pysssss_root_dir": { $Name: "Enum_LoadText$8pysssss_root_dir", $Value: Enum_LoadText$8pysssss_root_dir },
    "Enum_LoadText$8pysssss_file": { $Name: "Enum_LoadText$8pysssss_file", $Value: Enum_LoadText$8pysssss_file },
    "Enum_SaveText$8pysssss_root_dir": { $Name: "Enum_SaveText$8pysssss_root_dir", $Value: Enum_SaveText$8pysssss_root_dir },
    "Enum_SaveText$8pysssss_append": { $Name: "Enum_SaveText$8pysssss_append", $Value: Enum_SaveText$8pysssss_append },
    Enum_DPRandomGenerator_autorefresh: { $Name: "Enum_DPRandomGenerator_autorefresh", $Value: Enum_DPRandomGenerator_autorefresh },
    Enum_DPCombinatorialGenerator_autorefresh: { $Name: "Enum_DPCombinatorialGenerator_autorefresh", $Value: Enum_DPCombinatorialGenerator_autorefresh },
    Enum_DPFeelingLucky_autorefresh: { $Name: "Enum_DPFeelingLucky_autorefresh", $Value: Enum_DPFeelingLucky_autorefresh },
    Enum_DPJinja_autorefresh: { $Name: "Enum_DPJinja_autorefresh", $Value: Enum_DPJinja_autorefresh },
    Enum_DPMagicPrompt_autorefresh: { $Name: "Enum_DPMagicPrompt_autorefresh", $Value: Enum_DPMagicPrompt_autorefresh },
    Enum_SAMLoader_model_name: { $Name: "Enum_SAMLoader_model_name", $Value: Enum_SAMLoader_model_name },
    Enum_SAMLoader_device_mode: { $Name: "Enum_SAMLoader_device_mode", $Value: Enum_SAMLoader_device_mode },
    Enum_ONNXDetectorProvider_model_name: { $Name: "Enum_ONNXDetectorProvider_model_name", $Value: Enum_ONNXDetectorProvider_model_name },
    Enum_DetailerForEach_sampler_name: { $Name: "Enum_DetailerForEach_sampler_name", $Value: Enum_DetailerForEach_sampler_name },
    Enum_DetailerForEach_scheduler: { $Name: "Enum_DetailerForEach_scheduler", $Value: Enum_DetailerForEach_scheduler },
    Enum_DetailerForEachDebug_sampler_name: { $Name: "Enum_DetailerForEachDebug_sampler_name", $Value: Enum_DetailerForEachDebug_sampler_name },
    Enum_DetailerForEachDebug_scheduler: { $Name: "Enum_DetailerForEachDebug_scheduler", $Value: Enum_DetailerForEachDebug_scheduler },
    Enum_DetailerForEachPipe_sampler_name: { $Name: "Enum_DetailerForEachPipe_sampler_name", $Value: Enum_DetailerForEachPipe_sampler_name },
    Enum_DetailerForEachPipe_scheduler: { $Name: "Enum_DetailerForEachPipe_scheduler", $Value: Enum_DetailerForEachPipe_scheduler },
    Enum_DetailerForEachDebugPipe_sampler_name: { $Name: "Enum_DetailerForEachDebugPipe_sampler_name", $Value: Enum_DetailerForEachDebugPipe_sampler_name },
    Enum_DetailerForEachDebugPipe_scheduler: { $Name: "Enum_DetailerForEachDebugPipe_scheduler", $Value: Enum_DetailerForEachDebugPipe_scheduler },
    Enum_DetailerForEachPipeForAnimateDiff_sampler_name: { $Name: "Enum_DetailerForEachPipeForAnimateDiff_sampler_name", $Value: Enum_DetailerForEachPipeForAnimateDiff_sampler_name },
    Enum_DetailerForEachPipeForAnimateDiff_scheduler: { $Name: "Enum_DetailerForEachPipeForAnimateDiff_scheduler", $Value: Enum_DetailerForEachPipeForAnimateDiff_scheduler },
    Enum_SAMDetectorCombined_detection_hint: { $Name: "Enum_SAMDetectorCombined_detection_hint", $Value: Enum_SAMDetectorCombined_detection_hint },
    Enum_SAMDetectorCombined_mask_hint_use_negative: { $Name: "Enum_SAMDetectorCombined_mask_hint_use_negative", $Value: Enum_SAMDetectorCombined_mask_hint_use_negative },
    Enum_SAMDetectorSegmented_detection_hint: { $Name: "Enum_SAMDetectorSegmented_detection_hint", $Value: Enum_SAMDetectorSegmented_detection_hint },
    Enum_SAMDetectorSegmented_mask_hint_use_negative: { $Name: "Enum_SAMDetectorSegmented_mask_hint_use_negative", $Value: Enum_SAMDetectorSegmented_mask_hint_use_negative },
    Enum_FaceDetailer_sampler_name: { $Name: "Enum_FaceDetailer_sampler_name", $Value: Enum_FaceDetailer_sampler_name },
    Enum_FaceDetailer_scheduler: { $Name: "Enum_FaceDetailer_scheduler", $Value: Enum_FaceDetailer_scheduler },
    Enum_FaceDetailer_sam_detection_hint: { $Name: "Enum_FaceDetailer_sam_detection_hint", $Value: Enum_FaceDetailer_sam_detection_hint },
    Enum_FaceDetailer_sam_mask_hint_use_negative: { $Name: "Enum_FaceDetailer_sam_mask_hint_use_negative", $Value: Enum_FaceDetailer_sam_mask_hint_use_negative },
    Enum_FaceDetailerPipe_sampler_name: { $Name: "Enum_FaceDetailerPipe_sampler_name", $Value: Enum_FaceDetailerPipe_sampler_name },
    Enum_FaceDetailerPipe_scheduler: { $Name: "Enum_FaceDetailerPipe_scheduler", $Value: Enum_FaceDetailerPipe_scheduler },
    Enum_FaceDetailerPipe_sam_detection_hint: { $Name: "Enum_FaceDetailerPipe_sam_detection_hint", $Value: Enum_FaceDetailerPipe_sam_detection_hint },
    Enum_FaceDetailerPipe_sam_mask_hint_use_negative: { $Name: "Enum_FaceDetailerPipe_sam_mask_hint_use_negative", $Value: Enum_FaceDetailerPipe_sam_mask_hint_use_negative },
    Enum_MaskDetailerPipe_sampler_name: { $Name: "Enum_MaskDetailerPipe_sampler_name", $Value: Enum_MaskDetailerPipe_sampler_name },
    Enum_MaskDetailerPipe_scheduler: { $Name: "Enum_MaskDetailerPipe_scheduler", $Value: Enum_MaskDetailerPipe_scheduler },
    "Enum_ToDetailerPipe_Select$_to$_add$_LoRA": { $Name: "Enum_ToDetailerPipe_Select$_to$_add$_LoRA", $Value: Enum_ToDetailerPipe_Select$_to$_add$_LoRA },
    "Enum_ToDetailerPipe_Select$_to$_add$_Wildcard": { $Name: "Enum_ToDetailerPipe_Select$_to$_add$_Wildcard", $Value: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard },
    "Enum_ToDetailerPipeSDXL_Select$_to$_add$_LoRA": { $Name: "Enum_ToDetailerPipeSDXL_Select$_to$_add$_LoRA", $Value: Enum_ToDetailerPipeSDXL_Select$_to$_add$_LoRA },
    "Enum_ToDetailerPipeSDXL_Select$_to$_add$_Wildcard": { $Name: "Enum_ToDetailerPipeSDXL_Select$_to$_add$_Wildcard", $Value: Enum_ToDetailerPipeSDXL_Select$_to$_add$_Wildcard },
    "Enum_BasicPipeToDetailerPipe_Select$_to$_add$_LoRA": { $Name: "Enum_BasicPipeToDetailerPipe_Select$_to$_add$_LoRA", $Value: Enum_BasicPipeToDetailerPipe_Select$_to$_add$_LoRA },
    "Enum_BasicPipeToDetailerPipe_Select$_to$_add$_Wildcard": { $Name: "Enum_BasicPipeToDetailerPipe_Select$_to$_add$_Wildcard", $Value: Enum_BasicPipeToDetailerPipe_Select$_to$_add$_Wildcard },
    "Enum_BasicPipeToDetailerPipeSDXL_Select$_to$_add$_LoRA": { $Name: "Enum_BasicPipeToDetailerPipeSDXL_Select$_to$_add$_LoRA", $Value: Enum_BasicPipeToDetailerPipeSDXL_Select$_to$_add$_LoRA },
    "Enum_BasicPipeToDetailerPipeSDXL_Select$_to$_add$_Wildcard": { $Name: "Enum_BasicPipeToDetailerPipeSDXL_Select$_to$_add$_Wildcard", $Value: Enum_BasicPipeToDetailerPipeSDXL_Select$_to$_add$_Wildcard },
    "Enum_EditDetailerPipe_Select$_to$_add$_LoRA": { $Name: "Enum_EditDetailerPipe_Select$_to$_add$_LoRA", $Value: Enum_EditDetailerPipe_Select$_to$_add$_LoRA },
    "Enum_EditDetailerPipe_Select$_to$_add$_Wildcard": { $Name: "Enum_EditDetailerPipe_Select$_to$_add$_Wildcard", $Value: Enum_EditDetailerPipe_Select$_to$_add$_Wildcard },
    "Enum_EditDetailerPipeSDXL_Select$_to$_add$_LoRA": { $Name: "Enum_EditDetailerPipeSDXL_Select$_to$_add$_LoRA", $Value: Enum_EditDetailerPipeSDXL_Select$_to$_add$_LoRA },
    "Enum_EditDetailerPipeSDXL_Select$_to$_add$_Wildcard": { $Name: "Enum_EditDetailerPipeSDXL_Select$_to$_add$_Wildcard", $Value: Enum_EditDetailerPipeSDXL_Select$_to$_add$_Wildcard },
    Enum_LatentPixelScale_scale_method: { $Name: "Enum_LatentPixelScale_scale_method", $Value: Enum_LatentPixelScale_scale_method },
    Enum_PixelKSampleUpscalerProvider_scale_method: { $Name: "Enum_PixelKSampleUpscalerProvider_scale_method", $Value: Enum_PixelKSampleUpscalerProvider_scale_method },
    Enum_PixelKSampleUpscalerProvider_sampler_name: { $Name: "Enum_PixelKSampleUpscalerProvider_sampler_name", $Value: Enum_PixelKSampleUpscalerProvider_sampler_name },
    Enum_PixelKSampleUpscalerProvider_scheduler: { $Name: "Enum_PixelKSampleUpscalerProvider_scheduler", $Value: Enum_PixelKSampleUpscalerProvider_scheduler },
    Enum_PixelKSampleUpscalerProviderPipe_scale_method: { $Name: "Enum_PixelKSampleUpscalerProviderPipe_scale_method", $Value: Enum_PixelKSampleUpscalerProviderPipe_scale_method },
    Enum_PixelKSampleUpscalerProviderPipe_sampler_name: { $Name: "Enum_PixelKSampleUpscalerProviderPipe_sampler_name", $Value: Enum_PixelKSampleUpscalerProviderPipe_sampler_name },
    Enum_PixelKSampleUpscalerProviderPipe_scheduler: { $Name: "Enum_PixelKSampleUpscalerProviderPipe_scheduler", $Value: Enum_PixelKSampleUpscalerProviderPipe_scheduler },
    Enum_IterativeLatentUpscale_step_mode: { $Name: "Enum_IterativeLatentUpscale_step_mode", $Value: Enum_IterativeLatentUpscale_step_mode },
    Enum_IterativeImageUpscale_step_mode: { $Name: "Enum_IterativeImageUpscale_step_mode", $Value: Enum_IterativeImageUpscale_step_mode },
    Enum_PixelTiledKSampleUpscalerProvider_scale_method: { $Name: "Enum_PixelTiledKSampleUpscalerProvider_scale_method", $Value: Enum_PixelTiledKSampleUpscalerProvider_scale_method },
    Enum_PixelTiledKSampleUpscalerProvider_sampler_name: { $Name: "Enum_PixelTiledKSampleUpscalerProvider_sampler_name", $Value: Enum_PixelTiledKSampleUpscalerProvider_sampler_name },
    Enum_PixelTiledKSampleUpscalerProvider_scheduler: { $Name: "Enum_PixelTiledKSampleUpscalerProvider_scheduler", $Value: Enum_PixelTiledKSampleUpscalerProvider_scheduler },
    Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy: { $Name: "Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy", $Value: Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy },
    Enum_PixelTiledKSampleUpscalerProviderPipe_scale_method: { $Name: "Enum_PixelTiledKSampleUpscalerProviderPipe_scale_method", $Value: Enum_PixelTiledKSampleUpscalerProviderPipe_scale_method },
    Enum_PixelTiledKSampleUpscalerProviderPipe_sampler_name: { $Name: "Enum_PixelTiledKSampleUpscalerProviderPipe_sampler_name", $Value: Enum_PixelTiledKSampleUpscalerProviderPipe_sampler_name },
    Enum_PixelTiledKSampleUpscalerProviderPipe_scheduler: { $Name: "Enum_PixelTiledKSampleUpscalerProviderPipe_scheduler", $Value: Enum_PixelTiledKSampleUpscalerProviderPipe_scheduler },
    Enum_PixelTiledKSampleUpscalerProviderPipe_tiling_strategy: { $Name: "Enum_PixelTiledKSampleUpscalerProviderPipe_tiling_strategy", $Value: Enum_PixelTiledKSampleUpscalerProviderPipe_tiling_strategy },
    Enum_TwoSamplersForMaskUpscalerProvider_scale_method: { $Name: "Enum_TwoSamplersForMaskUpscalerProvider_scale_method", $Value: Enum_TwoSamplersForMaskUpscalerProvider_scale_method },
    Enum_TwoSamplersForMaskUpscalerProvider_full_sample_schedule: { $Name: "Enum_TwoSamplersForMaskUpscalerProvider_full_sample_schedule", $Value: Enum_TwoSamplersForMaskUpscalerProvider_full_sample_schedule },
    Enum_TwoSamplersForMaskUpscalerProviderPipe_scale_method: { $Name: "Enum_TwoSamplersForMaskUpscalerProviderPipe_scale_method", $Value: Enum_TwoSamplersForMaskUpscalerProviderPipe_scale_method },
    Enum_TwoSamplersForMaskUpscalerProviderPipe_full_sample_schedule: { $Name: "Enum_TwoSamplersForMaskUpscalerProviderPipe_full_sample_schedule", $Value: Enum_TwoSamplersForMaskUpscalerProviderPipe_full_sample_schedule },
    Enum_DenoiseScheduleHookProvider_schedule_for_iteration: { $Name: "Enum_DenoiseScheduleHookProvider_schedule_for_iteration", $Value: Enum_DenoiseScheduleHookProvider_schedule_for_iteration },
    Enum_StepsScheduleHookProvider_schedule_for_iteration: { $Name: "Enum_StepsScheduleHookProvider_schedule_for_iteration", $Value: Enum_StepsScheduleHookProvider_schedule_for_iteration },
    Enum_CfgScheduleHookProvider_schedule_for_iteration: { $Name: "Enum_CfgScheduleHookProvider_schedule_for_iteration", $Value: Enum_CfgScheduleHookProvider_schedule_for_iteration },
    Enum_NoiseInjectionHookProvider_schedule_for_iteration: { $Name: "Enum_NoiseInjectionHookProvider_schedule_for_iteration", $Value: Enum_NoiseInjectionHookProvider_schedule_for_iteration },
    Enum_NoiseInjectionHookProvider_source: { $Name: "Enum_NoiseInjectionHookProvider_source", $Value: Enum_NoiseInjectionHookProvider_source },
    Enum_UnsamplerHookProvider_sampler_name: { $Name: "Enum_UnsamplerHookProvider_sampler_name", $Value: Enum_UnsamplerHookProvider_sampler_name },
    Enum_UnsamplerHookProvider_scheduler: { $Name: "Enum_UnsamplerHookProvider_scheduler", $Value: Enum_UnsamplerHookProvider_scheduler },
    Enum_UnsamplerHookProvider_normalize: { $Name: "Enum_UnsamplerHookProvider_normalize", $Value: Enum_UnsamplerHookProvider_normalize },
    Enum_UnsamplerHookProvider_schedule_for_iteration: { $Name: "Enum_UnsamplerHookProvider_schedule_for_iteration", $Value: Enum_UnsamplerHookProvider_schedule_for_iteration },
    Enum_CoreMLDetailerHookProvider_mode: { $Name: "Enum_CoreMLDetailerHookProvider_mode", $Value: Enum_CoreMLDetailerHookProvider_mode },
    Enum_NoiseInjectionDetailerHookProvider_schedule_for_cycle: { $Name: "Enum_NoiseInjectionDetailerHookProvider_schedule_for_cycle", $Value: Enum_NoiseInjectionDetailerHookProvider_schedule_for_cycle },
    Enum_NoiseInjectionDetailerHookProvider_source: { $Name: "Enum_NoiseInjectionDetailerHookProvider_source", $Value: Enum_NoiseInjectionDetailerHookProvider_source },
    Enum_UnsamplerDetailerHookProvider_sampler_name: { $Name: "Enum_UnsamplerDetailerHookProvider_sampler_name", $Value: Enum_UnsamplerDetailerHookProvider_sampler_name },
    Enum_UnsamplerDetailerHookProvider_scheduler: { $Name: "Enum_UnsamplerDetailerHookProvider_scheduler", $Value: Enum_UnsamplerDetailerHookProvider_scheduler },
    Enum_UnsamplerDetailerHookProvider_normalize: { $Name: "Enum_UnsamplerDetailerHookProvider_normalize", $Value: Enum_UnsamplerDetailerHookProvider_normalize },
    Enum_UnsamplerDetailerHookProvider_schedule_for_cycle: { $Name: "Enum_UnsamplerDetailerHookProvider_schedule_for_cycle", $Value: Enum_UnsamplerDetailerHookProvider_schedule_for_cycle },
    Enum_DenoiseSchedulerDetailerHookProvider_schedule_for_cycle: { $Name: "Enum_DenoiseSchedulerDetailerHookProvider_schedule_for_cycle", $Value: Enum_DenoiseSchedulerDetailerHookProvider_schedule_for_cycle },
    Enum_SEGSOrderedFilterDetailerHookProvider_target: { $Name: "Enum_SEGSOrderedFilterDetailerHookProvider_target", $Value: Enum_SEGSOrderedFilterDetailerHookProvider_target },
    Enum_SEGSRangeFilterDetailerHookProvider_target: { $Name: "Enum_SEGSRangeFilterDetailerHookProvider_target", $Value: Enum_SEGSRangeFilterDetailerHookProvider_target },
    Enum_SEGSLabelFilterDetailerHookProvider_preset: { $Name: "Enum_SEGSLabelFilterDetailerHookProvider_preset", $Value: Enum_SEGSLabelFilterDetailerHookProvider_preset },
    "Enum_ImpactSimpleDetectorSEGS$_for$_AD_masking_mode": { $Name: "Enum_ImpactSimpleDetectorSEGS$_for$_AD_masking_mode", $Value: Enum_ImpactSimpleDetectorSEGS$_for$_AD_masking_mode },
    "Enum_ImpactSimpleDetectorSEGS$_for$_AD_segs_pivot": { $Name: "Enum_ImpactSimpleDetectorSEGS$_for$_AD_segs_pivot", $Value: Enum_ImpactSimpleDetectorSEGS$_for$_AD_segs_pivot },
    Enum_ImpactIPAdapterApplySEGS_weight_type: { $Name: "Enum_ImpactIPAdapterApplySEGS_weight_type", $Value: Enum_ImpactIPAdapterApplySEGS_weight_type },
    Enum_ImpactIPAdapterApplySEGS_combine_embeds: { $Name: "Enum_ImpactIPAdapterApplySEGS_combine_embeds", $Value: Enum_ImpactIPAdapterApplySEGS_combine_embeds },
    Enum_KSamplerProvider_sampler_name: { $Name: "Enum_KSamplerProvider_sampler_name", $Value: Enum_KSamplerProvider_sampler_name },
    Enum_KSamplerProvider_scheduler: { $Name: "Enum_KSamplerProvider_scheduler", $Value: Enum_KSamplerProvider_scheduler },
    Enum_TiledKSamplerProvider_sampler_name: { $Name: "Enum_TiledKSamplerProvider_sampler_name", $Value: Enum_TiledKSamplerProvider_sampler_name },
    Enum_TiledKSamplerProvider_scheduler: { $Name: "Enum_TiledKSamplerProvider_scheduler", $Value: Enum_TiledKSamplerProvider_scheduler },
    Enum_TiledKSamplerProvider_tiling_strategy: { $Name: "Enum_TiledKSamplerProvider_tiling_strategy", $Value: Enum_TiledKSamplerProvider_tiling_strategy },
    Enum_KSamplerAdvancedProvider_sampler_name: { $Name: "Enum_KSamplerAdvancedProvider_sampler_name", $Value: Enum_KSamplerAdvancedProvider_sampler_name },
    Enum_KSamplerAdvancedProvider_scheduler: { $Name: "Enum_KSamplerAdvancedProvider_scheduler", $Value: Enum_KSamplerAdvancedProvider_scheduler },
    Enum_PreviewBridge_restore_mask: { $Name: "Enum_PreviewBridge_restore_mask", $Value: Enum_PreviewBridge_restore_mask },
    Enum_PreviewBridgeLatent_preview_method: { $Name: "Enum_PreviewBridgeLatent_preview_method", $Value: Enum_PreviewBridgeLatent_preview_method },
    Enum_PreviewBridgeLatent_restore_mask: { $Name: "Enum_PreviewBridgeLatent_restore_mask", $Value: Enum_PreviewBridgeLatent_restore_mask },
    Enum_ImageReceiver_image: { $Name: "Enum_ImageReceiver_image", $Value: Enum_ImageReceiver_image },
    Enum_LatentSender_preview_method: { $Name: "Enum_LatentSender_preview_method", $Value: Enum_LatentSender_preview_method },
    Enum_LatentReceiver_latent: { $Name: "Enum_LatentReceiver_latent", $Value: Enum_LatentReceiver_latent },
    "Enum_ImpactWildcardProcessor_Select$_to$_add$_Wildcard": { $Name: "Enum_ImpactWildcardProcessor_Select$_to$_add$_Wildcard", $Value: Enum_ImpactWildcardProcessor_Select$_to$_add$_Wildcard },
    "Enum_ImpactWildcardEncode_Select$_to$_add$_LoRA": { $Name: "Enum_ImpactWildcardEncode_Select$_to$_add$_LoRA", $Value: Enum_ImpactWildcardEncode_Select$_to$_add$_LoRA },
    "Enum_ImpactWildcardEncode_Select$_to$_add$_Wildcard": { $Name: "Enum_ImpactWildcardEncode_Select$_to$_add$_Wildcard", $Value: Enum_ImpactWildcardEncode_Select$_to$_add$_Wildcard },
    Enum_SEGSUpscaler_resampling_method: { $Name: "Enum_SEGSUpscaler_resampling_method", $Value: Enum_SEGSUpscaler_resampling_method },
    Enum_SEGSUpscaler_supersample: { $Name: "Enum_SEGSUpscaler_supersample", $Value: Enum_SEGSUpscaler_supersample },
    Enum_SEGSUpscaler_sampler_name: { $Name: "Enum_SEGSUpscaler_sampler_name", $Value: Enum_SEGSUpscaler_sampler_name },
    Enum_SEGSUpscaler_scheduler: { $Name: "Enum_SEGSUpscaler_scheduler", $Value: Enum_SEGSUpscaler_scheduler },
    Enum_SEGSUpscalerPipe_resampling_method: { $Name: "Enum_SEGSUpscalerPipe_resampling_method", $Value: Enum_SEGSUpscalerPipe_resampling_method },
    Enum_SEGSUpscalerPipe_supersample: { $Name: "Enum_SEGSUpscalerPipe_supersample", $Value: Enum_SEGSUpscalerPipe_supersample },
    Enum_SEGSUpscalerPipe_sampler_name: { $Name: "Enum_SEGSUpscalerPipe_sampler_name", $Value: Enum_SEGSUpscalerPipe_sampler_name },
    Enum_SEGSUpscalerPipe_scheduler: { $Name: "Enum_SEGSUpscalerPipe_scheduler", $Value: Enum_SEGSUpscalerPipe_scheduler },
    Enum_SEGSDetailer_sampler_name: { $Name: "Enum_SEGSDetailer_sampler_name", $Value: Enum_SEGSDetailer_sampler_name },
    Enum_SEGSDetailer_scheduler: { $Name: "Enum_SEGSDetailer_scheduler", $Value: Enum_SEGSDetailer_scheduler },
    Enum_ImpactMakeTileSEGS_irregular_mask_mode: { $Name: "Enum_ImpactMakeTileSEGS_irregular_mask_mode", $Value: Enum_ImpactMakeTileSEGS_irregular_mask_mode },
    Enum_SEGSDetailerForAnimateDiff_sampler_name: { $Name: "Enum_SEGSDetailerForAnimateDiff_sampler_name", $Value: Enum_SEGSDetailerForAnimateDiff_sampler_name },
    Enum_SEGSDetailerForAnimateDiff_scheduler: { $Name: "Enum_SEGSDetailerForAnimateDiff_scheduler", $Value: Enum_SEGSDetailerForAnimateDiff_scheduler },
    Enum_ImpactKSamplerBasicPipe_sampler_name: { $Name: "Enum_ImpactKSamplerBasicPipe_sampler_name", $Value: Enum_ImpactKSamplerBasicPipe_sampler_name },
    Enum_ImpactKSamplerBasicPipe_scheduler: { $Name: "Enum_ImpactKSamplerBasicPipe_scheduler", $Value: Enum_ImpactKSamplerBasicPipe_scheduler },
    Enum_ImpactKSamplerAdvancedBasicPipe_sampler_name: { $Name: "Enum_ImpactKSamplerAdvancedBasicPipe_sampler_name", $Value: Enum_ImpactKSamplerAdvancedBasicPipe_sampler_name },
    Enum_ImpactKSamplerAdvancedBasicPipe_scheduler: { $Name: "Enum_ImpactKSamplerAdvancedBasicPipe_scheduler", $Value: Enum_ImpactKSamplerAdvancedBasicPipe_scheduler },
    Enum_ReencodeLatent_tile_mode: { $Name: "Enum_ReencodeLatent_tile_mode", $Value: Enum_ReencodeLatent_tile_mode },
    Enum_ReencodeLatentPipe_tile_mode: { $Name: "Enum_ReencodeLatentPipe_tile_mode", $Value: Enum_ReencodeLatentPipe_tile_mode },
    Enum_RegionalSampler_seed_2nd_mode: { $Name: "Enum_RegionalSampler_seed_2nd_mode", $Value: Enum_RegionalSampler_seed_2nd_mode },
    Enum_RegionalSampler_additional_mode: { $Name: "Enum_RegionalSampler_additional_mode", $Value: Enum_RegionalSampler_additional_mode },
    Enum_RegionalSampler_additional_sampler: { $Name: "Enum_RegionalSampler_additional_sampler", $Value: Enum_RegionalSampler_additional_sampler },
    Enum_RegionalSamplerAdvanced_additional_mode: { $Name: "Enum_RegionalSamplerAdvanced_additional_mode", $Value: Enum_RegionalSamplerAdvanced_additional_mode },
    Enum_RegionalSamplerAdvanced_additional_sampler: { $Name: "Enum_RegionalSamplerAdvanced_additional_sampler", $Value: Enum_RegionalSamplerAdvanced_additional_sampler },
    Enum_RegionalPrompt_variation_method: { $Name: "Enum_RegionalPrompt_variation_method", $Value: Enum_RegionalPrompt_variation_method },
    Enum_ImpactSEGSLabelFilter_preset: { $Name: "Enum_ImpactSEGSLabelFilter_preset", $Value: Enum_ImpactSEGSLabelFilter_preset },
    Enum_ImpactSEGSRangeFilter_target: { $Name: "Enum_ImpactSEGSRangeFilter_target", $Value: Enum_ImpactSEGSRangeFilter_target },
    Enum_ImpactSEGSOrderedFilter_target: { $Name: "Enum_ImpactSEGSOrderedFilter_target", $Value: Enum_ImpactSEGSOrderedFilter_target },
    Enum_ImpactCompare_cmp: { $Name: "Enum_ImpactCompare_cmp", $Value: Enum_ImpactCompare_cmp },
    Enum_ImpactLogicalOperators_operator: { $Name: "Enum_ImpactLogicalOperators_operator", $Value: Enum_ImpactLogicalOperators_operator },
    Enum_ImpactValueReceiver_typ: { $Name: "Enum_ImpactValueReceiver_typ", $Value: Enum_ImpactValueReceiver_typ },
    Enum_ImpactControlBridge_behavior: { $Name: "Enum_ImpactControlBridge_behavior", $Value: Enum_ImpactControlBridge_behavior },
    Enum_ImpactHFTransformersClassifierProvider_preset_repo_id: { $Name: "Enum_ImpactHFTransformersClassifierProvider_preset_repo_id", $Value: Enum_ImpactHFTransformersClassifierProvider_preset_repo_id },
    Enum_ImpactHFTransformersClassifierProvider_device_mode: { $Name: "Enum_ImpactHFTransformersClassifierProvider_device_mode", $Value: Enum_ImpactHFTransformersClassifierProvider_device_mode },
    Enum_ImpactSEGSClassify_preset_expr: { $Name: "Enum_ImpactSEGSClassify_preset_expr", $Value: Enum_ImpactSEGSClassify_preset_expr },
    Enum_ImpactSchedulerAdapter_scheduler_out: { $Name: "Enum_ImpactSchedulerAdapter_scheduler_out", $Value: Enum_ImpactSchedulerAdapter_scheduler_out },
    Enum_ImpactSchedulerAdapter_scheduler: { $Name: "Enum_ImpactSchedulerAdapter_scheduler", $Value: Enum_ImpactSchedulerAdapter_scheduler },
    Enum_ImpactSchedulerAdapter_extra_scheduler: { $Name: "Enum_ImpactSchedulerAdapter_extra_scheduler", $Value: Enum_ImpactSchedulerAdapter_extra_scheduler },
    Enum_UltralyticsDetectorProvider_model_name: { $Name: "Enum_UltralyticsDetectorProvider_model_name", $Value: Enum_UltralyticsDetectorProvider_model_name },
    "Enum_INPAINT$_LoadFooocusInpaint_head": { $Name: "Enum_INPAINT$_LoadFooocusInpaint_head", $Value: Enum_INPAINT$_LoadFooocusInpaint_head },
    "Enum_INPAINT$_LoadFooocusInpaint_patch": { $Name: "Enum_INPAINT$_LoadFooocusInpaint_patch", $Value: Enum_INPAINT$_LoadFooocusInpaint_patch },
    "Enum_INPAINT$_MaskedFill_fill": { $Name: "Enum_INPAINT$_MaskedFill_fill", $Value: Enum_INPAINT$_MaskedFill_fill },
    "Enum_INPAINT$_LoadInpaintModel_model_name": { $Name: "Enum_INPAINT$_LoadInpaintModel_model_name", $Value: Enum_INPAINT$_LoadInpaintModel_model_name },
    "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter": { $Name: "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter", $Value: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter },
    "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_lora_name": { $Name: "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_lora_name", $Value: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_lora_name },
    "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_preset": { $Name: "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_preset", $Value: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_preset },
    "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_heatmap_palette": { $Name: "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_heatmap_palette", $Value: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_heatmap_palette },
    "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_xyplot_mode": { $Name: "Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_xyplot_mode", $Value: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_xyplot_mode },
    "Enum_LoraLoaderBlockWeight_$3$3Inspire_category_filter": { $Name: "Enum_LoraLoaderBlockWeight_$3$3Inspire_category_filter", $Value: Enum_LoraLoaderBlockWeight_$3$3Inspire_category_filter },
    "Enum_LoraLoaderBlockWeight_$3$3Inspire_lora_name": { $Name: "Enum_LoraLoaderBlockWeight_$3$3Inspire_lora_name", $Value: Enum_LoraLoaderBlockWeight_$3$3Inspire_lora_name },
    "Enum_LoraLoaderBlockWeight_$3$3Inspire_preset": { $Name: "Enum_LoraLoaderBlockWeight_$3$3Inspire_preset", $Value: Enum_LoraLoaderBlockWeight_$3$3Inspire_preset },
    "Enum_LoraBlockInfo_$3$3Inspire_lora_name": { $Name: "Enum_LoraBlockInfo_$3$3Inspire_lora_name", $Value: Enum_LoraBlockInfo_$3$3Inspire_lora_name },
    "Enum_MakeLBW_$3$3Inspire_category_filter": { $Name: "Enum_MakeLBW_$3$3Inspire_category_filter", $Value: Enum_MakeLBW_$3$3Inspire_category_filter },
    "Enum_MakeLBW_$3$3Inspire_lora_name": { $Name: "Enum_MakeLBW_$3$3Inspire_lora_name", $Value: Enum_MakeLBW_$3$3Inspire_lora_name },
    "Enum_MakeLBW_$3$3Inspire_preset": { $Name: "Enum_MakeLBW_$3$3Inspire_preset", $Value: Enum_MakeLBW_$3$3Inspire_preset },
    "Enum_LoadLBW_$3$3Inspire_lbw_model": { $Name: "Enum_LoadLBW_$3$3Inspire_lbw_model", $Value: Enum_LoadLBW_$3$3Inspire_lbw_model },
    "Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector": { $Name: "Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector", $Value: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector },
    "Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_pose_estimator": { $Name: "Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_pose_estimator", $Value: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_pose_estimator },
    "Enum_KSampler_$3$3Inspire_sampler_name": { $Name: "Enum_KSampler_$3$3Inspire_sampler_name", $Value: Enum_KSampler_$3$3Inspire_sampler_name },
    "Enum_KSampler_$3$3Inspire_scheduler": { $Name: "Enum_KSampler_$3$3Inspire_scheduler", $Value: Enum_KSampler_$3$3Inspire_scheduler },
    "Enum_KSampler_$3$3Inspire_noise_mode": { $Name: "Enum_KSampler_$3$3Inspire_noise_mode", $Value: Enum_KSampler_$3$3Inspire_noise_mode },
    "Enum_KSampler_$3$3Inspire_batch_seed_mode": { $Name: "Enum_KSampler_$3$3Inspire_batch_seed_mode", $Value: Enum_KSampler_$3$3Inspire_batch_seed_mode },
    "Enum_KSampler_$3$3Inspire_variation_method": { $Name: "Enum_KSampler_$3$3Inspire_variation_method", $Value: Enum_KSampler_$3$3Inspire_variation_method },
    "Enum_KSamplerAdvanced_$3$3Inspire_sampler_name": { $Name: "Enum_KSamplerAdvanced_$3$3Inspire_sampler_name", $Value: Enum_KSamplerAdvanced_$3$3Inspire_sampler_name },
    "Enum_KSamplerAdvanced_$3$3Inspire_scheduler": { $Name: "Enum_KSamplerAdvanced_$3$3Inspire_scheduler", $Value: Enum_KSamplerAdvanced_$3$3Inspire_scheduler },
    "Enum_KSamplerAdvanced_$3$3Inspire_noise_mode": { $Name: "Enum_KSamplerAdvanced_$3$3Inspire_noise_mode", $Value: Enum_KSamplerAdvanced_$3$3Inspire_noise_mode },
    "Enum_KSamplerAdvanced_$3$3Inspire_batch_seed_mode": { $Name: "Enum_KSamplerAdvanced_$3$3Inspire_batch_seed_mode", $Value: Enum_KSamplerAdvanced_$3$3Inspire_batch_seed_mode },
    "Enum_KSamplerAdvanced_$3$3Inspire_variation_method": { $Name: "Enum_KSamplerAdvanced_$3$3Inspire_variation_method", $Value: Enum_KSamplerAdvanced_$3$3Inspire_variation_method },
    "Enum_KSamplerPipe_$3$3Inspire_sampler_name": { $Name: "Enum_KSamplerPipe_$3$3Inspire_sampler_name", $Value: Enum_KSamplerPipe_$3$3Inspire_sampler_name },
    "Enum_KSamplerPipe_$3$3Inspire_scheduler": { $Name: "Enum_KSamplerPipe_$3$3Inspire_scheduler", $Value: Enum_KSamplerPipe_$3$3Inspire_scheduler },
    "Enum_KSamplerPipe_$3$3Inspire_noise_mode": { $Name: "Enum_KSamplerPipe_$3$3Inspire_noise_mode", $Value: Enum_KSamplerPipe_$3$3Inspire_noise_mode },
    "Enum_KSamplerPipe_$3$3Inspire_batch_seed_mode": { $Name: "Enum_KSamplerPipe_$3$3Inspire_batch_seed_mode", $Value: Enum_KSamplerPipe_$3$3Inspire_batch_seed_mode },
    "Enum_KSamplerAdvancedPipe_$3$3Inspire_sampler_name": { $Name: "Enum_KSamplerAdvancedPipe_$3$3Inspire_sampler_name", $Value: Enum_KSamplerAdvancedPipe_$3$3Inspire_sampler_name },
    "Enum_KSamplerAdvancedPipe_$3$3Inspire_scheduler": { $Name: "Enum_KSamplerAdvancedPipe_$3$3Inspire_scheduler", $Value: Enum_KSamplerAdvancedPipe_$3$3Inspire_scheduler },
    "Enum_KSamplerAdvancedPipe_$3$3Inspire_noise_mode": { $Name: "Enum_KSamplerAdvancedPipe_$3$3Inspire_noise_mode", $Value: Enum_KSamplerAdvancedPipe_$3$3Inspire_noise_mode },
    "Enum_KSamplerAdvancedPipe_$3$3Inspire_batch_seed_mode": { $Name: "Enum_KSamplerAdvancedPipe_$3$3Inspire_batch_seed_mode", $Value: Enum_KSamplerAdvancedPipe_$3$3Inspire_batch_seed_mode },
    "Enum_RandomNoise_$3$3Inspire_noise_mode": { $Name: "Enum_RandomNoise_$3$3Inspire_noise_mode", $Value: Enum_RandomNoise_$3$3Inspire_noise_mode },
    "Enum_RandomNoise_$3$3Inspire_batch_seed_mode": { $Name: "Enum_RandomNoise_$3$3Inspire_batch_seed_mode", $Value: Enum_RandomNoise_$3$3Inspire_batch_seed_mode },
    "Enum_RandomNoise_$3$3Inspire_variation_method": { $Name: "Enum_RandomNoise_$3$3Inspire_variation_method", $Value: Enum_RandomNoise_$3$3Inspire_variation_method },
    "Enum_LoadPromptsFromDir_$3$3Inspire_prompt_dir": { $Name: "Enum_LoadPromptsFromDir_$3$3Inspire_prompt_dir", $Value: Enum_LoadPromptsFromDir_$3$3Inspire_prompt_dir },
    "Enum_LoadPromptsFromFile_$3$3Inspire_prompt_file": { $Name: "Enum_LoadPromptsFromFile_$3$3Inspire_prompt_file", $Value: Enum_LoadPromptsFromFile_$3$3Inspire_prompt_file },
    "Enum_LoadSinglePromptFromFile_$3$3Inspire_prompt_file": { $Name: "Enum_LoadSinglePromptFromFile_$3$3Inspire_prompt_file", $Value: Enum_LoadSinglePromptFromFile_$3$3Inspire_prompt_file },
    "Enum_PromptExtractor_$3$3Inspire_image": { $Name: "Enum_PromptExtractor_$3$3Inspire_image", $Value: Enum_PromptExtractor_$3$3Inspire_image },
    "Enum_GlobalSeed_$3$3Inspire_action": { $Name: "Enum_GlobalSeed_$3$3Inspire_action", $Value: Enum_GlobalSeed_$3$3Inspire_action },
    "Enum_GlobalSampler_$3$3Inspire_sampler_name": { $Name: "Enum_GlobalSampler_$3$3Inspire_sampler_name", $Value: Enum_GlobalSampler_$3$3Inspire_sampler_name },
    "Enum_GlobalSampler_$3$3Inspire_scheduler": { $Name: "Enum_GlobalSampler_$3$3Inspire_scheduler", $Value: Enum_GlobalSampler_$3$3Inspire_scheduler },
    "Enum_WildcardEncode_$3$3Inspire_token_normalization": { $Name: "Enum_WildcardEncode_$3$3Inspire_token_normalization", $Value: Enum_WildcardEncode_$3$3Inspire_token_normalization },
    "Enum_WildcardEncode_$3$3Inspire_weight_interpretation": { $Name: "Enum_WildcardEncode_$3$3Inspire_weight_interpretation", $Value: Enum_WildcardEncode_$3$3Inspire_weight_interpretation },
    "Enum_WildcardEncode_$3$3Inspire_Select$_to$_add$_LoRA": { $Name: "Enum_WildcardEncode_$3$3Inspire_Select$_to$_add$_LoRA", $Value: Enum_WildcardEncode_$3$3Inspire_Select$_to$_add$_LoRA },
    "Enum_WildcardEncode_$3$3Inspire_Select$_to$_add$_Wildcard": { $Name: "Enum_WildcardEncode_$3$3Inspire_Select$_to$_add$_Wildcard", $Value: Enum_WildcardEncode_$3$3Inspire_Select$_to$_add$_Wildcard },
    "Enum_PromptBuilder_$3$3Inspire_category": { $Name: "Enum_PromptBuilder_$3$3Inspire_category", $Value: Enum_PromptBuilder_$3$3Inspire_category },
    "Enum_PromptBuilder_$3$3Inspire_preset": { $Name: "Enum_PromptBuilder_$3$3Inspire_preset", $Value: Enum_PromptBuilder_$3$3Inspire_preset },
    "Enum_SeedExplorer_$3$3Inspire_noise_mode": { $Name: "Enum_SeedExplorer_$3$3Inspire_noise_mode", $Value: Enum_SeedExplorer_$3$3Inspire_noise_mode },
    "Enum_SeedExplorer_$3$3Inspire_initial_batch_seed_mode": { $Name: "Enum_SeedExplorer_$3$3Inspire_initial_batch_seed_mode", $Value: Enum_SeedExplorer_$3$3Inspire_initial_batch_seed_mode },
    "Enum_SeedExplorer_$3$3Inspire_variation_method": { $Name: "Enum_SeedExplorer_$3$3Inspire_variation_method", $Value: Enum_SeedExplorer_$3$3Inspire_variation_method },
    "Enum_MakeBasicPipe_$3$3Inspire_ckpt_name": { $Name: "Enum_MakeBasicPipe_$3$3Inspire_ckpt_name", $Value: Enum_MakeBasicPipe_$3$3Inspire_ckpt_name },
    "Enum_MakeBasicPipe_$3$3Inspire_Select$_to$_add$_LoRA": { $Name: "Enum_MakeBasicPipe_$3$3Inspire_Select$_to$_add$_LoRA", $Value: Enum_MakeBasicPipe_$3$3Inspire_Select$_to$_add$_LoRA },
    "Enum_MakeBasicPipe_$3$3Inspire_Select$_to$_add$_Wildcard": { $Name: "Enum_MakeBasicPipe_$3$3Inspire_Select$_to$_add$_Wildcard", $Value: Enum_MakeBasicPipe_$3$3Inspire_Select$_to$_add$_Wildcard },
    "Enum_MakeBasicPipe_$3$3Inspire_token_normalization": { $Name: "Enum_MakeBasicPipe_$3$3Inspire_token_normalization", $Value: Enum_MakeBasicPipe_$3$3Inspire_token_normalization },
    "Enum_MakeBasicPipe_$3$3Inspire_weight_interpretation": { $Name: "Enum_MakeBasicPipe_$3$3Inspire_weight_interpretation", $Value: Enum_MakeBasicPipe_$3$3Inspire_weight_interpretation },
    "Enum_CompositeNoise_$3$3Inspire_mode": { $Name: "Enum_CompositeNoise_$3$3Inspire_mode", $Value: Enum_CompositeNoise_$3$3Inspire_mode },
    "Enum_LoadImage_$3$3Inspire_image": { $Name: "Enum_LoadImage_$3$3Inspire_image", $Value: Enum_LoadImage_$3$3Inspire_image },
    "Enum_ChangeImageBatchSize_$3$3Inspire_mode": { $Name: "Enum_ChangeImageBatchSize_$3$3Inspire_mode", $Value: Enum_ChangeImageBatchSize_$3$3Inspire_mode },
    "Enum_ChangeLatentBatchSize_$3$3Inspire_mode": { $Name: "Enum_ChangeLatentBatchSize_$3$3Inspire_mode", $Value: Enum_ChangeLatentBatchSize_$3$3Inspire_mode },
    "Enum_RegionalPromptSimple_$3$3Inspire_sampler_name": { $Name: "Enum_RegionalPromptSimple_$3$3Inspire_sampler_name", $Value: Enum_RegionalPromptSimple_$3$3Inspire_sampler_name },
    "Enum_RegionalPromptSimple_$3$3Inspire_scheduler": { $Name: "Enum_RegionalPromptSimple_$3$3Inspire_scheduler", $Value: Enum_RegionalPromptSimple_$3$3Inspire_scheduler },
    "Enum_RegionalPromptSimple_$3$3Inspire_variation_method": { $Name: "Enum_RegionalPromptSimple_$3$3Inspire_variation_method", $Value: Enum_RegionalPromptSimple_$3$3Inspire_variation_method },
    "Enum_RegionalPromptColorMask_$3$3Inspire_sampler_name": { $Name: "Enum_RegionalPromptColorMask_$3$3Inspire_sampler_name", $Value: Enum_RegionalPromptColorMask_$3$3Inspire_sampler_name },
    "Enum_RegionalPromptColorMask_$3$3Inspire_scheduler": { $Name: "Enum_RegionalPromptColorMask_$3$3Inspire_scheduler", $Value: Enum_RegionalPromptColorMask_$3$3Inspire_scheduler },
    "Enum_RegionalPromptColorMask_$3$3Inspire_variation_method": { $Name: "Enum_RegionalPromptColorMask_$3$3Inspire_variation_method", $Value: Enum_RegionalPromptColorMask_$3$3Inspire_variation_method },
    "Enum_RegionalConditioningSimple_$3$3Inspire_set_cond_area": { $Name: "Enum_RegionalConditioningSimple_$3$3Inspire_set_cond_area", $Value: Enum_RegionalConditioningSimple_$3$3Inspire_set_cond_area },
    "Enum_RegionalConditioningColorMask_$3$3Inspire_set_cond_area": { $Name: "Enum_RegionalConditioningColorMask_$3$3Inspire_set_cond_area", $Value: Enum_RegionalConditioningColorMask_$3$3Inspire_set_cond_area },
    "Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type": { $Name: "Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type", $Value: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type },
    "Enum_RegionalIPAdapterMask_$3$3Inspire_combine_embeds": { $Name: "Enum_RegionalIPAdapterMask_$3$3Inspire_combine_embeds", $Value: Enum_RegionalIPAdapterMask_$3$3Inspire_combine_embeds },
    "Enum_RegionalIPAdapterColorMask_$3$3Inspire_weight_type": { $Name: "Enum_RegionalIPAdapterColorMask_$3$3Inspire_weight_type", $Value: Enum_RegionalIPAdapterColorMask_$3$3Inspire_weight_type },
    "Enum_RegionalIPAdapterColorMask_$3$3Inspire_combine_embeds": { $Name: "Enum_RegionalIPAdapterColorMask_$3$3Inspire_combine_embeds", $Value: Enum_RegionalIPAdapterColorMask_$3$3Inspire_combine_embeds },
    "Enum_RegionalIPAdapterEncodedMask_$3$3Inspire_weight_type": { $Name: "Enum_RegionalIPAdapterEncodedMask_$3$3Inspire_weight_type", $Value: Enum_RegionalIPAdapterEncodedMask_$3$3Inspire_weight_type },
    "Enum_RegionalIPAdapterEncodedColorMask_$3$3Inspire_weight_type": { $Name: "Enum_RegionalIPAdapterEncodedColorMask_$3$3Inspire_weight_type", $Value: Enum_RegionalIPAdapterEncodedColorMask_$3$3Inspire_weight_type },
    "Enum_RegionalSeedExplorerMask_$3$3Inspire_noise_mode": { $Name: "Enum_RegionalSeedExplorerMask_$3$3Inspire_noise_mode", $Value: Enum_RegionalSeedExplorerMask_$3$3Inspire_noise_mode },
    "Enum_RegionalSeedExplorerMask_$3$3Inspire_variation_method": { $Name: "Enum_RegionalSeedExplorerMask_$3$3Inspire_variation_method", $Value: Enum_RegionalSeedExplorerMask_$3$3Inspire_variation_method },
    "Enum_RegionalSeedExplorerColorMask_$3$3Inspire_noise_mode": { $Name: "Enum_RegionalSeedExplorerColorMask_$3$3Inspire_noise_mode", $Value: Enum_RegionalSeedExplorerColorMask_$3$3Inspire_noise_mode },
    "Enum_RegionalSeedExplorerColorMask_$3$3Inspire_variation_method": { $Name: "Enum_RegionalSeedExplorerColorMask_$3$3Inspire_variation_method", $Value: Enum_RegionalSeedExplorerColorMask_$3$3Inspire_variation_method },
    "Enum_ColorMaskToDepthMask_$3$3Inspire_flatten_method": { $Name: "Enum_ColorMaskToDepthMask_$3$3Inspire_flatten_method", $Value: Enum_ColorMaskToDepthMask_$3$3Inspire_flatten_method },
    "Enum_KSamplerProgress_$3$3Inspire_sampler_name": { $Name: "Enum_KSamplerProgress_$3$3Inspire_sampler_name", $Value: Enum_KSamplerProgress_$3$3Inspire_sampler_name },
    "Enum_KSamplerProgress_$3$3Inspire_scheduler": { $Name: "Enum_KSamplerProgress_$3$3Inspire_scheduler", $Value: Enum_KSamplerProgress_$3$3Inspire_scheduler },
    "Enum_KSamplerProgress_$3$3Inspire_noise_mode": { $Name: "Enum_KSamplerProgress_$3$3Inspire_noise_mode", $Value: Enum_KSamplerProgress_$3$3Inspire_noise_mode },
    "Enum_KSamplerAdvancedProgress_$3$3Inspire_sampler_name": { $Name: "Enum_KSamplerAdvancedProgress_$3$3Inspire_sampler_name", $Value: Enum_KSamplerAdvancedProgress_$3$3Inspire_sampler_name },
    "Enum_KSamplerAdvancedProgress_$3$3Inspire_scheduler": { $Name: "Enum_KSamplerAdvancedProgress_$3$3Inspire_scheduler", $Value: Enum_KSamplerAdvancedProgress_$3$3Inspire_scheduler },
    "Enum_KSamplerAdvancedProgress_$3$3Inspire_noise_mode": { $Name: "Enum_KSamplerAdvancedProgress_$3$3Inspire_noise_mode", $Value: Enum_KSamplerAdvancedProgress_$3$3Inspire_noise_mode },
    "Enum_ScheduledCFGGuider_$3$3Inspire_schedule": { $Name: "Enum_ScheduledCFGGuider_$3$3Inspire_schedule", $Value: Enum_ScheduledCFGGuider_$3$3Inspire_schedule },
    "Enum_ScheduledPerpNegCFGGuider_$3$3Inspire_schedule": { $Name: "Enum_ScheduledPerpNegCFGGuider_$3$3Inspire_schedule", $Value: Enum_ScheduledPerpNegCFGGuider_$3$3Inspire_schedule },
    "Enum_CheckpointLoaderSimpleShared_$3$3Inspire_ckpt_name": { $Name: "Enum_CheckpointLoaderSimpleShared_$3$3Inspire_ckpt_name", $Value: Enum_CheckpointLoaderSimpleShared_$3$3Inspire_ckpt_name },
    "Enum_CheckpointLoaderSimpleShared_$3$3Inspire_mode": { $Name: "Enum_CheckpointLoaderSimpleShared_$3$3Inspire_mode", $Value: Enum_CheckpointLoaderSimpleShared_$3$3Inspire_mode },
    "Enum_StableCascade$_CheckpointLoader_$3$3Inspire_stage_b": { $Name: "Enum_StableCascade$_CheckpointLoader_$3$3Inspire_stage_b", $Value: Enum_StableCascade$_CheckpointLoader_$3$3Inspire_stage_b },
    "Enum_StableCascade$_CheckpointLoader_$3$3Inspire_stage_c": { $Name: "Enum_StableCascade$_CheckpointLoader_$3$3Inspire_stage_c", $Value: Enum_StableCascade$_CheckpointLoader_$3$3Inspire_stage_c },
    "Enum_StableCascade$_CheckpointLoader_$3$3Inspire_cache_mode": { $Name: "Enum_StableCascade$_CheckpointLoader_$3$3Inspire_cache_mode", $Value: Enum_StableCascade$_CheckpointLoader_$3$3Inspire_cache_mode },
    "Enum_IPAdapterModelHelper_$3$3Inspire_preset": { $Name: "Enum_IPAdapterModelHelper_$3$3Inspire_preset", $Value: Enum_IPAdapterModelHelper_$3$3Inspire_preset },
    "Enum_IPAdapterModelHelper_$3$3Inspire_insightface_provider": { $Name: "Enum_IPAdapterModelHelper_$3$3Inspire_insightface_provider", $Value: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_provider },
    "Enum_IPAdapterModelHelper_$3$3Inspire_cache_mode": { $Name: "Enum_IPAdapterModelHelper_$3$3Inspire_cache_mode", $Value: Enum_IPAdapterModelHelper_$3$3Inspire_cache_mode },
    "Enum_IPAdapterModelHelper_$3$3Inspire_insightface_model_name": { $Name: "Enum_IPAdapterModelHelper_$3$3Inspire_insightface_model_name", $Value: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_model_name },
    Enum_ConditioningMultiCombine_operation: { $Name: "Enum_ConditioningMultiCombine_operation", $Value: Enum_ConditioningMultiCombine_operation },
    Enum_ConditioningSetMaskAndCombine_set_cond_area: { $Name: "Enum_ConditioningSetMaskAndCombine_set_cond_area", $Value: Enum_ConditioningSetMaskAndCombine_set_cond_area },
    Enum_ConditioningSetMaskAndCombine3_set_cond_area: { $Name: "Enum_ConditioningSetMaskAndCombine3_set_cond_area", $Value: Enum_ConditioningSetMaskAndCombine3_set_cond_area },
    Enum_ConditioningSetMaskAndCombine4_set_cond_area: { $Name: "Enum_ConditioningSetMaskAndCombine4_set_cond_area", $Value: Enum_ConditioningSetMaskAndCombine4_set_cond_area },
    Enum_ConditioningSetMaskAndCombine5_set_cond_area: { $Name: "Enum_ConditioningSetMaskAndCombine5_set_cond_area", $Value: Enum_ConditioningSetMaskAndCombine5_set_cond_area },
    Enum_DownloadAndLoadCLIPSeg_model: { $Name: "Enum_DownloadAndLoadCLIPSeg_model", $Value: Enum_DownloadAndLoadCLIPSeg_model },
    Enum_CreateTextMask_font: { $Name: "Enum_CreateTextMask_font", $Value: Enum_CreateTextMask_font },
    Enum_CreateFadeMask_interpolation: { $Name: "Enum_CreateFadeMask_interpolation", $Value: Enum_CreateFadeMask_interpolation },
    Enum_CreateFadeMaskAdvanced_interpolation: { $Name: "Enum_CreateFadeMaskAdvanced_interpolation", $Value: Enum_CreateFadeMaskAdvanced_interpolation },
    Enum_CreateShapeMask_shape: { $Name: "Enum_CreateShapeMask_shape", $Value: Enum_CreateShapeMask_shape },
    Enum_OffsetMask_padding_mode: { $Name: "Enum_OffsetMask_padding_mode", $Value: Enum_OffsetMask_padding_mode },
    Enum_AddLabel_font: { $Name: "Enum_AddLabel_font", $Value: Enum_AddLabel_font },
    Enum_AddLabel_direction: { $Name: "Enum_AddLabel_direction", $Value: Enum_AddLabel_direction },
    Enum_ColorMatch_method: { $Name: "Enum_ColorMatch_method", $Value: Enum_ColorMatch_method },
    Enum_CrossFadeImages_interpolation: { $Name: "Enum_CrossFadeImages_interpolation", $Value: Enum_CrossFadeImages_interpolation },
    Enum_CrossFadeImagesMulti_interpolation: { $Name: "Enum_CrossFadeImagesMulti_interpolation", $Value: Enum_CrossFadeImagesMulti_interpolation },
    Enum_FastPreview_format: { $Name: "Enum_FastPreview_format", $Value: Enum_FastPreview_format },
    Enum_ImageAddMulti_blending: { $Name: "Enum_ImageAddMulti_blending", $Value: Enum_ImageAddMulti_blending },
    Enum_ImageBatchTestPattern_font: { $Name: "Enum_ImageBatchTestPattern_font", $Value: Enum_ImageBatchTestPattern_font },
    Enum_ImageConcanate_direction: { $Name: "Enum_ImageConcanate_direction", $Value: Enum_ImageConcanate_direction },
    Enum_ImageConcatMulti_direction: { $Name: "Enum_ImageConcatMulti_direction", $Value: Enum_ImageConcatMulti_direction },
    Enum_ImagePadForOutpaintTargetSize_upscale_method: { $Name: "Enum_ImagePadForOutpaintTargetSize_upscale_method", $Value: Enum_ImagePadForOutpaintTargetSize_upscale_method },
    Enum_ImageResizeKJ_upscale_method: { $Name: "Enum_ImageResizeKJ_upscale_method", $Value: Enum_ImageResizeKJ_upscale_method },
    Enum_ImageResizeKJ_crop: { $Name: "Enum_ImageResizeKJ_crop", $Value: Enum_ImageResizeKJ_crop },
    Enum_LoadAndResizeImage_image: { $Name: "Enum_LoadAndResizeImage_image", $Value: Enum_LoadAndResizeImage_image },
    Enum_LoadAndResizeImage_mask_channel: { $Name: "Enum_LoadAndResizeImage_mask_channel", $Value: Enum_LoadAndResizeImage_mask_channel },
    Enum_TransitionImagesMulti_interpolation: { $Name: "Enum_TransitionImagesMulti_interpolation", $Value: Enum_TransitionImagesMulti_interpolation },
    Enum_TransitionImagesMulti_transition_type: { $Name: "Enum_TransitionImagesMulti_transition_type", $Value: Enum_TransitionImagesMulti_transition_type },
    Enum_TransitionImagesMulti_device: { $Name: "Enum_TransitionImagesMulti_device", $Value: Enum_TransitionImagesMulti_device },
    Enum_TransitionImagesInBatch_interpolation: { $Name: "Enum_TransitionImagesInBatch_interpolation", $Value: Enum_TransitionImagesInBatch_interpolation },
    Enum_TransitionImagesInBatch_transition_type: { $Name: "Enum_TransitionImagesInBatch_transition_type", $Value: Enum_TransitionImagesInBatch_transition_type },
    Enum_TransitionImagesInBatch_device: { $Name: "Enum_TransitionImagesInBatch_device", $Value: Enum_TransitionImagesInBatch_device },
    Enum_GenerateNoise_latent_channels: { $Name: "Enum_GenerateNoise_latent_channels", $Value: Enum_GenerateNoise_latent_channels },
    Enum_EmptyLatentImagePresets_dimensions: { $Name: "Enum_EmptyLatentImagePresets_dimensions", $Value: Enum_EmptyLatentImagePresets_dimensions },
    Enum_EmptyLatentImageCustomPresets_dimensions: { $Name: "Enum_EmptyLatentImageCustomPresets_dimensions", $Value: Enum_EmptyLatentImageCustomPresets_dimensions },
    Enum_SetShakkerLabsUnionControlNetType_type: { $Name: "Enum_SetShakkerLabsUnionControlNetType_type", $Value: Enum_SetShakkerLabsUnionControlNetType_type },
    Enum_NormalizedAmplitudeToMask_shape: { $Name: "Enum_NormalizedAmplitudeToMask_shape", $Value: Enum_NormalizedAmplitudeToMask_shape },
    Enum_NormalizedAmplitudeToMask_color: { $Name: "Enum_NormalizedAmplitudeToMask_color", $Value: Enum_NormalizedAmplitudeToMask_color },
    Enum_SplineEditor_sampling_method: { $Name: "Enum_SplineEditor_sampling_method", $Value: Enum_SplineEditor_sampling_method },
    Enum_SplineEditor_interpolation: { $Name: "Enum_SplineEditor_interpolation", $Value: Enum_SplineEditor_interpolation },
    Enum_SplineEditor_float_output_type: { $Name: "Enum_SplineEditor_float_output_type", $Value: Enum_SplineEditor_float_output_type },
    Enum_CreateShapeImageOnPath_shape: { $Name: "Enum_CreateShapeImageOnPath_shape", $Value: Enum_CreateShapeImageOnPath_shape },
    Enum_CreateShapeMaskOnPath_shape: { $Name: "Enum_CreateShapeMaskOnPath_shape", $Value: Enum_CreateShapeMaskOnPath_shape },
    Enum_CreateTextOnPath_font: { $Name: "Enum_CreateTextOnPath_font", $Value: Enum_CreateTextOnPath_font },
    Enum_CreateTextOnPath_alignment: { $Name: "Enum_CreateTextOnPath_alignment", $Value: Enum_CreateTextOnPath_alignment },
    Enum_WeightScheduleExtend_output_type: { $Name: "Enum_WeightScheduleExtend_output_type", $Value: Enum_WeightScheduleExtend_output_type },
    Enum_MaskOrImageToWeight_output_type: { $Name: "Enum_MaskOrImageToWeight_output_type", $Value: Enum_MaskOrImageToWeight_output_type },
    Enum_WeightScheduleConvert_output_type: { $Name: "Enum_WeightScheduleConvert_output_type", $Value: Enum_WeightScheduleConvert_output_type },
    Enum_PointsEditor_bbox_format: { $Name: "Enum_PointsEditor_bbox_format", $Value: Enum_PointsEditor_bbox_format },
    "Enum_StabilityAPI$_SD3_model": { $Name: "Enum_StabilityAPI$_SD3_model", $Value: Enum_StabilityAPI$_SD3_model },
    "Enum_StabilityAPI$_SD3_aspect_ratio": { $Name: "Enum_StabilityAPI$_SD3_aspect_ratio", $Value: Enum_StabilityAPI$_SD3_aspect_ratio },
    "Enum_StabilityAPI$_SD3_output_format": { $Name: "Enum_StabilityAPI$_SD3_output_format", $Value: Enum_StabilityAPI$_SD3_output_format },
    "Enum_StableZero123$_BatchSchedule_interpolation": { $Name: "Enum_StableZero123$_BatchSchedule_interpolation", $Value: Enum_StableZero123$_BatchSchedule_interpolation },
    "Enum_SV3D$_BatchSchedule_interpolation": { $Name: "Enum_SV3D$_BatchSchedule_interpolation", $Value: Enum_SV3D$_BatchSchedule_interpolation },
    Enum_LoadResAdapterNormalization_resadapter_path: { $Name: "Enum_LoadResAdapterNormalization_resadapter_path", $Value: Enum_LoadResAdapterNormalization_resadapter_path },
    "Enum_Intrinsic$_lora$_sampling_lora_name": { $Name: "Enum_Intrinsic$_lora$_sampling_lora_name", $Value: Enum_Intrinsic$_lora$_sampling_lora_name },
    "Enum_Intrinsic$_lora$_sampling_task": { $Name: "Enum_Intrinsic$_lora$_sampling_task", $Value: Enum_Intrinsic$_lora$_sampling_task },
    Enum_FluxBlockLoraLoader_lora_name: { $Name: "Enum_FluxBlockLoraLoader_lora_name", $Value: Enum_FluxBlockLoraLoader_lora_name },
    Enum_CheckpointLoaderKJ_ckpt_name: { $Name: "Enum_CheckpointLoaderKJ_ckpt_name", $Value: Enum_CheckpointLoaderKJ_ckpt_name },
    Enum_TorchCompileModelFluxAdvanced_backend: { $Name: "Enum_TorchCompileModelFluxAdvanced_backend", $Value: Enum_TorchCompileModelFluxAdvanced_backend },
    Enum_TorchCompileModelFluxAdvanced_mode: { $Name: "Enum_TorchCompileModelFluxAdvanced_mode", $Value: Enum_TorchCompileModelFluxAdvanced_mode },
    Enum_TorchCompileVAE_backend: { $Name: "Enum_TorchCompileVAE_backend", $Value: Enum_TorchCompileVAE_backend },
    Enum_TorchCompileVAE_mode: { $Name: "Enum_TorchCompileVAE_mode", $Value: Enum_TorchCompileVAE_mode },
    Enum_TorchCompileControlNet_backend: { $Name: "Enum_TorchCompileControlNet_backend", $Value: Enum_TorchCompileControlNet_backend },
    Enum_TorchCompileControlNet_mode: { $Name: "Enum_TorchCompileControlNet_mode", $Value: Enum_TorchCompileControlNet_mode },
    Enum_DrawInstanceDiffusionTracking_font: { $Name: "Enum_DrawInstanceDiffusionTracking_font", $Value: Enum_DrawInstanceDiffusionTracking_font },
    "Enum_Compare$7$$D83D$$DD2C_comparison": { $Name: "Enum_Compare$7$$D83D$$DD2C_comparison", $Value: Enum_Compare$7$$D83D$$DD2C_comparison },
    Enum_MarigoldModelLoader_model: { $Name: "Enum_MarigoldModelLoader_model", $Value: Enum_MarigoldModelLoader_model },
    "Enum_MarigoldDepthEstimation$_v2_scheduler": { $Name: "Enum_MarigoldDepthEstimation$_v2_scheduler", $Value: Enum_MarigoldDepthEstimation$_v2_scheduler },
    "Enum_MarigoldDepthEstimation$_v2$_video_scheduler": { $Name: "Enum_MarigoldDepthEstimation$_v2$_video_scheduler", $Value: Enum_MarigoldDepthEstimation$_v2$_video_scheduler },
    Enum_MarigoldDepthEstimation_reduction_method: { $Name: "Enum_MarigoldDepthEstimation_reduction_method", $Value: Enum_MarigoldDepthEstimation_reduction_method },
    Enum_MarigoldDepthEstimation_scheduler: { $Name: "Enum_MarigoldDepthEstimation_scheduler", $Value: Enum_MarigoldDepthEstimation_scheduler },
    Enum_MarigoldDepthEstimation_model: { $Name: "Enum_MarigoldDepthEstimation_model", $Value: Enum_MarigoldDepthEstimation_model },
    Enum_MarigoldDepthEstimationVideo_scheduler: { $Name: "Enum_MarigoldDepthEstimationVideo_scheduler", $Value: Enum_MarigoldDepthEstimationVideo_scheduler },
    Enum_MarigoldDepthEstimationVideo_dtype: { $Name: "Enum_MarigoldDepthEstimationVideo_dtype", $Value: Enum_MarigoldDepthEstimationVideo_dtype },
    Enum_MarigoldDepthEstimationVideo_model: { $Name: "Enum_MarigoldDepthEstimationVideo_model", $Value: Enum_MarigoldDepthEstimationVideo_model },
    Enum_ColorizeDepthmap_colorize_method: { $Name: "Enum_ColorizeDepthmap_colorize_method", $Value: Enum_ColorizeDepthmap_colorize_method },
    Enum_AppInfo_auto_save: { $Name: "Enum_AppInfo_auto_save", $Value: Enum_AppInfo_auto_save },
    Enum_RandomPrompt_random_sample: { $Name: "Enum_RandomPrompt_random_sample", $Value: Enum_RandomPrompt_random_sample },
    Enum_EmbeddingPrompt_embedding: { $Name: "Enum_EmbeddingPrompt_embedding", $Value: Enum_EmbeddingPrompt_embedding },
    "Enum_GLIGENTextBoxApply$_Advanced_random_shuffle": { $Name: "Enum_GLIGENTextBoxApply$_Advanced_random_shuffle", $Value: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle },
    Enum_Font_font: { $Name: "Enum_Font_font", $Value: Enum_Font_font },
    Enum_PromptImage_save_to_image: { $Name: "Enum_PromptImage_save_to_image", $Value: Enum_PromptImage_save_to_image },
    "Enum_SaveImageAndMetadata$__metadata": { $Name: "Enum_SaveImageAndMetadata$__metadata", $Value: Enum_SaveImageAndMetadata$__metadata },
    Enum_TransparentImage_invert: { $Name: "Enum_TransparentImage_invert", $Value: Enum_TransparentImage_invert },
    Enum_TransparentImage_save: { $Name: "Enum_TransparentImage_save", $Value: Enum_TransparentImage_save },
    Enum_ResizeImageMixlab_scale_option: { $Name: "Enum_ResizeImageMixlab_scale_option", $Value: Enum_ResizeImageMixlab_scale_option },
    Enum_ResizeImageMixlab_average_color: { $Name: "Enum_ResizeImageMixlab_average_color", $Value: Enum_ResizeImageMixlab_average_color },
    Enum_LoadImagesFromPath_white_bg: { $Name: "Enum_LoadImagesFromPath_white_bg", $Value: Enum_LoadImagesFromPath_white_bg },
    Enum_LoadImagesFromPath_sort_by: { $Name: "Enum_LoadImagesFromPath_sort_by", $Value: Enum_LoadImagesFromPath_sort_by },
    Enum_LoadImagesFromPath_watcher: { $Name: "Enum_LoadImagesFromPath_watcher", $Value: Enum_LoadImagesFromPath_watcher },
    Enum_TextImage_font: { $Name: "Enum_TextImage_font", $Value: Enum_TextImage_font },
    Enum_ShowLayer_scale_option: { $Name: "Enum_ShowLayer_scale_option", $Value: Enum_ShowLayer_scale_option },
    Enum_NewLayer_scale_option: { $Name: "Enum_NewLayer_scale_option", $Value: Enum_NewLayer_scale_option },
    "Enum_CompositeImages$__position": { $Name: "Enum_CompositeImages$__position", $Value: Enum_CompositeImages$__position },
    Enum_TextToNumber_random_number: { $Name: "Enum_TextToNumber_random_number", $Value: Enum_TextToNumber_random_number },
    Enum_JoinWithDelimiter_delimiter: { $Name: "Enum_JoinWithDelimiter_delimiter", $Value: Enum_JoinWithDelimiter_delimiter },
    Enum_DynamicDelayProcessor_replace_output: { $Name: "Enum_DynamicDelayProcessor_replace_output", $Value: Enum_DynamicDelayProcessor_replace_output },
    Enum_SwitchByIndex_flat: { $Name: "Enum_SwitchByIndex_flat", $Value: Enum_SwitchByIndex_flat },
    "Enum_StyleAlignedReferenceSampler$__share_norm": { $Name: "Enum_StyleAlignedReferenceSampler$__share_norm", $Value: Enum_StyleAlignedReferenceSampler$__share_norm },
    "Enum_StyleAlignedReferenceSampler$__share_attn": { $Name: "Enum_StyleAlignedReferenceSampler$__share_attn", $Value: Enum_StyleAlignedReferenceSampler$__share_attn },
    "Enum_StyleAlignedReferenceSampler$__scheduler": { $Name: "Enum_StyleAlignedReferenceSampler$__scheduler", $Value: Enum_StyleAlignedReferenceSampler$__scheduler },
    INVALID_null: { $Name: "INVALID_null", $Value: INVALID_null },
    "Enum_StyleAlignedBatchAlign$__share_norm": { $Name: "Enum_StyleAlignedBatchAlign$__share_norm", $Value: Enum_StyleAlignedBatchAlign$__share_norm },
    "Enum_StyleAlignedBatchAlign$__share_attn": { $Name: "Enum_StyleAlignedBatchAlign$__share_attn", $Value: Enum_StyleAlignedBatchAlign$__share_attn },
    Enum_ChatGPTOpenAI_model: { $Name: "Enum_ChatGPTOpenAI_model", $Value: Enum_ChatGPTOpenAI_model },
    Enum_ChatGPTOpenAI_api_url: { $Name: "Enum_ChatGPTOpenAI_api_url", $Value: Enum_ChatGPTOpenAI_api_url },
    Enum_SiliconflowLLM_model: { $Name: "Enum_SiliconflowLLM_model", $Value: Enum_SiliconflowLLM_model },
    Enum_SiliconflowTextToImageNode_model: { $Name: "Enum_SiliconflowTextToImageNode_model", $Value: Enum_SiliconflowTextToImageNode_model },
    Enum_SimulateDevDesignDiscussions_model: { $Name: "Enum_SimulateDevDesignDiscussions_model", $Value: Enum_SimulateDevDesignDiscussions_model },
    Enum_SimulateDevDesignDiscussions_api_url: { $Name: "Enum_SimulateDevDesignDiscussions_api_url", $Value: Enum_SimulateDevDesignDiscussions_api_url },
    Enum_ClipInterrogator_prompt_mode: { $Name: "Enum_ClipInterrogator_prompt_mode", $Value: Enum_ClipInterrogator_prompt_mode },
    Enum_ClipInterrogator_image_analysis: { $Name: "Enum_ClipInterrogator_image_analysis", $Value: Enum_ClipInterrogator_image_analysis },
    "Enum_PromptGenerate$_Mix_multiple": { $Name: "Enum_PromptGenerate$_Mix_multiple", $Value: Enum_PromptGenerate$_Mix_multiple },
    "Enum_ChinesePrompt$_Mix_generation": { $Name: "Enum_ChinesePrompt$_Mix_generation", $Value: Enum_ChinesePrompt$_Mix_generation },
    "Enum_RembgNode$_Mix_model_name": { $Name: "Enum_RembgNode$_Mix_model_name", $Value: Enum_RembgNode$_Mix_model_name },
    "Enum_LoadVideoAndSegment$__video": { $Name: "Enum_LoadVideoAndSegment$__video", $Value: Enum_LoadVideoAndSegment$__video },
    "Enum_VideoCombine$_Adv_format": { $Name: "Enum_VideoCombine$_Adv_format", $Value: Enum_VideoCombine$_Adv_format },
    "Enum_TripoSRSampler$__device": { $Name: "Enum_TripoSRSampler$__device", $Value: Enum_TripoSRSampler$__device },
    "Enum_ScenedetectNode$__video": { $Name: "Enum_ScenedetectNode$__video", $Value: Enum_ScenedetectNode$__video },
    Enum_SenseVoiceNode_device: { $Name: "Enum_SenseVoiceNode_device", $Value: Enum_SenseVoiceNode_device },
    Enum_SenseVoiceNode_language: { $Name: "Enum_SenseVoiceNode_language", $Value: Enum_SenseVoiceNode_language },
    Enum_VideoGenKlingNode_duration: { $Name: "Enum_VideoGenKlingNode_duration", $Value: Enum_VideoGenKlingNode_duration },
    Enum_VideoGenKlingNode_aspect_ratio: { $Name: "Enum_VideoGenKlingNode_aspect_ratio", $Value: Enum_VideoGenKlingNode_aspect_ratio },
    Enum_VideoGenKlingNode_mode: { $Name: "Enum_VideoGenKlingNode_mode", $Value: Enum_VideoGenKlingNode_mode },
    Enum_VideoGenRunwayGen3Node_duration: { $Name: "Enum_VideoGenRunwayGen3Node_duration", $Value: Enum_VideoGenRunwayGen3Node_duration },
    Enum_VideoGenRunwayGen3Node_aspect_ratio: { $Name: "Enum_VideoGenRunwayGen3Node_aspect_ratio", $Value: Enum_VideoGenRunwayGen3Node_aspect_ratio },
    Enum_VideoGenLumaDreamMachineNode_aspect_ratio: { $Name: "Enum_VideoGenLumaDreamMachineNode_aspect_ratio", $Value: Enum_VideoGenLumaDreamMachineNode_aspect_ratio },
    Enum_LoadVideoFromURL_force_size: { $Name: "Enum_LoadVideoFromURL_force_size", $Value: Enum_LoadVideoFromURL_force_size },
    "Enum_ChatGPT_Simple_$_O_model": { $Name: "Enum_ChatGPT_Simple_$_O_model", $Value: Enum_ChatGPT_Simple_$_O_model },
    "Enum_ChatGPT_Simple_$_O_behaviour": { $Name: "Enum_ChatGPT_Simple_$_O_behaviour", $Value: Enum_ChatGPT_Simple_$_O_behaviour },
    "Enum_ChatGPT_compact_$_O_model": { $Name: "Enum_ChatGPT_compact_$_O_model", $Value: Enum_ChatGPT_compact_$_O_model },
    "Enum_Chat$_Message_$_O_role": { $Name: "Enum_Chat$_Message_$_O_role", $Value: Enum_Chat$_Message_$_O_role },
    "Enum_Chat_completion_$_O_model": { $Name: "Enum_Chat_completion_$_O_model", $Value: Enum_Chat_completion_$_O_model },
    "Enum_create_image_$_O_size": { $Name: "Enum_create_image_$_O_size", $Value: Enum_create_image_$_O_size },
    "Enum_variation$_image_$_O_size": { $Name: "Enum_variation$_image_$_O_size", $Value: Enum_variation$_image_$_O_size },
    "Enum_LatentUpscaleFactor_$_O_upscale_method": { $Name: "Enum_LatentUpscaleFactor_$_O_upscale_method", $Value: Enum_LatentUpscaleFactor_$_O_upscale_method },
    "Enum_LatentUpscaleFactor_$_O_crop": { $Name: "Enum_LatentUpscaleFactor_$_O_crop", $Value: Enum_LatentUpscaleFactor_$_O_crop },
    "Enum_LatentUpscaleFactorSimple_$_O_upscale_method": { $Name: "Enum_LatentUpscaleFactorSimple_$_O_upscale_method", $Value: Enum_LatentUpscaleFactorSimple_$_O_upscale_method },
    "Enum_LatentUpscaleFactorSimple_$_O_crop": { $Name: "Enum_LatentUpscaleFactorSimple_$_O_crop", $Value: Enum_LatentUpscaleFactorSimple_$_O_crop },
    "Enum_RandomNSP_$_O_terminology": { $Name: "Enum_RandomNSP_$_O_terminology", $Value: Enum_RandomNSP_$_O_terminology },
    "Enum_ConcatRandomNSP$_O_terminology": { $Name: "Enum_ConcatRandomNSP$_O_terminology", $Value: Enum_ConcatRandomNSP$_O_terminology },
    "Enum_saveTextToFile_$_O_append": { $Name: "Enum_saveTextToFile_$_O_append", $Value: Enum_saveTextToFile_$_O_append },
    "Enum_Text2Image_$_O_font": { $Name: "Enum_Text2Image_$_O_font", $Value: Enum_Text2Image_$_O_font },
    "Enum_Text2Image_$_O_expand": { $Name: "Enum_Text2Image_$_O_expand", $Value: Enum_Text2Image_$_O_expand },
    "Enum_ImageScaleFactor_$_O_upscale_method": { $Name: "Enum_ImageScaleFactor_$_O_upscale_method", $Value: Enum_ImageScaleFactor_$_O_upscale_method },
    "Enum_ImageScaleFactor_$_O_MulOf46": { $Name: "Enum_ImageScaleFactor_$_O_MulOf46", $Value: Enum_ImageScaleFactor_$_O_MulOf46 },
    "Enum_ImageScaleFactor_$_O_crop": { $Name: "Enum_ImageScaleFactor_$_O_crop", $Value: Enum_ImageScaleFactor_$_O_crop },
    "Enum_ImageScaleFactorSimple_$_O_upscale_method": { $Name: "Enum_ImageScaleFactorSimple_$_O_upscale_method", $Value: Enum_ImageScaleFactorSimple_$_O_upscale_method },
    "Enum_ImageScaleFactorSimple_$_O_MulOf46": { $Name: "Enum_ImageScaleFactorSimple_$_O_MulOf46", $Value: Enum_ImageScaleFactorSimple_$_O_MulOf46 },
    "Enum_ImageScaleFactorSimple_$_O_crop": { $Name: "Enum_ImageScaleFactorSimple_$_O_crop", $Value: Enum_ImageScaleFactorSimple_$_O_crop },
    "Enum_Chat$_Message$_fromString_$_O_role": { $Name: "Enum_Chat$_Message$_fromString_$_O_role", $Value: Enum_Chat$_Message$_fromString_$_O_role },
    "Enum_create$_image_$_O_size": { $Name: "Enum_create$_image_$_O_size", $Value: Enum_create$_image_$_O_size },
    Enum_LatentUpscaleMultiply_upscale_method: { $Name: "Enum_LatentUpscaleMultiply_upscale_method", $Value: Enum_LatentUpscaleMultiply_upscale_method },
    Enum_LatentUpscaleMultiply_crop: { $Name: "Enum_LatentUpscaleMultiply_crop", $Value: Enum_LatentUpscaleMultiply_crop },
    Enum_DownloadAndLoadSAM2Model_model: { $Name: "Enum_DownloadAndLoadSAM2Model_model", $Value: Enum_DownloadAndLoadSAM2Model_model },
    Enum_DownloadAndLoadSAM2Model_segmentor: { $Name: "Enum_DownloadAndLoadSAM2Model_segmentor", $Value: Enum_DownloadAndLoadSAM2Model_segmentor },
    Enum_DownloadAndLoadSAM2Model_device: { $Name: "Enum_DownloadAndLoadSAM2Model_device", $Value: Enum_DownloadAndLoadSAM2Model_device },
    Enum_DownloadAndLoadSAM2Model_precision: { $Name: "Enum_DownloadAndLoadSAM2Model_precision", $Value: Enum_DownloadAndLoadSAM2Model_precision },
    "Enum_BNK$_CLIPTextEncodeAdvanced_token_normalization": { $Name: "Enum_BNK$_CLIPTextEncodeAdvanced_token_normalization", $Value: Enum_BNK$_CLIPTextEncodeAdvanced_token_normalization },
    "Enum_BNK$_CLIPTextEncodeAdvanced_weight_interpretation": { $Name: "Enum_BNK$_CLIPTextEncodeAdvanced_weight_interpretation", $Value: Enum_BNK$_CLIPTextEncodeAdvanced_weight_interpretation },
    "Enum_BNK$_CLIPTextEncodeSDXLAdvanced_token_normalization": { $Name: "Enum_BNK$_CLIPTextEncodeSDXLAdvanced_token_normalization", $Value: Enum_BNK$_CLIPTextEncodeSDXLAdvanced_token_normalization },
    "Enum_BNK$_CLIPTextEncodeSDXLAdvanced_weight_interpretation": { $Name: "Enum_BNK$_CLIPTextEncodeSDXLAdvanced_weight_interpretation", $Value: Enum_BNK$_CLIPTextEncodeSDXLAdvanced_weight_interpretation },
    Enum_CR_Image_Output_output_type: { $Name: "Enum_CR_Image_Output_output_type", $Value: Enum_CR_Image_Output_output_type },
    Enum_CR_Image_Output_prefix_presets: { $Name: "Enum_CR_Image_Output_prefix_presets", $Value: Enum_CR_Image_Output_prefix_presets },
    Enum_CR_Image_Output_file_format: { $Name: "Enum_CR_Image_Output_file_format", $Value: Enum_CR_Image_Output_file_format },
    Enum_CR_Conditioning_Mixer_mix_method: { $Name: "Enum_CR_Conditioning_Mixer_mix_method", $Value: Enum_CR_Conditioning_Mixer_mix_method },
    Enum_CR_Select_Model_ckpt_name1: { $Name: "Enum_CR_Select_Model_ckpt_name1", $Value: Enum_CR_Select_Model_ckpt_name1 },
    Enum_CR_Select_Model_ckpt_name2: { $Name: "Enum_CR_Select_Model_ckpt_name2", $Value: Enum_CR_Select_Model_ckpt_name2 },
    Enum_CR_Select_Model_ckpt_name3: { $Name: "Enum_CR_Select_Model_ckpt_name3", $Value: Enum_CR_Select_Model_ckpt_name3 },
    Enum_CR_Select_Model_ckpt_name4: { $Name: "Enum_CR_Select_Model_ckpt_name4", $Value: Enum_CR_Select_Model_ckpt_name4 },
    Enum_CR_Select_Model_ckpt_name5: { $Name: "Enum_CR_Select_Model_ckpt_name5", $Value: Enum_CR_Select_Model_ckpt_name5 },
    Enum_CR_Float_Range_List_operation: { $Name: "Enum_CR_Float_Range_List_operation", $Value: Enum_CR_Float_Range_List_operation },
    Enum_CR_Load_Text_List_file_extension: { $Name: "Enum_CR_Load_Text_List_file_extension", $Value: Enum_CR_Load_Text_List_file_extension },
    Enum_CR_Load_Image_List_input_folder: { $Name: "Enum_CR_Load_Image_List_input_folder", $Value: Enum_CR_Load_Image_List_input_folder },
    Enum_CR_Load_Image_List_Plus_input_folder: { $Name: "Enum_CR_Load_Image_List_Plus_input_folder", $Value: Enum_CR_Load_Image_List_Plus_input_folder },
    Enum_CR_Load_GIF_As_List_input_folder: { $Name: "Enum_CR_Load_GIF_As_List_input_folder", $Value: Enum_CR_Load_GIF_As_List_input_folder },
    Enum_CR_Font_File_List_source_folder: { $Name: "Enum_CR_Font_File_List_source_folder", $Value: Enum_CR_Font_File_List_source_folder },
    "Enum_CR_SD1$55_Aspect_Ratio_aspect_ratio": { $Name: "Enum_CR_SD1$55_Aspect_Ratio_aspect_ratio", $Value: Enum_CR_SD1$55_Aspect_Ratio_aspect_ratio },
    "Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions": { $Name: "Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions", $Value: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions },
    Enum_CR_SDXL_Aspect_Ratio_aspect_ratio: { $Name: "Enum_CR_SDXL_Aspect_Ratio_aspect_ratio", $Value: Enum_CR_SDXL_Aspect_Ratio_aspect_ratio },
    Enum_CR_SDXL_Aspect_Ratio_swap_dimensions: { $Name: "Enum_CR_SDXL_Aspect_Ratio_swap_dimensions", $Value: Enum_CR_SDXL_Aspect_Ratio_swap_dimensions },
    Enum_CR_Aspect_Ratio_aspect_ratio: { $Name: "Enum_CR_Aspect_Ratio_aspect_ratio", $Value: Enum_CR_Aspect_Ratio_aspect_ratio },
    Enum_CR_Aspect_Ratio_swap_dimensions: { $Name: "Enum_CR_Aspect_Ratio_swap_dimensions", $Value: Enum_CR_Aspect_Ratio_swap_dimensions },
    Enum_CR_Aspect_Ratio_Banners_aspect_ratio: { $Name: "Enum_CR_Aspect_Ratio_Banners_aspect_ratio", $Value: Enum_CR_Aspect_Ratio_Banners_aspect_ratio },
    Enum_CR_Aspect_Ratio_Banners_swap_dimensions: { $Name: "Enum_CR_Aspect_Ratio_Banners_swap_dimensions", $Value: Enum_CR_Aspect_Ratio_Banners_swap_dimensions },
    Enum_CR_Aspect_Ratio_Social_Media_aspect_ratio: { $Name: "Enum_CR_Aspect_Ratio_Social_Media_aspect_ratio", $Value: Enum_CR_Aspect_Ratio_Social_Media_aspect_ratio },
    Enum_CR_Aspect_Ratio_Social_Media_swap_dimensions: { $Name: "Enum_CR_Aspect_Ratio_Social_Media_swap_dimensions", $Value: Enum_CR_Aspect_Ratio_Social_Media_swap_dimensions },
    "Enum_CR$_Aspect_Ratio_For_Print_aspect_ratio": { $Name: "Enum_CR$_Aspect_Ratio_For_Print_aspect_ratio", $Value: Enum_CR$_Aspect_Ratio_For_Print_aspect_ratio },
    "Enum_CR$_Aspect_Ratio_For_Print_swap_dimensions": { $Name: "Enum_CR$_Aspect_Ratio_For_Print_swap_dimensions", $Value: Enum_CR$_Aspect_Ratio_For_Print_swap_dimensions },
    Enum_CR_Aspect_Ratio_SDXL_aspect_ratio: { $Name: "Enum_CR_Aspect_Ratio_SDXL_aspect_ratio", $Value: Enum_CR_Aspect_Ratio_SDXL_aspect_ratio },
    Enum_CR_Aspect_Ratio_SDXL_swap_dimensions: { $Name: "Enum_CR_Aspect_Ratio_SDXL_swap_dimensions", $Value: Enum_CR_Aspect_Ratio_SDXL_swap_dimensions },
    Enum_CR_SDXL_Prompt_Mixer_preset: { $Name: "Enum_CR_SDXL_Prompt_Mixer_preset", $Value: Enum_CR_SDXL_Prompt_Mixer_preset },
    Enum_CR_Apply_ControlNet_switch: { $Name: "Enum_CR_Apply_ControlNet_switch", $Value: Enum_CR_Apply_ControlNet_switch },
    "Enum_CR_Multi$7ControlNet_Stack_switch_1": { $Name: "Enum_CR_Multi$7ControlNet_Stack_switch_1", $Value: Enum_CR_Multi$7ControlNet_Stack_switch_1 },
    "Enum_CR_Multi$7ControlNet_Stack_controlnet_1": { $Name: "Enum_CR_Multi$7ControlNet_Stack_controlnet_1", $Value: Enum_CR_Multi$7ControlNet_Stack_controlnet_1 },
    "Enum_CR_Multi$7ControlNet_Stack_switch_2": { $Name: "Enum_CR_Multi$7ControlNet_Stack_switch_2", $Value: Enum_CR_Multi$7ControlNet_Stack_switch_2 },
    "Enum_CR_Multi$7ControlNet_Stack_controlnet_2": { $Name: "Enum_CR_Multi$7ControlNet_Stack_controlnet_2", $Value: Enum_CR_Multi$7ControlNet_Stack_controlnet_2 },
    "Enum_CR_Multi$7ControlNet_Stack_switch_3": { $Name: "Enum_CR_Multi$7ControlNet_Stack_switch_3", $Value: Enum_CR_Multi$7ControlNet_Stack_switch_3 },
    "Enum_CR_Multi$7ControlNet_Stack_controlnet_3": { $Name: "Enum_CR_Multi$7ControlNet_Stack_controlnet_3", $Value: Enum_CR_Multi$7ControlNet_Stack_controlnet_3 },
    "Enum_CR_Apply_Multi$7ControlNet_switch": { $Name: "Enum_CR_Apply_Multi$7ControlNet_switch", $Value: Enum_CR_Apply_Multi$7ControlNet_switch },
    Enum_CR_Load_LoRA_switch: { $Name: "Enum_CR_Load_LoRA_switch", $Value: Enum_CR_Load_LoRA_switch },
    Enum_CR_Load_LoRA_lora_name: { $Name: "Enum_CR_Load_LoRA_lora_name", $Value: Enum_CR_Load_LoRA_lora_name },
    Enum_CR_LoRA_Stack_switch_1: { $Name: "Enum_CR_LoRA_Stack_switch_1", $Value: Enum_CR_LoRA_Stack_switch_1 },
    Enum_CR_LoRA_Stack_lora_name_1: { $Name: "Enum_CR_LoRA_Stack_lora_name_1", $Value: Enum_CR_LoRA_Stack_lora_name_1 },
    Enum_CR_LoRA_Stack_switch_2: { $Name: "Enum_CR_LoRA_Stack_switch_2", $Value: Enum_CR_LoRA_Stack_switch_2 },
    Enum_CR_LoRA_Stack_lora_name_2: { $Name: "Enum_CR_LoRA_Stack_lora_name_2", $Value: Enum_CR_LoRA_Stack_lora_name_2 },
    Enum_CR_LoRA_Stack_switch_3: { $Name: "Enum_CR_LoRA_Stack_switch_3", $Value: Enum_CR_LoRA_Stack_switch_3 },
    Enum_CR_LoRA_Stack_lora_name_3: { $Name: "Enum_CR_LoRA_Stack_lora_name_3", $Value: Enum_CR_LoRA_Stack_lora_name_3 },
    Enum_CR_Random_LoRA_Stack_exclusive_mode: { $Name: "Enum_CR_Random_LoRA_Stack_exclusive_mode", $Value: Enum_CR_Random_LoRA_Stack_exclusive_mode },
    Enum_CR_Random_LoRA_Stack_force_randomize_after_stride: { $Name: "Enum_CR_Random_LoRA_Stack_force_randomize_after_stride", $Value: Enum_CR_Random_LoRA_Stack_force_randomize_after_stride },
    Enum_CR_Random_LoRA_Stack_lora_name_1: { $Name: "Enum_CR_Random_LoRA_Stack_lora_name_1", $Value: Enum_CR_Random_LoRA_Stack_lora_name_1 },
    Enum_CR_Random_LoRA_Stack_switch_1: { $Name: "Enum_CR_Random_LoRA_Stack_switch_1", $Value: Enum_CR_Random_LoRA_Stack_switch_1 },
    Enum_CR_Random_LoRA_Stack_lora_name_2: { $Name: "Enum_CR_Random_LoRA_Stack_lora_name_2", $Value: Enum_CR_Random_LoRA_Stack_lora_name_2 },
    Enum_CR_Random_LoRA_Stack_switch_2: { $Name: "Enum_CR_Random_LoRA_Stack_switch_2", $Value: Enum_CR_Random_LoRA_Stack_switch_2 },
    Enum_CR_Random_LoRA_Stack_lora_name_3: { $Name: "Enum_CR_Random_LoRA_Stack_lora_name_3", $Value: Enum_CR_Random_LoRA_Stack_lora_name_3 },
    Enum_CR_Random_LoRA_Stack_switch_3: { $Name: "Enum_CR_Random_LoRA_Stack_switch_3", $Value: Enum_CR_Random_LoRA_Stack_switch_3 },
    Enum_CR_Random_Weight_LoRA_force_randomize_after_stride: { $Name: "Enum_CR_Random_Weight_LoRA_force_randomize_after_stride", $Value: Enum_CR_Random_Weight_LoRA_force_randomize_after_stride },
    Enum_CR_Random_Weight_LoRA_lora_name: { $Name: "Enum_CR_Random_Weight_LoRA_lora_name", $Value: Enum_CR_Random_Weight_LoRA_lora_name },
    Enum_CR_Random_Weight_LoRA_switch: { $Name: "Enum_CR_Random_Weight_LoRA_switch", $Value: Enum_CR_Random_Weight_LoRA_switch },
    Enum_CR_Apply_Model_Merge_merge_method: { $Name: "Enum_CR_Apply_Model_Merge_merge_method", $Value: Enum_CR_Apply_Model_Merge_merge_method },
    Enum_CR_Apply_Model_Merge_normalise_ratios: { $Name: "Enum_CR_Apply_Model_Merge_normalise_ratios", $Value: Enum_CR_Apply_Model_Merge_normalise_ratios },
    Enum_CR_Model_Merge_Stack_switch_1: { $Name: "Enum_CR_Model_Merge_Stack_switch_1", $Value: Enum_CR_Model_Merge_Stack_switch_1 },
    Enum_CR_Model_Merge_Stack_ckpt_name1: { $Name: "Enum_CR_Model_Merge_Stack_ckpt_name1", $Value: Enum_CR_Model_Merge_Stack_ckpt_name1 },
    Enum_CR_Model_Merge_Stack_switch_2: { $Name: "Enum_CR_Model_Merge_Stack_switch_2", $Value: Enum_CR_Model_Merge_Stack_switch_2 },
    Enum_CR_Model_Merge_Stack_ckpt_name2: { $Name: "Enum_CR_Model_Merge_Stack_ckpt_name2", $Value: Enum_CR_Model_Merge_Stack_ckpt_name2 },
    Enum_CR_Model_Merge_Stack_switch_3: { $Name: "Enum_CR_Model_Merge_Stack_switch_3", $Value: Enum_CR_Model_Merge_Stack_switch_3 },
    Enum_CR_Model_Merge_Stack_ckpt_name3: { $Name: "Enum_CR_Model_Merge_Stack_ckpt_name3", $Value: Enum_CR_Model_Merge_Stack_ckpt_name3 },
    Enum_CR_SDXL_Prompt_Mix_Presets_preset: { $Name: "Enum_CR_SDXL_Prompt_Mix_Presets_preset", $Value: Enum_CR_SDXL_Prompt_Mix_Presets_preset },
    Enum_CR_SDXL_Base_Prompt_Encoder_preset: { $Name: "Enum_CR_SDXL_Base_Prompt_Encoder_preset", $Value: Enum_CR_SDXL_Base_Prompt_Encoder_preset },
    Enum_CR_Multi_Upscale_Stack_switch_1: { $Name: "Enum_CR_Multi_Upscale_Stack_switch_1", $Value: Enum_CR_Multi_Upscale_Stack_switch_1 },
    Enum_CR_Multi_Upscale_Stack_upscale_model_1: { $Name: "Enum_CR_Multi_Upscale_Stack_upscale_model_1", $Value: Enum_CR_Multi_Upscale_Stack_upscale_model_1 },
    Enum_CR_Multi_Upscale_Stack_switch_2: { $Name: "Enum_CR_Multi_Upscale_Stack_switch_2", $Value: Enum_CR_Multi_Upscale_Stack_switch_2 },
    Enum_CR_Multi_Upscale_Stack_upscale_model_2: { $Name: "Enum_CR_Multi_Upscale_Stack_upscale_model_2", $Value: Enum_CR_Multi_Upscale_Stack_upscale_model_2 },
    Enum_CR_Multi_Upscale_Stack_switch_3: { $Name: "Enum_CR_Multi_Upscale_Stack_switch_3", $Value: Enum_CR_Multi_Upscale_Stack_switch_3 },
    Enum_CR_Multi_Upscale_Stack_upscale_model_3: { $Name: "Enum_CR_Multi_Upscale_Stack_upscale_model_3", $Value: Enum_CR_Multi_Upscale_Stack_upscale_model_3 },
    Enum_CR_Upscale_Image_upscale_model: { $Name: "Enum_CR_Upscale_Image_upscale_model", $Value: Enum_CR_Upscale_Image_upscale_model },
    Enum_CR_Upscale_Image_mode: { $Name: "Enum_CR_Upscale_Image_mode", $Value: Enum_CR_Upscale_Image_mode },
    Enum_CR_Upscale_Image_resampling_method: { $Name: "Enum_CR_Upscale_Image_resampling_method", $Value: Enum_CR_Upscale_Image_resampling_method },
    Enum_CR_Upscale_Image_supersample: { $Name: "Enum_CR_Upscale_Image_supersample", $Value: Enum_CR_Upscale_Image_supersample },
    Enum_CR_Apply_Multi_Upscale_resampling_method: { $Name: "Enum_CR_Apply_Multi_Upscale_resampling_method", $Value: Enum_CR_Apply_Multi_Upscale_resampling_method },
    Enum_CR_Apply_Multi_Upscale_supersample: { $Name: "Enum_CR_Apply_Multi_Upscale_supersample", $Value: Enum_CR_Apply_Multi_Upscale_supersample },
    Enum_CR_XY_Interpolate_gradient_profile: { $Name: "Enum_CR_XY_Interpolate_gradient_profile", $Value: Enum_CR_XY_Interpolate_gradient_profile },
    Enum_CR_XY_From_Folder_image_folder: { $Name: "Enum_CR_XY_From_Folder_image_folder", $Value: Enum_CR_XY_From_Folder_image_folder },
    Enum_CR_XY_Save_Grid_Image_mode: { $Name: "Enum_CR_XY_Save_Grid_Image_mode", $Value: Enum_CR_XY_Save_Grid_Image_mode },
    Enum_CR_XY_Save_Grid_Image_output_folder: { $Name: "Enum_CR_XY_Save_Grid_Image_output_folder", $Value: Enum_CR_XY_Save_Grid_Image_output_folder },
    Enum_CR_XY_Save_Grid_Image_file_format: { $Name: "Enum_CR_XY_Save_Grid_Image_file_format", $Value: Enum_CR_XY_Save_Grid_Image_file_format },
    Enum_CR_Halftone_Grid_dot_style: { $Name: "Enum_CR_Halftone_Grid_dot_style", $Value: Enum_CR_Halftone_Grid_dot_style },
    Enum_CR_Halftone_Grid_reverse_dot_style: { $Name: "Enum_CR_Halftone_Grid_reverse_dot_style", $Value: Enum_CR_Halftone_Grid_reverse_dot_style },
    Enum_CR_Halftone_Grid_background_color: { $Name: "Enum_CR_Halftone_Grid_background_color", $Value: Enum_CR_Halftone_Grid_background_color },
    Enum_CR_Color_Bars_mode: { $Name: "Enum_CR_Color_Bars_mode", $Value: Enum_CR_Color_Bars_mode },
    Enum_CR_Color_Bars_color_1: { $Name: "Enum_CR_Color_Bars_color_1", $Value: Enum_CR_Color_Bars_color_1 },
    Enum_CR_Color_Bars_color_2: { $Name: "Enum_CR_Color_Bars_color_2", $Value: Enum_CR_Color_Bars_color_2 },
    Enum_CR_Color_Bars_orientation: { $Name: "Enum_CR_Color_Bars_orientation", $Value: Enum_CR_Color_Bars_orientation },
    Enum_CR_Style_Bars_mode: { $Name: "Enum_CR_Style_Bars_mode", $Value: Enum_CR_Style_Bars_mode },
    Enum_CR_Style_Bars_bar_style: { $Name: "Enum_CR_Style_Bars_bar_style", $Value: Enum_CR_Style_Bars_bar_style },
    Enum_CR_Style_Bars_orientation: { $Name: "Enum_CR_Style_Bars_orientation", $Value: Enum_CR_Style_Bars_orientation },
    Enum_CR_Checker_Pattern_mode: { $Name: "Enum_CR_Checker_Pattern_mode", $Value: Enum_CR_Checker_Pattern_mode },
    Enum_CR_Checker_Pattern_color_1: { $Name: "Enum_CR_Checker_Pattern_color_1", $Value: Enum_CR_Checker_Pattern_color_1 },
    Enum_CR_Checker_Pattern_color_2: { $Name: "Enum_CR_Checker_Pattern_color_2", $Value: Enum_CR_Checker_Pattern_color_2 },
    Enum_CR_Polygons_mode: { $Name: "Enum_CR_Polygons_mode", $Value: Enum_CR_Polygons_mode },
    Enum_CR_Polygons_face_color: { $Name: "Enum_CR_Polygons_face_color", $Value: Enum_CR_Polygons_face_color },
    Enum_CR_Polygons_background_color: { $Name: "Enum_CR_Polygons_background_color", $Value: Enum_CR_Polygons_background_color },
    Enum_CR_Polygons_line_color: { $Name: "Enum_CR_Polygons_line_color", $Value: Enum_CR_Polygons_line_color },
    Enum_CR_Color_Gradient_start_color: { $Name: "Enum_CR_Color_Gradient_start_color", $Value: Enum_CR_Color_Gradient_start_color },
    Enum_CR_Color_Gradient_end_color: { $Name: "Enum_CR_Color_Gradient_end_color", $Value: Enum_CR_Color_Gradient_end_color },
    Enum_CR_Color_Gradient_orientation: { $Name: "Enum_CR_Color_Gradient_orientation", $Value: Enum_CR_Color_Gradient_orientation },
    Enum_CR_Radial_Gradient_start_color: { $Name: "Enum_CR_Radial_Gradient_start_color", $Value: Enum_CR_Radial_Gradient_start_color },
    Enum_CR_Radial_Gradient_end_color: { $Name: "Enum_CR_Radial_Gradient_end_color", $Value: Enum_CR_Radial_Gradient_end_color },
    Enum_CR_Starburst_Lines_line_color: { $Name: "Enum_CR_Starburst_Lines_line_color", $Value: Enum_CR_Starburst_Lines_line_color },
    Enum_CR_Starburst_Lines_background_color: { $Name: "Enum_CR_Starburst_Lines_background_color", $Value: Enum_CR_Starburst_Lines_background_color },
    Enum_CR_Starburst_Colors_color_1: { $Name: "Enum_CR_Starburst_Colors_color_1", $Value: Enum_CR_Starburst_Colors_color_1 },
    Enum_CR_Starburst_Colors_color_2: { $Name: "Enum_CR_Starburst_Colors_color_2", $Value: Enum_CR_Starburst_Colors_color_2 },
    Enum_CR_Binary_Pattern_background_color: { $Name: "Enum_CR_Binary_Pattern_background_color", $Value: Enum_CR_Binary_Pattern_background_color },
    Enum_CR_Binary_Pattern_color_0: { $Name: "Enum_CR_Binary_Pattern_color_0", $Value: Enum_CR_Binary_Pattern_color_0 },
    Enum_CR_Binary_Pattern_color_1: { $Name: "Enum_CR_Binary_Pattern_color_1", $Value: Enum_CR_Binary_Pattern_color_1 },
    Enum_CR_Binary_Pattern_outline_color: { $Name: "Enum_CR_Binary_Pattern_outline_color", $Value: Enum_CR_Binary_Pattern_outline_color },
    Enum_CR_Draw_Shape_shape: { $Name: "Enum_CR_Draw_Shape_shape", $Value: Enum_CR_Draw_Shape_shape },
    Enum_CR_Draw_Shape_shape_color: { $Name: "Enum_CR_Draw_Shape_shape_color", $Value: Enum_CR_Draw_Shape_shape_color },
    Enum_CR_Draw_Shape_back_color: { $Name: "Enum_CR_Draw_Shape_back_color", $Value: Enum_CR_Draw_Shape_back_color },
    Enum_CR_Draw_Pie_shape_color: { $Name: "Enum_CR_Draw_Pie_shape_color", $Value: Enum_CR_Draw_Pie_shape_color },
    Enum_CR_Draw_Pie_back_color: { $Name: "Enum_CR_Draw_Pie_back_color", $Value: Enum_CR_Draw_Pie_back_color },
    Enum_CR_Random_Shape_Pattern_color1: { $Name: "Enum_CR_Random_Shape_Pattern_color1", $Value: Enum_CR_Random_Shape_Pattern_color1 },
    Enum_CR_Random_Shape_Pattern_color2: { $Name: "Enum_CR_Random_Shape_Pattern_color2", $Value: Enum_CR_Random_Shape_Pattern_color2 },
    Enum_CR_Overlay_Text_font_name: { $Name: "Enum_CR_Overlay_Text_font_name", $Value: Enum_CR_Overlay_Text_font_name },
    Enum_CR_Overlay_Text_font_color: { $Name: "Enum_CR_Overlay_Text_font_color", $Value: Enum_CR_Overlay_Text_font_color },
    Enum_CR_Overlay_Text_align: { $Name: "Enum_CR_Overlay_Text_align", $Value: Enum_CR_Overlay_Text_align },
    Enum_CR_Overlay_Text_justify: { $Name: "Enum_CR_Overlay_Text_justify", $Value: Enum_CR_Overlay_Text_justify },
    Enum_CR_Overlay_Text_rotation_options: { $Name: "Enum_CR_Overlay_Text_rotation_options", $Value: Enum_CR_Overlay_Text_rotation_options },
    Enum_CR_Draw_Text_font_name: { $Name: "Enum_CR_Draw_Text_font_name", $Value: Enum_CR_Draw_Text_font_name },
    Enum_CR_Draw_Text_font_color: { $Name: "Enum_CR_Draw_Text_font_color", $Value: Enum_CR_Draw_Text_font_color },
    Enum_CR_Draw_Text_background_color: { $Name: "Enum_CR_Draw_Text_background_color", $Value: Enum_CR_Draw_Text_background_color },
    Enum_CR_Draw_Text_align: { $Name: "Enum_CR_Draw_Text_align", $Value: Enum_CR_Draw_Text_align },
    Enum_CR_Draw_Text_justify: { $Name: "Enum_CR_Draw_Text_justify", $Value: Enum_CR_Draw_Text_justify },
    Enum_CR_Draw_Text_rotation_options: { $Name: "Enum_CR_Draw_Text_rotation_options", $Value: Enum_CR_Draw_Text_rotation_options },
    Enum_CR_Mask_Text_font_name: { $Name: "Enum_CR_Mask_Text_font_name", $Value: Enum_CR_Mask_Text_font_name },
    Enum_CR_Mask_Text_background_color: { $Name: "Enum_CR_Mask_Text_background_color", $Value: Enum_CR_Mask_Text_background_color },
    Enum_CR_Mask_Text_align: { $Name: "Enum_CR_Mask_Text_align", $Value: Enum_CR_Mask_Text_align },
    Enum_CR_Mask_Text_justify: { $Name: "Enum_CR_Mask_Text_justify", $Value: Enum_CR_Mask_Text_justify },
    Enum_CR_Mask_Text_rotation_options: { $Name: "Enum_CR_Mask_Text_rotation_options", $Value: Enum_CR_Mask_Text_rotation_options },
    Enum_CR_Composite_Text_font_name: { $Name: "Enum_CR_Composite_Text_font_name", $Value: Enum_CR_Composite_Text_font_name },
    Enum_CR_Composite_Text_align: { $Name: "Enum_CR_Composite_Text_align", $Value: Enum_CR_Composite_Text_align },
    Enum_CR_Composite_Text_justify: { $Name: "Enum_CR_Composite_Text_justify", $Value: Enum_CR_Composite_Text_justify },
    Enum_CR_Composite_Text_rotation_options: { $Name: "Enum_CR_Composite_Text_rotation_options", $Value: Enum_CR_Composite_Text_rotation_options },
    Enum_CR_Simple_Text_Watermark_align: { $Name: "Enum_CR_Simple_Text_Watermark_align", $Value: Enum_CR_Simple_Text_Watermark_align },
    Enum_CR_Simple_Text_Watermark_font_name: { $Name: "Enum_CR_Simple_Text_Watermark_font_name", $Value: Enum_CR_Simple_Text_Watermark_font_name },
    Enum_CR_Simple_Text_Watermark_font_color: { $Name: "Enum_CR_Simple_Text_Watermark_font_color", $Value: Enum_CR_Simple_Text_Watermark_font_color },
    Enum_CR_Select_Font_font_name: { $Name: "Enum_CR_Select_Font_font_name", $Value: Enum_CR_Select_Font_font_name },
    Enum_CR_Halftone_Filter_dot_shape: { $Name: "Enum_CR_Halftone_Filter_dot_shape", $Value: Enum_CR_Halftone_Filter_dot_shape },
    Enum_CR_Halftone_Filter_resolution: { $Name: "Enum_CR_Halftone_Filter_resolution", $Value: Enum_CR_Halftone_Filter_resolution },
    Enum_CR_Color_Tint_mode: { $Name: "Enum_CR_Color_Tint_mode", $Value: Enum_CR_Color_Tint_mode },
    Enum_CR_Vignette_Filter_vignette_shape: { $Name: "Enum_CR_Vignette_Filter_vignette_shape", $Value: Enum_CR_Vignette_Filter_vignette_shape },
    Enum_CR_Vignette_Filter_reverse: { $Name: "Enum_CR_Vignette_Filter_reverse", $Value: Enum_CR_Vignette_Filter_reverse },
    Enum_CR_Page_Layout_layout_options: { $Name: "Enum_CR_Page_Layout_layout_options", $Value: Enum_CR_Page_Layout_layout_options },
    Enum_CR_Page_Layout_header_align: { $Name: "Enum_CR_Page_Layout_header_align", $Value: Enum_CR_Page_Layout_header_align },
    Enum_CR_Page_Layout_footer_align: { $Name: "Enum_CR_Page_Layout_footer_align", $Value: Enum_CR_Page_Layout_footer_align },
    Enum_CR_Page_Layout_font_name: { $Name: "Enum_CR_Page_Layout_font_name", $Value: Enum_CR_Page_Layout_font_name },
    Enum_CR_Page_Layout_font_color: { $Name: "Enum_CR_Page_Layout_font_color", $Value: Enum_CR_Page_Layout_font_color },
    Enum_CR_Page_Layout_border_color: { $Name: "Enum_CR_Page_Layout_border_color", $Value: Enum_CR_Page_Layout_border_color },
    Enum_CR_Page_Layout_background_color: { $Name: "Enum_CR_Page_Layout_background_color", $Value: Enum_CR_Page_Layout_background_color },
    Enum_CR_Image_Panel_border_color: { $Name: "Enum_CR_Image_Panel_border_color", $Value: Enum_CR_Image_Panel_border_color },
    Enum_CR_Image_Panel_outline_color: { $Name: "Enum_CR_Image_Panel_outline_color", $Value: Enum_CR_Image_Panel_outline_color },
    Enum_CR_Image_Panel_layout_direction: { $Name: "Enum_CR_Image_Panel_layout_direction", $Value: Enum_CR_Image_Panel_layout_direction },
    Enum_CR_Image_Grid_Panel_border_color: { $Name: "Enum_CR_Image_Grid_Panel_border_color", $Value: Enum_CR_Image_Grid_Panel_border_color },
    Enum_CR_Image_Grid_Panel_outline_color: { $Name: "Enum_CR_Image_Grid_Panel_outline_color", $Value: Enum_CR_Image_Grid_Panel_outline_color },
    Enum_CR_Image_Border_border_color: { $Name: "Enum_CR_Image_Border_border_color", $Value: Enum_CR_Image_Border_border_color },
    Enum_CR_Image_Border_outline_color: { $Name: "Enum_CR_Image_Border_outline_color", $Value: Enum_CR_Image_Border_outline_color },
    Enum_CR_Feathered_Border_border_color: { $Name: "Enum_CR_Feathered_Border_border_color", $Value: Enum_CR_Feathered_Border_border_color },
    Enum_CR_Simple_Text_Panel_font_name: { $Name: "Enum_CR_Simple_Text_Panel_font_name", $Value: Enum_CR_Simple_Text_Panel_font_name },
    Enum_CR_Simple_Text_Panel_font_color: { $Name: "Enum_CR_Simple_Text_Panel_font_color", $Value: Enum_CR_Simple_Text_Panel_font_color },
    Enum_CR_Simple_Text_Panel_font_outline_color: { $Name: "Enum_CR_Simple_Text_Panel_font_outline_color", $Value: Enum_CR_Simple_Text_Panel_font_outline_color },
    Enum_CR_Simple_Text_Panel_background_color: { $Name: "Enum_CR_Simple_Text_Panel_background_color", $Value: Enum_CR_Simple_Text_Panel_background_color },
    Enum_CR_Simple_Text_Panel_align: { $Name: "Enum_CR_Simple_Text_Panel_align", $Value: Enum_CR_Simple_Text_Panel_align },
    Enum_CR_Simple_Text_Panel_justify: { $Name: "Enum_CR_Simple_Text_Panel_justify", $Value: Enum_CR_Simple_Text_Panel_justify },
    Enum_CR_Color_Panel_fill_color: { $Name: "Enum_CR_Color_Panel_fill_color", $Value: Enum_CR_Color_Panel_fill_color },
    Enum_CR_Half_Drop_Panel_pattern: { $Name: "Enum_CR_Half_Drop_Panel_pattern", $Value: Enum_CR_Half_Drop_Panel_pattern },
    Enum_CR_Diamond_Panel_pattern: { $Name: "Enum_CR_Diamond_Panel_pattern", $Value: Enum_CR_Diamond_Panel_pattern },
    Enum_CR_Simple_Meme_Template_preset: { $Name: "Enum_CR_Simple_Meme_Template_preset", $Value: Enum_CR_Simple_Meme_Template_preset },
    Enum_CR_Simple_Meme_Template_font_name: { $Name: "Enum_CR_Simple_Meme_Template_font_name", $Value: Enum_CR_Simple_Meme_Template_font_name },
    Enum_CR_Simple_Meme_Template_font_color: { $Name: "Enum_CR_Simple_Meme_Template_font_color", $Value: Enum_CR_Simple_Meme_Template_font_color },
    Enum_CR_Simple_Meme_Template_font_outline: { $Name: "Enum_CR_Simple_Meme_Template_font_outline", $Value: Enum_CR_Simple_Meme_Template_font_outline },
    Enum_CR_Simple_Meme_Template_bar_color: { $Name: "Enum_CR_Simple_Meme_Template_bar_color", $Value: Enum_CR_Simple_Meme_Template_bar_color },
    Enum_CR_Simple_Meme_Template_bar_options: { $Name: "Enum_CR_Simple_Meme_Template_bar_options", $Value: Enum_CR_Simple_Meme_Template_bar_options },
    Enum_CR_Simple_Banner_font_name: { $Name: "Enum_CR_Simple_Banner_font_name", $Value: Enum_CR_Simple_Banner_font_name },
    Enum_CR_Simple_Banner_font_color: { $Name: "Enum_CR_Simple_Banner_font_color", $Value: Enum_CR_Simple_Banner_font_color },
    Enum_CR_Simple_Banner_outline_color: { $Name: "Enum_CR_Simple_Banner_outline_color", $Value: Enum_CR_Simple_Banner_outline_color },
    Enum_CR_Comic_Panel_Templates_template: { $Name: "Enum_CR_Comic_Panel_Templates_template", $Value: Enum_CR_Comic_Panel_Templates_template },
    Enum_CR_Comic_Panel_Templates_reading_direction: { $Name: "Enum_CR_Comic_Panel_Templates_reading_direction", $Value: Enum_CR_Comic_Panel_Templates_reading_direction },
    Enum_CR_Comic_Panel_Templates_outline_color: { $Name: "Enum_CR_Comic_Panel_Templates_outline_color", $Value: Enum_CR_Comic_Panel_Templates_outline_color },
    Enum_CR_Comic_Panel_Templates_panel_color: { $Name: "Enum_CR_Comic_Panel_Templates_panel_color", $Value: Enum_CR_Comic_Panel_Templates_panel_color },
    Enum_CR_Comic_Panel_Templates_background_color: { $Name: "Enum_CR_Comic_Panel_Templates_background_color", $Value: Enum_CR_Comic_Panel_Templates_background_color },
    Enum_CR_Simple_Image_Compare_font_name: { $Name: "Enum_CR_Simple_Image_Compare_font_name", $Value: Enum_CR_Simple_Image_Compare_font_name },
    Enum_CR_Simple_Image_Compare_mode: { $Name: "Enum_CR_Simple_Image_Compare_mode", $Value: Enum_CR_Simple_Image_Compare_mode },
    Enum_CR_Seamless_Checker_grid_options: { $Name: "Enum_CR_Seamless_Checker_grid_options", $Value: Enum_CR_Seamless_Checker_grid_options },
    Enum_CR_Batch_Process_Switch_Input: { $Name: "Enum_CR_Batch_Process_Switch_Input", $Value: Enum_CR_Batch_Process_Switch_Input },
    Enum_CR_Img2Img_Process_Switch_Input: { $Name: "Enum_CR_Img2Img_Process_Switch_Input", $Value: Enum_CR_Img2Img_Process_Switch_Input },
    Enum_CR_Hires_Fix_Process_Switch_Input: { $Name: "Enum_CR_Hires_Fix_Process_Switch_Input", $Value: Enum_CR_Hires_Fix_Process_Switch_Input },
    Enum_CR_Index_print_to_console: { $Name: "Enum_CR_Index_print_to_console", $Value: Enum_CR_Index_print_to_console },
    Enum_CR_String_To_Number_round_integer: { $Name: "Enum_CR_String_To_Number_round_integer", $Value: Enum_CR_String_To_Number_round_integer },
    Enum_CR_Random_Multiline_Values_value_type: { $Name: "Enum_CR_Random_Multiline_Values_value_type", $Value: Enum_CR_Random_Multiline_Values_value_type },
    Enum_CR_Random_Multiline_Colors_value_type: { $Name: "Enum_CR_Random_Multiline_Colors_value_type", $Value: Enum_CR_Random_Multiline_Colors_value_type },
    Enum_CR_Text_Operation_operation: { $Name: "Enum_CR_Text_Operation_operation", $Value: Enum_CR_Text_Operation_operation },
    Enum_CR_Save_Text_To_File_file_extension: { $Name: "Enum_CR_Save_Text_To_File_file_extension", $Value: Enum_CR_Save_Text_To_File_file_extension },
    Enum_CR_Math_Operation_operation: { $Name: "Enum_CR_Math_Operation_operation", $Value: Enum_CR_Math_Operation_operation },
    Enum_CR_Select_Resize_Method_method: { $Name: "Enum_CR_Select_Resize_Method_method", $Value: Enum_CR_Select_Resize_Method_method },
    Enum_CR_Select_ISO_Size_iso_size: { $Name: "Enum_CR_Select_ISO_Size_iso_size", $Value: Enum_CR_Select_ISO_Size_iso_size },
    Enum_CR_Simple_Schedule_schedule_type: { $Name: "Enum_CR_Simple_Schedule_schedule_type", $Value: Enum_CR_Simple_Schedule_schedule_type },
    Enum_CR_Simple_Schedule_schedule_format: { $Name: "Enum_CR_Simple_Schedule_schedule_format", $Value: Enum_CR_Simple_Schedule_schedule_format },
    Enum_CR_Central_Schedule_schedule_type1: { $Name: "Enum_CR_Central_Schedule_schedule_type1", $Value: Enum_CR_Central_Schedule_schedule_type1 },
    Enum_CR_Central_Schedule_schedule_type2: { $Name: "Enum_CR_Central_Schedule_schedule_type2", $Value: Enum_CR_Central_Schedule_schedule_type2 },
    Enum_CR_Central_Schedule_schedule_type3: { $Name: "Enum_CR_Central_Schedule_schedule_type3", $Value: Enum_CR_Central_Schedule_schedule_type3 },
    Enum_CR_Central_Schedule_schedule_format: { $Name: "Enum_CR_Central_Schedule_schedule_format", $Value: Enum_CR_Central_Schedule_schedule_format },
    Enum_CR_Output_Schedule_To_File_file_extension: { $Name: "Enum_CR_Output_Schedule_To_File_file_extension", $Value: Enum_CR_Output_Schedule_To_File_file_extension },
    Enum_CR_Load_Schedule_From_File_file_extension: { $Name: "Enum_CR_Load_Schedule_From_File_file_extension", $Value: Enum_CR_Load_Schedule_From_File_file_extension },
    Enum_CR_Value_Scheduler_mode: { $Name: "Enum_CR_Value_Scheduler_mode", $Value: Enum_CR_Value_Scheduler_mode },
    Enum_CR_Value_Scheduler_schedule_format: { $Name: "Enum_CR_Value_Scheduler_schedule_format", $Value: Enum_CR_Value_Scheduler_schedule_format },
    Enum_CR_Text_Scheduler_mode: { $Name: "Enum_CR_Text_Scheduler_mode", $Value: Enum_CR_Text_Scheduler_mode },
    Enum_CR_Text_Scheduler_schedule_format: { $Name: "Enum_CR_Text_Scheduler_schedule_format", $Value: Enum_CR_Text_Scheduler_schedule_format },
    Enum_CR_Load_Scheduled_Models_mode: { $Name: "Enum_CR_Load_Scheduled_Models_mode", $Value: Enum_CR_Load_Scheduled_Models_mode },
    Enum_CR_Load_Scheduled_Models_default_model: { $Name: "Enum_CR_Load_Scheduled_Models_default_model", $Value: Enum_CR_Load_Scheduled_Models_default_model },
    Enum_CR_Load_Scheduled_Models_schedule_format: { $Name: "Enum_CR_Load_Scheduled_Models_schedule_format", $Value: Enum_CR_Load_Scheduled_Models_schedule_format },
    Enum_CR_Load_Scheduled_LoRAs_mode: { $Name: "Enum_CR_Load_Scheduled_LoRAs_mode", $Value: Enum_CR_Load_Scheduled_LoRAs_mode },
    Enum_CR_Load_Scheduled_LoRAs_default_lora: { $Name: "Enum_CR_Load_Scheduled_LoRAs_default_lora", $Value: Enum_CR_Load_Scheduled_LoRAs_default_lora },
    Enum_CR_Load_Scheduled_LoRAs_schedule_format: { $Name: "Enum_CR_Load_Scheduled_LoRAs_schedule_format", $Value: Enum_CR_Load_Scheduled_LoRAs_schedule_format },
    Enum_CR_Prompt_Scheduler_mode: { $Name: "Enum_CR_Prompt_Scheduler_mode", $Value: Enum_CR_Prompt_Scheduler_mode },
    Enum_CR_Prompt_Scheduler_schedule_format: { $Name: "Enum_CR_Prompt_Scheduler_schedule_format", $Value: Enum_CR_Prompt_Scheduler_schedule_format },
    Enum_CR_Prompt_Scheduler_interpolate_prompt: { $Name: "Enum_CR_Prompt_Scheduler_interpolate_prompt", $Value: Enum_CR_Prompt_Scheduler_interpolate_prompt },
    Enum_CR_Simple_Prompt_Scheduler_keyframe_format: { $Name: "Enum_CR_Simple_Prompt_Scheduler_keyframe_format", $Value: Enum_CR_Simple_Prompt_Scheduler_keyframe_format },
    Enum_CR_Keyframe_List_keyframe_format: { $Name: "Enum_CR_Keyframe_List_keyframe_format", $Value: Enum_CR_Keyframe_List_keyframe_format },
    Enum_CR_Gradient_Float_gradient_profile: { $Name: "Enum_CR_Gradient_Float_gradient_profile", $Value: Enum_CR_Gradient_Float_gradient_profile },
    Enum_CR_Gradient_Integer_gradient_profile: { $Name: "Enum_CR_Gradient_Integer_gradient_profile", $Value: Enum_CR_Gradient_Integer_gradient_profile },
    Enum_CR_Interpolate_Latents_method: { $Name: "Enum_CR_Interpolate_Latents_method", $Value: Enum_CR_Interpolate_Latents_method },
    Enum_CR_Current_Frame_print_to_console: { $Name: "Enum_CR_Current_Frame_print_to_console", $Value: Enum_CR_Current_Frame_print_to_console },
    Enum_CR_Load_Animation_Frames_image_sequence_folder: { $Name: "Enum_CR_Load_Animation_Frames_image_sequence_folder", $Value: Enum_CR_Load_Animation_Frames_image_sequence_folder },
    Enum_CR_Load_Flow_Frames_input_folder: { $Name: "Enum_CR_Load_Flow_Frames_input_folder", $Value: Enum_CR_Load_Flow_Frames_input_folder },
    Enum_CR_Load_Flow_Frames_sort_by: { $Name: "Enum_CR_Load_Flow_Frames_sort_by", $Value: Enum_CR_Load_Flow_Frames_sort_by },
    Enum_CR_Output_Flow_Frames_output_folder: { $Name: "Enum_CR_Output_Flow_Frames_output_folder", $Value: Enum_CR_Output_Flow_Frames_output_folder },
    Enum_CR_Prompt_List_Keyframes_keyframe_format: { $Name: "Enum_CR_Prompt_List_Keyframes_keyframe_format", $Value: Enum_CR_Prompt_List_Keyframes_keyframe_format },
    Enum_CR_Simple_Prompt_List_Keyframes_transition_type: { $Name: "Enum_CR_Simple_Prompt_List_Keyframes_transition_type", $Value: Enum_CR_Simple_Prompt_List_Keyframes_transition_type },
    Enum_CR_Simple_Prompt_List_Keyframes_transition_speed: { $Name: "Enum_CR_Simple_Prompt_List_Keyframes_transition_speed", $Value: Enum_CR_Simple_Prompt_List_Keyframes_transition_speed },
    Enum_CR_Simple_Prompt_List_Keyframes_transition_profile: { $Name: "Enum_CR_Simple_Prompt_List_Keyframes_transition_profile", $Value: Enum_CR_Simple_Prompt_List_Keyframes_transition_profile },
    Enum_CR_Simple_Prompt_List_Keyframes_keyframe_format: { $Name: "Enum_CR_Simple_Prompt_List_Keyframes_keyframe_format", $Value: Enum_CR_Simple_Prompt_List_Keyframes_keyframe_format },
    Enum_CR_Cycle_Models_mode: { $Name: "Enum_CR_Cycle_Models_mode", $Value: Enum_CR_Cycle_Models_mode },
    Enum_CR_Cycle_LoRAs_mode: { $Name: "Enum_CR_Cycle_LoRAs_mode", $Value: Enum_CR_Cycle_LoRAs_mode },
    Enum_CR_Cycle_Text_mode: { $Name: "Enum_CR_Cycle_Text_mode", $Value: Enum_CR_Cycle_Text_mode },
    Enum_CR_Cycle_Text_Simple_mode: { $Name: "Enum_CR_Cycle_Text_Simple_mode", $Value: Enum_CR_Cycle_Text_Simple_mode },
    Enum_CR_Cycle_Images_mode: { $Name: "Enum_CR_Cycle_Images_mode", $Value: Enum_CR_Cycle_Images_mode },
    Enum_CR_Cycle_Images_Simple_mode: { $Name: "Enum_CR_Cycle_Images_Simple_mode", $Value: Enum_CR_Cycle_Images_Simple_mode },
    Enum_CR_Model_List_ckpt_name1: { $Name: "Enum_CR_Model_List_ckpt_name1", $Value: Enum_CR_Model_List_ckpt_name1 },
    Enum_CR_Model_List_ckpt_name2: { $Name: "Enum_CR_Model_List_ckpt_name2", $Value: Enum_CR_Model_List_ckpt_name2 },
    Enum_CR_Model_List_ckpt_name3: { $Name: "Enum_CR_Model_List_ckpt_name3", $Value: Enum_CR_Model_List_ckpt_name3 },
    Enum_CR_Model_List_ckpt_name4: { $Name: "Enum_CR_Model_List_ckpt_name4", $Value: Enum_CR_Model_List_ckpt_name4 },
    Enum_CR_Model_List_ckpt_name5: { $Name: "Enum_CR_Model_List_ckpt_name5", $Value: Enum_CR_Model_List_ckpt_name5 },
    Enum_CR_LoRA_List_lora_name1: { $Name: "Enum_CR_LoRA_List_lora_name1", $Value: Enum_CR_LoRA_List_lora_name1 },
    Enum_CR_LoRA_List_lora_name2: { $Name: "Enum_CR_LoRA_List_lora_name2", $Value: Enum_CR_LoRA_List_lora_name2 },
    Enum_CR_LoRA_List_lora_name3: { $Name: "Enum_CR_LoRA_List_lora_name3", $Value: Enum_CR_LoRA_List_lora_name3 },
    "Enum_AnyLineArtPreprocessor$_aux_merge_with_lineart": { $Name: "Enum_AnyLineArtPreprocessor$_aux_merge_with_lineart", $Value: Enum_AnyLineArtPreprocessor$_aux_merge_with_lineart },
    Enum_DensePosePreprocessor_model: { $Name: "Enum_DensePosePreprocessor_model", $Value: Enum_DensePosePreprocessor_model },
    Enum_DensePosePreprocessor_cmap: { $Name: "Enum_DensePosePreprocessor_cmap", $Value: Enum_DensePosePreprocessor_cmap },
    Enum_DepthAnythingPreprocessor_ckpt_name: { $Name: "Enum_DepthAnythingPreprocessor_ckpt_name", $Value: Enum_DepthAnythingPreprocessor_ckpt_name },
    "Enum_Zoe$_DepthAnythingPreprocessor_environment": { $Name: "Enum_Zoe$_DepthAnythingPreprocessor_environment", $Value: Enum_Zoe$_DepthAnythingPreprocessor_environment },
    Enum_DepthAnythingV2Preprocessor_ckpt_name: { $Name: "Enum_DepthAnythingV2Preprocessor_ckpt_name", $Value: Enum_DepthAnythingV2Preprocessor_ckpt_name },
    "Enum_DiffusionEdge$_Preprocessor_environment": { $Name: "Enum_DiffusionEdge$_Preprocessor_environment", $Value: Enum_DiffusionEdge$_Preprocessor_environment },
    Enum_DWPreprocessor_detect_hand: { $Name: "Enum_DWPreprocessor_detect_hand", $Value: Enum_DWPreprocessor_detect_hand },
    Enum_DWPreprocessor_detect_body: { $Name: "Enum_DWPreprocessor_detect_body", $Value: Enum_DWPreprocessor_detect_body },
    Enum_DWPreprocessor_detect_face: { $Name: "Enum_DWPreprocessor_detect_face", $Value: Enum_DWPreprocessor_detect_face },
    Enum_DWPreprocessor_bbox_detector: { $Name: "Enum_DWPreprocessor_bbox_detector", $Value: Enum_DWPreprocessor_bbox_detector },
    Enum_DWPreprocessor_pose_estimator: { $Name: "Enum_DWPreprocessor_pose_estimator", $Value: Enum_DWPreprocessor_pose_estimator },
    Enum_DWPreprocessor_scale_stick_for_xinsr_cn: { $Name: "Enum_DWPreprocessor_scale_stick_for_xinsr_cn", $Value: Enum_DWPreprocessor_scale_stick_for_xinsr_cn },
    Enum_AnimalPosePreprocessor_bbox_detector: { $Name: "Enum_AnimalPosePreprocessor_bbox_detector", $Value: Enum_AnimalPosePreprocessor_bbox_detector },
    Enum_AnimalPosePreprocessor_pose_estimator: { $Name: "Enum_AnimalPosePreprocessor_pose_estimator", $Value: Enum_AnimalPosePreprocessor_pose_estimator },
    Enum_HEDPreprocessor_safe: { $Name: "Enum_HEDPreprocessor_safe", $Value: Enum_HEDPreprocessor_safe },
    Enum_FakeScribblePreprocessor_safe: { $Name: "Enum_FakeScribblePreprocessor_safe", $Value: Enum_FakeScribblePreprocessor_safe },
    "Enum_LeReS$7DepthMapPreprocessor_boost": { $Name: "Enum_LeReS$7DepthMapPreprocessor_boost", $Value: Enum_LeReS$7DepthMapPreprocessor_boost },
    Enum_LineArtPreprocessor_coarse: { $Name: "Enum_LineArtPreprocessor_coarse", $Value: Enum_LineArtPreprocessor_coarse },
    "Enum_MeshGraphormer$7DepthMapPreprocessor_mask_type": { $Name: "Enum_MeshGraphormer$7DepthMapPreprocessor_mask_type", $Value: Enum_MeshGraphormer$7DepthMapPreprocessor_mask_type },
    "Enum_MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor_mask_type": { $Name: "Enum_MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor_mask_type", $Value: Enum_MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor_mask_type },
    "Enum_Metric3D$7DepthMapPreprocessor_backbone": { $Name: "Enum_Metric3D$7DepthMapPreprocessor_backbone", $Value: Enum_Metric3D$7DepthMapPreprocessor_backbone },
    "Enum_Metric3D$7NormalMapPreprocessor_backbone": { $Name: "Enum_Metric3D$7NormalMapPreprocessor_backbone", $Value: Enum_Metric3D$7NormalMapPreprocessor_backbone },
    Enum_OpenposePreprocessor_detect_hand: { $Name: "Enum_OpenposePreprocessor_detect_hand", $Value: Enum_OpenposePreprocessor_detect_hand },
    Enum_OpenposePreprocessor_detect_body: { $Name: "Enum_OpenposePreprocessor_detect_body", $Value: Enum_OpenposePreprocessor_detect_body },
    Enum_OpenposePreprocessor_detect_face: { $Name: "Enum_OpenposePreprocessor_detect_face", $Value: Enum_OpenposePreprocessor_detect_face },
    Enum_OpenposePreprocessor_scale_stick_for_xinsr_cn: { $Name: "Enum_OpenposePreprocessor_scale_stick_for_xinsr_cn", $Value: Enum_OpenposePreprocessor_scale_stick_for_xinsr_cn },
    Enum_PiDiNetPreprocessor_safe: { $Name: "Enum_PiDiNetPreprocessor_safe", $Value: Enum_PiDiNetPreprocessor_safe },
    Enum_FacialPartColoringFromPoseKps_mode: { $Name: "Enum_FacialPartColoringFromPoseKps_mode", $Value: Enum_FacialPartColoringFromPoseKps_mode },
    "Enum_Scribble$_PiDiNet$_Preprocessor_safe": { $Name: "Enum_Scribble$_PiDiNet$_Preprocessor_safe", $Value: Enum_Scribble$_PiDiNet$_Preprocessor_safe },
    "Enum_Unimatch$_OptFlowPreprocessor_ckpt_name": { $Name: "Enum_Unimatch$_OptFlowPreprocessor_ckpt_name", $Value: Enum_Unimatch$_OptFlowPreprocessor_ckpt_name },
    "Enum_AIO$_Preprocessor_preprocessor": { $Name: "Enum_AIO$_Preprocessor_preprocessor", $Value: Enum_AIO$_Preprocessor_preprocessor },
    Enum_ControlNetPreprocessorSelector_preprocessor_out: { $Name: "Enum_ControlNetPreprocessorSelector_preprocessor_out", $Value: Enum_ControlNetPreprocessorSelector_preprocessor_out },
    Enum_ControlNetPreprocessorSelector_preprocessor: { $Name: "Enum_ControlNetPreprocessorSelector_preprocessor", $Value: Enum_ControlNetPreprocessorSelector_preprocessor },
    Enum_PixelPerfectResolution_resize_mode: { $Name: "Enum_PixelPerfectResolution_resize_mode", $Value: Enum_PixelPerfectResolution_resize_mode },
    Enum_HintImageEnchance_resize_mode: { $Name: "Enum_HintImageEnchance_resize_mode", $Value: Enum_HintImageEnchance_resize_mode },
    "Enum_BNK$_CutoffRegionsToConditioning$_ADV_token_normalization": { $Name: "Enum_BNK$_CutoffRegionsToConditioning$_ADV_token_normalization", $Value: Enum_BNK$_CutoffRegionsToConditioning$_ADV_token_normalization },
    "Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation": { $Name: "Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation", $Value: Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation },
    "Enum_ImageBatchMultiple$6_method": { $Name: "Enum_ImageBatchMultiple$6_method", $Value: Enum_ImageBatchMultiple$6_method },
    "Enum_ImageExpandBatch$6_method": { $Name: "Enum_ImageExpandBatch$6_method", $Value: Enum_ImageExpandBatch$6_method },
    "Enum_ImageCrop$6_position": { $Name: "Enum_ImageCrop$6_position", $Value: Enum_ImageCrop$6_position },
    "Enum_ImageFlip$6_axis": { $Name: "Enum_ImageFlip$6_axis", $Value: Enum_ImageFlip$6_axis },
    "Enum_ImageResize$6_interpolation": { $Name: "Enum_ImageResize$6_interpolation", $Value: Enum_ImageResize$6_interpolation },
    "Enum_ImageResize$6_method": { $Name: "Enum_ImageResize$6_method", $Value: Enum_ImageResize$6_method },
    "Enum_ImageResize$6_condition": { $Name: "Enum_ImageResize$6_condition", $Value: Enum_ImageResize$6_condition },
    "Enum_ImageSeamCarving$6_energy": { $Name: "Enum_ImageSeamCarving$6_energy", $Value: Enum_ImageSeamCarving$6_energy },
    "Enum_ImageSeamCarving$6_order": { $Name: "Enum_ImageSeamCarving$6_order", $Value: Enum_ImageSeamCarving$6_order },
    "Enum_RemBGSession$6_model": { $Name: "Enum_RemBGSession$6_model", $Value: Enum_RemBGSession$6_model },
    "Enum_RemBGSession$6_providers": { $Name: "Enum_RemBGSession$6_providers", $Value: Enum_RemBGSession$6_providers },
    "Enum_TransparentBGSession$6_mode": { $Name: "Enum_TransparentBGSession$6_mode", $Value: Enum_TransparentBGSession$6_mode },
    "Enum_ImageApplyLUT$6_lut_file": { $Name: "Enum_ImageApplyLUT$6_lut_file", $Value: Enum_ImageApplyLUT$6_lut_file },
    "Enum_ImageDesaturate$6_method": { $Name: "Enum_ImageDesaturate$6_method", $Value: Enum_ImageDesaturate$6_method },
    "Enum_PixelOEPixelize$6_downscale_mode": { $Name: "Enum_PixelOEPixelize$6_downscale_mode", $Value: Enum_PixelOEPixelize$6_downscale_mode },
    "Enum_ImageColorMatch$6_color_space": { $Name: "Enum_ImageColorMatch$6_color_space", $Value: Enum_ImageColorMatch$6_color_space },
    "Enum_ImageColorMatch$6_device": { $Name: "Enum_ImageColorMatch$6_device", $Value: Enum_ImageColorMatch$6_device },
    "Enum_ImageColorMatchAdobe$6_color_space": { $Name: "Enum_ImageColorMatchAdobe$6_color_space", $Value: Enum_ImageColorMatchAdobe$6_color_space },
    "Enum_ImageColorMatchAdobe$6_device": { $Name: "Enum_ImageColorMatchAdobe$6_device", $Value: Enum_ImageColorMatchAdobe$6_device },
    "Enum_ImageHistogramMatch$6_method": { $Name: "Enum_ImageHistogramMatch$6_method", $Value: Enum_ImageHistogramMatch$6_method },
    "Enum_ImageHistogramMatch$6_device": { $Name: "Enum_ImageHistogramMatch$6_device", $Value: Enum_ImageHistogramMatch$6_device },
    "Enum_ImageToDevice$6_device": { $Name: "Enum_ImageToDevice$6_device", $Value: Enum_ImageToDevice$6_device },
    "Enum_ImagePreviewFromLatent$6_image": { $Name: "Enum_ImagePreviewFromLatent$6_image", $Value: Enum_ImagePreviewFromLatent$6_image },
    "Enum_MaskBlur$6_device": { $Name: "Enum_MaskBlur$6_device", $Value: Enum_MaskBlur$6_device },
    "Enum_MaskFlip$6_axis": { $Name: "Enum_MaskFlip$6_axis", $Value: Enum_MaskFlip$6_axis },
    "Enum_TransitionMask$6_transition_type": { $Name: "Enum_TransitionMask$6_transition_type", $Value: Enum_TransitionMask$6_transition_type },
    "Enum_TransitionMask$6_timing_function": { $Name: "Enum_TransitionMask$6_timing_function", $Value: Enum_TransitionMask$6_timing_function },
    "Enum_MaskExpandBatch$6_method": { $Name: "Enum_MaskExpandBatch$6_method", $Value: Enum_MaskExpandBatch$6_method },
    "Enum_KSamplerVariationsStochastic$6_sampler": { $Name: "Enum_KSamplerVariationsStochastic$6_sampler", $Value: Enum_KSamplerVariationsStochastic$6_sampler },
    "Enum_KSamplerVariationsStochastic$6_scheduler": { $Name: "Enum_KSamplerVariationsStochastic$6_scheduler", $Value: Enum_KSamplerVariationsStochastic$6_scheduler },
    "Enum_KSamplerVariationsWithNoise$6_sampler_name": { $Name: "Enum_KSamplerVariationsWithNoise$6_sampler_name", $Value: Enum_KSamplerVariationsWithNoise$6_sampler_name },
    "Enum_KSamplerVariationsWithNoise$6_scheduler": { $Name: "Enum_KSamplerVariationsWithNoise$6_scheduler", $Value: Enum_KSamplerVariationsWithNoise$6_scheduler },
    "Enum_InjectLatentNoise$6_normalize": { $Name: "Enum_InjectLatentNoise$6_normalize", $Value: Enum_InjectLatentNoise$6_normalize },
    "Enum_PlotParameters$6_order_by": { $Name: "Enum_PlotParameters$6_order_by", $Value: Enum_PlotParameters$6_order_by },
    "Enum_PlotParameters$6_cols_value": { $Name: "Enum_PlotParameters$6_cols_value", $Value: Enum_PlotParameters$6_cols_value },
    "Enum_PlotParameters$6_add_prompt": { $Name: "Enum_PlotParameters$6_add_prompt", $Value: Enum_PlotParameters$6_add_prompt },
    "Enum_PlotParameters$6_add_params": { $Name: "Enum_PlotParameters$6_add_params", $Value: Enum_PlotParameters$6_add_params },
    "Enum_LorasForFluxParams$6_lora_1": { $Name: "Enum_LorasForFluxParams$6_lora_1", $Value: Enum_LorasForFluxParams$6_lora_1 },
    "Enum_DrawText$6_font": { $Name: "Enum_DrawText$6_font", $Value: Enum_DrawText$6_font },
    "Enum_DrawText$6_horizontal_align": { $Name: "Enum_DrawText$6_horizontal_align", $Value: Enum_DrawText$6_horizontal_align },
    "Enum_DrawText$6_vertical_align": { $Name: "Enum_DrawText$6_vertical_align", $Value: Enum_DrawText$6_vertical_align },
    "Enum_DrawText$6_direction": { $Name: "Enum_DrawText$6_direction", $Value: Enum_DrawText$6_direction },
    Enum_DisplayAny_mode: { $Name: "Enum_DisplayAny_mode", $Value: Enum_DisplayAny_mode },
    "Enum_ModelCompile$6_mode": { $Name: "Enum_ModelCompile$6_mode", $Value: Enum_ModelCompile$6_mode },
    "Enum_SDXLEmptyLatentSizePicker$6_resolution": { $Name: "Enum_SDXLEmptyLatentSizePicker$6_resolution", $Value: Enum_SDXLEmptyLatentSizePicker$6_resolution },
    "Enum_SimpleComparison$6_comparison": { $Name: "Enum_SimpleComparison$6_comparison", $Value: Enum_SimpleComparison$6_comparison },
    Enum_IPAdapter_weight_type: { $Name: "Enum_IPAdapter_weight_type", $Value: Enum_IPAdapter_weight_type },
    Enum_IPAdapterAdvanced_weight_type: { $Name: "Enum_IPAdapterAdvanced_weight_type", $Value: Enum_IPAdapterAdvanced_weight_type },
    Enum_IPAdapterAdvanced_combine_embeds: { $Name: "Enum_IPAdapterAdvanced_combine_embeds", $Value: Enum_IPAdapterAdvanced_combine_embeds },
    Enum_IPAdapterAdvanced_embeds_scaling: { $Name: "Enum_IPAdapterAdvanced_embeds_scaling", $Value: Enum_IPAdapterAdvanced_embeds_scaling },
    Enum_IPAdapterBatch_weight_type: { $Name: "Enum_IPAdapterBatch_weight_type", $Value: Enum_IPAdapterBatch_weight_type },
    Enum_IPAdapterBatch_embeds_scaling: { $Name: "Enum_IPAdapterBatch_embeds_scaling", $Value: Enum_IPAdapterBatch_embeds_scaling },
    Enum_IPAdapterFaceID_weight_type: { $Name: "Enum_IPAdapterFaceID_weight_type", $Value: Enum_IPAdapterFaceID_weight_type },
    Enum_IPAdapterFaceID_combine_embeds: { $Name: "Enum_IPAdapterFaceID_combine_embeds", $Value: Enum_IPAdapterFaceID_combine_embeds },
    Enum_IPAdapterFaceID_embeds_scaling: { $Name: "Enum_IPAdapterFaceID_embeds_scaling", $Value: Enum_IPAdapterFaceID_embeds_scaling },
    Enum_IPAdapterFaceIDKolors_weight_type: { $Name: "Enum_IPAdapterFaceIDKolors_weight_type", $Value: Enum_IPAdapterFaceIDKolors_weight_type },
    Enum_IPAdapterFaceIDKolors_combine_embeds: { $Name: "Enum_IPAdapterFaceIDKolors_combine_embeds", $Value: Enum_IPAdapterFaceIDKolors_combine_embeds },
    Enum_IPAdapterFaceIDKolors_embeds_scaling: { $Name: "Enum_IPAdapterFaceIDKolors_embeds_scaling", $Value: Enum_IPAdapterFaceIDKolors_embeds_scaling },
    Enum_IPAAdapterFaceIDBatch_weight_type: { $Name: "Enum_IPAAdapterFaceIDBatch_weight_type", $Value: Enum_IPAAdapterFaceIDBatch_weight_type },
    Enum_IPAAdapterFaceIDBatch_combine_embeds: { $Name: "Enum_IPAAdapterFaceIDBatch_combine_embeds", $Value: Enum_IPAAdapterFaceIDBatch_combine_embeds },
    Enum_IPAAdapterFaceIDBatch_embeds_scaling: { $Name: "Enum_IPAAdapterFaceIDBatch_embeds_scaling", $Value: Enum_IPAAdapterFaceIDBatch_embeds_scaling },
    Enum_IPAdapterTiled_weight_type: { $Name: "Enum_IPAdapterTiled_weight_type", $Value: Enum_IPAdapterTiled_weight_type },
    Enum_IPAdapterTiled_combine_embeds: { $Name: "Enum_IPAdapterTiled_combine_embeds", $Value: Enum_IPAdapterTiled_combine_embeds },
    Enum_IPAdapterTiled_embeds_scaling: { $Name: "Enum_IPAdapterTiled_embeds_scaling", $Value: Enum_IPAdapterTiled_embeds_scaling },
    Enum_IPAdapterTiledBatch_weight_type: { $Name: "Enum_IPAdapterTiledBatch_weight_type", $Value: Enum_IPAdapterTiledBatch_weight_type },
    Enum_IPAdapterTiledBatch_embeds_scaling: { $Name: "Enum_IPAdapterTiledBatch_embeds_scaling", $Value: Enum_IPAdapterTiledBatch_embeds_scaling },
    Enum_IPAdapterEmbeds_weight_type: { $Name: "Enum_IPAdapterEmbeds_weight_type", $Value: Enum_IPAdapterEmbeds_weight_type },
    Enum_IPAdapterEmbeds_embeds_scaling: { $Name: "Enum_IPAdapterEmbeds_embeds_scaling", $Value: Enum_IPAdapterEmbeds_embeds_scaling },
    Enum_IPAdapterEmbedsBatch_weight_type: { $Name: "Enum_IPAdapterEmbedsBatch_weight_type", $Value: Enum_IPAdapterEmbedsBatch_weight_type },
    Enum_IPAdapterEmbedsBatch_embeds_scaling: { $Name: "Enum_IPAdapterEmbedsBatch_embeds_scaling", $Value: Enum_IPAdapterEmbedsBatch_embeds_scaling },
    Enum_IPAdapterStyleComposition_combine_embeds: { $Name: "Enum_IPAdapterStyleComposition_combine_embeds", $Value: Enum_IPAdapterStyleComposition_combine_embeds },
    Enum_IPAdapterStyleComposition_embeds_scaling: { $Name: "Enum_IPAdapterStyleComposition_embeds_scaling", $Value: Enum_IPAdapterStyleComposition_embeds_scaling },
    Enum_IPAdapterStyleCompositionBatch_embeds_scaling: { $Name: "Enum_IPAdapterStyleCompositionBatch_embeds_scaling", $Value: Enum_IPAdapterStyleCompositionBatch_embeds_scaling },
    Enum_IPAdapterMS_weight_type: { $Name: "Enum_IPAdapterMS_weight_type", $Value: Enum_IPAdapterMS_weight_type },
    Enum_IPAdapterMS_combine_embeds: { $Name: "Enum_IPAdapterMS_combine_embeds", $Value: Enum_IPAdapterMS_combine_embeds },
    Enum_IPAdapterMS_embeds_scaling: { $Name: "Enum_IPAdapterMS_embeds_scaling", $Value: Enum_IPAdapterMS_embeds_scaling },
    Enum_IPAdapterClipVisionEnhancer_weight_type: { $Name: "Enum_IPAdapterClipVisionEnhancer_weight_type", $Value: Enum_IPAdapterClipVisionEnhancer_weight_type },
    Enum_IPAdapterClipVisionEnhancer_combine_embeds: { $Name: "Enum_IPAdapterClipVisionEnhancer_combine_embeds", $Value: Enum_IPAdapterClipVisionEnhancer_combine_embeds },
    Enum_IPAdapterClipVisionEnhancer_embeds_scaling: { $Name: "Enum_IPAdapterClipVisionEnhancer_embeds_scaling", $Value: Enum_IPAdapterClipVisionEnhancer_embeds_scaling },
    Enum_IPAdapterClipVisionEnhancerBatch_weight_type: { $Name: "Enum_IPAdapterClipVisionEnhancerBatch_weight_type", $Value: Enum_IPAdapterClipVisionEnhancerBatch_weight_type },
    Enum_IPAdapterClipVisionEnhancerBatch_embeds_scaling: { $Name: "Enum_IPAdapterClipVisionEnhancerBatch_embeds_scaling", $Value: Enum_IPAdapterClipVisionEnhancerBatch_embeds_scaling },
    Enum_IPAdapterFromParams_combine_embeds: { $Name: "Enum_IPAdapterFromParams_combine_embeds", $Value: Enum_IPAdapterFromParams_combine_embeds },
    Enum_IPAdapterFromParams_embeds_scaling: { $Name: "Enum_IPAdapterFromParams_embeds_scaling", $Value: Enum_IPAdapterFromParams_embeds_scaling },
    Enum_IPAdapterPreciseStyleTransfer_combine_embeds: { $Name: "Enum_IPAdapterPreciseStyleTransfer_combine_embeds", $Value: Enum_IPAdapterPreciseStyleTransfer_combine_embeds },
    Enum_IPAdapterPreciseStyleTransfer_embeds_scaling: { $Name: "Enum_IPAdapterPreciseStyleTransfer_embeds_scaling", $Value: Enum_IPAdapterPreciseStyleTransfer_embeds_scaling },
    Enum_IPAdapterPreciseStyleTransferBatch_combine_embeds: { $Name: "Enum_IPAdapterPreciseStyleTransferBatch_combine_embeds", $Value: Enum_IPAdapterPreciseStyleTransferBatch_combine_embeds },
    Enum_IPAdapterPreciseStyleTransferBatch_embeds_scaling: { $Name: "Enum_IPAdapterPreciseStyleTransferBatch_embeds_scaling", $Value: Enum_IPAdapterPreciseStyleTransferBatch_embeds_scaling },
    Enum_IPAdapterPreciseComposition_combine_embeds: { $Name: "Enum_IPAdapterPreciseComposition_combine_embeds", $Value: Enum_IPAdapterPreciseComposition_combine_embeds },
    Enum_IPAdapterPreciseComposition_embeds_scaling: { $Name: "Enum_IPAdapterPreciseComposition_embeds_scaling", $Value: Enum_IPAdapterPreciseComposition_embeds_scaling },
    Enum_IPAdapterPreciseCompositionBatch_combine_embeds: { $Name: "Enum_IPAdapterPreciseCompositionBatch_combine_embeds", $Value: Enum_IPAdapterPreciseCompositionBatch_combine_embeds },
    Enum_IPAdapterPreciseCompositionBatch_embeds_scaling: { $Name: "Enum_IPAdapterPreciseCompositionBatch_embeds_scaling", $Value: Enum_IPAdapterPreciseCompositionBatch_embeds_scaling },
    Enum_IPAdapterUnifiedLoader_preset: { $Name: "Enum_IPAdapterUnifiedLoader_preset", $Value: Enum_IPAdapterUnifiedLoader_preset },
    Enum_IPAdapterUnifiedLoaderFaceID_preset: { $Name: "Enum_IPAdapterUnifiedLoaderFaceID_preset", $Value: Enum_IPAdapterUnifiedLoaderFaceID_preset },
    Enum_IPAdapterUnifiedLoaderFaceID_provider: { $Name: "Enum_IPAdapterUnifiedLoaderFaceID_provider", $Value: Enum_IPAdapterUnifiedLoaderFaceID_provider },
    Enum_IPAdapterModelLoader_ipadapter_file: { $Name: "Enum_IPAdapterModelLoader_ipadapter_file", $Value: Enum_IPAdapterModelLoader_ipadapter_file },
    Enum_IPAdapterInsightFaceLoader_provider: { $Name: "Enum_IPAdapterInsightFaceLoader_provider", $Value: Enum_IPAdapterInsightFaceLoader_provider },
    Enum_IPAdapterInsightFaceLoader_model_name: { $Name: "Enum_IPAdapterInsightFaceLoader_model_name", $Value: Enum_IPAdapterInsightFaceLoader_model_name },
    Enum_IPAdapterUnifiedLoaderCommunity_preset: { $Name: "Enum_IPAdapterUnifiedLoaderCommunity_preset", $Value: Enum_IPAdapterUnifiedLoaderCommunity_preset },
    Enum_IPAdapterCombineEmbeds_method: { $Name: "Enum_IPAdapterCombineEmbeds_method", $Value: Enum_IPAdapterCombineEmbeds_method },
    Enum_IPAdapterNoise_type: { $Name: "Enum_IPAdapterNoise_type", $Value: Enum_IPAdapterNoise_type },
    Enum_PrepImageForClipVision_interpolation: { $Name: "Enum_PrepImageForClipVision_interpolation", $Value: Enum_PrepImageForClipVision_interpolation },
    Enum_PrepImageForClipVision_crop_position: { $Name: "Enum_PrepImageForClipVision_crop_position", $Value: Enum_PrepImageForClipVision_crop_position },
    Enum_IPAdapterLoadEmbeds_embeds: { $Name: "Enum_IPAdapterLoadEmbeds_embeds", $Value: Enum_IPAdapterLoadEmbeds_embeds },
    Enum_IPAdapterWeights_timing: { $Name: "Enum_IPAdapterWeights_timing", $Value: Enum_IPAdapterWeights_timing },
    Enum_IPAdapterWeights_method: { $Name: "Enum_IPAdapterWeights_method", $Value: Enum_IPAdapterWeights_method },
    Enum_IPAdapterRegionalConditioning_weight_type: { $Name: "Enum_IPAdapterRegionalConditioning_weight_type", $Value: Enum_IPAdapterRegionalConditioning_weight_type },
    "Enum_Lora_Loader_$1JPS$2_switch": { $Name: "Enum_Lora_Loader_$1JPS$2_switch", $Value: Enum_Lora_Loader_$1JPS$2_switch },
    "Enum_Lora_Loader_$1JPS$2_lora_name": { $Name: "Enum_Lora_Loader_$1JPS$2_lora_name", $Value: Enum_Lora_Loader_$1JPS$2_lora_name },
    "Enum_SDXL_Resolutions_$1JPS$2_resolution": { $Name: "Enum_SDXL_Resolutions_$1JPS$2_resolution", $Value: Enum_SDXL_Resolutions_$1JPS$2_resolution },
    "Enum_SDXL_Basic_Settings_$1JPS$2_resolution": { $Name: "Enum_SDXL_Basic_Settings_$1JPS$2_resolution", $Value: Enum_SDXL_Basic_Settings_$1JPS$2_resolution },
    "Enum_SDXL_Basic_Settings_$1JPS$2_sampler_name": { $Name: "Enum_SDXL_Basic_Settings_$1JPS$2_sampler_name", $Value: Enum_SDXL_Basic_Settings_$1JPS$2_sampler_name },
    "Enum_SDXL_Basic_Settings_$1JPS$2_scheduler": { $Name: "Enum_SDXL_Basic_Settings_$1JPS$2_scheduler", $Value: Enum_SDXL_Basic_Settings_$1JPS$2_scheduler },
    "Enum_SDXL_Settings_$1JPS$2_resolution": { $Name: "Enum_SDXL_Settings_$1JPS$2_resolution", $Value: Enum_SDXL_Settings_$1JPS$2_resolution },
    "Enum_SDXL_Settings_$1JPS$2_sampler_name": { $Name: "Enum_SDXL_Settings_$1JPS$2_sampler_name", $Value: Enum_SDXL_Settings_$1JPS$2_sampler_name },
    "Enum_SDXL_Settings_$1JPS$2_scheduler": { $Name: "Enum_SDXL_Settings_$1JPS$2_scheduler", $Value: Enum_SDXL_Settings_$1JPS$2_scheduler },
    "Enum_Generation_TXT_IMG_Settings_$1JPS$2_mode": { $Name: "Enum_Generation_TXT_IMG_Settings_$1JPS$2_mode", $Value: Enum_Generation_TXT_IMG_Settings_$1JPS$2_mode },
    "Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos": { $Name: "Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos", $Value: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos },
    "Enum_Crop_Image_Settings_$1JPS$2_support_crop_pos": { $Name: "Enum_Crop_Image_Settings_$1JPS$2_support_crop_pos", $Value: Enum_Crop_Image_Settings_$1JPS$2_support_crop_pos },
    "Enum_Crop_Image_Settings_$1JPS$2_crop_intpol": { $Name: "Enum_Crop_Image_Settings_$1JPS$2_crop_intpol", $Value: Enum_Crop_Image_Settings_$1JPS$2_crop_intpol },
    "Enum_ImageToImage_Settings_$1JPS$2_unsampler_sampler": { $Name: "Enum_ImageToImage_Settings_$1JPS$2_unsampler_sampler", $Value: Enum_ImageToImage_Settings_$1JPS$2_unsampler_sampler },
    "Enum_ImageToImage_Settings_$1JPS$2_unsampler_scheduler": { $Name: "Enum_ImageToImage_Settings_$1JPS$2_unsampler_scheduler", $Value: Enum_ImageToImage_Settings_$1JPS$2_unsampler_scheduler },
    "Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from": { $Name: "Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from", $Value: Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from },
    "Enum_CtrlNet_ZoeDepth_Settings_$1JPS$2_zoe_from": { $Name: "Enum_CtrlNet_ZoeDepth_Settings_$1JPS$2_zoe_from", $Value: Enum_CtrlNet_ZoeDepth_Settings_$1JPS$2_zoe_from },
    "Enum_CtrlNet_MiDaS_Settings_$1JPS$2_midas_from": { $Name: "Enum_CtrlNet_MiDaS_Settings_$1JPS$2_midas_from", $Value: Enum_CtrlNet_MiDaS_Settings_$1JPS$2_midas_from },
    "Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_from": { $Name: "Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_from", $Value: Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_from },
    "Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_body": { $Name: "Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_body", $Value: Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_body },
    "Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_face": { $Name: "Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_face", $Value: Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_face },
    "Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_hand": { $Name: "Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_hand", $Value: Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_hand },
    "Enum_Revision_Settings_$1JPS$2_rev1_crop": { $Name: "Enum_Revision_Settings_$1JPS$2_rev1_crop", $Value: Enum_Revision_Settings_$1JPS$2_rev1_crop },
    "Enum_Revision_Settings_$1JPS$2_rev2_crop": { $Name: "Enum_Revision_Settings_$1JPS$2_rev2_crop", $Value: Enum_Revision_Settings_$1JPS$2_rev2_crop },
    "Enum_Revision_Settings_$1JPS$2_crop_intpol": { $Name: "Enum_Revision_Settings_$1JPS$2_crop_intpol", $Value: Enum_Revision_Settings_$1JPS$2_crop_intpol },
    "Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype": { $Name: "Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype", $Value: Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype },
    "Enum_IP_Adapter_Settings_$1JPS$2_ipa_crop": { $Name: "Enum_IP_Adapter_Settings_$1JPS$2_ipa_crop", $Value: Enum_IP_Adapter_Settings_$1JPS$2_ipa_crop },
    "Enum_IP_Adapter_Settings_$1JPS$2_ipa_mask": { $Name: "Enum_IP_Adapter_Settings_$1JPS$2_ipa_mask", $Value: Enum_IP_Adapter_Settings_$1JPS$2_ipa_mask },
    "Enum_IP_Adapter_Settings_$1JPS$2_crop_intpol": { $Name: "Enum_IP_Adapter_Settings_$1JPS$2_crop_intpol", $Value: Enum_IP_Adapter_Settings_$1JPS$2_crop_intpol },
    "Enum_IP_Adapter_Settings_$1JPS$2_ipa_model": { $Name: "Enum_IP_Adapter_Settings_$1JPS$2_ipa_model", $Value: Enum_IP_Adapter_Settings_$1JPS$2_ipa_model },
    "Enum_IP_Adapter_Tiled_Settings_$1JPS$2_ipa_model": { $Name: "Enum_IP_Adapter_Tiled_Settings_$1JPS$2_ipa_model", $Value: Enum_IP_Adapter_Tiled_Settings_$1JPS$2_ipa_model },
    "Enum_IP_Adapter_Tiled_Settings_$1JPS$2_ipa_wtype": { $Name: "Enum_IP_Adapter_Tiled_Settings_$1JPS$2_ipa_wtype", $Value: Enum_IP_Adapter_Tiled_Settings_$1JPS$2_ipa_wtype },
    "Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_type": { $Name: "Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_type", $Value: Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_type },
    "Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_intpol": { $Name: "Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_intpol", $Value: Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_intpol },
    "Enum_Image_Prepare_Settings_$1JPS$2_interpolation": { $Name: "Enum_Image_Prepare_Settings_$1JPS$2_interpolation", $Value: Enum_Image_Prepare_Settings_$1JPS$2_interpolation },
    "Enum_InstantID_Source_Prepare_Settings_$1JPS$2_resize_to": { $Name: "Enum_InstantID_Source_Prepare_Settings_$1JPS$2_resize_to", $Value: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_resize_to },
    "Enum_InstantID_Source_Prepare_Settings_$1JPS$2_interpolation": { $Name: "Enum_InstantID_Source_Prepare_Settings_$1JPS$2_interpolation", $Value: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_interpolation },
    "Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip": { $Name: "Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip", $Value: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip },
    "Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_resize_to": { $Name: "Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_resize_to", $Value: Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_resize_to },
    "Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_interpolation": { $Name: "Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_interpolation", $Value: Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_interpolation },
    "Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_flip": { $Name: "Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_flip", $Value: Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_flip },
    "Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_mask_type": { $Name: "Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_mask_type", $Value: Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_mask_type },
    "Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_to": { $Name: "Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_to", $Value: Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_to },
    "Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type": { $Name: "Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type", $Value: Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type },
    "Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_interpolation": { $Name: "Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_interpolation", $Value: Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_interpolation },
    "Enum_Sampler_Scheduler_Settings_$1JPS$2_sampler_name_out": { $Name: "Enum_Sampler_Scheduler_Settings_$1JPS$2_sampler_name_out", $Value: Enum_Sampler_Scheduler_Settings_$1JPS$2_sampler_name_out },
    "Enum_Sampler_Scheduler_Settings_$1JPS$2_scheduler_out": { $Name: "Enum_Sampler_Scheduler_Settings_$1JPS$2_scheduler_out", $Value: Enum_Sampler_Scheduler_Settings_$1JPS$2_scheduler_out },
    "Enum_Sampler_Scheduler_Settings_$1JPS$2_sampler_name": { $Name: "Enum_Sampler_Scheduler_Settings_$1JPS$2_sampler_name", $Value: Enum_Sampler_Scheduler_Settings_$1JPS$2_sampler_name },
    "Enum_Sampler_Scheduler_Settings_$1JPS$2_scheduler": { $Name: "Enum_Sampler_Scheduler_Settings_$1JPS$2_scheduler", $Value: Enum_Sampler_Scheduler_Settings_$1JPS$2_scheduler },
    "Enum_Disable_Enable_Switch_$1JPS$2_disable_enable_out": { $Name: "Enum_Disable_Enable_Switch_$1JPS$2_disable_enable_out", $Value: Enum_Disable_Enable_Switch_$1JPS$2_disable_enable_out },
    "Enum_Disable_Enable_Switch_$1JPS$2_match": { $Name: "Enum_Disable_Enable_Switch_$1JPS$2_match", $Value: Enum_Disable_Enable_Switch_$1JPS$2_match },
    "Enum_Enable_Disable_Switch_$1JPS$2_enable_disable_out": { $Name: "Enum_Enable_Disable_Switch_$1JPS$2_enable_disable_out", $Value: Enum_Enable_Disable_Switch_$1JPS$2_enable_disable_out },
    "Enum_Enable_Disable_Switch_$1JPS$2_match": { $Name: "Enum_Enable_Disable_Switch_$1JPS$2_match", $Value: Enum_Enable_Disable_Switch_$1JPS$2_match },
    "Enum_SDXL_Basic_Settings_Pipe_$1JPS$2_sampler_name_out": { $Name: "Enum_SDXL_Basic_Settings_Pipe_$1JPS$2_sampler_name_out", $Value: Enum_SDXL_Basic_Settings_Pipe_$1JPS$2_sampler_name_out },
    "Enum_SDXL_Basic_Settings_Pipe_$1JPS$2_scheduler_out": { $Name: "Enum_SDXL_Basic_Settings_Pipe_$1JPS$2_scheduler_out", $Value: Enum_SDXL_Basic_Settings_Pipe_$1JPS$2_scheduler_out },
    "Enum_SDXL_Settings_Pipe_$1JPS$2_sampler_name_out": { $Name: "Enum_SDXL_Settings_Pipe_$1JPS$2_sampler_name_out", $Value: Enum_SDXL_Settings_Pipe_$1JPS$2_sampler_name_out },
    "Enum_SDXL_Settings_Pipe_$1JPS$2_scheduler_out": { $Name: "Enum_SDXL_Settings_Pipe_$1JPS$2_scheduler_out", $Value: Enum_SDXL_Settings_Pipe_$1JPS$2_scheduler_out },
    "Enum_Crop_Image_Pipe_$1JPS$2_source_crop_pos_out": { $Name: "Enum_Crop_Image_Pipe_$1JPS$2_source_crop_pos_out", $Value: Enum_Crop_Image_Pipe_$1JPS$2_source_crop_pos_out },
    "Enum_Crop_Image_Pipe_$1JPS$2_support_crop_pos_out": { $Name: "Enum_Crop_Image_Pipe_$1JPS$2_support_crop_pos_out", $Value: Enum_Crop_Image_Pipe_$1JPS$2_support_crop_pos_out },
    "Enum_Crop_Image_Pipe_$1JPS$2_crop_intpol_out": { $Name: "Enum_Crop_Image_Pipe_$1JPS$2_crop_intpol_out", $Value: Enum_Crop_Image_Pipe_$1JPS$2_crop_intpol_out },
    "Enum_ImageToImage_Pipe_$1JPS$2_unsampler_sampler_out": { $Name: "Enum_ImageToImage_Pipe_$1JPS$2_unsampler_sampler_out", $Value: Enum_ImageToImage_Pipe_$1JPS$2_unsampler_sampler_out },
    "Enum_ImageToImage_Pipe_$1JPS$2_unsampler_scheduler_out": { $Name: "Enum_ImageToImage_Pipe_$1JPS$2_unsampler_scheduler_out", $Value: Enum_ImageToImage_Pipe_$1JPS$2_unsampler_scheduler_out },
    "Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_body_out": { $Name: "Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_body_out", $Value: Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_body_out },
    "Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_face_out": { $Name: "Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_face_out", $Value: Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_face_out },
    "Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_hand_out": { $Name: "Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_hand_out", $Value: Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_hand_out },
    "Enum_IP_Adapter_Settings_Pipe_$1JPS$2_ipa_wtype_out": { $Name: "Enum_IP_Adapter_Settings_Pipe_$1JPS$2_ipa_wtype_out", $Value: Enum_IP_Adapter_Settings_Pipe_$1JPS$2_ipa_wtype_out },
    "Enum_IP_Adapter_Settings_Pipe_$1JPS$2_ipa_crop_out": { $Name: "Enum_IP_Adapter_Settings_Pipe_$1JPS$2_ipa_crop_out", $Value: Enum_IP_Adapter_Settings_Pipe_$1JPS$2_ipa_crop_out },
    "Enum_IP_Adapter_Settings_Pipe_$1JPS$2_crop_intpol_out": { $Name: "Enum_IP_Adapter_Settings_Pipe_$1JPS$2_crop_intpol_out", $Value: Enum_IP_Adapter_Settings_Pipe_$1JPS$2_crop_intpol_out },
    "Enum_IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_ipa_wtype_out": { $Name: "Enum_IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_ipa_wtype_out", $Value: Enum_IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_ipa_wtype_out },
    "Enum_IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_prepare_intpol_out": { $Name: "Enum_IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_prepare_intpol_out", $Value: Enum_IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_prepare_intpol_out },
    "Enum_Image_Prepare_Pipe_$1JPS$2_interpolation_out": { $Name: "Enum_Image_Prepare_Pipe_$1JPS$2_interpolation_out", $Value: Enum_Image_Prepare_Pipe_$1JPS$2_interpolation_out },
    "Enum_InstantID_Source_Prepare_Pipe_$1JPS$2_interpolation_out": { $Name: "Enum_InstantID_Source_Prepare_Pipe_$1JPS$2_interpolation_out", $Value: Enum_InstantID_Source_Prepare_Pipe_$1JPS$2_interpolation_out },
    "Enum_InstantID_Source_Prepare_Pipe_$1JPS$2_flip_out": { $Name: "Enum_InstantID_Source_Prepare_Pipe_$1JPS$2_flip_out", $Value: Enum_InstantID_Source_Prepare_Pipe_$1JPS$2_flip_out },
    "Enum_InstantID_Pose_Prepare_Pipe_$1JPS$2_interpolation_out": { $Name: "Enum_InstantID_Pose_Prepare_Pipe_$1JPS$2_interpolation_out", $Value: Enum_InstantID_Pose_Prepare_Pipe_$1JPS$2_interpolation_out },
    "Enum_InstantID_Pose_Prepare_Pipe_$1JPS$2_flip_out": { $Name: "Enum_InstantID_Pose_Prepare_Pipe_$1JPS$2_flip_out", $Value: Enum_InstantID_Pose_Prepare_Pipe_$1JPS$2_flip_out },
    "Enum_InstantID_Mask_Prepare_Pipe_$1JPS$2_resize_type_out": { $Name: "Enum_InstantID_Mask_Prepare_Pipe_$1JPS$2_resize_type_out", $Value: Enum_InstantID_Mask_Prepare_Pipe_$1JPS$2_resize_type_out },
    "Enum_InstantID_Mask_Prepare_Pipe_$1JPS$2_interpolation_out": { $Name: "Enum_InstantID_Mask_Prepare_Pipe_$1JPS$2_interpolation_out", $Value: Enum_InstantID_Mask_Prepare_Pipe_$1JPS$2_interpolation_out },
    "Enum_Revision_Settings_Pipe_$1JPS$2_crop_intpol_out": { $Name: "Enum_Revision_Settings_Pipe_$1JPS$2_crop_intpol_out", $Value: Enum_Revision_Settings_Pipe_$1JPS$2_crop_intpol_out },
    "Enum_Revision_Settings_Pipe_$1JPS$2_rev1_crop_out": { $Name: "Enum_Revision_Settings_Pipe_$1JPS$2_rev1_crop_out", $Value: Enum_Revision_Settings_Pipe_$1JPS$2_rev1_crop_out },
    "Enum_Revision_Settings_Pipe_$1JPS$2_rev2_crop_out": { $Name: "Enum_Revision_Settings_Pipe_$1JPS$2_rev2_crop_out", $Value: Enum_Revision_Settings_Pipe_$1JPS$2_rev2_crop_out },
    "Enum_Text_Concatenate_$1JPS$2_delimiter": { $Name: "Enum_Text_Concatenate_$1JPS$2_delimiter", $Value: Enum_Text_Concatenate_$1JPS$2_delimiter },
    "Enum_Get_Date_Time_String_$1JPS$2_style": { $Name: "Enum_Get_Date_Time_String_$1JPS$2_style", $Value: Enum_Get_Date_Time_String_$1JPS$2_style },
    "Enum_Crop_Image_Square_$1JPS$2_crop_position": { $Name: "Enum_Crop_Image_Square_$1JPS$2_crop_position", $Value: Enum_Crop_Image_Square_$1JPS$2_crop_position },
    "Enum_Crop_Image_Square_$1JPS$2_interpolation": { $Name: "Enum_Crop_Image_Square_$1JPS$2_interpolation", $Value: Enum_Crop_Image_Square_$1JPS$2_interpolation },
    "Enum_Crop_Image_TargetSize_$1JPS$2_crop_position": { $Name: "Enum_Crop_Image_TargetSize_$1JPS$2_crop_position", $Value: Enum_Crop_Image_TargetSize_$1JPS$2_crop_position },
    "Enum_Crop_Image_TargetSize_$1JPS$2_interpolation": { $Name: "Enum_Crop_Image_TargetSize_$1JPS$2_interpolation", $Value: Enum_Crop_Image_TargetSize_$1JPS$2_interpolation },
    "Enum_Prepare_Image_$1JPS$2_interpolation": { $Name: "Enum_Prepare_Image_$1JPS$2_interpolation", $Value: Enum_Prepare_Image_$1JPS$2_interpolation },
    "Enum_Prepare_Image_Plus_$1JPS$2_interpolation": { $Name: "Enum_Prepare_Image_Plus_$1JPS$2_interpolation", $Value: Enum_Prepare_Image_Plus_$1JPS$2_interpolation },
    "Enum_Prepare_Image_Plus_$1JPS$2_resize_type": { $Name: "Enum_Prepare_Image_Plus_$1JPS$2_resize_type", $Value: Enum_Prepare_Image_Plus_$1JPS$2_resize_type },
    "Enum_Prepare_Image_Plus_$1JPS$2_flip": { $Name: "Enum_Prepare_Image_Plus_$1JPS$2_flip", $Value: Enum_Prepare_Image_Plus_$1JPS$2_flip },
    "Enum_Prepare_Image_Tiled_IPA_$1JPS$2_interpolation": { $Name: "Enum_Prepare_Image_Tiled_IPA_$1JPS$2_interpolation", $Value: Enum_Prepare_Image_Tiled_IPA_$1JPS$2_interpolation },
    "Enum_SDXL_Prompt_Styler_$1JPS$2_artist": { $Name: "Enum_SDXL_Prompt_Styler_$1JPS$2_artist", $Value: Enum_SDXL_Prompt_Styler_$1JPS$2_artist },
    "Enum_SDXL_Prompt_Styler_$1JPS$2_movie": { $Name: "Enum_SDXL_Prompt_Styler_$1JPS$2_movie", $Value: Enum_SDXL_Prompt_Styler_$1JPS$2_movie },
    "Enum_SDXL_Prompt_Styler_$1JPS$2_style": { $Name: "Enum_SDXL_Prompt_Styler_$1JPS$2_style", $Value: Enum_SDXL_Prompt_Styler_$1JPS$2_style },
    "Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance": { $Name: "Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance", $Value: Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance },
    "Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_negative": { $Name: "Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_negative", $Value: Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_negative },
    "Enum_SDXL_Prompt_Styler_$1JPS$2_universal_negative": { $Name: "Enum_SDXL_Prompt_Styler_$1JPS$2_universal_negative", $Value: Enum_SDXL_Prompt_Styler_$1JPS$2_universal_negative },
    "Enum_SDXL_Prompt_Handling_$1JPS$2_handling": { $Name: "Enum_SDXL_Prompt_Handling_$1JPS$2_handling", $Value: Enum_SDXL_Prompt_Handling_$1JPS$2_handling },
    "Enum_SDXL_Prompt_Handling_Plus_$1JPS$2_handling": { $Name: "Enum_SDXL_Prompt_Handling_Plus_$1JPS$2_handling", $Value: Enum_SDXL_Prompt_Handling_Plus_$1JPS$2_handling },
    Enum_NNLatentUpscale_version: { $Name: "Enum_NNLatentUpscale_version", $Value: Enum_NNLatentUpscale_version },
    "Enum_BNK$_NoisyLatentImage_source": { $Name: "Enum_BNK$_NoisyLatentImage_source", $Value: Enum_BNK$_NoisyLatentImage_source },
    "Enum_BNK$_GetSigma_sampler_name": { $Name: "Enum_BNK$_GetSigma_sampler_name", $Value: Enum_BNK$_GetSigma_sampler_name },
    "Enum_BNK$_GetSigma_scheduler": { $Name: "Enum_BNK$_GetSigma_scheduler", $Value: Enum_BNK$_GetSigma_scheduler },
    "Enum_BNK$_Unsampler_sampler_name": { $Name: "Enum_BNK$_Unsampler_sampler_name", $Value: Enum_BNK$_Unsampler_sampler_name },
    "Enum_BNK$_Unsampler_scheduler": { $Name: "Enum_BNK$_Unsampler_scheduler", $Value: Enum_BNK$_Unsampler_scheduler },
    "Enum_BNK$_Unsampler_normalize": { $Name: "Enum_BNK$_Unsampler_normalize", $Value: Enum_BNK$_Unsampler_normalize },
    "Enum_BNK$_TiledKSamplerAdvanced_add_noise": { $Name: "Enum_BNK$_TiledKSamplerAdvanced_add_noise", $Value: Enum_BNK$_TiledKSamplerAdvanced_add_noise },
    "Enum_BNK$_TiledKSamplerAdvanced_tiling_strategy": { $Name: "Enum_BNK$_TiledKSamplerAdvanced_tiling_strategy", $Value: Enum_BNK$_TiledKSamplerAdvanced_tiling_strategy },
    "Enum_BNK$_TiledKSamplerAdvanced_sampler_name": { $Name: "Enum_BNK$_TiledKSamplerAdvanced_sampler_name", $Value: Enum_BNK$_TiledKSamplerAdvanced_sampler_name },
    "Enum_BNK$_TiledKSamplerAdvanced_scheduler": { $Name: "Enum_BNK$_TiledKSamplerAdvanced_scheduler", $Value: Enum_BNK$_TiledKSamplerAdvanced_scheduler },
    "Enum_BNK$_TiledKSamplerAdvanced_return_with_leftover_noise": { $Name: "Enum_BNK$_TiledKSamplerAdvanced_return_with_leftover_noise", $Value: Enum_BNK$_TiledKSamplerAdvanced_return_with_leftover_noise },
    "Enum_BNK$_TiledKSamplerAdvanced_preview": { $Name: "Enum_BNK$_TiledKSamplerAdvanced_preview", $Value: Enum_BNK$_TiledKSamplerAdvanced_preview },
    "Enum_BNK$_TiledKSampler_tiling_strategy": { $Name: "Enum_BNK$_TiledKSampler_tiling_strategy", $Value: Enum_BNK$_TiledKSampler_tiling_strategy },
    "Enum_BNK$_TiledKSampler_sampler_name": { $Name: "Enum_BNK$_TiledKSampler_sampler_name", $Value: Enum_BNK$_TiledKSampler_sampler_name },
    "Enum_BNK$_TiledKSampler_scheduler": { $Name: "Enum_BNK$_TiledKSampler_scheduler", $Value: Enum_BNK$_TiledKSampler_scheduler },
    Enum_ttN_tinyLoader_ckpt_name: { $Name: "Enum_ttN_tinyLoader_ckpt_name", $Value: Enum_ttN_tinyLoader_ckpt_name },
    Enum_ttN_tinyLoader_config_name: { $Name: "Enum_ttN_tinyLoader_config_name", $Value: Enum_ttN_tinyLoader_config_name },
    Enum_ttN_tinyLoader_sampling: { $Name: "Enum_ttN_tinyLoader_sampling", $Value: Enum_ttN_tinyLoader_sampling },
    Enum_ttN_tinyLoader_vae_name: { $Name: "Enum_ttN_tinyLoader_vae_name", $Value: Enum_ttN_tinyLoader_vae_name },
    Enum_ttN_tinyLoader_empty_latent_aspect: { $Name: "Enum_ttN_tinyLoader_empty_latent_aspect", $Value: Enum_ttN_tinyLoader_empty_latent_aspect },
    Enum_ttN_conditioning_positive_token_normalization: { $Name: "Enum_ttN_conditioning_positive_token_normalization", $Value: Enum_ttN_conditioning_positive_token_normalization },
    Enum_ttN_conditioning_positive_weight_interpretation: { $Name: "Enum_ttN_conditioning_positive_weight_interpretation", $Value: Enum_ttN_conditioning_positive_weight_interpretation },
    Enum_ttN_conditioning_negative_token_normalization: { $Name: "Enum_ttN_conditioning_negative_token_normalization", $Value: Enum_ttN_conditioning_negative_token_normalization },
    Enum_ttN_conditioning_negative_weight_interpretation: { $Name: "Enum_ttN_conditioning_negative_weight_interpretation", $Value: Enum_ttN_conditioning_negative_weight_interpretation },
    "Enum_ttN_KSampler$_v2_lora_name": { $Name: "Enum_ttN_KSampler$_v2_lora_name", $Value: Enum_ttN_KSampler$_v2_lora_name },
    "Enum_ttN_KSampler$_v2_upscale_method": { $Name: "Enum_ttN_KSampler$_v2_upscale_method", $Value: Enum_ttN_KSampler$_v2_upscale_method },
    "Enum_ttN_KSampler$_v2_upscale_model_name": { $Name: "Enum_ttN_KSampler$_v2_upscale_model_name", $Value: Enum_ttN_KSampler$_v2_upscale_model_name },
    "Enum_ttN_KSampler$_v2_rescale": { $Name: "Enum_ttN_KSampler$_v2_rescale", $Value: Enum_ttN_KSampler$_v2_rescale },
    "Enum_ttN_KSampler$_v2_crop": { $Name: "Enum_ttN_KSampler$_v2_crop", $Value: Enum_ttN_KSampler$_v2_crop },
    "Enum_ttN_KSampler$_v2_sampler_name": { $Name: "Enum_ttN_KSampler$_v2_sampler_name", $Value: Enum_ttN_KSampler$_v2_sampler_name },
    "Enum_ttN_KSampler$_v2_scheduler": { $Name: "Enum_ttN_KSampler$_v2_scheduler", $Value: Enum_ttN_KSampler$_v2_scheduler },
    "Enum_ttN_KSampler$_v2_image_output": { $Name: "Enum_ttN_KSampler$_v2_image_output", $Value: Enum_ttN_KSampler$_v2_image_output },
    "Enum_ttN_KSampler$_v2_file_type": { $Name: "Enum_ttN_KSampler$_v2_file_type", $Value: Enum_ttN_KSampler$_v2_file_type },
    "Enum_ttN_pipeLoader$_v2_ckpt_name": { $Name: "Enum_ttN_pipeLoader$_v2_ckpt_name", $Value: Enum_ttN_pipeLoader$_v2_ckpt_name },
    "Enum_ttN_pipeLoader$_v2_config_name": { $Name: "Enum_ttN_pipeLoader$_v2_config_name", $Value: Enum_ttN_pipeLoader$_v2_config_name },
    "Enum_ttN_pipeLoader$_v2_vae_name": { $Name: "Enum_ttN_pipeLoader$_v2_vae_name", $Value: Enum_ttN_pipeLoader$_v2_vae_name },
    "Enum_ttN_pipeLoader$_v2_positive_token_normalization": { $Name: "Enum_ttN_pipeLoader$_v2_positive_token_normalization", $Value: Enum_ttN_pipeLoader$_v2_positive_token_normalization },
    "Enum_ttN_pipeLoader$_v2_positive_weight_interpretation": { $Name: "Enum_ttN_pipeLoader$_v2_positive_weight_interpretation", $Value: Enum_ttN_pipeLoader$_v2_positive_weight_interpretation },
    "Enum_ttN_pipeLoader$_v2_negative_token_normalization": { $Name: "Enum_ttN_pipeLoader$_v2_negative_token_normalization", $Value: Enum_ttN_pipeLoader$_v2_negative_token_normalization },
    "Enum_ttN_pipeLoader$_v2_negative_weight_interpretation": { $Name: "Enum_ttN_pipeLoader$_v2_negative_weight_interpretation", $Value: Enum_ttN_pipeLoader$_v2_negative_weight_interpretation },
    "Enum_ttN_pipeLoader$_v2_empty_latent_aspect": { $Name: "Enum_ttN_pipeLoader$_v2_empty_latent_aspect", $Value: Enum_ttN_pipeLoader$_v2_empty_latent_aspect },
    "Enum_ttN_pipeKSampler$_v2_lora_name": { $Name: "Enum_ttN_pipeKSampler$_v2_lora_name", $Value: Enum_ttN_pipeKSampler$_v2_lora_name },
    "Enum_ttN_pipeKSampler$_v2_upscale_method": { $Name: "Enum_ttN_pipeKSampler$_v2_upscale_method", $Value: Enum_ttN_pipeKSampler$_v2_upscale_method },
    "Enum_ttN_pipeKSampler$_v2_upscale_model_name": { $Name: "Enum_ttN_pipeKSampler$_v2_upscale_model_name", $Value: Enum_ttN_pipeKSampler$_v2_upscale_model_name },
    "Enum_ttN_pipeKSampler$_v2_rescale": { $Name: "Enum_ttN_pipeKSampler$_v2_rescale", $Value: Enum_ttN_pipeKSampler$_v2_rescale },
    "Enum_ttN_pipeKSampler$_v2_crop": { $Name: "Enum_ttN_pipeKSampler$_v2_crop", $Value: Enum_ttN_pipeKSampler$_v2_crop },
    "Enum_ttN_pipeKSampler$_v2_sampler_name": { $Name: "Enum_ttN_pipeKSampler$_v2_sampler_name", $Value: Enum_ttN_pipeKSampler$_v2_sampler_name },
    "Enum_ttN_pipeKSampler$_v2_scheduler": { $Name: "Enum_ttN_pipeKSampler$_v2_scheduler", $Value: Enum_ttN_pipeKSampler$_v2_scheduler },
    "Enum_ttN_pipeKSampler$_v2_image_output": { $Name: "Enum_ttN_pipeKSampler$_v2_image_output", $Value: Enum_ttN_pipeKSampler$_v2_image_output },
    "Enum_ttN_pipeKSampler$_v2_file_type": { $Name: "Enum_ttN_pipeKSampler$_v2_file_type", $Value: Enum_ttN_pipeKSampler$_v2_file_type },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_lora_name": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_lora_name", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_lora_name },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_upscale_method": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_upscale_method", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_upscale_method },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_upscale_model_name": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_upscale_model_name", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_upscale_model_name },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_rescale": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_rescale", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_rescale },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_crop": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_crop", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_crop },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_add_noise": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_add_noise", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_add_noise },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_sampler_name": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_sampler_name", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_sampler_name },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_scheduler": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_scheduler", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_scheduler },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_return_with_leftover_noise": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_return_with_leftover_noise", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_return_with_leftover_noise },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_image_output": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_image_output", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_image_output },
    "Enum_ttN_pipeKSamplerAdvanced$_v2_file_type": { $Name: "Enum_ttN_pipeKSamplerAdvanced$_v2_file_type", $Value: Enum_ttN_pipeKSamplerAdvanced$_v2_file_type },
    "Enum_ttN_pipeLoaderSDXL$_v2_ckpt_name": { $Name: "Enum_ttN_pipeLoaderSDXL$_v2_ckpt_name", $Value: Enum_ttN_pipeLoaderSDXL$_v2_ckpt_name },
    "Enum_ttN_pipeLoaderSDXL$_v2_config_name": { $Name: "Enum_ttN_pipeLoaderSDXL$_v2_config_name", $Value: Enum_ttN_pipeLoaderSDXL$_v2_config_name },
    "Enum_ttN_pipeLoaderSDXL$_v2_vae_name": { $Name: "Enum_ttN_pipeLoaderSDXL$_v2_vae_name", $Value: Enum_ttN_pipeLoaderSDXL$_v2_vae_name },
    "Enum_ttN_pipeLoaderSDXL$_v2_refiner_ckpt_name": { $Name: "Enum_ttN_pipeLoaderSDXL$_v2_refiner_ckpt_name", $Value: Enum_ttN_pipeLoaderSDXL$_v2_refiner_ckpt_name },
    "Enum_ttN_pipeLoaderSDXL$_v2_refiner_config_name": { $Name: "Enum_ttN_pipeLoaderSDXL$_v2_refiner_config_name", $Value: Enum_ttN_pipeLoaderSDXL$_v2_refiner_config_name },
    "Enum_ttN_pipeLoaderSDXL$_v2_conditioning_aspect": { $Name: "Enum_ttN_pipeLoaderSDXL$_v2_conditioning_aspect", $Value: Enum_ttN_pipeLoaderSDXL$_v2_conditioning_aspect },
    "Enum_ttN_pipeLoaderSDXL$_v2_target_aspect": { $Name: "Enum_ttN_pipeLoaderSDXL$_v2_target_aspect", $Value: Enum_ttN_pipeLoaderSDXL$_v2_target_aspect },
    "Enum_ttN_pipeLoaderSDXL$_v2_empty_latent_aspect": { $Name: "Enum_ttN_pipeLoaderSDXL$_v2_empty_latent_aspect", $Value: Enum_ttN_pipeLoaderSDXL$_v2_empty_latent_aspect },
    "Enum_ttN_pipeKSamplerSDXL$_v2_lora_name": { $Name: "Enum_ttN_pipeKSamplerSDXL$_v2_lora_name", $Value: Enum_ttN_pipeKSamplerSDXL$_v2_lora_name },
    "Enum_ttN_pipeKSamplerSDXL$_v2_upscale_method": { $Name: "Enum_ttN_pipeKSamplerSDXL$_v2_upscale_method", $Value: Enum_ttN_pipeKSamplerSDXL$_v2_upscale_method },
    "Enum_ttN_pipeKSamplerSDXL$_v2_upscale_model_name": { $Name: "Enum_ttN_pipeKSamplerSDXL$_v2_upscale_model_name", $Value: Enum_ttN_pipeKSamplerSDXL$_v2_upscale_model_name },
    "Enum_ttN_pipeKSamplerSDXL$_v2_rescale": { $Name: "Enum_ttN_pipeKSamplerSDXL$_v2_rescale", $Value: Enum_ttN_pipeKSamplerSDXL$_v2_rescale },
    "Enum_ttN_pipeKSamplerSDXL$_v2_crop": { $Name: "Enum_ttN_pipeKSamplerSDXL$_v2_crop", $Value: Enum_ttN_pipeKSamplerSDXL$_v2_crop },
    "Enum_ttN_pipeKSamplerSDXL$_v2_sampler_name": { $Name: "Enum_ttN_pipeKSamplerSDXL$_v2_sampler_name", $Value: Enum_ttN_pipeKSamplerSDXL$_v2_sampler_name },
    "Enum_ttN_pipeKSamplerSDXL$_v2_scheduler": { $Name: "Enum_ttN_pipeKSamplerSDXL$_v2_scheduler", $Value: Enum_ttN_pipeKSamplerSDXL$_v2_scheduler },
    "Enum_ttN_pipeKSamplerSDXL$_v2_image_output": { $Name: "Enum_ttN_pipeKSamplerSDXL$_v2_image_output", $Value: Enum_ttN_pipeKSamplerSDXL$_v2_image_output },
    "Enum_ttN_pipeKSamplerSDXL$_v2_file_type": { $Name: "Enum_ttN_pipeKSamplerSDXL$_v2_file_type", $Value: Enum_ttN_pipeKSamplerSDXL$_v2_file_type },
    Enum_ttN_advPlot_images_image_output: { $Name: "Enum_ttN_advPlot_images_image_output", $Value: Enum_ttN_advPlot_images_image_output },
    Enum_ttN_advPlot_images_file_type: { $Name: "Enum_ttN_advPlot_images_file_type", $Value: Enum_ttN_advPlot_images_file_type },
    Enum_ttN_advPlot_range_node: { $Name: "Enum_ttN_advPlot_range_node", $Value: Enum_ttN_advPlot_range_node },
    Enum_ttN_advPlot_range_widget: { $Name: "Enum_ttN_advPlot_range_widget", $Value: Enum_ttN_advPlot_range_widget },
    Enum_ttN_advPlot_range_range_mode: { $Name: "Enum_ttN_advPlot_range_range_mode", $Value: Enum_ttN_advPlot_range_range_mode },
    Enum_ttN_advPlot_range_label_type: { $Name: "Enum_ttN_advPlot_range_label_type", $Value: Enum_ttN_advPlot_range_label_type },
    Enum_ttN_advPlot_string_node: { $Name: "Enum_ttN_advPlot_string_node", $Value: Enum_ttN_advPlot_string_node },
    Enum_ttN_advPlot_string_widget: { $Name: "Enum_ttN_advPlot_string_widget", $Value: Enum_ttN_advPlot_string_widget },
    Enum_ttN_advPlot_string_label_type: { $Name: "Enum_ttN_advPlot_string_label_type", $Value: Enum_ttN_advPlot_string_label_type },
    Enum_ttN_advPlot_combo_node: { $Name: "Enum_ttN_advPlot_combo_node", $Value: Enum_ttN_advPlot_combo_node },
    Enum_ttN_advPlot_combo_widget: { $Name: "Enum_ttN_advPlot_combo_widget", $Value: Enum_ttN_advPlot_combo_widget },
    Enum_ttN_advPlot_combo_mode: { $Name: "Enum_ttN_advPlot_combo_mode", $Value: Enum_ttN_advPlot_combo_mode },
    Enum_ttN_advPlot_combo_start_from: { $Name: "Enum_ttN_advPlot_combo_start_from", $Value: Enum_ttN_advPlot_combo_start_from },
    Enum_ttN_advPlot_combo_end_with: { $Name: "Enum_ttN_advPlot_combo_end_with", $Value: Enum_ttN_advPlot_combo_end_with },
    Enum_ttN_advPlot_combo_select: { $Name: "Enum_ttN_advPlot_combo_select", $Value: Enum_ttN_advPlot_combo_select },
    Enum_ttN_advPlot_combo_label_type: { $Name: "Enum_ttN_advPlot_combo_label_type", $Value: Enum_ttN_advPlot_combo_label_type },
    Enum_ttN_pipeEncodeConcat_toggle: { $Name: "Enum_ttN_pipeEncodeConcat_toggle", $Value: Enum_ttN_pipeEncodeConcat_toggle },
    Enum_ttN_pipeEncodeConcat_positive_token_normalization: { $Name: "Enum_ttN_pipeEncodeConcat_positive_token_normalization", $Value: Enum_ttN_pipeEncodeConcat_positive_token_normalization },
    Enum_ttN_pipeEncodeConcat_positive_weight_interpretation: { $Name: "Enum_ttN_pipeEncodeConcat_positive_weight_interpretation", $Value: Enum_ttN_pipeEncodeConcat_positive_weight_interpretation },
    Enum_ttN_pipeEncodeConcat_negative_token_normalization: { $Name: "Enum_ttN_pipeEncodeConcat_negative_token_normalization", $Value: Enum_ttN_pipeEncodeConcat_negative_token_normalization },
    Enum_ttN_pipeEncodeConcat_negative_weight_interpretation: { $Name: "Enum_ttN_pipeEncodeConcat_negative_weight_interpretation", $Value: Enum_ttN_pipeEncodeConcat_negative_weight_interpretation },
    Enum_ttN_pipeLoraStack_toggle: { $Name: "Enum_ttN_pipeLoraStack_toggle", $Value: Enum_ttN_pipeLoraStack_toggle },
    Enum_ttN_pipeLoraStack_mode: { $Name: "Enum_ttN_pipeLoraStack_mode", $Value: Enum_ttN_pipeLoraStack_mode },
    Enum_ttN_pipeLoraStack_lora_1_name: { $Name: "Enum_ttN_pipeLoraStack_lora_1_name", $Value: Enum_ttN_pipeLoraStack_lora_1_name },
    Enum_ttN_pipeLoraStack_lora_2_name: { $Name: "Enum_ttN_pipeLoraStack_lora_2_name", $Value: Enum_ttN_pipeLoraStack_lora_2_name },
    Enum_ttN_pipeLoraStack_lora_3_name: { $Name: "Enum_ttN_pipeLoraStack_lora_3_name", $Value: Enum_ttN_pipeLoraStack_lora_3_name },
    Enum_ttN_pipeLoraStack_lora_4_name: { $Name: "Enum_ttN_pipeLoraStack_lora_4_name", $Value: Enum_ttN_pipeLoraStack_lora_4_name },
    Enum_ttN_pipeLoraStack_lora_5_name: { $Name: "Enum_ttN_pipeLoraStack_lora_5_name", $Value: Enum_ttN_pipeLoraStack_lora_5_name },
    Enum_ttN_pipeLoraStack_lora_6_name: { $Name: "Enum_ttN_pipeLoraStack_lora_6_name", $Value: Enum_ttN_pipeLoraStack_lora_6_name },
    Enum_ttN_pipeLoraStack_lora_7_name: { $Name: "Enum_ttN_pipeLoraStack_lora_7_name", $Value: Enum_ttN_pipeLoraStack_lora_7_name },
    Enum_ttN_pipeLoraStack_lora_8_name: { $Name: "Enum_ttN_pipeLoraStack_lora_8_name", $Value: Enum_ttN_pipeLoraStack_lora_8_name },
    Enum_ttN_pipeLoraStack_lora_9_name: { $Name: "Enum_ttN_pipeLoraStack_lora_9_name", $Value: Enum_ttN_pipeLoraStack_lora_9_name },
    Enum_ttN_pipeLoraStack_lora_10_name: { $Name: "Enum_ttN_pipeLoraStack_lora_10_name", $Value: Enum_ttN_pipeLoraStack_lora_10_name },
    Enum_ttN_pipeLoraStack_lora_11_name: { $Name: "Enum_ttN_pipeLoraStack_lora_11_name", $Value: Enum_ttN_pipeLoraStack_lora_11_name },
    Enum_ttN_pipeLoraStack_lora_12_name: { $Name: "Enum_ttN_pipeLoraStack_lora_12_name", $Value: Enum_ttN_pipeLoraStack_lora_12_name },
    Enum_ttN_pipeLoraStack_lora_13_name: { $Name: "Enum_ttN_pipeLoraStack_lora_13_name", $Value: Enum_ttN_pipeLoraStack_lora_13_name },
    Enum_ttN_pipeLoraStack_lora_14_name: { $Name: "Enum_ttN_pipeLoraStack_lora_14_name", $Value: Enum_ttN_pipeLoraStack_lora_14_name },
    Enum_ttN_pipeLoraStack_lora_15_name: { $Name: "Enum_ttN_pipeLoraStack_lora_15_name", $Value: Enum_ttN_pipeLoraStack_lora_15_name },
    Enum_ttN_pipeLoraStack_lora_16_name: { $Name: "Enum_ttN_pipeLoraStack_lora_16_name", $Value: Enum_ttN_pipeLoraStack_lora_16_name },
    Enum_ttN_pipeLoraStack_lora_17_name: { $Name: "Enum_ttN_pipeLoraStack_lora_17_name", $Value: Enum_ttN_pipeLoraStack_lora_17_name },
    Enum_ttN_pipeLoraStack_lora_18_name: { $Name: "Enum_ttN_pipeLoraStack_lora_18_name", $Value: Enum_ttN_pipeLoraStack_lora_18_name },
    Enum_ttN_pipeLoraStack_lora_19_name: { $Name: "Enum_ttN_pipeLoraStack_lora_19_name", $Value: Enum_ttN_pipeLoraStack_lora_19_name },
    Enum_ttN_pipeLoraStack_lora_20_name: { $Name: "Enum_ttN_pipeLoraStack_lora_20_name", $Value: Enum_ttN_pipeLoraStack_lora_20_name },
    Enum_ttN_multiModelMerge_ckpt_A_name: { $Name: "Enum_ttN_multiModelMerge_ckpt_A_name", $Value: Enum_ttN_multiModelMerge_ckpt_A_name },
    Enum_ttN_multiModelMerge_config_A_name: { $Name: "Enum_ttN_multiModelMerge_config_A_name", $Value: Enum_ttN_multiModelMerge_config_A_name },
    Enum_ttN_multiModelMerge_ckpt_B_name: { $Name: "Enum_ttN_multiModelMerge_ckpt_B_name", $Value: Enum_ttN_multiModelMerge_ckpt_B_name },
    Enum_ttN_multiModelMerge_config_B_name: { $Name: "Enum_ttN_multiModelMerge_config_B_name", $Value: Enum_ttN_multiModelMerge_config_B_name },
    Enum_ttN_multiModelMerge_ckpt_C_name: { $Name: "Enum_ttN_multiModelMerge_ckpt_C_name", $Value: Enum_ttN_multiModelMerge_ckpt_C_name },
    Enum_ttN_multiModelMerge_config_C_name: { $Name: "Enum_ttN_multiModelMerge_config_C_name", $Value: Enum_ttN_multiModelMerge_config_C_name },
    Enum_ttN_multiModelMerge_model_interpolation: { $Name: "Enum_ttN_multiModelMerge_model_interpolation", $Value: Enum_ttN_multiModelMerge_model_interpolation },
    Enum_ttN_multiModelMerge_clip_interpolation: { $Name: "Enum_ttN_multiModelMerge_clip_interpolation", $Value: Enum_ttN_multiModelMerge_clip_interpolation },
    Enum_ttN_debugInput_console_color: { $Name: "Enum_ttN_debugInput_console_color", $Value: Enum_ttN_debugInput_console_color },
    Enum_ttN_textDebug_print_to_console: { $Name: "Enum_ttN_textDebug_print_to_console", $Value: Enum_ttN_textDebug_print_to_console },
    Enum_ttN_textDebug_execute: { $Name: "Enum_ttN_textDebug_execute", $Value: Enum_ttN_textDebug_execute },
    Enum_ttN_textCycleLine_index_control: { $Name: "Enum_ttN_textCycleLine_index_control", $Value: Enum_ttN_textCycleLine_index_control },
    Enum_ttN_textOutput_text_output: { $Name: "Enum_ttN_textOutput_text_output", $Value: Enum_ttN_textOutput_text_output },
    Enum_ttN_textOutput_number_padding: { $Name: "Enum_ttN_textOutput_number_padding", $Value: Enum_ttN_textOutput_number_padding },
    Enum_ttN_textOutput_file_type: { $Name: "Enum_ttN_textOutput_file_type", $Value: Enum_ttN_textOutput_file_type },
    Enum_ttN_imageOutput_image_output: { $Name: "Enum_ttN_imageOutput_image_output", $Value: Enum_ttN_imageOutput_image_output },
    Enum_ttN_imageOutput_number_padding: { $Name: "Enum_ttN_imageOutput_number_padding", $Value: Enum_ttN_imageOutput_number_padding },
    Enum_ttN_imageOutput_file_type: { $Name: "Enum_ttN_imageOutput_file_type", $Value: Enum_ttN_imageOutput_file_type },
    Enum_ttN_imageREMBG_image_output: { $Name: "Enum_ttN_imageREMBG_image_output", $Value: Enum_ttN_imageREMBG_image_output },
    Enum_ttN_hiresfixScale_model_name: { $Name: "Enum_ttN_hiresfixScale_model_name", $Value: Enum_ttN_hiresfixScale_model_name },
    Enum_ttN_hiresfixScale_rescale_after_model: { $Name: "Enum_ttN_hiresfixScale_rescale_after_model", $Value: Enum_ttN_hiresfixScale_rescale_after_model },
    Enum_ttN_hiresfixScale_rescale_method: { $Name: "Enum_ttN_hiresfixScale_rescale_method", $Value: Enum_ttN_hiresfixScale_rescale_method },
    Enum_ttN_hiresfixScale_rescale: { $Name: "Enum_ttN_hiresfixScale_rescale", $Value: Enum_ttN_hiresfixScale_rescale },
    Enum_ttN_hiresfixScale_crop: { $Name: "Enum_ttN_hiresfixScale_crop", $Value: Enum_ttN_hiresfixScale_crop },
    Enum_ttN_hiresfixScale_image_output: { $Name: "Enum_ttN_hiresfixScale_image_output", $Value: Enum_ttN_hiresfixScale_image_output },
    Enum_ttN_hiresfixScale_output_latent: { $Name: "Enum_ttN_hiresfixScale_output_latent", $Value: Enum_ttN_hiresfixScale_output_latent },
    Enum_ttN_xyPlot_output_individuals: { $Name: "Enum_ttN_xyPlot_output_individuals", $Value: Enum_ttN_xyPlot_output_individuals },
    Enum_ttN_xyPlot_flip_xy: { $Name: "Enum_ttN_xyPlot_flip_xy", $Value: Enum_ttN_xyPlot_flip_xy },
    Enum_ttN_xyPlot_x_axis: { $Name: "Enum_ttN_xyPlot_x_axis", $Value: Enum_ttN_xyPlot_x_axis },
    Enum_ttN_xyPlot_y_axis: { $Name: "Enum_ttN_xyPlot_y_axis", $Value: Enum_ttN_xyPlot_y_axis },
    Enum_ttN_pipeLoader_ckpt_name: { $Name: "Enum_ttN_pipeLoader_ckpt_name", $Value: Enum_ttN_pipeLoader_ckpt_name },
    Enum_ttN_pipeLoader_config_name: { $Name: "Enum_ttN_pipeLoader_config_name", $Value: Enum_ttN_pipeLoader_config_name },
    Enum_ttN_pipeLoader_vae_name: { $Name: "Enum_ttN_pipeLoader_vae_name", $Value: Enum_ttN_pipeLoader_vae_name },
    Enum_ttN_pipeLoader_lora1_name: { $Name: "Enum_ttN_pipeLoader_lora1_name", $Value: Enum_ttN_pipeLoader_lora1_name },
    Enum_ttN_pipeLoader_lora2_name: { $Name: "Enum_ttN_pipeLoader_lora2_name", $Value: Enum_ttN_pipeLoader_lora2_name },
    Enum_ttN_pipeLoader_lora3_name: { $Name: "Enum_ttN_pipeLoader_lora3_name", $Value: Enum_ttN_pipeLoader_lora3_name },
    Enum_ttN_pipeLoader_positive_token_normalization: { $Name: "Enum_ttN_pipeLoader_positive_token_normalization", $Value: Enum_ttN_pipeLoader_positive_token_normalization },
    Enum_ttN_pipeLoader_positive_weight_interpretation: { $Name: "Enum_ttN_pipeLoader_positive_weight_interpretation", $Value: Enum_ttN_pipeLoader_positive_weight_interpretation },
    Enum_ttN_pipeLoader_negative_token_normalization: { $Name: "Enum_ttN_pipeLoader_negative_token_normalization", $Value: Enum_ttN_pipeLoader_negative_token_normalization },
    Enum_ttN_pipeLoader_negative_weight_interpretation: { $Name: "Enum_ttN_pipeLoader_negative_weight_interpretation", $Value: Enum_ttN_pipeLoader_negative_weight_interpretation },
    Enum_ttN_pipeKSampler_lora_name: { $Name: "Enum_ttN_pipeKSampler_lora_name", $Value: Enum_ttN_pipeKSampler_lora_name },
    Enum_ttN_pipeKSampler_upscale_method: { $Name: "Enum_ttN_pipeKSampler_upscale_method", $Value: Enum_ttN_pipeKSampler_upscale_method },
    Enum_ttN_pipeKSampler_crop: { $Name: "Enum_ttN_pipeKSampler_crop", $Value: Enum_ttN_pipeKSampler_crop },
    Enum_ttN_pipeKSampler_sampler_state: { $Name: "Enum_ttN_pipeKSampler_sampler_state", $Value: Enum_ttN_pipeKSampler_sampler_state },
    Enum_ttN_pipeKSampler_sampler_name: { $Name: "Enum_ttN_pipeKSampler_sampler_name", $Value: Enum_ttN_pipeKSampler_sampler_name },
    Enum_ttN_pipeKSampler_scheduler: { $Name: "Enum_ttN_pipeKSampler_scheduler", $Value: Enum_ttN_pipeKSampler_scheduler },
    Enum_ttN_pipeKSampler_image_output: { $Name: "Enum_ttN_pipeKSampler_image_output", $Value: Enum_ttN_pipeKSampler_image_output },
    Enum_ttN_pipeKSamplerAdvanced_lora_name: { $Name: "Enum_ttN_pipeKSamplerAdvanced_lora_name", $Value: Enum_ttN_pipeKSamplerAdvanced_lora_name },
    Enum_ttN_pipeKSamplerAdvanced_upscale_method: { $Name: "Enum_ttN_pipeKSamplerAdvanced_upscale_method", $Value: Enum_ttN_pipeKSamplerAdvanced_upscale_method },
    Enum_ttN_pipeKSamplerAdvanced_crop: { $Name: "Enum_ttN_pipeKSamplerAdvanced_crop", $Value: Enum_ttN_pipeKSamplerAdvanced_crop },
    Enum_ttN_pipeKSamplerAdvanced_sampler_state: { $Name: "Enum_ttN_pipeKSamplerAdvanced_sampler_state", $Value: Enum_ttN_pipeKSamplerAdvanced_sampler_state },
    Enum_ttN_pipeKSamplerAdvanced_add_noise: { $Name: "Enum_ttN_pipeKSamplerAdvanced_add_noise", $Value: Enum_ttN_pipeKSamplerAdvanced_add_noise },
    Enum_ttN_pipeKSamplerAdvanced_sampler_name: { $Name: "Enum_ttN_pipeKSamplerAdvanced_sampler_name", $Value: Enum_ttN_pipeKSamplerAdvanced_sampler_name },
    Enum_ttN_pipeKSamplerAdvanced_scheduler: { $Name: "Enum_ttN_pipeKSamplerAdvanced_scheduler", $Value: Enum_ttN_pipeKSamplerAdvanced_scheduler },
    Enum_ttN_pipeKSamplerAdvanced_return_with_leftover_noise: { $Name: "Enum_ttN_pipeKSamplerAdvanced_return_with_leftover_noise", $Value: Enum_ttN_pipeKSamplerAdvanced_return_with_leftover_noise },
    Enum_ttN_pipeKSamplerAdvanced_image_output: { $Name: "Enum_ttN_pipeKSamplerAdvanced_image_output", $Value: Enum_ttN_pipeKSamplerAdvanced_image_output },
    Enum_ttN_pipeLoaderSDXL_ckpt_name: { $Name: "Enum_ttN_pipeLoaderSDXL_ckpt_name", $Value: Enum_ttN_pipeLoaderSDXL_ckpt_name },
    Enum_ttN_pipeLoaderSDXL_vae_name: { $Name: "Enum_ttN_pipeLoaderSDXL_vae_name", $Value: Enum_ttN_pipeLoaderSDXL_vae_name },
    Enum_ttN_pipeLoaderSDXL_lora1_name: { $Name: "Enum_ttN_pipeLoaderSDXL_lora1_name", $Value: Enum_ttN_pipeLoaderSDXL_lora1_name },
    Enum_ttN_pipeLoaderSDXL_lora2_name: { $Name: "Enum_ttN_pipeLoaderSDXL_lora2_name", $Value: Enum_ttN_pipeLoaderSDXL_lora2_name },
    Enum_ttN_pipeLoaderSDXL_refiner_ckpt_name: { $Name: "Enum_ttN_pipeLoaderSDXL_refiner_ckpt_name", $Value: Enum_ttN_pipeLoaderSDXL_refiner_ckpt_name },
    Enum_ttN_pipeLoaderSDXL_refiner_vae_name: { $Name: "Enum_ttN_pipeLoaderSDXL_refiner_vae_name", $Value: Enum_ttN_pipeLoaderSDXL_refiner_vae_name },
    Enum_ttN_pipeLoaderSDXL_refiner_lora1_name: { $Name: "Enum_ttN_pipeLoaderSDXL_refiner_lora1_name", $Value: Enum_ttN_pipeLoaderSDXL_refiner_lora1_name },
    Enum_ttN_pipeLoaderSDXL_refiner_lora2_name: { $Name: "Enum_ttN_pipeLoaderSDXL_refiner_lora2_name", $Value: Enum_ttN_pipeLoaderSDXL_refiner_lora2_name },
    Enum_ttN_pipeLoaderSDXL_positive_token_normalization: { $Name: "Enum_ttN_pipeLoaderSDXL_positive_token_normalization", $Value: Enum_ttN_pipeLoaderSDXL_positive_token_normalization },
    Enum_ttN_pipeLoaderSDXL_positive_weight_interpretation: { $Name: "Enum_ttN_pipeLoaderSDXL_positive_weight_interpretation", $Value: Enum_ttN_pipeLoaderSDXL_positive_weight_interpretation },
    Enum_ttN_pipeLoaderSDXL_negative_token_normalization: { $Name: "Enum_ttN_pipeLoaderSDXL_negative_token_normalization", $Value: Enum_ttN_pipeLoaderSDXL_negative_token_normalization },
    Enum_ttN_pipeLoaderSDXL_negative_weight_interpretation: { $Name: "Enum_ttN_pipeLoaderSDXL_negative_weight_interpretation", $Value: Enum_ttN_pipeLoaderSDXL_negative_weight_interpretation },
    Enum_ttN_pipeKSamplerSDXL_upscale_method: { $Name: "Enum_ttN_pipeKSamplerSDXL_upscale_method", $Value: Enum_ttN_pipeKSamplerSDXL_upscale_method },
    Enum_ttN_pipeKSamplerSDXL_crop: { $Name: "Enum_ttN_pipeKSamplerSDXL_crop", $Value: Enum_ttN_pipeKSamplerSDXL_crop },
    Enum_ttN_pipeKSamplerSDXL_sampler_state: { $Name: "Enum_ttN_pipeKSamplerSDXL_sampler_state", $Value: Enum_ttN_pipeKSamplerSDXL_sampler_state },
    Enum_ttN_pipeKSamplerSDXL_sampler_name: { $Name: "Enum_ttN_pipeKSamplerSDXL_sampler_name", $Value: Enum_ttN_pipeKSamplerSDXL_sampler_name },
    Enum_ttN_pipeKSamplerSDXL_scheduler: { $Name: "Enum_ttN_pipeKSamplerSDXL_scheduler", $Value: Enum_ttN_pipeKSamplerSDXL_scheduler },
    Enum_ttN_pipeKSamplerSDXL_image_output: { $Name: "Enum_ttN_pipeKSamplerSDXL_image_output", $Value: Enum_ttN_pipeKSamplerSDXL_image_output },
    "Enum_DF$_String$_Replace_Mode": { $Name: "Enum_DF$_String$_Replace_Mode", $Value: Enum_DF$_String$_Replace_Mode },
    "Enum_DF$_Search$_In$_Text_Mode": { $Name: "Enum_DF$_Search$_In$_Text_Mode", $Value: Enum_DF$_Search$_In$_Text_Mode },
    "Enum_DF$_Absolute$_value_negative_out": { $Name: "Enum_DF$_Absolute$_value_negative_out", $Value: Enum_DF$_Absolute$_value_negative_out },
    "Enum_DF$_Get$_latent$_size_original": { $Name: "Enum_DF$_Get$_latent$_size_original", $Value: Enum_DF$_Get$_latent$_size_original },
    "Enum_DF$_Sinus_type_": { $Name: "Enum_DF$_Sinus_type_", $Value: Enum_DF$_Sinus_type_ },
    "Enum_DF$_Sinus_arcSin": { $Name: "Enum_DF$_Sinus_arcSin", $Value: Enum_DF$_Sinus_arcSin },
    "Enum_DF$_Cosines_type_": { $Name: "Enum_DF$_Cosines_type_", $Value: Enum_DF$_Cosines_type_ },
    "Enum_DF$_Cosines_arcCos": { $Name: "Enum_DF$_Cosines_arcCos", $Value: Enum_DF$_Cosines_arcCos },
    "Enum_DF$_Tangent_type_": { $Name: "Enum_DF$_Tangent_type_", $Value: Enum_DF$_Tangent_type_ },
    "Enum_DF$_Tangent_arcTan": { $Name: "Enum_DF$_Tangent_arcTan", $Value: Enum_DF$_Tangent_arcTan },
    "Enum_DF$_Logic$_node_Operation": { $Name: "Enum_DF$_Logic$_node_Operation", $Value: Enum_DF$_Logic$_node_Operation },
    "Enum_DF$_Latent$_Scale$_by$_ratio_scale_method": { $Name: "Enum_DF$_Latent$_Scale$_by$_ratio_scale_method", $Value: Enum_DF$_Latent$_Scale$_by$_ratio_scale_method },
    "Enum_DF$_Latent$_Scale$_by$_ratio_crop": { $Name: "Enum_DF$_Latent$_Scale$_by$_ratio_crop", $Value: Enum_DF$_Latent$_Scale$_by$_ratio_crop },
    "Enum_DF$_Latent$_Scale$_to$_side_side": { $Name: "Enum_DF$_Latent$_Scale$_to$_side_side", $Value: Enum_DF$_Latent$_Scale$_to$_side_side },
    "Enum_DF$_Latent$_Scale$_to$_side_scale_method": { $Name: "Enum_DF$_Latent$_Scale$_to$_side_scale_method", $Value: Enum_DF$_Latent$_Scale$_to$_side_scale_method },
    "Enum_DF$_Latent$_Scale$_to$_side_crop": { $Name: "Enum_DF$_Latent$_Scale$_to$_side_crop", $Value: Enum_DF$_Latent$_Scale$_to$_side_crop },
    "Enum_DF$_Image$_scale$_by$_ratio_upscale_method": { $Name: "Enum_DF$_Image$_scale$_by$_ratio_upscale_method", $Value: Enum_DF$_Image$_scale$_by$_ratio_upscale_method },
    "Enum_DF$_Image$_scale$_by$_ratio_crop": { $Name: "Enum_DF$_Image$_scale$_by$_ratio_crop", $Value: Enum_DF$_Image$_scale$_by$_ratio_crop },
    "Enum_DF$_Image$_scale$_to$_side_side": { $Name: "Enum_DF$_Image$_scale$_to$_side_side", $Value: Enum_DF$_Image$_scale$_to$_side_side },
    "Enum_DF$_Image$_scale$_to$_side_upscale_method": { $Name: "Enum_DF$_Image$_scale$_to$_side_upscale_method", $Value: Enum_DF$_Image$_scale$_to$_side_upscale_method },
    "Enum_DF$_Image$_scale$_to$_side_crop": { $Name: "Enum_DF$_Image$_scale$_to$_side_crop", $Value: Enum_DF$_Image$_scale$_to$_side_crop },
    Enum_LatentByRatio_model: { $Name: "Enum_LatentByRatio_model", $Value: Enum_LatentByRatio_model },
    Enum_LatentByRatio_ratio: { $Name: "Enum_LatentByRatio_ratio", $Value: Enum_LatentByRatio_ratio },
    Enum_TAESDLoader_file_name: { $Name: "Enum_TAESDLoader_file_name", $Value: Enum_TAESDLoader_file_name },
    Enum_Mask_By_Text_normalize: { $Name: "Enum_Mask_By_Text_normalize", $Value: Enum_Mask_By_Text_normalize },
    Enum_Mask_Morphology_op: { $Name: "Enum_Mask_Morphology_op", $Value: Enum_Mask_Morphology_op },
    Enum_Combine_Masks_op: { $Name: "Enum_Combine_Masks_op", $Value: Enum_Combine_Masks_op },
    Enum_Combine_Masks_clamp_result: { $Name: "Enum_Combine_Masks_clamp_result", $Value: Enum_Combine_Masks_clamp_result },
    Enum_Combine_Masks_round_result: { $Name: "Enum_Combine_Masks_round_result", $Value: Enum_Combine_Masks_round_result },
    Enum_Unary_Mask_Op_op: { $Name: "Enum_Unary_Mask_Op_op", $Value: Enum_Unary_Mask_Op_op },
    Enum_Unary_Image_Op_op: { $Name: "Enum_Unary_Image_Op_op", $Value: Enum_Unary_Image_Op_op },
    Enum_Image_To_Mask_method: { $Name: "Enum_Image_To_Mask_method", $Value: Enum_Image_To_Mask_method },
    Enum_Mask_To_Region_constraints: { $Name: "Enum_Mask_To_Region_constraints", $Value: Enum_Mask_To_Region_constraints },
    Enum_Mask_To_Region_batch_behavior: { $Name: "Enum_Mask_To_Region_batch_behavior", $Value: Enum_Mask_To_Region_batch_behavior },
    Enum_Paste_By_Mask_resize_behavior: { $Name: "Enum_Paste_By_Mask_resize_behavior", $Value: Enum_Paste_By_Mask_resize_behavior },
    Enum_Change_Channel_Count_kind: { $Name: "Enum_Change_Channel_Count_kind", $Value: Enum_Change_Channel_Count_kind },
    Enum_Create_Rect_Mask_mode: { $Name: "Enum_Create_Rect_Mask_mode", $Value: Enum_Create_Rect_Mask_mode },
    Enum_Create_Rect_Mask_origin: { $Name: "Enum_Create_Rect_Mask_origin", $Value: Enum_Create_Rect_Mask_origin },
    Enum_Create_QR_Code_error_correction: { $Name: "Enum_Create_QR_Code_error_correction", $Value: Enum_Create_QR_Code_error_correction },
    Enum_Convert_Color_Space_in_space: { $Name: "Enum_Convert_Color_Space_in_space", $Value: Enum_Convert_Color_Space_in_space },
    Enum_Convert_Color_Space_out_space: { $Name: "Enum_Convert_Color_Space_out_space", $Value: Enum_Convert_Color_Space_out_space },
    "Enum_Context_Big_$1rgthree$2_CKPT_NAME_out": { $Name: "Enum_Context_Big_$1rgthree$2_CKPT_NAME_out", $Value: Enum_Context_Big_$1rgthree$2_CKPT_NAME_out },
    "Enum_Context_Big_$1rgthree$2_SAMPLER_out": { $Name: "Enum_Context_Big_$1rgthree$2_SAMPLER_out", $Value: Enum_Context_Big_$1rgthree$2_SAMPLER_out },
    "Enum_Context_Big_$1rgthree$2_SCHEDULER_out": { $Name: "Enum_Context_Big_$1rgthree$2_SCHEDULER_out", $Value: Enum_Context_Big_$1rgthree$2_SCHEDULER_out },
    "Enum_Context_Big_$1rgthree$2_ckpt_name": { $Name: "Enum_Context_Big_$1rgthree$2_ckpt_name", $Value: Enum_Context_Big_$1rgthree$2_ckpt_name },
    "Enum_Context_Big_$1rgthree$2_sampler": { $Name: "Enum_Context_Big_$1rgthree$2_sampler", $Value: Enum_Context_Big_$1rgthree$2_sampler },
    "Enum_Context_Big_$1rgthree$2_scheduler": { $Name: "Enum_Context_Big_$1rgthree$2_scheduler", $Value: Enum_Context_Big_$1rgthree$2_scheduler },
    "Enum_Context_Switch_Big_$1rgthree$2_CKPT_NAME_out": { $Name: "Enum_Context_Switch_Big_$1rgthree$2_CKPT_NAME_out", $Value: Enum_Context_Switch_Big_$1rgthree$2_CKPT_NAME_out },
    "Enum_Context_Switch_Big_$1rgthree$2_SAMPLER_out": { $Name: "Enum_Context_Switch_Big_$1rgthree$2_SAMPLER_out", $Value: Enum_Context_Switch_Big_$1rgthree$2_SAMPLER_out },
    "Enum_Context_Switch_Big_$1rgthree$2_SCHEDULER_out": { $Name: "Enum_Context_Switch_Big_$1rgthree$2_SCHEDULER_out", $Value: Enum_Context_Switch_Big_$1rgthree$2_SCHEDULER_out },
    "Enum_Context_Merge_Big_$1rgthree$2_CKPT_NAME_out": { $Name: "Enum_Context_Merge_Big_$1rgthree$2_CKPT_NAME_out", $Value: Enum_Context_Merge_Big_$1rgthree$2_CKPT_NAME_out },
    "Enum_Context_Merge_Big_$1rgthree$2_SAMPLER_out": { $Name: "Enum_Context_Merge_Big_$1rgthree$2_SAMPLER_out", $Value: Enum_Context_Merge_Big_$1rgthree$2_SAMPLER_out },
    "Enum_Context_Merge_Big_$1rgthree$2_SCHEDULER_out": { $Name: "Enum_Context_Merge_Big_$1rgthree$2_SCHEDULER_out", $Value: Enum_Context_Merge_Big_$1rgthree$2_SCHEDULER_out },
    "Enum_Lora_Loader_Stack_$1rgthree$2_lora_01": { $Name: "Enum_Lora_Loader_Stack_$1rgthree$2_lora_01", $Value: Enum_Lora_Loader_Stack_$1rgthree$2_lora_01 },
    "Enum_Lora_Loader_Stack_$1rgthree$2_lora_02": { $Name: "Enum_Lora_Loader_Stack_$1rgthree$2_lora_02", $Value: Enum_Lora_Loader_Stack_$1rgthree$2_lora_02 },
    "Enum_Lora_Loader_Stack_$1rgthree$2_lora_03": { $Name: "Enum_Lora_Loader_Stack_$1rgthree$2_lora_03", $Value: Enum_Lora_Loader_Stack_$1rgthree$2_lora_03 },
    "Enum_Lora_Loader_Stack_$1rgthree$2_lora_04": { $Name: "Enum_Lora_Loader_Stack_$1rgthree$2_lora_04", $Value: Enum_Lora_Loader_Stack_$1rgthree$2_lora_04 },
    "Enum_Image_Inset_Crop_$1rgthree$2_measurement": { $Name: "Enum_Image_Inset_Crop_$1rgthree$2_measurement", $Value: Enum_Image_Inset_Crop_$1rgthree$2_measurement },
    "Enum_Power_Prompt_$1rgthree$2_insert_lora": { $Name: "Enum_Power_Prompt_$1rgthree$2_insert_lora", $Value: Enum_Power_Prompt_$1rgthree$2_insert_lora },
    "Enum_Power_Prompt_$1rgthree$2_insert_embedding": { $Name: "Enum_Power_Prompt_$1rgthree$2_insert_embedding", $Value: Enum_Power_Prompt_$1rgthree$2_insert_embedding },
    "Enum_Power_Prompt_$1rgthree$2_insert_saved": { $Name: "Enum_Power_Prompt_$1rgthree$2_insert_saved", $Value: Enum_Power_Prompt_$1rgthree$2_insert_saved },
    "Enum_Power_Prompt_$7_Simple_$1rgthree$2_insert_embedding": { $Name: "Enum_Power_Prompt_$7_Simple_$1rgthree$2_insert_embedding", $Value: Enum_Power_Prompt_$7_Simple_$1rgthree$2_insert_embedding },
    "Enum_Power_Prompt_$7_Simple_$1rgthree$2_insert_saved": { $Name: "Enum_Power_Prompt_$7_Simple_$1rgthree$2_insert_saved", $Value: Enum_Power_Prompt_$7_Simple_$1rgthree$2_insert_saved },
    "Enum_KSampler_Config_$1rgthree$2_SAMPLER_out": { $Name: "Enum_KSampler_Config_$1rgthree$2_SAMPLER_out", $Value: Enum_KSampler_Config_$1rgthree$2_SAMPLER_out },
    "Enum_KSampler_Config_$1rgthree$2_SCHEDULER_out": { $Name: "Enum_KSampler_Config_$1rgthree$2_SCHEDULER_out", $Value: Enum_KSampler_Config_$1rgthree$2_SCHEDULER_out },
    "Enum_KSampler_Config_$1rgthree$2_sampler_name": { $Name: "Enum_KSampler_Config_$1rgthree$2_sampler_name", $Value: Enum_KSampler_Config_$1rgthree$2_sampler_name },
    "Enum_KSampler_Config_$1rgthree$2_scheduler": { $Name: "Enum_KSampler_Config_$1rgthree$2_scheduler", $Value: Enum_KSampler_Config_$1rgthree$2_scheduler },
    "Enum_SDXL_Empty_Latent_Image_$1rgthree$2_dimensions": { $Name: "Enum_SDXL_Empty_Latent_Image_$1rgthree$2_dimensions", $Value: Enum_SDXL_Empty_Latent_Image_$1rgthree$2_dimensions },
    "Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_lora": { $Name: "Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_lora", $Value: Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_lora },
    "Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_embedding": { $Name: "Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_embedding", $Value: Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_embedding },
    "Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_saved": { $Name: "Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_saved", $Value: Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_saved },
    "Enum_SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_insert_embedding": { $Name: "Enum_SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_insert_embedding", $Value: Enum_SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_insert_embedding },
    "Enum_SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_insert_saved": { $Name: "Enum_SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_insert_saved", $Value: Enum_SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_insert_saved },
    Enum_PerturbedAttention_unet_block: { $Name: "Enum_PerturbedAttention_unet_block", $Value: Enum_PerturbedAttention_unet_block },
    Enum_PerturbedAttention_rescale_mode: { $Name: "Enum_PerturbedAttention_rescale_mode", $Value: Enum_PerturbedAttention_rescale_mode },
    Enum_SmoothedEnergyGuidanceAdvanced_unet_block: { $Name: "Enum_SmoothedEnergyGuidanceAdvanced_unet_block", $Value: Enum_SmoothedEnergyGuidanceAdvanced_unet_block },
    Enum_SmoothedEnergyGuidanceAdvanced_rescale_mode: { $Name: "Enum_SmoothedEnergyGuidanceAdvanced_rescale_mode", $Value: Enum_SmoothedEnergyGuidanceAdvanced_rescale_mode },
    Enum_TRTAttachPag_unet_block: { $Name: "Enum_TRTAttachPag_unet_block", $Value: Enum_TRTAttachPag_unet_block },
    Enum_TRTPerturbedAttention_rescale_mode: { $Name: "Enum_TRTPerturbedAttention_rescale_mode", $Value: Enum_TRTPerturbedAttention_rescale_mode },
    Enum_SDXLMixSampler_sampler_name: { $Name: "Enum_SDXLMixSampler_sampler_name", $Value: Enum_SDXLMixSampler_sampler_name },
    Enum_SDXLMixSampler_scheduler: { $Name: "Enum_SDXLMixSampler_scheduler", $Value: Enum_SDXLMixSampler_scheduler },
    Enum_SDXLMixSampler_final_only: { $Name: "Enum_SDXLMixSampler_final_only", $Value: Enum_SDXLMixSampler_final_only },
    Enum_BLIP_Model_Loader_device: { $Name: "Enum_BLIP_Model_Loader_device", $Value: Enum_BLIP_Model_Loader_device },
    Enum_Blend_Latents_operation: { $Name: "Enum_Blend_Latents_operation", $Value: Enum_Blend_Latents_operation },
    Enum_Checkpoint_Loader_config_name: { $Name: "Enum_Checkpoint_Loader_config_name", $Value: Enum_Checkpoint_Loader_config_name },
    Enum_Checkpoint_Loader_ckpt_name: { $Name: "Enum_Checkpoint_Loader_ckpt_name", $Value: Enum_Checkpoint_Loader_ckpt_name },
    "Enum_Checkpoint_Loader_$1Simple$2_ckpt_name": { $Name: "Enum_Checkpoint_Loader_$1Simple$2_ckpt_name", $Value: Enum_Checkpoint_Loader_$1Simple$2_ckpt_name },
    "Enum_CLIPTextEncode_$1NSP$2_mode": { $Name: "Enum_CLIPTextEncode_$1NSP$2_mode", $Value: Enum_CLIPTextEncode_$1NSP$2_mode },
    Enum_Constant_Number_number_type: { $Name: "Enum_Constant_Number_number_type", $Value: Enum_Constant_Number_number_type },
    Enum_Create_Grid_Image_include_subfolders: { $Name: "Enum_Create_Grid_Image_include_subfolders", $Value: Enum_Create_Grid_Image_include_subfolders },
    Enum_Create_Morph_Image_filetype: { $Name: "Enum_Create_Morph_Image_filetype", $Value: Enum_Create_Morph_Image_filetype },
    Enum_Create_Morph_Image_from_Path_filetype: { $Name: "Enum_Create_Morph_Image_from_Path_filetype", $Value: Enum_Create_Morph_Image_from_Path_filetype },
    Enum_Create_Video_from_Path_codec: { $Name: "Enum_Create_Video_from_Path_codec", $Value: Enum_Create_Video_from_Path_codec },
    Enum_Diffusers_Model_Loader_model_path: { $Name: "Enum_Diffusers_Model_Loader_model_path", $Value: Enum_Diffusers_Model_Loader_model_path },
    Enum_Export_API_save_prompt_api: { $Name: "Enum_Export_API_save_prompt_api", $Value: Enum_Export_API_save_prompt_api },
    Enum_Lora_Loader_lora_name: { $Name: "Enum_Lora_Loader_lora_name", $Value: Enum_Lora_Loader_lora_name },
    "Enum_Image_SSAO_$1Ambient_Occlusion$2_enable_specular_masking": { $Name: "Enum_Image_SSAO_$1Ambient_Occlusion$2_enable_specular_masking", $Value: Enum_Image_SSAO_$1Ambient_Occlusion$2_enable_specular_masking },
    "Enum_Image_SSDO_$1Direct_Occlusion$2_colored_occlusion": { $Name: "Enum_Image_SSDO_$1Direct_Occlusion$2_colored_occlusion", $Value: Enum_Image_SSDO_$1Direct_Occlusion$2_colored_occlusion },
    Enum_Image_Analyze_mode: { $Name: "Enum_Image_Analyze_mode", $Value: Enum_Image_Analyze_mode },
    Enum_Image_Blending_Mode_mode: { $Name: "Enum_Image_Blending_Mode_mode", $Value: Enum_Image_Blending_Mode_mode },
    Enum_Image_Canny_Filter_enable_threshold: { $Name: "Enum_Image_Canny_Filter_enable_threshold", $Value: Enum_Image_Canny_Filter_enable_threshold },
    Enum_Image_Color_Palette_mode: { $Name: "Enum_Image_Color_Palette_mode", $Value: Enum_Image_Color_Palette_mode },
    Enum_Image_Crop_Face_cascade_xml: { $Name: "Enum_Image_Crop_Face_cascade_xml", $Value: Enum_Image_Crop_Face_cascade_xml },
    Enum_Image_Pixelate_init_mode: { $Name: "Enum_Image_Pixelate_init_mode", $Value: Enum_Image_Pixelate_init_mode },
    Enum_Image_Pixelate_dither: { $Name: "Enum_Image_Pixelate_dither", $Value: Enum_Image_Pixelate_dither },
    Enum_Image_Pixelate_dither_mode: { $Name: "Enum_Image_Pixelate_dither_mode", $Value: Enum_Image_Pixelate_dither_mode },
    Enum_Image_Pixelate_color_palette_mode: { $Name: "Enum_Image_Pixelate_color_palette_mode", $Value: Enum_Image_Pixelate_color_palette_mode },
    Enum_Image_Pixelate_reverse_palette: { $Name: "Enum_Image_Pixelate_reverse_palette", $Value: Enum_Image_Pixelate_reverse_palette },
    Enum_Image_Power_Noise_noise_type: { $Name: "Enum_Image_Power_Noise_noise_type", $Value: Enum_Image_Power_Noise_noise_type },
    Enum_Image_Dragan_Photography_Filter_colorize: { $Name: "Enum_Image_Dragan_Photography_Filter_colorize", $Value: Enum_Image_Dragan_Photography_Filter_colorize },
    Enum_Image_Edge_Detection_Filter_mode: { $Name: "Enum_Image_Edge_Detection_Filter_mode", $Value: Enum_Image_Edge_Detection_Filter_mode },
    Enum_Image_Filter_Adjustments_detail_enhance: { $Name: "Enum_Image_Filter_Adjustments_detail_enhance", $Value: Enum_Image_Filter_Adjustments_detail_enhance },
    Enum_Image_Flip_mode: { $Name: "Enum_Image_Flip_mode", $Value: Enum_Image_Flip_mode },
    Enum_Image_Gradient_Map_flip_left_right: { $Name: "Enum_Image_Gradient_Map_flip_left_right", $Value: Enum_Image_Gradient_Map_flip_left_right },
    Enum_Image_Generate_Gradient_direction: { $Name: "Enum_Image_Generate_Gradient_direction", $Value: Enum_Image_Generate_Gradient_direction },
    Enum_Image_High_Pass_Filter_color_output: { $Name: "Enum_Image_High_Pass_Filter_color_output", $Value: Enum_Image_High_Pass_Filter_color_output },
    Enum_Image_High_Pass_Filter_neutral_background: { $Name: "Enum_Image_High_Pass_Filter_neutral_background", $Value: Enum_Image_High_Pass_Filter_neutral_background },
    Enum_Image_History_Loader_image: { $Name: "Enum_Image_History_Loader_image", $Value: Enum_Image_History_Loader_image },
    Enum_Image_Load_RGBA: { $Name: "Enum_Image_Load_RGBA", $Value: Enum_Image_Load_RGBA },
    Enum_Image_Load_filename_text_extension: { $Name: "Enum_Image_Load_filename_text_extension", $Value: Enum_Image_Load_filename_text_extension },
    Enum_Image_Monitor_Effects_Filter_mode: { $Name: "Enum_Image_Monitor_Effects_Filter_mode", $Value: Enum_Image_Monitor_Effects_Filter_mode },
    Enum_Image_Padding_feather_second_pass: { $Name: "Enum_Image_Padding_feather_second_pass", $Value: Enum_Image_Padding_feather_second_pass },
    "Enum_Image_Rembg_$1Remove_Background$2_model": { $Name: "Enum_Image_Rembg_$1Remove_Background$2_model", $Value: Enum_Image_Rembg_$1Remove_Background$2_model },
    "Enum_Image_Rembg_$1Remove_Background$2_background_color": { $Name: "Enum_Image_Rembg_$1Remove_Background$2_background_color", $Value: Enum_Image_Rembg_$1Remove_Background$2_background_color },
    "Enum_Image_Remove_Background_$1Alpha$2_mode": { $Name: "Enum_Image_Remove_Background_$1Alpha$2_mode", $Value: Enum_Image_Remove_Background_$1Alpha$2_mode },
    Enum_Image_Resize_mode: { $Name: "Enum_Image_Resize_mode", $Value: Enum_Image_Resize_mode },
    Enum_Image_Resize_supersample: { $Name: "Enum_Image_Resize_supersample", $Value: Enum_Image_Resize_supersample },
    Enum_Image_Resize_resampling: { $Name: "Enum_Image_Resize_resampling", $Value: Enum_Image_Resize_resampling },
    Enum_Image_Rotate_mode: { $Name: "Enum_Image_Rotate_mode", $Value: Enum_Image_Rotate_mode },
    Enum_Image_Rotate_sampler: { $Name: "Enum_Image_Rotate_sampler", $Value: Enum_Image_Rotate_sampler },
    Enum_Image_Send_HTTP_method_type: { $Name: "Enum_Image_Send_HTTP_method_type", $Value: Enum_Image_Send_HTTP_method_type },
    Enum_Image_Save_filename_number_start: { $Name: "Enum_Image_Save_filename_number_start", $Value: Enum_Image_Save_filename_number_start },
    Enum_Image_Save_extension: { $Name: "Enum_Image_Save_extension", $Value: Enum_Image_Save_extension },
    Enum_Image_Save_optimize_image: { $Name: "Enum_Image_Save_optimize_image", $Value: Enum_Image_Save_optimize_image },
    Enum_Image_Save_lossless_webp: { $Name: "Enum_Image_Save_lossless_webp", $Value: Enum_Image_Save_lossless_webp },
    Enum_Image_Save_overwrite_mode: { $Name: "Enum_Image_Save_overwrite_mode", $Value: Enum_Image_Save_overwrite_mode },
    Enum_Image_Save_show_history: { $Name: "Enum_Image_Save_show_history", $Value: Enum_Image_Save_show_history },
    Enum_Image_Save_show_history_by_prefix: { $Name: "Enum_Image_Save_show_history_by_prefix", $Value: Enum_Image_Save_show_history_by_prefix },
    Enum_Image_Save_embed_workflow: { $Name: "Enum_Image_Save_embed_workflow", $Value: Enum_Image_Save_embed_workflow },
    Enum_Image_Save_show_previews: { $Name: "Enum_Image_Save_show_previews", $Value: Enum_Image_Save_show_previews },
    Enum_Image_Seamless_Texture_tiled: { $Name: "Enum_Image_Seamless_Texture_tiled", $Value: Enum_Image_Seamless_Texture_tiled },
    Enum_Image_Select_Channel_channel: { $Name: "Enum_Image_Select_Channel_channel", $Value: Enum_Image_Select_Channel_channel },
    Enum_Image_Stitch_stitch: { $Name: "Enum_Image_Stitch_stitch", $Value: Enum_Image_Stitch_stitch },
    Enum_Image_Style_Filter_style: { $Name: "Enum_Image_Style_Filter_style", $Value: Enum_Image_Style_Filter_style },
    Enum_Image_fDOF_Filter_mode: { $Name: "Enum_Image_fDOF_Filter_mode", $Value: Enum_Image_fDOF_Filter_mode },
    Enum_Image_to_Latent_Mask_channel: { $Name: "Enum_Image_to_Latent_Mask_channel", $Value: Enum_Image_to_Latent_Mask_channel },
    Enum_Image_to_Noise_output_mode: { $Name: "Enum_Image_to_Noise_output_mode", $Value: Enum_Image_to_Noise_output_mode },
    Enum_Image_Voronoi_Noise_Filter_flat: { $Name: "Enum_Image_Voronoi_Noise_Filter_flat", $Value: Enum_Image_Voronoi_Noise_Filter_flat },
    Enum_Image_Voronoi_Noise_Filter_RGB_output: { $Name: "Enum_Image_Voronoi_Noise_Filter_RGB_output", $Value: Enum_Image_Voronoi_Noise_Filter_RGB_output },
    "Enum_KSampler_$1WAS$2_sampler_name": { $Name: "Enum_KSampler_$1WAS$2_sampler_name", $Value: Enum_KSampler_$1WAS$2_sampler_name },
    "Enum_KSampler_$1WAS$2_scheduler": { $Name: "Enum_KSampler_$1WAS$2_scheduler", $Value: Enum_KSampler_$1WAS$2_scheduler },
    Enum_KSampler_Cycle_sampler_name: { $Name: "Enum_KSampler_Cycle_sampler_name", $Value: Enum_KSampler_Cycle_sampler_name },
    Enum_KSampler_Cycle_scheduler: { $Name: "Enum_KSampler_Cycle_scheduler", $Value: Enum_KSampler_Cycle_scheduler },
    Enum_KSampler_Cycle_tiled_vae: { $Name: "Enum_KSampler_Cycle_tiled_vae", $Value: Enum_KSampler_Cycle_tiled_vae },
    Enum_KSampler_Cycle_latent_upscale: { $Name: "Enum_KSampler_Cycle_latent_upscale", $Value: Enum_KSampler_Cycle_latent_upscale },
    Enum_KSampler_Cycle_scale_denoise: { $Name: "Enum_KSampler_Cycle_scale_denoise", $Value: Enum_KSampler_Cycle_scale_denoise },
    Enum_KSampler_Cycle_scale_sampling: { $Name: "Enum_KSampler_Cycle_scale_sampling", $Value: Enum_KSampler_Cycle_scale_sampling },
    Enum_KSampler_Cycle_pos_add_mode: { $Name: "Enum_KSampler_Cycle_pos_add_mode", $Value: Enum_KSampler_Cycle_pos_add_mode },
    Enum_KSampler_Cycle_pos_add_strength_scaling: { $Name: "Enum_KSampler_Cycle_pos_add_strength_scaling", $Value: Enum_KSampler_Cycle_pos_add_strength_scaling },
    Enum_KSampler_Cycle_neg_add_mode: { $Name: "Enum_KSampler_Cycle_neg_add_mode", $Value: Enum_KSampler_Cycle_neg_add_mode },
    Enum_KSampler_Cycle_neg_add_strength_scaling: { $Name: "Enum_KSampler_Cycle_neg_add_strength_scaling", $Value: Enum_KSampler_Cycle_neg_add_strength_scaling },
    Enum_KSampler_Cycle_steps_scaling: { $Name: "Enum_KSampler_Cycle_steps_scaling", $Value: Enum_KSampler_Cycle_steps_scaling },
    Enum_KSampler_Cycle_steps_control: { $Name: "Enum_KSampler_Cycle_steps_control", $Value: Enum_KSampler_Cycle_steps_control },
    "Enum_Latent_Upscale_by_Factor_$1WAS$2_mode": { $Name: "Enum_Latent_Upscale_by_Factor_$1WAS$2_mode", $Value: Enum_Latent_Upscale_by_Factor_$1WAS$2_mode },
    "Enum_Latent_Upscale_by_Factor_$1WAS$2_align": { $Name: "Enum_Latent_Upscale_by_Factor_$1WAS$2_align", $Value: Enum_Latent_Upscale_by_Factor_$1WAS$2_align },
    Enum_Load_Image_Batch_mode: { $Name: "Enum_Load_Image_Batch_mode", $Value: Enum_Load_Image_Batch_mode },
    Enum_Load_Image_Batch_allow_RGBA_output: { $Name: "Enum_Load_Image_Batch_allow_RGBA_output", $Value: Enum_Load_Image_Batch_allow_RGBA_output },
    Enum_Load_Image_Batch_filename_text_extension: { $Name: "Enum_Load_Image_Batch_filename_text_extension", $Value: Enum_Load_Image_Batch_filename_text_extension },
    Enum_Load_Lora_lora_name: { $Name: "Enum_Load_Lora_lora_name", $Value: Enum_Load_Lora_lora_name },
    Enum_Mask_Crop_Region_region_type: { $Name: "Enum_Mask_Crop_Region_region_type", $Value: Enum_Mask_Crop_Region_region_type },
    Enum_MiDaS_Model_Loader_midas_model: { $Name: "Enum_MiDaS_Model_Loader_midas_model", $Value: Enum_MiDaS_Model_Loader_midas_model },
    Enum_MiDaS_Depth_Approximation_use_cpu: { $Name: "Enum_MiDaS_Depth_Approximation_use_cpu", $Value: Enum_MiDaS_Depth_Approximation_use_cpu },
    Enum_MiDaS_Depth_Approximation_midas_type: { $Name: "Enum_MiDaS_Depth_Approximation_midas_type", $Value: Enum_MiDaS_Depth_Approximation_midas_type },
    Enum_MiDaS_Depth_Approximation_invert_depth: { $Name: "Enum_MiDaS_Depth_Approximation_invert_depth", $Value: Enum_MiDaS_Depth_Approximation_invert_depth },
    Enum_MiDaS_Mask_Image_use_cpu: { $Name: "Enum_MiDaS_Mask_Image_use_cpu", $Value: Enum_MiDaS_Mask_Image_use_cpu },
    Enum_MiDaS_Mask_Image_midas_model: { $Name: "Enum_MiDaS_Mask_Image_midas_model", $Value: Enum_MiDaS_Mask_Image_midas_model },
    Enum_MiDaS_Mask_Image_remove: { $Name: "Enum_MiDaS_Mask_Image_remove", $Value: Enum_MiDaS_Mask_Image_remove },
    Enum_MiDaS_Mask_Image_threshold: { $Name: "Enum_MiDaS_Mask_Image_threshold", $Value: Enum_MiDaS_Mask_Image_threshold },
    Enum_Number_Counter_number_type: { $Name: "Enum_Number_Counter_number_type", $Value: Enum_Number_Counter_number_type },
    Enum_Number_Counter_mode: { $Name: "Enum_Number_Counter_mode", $Value: Enum_Number_Counter_mode },
    Enum_Number_Operation_operation: { $Name: "Enum_Number_Operation_operation", $Value: Enum_Number_Operation_operation },
    Enum_Number_Input_Condition_return_boolean: { $Name: "Enum_Number_Input_Condition_return_boolean", $Value: Enum_Number_Input_Condition_return_boolean },
    Enum_Number_Input_Condition_comparison: { $Name: "Enum_Number_Input_Condition_comparison", $Value: Enum_Number_Input_Condition_comparison },
    Enum_Prompt_Styles_Selector_style: { $Name: "Enum_Prompt_Styles_Selector_style", $Value: Enum_Prompt_Styles_Selector_style },
    Enum_Prompt_Multiple_Styles_Selector_style1: { $Name: "Enum_Prompt_Multiple_Styles_Selector_style1", $Value: Enum_Prompt_Multiple_Styles_Selector_style1 },
    Enum_Prompt_Multiple_Styles_Selector_style2: { $Name: "Enum_Prompt_Multiple_Styles_Selector_style2", $Value: Enum_Prompt_Multiple_Styles_Selector_style2 },
    Enum_Prompt_Multiple_Styles_Selector_style3: { $Name: "Enum_Prompt_Multiple_Styles_Selector_style3", $Value: Enum_Prompt_Multiple_Styles_Selector_style3 },
    Enum_Prompt_Multiple_Styles_Selector_style4: { $Name: "Enum_Prompt_Multiple_Styles_Selector_style4", $Value: Enum_Prompt_Multiple_Styles_Selector_style4 },
    Enum_Random_Number_number_type: { $Name: "Enum_Random_Number_number_type", $Value: Enum_Random_Number_number_type },
    Enum_BLIP_Analyze_Image_mode: { $Name: "Enum_BLIP_Analyze_Image_mode", $Value: Enum_BLIP_Analyze_Image_mode },
    Enum_SAM_Model_Loader_model_size: { $Name: "Enum_SAM_Model_Loader_model_size", $Value: Enum_SAM_Model_Loader_model_size },
    Enum_Text_Add_Tokens_print_current_tokens: { $Name: "Enum_Text_Add_Tokens_print_current_tokens", $Value: Enum_Text_Add_Tokens_print_current_tokens },
    Enum_Text_Add_Token_by_Input_print_current_tokens: { $Name: "Enum_Text_Add_Token_by_Input_print_current_tokens", $Value: Enum_Text_Add_Token_by_Input_print_current_tokens },
    Enum_Text_Compare_mode: { $Name: "Enum_Text_Compare_mode", $Value: Enum_Text_Compare_mode },
    Enum_Text_Concatenate_clean_whitespace: { $Name: "Enum_Text_Concatenate_clean_whitespace", $Value: Enum_Text_Concatenate_clean_whitespace },
    Enum_Text_File_History_Loader_file: { $Name: "Enum_Text_File_History_Loader_file", $Value: Enum_Text_File_History_Loader_file },
    Enum_Text_Load_Line_From_File_mode: { $Name: "Enum_Text_Load_Line_From_File_mode", $Value: Enum_Text_Load_Line_From_File_mode },
    Enum_Text_Parse_Noodle_Soup_Prompts_mode: { $Name: "Enum_Text_Parse_Noodle_Soup_Prompts_mode", $Value: Enum_Text_Parse_Noodle_Soup_Prompts_mode },
    Enum_Text_String_Truncate_truncate_by: { $Name: "Enum_Text_String_Truncate_truncate_by", $Value: Enum_Text_String_Truncate_truncate_by },
    Enum_Text_String_Truncate_truncate_from: { $Name: "Enum_Text_String_Truncate_truncate_from", $Value: Enum_Text_String_Truncate_truncate_from },
    "Enum_True_Random$5org_Number_Generator_mode": { $Name: "Enum_True_Random$5org_Number_Generator_mode", $Value: Enum_True_Random$5org_Number_Generator_mode },
    Enum_unCLIP_Checkpoint_Loader_ckpt_name: { $Name: "Enum_unCLIP_Checkpoint_Loader_ckpt_name", $Value: Enum_unCLIP_Checkpoint_Loader_ckpt_name },
    Enum_Upscale_Model_Loader_model_name: { $Name: "Enum_Upscale_Model_Loader_model_name", $Value: Enum_Upscale_Model_Loader_model_name },
    Enum_Write_to_Video_codec: { $Name: "Enum_Write_to_Video_codec", $Value: Enum_Write_to_Video_codec },
    Enum_Video_Dump_Frames_extension: { $Name: "Enum_Video_Dump_Frames_extension", $Value: Enum_Video_Dump_Frames_extension },
    "Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_mode": { $Name: "Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_mode", $Value: Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_mode },
    "Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_token_normalization": { $Name: "Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_token_normalization", $Value: Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_token_normalization },
    "Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_weight_interpretation": { $Name: "Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_weight_interpretation", $Value: Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_weight_interpretation },
    Enum_ConditioningBlend_blending_mode: { $Name: "Enum_ConditioningBlend_blending_mode", $Value: Enum_ConditioningBlend_blending_mode },
    Enum_CLIPTextEncodeList_token_normalization: { $Name: "Enum_CLIPTextEncodeList_token_normalization", $Value: Enum_CLIPTextEncodeList_token_normalization },
    Enum_CLIPTextEncodeList_weight_interpretation: { $Name: "Enum_CLIPTextEncodeList_weight_interpretation", $Value: Enum_CLIPTextEncodeList_weight_interpretation },
    Enum_CLIPTextEncodeSequence2_token_normalization: { $Name: "Enum_CLIPTextEncodeSequence2_token_normalization", $Value: Enum_CLIPTextEncodeSequence2_token_normalization },
    Enum_CLIPTextEncodeSequence2_weight_interpretation: { $Name: "Enum_CLIPTextEncodeSequence2_weight_interpretation", $Value: Enum_CLIPTextEncodeSequence2_weight_interpretation },
    Enum_CLIPTextEncodeSequence2_cond_keyframes_type: { $Name: "Enum_CLIPTextEncodeSequence2_cond_keyframes_type", $Value: Enum_CLIPTextEncodeSequence2_cond_keyframes_type },
    Enum_KSamplerSeq_seed_mode_seq: { $Name: "Enum_KSamplerSeq_seed_mode_seq", $Value: Enum_KSamplerSeq_seed_mode_seq },
    Enum_KSamplerSeq_sampler_name: { $Name: "Enum_KSamplerSeq_sampler_name", $Value: Enum_KSamplerSeq_sampler_name },
    Enum_KSamplerSeq_scheduler: { $Name: "Enum_KSamplerSeq_scheduler", $Value: Enum_KSamplerSeq_scheduler },
    Enum_KSamplerSeq_latent_interpolation_mode: { $Name: "Enum_KSamplerSeq_latent_interpolation_mode", $Value: Enum_KSamplerSeq_latent_interpolation_mode },
    Enum_KSamplerSeq2_seed_mode_seq: { $Name: "Enum_KSamplerSeq2_seed_mode_seq", $Value: Enum_KSamplerSeq2_seed_mode_seq },
    Enum_KSamplerSeq2_sampler_name: { $Name: "Enum_KSamplerSeq2_sampler_name", $Value: Enum_KSamplerSeq2_sampler_name },
    Enum_KSamplerSeq2_scheduler: { $Name: "Enum_KSamplerSeq2_scheduler", $Value: Enum_KSamplerSeq2_scheduler },
    Enum_KSamplerSeq2_latent_interpolation_mode: { $Name: "Enum_KSamplerSeq2_latent_interpolation_mode", $Value: Enum_KSamplerSeq2_latent_interpolation_mode },
    Enum_KSamplerSeq2_seed_keying_mode: { $Name: "Enum_KSamplerSeq2_seed_keying_mode", $Value: Enum_KSamplerSeq2_seed_keying_mode },
    "Enum_Checkpoint_Loader_w$3Name_$1WLSH$2_ckpt_name": { $Name: "Enum_Checkpoint_Loader_w$3Name_$1WLSH$2_ckpt_name", $Value: Enum_Checkpoint_Loader_w$3Name_$1WLSH$2_ckpt_name },
    "Enum_KSamplerAdvanced_$1WLSH$2_add_noise": { $Name: "Enum_KSamplerAdvanced_$1WLSH$2_add_noise", $Value: Enum_KSamplerAdvanced_$1WLSH$2_add_noise },
    "Enum_KSamplerAdvanced_$1WLSH$2_sampler_name": { $Name: "Enum_KSamplerAdvanced_$1WLSH$2_sampler_name", $Value: Enum_KSamplerAdvanced_$1WLSH$2_sampler_name },
    "Enum_KSamplerAdvanced_$1WLSH$2_scheduler": { $Name: "Enum_KSamplerAdvanced_$1WLSH$2_scheduler", $Value: Enum_KSamplerAdvanced_$1WLSH$2_scheduler },
    "Enum_KSamplerAdvanced_$1WLSH$2_return_with_leftover_noise": { $Name: "Enum_KSamplerAdvanced_$1WLSH$2_return_with_leftover_noise", $Value: Enum_KSamplerAdvanced_$1WLSH$2_return_with_leftover_noise },
    "Enum_CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_conditioner": { $Name: "Enum_CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_conditioner", $Value: Enum_CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_conditioner },
    "Enum_Empty_Latent_by_Pixels_$1WLSH$2_aspect": { $Name: "Enum_Empty_Latent_by_Pixels_$1WLSH$2_aspect", $Value: Enum_Empty_Latent_by_Pixels_$1WLSH$2_aspect },
    "Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction": { $Name: "Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction", $Value: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction },
    "Enum_Empty_Latent_by_Ratio_$1WLSH$2_aspect": { $Name: "Enum_Empty_Latent_by_Ratio_$1WLSH$2_aspect", $Value: Enum_Empty_Latent_by_Ratio_$1WLSH$2_aspect },
    "Enum_Empty_Latent_by_Ratio_$1WLSH$2_direction": { $Name: "Enum_Empty_Latent_by_Ratio_$1WLSH$2_direction", $Value: Enum_Empty_Latent_by_Ratio_$1WLSH$2_direction },
    "Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution": { $Name: "Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution", $Value: Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution },
    "Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_direction": { $Name: "Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_direction", $Value: Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_direction },
    "Enum_Image_Load_with_Metadata_$1WLSH$2_verbose": { $Name: "Enum_Image_Load_with_Metadata_$1WLSH$2_verbose", $Value: Enum_Image_Load_with_Metadata_$1WLSH$2_verbose },
    "Enum_Image_Load_with_Metadata_$1WLSH$2_image": { $Name: "Enum_Image_Load_with_Metadata_$1WLSH$2_image", $Value: Enum_Image_Load_with_Metadata_$1WLSH$2_image },
    "Enum_Generate_Border_Mask_$1WLSH$2_direction": { $Name: "Enum_Generate_Border_Mask_$1WLSH$2_direction", $Value: Enum_Generate_Border_Mask_$1WLSH$2_direction },
    "Enum_Outpaint_to_Image_$1WLSH$2_direction": { $Name: "Enum_Outpaint_to_Image_$1WLSH$2_direction", $Value: Enum_Outpaint_to_Image_$1WLSH$2_direction },
    "Enum_Image_Scale_By_Factor_$1WLSH$2_upscale_method": { $Name: "Enum_Image_Scale_By_Factor_$1WLSH$2_upscale_method", $Value: Enum_Image_Scale_By_Factor_$1WLSH$2_upscale_method },
    "Enum_Image_Scale_by_Shortside_$1WLSH$2_upscale_method": { $Name: "Enum_Image_Scale_by_Shortside_$1WLSH$2_upscale_method", $Value: Enum_Image_Scale_by_Shortside_$1WLSH$2_upscale_method },
    "Enum_SDXL_Quick_Image_Scale_$1WLSH$2_upscale_method": { $Name: "Enum_SDXL_Quick_Image_Scale_$1WLSH$2_upscale_method", $Value: Enum_SDXL_Quick_Image_Scale_$1WLSH$2_upscale_method },
    "Enum_SDXL_Quick_Image_Scale_$1WLSH$2_resolution": { $Name: "Enum_SDXL_Quick_Image_Scale_$1WLSH$2_resolution", $Value: Enum_SDXL_Quick_Image_Scale_$1WLSH$2_resolution },
    "Enum_SDXL_Quick_Image_Scale_$1WLSH$2_direction": { $Name: "Enum_SDXL_Quick_Image_Scale_$1WLSH$2_direction", $Value: Enum_SDXL_Quick_Image_Scale_$1WLSH$2_direction },
    "Enum_SDXL_Quick_Image_Scale_$1WLSH$2_crop": { $Name: "Enum_SDXL_Quick_Image_Scale_$1WLSH$2_crop", $Value: Enum_SDXL_Quick_Image_Scale_$1WLSH$2_crop },
    "Enum_Upscale_by_Factor_with_Model_$1WLSH$2_upscale_method": { $Name: "Enum_Upscale_by_Factor_with_Model_$1WLSH$2_upscale_method", $Value: Enum_Upscale_by_Factor_with_Model_$1WLSH$2_upscale_method },
    "Enum_Resolutions_by_Ratio_$1WLSH$2_aspect": { $Name: "Enum_Resolutions_by_Ratio_$1WLSH$2_aspect", $Value: Enum_Resolutions_by_Ratio_$1WLSH$2_aspect },
    "Enum_Resolutions_by_Ratio_$1WLSH$2_direction": { $Name: "Enum_Resolutions_by_Ratio_$1WLSH$2_direction", $Value: Enum_Resolutions_by_Ratio_$1WLSH$2_direction },
    "Enum_SDXL_Resolutions_$1WLSH$2_resolution": { $Name: "Enum_SDXL_Resolutions_$1WLSH$2_resolution", $Value: Enum_SDXL_Resolutions_$1WLSH$2_resolution },
    "Enum_SDXL_Resolutions_$1WLSH$2_direction": { $Name: "Enum_SDXL_Resolutions_$1WLSH$2_direction", $Value: Enum_SDXL_Resolutions_$1WLSH$2_direction },
    "Enum_Time_String_$1WLSH$2_style": { $Name: "Enum_Time_String_$1WLSH$2_style", $Value: Enum_Time_String_$1WLSH$2_style },
    "Enum_Simple_String_Combine_$1WLSH$2_placement": { $Name: "Enum_Simple_String_Combine_$1WLSH$2_placement", $Value: Enum_Simple_String_Combine_$1WLSH$2_placement },
    "Enum_Simple_String_Combine_$1WLSH$2_separator": { $Name: "Enum_Simple_String_Combine_$1WLSH$2_separator", $Value: Enum_Simple_String_Combine_$1WLSH$2_separator },
    "Enum_Image_Save_with_Prompt_$1WLSH$2_extension": { $Name: "Enum_Image_Save_with_Prompt_$1WLSH$2_extension", $Value: Enum_Image_Save_with_Prompt_$1WLSH$2_extension },
    "Enum_Image_Save_with_Prompt$3Info_$1WLSH$2_extension": { $Name: "Enum_Image_Save_with_Prompt$3Info_$1WLSH$2_extension", $Value: Enum_Image_Save_with_Prompt$3Info_$1WLSH$2_extension },
    "Enum_Image_Save_with_Prompt_File_$1WLSH$2_extension": { $Name: "Enum_Image_Save_with_Prompt_File_$1WLSH$2_extension", $Value: Enum_Image_Save_with_Prompt_File_$1WLSH$2_extension },
    "Enum_Image_Save_with_Prompt$3Info_File_$1WLSH$2_extension": { $Name: "Enum_Image_Save_with_Prompt$3Info_File_$1WLSH$2_extension", $Value: Enum_Image_Save_with_Prompt$3Info_File_$1WLSH$2_extension },
}

// 2. Embeddings -------------------------------
export type Embeddings = 'EasyNegative' | 'bad-artist-anime' | 'bad-artist' | 'bad_prompt_version2' | 'badquality' | 'charturnerv2' | 'ng_deepnegative_v1_75t' | 'realisticvision-negative-embedding'

// 3. Suggestions -------------------------------
// 3.1. primitives
export interface CanProduce_boolean {}
export interface CanProduce_number {}
export interface CanProduce_number {}
export interface CanProduce_string {}
// 3.1. types produced
export interface CanProduce_SEG_ELT_control_net_wrapper extends Pick<ComfySetup, 'ImpactFrom$_SEG$_ELT'> { }
export interface CanProduce_ATTENTION_COUPLE_REGION extends Pick<ComfySetup, 'AttentionCoupleRegion' | 'AttentionCoupleRegions'> { }
export interface CanProduce_TRANSFORMERS_CLASSIFIER extends Pick<ComfySetup, 'ImpactHFTransformersClassifierProvider'> { }
export interface CanProduce_OPENAI_CHAT_COMPLETION extends Pick<ComfySetup, 'Chat_completion_$_O' | 'Chat$_Completion_$_O'> { }
export interface CanProduce_IMAGE_INJECT_OPTIONS extends Pick<ComfySetup, 'ADE$_NoisedImageInjectOptions'> { }
export interface CanProduce_NORMALIZED_AMPLITUDE {} // 🔶 no node can output this type.
export interface CanProduce_OPENAI_CHAT_MESSAGES extends Pick<ComfySetup, 'Chat$_Message_$_O' | 'combine$_chat$_messages_$_O' | 'Chat$_Message$_fromString_$_O' | 'compine$_chat$_messages_$_O'> { }
export interface CanProduce_CONTEXTREF_KEYFRAME extends Pick<ComfySetup, 'ADE$_ContextExtras$_ContextRef$_Keyframe' | 'ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation' | 'ADE$_ContextExtras$_ContextRef$_KeyframeFromList'> { }
export interface CanProduce_NAIVEREUSE_KEYFRAME extends Pick<ComfySetup, 'ADE$_ContextExtras$_NaiveReuse$_Keyframe' | 'ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation' | 'ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList'> { }
export interface CanProduce_LORA_HOOK_KEYFRAMES extends Pick<ComfySetup, 'ADE$_LoraHookKeyframe' | 'ADE$_LoraHookKeyframeInterpolation' | 'ADE$_LoraHookKeyframeFromStrengthList'> { }
export interface CanProduce_SEG_ELT_crop_region extends Pick<ComfySetup, 'ImpactFrom$_SEG$_ELT'> { }
export interface CanProduce_CONTROL_NET_WEIGHTS extends Pick<ComfySetup, 'CustomControlNetWeightsFluxFromList'> { }
export interface CanProduce_CLIP_VISION_OUTPUT extends Pick<ComfySetup, 'CLIPVisionEncode' | 'ClipVisionOutputClamp'> { }
export interface CanProduce_REGIONAL_IPADAPTER extends Pick<ComfySetup, 'RegionalIPAdapterMask_$3$3Inspire' | 'RegionalIPAdapterColorMask_$3$3Inspire' | 'RegionalIPAdapterEncodedMask_$3$3Inspire' | 'RegionalIPAdapterEncodedColorMask_$3$3Inspire'> { }
export interface CanProduce_SAM2INFERENCESTATE extends Pick<ComfySetup, 'Sam2VideoSegmentationAddPoints'> { }
export interface CanProduce_SIMPLE_PROMPT_LIST extends Pick<ComfySetup, 'CR_Simple_Prompt_List'> { }
export interface CanProduce_BOOLEAN extends Pick<ComfySetup, 'LoadImageFromUrl' | 'BooleanPrimitive' | 'GetBoolFromJson' | 'ImpactCompare' | 'ImpactIfNone' | 'ImpactConvertDataType' | 'ImpactLogicalOperators' | 'ImpactBoolean' | 'ImpactNeg' | 'ImpactIsNotEmptySEGS' | 'BOOLConstant' | 'Compare$7$$D83D$$DD2C' | 'Bool$7$$D83D$$DD2C' | 'CR_Image_Output' | 'CR_XY_List' | 'CR_XY_Interpolate' | 'CR_XY_From_Folder' | 'CR_Trigger' | 'CR_String_To_Boolean' | 'CR_Set_Value_on_String' | 'CR_Get_Parameter_From_Prompt' | 'SimpleComparison$6' | 'SimpleMathBoolean$6' | 'DF$_Search$_In$_Text' | 'Logic_Boolean' | 'Logic_Boolean_Primitive' | 'Logic_Comparison_OR' | 'Logic_Comparison_AND' | 'Logic_Comparison_XOR' | 'Logic_NOT' | 'Text_Compare' | 'Text_Find' | 'Text_Contains'> { }
export interface CanProduce_CONTROL_NET_STACK extends Pick<ComfySetup, 'AV$_ControlNetEfficientStacker' | 'AV$_ControlNetEfficientStackerSimple' | 'CR_Multi$7ControlNet_Stack'> { }
export interface CanProduce_TIMESTEP_KEYFRAME extends Pick<ComfySetup, 'CustomControlNetWeightsFluxFromList'> { }
export interface CanProduce_SEGS_PREPROCESSOR extends Pick<ComfySetup, 'OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire' | 'MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire'> { }
export interface CanProduce_KSAMPLER_ADVANCED extends Pick<ComfySetup, 'KSamplerAdvancedProvider'> { }
export interface CanProduce_CN_WEIGHTS_EXTRAS {} // 🔶 no node can output this type.
export interface CanProduce_IMAGE_LIST_SIMPLE extends Pick<ComfySetup, 'CR_Image_List_Simple'> { }
export interface CanProduce_LATENT_OPERATION extends Pick<ComfySetup, 'LatentOperationTonemapReinhard' | 'LatentOperationSharpen'> { }
export interface CanProduce_MOTION_MODEL_ADE extends Pick<ComfySetup, 'ADE$_LoadAnimateDiffModel' | 'ADE$_LoadAnimateLCMI2VModel' | 'ADE$_LoadAnimateLCMI2VModel' | 'ADE$_InjectI2VIntoAnimateDiffModel' | 'ADE$_LoadAnimateDiffModelWithCameraCtrl' | 'ADE$_InjectPIAIntoAnimateDiffModel'> { }
export interface CanProduce_CAMERACTRL_POSES extends Pick<ComfySetup, 'ADE$_LoadCameraPoses' | 'ADE$_LoadCameraPosesFromPath' | 'ADE$_CameraPoseBasic' | 'ADE$_CameraPoseCombo' | 'ADE$_CameraPoseAdvanced' | 'ADE$_CameraManualPoseAppend' | 'ADE$_ReplaceCameraParameters' | 'ADE$_ReplaceOriginalPoseAspectRatio'> { }
export interface CanProduce_REGIONAL_PROMPTS extends Pick<ComfySetup, 'CombineRegionalPrompts' | 'RegionalPrompt' | 'RemoveControlNetFromRegionalPrompts_$3$3Inspire' | 'RegionalPromptSimple_$3$3Inspire' | 'RegionalPromptColorMask_$3$3Inspire'> { }
export interface CanProduce_TEXT_LIST_SIMPLE extends Pick<ComfySetup, 'CR_Text_List_Simple'> { }
export interface CanProduce_IPADAPTER_PARAMS extends Pick<ComfySetup, 'IPAdapterRegionalConditioning' | 'IPAdapterCombineParams'> { }
export interface CanProduce_WEIGHTS_STRATEGY extends Pick<ComfySetup, 'IPAdapterWeights' | 'IPAdapterWeightsFromStrategy'> { }
export interface CanProduce_CONDITIONING_SEQ extends Pick<ComfySetup, 'CLIPTextEncodeList'> { }
export interface CanProduce_STRING extends Pick<ComfySetup, 'AV$_ParametersPipeToPrompts' | 'AV$_ParametersPipeToPrompts' | 'BooleanPrimitive' | 'AspectRatioSelector' | 'SDXLAspectRatioSelector' | 'CheckpointNameSelector' | 'GetTextFromJson' | 'RandomInt' | 'RandomFloat' | 'TextRandomMultiline' | 'SDXLPromptStyler' | 'SDXLPromptStyler' | 'BLIPCaption' | 'DeepDanbooruCaption' | 'AV$_ControlNetPreprocessor' | 'AV$_LLMChat' | 'AV$_LLMCompletion' | 'LoraLoader$8pysssss' | 'CheckpointLoader$8pysssss' | 'ShowText$8pysssss' | 'StringFunction$8pysssss' | 'LoadText$8pysssss' | 'SaveText$8pysssss' | 'DPRandomGenerator' | 'DPCombinatorialGenerator' | 'DPFeelingLucky' | 'DPJinja' | 'DPMagicPrompt' | 'ImpactFrom$_SEG$_ELT' | 'LatentSwitch' | 'SEGSSwitch' | 'ImpactSwitch' | 'ImpactWildcardProcessor' | 'ImpactWildcardEncode' | 'ImpactConvertDataType' | 'ImpactStringSelector' | 'StringListToString' | 'WildcardPromptFromString' | 'WildcardPromptFromString' | 'ImpactSEGSClassify' | 'LoraLoaderBlockWeight_$3$3Inspire' | 'MakeLBW_$3$3Inspire' | 'UnzipPrompt_$3$3Inspire' | 'UnzipPrompt_$3$3Inspire' | 'UnzipPrompt_$3$3Inspire' | 'PromptExtractor_$3$3Inspire' | 'PromptExtractor_$3$3Inspire' | 'BindImageListPromptList_$3$3Inspire' | 'BindImageListPromptList_$3$3Inspire' | 'BindImageListPromptList_$3$3Inspire' | 'WildcardEncode_$3$3Inspire' | 'PromptBuilder_$3$3Inspire' | 'MakeBasicPipe_$3$3Inspire' | 'LoadImageListFromDir_$3$3Inspire' | 'CheckpointLoaderSimpleShared_$3$3Inspire' | 'StableCascade$_CheckpointLoader_$3$3Inspire' | 'StableCascade$_CheckpointLoader_$3$3Inspire' | 'IPAdapterModelHelper_$3$3Inspire' | 'IPAdapterModelHelper_$3$3Inspire' | 'StringConstant' | 'StringConstantMultiline' | 'LoadAndResizeImage' | 'LoadImagesFromFolderKJ' | 'SaveImageKJ' | 'FlipSigmasAdjusted' | 'WidgetToString' | 'ScaleBatchPromptSchedule' | 'AppendStringsToList' | 'JoinStrings' | 'JoinStringMulti' | 'SomethingToString' | 'SplineEditor' | 'SplineEditor' | 'MaskOrImageToWeight' | 'WeightScheduleConvert' | 'InterpolateCoords' | 'PointsEditor' | 'PointsEditor' | 'Superprompt' | 'FluxBlockLoraLoader' | 'CreateInstanceDiffusionTracking' | 'AppendInstanceDiffusionTracking' | 'String$7$$D83D$$DD2C' | 'SaveImageOpenEXR' | 'TESTNODE$_TOKEN' | 'RandomPrompt' | 'EmbeddingPrompt' | 'PromptSlide' | 'GLIGENTextBoxApply$_Advanced' | 'PromptSimplification' | 'GridInput' | 'ImagesPrompt$_' | 'KeyInput' | 'TextInput$_' | 'Font' | 'PromptImage' | 'CreateJsonNode' | 'TransparentImage' | 'ResizeImageMixlab' | 'LoadImagesFromPath' | 'LoadImagesFromPath' | 'Color' | 'ScreenShare' | 'SpeechRecognition' | 'SpeechSynthesis' | 'JoinWithDelimiter' | 'LoraNames$_' | 'ChatGPTOpenAI' | 'ChatGPTOpenAI' | 'ChatGPTOpenAI' | 'SiliconflowLLM' | 'SiliconflowLLM' | 'SiliconflowLLM' | 'ShowTextForGPT' | 'TextSplitByDelimiter' | 'JsonRepair' | 'JsonRepair' | 'SimulateDevDesignDiscussions' | 'ClipInterrogator' | 'ClipInterrogator' | 'PromptGenerate$_Mix' | 'ChinesePrompt$_Mix' | 'LoadAndCombinedAudio$_' | 'MiniCPM$_VQA$_Simple' | 'MiniCPM$_VQA$_Simple' | 'SenseVoiceNode' | 'SenseVoiceNode' | 'VideoGenKlingNode' | 'VideoGenRunwayGen3Node' | 'VideoGenLumaDreamMachineNode' | 'ChatGPT_Simple_$_O' | 'ChatGPT_compact_$_O' | 'Chat_completion_$_O' | 'RandomNSP_$_O' | 'ConcatRandomNSP$_O' | 'Concat_Text_$_O' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'QOL_Split_String' | 'Trim_Text_$_O' | 'Replace_Text_$_O' | 'floatToText_$_O' | 'Debug_Text_route_$_O' | 'Text_$_O' | 'Florence2toCoordinates' | 'CR_Conditioning_Mixer' | 'CR_Select_Model' | 'CR_Select_Model' | 'CR_Seed' | 'CR_Prompt_Text' | 'CR_Prompt_Text' | 'CR_Combine_Prompt' | 'CR_Combine_Prompt' | 'CR_VAE_Decode' | 'CR_Text_List' | 'CR_Text_List' | 'CR_Prompt_List' | 'CR_Prompt_List' | 'CR_Prompt_List' | 'CR_Simple_List' | 'CR_Float_Range_List' | 'CR_Integer_Range_List' | 'CR_Load_Text_List' | 'CR_Load_Text_List' | 'CR_Binary_To_Bit_List' | 'CR_Binary_To_Bit_List' | 'CR_Text_Cycler' | 'CR_Value_Cycler' | 'CR_Load_Image_List' | 'CR_Load_Image_List_Plus' | 'CR_Load_Image_List_Plus' | 'CR_Load_GIF_As_List' | 'CR_Font_File_List' | 'CR_Batch_Images_From_List' | 'CR_Intertwine_Lists' | 'CR_Intertwine_Lists' | 'CR_Repeater' | 'CR_XY_Product' | 'CR_Text_List_To_String' | 'CR_Text_List_To_String' | 'CR_SD1$55_Aspect_Ratio' | 'CR_SDXL_Aspect_Ratio' | 'CR_Aspect_Ratio' | 'CR_Aspect_Ratio_Banners' | 'CR_Aspect_Ratio_Social_Media' | 'CR$_Aspect_Ratio_For_Print' | 'CR_Image_Size' | 'CR_Aspect_Ratio_SDXL' | 'CR_SDXL_Prompt_Mixer' | 'CR_SDXL_Prompt_Mixer' | 'CR_SDXL_Prompt_Mixer' | 'CR_SDXL_Prompt_Mixer' | 'CR_SDXL_Prompt_Mixer' | 'CR_SDXL_Prompt_Mixer' | 'CR_Seed_to_Int' | 'CR_Apply_ControlNet' | 'CR_Multi$7ControlNet_Stack' | 'CR_Apply_Multi$7ControlNet' | 'CR_Load_LoRA' | 'CR_LoRA_Stack' | 'CR_Apply_LoRA_Stack' | 'CR_Apply_Model_Merge' | 'CR_Apply_Model_Merge' | 'CR_Model_Merge_Stack' | 'CR_Data_Bus_In' | 'CR_Data_Bus_Out' | 'CR_8_Channel_In' | 'CR_8_Channel_Out' | 'CR_Module_Pipe_Loader' | 'CR_Module_Input' | 'CR_Module_Output' | 'CR_Image_Pipe_In' | 'CR_Image_Pipe_Edit' | 'CR_Image_Pipe_Out' | 'CR_Pipe_Switch' | 'CR_SDXL_Prompt_Mix_Presets' | 'CR_SDXL_Prompt_Mix_Presets' | 'CR_SDXL_Prompt_Mix_Presets' | 'CR_SDXL_Prompt_Mix_Presets' | 'CR_SDXL_Prompt_Mix_Presets' | 'CR_SDXL_Prompt_Mix_Presets' | 'CR_SDXL_Prompt_Mix_Presets' | 'CR_SDXL_Style_Text' | 'CR_SDXL_Style_Text' | 'CR_SDXL_Style_Text' | 'CR_SDXL_Base_Prompt_Encoder' | 'CR_Multi_Upscale_Stack' | 'CR_Upscale_Image' | 'CR_Apply_Multi_Upscale' | 'CR_XY_List' | 'CR_XY_List' | 'CR_XY_List' | 'CR_XY_List' | 'CR_XY_List' | 'CR_XY_Interpolate' | 'CR_XY_Interpolate' | 'CR_XY_Interpolate' | 'CR_XY_From_Folder' | 'CR_XY_Index' | 'CR_Halftone_Grid' | 'CR_Color_Bars' | 'CR_Style_Bars' | 'CR_Checker_Pattern' | 'CR_Polygons' | 'CR_Color_Gradient' | 'CR_Radial_Gradient' | 'CR_Starburst_Lines' | 'CR_Starburst_Colors' | 'CR_Simple_Binary_Pattern' | 'CR_Binary_Pattern' | 'CR_Draw_Shape' | 'CR_Draw_Pie' | 'CR_Random_Shape_Pattern' | 'CR_Overlay_Text' | 'CR_Draw_Text' | 'CR_Mask_Text' | 'CR_Composite_Text' | 'CR_Simple_Text_Watermark' | 'CR_Select_Font' | 'CR_Halftone_Filter' | 'CR_Color_Tint' | 'CR_Vignette_Filter' | 'CR_Page_Layout' | 'CR_Image_Panel' | 'CR_Image_Grid_Panel' | 'CR_Image_Border' | 'CR_Feathered_Border' | 'CR_Simple_Text_Panel' | 'CR_Color_Panel' | 'CR_Half_Drop_Panel' | 'CR_Diamond_Panel' | 'CR_Simple_Meme_Template' | 'CR_Simple_Banner' | 'CR_Comic_Panel_Templates' | 'CR_Simple_Image_Compare' | 'CR_Thumbnail_Preview' | 'CR_Seamless_Checker' | 'CR_Image_Input_Switch' | 'CR_Image_Input_Switch_$14_way$2' | 'CR_Latent_Input_Switch' | 'CR_Conditioning_Input_Switch' | 'CR_Clip_Input_Switch' | 'CR_Model_Input_Switch' | 'CR_ControlNet_Input_Switch' | 'CR_VAE_Input_Switch' | 'CR_Text_Input_Switch' | 'CR_Text_Input_Switch' | 'CR_Text_Input_Switch_$14_way$2' | 'CR_Text_Input_Switch_$14_way$2' | 'CR_Switch_Model_and_CLIP' | 'CR_Batch_Process_Switch' | 'CR_Img2Img_Process_Switch' | 'CR_Hires_Fix_Process_Switch' | 'CR_Index' | 'CR_Index_Increment' | 'CR_Index_Multiply' | 'CR_Index_Reset' | 'CR_Trigger' | 'CR_String_To_Number' | 'CR_String_To_Combo' | 'CR_Float_To_String' | 'CR_Float_To_String' | 'CR_Float_To_Integer' | 'CR_Integer_To_String' | 'CR_Integer_To_String' | 'CR_String_To_Boolean' | 'CR_Random_Hex_Color' | 'CR_Random_Hex_Color' | 'CR_Random_Hex_Color' | 'CR_Random_Hex_Color' | 'CR_Random_Hex_Color' | 'CR_Random_RGB' | 'CR_Random_RGB' | 'CR_Random_RGB' | 'CR_Random_RGB' | 'CR_Random_RGB' | 'CR_Random_Multiline_Values' | 'CR_Random_Multiline_Colors' | 'CR_Random_Multiline_Colors' | 'CR_Random_RGB_Gradient' | 'CR_Random_RGB_Gradient' | 'CR_Random_Panel_Codes' | 'CR_Random_Panel_Codes' | 'CR_Text' | 'CR_Multiline_Text' | 'CR_Split_String' | 'CR_Text_Concatenate' | 'CR_Text_Replace' | 'CR_Text_Length' | 'CR_Text_Operation' | 'CR_Text_Blacklist' | 'CR_Save_Text_To_File' | 'CR_Set_Value_On_Boolean' | 'CR_Set_Value_On_Binary' | 'CR_Set_Value_on_String' | 'CR_Set_Switch_From_String' | 'CR_Value' | 'CR_Integer_Multiple' | 'CR_Clamp_Value' | 'CR_Math_Operation' | 'CR_Get_Parameter_From_Prompt' | 'CR_Get_Parameter_From_Prompt' | 'CR_Select_Resize_Method' | 'CR_Select_ISO_Size' | 'CR_Simple_Schedule' | 'CR_Central_Schedule' | 'CR_Combine_Schedules' | 'CR_Load_Schedule_From_File' | 'CR_Schedule_Input_Switch' | 'CR_Bit_Schedule' | 'CR_Bit_Schedule' | 'CR_Simple_Value_Scheduler' | 'CR_Simple_Text_Scheduler' | 'CR_Simple_Text_Scheduler' | 'CR_Value_Scheduler' | 'CR_Text_Scheduler' | 'CR_Text_Scheduler' | 'CR_Load_Scheduled_Models' | 'CR_Load_Scheduled_LoRAs' | 'CR_Prompt_Scheduler' | 'CR_Prompt_Scheduler' | 'CR_Prompt_Scheduler' | 'CR_Simple_Prompt_Scheduler' | 'CR_Simple_Prompt_Scheduler' | 'CR_Simple_Prompt_Scheduler' | 'CR_Keyframe_List' | 'CR_Keyframe_List' | 'CR_Encode_Scheduled_Prompts' | 'CR_Gradient_Float' | 'CR_Gradient_Integer' | 'CR_Increment_Float' | 'CR_Increment_Integer' | 'CR_Interpolate_Latents' | 'CR_Load_Animation_Frames' | 'CR_Load_Flow_Frames' | 'CR_Prompt_List_Keyframes' | 'CR_Prompt_List_Keyframes' | 'CR_Simple_Prompt_List' | 'CR_Simple_Prompt_List_Keyframes' | 'CR_Simple_Prompt_List_Keyframes' | 'CR_Cycle_Models' | 'CR_Cycle_LoRAs' | 'CR_Cycle_Text' | 'CR_Cycle_Text' | 'CR_Cycle_Text_Simple' | 'CR_Cycle_Text_Simple' | 'CR_Cycle_Images' | 'CR_Cycle_Images_Simple' | 'CR_Model_List' | 'CR_LoRA_List' | 'CR_Text_List_Simple' | 'CR_Image_List' | 'CR_Image_List_Simple' | 'UpperBodyTrackingFromPoseKps' | 'FluxBlocksBuster$6' | 'SamplerSelectHelper$6' | 'SchedulerSelectHelper$6' | 'DisplayAny' | 'PromptScheduleNodeFlow' | 'StringSchedule' | 'StringSchedule' | 'BatchStringSchedule' | 'BatchStringSchedule' | 'StringConcatenate' | 'FizzFrameConcatenate' | 'ConcatStringSingle' | 'IPAdapterPromptScheduleFromWeightsStrategy' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Settings_Pipe_$1JPS$2' | 'Text_Concatenate_$1JPS$2' | 'Get_Date_Time_String_$1JPS$2' | 'SDXL_Prompt_Styler_$1JPS$2' | 'SDXL_Prompt_Styler_$1JPS$2' | 'SDXL_Prompt_Styler_$1JPS$2' | 'SDXL_Prompt_Styler_$1JPS$2' | 'SDXL_Prompt_Handling_$1JPS$2' | 'SDXL_Prompt_Handling_$1JPS$2' | 'SDXL_Prompt_Handling_Plus_$1JPS$2' | 'SDXL_Prompt_Handling_Plus_$1JPS$2' | 'Text_Prompt_$1JPS$2' | 'Text_Prompt_Combo_$1JPS$2' | 'Text_Prompt_Combo_$1JPS$2' | 'ttN_conditioning' | 'ttN_conditioning' | 'ttN_pipeLoader$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_advPlot_range' | 'ttN_advPlot_string' | 'ttN_advPlot_combo' | 'ttN_text' | 'ttN_textDebug' | 'ttN_concat' | 'ttN_text3BOX$_3WAYconcat' | 'ttN_text3BOX$_3WAYconcat' | 'ttN_text3BOX$_3WAYconcat' | 'ttN_text3BOX$_3WAYconcat' | 'ttN_text3BOX$_3WAYconcat' | 'ttN_text3BOX$_3WAYconcat' | 'ttN_text3BOX$_3WAYconcat' | 'ttN_text7BOX$_concat' | 'ttN_text7BOX$_concat' | 'ttN_text7BOX$_concat' | 'ttN_text7BOX$_concat' | 'ttN_text7BOX$_concat' | 'ttN_text7BOX$_concat' | 'ttN_text7BOX$_concat' | 'ttN_text7BOX$_concat' | 'ttN_textCycleLine' | 'ttN_textOutput' | 'ttN_int' | 'ttN_float' | 'DF$_Text' | 'DF$_Text$_Box' | 'DF$_DynamicPrompts$_Text$_Box' | 'DF$_String$_Concatenate' | 'DF$_String$_Replace' | 'DF$_To$_text$_$1Debug$2' | 'Context_Big_$1rgthree$2' | 'Context_Big_$1rgthree$2' | 'Context_Big_$1rgthree$2' | 'Context_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Power_Prompt_$1rgthree$2' | 'Power_Prompt_$7_Simple_$1rgthree$2' | 'SDXL_Power_Prompt_$7_Positive_$1rgthree$2' | 'SDXL_Power_Prompt_$7_Positive_$1rgthree$2' | 'SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2' | 'SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2' | 'Cache_Node' | 'Cache_Node' | 'Cache_Node' | 'Checkpoint_Loader' | 'Checkpoint_Loader_$1Simple$2' | 'CLIPTextEncode_$1NSP$2' | 'CLIPTextEncode_$1NSP$2' | 'Create_Morph_Image' | 'Create_Morph_Image' | 'Create_Morph_Image_from_Path' | 'Create_Morph_Image_from_Path' | 'Create_Video_from_Path' | 'Create_Video_from_Path' | 'Diffusers_Model_Loader' | 'Diffusers_Hub_Model_Down$7Loader' | 'Lora_Loader' | 'Hex_to_HSL' | 'HSL_to_Hex' | 'Image_Aspect_Ratio' | 'Image_Aspect_Ratio' | 'Image_History_Loader' | 'Image_Load' | 'Image_Send_HTTP' | 'Image_Save' | 'Load_Image_Batch' | 'Load_Text_File' | 'Load_Lora' | 'Number_to_String' | 'Number_to_Text' | 'Boolean_To_Text' | 'Prompt_Styles_Selector' | 'Prompt_Styles_Selector' | 'Prompt_Multiple_Styles_Selector' | 'Prompt_Multiple_Styles_Selector' | 'BLIP_Analyze_Image' | 'BLIP_Analyze_Image' | 'String_to_Text' | 'Text_Dictionary_Get' | 'Text_Dictionary_To_Text' | 'Text_Compare' | 'Text_Compare' | 'Text_Compare' | 'Text_Concatenate' | 'Text_File_History_Loader' | 'Text_Find_and_Replace_by_Dictionary' | 'Text_Find_and_Replace_Input' | 'Text_Find_and_Replace' | 'Text_Input_Switch' | 'Text_List_to_Text' | 'Text_Load_Line_From_File' | 'Text_Multiline' | 'Text_Multiline_$1Code_Compatible$2' | 'Text_Parse_A1111_Embeddings' | 'Text_Parse_Noodle_Soup_Prompts' | 'Text_Parse_Tokens' | 'Text_Random_Line' | 'Text_Random_Prompt' | 'Text_String' | 'Text_String' | 'Text_String' | 'Text_String' | 'Text_Shuffle' | 'Text_Sort' | 'Text_to_Console' | 'Text_to_String' | 'Text_String_Truncate' | 'Text_String_Truncate' | 'Text_String_Truncate' | 'Text_String_Truncate' | 'unCLIP_Checkpoint_Loader' | 'Upscale_Model_Loader' | 'Write_to_GIF' | 'Write_to_GIF' | 'Write_to_Video' | 'Write_to_Video' | 'Video_Dump_Frames' | 'CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2' | 'CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2' | 'Checkpoint_Loader_w$3Name_$1WLSH$2' | 'CLIP_Positive$7Negative_w$3Text_$1WLSH$2' | 'CLIP_Positive$7Negative_w$3Text_$1WLSH$2' | 'CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2' | 'CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2' | 'CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2' | 'CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2' | 'Image_Load_with_Metadata_$1WLSH$2' | 'Image_Load_with_Metadata_$1WLSH$2' | 'Build_Filename_String_$1WLSH$2' | 'Time_String_$1WLSH$2' | 'Simple_Pattern_Replace_$1WLSH$2' | 'Simple_String_Combine_$1WLSH$2' | 'Prompt_Weight_$1WLSH$2'> { }
export interface CanProduce_SAMPLE_SETTINGS extends Pick<ComfySetup, 'ADE$_AnimateDiffSamplingSettings'> { }
export interface CanProduce_CONTEXT_OPTIONS extends Pick<ComfySetup, 'ADE$_StandardStaticContextOptions' | 'ADE$_StandardUniformContextOptions' | 'ADE$_LoopedUniformContextOptions' | 'ADE$_ViewsOnlyContextOptions' | 'ADE$_BatchedContextOptions' | 'ADE$_AnimateDiffUniformContextOptions' | 'ADE$_ContextExtras$_Set'> { }
export interface CanProduce_CONTEXTREF_MODE extends Pick<ComfySetup, 'ADE$_ContextExtras$_ContextRef$_ModeFirst' | 'ADE$_ContextExtras$_ContextRef$_ModeSliding' | 'ADE$_ContextExtras$_ContextRef$_ModeIndexes'> { }
export interface CanProduce_CONTEXTREF_TUNE extends Pick<ComfySetup, 'ADE$_ContextExtras$_ContextRef$_TuneAttn' | 'ADE$_ContextExtras$_ContextRef$_TuneAttnAdain'> { }
export interface CanProduce_CHECKPOINT_NAME extends Pick<ComfySetup, 'AV$_ParametersPipeToCheckpointModels' | 'AV$_ParametersPipeToCheckpointModels'> { }
export interface CanProduce_RGTHREE_CONTEXT extends Pick<ComfySetup, 'Context_Big_$1rgthree$2' | 'Context_$1rgthree$2' | 'Context_Switch_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2'> { }
export interface CanProduce_FLOAT extends Pick<ComfySetup, 'ADE$_ValueScheduling' | 'ADE$_ValueSchedulingLatents' | 'StringToNumber' | 'GetFloatFromJson' | 'RandomFloat' | 'NumberScaler' | 'MathExpression$8pysssss' | 'ImpactFrom$_SEG$_ELT' | 'ImpactConvertDataType' | 'ImpactFloat' | 'FloatRange_$3$3Inspire' | 'RGB$_HexToHSV_$3$3Inspire' | 'RGB$_HexToHSV_$3$3Inspire' | 'RGB$_HexToHSV_$3$3Inspire' | 'FloatConstant' | 'NormalizedAmplitudeToFloatList' | 'SplineEditor' | 'GradientToFloat' | 'GradientToFloat' | 'WeightScheduleExtend' | 'MaskOrImageToWeight' | 'WeightScheduleConvert' | 'SoundReactive' | 'Float$7$$D83D$$DD2C' | 'FloatSlider' | 'Color' | 'ScreenShare' | 'MultiplicationNode' | 'IncrementingListNode$_' | 'SenseVoiceNode' | 'Equation1param_$_O' | 'Equation2params_$_O' | 'Equation2params_$_O' | 'intToFloat_$_O' | 'float_$_O' | 'CR_Float_Range_List' | 'CR_Value_Cycler' | 'CR_SD1$55_Aspect_Ratio' | 'CR_SDXL_Aspect_Ratio' | 'CR_Aspect_Ratio' | 'CR_Aspect_Ratio' | 'CR_Aspect_Ratio_Banners' | 'CR_Aspect_Ratio_Banners' | 'CR_Aspect_Ratio_Social_Media' | 'CR_Aspect_Ratio_Social_Media' | 'CR$_Aspect_Ratio_For_Print' | 'CR$_Aspect_Ratio_For_Print' | 'CR_Image_Size' | 'CR_Aspect_Ratio_SDXL' | 'CR_Aspect_Ratio_SDXL' | 'CR_Image_Pipe_Out' | 'CR_XY_Interpolate' | 'CR_XY_Interpolate' | 'CR_String_To_Number' | 'CR_Set_Value_On_Boolean' | 'CR_Set_Value_On_Binary' | 'CR_Value' | 'CR_Clamp_Value' | 'CR_Math_Operation' | 'CR_Get_Parameter_From_Prompt' | 'CR_Simple_Value_Scheduler' | 'CR_Value_Scheduler' | 'CR_Prompt_Scheduler' | 'CR_Simple_Prompt_Scheduler' | 'CR_Gradient_Float' | 'CR_Increment_Float' | 'SimpleMath$6' | 'SimpleMathDual$6' | 'SimpleMathDual$6' | 'SimpleMathCondition$6' | 'SimpleMathFloat$6' | 'SimpleMathPercent$6' | 'SimpleMathSlider$6' | 'SimpleMathSliderLowRes$6' | 'Lerp' | 'SinWave' | 'InvSinWave' | 'CosWave' | 'InvCosWave' | 'SquareWave' | 'SawtoothWave' | 'TriangleWave' | 'AbsCosWave' | 'AbsSinWave' | 'ValueSchedule' | 'BatchValueSchedule' | 'BatchValueScheduleLatentInput' | 'IPAdapterWeights' | 'IPAdapterWeights' | 'IPAdapterCombineWeights' | 'IPAdapterWeightsFromStrategy' | 'IPAdapterWeightsFromStrategy' | 'Generation_TXT_IMG_Settings_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Settings_Pipe_$1JPS$2' | 'SDXL_Settings_Pipe_$1JPS$2' | 'ImageToImage_Pipe_$1JPS$2' | 'ImageToImage_Pipe_$1JPS$2' | 'ImageToImage_Pipe_$1JPS$2' | 'ImageToImage_Pipe_$1JPS$2' | 'CtrlNet_CannyEdge_Pipe_$1JPS$2' | 'CtrlNet_CannyEdge_Pipe_$1JPS$2' | 'CtrlNet_CannyEdge_Pipe_$1JPS$2' | 'CtrlNet_ZoeDepth_Pipe_$1JPS$2' | 'CtrlNet_ZoeDepth_Pipe_$1JPS$2' | 'CtrlNet_ZoeDepth_Pipe_$1JPS$2' | 'CtrlNet_MiDaS_Pipe_$1JPS$2' | 'CtrlNet_MiDaS_Pipe_$1JPS$2' | 'CtrlNet_MiDaS_Pipe_$1JPS$2' | 'CtrlNet_MiDaS_Pipe_$1JPS$2' | 'CtrlNet_MiDaS_Pipe_$1JPS$2' | 'CtrlNet_OpenPose_Pipe_$1JPS$2' | 'CtrlNet_OpenPose_Pipe_$1JPS$2' | 'CtrlNet_OpenPose_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'InstantID_Pipe_$1JPS$2' | 'InstantID_Pipe_$1JPS$2' | 'InstantID_Pipe_$1JPS$2' | 'InstantID_Pipe_$1JPS$2' | 'InstantID_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'InstantID_Source_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'Revision_Settings_Pipe_$1JPS$2' | 'Revision_Settings_Pipe_$1JPS$2' | 'Revision_Settings_Pipe_$1JPS$2' | 'Revision_Settings_Pipe_$1JPS$2' | 'Multiply_Int_Int_$1JPS$2' | 'Multiply_Int_Float_$1JPS$2' | 'Multiply_Float_Float_$1JPS$2' | 'Substract_Int_Int_$1JPS$2' | 'BNK$_GetSigma' | 'ttN_int' | 'ttN_float' | 'DF$_Float' | 'DF$_Random' | 'DF$_Int$_to$_Float' | 'DF$_Absolute$_value' | 'DF$_Sum' | 'DF$_Subtract' | 'DF$_Multiply' | 'DF$_Divide' | 'DF$_Power' | 'DF$_Square$_root' | 'DF$_Square$_root' | 'DF$_Sinus' | 'DF$_Cosines' | 'DF$_Tangent' | 'Context_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'KSampler_Config_$1rgthree$2' | 'Constant_Number' | 'Logic_Boolean' | 'Hex_to_HSL' | 'Image_Aspect_Ratio' | 'Image_Size_to_Number' | 'Image_Size_to_Number' | 'Latent_Size_to_Number' | 'Latent_Size_to_Number' | 'Number_Counter' | 'Number_Operation' | 'Number_to_Float' | 'Number_Input_Switch' | 'Number_Input_Condition' | 'Number_Multiple_Of' | 'Number_PI' | 'Random_Number' | 'Seed' | 'Text_Find_and_Replace_Input' | 'Text_Find_and_Replace' | 'True_Random$5org_Number_Generator' | 'Image_Load_with_Metadata_$1WLSH$2'> { }
export interface CanProduce_ITERATION_OPTS extends Pick<ComfySetup, 'ADE$_IterationOptsDefault' | 'ADE$_IterationOptsFreeInit'> { }
export interface CanProduce_SIGMA_SCHEDULE extends Pick<ComfySetup, 'ADE$_SigmaSchedule' | 'ADE$_RawSigmaSchedule' | 'ADE$_SigmaScheduleWeightedAverage' | 'ADE$_SigmaScheduleWeightedAverageInterp' | 'ADE$_SigmaScheduleSplitAndCombine'> { }
export interface CanProduce_CONTEXT_EXTRAS extends Pick<ComfySetup, 'ADE$_ContextExtras$_ContextRef' | 'ADE$_ContextExtras$_NaiveReuse'> { }
export interface CanProduce_TIMESTEPS_COND extends Pick<ComfySetup, 'ADE$_TimestepsConditioning'> { }
export interface CanProduce_VALUES_REPLACE extends Pick<ComfySetup, 'ADE$_ValuesReplace'> { }
export interface CanProduce_SCHEDULER_FUNC extends Pick<ComfySetup, 'GITSSchedulerFuncProvider'> { }
export interface CanProduce_IPADAPTER_PIPE extends Pick<ComfySetup, 'ToIPAdapterPipe_$3$3Inspire' | 'IPAdapterModelHelper_$3$3Inspire'> { }
export interface CanProduce_SELECTEDBLOCKS extends Pick<ComfySetup, 'FluxBlockLoraSelect'> { }
export interface CanProduce_SAMPLER_PARAMS extends Pick<ComfySetup, 'FluxSamplerParams$6'> { }
export interface CanProduce_PIPE_LINE_SDXL extends Pick<ComfySetup, 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeKSamplerSDXL'> { }
export interface CanProduce_SAM_PARAMETERS extends Pick<ComfySetup, 'SAM_Parameters' | 'SAM_Parameters_Combine'> { }
export interface CanProduce_UPSCALE_MODEL extends Pick<ComfySetup, 'UpscaleModelLoader' | 'UpscaleModelClamp' | 'Upscale_Model_Loader' | 'Upscale_Model_Switch'> { }
export interface CanProduce_WEIGHT_ADJUST extends Pick<ComfySetup, 'ADE$_AdjustWeightAllAdd' | 'ADE$_AdjustWeightAllMult' | 'ADE$_AdjustWeightIndivAdd' | 'ADE$_AdjustWeightIndivMult' | 'ADE$_AdjustWeightIndivAttnAdd' | 'ADE$_AdjustWeightIndivAttnMult'> { }
export interface CanProduce_UPSCALER_NAME extends Pick<ComfySetup, 'AV$_ParametersPipeToCheckpointModels' | 'AV$_ParametersPipeToCheckpointModels'> { }
export interface CanProduce_SAM_EMBEDDING extends Pick<ComfySetup, 'GetSAMEmbedding'> { }
export interface CanProduce_DETAILER_PIPE extends Pick<ComfySetup, 'AV$_FaceDetailer' | 'AV$_FaceDetailerPipe' | 'FaceDetailer' | 'FaceDetailerPipe' | 'ToDetailerPipe' | 'ToDetailerPipeSDXL' | 'FromDetailerPipe$_v2' | 'FromDetailerPipeSDXL' | 'BasicPipeToDetailerPipe' | 'BasicPipeToDetailerPipeSDXL' | 'EditDetailerPipe' | 'EditDetailerPipeSDXL' | 'ttN_pipe2DETAILER'> { }
export interface CanProduce_BBOX_DETECTOR extends Pick<ComfySetup, 'CLIPSegDetectorProvider' | 'ONNXDetectorProvider' | 'FromDetailerPipe' | 'FromDetailerPipe$_v2' | 'FromDetailerPipeSDXL' | 'UltralyticsDetectorProvider' | 'MediaPipeFaceMeshDetectorProvider_$3$3Inspire'> { }
export interface CanProduce_SEGM_DETECTOR extends Pick<ComfySetup, 'FromDetailerPipe' | 'FromDetailerPipe$_v2' | 'FromDetailerPipeSDXL' | 'UltralyticsDetectorProvider' | 'MediaPipeFaceMeshDetectorProvider_$3$3Inspire'> { }
export interface CanProduce_DETAILER_HOOK extends Pick<ComfySetup, 'FromDetailerPipe' | 'FromDetailerPipe$_v2' | 'FromDetailerPipeSDXL' | 'CoreMLDetailerHookProvider' | 'PreviewDetailerHookProvider' | 'DetailerHookCombine' | 'NoiseInjectionDetailerHookProvider' | 'UnsamplerDetailerHookProvider' | 'DenoiseSchedulerDetailerHookProvider' | 'SEGSOrderedFilterDetailerHookProvider' | 'SEGSRangeFilterDetailerHookProvider' | 'SEGSLabelFilterDetailerHookProvider' | 'VariationNoiseDetailerHookProvider'> { }
export interface CanProduce_UPSCALER_HOOK extends Pick<ComfySetup, 'PreviewDetailerHookProvider'> { }
export interface CanProduce_INPAINT_PATCH extends Pick<ComfySetup, 'INPAINT$_LoadFooocusInpaint'> { }
export interface CanProduce_INPAINT_MODEL extends Pick<ComfySetup, 'INPAINT$_LoadInpaintModel'> { }
export interface CanProduce_ZIPPED_PROMPT extends Pick<ComfySetup, 'LoadPromptsFromDir_$3$3Inspire' | 'LoadPromptsFromFile_$3$3Inspire' | 'LoadSinglePromptFromFile_$3$3Inspire' | 'ZipPrompt_$3$3Inspire'> { }
export interface CanProduce_MARIGOLDMODEL extends Pick<ComfySetup, 'MarigoldModelLoader'> { }
export interface CanProduce_AUDIOINPUTMIX {} // 🔶 no node can output this type.
export interface CanProduce_TRIPOSR_MODEL extends Pick<ComfySetup, 'LoadTripoSRModel$_'> { }
export interface CanProduce_VHS_VIDEOINFO extends Pick<ComfySetup, 'LoadVideoFromURL'> { }
export interface CanProduce_UPSCALE_STACK extends Pick<ComfySetup, 'CR_Multi_Upscale_Stack'> { }
export interface CanProduce_POSE_KEYPOINT extends Pick<ComfySetup, 'DWPreprocessor' | 'AnimalPosePreprocessor' | 'OpenposePreprocessor'> { }
export interface CanProduce_REMBG_SESSION extends Pick<ComfySetup, 'RemBGSession$6' | 'TransparentBGSession$6'> { }
export interface CanProduce_CLIPSEG_MODEL extends Pick<ComfySetup, 'CLIPSeg_Model_Loader'> { }
export interface CanProduce_INT extends Pick<ComfySetup, 'ADE$_ValueScheduling' | 'ADE$_ValueSchedulingLatents' | 'StringToInt' | 'StringToNumber' | 'AspectRatioSelector' | 'AspectRatioSelector' | 'SDXLAspectRatioSelector' | 'SDXLAspectRatioSelector' | 'SeedSelector' | 'GetIntFromJson' | 'RandomInt' | 'MathExpression$8pysssss' | 'ImpactFrom$_SEG$_ELT$_bbox' | 'ImpactFrom$_SEG$_ELT$_bbox' | 'ImpactFrom$_SEG$_ELT$_bbox' | 'ImpactFrom$_SEG$_ELT$_bbox' | 'ImpactFrom$_SEG$_ELT$_crop$_region' | 'ImpactFrom$_SEG$_ELT$_crop$_region' | 'ImpactFrom$_SEG$_ELT$_crop$_region' | 'ImpactFrom$_SEG$_ELT$_crop$_region' | 'ImpactCount$_Elts$_in$_SEGS' | 'LatentSwitch' | 'SEGSSwitch' | 'ImpactSwitch' | 'ImpactConvertDataType' | 'ImpactInt' | 'ImpactImageInfo' | 'ImpactImageInfo' | 'ImpactImageInfo' | 'ImpactImageInfo' | 'ImpactLatentInfo' | 'ImpactLatentInfo' | 'ImpactLatentInfo' | 'ImpactLatentInfo' | 'ImpactMinMax' | 'ImpactQueueTriggerCountdown' | 'ImpactQueueTriggerCountdown' | 'ListCounter_$3$3Inspire' | 'RandomGeneratorForList_$3$3Inspire' | 'LoadImagesFromDir_$3$3Inspire' | 'INTConstant' | 'ConditioningMultiCombine' | 'GetMaskSizeAndCount' | 'GetMaskSizeAndCount' | 'GetMaskSizeAndCount' | 'ResizeMask' | 'ResizeMask' | 'GetImageSizeAndCount' | 'GetImageSizeAndCount' | 'GetImageSizeAndCount' | 'ImageResizeKJ' | 'ImageResizeKJ' | 'LoadAndResizeImage' | 'LoadAndResizeImage' | 'LoadImagesFromFolderKJ' | 'BatchCropFromMask' | 'BatchCropFromMask' | 'BatchCropFromMaskAdvanced' | 'BatchCropFromMaskAdvanced' | 'BboxToInt' | 'BboxToInt' | 'BboxToInt' | 'BboxToInt' | 'BboxToInt' | 'BboxToInt' | 'VRAM$_Debug' | 'VRAM$_Debug' | 'EmptyLatentImagePresets' | 'EmptyLatentImagePresets' | 'EmptyLatentImageCustomPresets' | 'EmptyLatentImageCustomPresets' | 'SplineEditor' | 'WeightScheduleConvert' | 'PlotCoordinates' | 'PlotCoordinates' | 'PlotCoordinates' | 'PlotCoordinates' | 'SoundReactive' | 'CreateInstanceDiffusionTracking' | 'CreateInstanceDiffusionTracking' | 'CreateInstanceDiffusionTracking' | 'CreateInstanceDiffusionTracking' | 'Int$7$$D83D$$DD2C' | 'IntNumber' | 'ImageCropByAlpha' | 'ImageCropByAlpha' | 'ImageCropByAlpha' | 'ImageCropByAlpha' | 'GetImageSize$_' | 'GetImageSize$_' | 'GetImageSize$_' | 'GetImageSize$_' | 'Color' | 'Color' | 'Color' | 'GridOutput' | 'GridOutput' | 'GridOutput' | 'GridOutput' | 'ScreenShare' | 'TextToNumber' | 'MultiplicationNode' | 'SwitchByIndex' | 'Seed$_' | 'IncrementingListNode$_' | 'CharacterInText' | 'LoadVideoAndSegment$_' | 'LoadVideoAndSegment$_' | 'LoadVideoAndSegment$_' | 'ScenesNode$_' | 'ScenedetectNode$_' | 'ScenedetectNode$_' | 'SceneInfoNode' | 'SceneInfoNode' | 'LoadVideoFromURL' | 'Equation2params_$_O' | 'Equation2params_$_O' | 'floatToInt_$_O' | 'GetImage$_$1Width$AndHeight$2_$_O' | 'GetImage$_$1Width$AndHeight$2_$_O' | 'GetLatent$_$1Width$AndHeight$2_$_O' | 'GetLatent$_$1Width$AndHeight$2_$_O' | 'seed_$_O' | 'int_$_O' | 'CR_Seed' | 'CR_Integer_Range_List' | 'CR_Value_Cycler' | 'CR_Load_Image_List_Plus' | 'CR_Load_Image_List_Plus' | 'CR_Load_Image_List_Plus' | 'CR_Load_Image_List_Plus' | 'CR_SD1$55_Aspect_Ratio' | 'CR_SD1$55_Aspect_Ratio' | 'CR_SD1$55_Aspect_Ratio' | 'CR_SDXL_Aspect_Ratio' | 'CR_SDXL_Aspect_Ratio' | 'CR_SDXL_Aspect_Ratio' | 'CR_Aspect_Ratio' | 'CR_Aspect_Ratio' | 'CR_Aspect_Ratio' | 'CR_Aspect_Ratio_Banners' | 'CR_Aspect_Ratio_Banners' | 'CR_Aspect_Ratio_Banners' | 'CR_Aspect_Ratio_Social_Media' | 'CR_Aspect_Ratio_Social_Media' | 'CR_Aspect_Ratio_Social_Media' | 'CR$_Aspect_Ratio_For_Print' | 'CR$_Aspect_Ratio_For_Print' | 'CR$_Aspect_Ratio_For_Print' | 'CR_Image_Size' | 'CR_Image_Size' | 'CR_Aspect_Ratio_SDXL' | 'CR_Aspect_Ratio_SDXL' | 'CR_Aspect_Ratio_SDXL' | 'CR_Seed_to_Int' | 'CR_Module_Input' | 'CR_Image_Pipe_Out' | 'CR_Image_Pipe_Out' | 'CR_XY_Index' | 'CR_XY_Index' | 'CR_Index' | 'CR_Index_Increment' | 'CR_Index_Increment' | 'CR_Index_Multiply' | 'CR_Index_Multiply' | 'CR_Index_Reset' | 'CR_Index_Reset' | 'CR_Trigger' | 'CR_String_To_Number' | 'CR_Float_To_Integer' | 'CR_Text_Length' | 'CR_Set_Value_On_Boolean' | 'CR_Set_Value_On_Binary' | 'CR_Set_Switch_From_String' | 'CR_Value' | 'CR_Integer_Multiple' | 'CR_Select_ISO_Size' | 'CR_Select_ISO_Size' | 'CR_Simple_Value_Scheduler' | 'CR_Value_Scheduler' | 'CR_Gradient_Integer' | 'CR_Increment_Integer' | 'CR_Current_Frame' | 'CR_Load_Flow_Frames' | 'PixelPerfectResolution' | 'ImageGenResolutionFromImage' | 'ImageGenResolutionFromImage' | 'ImageGenResolutionFromLatent' | 'ImageGenResolutionFromLatent' | 'ImageCrop$6' | 'ImageCrop$6' | 'ImageResize$6' | 'ImageResize$6' | 'ImageTile$6' | 'ImageTile$6' | 'ImageTile$6' | 'ImageTile$6' | 'GetImageSize$6' | 'GetImageSize$6' | 'GetImageSize$6' | 'ImagePreviewFromLatent$6' | 'ImagePreviewFromLatent$6' | 'MaskBoundingBox$6' | 'MaskBoundingBox$6' | 'MaskBoundingBox$6' | 'MaskBoundingBox$6' | 'BatchCount$6' | 'SDXLEmptyLatentSizePicker$6' | 'SDXLEmptyLatentSizePicker$6' | 'SimpleMath$6' | 'SimpleMathDual$6' | 'SimpleMathDual$6' | 'SimpleMathCondition$6' | 'SimpleMathInt$6' | 'SimpleMathSlider$6' | 'SimpleMathSliderLowRes$6' | 'Lerp' | 'SinWave' | 'InvSinWave' | 'CosWave' | 'InvCosWave' | 'SquareWave' | 'SawtoothWave' | 'TriangleWave' | 'AbsCosWave' | 'AbsSinWave' | 'ValueSchedule' | 'PromptScheduleNodeFlow' | 'BatchValueSchedule' | 'BatchValueScheduleLatentInput' | 'convertKeyframeKeysToBatchKeys' | 'CalculateFrameOffset' | 'IPAdapterWeights' | 'IPAdapterCombineWeights' | 'IPAdapterWeightsFromStrategy' | 'SDXL_Resolutions_$1JPS$2' | 'SDXL_Resolutions_$1JPS$2' | 'Generation_TXT_IMG_Settings_$1JPS$2' | 'Integer_Switch_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Basic_Settings_Pipe_$1JPS$2' | 'SDXL_Settings_Pipe_$1JPS$2' | 'SDXL_Settings_Pipe_$1JPS$2' | 'SDXL_Settings_Pipe_$1JPS$2' | 'SDXL_Settings_Pipe_$1JPS$2' | 'SDXL_Settings_Pipe_$1JPS$2' | 'SDXL_Settings_Pipe_$1JPS$2' | 'Crop_Image_Pipe_$1JPS$2' | 'Crop_Image_Pipe_$1JPS$2' | 'ImageToImage_Pipe_$1JPS$2' | 'CtrlNet_CannyEdge_Pipe_$1JPS$2' | 'CtrlNet_CannyEdge_Pipe_$1JPS$2' | 'CtrlNet_CannyEdge_Pipe_$1JPS$2' | 'CtrlNet_ZoeDepth_Pipe_$1JPS$2' | 'CtrlNet_MiDaS_Pipe_$1JPS$2' | 'CtrlNet_OpenPose_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'IP_Adapter_Tiled_Settings_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'Image_Prepare_Pipe_$1JPS$2' | 'InstantID_Source_Prepare_Pipe_$1JPS$2' | 'InstantID_Source_Prepare_Pipe_$1JPS$2' | 'InstantID_Source_Prepare_Pipe_$1JPS$2' | 'InstantID_Source_Prepare_Pipe_$1JPS$2' | 'InstantID_Source_Prepare_Pipe_$1JPS$2' | 'InstantID_Source_Prepare_Pipe_$1JPS$2' | 'InstantID_Source_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Pose_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'InstantID_Mask_Prepare_Pipe_$1JPS$2' | 'Revision_Settings_Pipe_$1JPS$2' | 'Revision_Settings_Pipe_$1JPS$2' | 'Revision_Settings_Pipe_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'SDXL_Recommended_Resolution_Calc_$1JPS$2' | 'SDXL_Recommended_Resolution_Calc_$1JPS$2' | 'Resolution_Multiply_$1JPS$2' | 'Resolution_Multiply_$1JPS$2' | 'Largest_Int_$1JPS$2' | 'Largest_Int_$1JPS$2' | 'Largest_Int_$1JPS$2' | 'Multiply_Int_Int_$1JPS$2' | 'Multiply_Int_Float_$1JPS$2' | 'Multiply_Float_Float_$1JPS$2' | 'Substract_Int_Int_$1JPS$2' | 'Get_Image_Size_$1JPS$2' | 'Get_Image_Size_$1JPS$2' | 'Save_Images_Plus_$1JPS$2' | 'Time_Seed_$1JPS$2' | 'ttN_tinyLoader' | 'ttN_tinyLoader' | 'ttN_KSampler$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSamplerAdvanced$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeEDIT' | 'ttN_int' | 'ttN_float' | 'ttN_seed' | 'ttN_pipeOUT' | 'ttN_pipeLoader' | 'ttN_pipeKSampler' | 'ttN_pipeKSamplerAdvanced' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeKSamplerSDXL' | 'DF$_Integer' | 'DF$_Search$_In$_Text' | 'DF$_Ceil' | 'DF$_Floor' | 'DF$_Get$_latent$_size' | 'DF$_Get$_latent$_size' | 'DF$_Get$_image$_size' | 'DF$_Get$_image$_size' | 'Get_Image_Size' | 'Get_Image_Size' | 'MasqueradeIncrementer' | 'Context_Big_$1rgthree$2' | 'Context_Big_$1rgthree$2' | 'Context_Big_$1rgthree$2' | 'Context_Big_$1rgthree$2' | 'Context_Big_$1rgthree$2' | 'Context_$1rgthree$2' | 'Context_Switch_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Seed_$1rgthree$2' | 'KSampler_Config_$1rgthree$2' | 'KSampler_Config_$1rgthree$2' | 'SDXL_Empty_Latent_Image_$1rgthree$2' | 'SDXL_Empty_Latent_Image_$1rgthree$2' | 'Constant_Number' | 'Logic_Boolean' | 'Hex_to_HSL' | 'Hex_to_HSL' | 'Hex_to_HSL' | 'Image_Send_HTTP' | 'Image_Size_to_Number' | 'Image_Size_to_Number' | 'Image_to_Seed' | 'Integer_place_counter' | 'Latent_Size_to_Number' | 'Latent_Size_to_Number' | 'Mask_Crop_Region' | 'Mask_Crop_Region' | 'Mask_Crop_Region' | 'Mask_Crop_Region' | 'Mask_Crop_Region' | 'Mask_Crop_Region' | 'Number_Counter' | 'Number_Operation' | 'Number_Input_Switch' | 'Number_Input_Condition' | 'Number_Multiple_Of' | 'Number_to_Int' | 'Random_Number' | 'Seed' | 'Text_Find_and_Replace_Input' | 'Text_Find_and_Replace' | 'True_Random$5org_Number_Generator' | 'CLIPTextEncodeSequence2' | 'CLIPTextEncodeSequence2' | 'Empty_Latent_by_Pixels_$1WLSH$2' | 'Empty_Latent_by_Pixels_$1WLSH$2' | 'Empty_Latent_by_Ratio_$1WLSH$2' | 'Empty_Latent_by_Ratio_$1WLSH$2' | 'Empty_Latent_by_Size_$1WLSH$2' | 'Empty_Latent_by_Size_$1WLSH$2' | 'SDXL_Quick_Empty_Latent_$1WLSH$2' | 'SDXL_Quick_Empty_Latent_$1WLSH$2' | 'Image_Load_with_Metadata_$1WLSH$2' | 'Image_Load_with_Metadata_$1WLSH$2' | 'Image_Load_with_Metadata_$1WLSH$2' | 'Image_Load_with_Metadata_$1WLSH$2' | 'Image_Scale_by_Shortside_$1WLSH$2' | 'Image_Scale_by_Shortside_$1WLSH$2' | 'Multiply_Integer_$1WLSH$2' | 'Quick_Resolution_Multiply_$1WLSH$2' | 'Quick_Resolution_Multiply_$1WLSH$2' | 'Resolutions_by_Ratio_$1WLSH$2' | 'Resolutions_by_Ratio_$1WLSH$2' | 'Seed_to_Number_$1WLSH$2' | 'Seed_and_Int_$1WLSH$2' | 'SDXL_Steps_$1WLSH$2' | 'SDXL_Steps_$1WLSH$2' | 'SDXL_Steps_$1WLSH$2' | 'SDXL_Resolutions_$1WLSH$2' | 'SDXL_Resolutions_$1WLSH$2'> { }
export interface CanProduce_CONDITIONING extends Pick<ComfySetup, 'CLIPTextEncode' | 'ConditioningAverage' | 'ConditioningCombine' | 'ConditioningConcat' | 'ConditioningSetArea' | 'ConditioningSetAreaPercentage' | 'ConditioningSetAreaStrength' | 'ConditioningSetMask' | 'StyleModelApply' | 'unCLIPConditioning' | 'ControlNetApply' | 'ControlNetApplyAdvanced' | 'ControlNetApplyAdvanced' | 'GLIGENTextBoxApply' | 'InpaintModelConditioning' | 'InpaintModelConditioning' | 'ConditioningZeroOut' | 'ConditioningSetTimestepRange' | 'CLIPTextEncodeSDXLRefiner' | 'CLIPTextEncodeSDXL' | 'SVD$_img2vid$_Conditioning' | 'SVD$_img2vid$_Conditioning' | 'StableZero123$_Conditioning' | 'StableZero123$_Conditioning' | 'StableZero123$_Conditioning$_Batched' | 'StableZero123$_Conditioning$_Batched' | 'SV3D$_Conditioning' | 'SV3D$_Conditioning' | 'SD$_4XUpscale$_Conditioning' | 'SD$_4XUpscale$_Conditioning' | 'PhotoMakerEncode' | 'CLIPTextEncodeControlnet' | 'StableCascade$_StageB$_Conditioning' | 'InstructPixToPixConditioning' | 'InstructPixToPixConditioning' | 'CLIPTextEncodeSD3' | 'ControlNetApplySD3' | 'ControlNetApplySD3' | 'ControlNetInpaintingAliMamaApply' | 'ControlNetInpaintingAliMamaApply' | 'CLIPTextEncodeHunyuanDiT' | 'CLIPTextEncodeFlux' | 'FluxGuidance' | 'ConditioningClamp' | 'ADE$_AttachLoraHookToConditioning' | 'ADE$_PairedConditioningSetMask' | 'ADE$_PairedConditioningSetMask' | 'ADE$_ConditioningSetMask' | 'ADE$_PairedConditioningSetMaskAndCombine' | 'ADE$_PairedConditioningSetMaskAndCombine' | 'ADE$_ConditioningSetMaskAndCombine' | 'ADE$_PairedConditioningSetUnmaskedAndCombine' | 'ADE$_PairedConditioningSetUnmaskedAndCombine' | 'ADE$_ConditioningSetUnmaskedAndCombine' | 'ADE$_PairedConditioningCombine' | 'ADE$_PairedConditioningCombine' | 'ADE$_ConditioningCombine' | 'ADE$_PromptScheduling' | 'ADE$_PromptSchedulingLatents' | 'AV$_ControlNetEfficientLoader' | 'AV$_ControlNetEfficientLoaderAdvanced' | 'AV$_ControlNetEfficientLoaderAdvanced' | 'FromDetailerPipe' | 'FromDetailerPipe' | 'FromDetailerPipe$_v2' | 'FromDetailerPipe$_v2' | 'FromDetailerPipeSDXL' | 'FromDetailerPipeSDXL' | 'FromDetailerPipeSDXL' | 'FromDetailerPipeSDXL' | 'FromBasicPipe' | 'FromBasicPipe' | 'FromBasicPipe$_v2' | 'FromBasicPipe$_v2' | 'ImpactNegativeConditioningPlaceholder' | 'ImpactWildcardEncode' | 'ImpactCombineConditionings' | 'ImpactConcatConditionings' | 'INPAINT$_VAEEncodeInpaintConditioning' | 'INPAINT$_VAEEncodeInpaintConditioning' | 'WildcardEncode_$3$3Inspire' | 'CLIPTextEncodeWithWeight_$3$3Inspire' | 'RemoveControlNet_$3$3Inspire' | 'RegionalConditioningSimple_$3$3Inspire' | 'RegionalConditioningColorMask_$3$3Inspire' | 'ConcatConditioningsWithMultiplier_$3$3Inspire' | 'ConditioningUpscale_$3$3Inspire' | 'ConditioningStretch_$3$3Inspire' | 'ConditioningMultiCombine' | 'ConditioningSetMaskAndCombine' | 'ConditioningSetMaskAndCombine' | 'ConditioningSetMaskAndCombine3' | 'ConditioningSetMaskAndCombine3' | 'ConditioningSetMaskAndCombine4' | 'ConditioningSetMaskAndCombine4' | 'ConditioningSetMaskAndCombine5' | 'ConditioningSetMaskAndCombine5' | 'CondPassThrough' | 'CondPassThrough' | 'StableZero123$_BatchSchedule' | 'StableZero123$_BatchSchedule' | 'SV3D$_BatchSchedule' | 'SV3D$_BatchSchedule' | 'GLIGENTextBoxApplyBatchCoords' | 'GLIGENTextBoxApply$_Advanced' | 'ApplyVisualStylePrompting$_' | 'ApplyVisualStylePrompting$_' | 'CLIPStringEncode_$_O' | 'BNK$_CLIPTextEncodeAdvanced' | 'BNK$_CLIPTextEncodeSDXLAdvanced' | 'BNK$_AddCLIPSDXLParams' | 'BNK$_AddCLIPSDXLRParams' | 'CR_Conditioning_Mixer' | 'CR_Apply_ControlNet' | 'CR_Apply_Multi$7ControlNet' | 'CR_Apply_Multi$7ControlNet' | 'CR_Module_Input' | 'CR_Module_Input' | 'CR_SDXL_Base_Prompt_Encoder' | 'CR_SDXL_Base_Prompt_Encoder' | 'CR_Conditioning_Input_Switch' | 'CR_Encode_Scheduled_Prompts' | 'BNK$_CutoffRegionsToConditioning' | 'BNK$_CutoffRegionsToConditioning$_ADV' | 'CLIPTextEncodeSDXL$6' | 'ConditioningCombineMultiple$6' | 'SD3NegativeConditioning$6' | 'TextEncodeForSamplerParams$6' | 'PromptSchedule' | 'PromptSchedule' | 'PromptScheduleNodeFlowEnd' | 'PromptScheduleNodeFlowEnd' | 'PromptScheduleEncodeSDXL' | 'PromptScheduleEncodeSDXL' | 'BatchPromptSchedule' | 'BatchPromptSchedule' | 'BatchPromptScheduleEncodeSDXL' | 'BatchPromptScheduleEncodeSDXL' | 'BatchPromptScheduleSDXLLatentInput' | 'BatchPromptScheduleSDXLLatentInput' | 'BatchPromptScheduleLatentInput' | 'BatchPromptScheduleLatentInput' | 'Init_FizzFrame' | 'Init_FizzFrame' | 'FizzFrame' | 'FizzFrame' | 'IPAdapterRegionalConditioning' | 'IPAdapterRegionalConditioning' | 'Conditioning_Switch_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'CLIPTextEncode_SDXL_Plus_$1JPS$2' | 'CLIPTextEncode_SDXL_Plus_$1JPS$2' | 'ttN_conditioning' | 'ttN_conditioning' | 'ttN_KSampler$_v2' | 'ttN_KSampler$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSamplerAdvanced$_v2' | 'ttN_pipeKSamplerAdvanced$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeEDIT' | 'ttN_pipeEDIT' | 'ttN_pipeEncodeConcat' | 'ttN_pipeEncodeConcat' | 'ttN_pipeOUT' | 'ttN_pipeOUT' | 'ttN_pipeLoader' | 'ttN_pipeLoader' | 'ttN_pipeKSampler' | 'ttN_pipeKSampler' | 'ttN_pipeKSamplerAdvanced' | 'ttN_pipeKSamplerAdvanced' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeKSamplerSDXL' | 'ttN_pipeKSamplerSDXL' | 'ttN_pipeKSamplerSDXL' | 'ttN_pipeKSamplerSDXL' | 'DF$_Conditioning$_area$_scale$_by$_ratio' | 'Context_Big_$1rgthree$2' | 'Context_Big_$1rgthree$2' | 'Context_$1rgthree$2' | 'Context_$1rgthree$2' | 'Context_Switch_$1rgthree$2' | 'Context_Switch_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_$1rgthree$2' | 'Context_Merge_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Power_Prompt_$1rgthree$2' | 'Power_Prompt_$7_Simple_$1rgthree$2' | 'SDXL_Power_Prompt_$7_Positive_$1rgthree$2' | 'SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2' | 'Bus_Node' | 'Bus_Node' | 'CLIPTextEncode_$1NSP$2' | 'Conditioning_Input_Switch' | 'Load_Cache' | 'Text_to_Conditioning' | 'CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2' | 'ConditioningBlend' | 'CLIPTextEncodeSequence2' | 'CLIP_Positive$7Negative_$1WLSH$2' | 'CLIP_Positive$7Negative_$1WLSH$2' | 'CLIP_Positive$7Negative_w$3Text_$1WLSH$2' | 'CLIP_Positive$7Negative_w$3Text_$1WLSH$2' | 'CLIP_Positive$7Negative_XL_$1WLSH$2' | 'CLIP_Positive$7Negative_XL_$1WLSH$2' | 'CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2' | 'CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2' | 'CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2' | 'CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2'> { }
export interface CanProduce_NOISE_LAYERS extends Pick<ComfySetup, 'ADE$_NoiseLayerAdd' | 'ADE$_NoiseLayerAddWeighted' | 'ADE$_NoiseLayerReplace'> { }
export interface CanProduce_IMAGE_INJECT extends Pick<ComfySetup, 'ADE$_NoisedImageInjection'> { }
export interface CanProduce_AD_KEYFRAMES extends Pick<ComfySetup, 'ADE$_AnimateDiffKeyframe' | 'ADE$_CameraCtrlAnimateDiffKeyframe' | 'ADE$_PIA$_AnimateDiffKeyframe'> { }
export interface CanProduce_DEPENDENCIES extends Pick<ComfySetup, 'DependenciesEdit'> { }
export interface CanProduce_AV_SAM_MODEL extends Pick<ComfySetup, 'AV$_SAMLoader'> { }
export interface CanProduce_SEG_ELT_bbox extends Pick<ComfySetup, 'ImpactFrom$_SEG$_ELT'> { }
export interface CanProduce_CLIPSEGMODEL extends Pick<ComfySetup, 'DownloadAndLoadCLIPSeg'> { }
export interface CanProduce_STEP_LATENTS extends Pick<ComfySetup, 'StyleAlignedSampleReferenceLatents$_'> { }
export interface CanProduce_OPTICAL_FLOW extends Pick<ComfySetup, 'Unimatch$_OptFlowPreprocessor' | 'MaskOptFlow'> { }
export interface CanProduce_MASK_MAPPING extends Pick<ComfySetup, 'Separate_Mask_Components'> { }
export interface CanProduce_IMAGE_BOUNDS extends Pick<ComfySetup, 'Image_Bounds' | 'Inset_Image_Bounds' | 'Bounded_Image_Crop_with_Mask' | 'Image_Bounds_to_Console'> { }
export interface CanProduce_CLIP_VISION extends Pick<ComfySetup, 'CLIPVisionLoader' | 'unCLIPCheckpointLoader' | 'ImageOnlyCheckpointLoader' | 'ClipVisionClamp' | 'AV$_IPAdapter' | 'FromIPAdapterPipe_$3$3Inspire' | 'StableCascade$_CheckpointLoader_$3$3Inspire' | 'IPAdapterModelHelper_$3$3Inspire' | 'CLIP_Vision_Input_Switch' | 'unCLIP_Checkpoint_Loader'> { }
export interface CanProduce_STYLE_MODEL extends Pick<ComfySetup, 'StyleModelLoader' | 'StyleModelClamp'> { }
export interface CanProduce_CONTROL_NET extends Pick<ComfySetup, 'ControlNetLoader' | 'DiffControlNetLoader' | 'SetUnionControlNetType' | 'ControlNetClamp' | 'AV$_ControlNetLoader' | 'SetShakkerLabsUnionControlNetType' | 'TorchCompileControlNet' | 'CR_Module_Input' | 'CR_ControlNet_Input_Switch' | 'ControlNet_Switch_$1JPS$2' | 'Context_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Control_Net_Model_Input_Switch'> { }
export interface CanProduce_MOTION_LORA extends Pick<ComfySetup, 'ADE$_AnimateDiffLoRALoader'> { }
export interface CanProduce_ADEAUTOSIZE {} // 🔶 no node can output this type.
export interface CanProduce_AD_SETTINGS extends Pick<ComfySetup, 'ADE$_AnimateDiffSettings' | 'ADE$_AnimateDiffModelSettings$_Release' | 'ADE$_AnimateDiffModelSettingsSimple' | 'ADE$_AnimateDiffModelSettings' | 'ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths'> { }
export interface CanProduce_ISNET_MODEL extends Pick<ComfySetup, 'ISNetLoader' | 'DownloadISNetModel'> { }
export interface CanProduce_CROP_REGION extends Pick<ComfySetup, 'PrepareImageAndMaskForInpaint'> { }
export interface CanProduce_LLM_MESSAGE extends Pick<ComfySetup, 'AV$_LLMMessage'> { }
export interface CanProduce_SEGS_HEADER extends Pick<ComfySetup, 'ImpactDecomposeSEGS'> { }
export interface CanProduce_INSIGHTFACE extends Pick<ComfySetup, 'FromIPAdapterPipe_$3$3Inspire' | 'IPAdapterModelHelper_$3$3Inspire' | 'IPAdapterInsightFaceLoader'> { }
export interface CanProduce_ACNAUTOSIZE {} // 🔶 no node can output this type.
export interface CanProduce_IMAGEBASE64 {} // 🔶 no node can output this type.
export interface CanProduce_SCENE_VIDEO extends Pick<ComfySetup, 'LoadVideoAndSegment$_' | 'VideoCombine$_Adv' | 'CombineAudioVideo' | 'ScenedetectNode$_' | 'SceneInfoNode'> { }
export interface CanProduce_AUDIOBASE64 {} // 🔶 no node can output this type.
export interface CanProduce_MODEL_STACK extends Pick<ComfySetup, 'CR_Model_Merge_Stack'> { }
export interface CanProduce_PROMPT_LIST {} // 🔶 no node can output this type.
export interface CanProduce_LORA_PARAMS extends Pick<ComfySetup, 'LorasForFluxParams$6'> { }
export interface CanProduce_MIDAS_MODEL extends Pick<ComfySetup, 'MiDaS_Model_Loader'> { }
export interface CanProduce_PHOTOMAKER extends Pick<ComfySetup, 'PhotoMakerLoader'> { }
export interface CanProduce_CUSTOM_CFG extends Pick<ComfySetup, 'ADE$_CustomCFGSimple' | 'ADE$_CustomCFG' | 'ADE$_CustomCFGKeyframeSimple' | 'ADE$_CustomCFGKeyframe' | 'ADE$_CustomCFGKeyframeInterpolation' | 'ADE$_CustomCFGKeyframeFromList'> { }
export interface CanProduce_CFG_EXTRAS extends Pick<ComfySetup, 'ADE$_CFGExtrasPAGSimple' | 'ADE$_CFGExtrasPAG' | 'ADE$_CFGExtrasRescaleCFGSimple' | 'ADE$_CFGExtrasRescaleCFG'> { }
export interface CanProduce_LORA_STACK extends Pick<ComfySetup, 'AV$_LoraListStacker' | 'CR_LoRA_Stack' | 'CR_Random_LoRA_Stack' | 'CR_Random_Weight_LoRA' | 'ttN_pipeLoraStack'> { }
export interface CanProduce_BLIP_MODEL extends Pick<ComfySetup, 'BLIPLoader' | 'DownloadAndLoadBlip' | 'BLIP_Model_Loader'> { }
export interface CanProduce_LLM_CONFIG extends Pick<ComfySetup, 'AV$_LLMApiConfig'> { }
export interface CanProduce_BASIC_PIPE extends Pick<ComfySetup, 'DetailerForEachPipe' | 'DetailerForEachDebugPipe' | 'DetailerForEachPipeForAnimateDiff' | 'MaskDetailerPipe' | 'MaskDetailerPipe' | 'AnyPipeToBasic' | 'ToBasicPipe' | 'FromBasicPipe$_v2' | 'DetailerPipeToBasicPipe' | 'DetailerPipeToBasicPipe' | 'EditBasicPipe' | 'ImpactKSamplerBasicPipe' | 'ImpactKSamplerAdvancedBasicPipe' | 'MakeBasicPipe_$3$3Inspire' | 'SDXL_Basic_Settings_$1JPS$2' | 'SDXL_Settings_$1JPS$2' | 'Crop_Image_Settings_$1JPS$2' | 'ImageToImage_Settings_$1JPS$2' | 'CtrlNet_CannyEdge_Settings_$1JPS$2' | 'CtrlNet_ZoeDepth_Settings_$1JPS$2' | 'CtrlNet_MiDaS_Settings_$1JPS$2' | 'CtrlNet_OpenPose_Settings_$1JPS$2' | 'Revision_Settings_$1JPS$2' | 'IP_Adapter_Settings_$1JPS$2' | 'IP_Adapter_Tiled_Settings_$1JPS$2' | 'InstantID_Settings_$1JPS$2' | 'Image_Prepare_Settings_$1JPS$2' | 'InstantID_Source_Prepare_Settings_$1JPS$2' | 'InstantID_Pose_Prepare_Settings_$1JPS$2' | 'InstantID_Mask_Prepare_Settings_$1JPS$2' | 'ttN_pipe2BASIC'> { }
export interface CanProduce_IMAGE_FILE {} // 🔶 no node can output this type.
export interface CanProduce_MODEL_LIST extends Pick<ComfySetup, 'CR_Model_List'> { }
export interface CanProduce_IMAGE_LIST extends Pick<ComfySetup, 'CR_Image_List'> { }
export interface CanProduce_image_LIST {} // 🔶 no node can output this type.
export interface CanProduce_CLIPREGION extends Pick<ComfySetup, 'BNK$_CutoffBasePrompt' | 'BNK$_CutoffSetRegions'> { }
export interface CanProduce_ADV_XYPLOT extends Pick<ComfySetup, 'ttN_advanced_xyPlot'> { }
export interface CanProduce_VIEW_OPTS extends Pick<ComfySetup, 'ADE$_StandardStaticViewOptions' | 'ADE$_StandardUniformViewOptions' | 'ADE$_LoopedUniformViewOptions'> { }
export interface CanProduce_LORA_HOOK extends Pick<ComfySetup, 'ADE$_RegisterLoraHook' | 'ADE$_RegisterLoraHookModelOnly' | 'ADE$_RegisterModelAsLoraHook' | 'ADE$_RegisterModelAsLoraHookModelOnly' | 'ADE$_CombineLoraHooks' | 'ADE$_CombineLoraHooksFour' | 'ADE$_CombineLoraHooksEight' | 'ADE$_SetLoraHookKeyframe'> { }
export interface CanProduce_PE_ADJUST extends Pick<ComfySetup, 'ADE$_AdjustPESweetspotStretch' | 'ADE$_AdjustPEFullStretch' | 'ADE$_AdjustPEManual'> { }
export interface CanProduce_PER_BLOCK extends Pick<ComfySetup, 'ADE$_PerBlockHighLevel' | 'ADE$_PerBlock$_SD15$_MidLevel' | 'ADE$_PerBlock$_SD15$_LowLevel' | 'ADE$_PerBlock$_SD15$_FromFloats' | 'ADE$_PerBlock$_SDXL$_MidLevel' | 'ADE$_PerBlock$_SDXL$_LowLevel' | 'ADE$_PerBlock$_SDXL$_FromFloats'> { }
export interface CanProduce_PIA_INPUT extends Pick<ComfySetup, 'ADE$_InputPIA$_Multival' | 'ADE$_InputPIA$_PaperPresets'> { }
export interface CanProduce_LORA_NAME extends Pick<ComfySetup, 'AV$_ParametersPipeToCheckpointModels' | 'AV$_ParametersPipeToCheckpointModels' | 'AV$_ParametersPipeToCheckpointModels'> { }
export interface CanProduce_IPADAPTER extends Pick<ComfySetup, 'AV$_IPAdapter' | 'AV$_IPAdapterPipe' | 'FromIPAdapterPipe_$3$3Inspire' | 'IPAdapterModelHelper_$3$3Inspire' | 'IPAdapterUnifiedLoader' | 'IPAdapterUnifiedLoaderFaceID' | 'IPAdapterModelLoader' | 'IPAdapterUnifiedLoaderCommunity' | 'IPA_Switch_$1JPS$2'> { }
export interface CanProduce_SAM_MODEL extends Pick<ComfySetup, 'SAMLoader' | 'FromDetailerPipe' | 'FromDetailerPipe$_v2' | 'FromDetailerPipeSDXL' | 'SAM_Model_Loader'> { }
export interface CanProduce_RMBGMODEL extends Pick<ComfySetup, 'BRIA$_RMBG$_ModelLoader$_Zho'> { }
export interface CanProduce_LBW_MODEL extends Pick<ComfySetup, 'MakeLBW_$3$3Inspire' | 'LoadLBW_$3$3Inspire'> { }
export interface CanProduce_SAM2MODEL extends Pick<ComfySetup, 'DownloadAndLoadSAM2Model' | 'Sam2VideoSegmentationAddPoints'> { }
export interface CanProduce_PIPE_LINE extends Pick<ComfySetup, 'CR_Data_Bus_In' | 'CR_Data_Bus_Out' | 'CR_8_Channel_In' | 'CR_8_Channel_Out' | 'CR_Module_Pipe_Loader' | 'CR_Module_Input' | 'CR_Module_Output' | 'CR_Image_Pipe_In' | 'CR_Image_Pipe_Edit' | 'CR_Image_Pipe_Out' | 'CR_Pipe_Switch' | 'ttN_pipeLoader$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSamplerAdvanced$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeEDIT' | 'ttN_pipe2BASIC' | 'ttN_pipe2DETAILER' | 'ttN_pipeEncodeConcat' | 'ttN_pipeLoraStack' | 'ttN_pipeIN' | 'ttN_pipeOUT' | 'ttN_pipeLoader' | 'ttN_pipeKSampler' | 'ttN_pipeKSamplerAdvanced'> { }
export interface CanProduce_LORA_LIST extends Pick<ComfySetup, 'CR_LoRA_List'> { }
export interface CanProduce_TEXT_LIST {} // 🔶 no node can output this type.
export interface CanProduce_lora_LIST {} // 🔶 no node can output this type.
export interface CanProduce_INT$4seed {} // 🔶 no node can output this type.
export interface CanProduce_FIZZFRAME extends Pick<ComfySetup, 'Init_FizzFrame' | 'FizzFrame'> { }
export interface CanProduce_CROP_DATA extends Pick<ComfySetup, 'Image_Crop_Face' | 'Image_Crop_Location' | 'Image_Crop_Square_Location' | 'Mask_Crop_Region'> { }
export interface CanProduce_MULTIVAL extends Pick<ComfySetup, 'ADE$_MultivalDynamic' | 'ADE$_MultivalDynamicFloatInput' | 'ADE$_MultivalDynamicFloats' | 'ADE$_MultivalScaledMask'> { }
export interface CanProduce_AD_BLOCK extends Pick<ComfySetup, 'ADE$_ADBlockCombo' | 'ADE$_ADBlockIndiv'> { }
export interface CanProduce_M_MODELS extends Pick<ComfySetup, 'ADE$_ApplyAnimateDiffModelSimple' | 'ADE$_ApplyAnimateDiffModel' | 'ADE$_ApplyAnimateLCMI2VModel' | 'ADE$_ApplyAnimateDiffModelWithCameraCtrl' | 'ADE$_ApplyAnimateDiffModelWithPIA'> { }
export interface CanProduce_VAE_NAME extends Pick<ComfySetup, 'AV$_ParametersPipeToCheckpointModels'> { }
export interface CanProduce_UPSCALER extends Pick<ComfySetup, 'PixelKSampleUpscalerProvider' | 'PixelKSampleUpscalerProviderPipe' | 'PixelTiledKSampleUpscalerProvider' | 'PixelTiledKSampleUpscalerProviderPipe' | 'TwoSamplersForMaskUpscalerProvider' | 'TwoSamplersForMaskUpscalerProviderPipe'> { }
export interface CanProduce_KSAMPLER extends Pick<ComfySetup, 'KSamplerProvider' | 'TiledKSamplerProvider'> { }
export interface CanProduce_TRACKING extends Pick<ComfySetup, 'CreateInstanceDiffusionTracking' | 'AppendInstanceDiffusionTracking' | 'UpperBodyTrackingFromPoseKps'> { }
export interface CanProduce_$$7B$$7D {} // 🔶 no node can output this type.
export interface CanProduce_SCHEDULE extends Pick<ComfySetup, 'CR_Simple_Schedule' | 'CR_Central_Schedule' | 'CR_Combine_Schedules' | 'CR_Load_Schedule_From_File' | 'CR_Schedule_Input_Switch'> { }
export interface CanProduce_CLIP_SEG extends Pick<ComfySetup, 'LoadCLIPSegModels$6'> { }
export interface CanProduce_SAMPLER extends Pick<ComfySetup, 'KSamplerSelect' | 'SamplerEulerAncestral' | 'SamplerEulerAncestralCFGPP' | 'SamplerLMS' | 'SamplerDPMPP$_3M$_SDE' | 'SamplerDPMPP$_2M$_SDE' | 'SamplerDPMPP$_SDE' | 'SamplerDPMPP$_2S$_Ancestral' | 'SamplerDPMAdaptative' | 'SamplerLCMUpscale' | 'SamplerEulerCFGpp' | 'SamplerLCM'> { }
export interface CanProduce_ADEWARN {} // 🔶 no node can output this type.
export interface CanProduce_LLM_API extends Pick<ComfySetup, 'AV$_OpenAIApi' | 'AV$_ClaudeApi' | 'AV$_AwsBedrockClaudeApi' | 'AV$_AwsBedrockMistralApi'> { }
export interface CanProduce_PK_HOOK extends Pick<ComfySetup, 'PixelKSampleHookCombine' | 'DenoiseScheduleHookProvider' | 'StepsScheduleHookProvider' | 'CfgScheduleHookProvider' | 'NoiseInjectionHookProvider' | 'UnsamplerHookProvider'> { }
export interface CanProduce_SEG_ELT extends Pick<ComfySetup, 'ImpactDecomposeSEGS' | 'ImpactFrom$_SEG$_ELT' | 'ImpactEdit$_SEG$_ELT' | 'ImpactDilate$_Mask$_SEG$_ELT' | 'ImpactScaleBy$_BBOX$_SEG$_ELT'> { }
export interface CanProduce_INDEXES extends Pick<ComfySetup, 'FilterZeroMasksAndCorrespondingImages'> { }
export interface CanProduce_WATCHER {} // 🔶 no node can output this type.
export interface CanProduce_LATENT extends Pick<ComfySetup, 'KSampler' | 'VAEEncode' | 'VAEEncodeForInpaint' | 'EmptyLatentImage' | 'LatentUpscale' | 'LatentUpscaleBy' | 'LatentFromBatch' | 'RepeatLatentBatch' | 'KSamplerAdvanced' | 'SetLatentNoiseMask' | 'LatentComposite' | 'LatentBlend' | 'LatentRotate' | 'LatentFlip' | 'LatentCrop' | 'VAEEncodeTiled' | 'InpaintModelConditioning' | 'LoadLatent' | 'LatentAdd' | 'LatentSubtract' | 'LatentMultiply' | 'LatentInterpolate' | 'LatentBatch' | 'LatentBatchSeedBehavior' | 'LatentApplyOperation' | 'LatentCompositeMasked' | 'RebatchLatents' | 'SamplerCustom' | 'SamplerCustom' | 'AddNoise' | 'SamplerCustomAdvanced' | 'SamplerCustomAdvanced' | 'SVD$_img2vid$_Conditioning' | 'StableZero123$_Conditioning' | 'StableZero123$_Conditioning$_Batched' | 'SV3D$_Conditioning' | 'SD$_4XUpscale$_Conditioning' | 'StableCascade$_EmptyLatentImage' | 'StableCascade$_EmptyLatentImage' | 'StableCascade$_StageC$_VAEEncode' | 'StableCascade$_StageC$_VAEEncode' | 'StableCascade$_SuperResolutionControlnet' | 'StableCascade$_SuperResolutionControlnet' | 'InstructPixToPixConditioning' | 'EmptyLatentAudio' | 'VAEEncodeAudio' | 'EmptySD3LatentImage' | 'EmptyMochiLatentVideo' | 'LatentClamp' | 'ADE$_PromptSchedulingLatents' | 'ADE$_EmptyLatentImageLarge' | 'ADE$_UpscaleAndVAEEncode' | 'AnimateDiffLoaderV1' | 'ADE$_AnimateDiffLoaderV1Advanced' | 'Fooocus$_KSampler' | 'Fooocus$_KSamplerAdvanced' | 'OverlayInpaintedLatent' | 'LatentPixelScale' | 'IterativeLatentUpscale' | 'TwoSamplersForMask' | 'TwoAdvancedSamplersForMask' | 'PreviewBridgeLatent' | 'LatentReceiver' | 'ImpactKSamplerBasicPipe' | 'ImpactKSamplerAdvancedBasicPipe' | 'ReencodeLatent' | 'ReencodeLatentPipe' | 'RegionalSampler' | 'RegionalSamplerAdvanced' | 'RemoveNoiseMask' | 'INPAINT$_VAEEncodeInpaintConditioning' | 'INPAINT$_VAEEncodeInpaintConditioning' | 'KSampler_$3$3Inspire' | 'KSamplerAdvanced_$3$3Inspire' | 'KSamplerPipe_$3$3Inspire' | 'KSamplerAdvancedPipe_$3$3Inspire' | 'ChangeLatentBatchSize_$3$3Inspire' | 'LatentBatchSplitter_$3$3Inspire' | 'KSamplerProgress_$3$3Inspire' | 'KSamplerProgress_$3$3Inspire' | 'KSamplerAdvancedProgress_$3$3Inspire' | 'KSamplerAdvancedProgress_$3$3Inspire' | 'GenerateNoise' | 'InjectNoiseToLatent' | 'GetLatentsFromBatchIndexed' | 'EmptyLatentImagePresets' | 'EmptyLatentImageCustomPresets' | 'StableZero123$_BatchSchedule' | 'SV3D$_BatchSchedule' | 'Intrinsic$_lora$_sampling' | 'DifferentialDiffusionAdvanced' | 'ApplyVisualStylePrompting$_' | 'StyleAlignedReferenceSampler$_' | 'StyleAlignedReferenceSampler$_' | 'StyleAlignedSampleReferenceLatents$_' | 'VAEEncodeForInpaint$_Frames' | 'LatentUpscaleFactor_$_O' | 'LatentUpscaleFactorSimple_$_O' | 'selectLatentFromBatch_$_O' | 'LatentUpscaleMultiply' | 'CR_Latent_Batch_Size' | 'CR_SD1$55_Aspect_Ratio' | 'CR_SDXL_Aspect_Ratio' | 'CR_Aspect_Ratio' | 'CR_Aspect_Ratio_Banners' | 'CR_Aspect_Ratio_Social_Media' | 'CR$_Aspect_Ratio_For_Print' | 'CR_Module_Input' | 'CR_Latent_Input_Switch' | 'CR_Img2Img_Process_Switch' | 'CR_Hires_Fix_Process_Switch' | 'CR_Interpolate_Latents' | 'KSamplerVariationsStochastic$6' | 'KSamplerVariationsWithNoise$6' | 'InjectLatentNoise$6' | 'FluxSamplerParams$6' | 'RemoveLatentMask$6' | 'SDXLEmptyLatentSizePicker$6' | 'BatchValueScheduleLatentInput' | 'BatchPromptScheduleSDXLLatentInput' | 'BatchPromptScheduleLatentInput' | 'Latent_Switch_$1JPS$2' | 'NNLatentUpscale' | 'BNK$_NoisyLatentImage' | 'BNK$_SlerpLatent' | 'BNK$_InjectNoise' | 'BNK$_Unsampler' | 'BNK$_TiledKSamplerAdvanced' | 'BNK$_TiledKSampler' | 'ttN_tinyLoader' | 'ttN_KSampler$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSamplerAdvanced$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeEDIT' | 'ttN_hiresfixScale' | 'ttN_pipeOUT' | 'ttN_pipeLoader' | 'ttN_pipeKSampler' | 'ttN_pipeKSamplerAdvanced' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeKSamplerSDXL' | 'DF$_Latent$_Scale$_by$_ratio' | 'DF$_Latent$_Scale$_to$_side' | 'LatentByRatio' | 'Context_Big_$1rgthree$2' | 'Context_$1rgthree$2' | 'Context_Switch_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'SDXL_Empty_Latent_Image_$1rgthree$2' | 'SDXLMixSampler' | 'Blend_Latents' | 'Latent_Input_Switch' | 'Load_Cache' | 'KSampler_$1WAS$2' | 'KSampler_Cycle' | 'Latent_Batch' | 'Latent_Noise_Injection' | 'Latent_Upscale_by_Factor_$1WAS$2' | 'Samples_Passthrough_$1Stat_System$2' | 'VAEEncodeForInpaint_$1WAS$2' | 'KSamplerSeq' | 'KSamplerSeq2' | 'BLVAEEncode' | 'KSamplerAdvanced_$1WLSH$2' | 'Empty_Latent_by_Pixels_$1WLSH$2' | 'Empty_Latent_by_Ratio_$1WLSH$2' | 'Empty_Latent_by_Size_$1WLSH$2' | 'SDXL_Quick_Empty_Latent_$1WLSH$2' | 'VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2'> { }
export interface CanProduce_GLIGEN extends Pick<ComfySetup, 'GLIGENLoader' | 'GligenClamp'> { }
export interface CanProduce_SIGMAS extends Pick<ComfySetup, 'BasicScheduler' | 'KarrasScheduler' | 'ExponentialScheduler' | 'PolyexponentialScheduler' | 'LaplaceScheduler' | 'VPScheduler' | 'BetaSamplingScheduler' | 'SDTurboScheduler' | 'SplitSigmas' | 'SplitSigmas' | 'SplitSigmasDenoise' | 'SplitSigmasDenoise' | 'FlipSigmas' | 'AlignYourStepsScheduler' | 'GITSScheduler' | 'ADE$_SigmaScheduleToSigmas' | 'ScheduledCFGGuider_$3$3Inspire' | 'ScheduledPerpNegCFGGuider_$3$3Inspire' | 'FlipSigmasAdjusted' | 'CustomSigmas' | 'FloatToSigmas'> { }
export interface CanProduce_GUIDER extends Pick<ComfySetup, 'CFGGuider' | 'DualCFGGuider' | 'BasicGuider' | 'PerpNegGuider' | 'ScheduledCFGGuider_$3$3Inspire' | 'ScheduledPerpNegCFGGuider_$3$3Inspire'> { }
export interface CanProduce_WEBCAM {} // 🔶 no node can output this type.
export interface CanProduce_FLOATS extends Pick<ComfySetup, 'ADE$_ValueScheduling' | 'ADE$_ValueSchedulingLatents' | 'ADE$_FloatToFloats'> { }
export interface CanProduce_HIDDEN {} // 🔶 no node can output this type.
export interface CanProduce_EMBEDS extends Pick<ComfySetup, 'IPAdapterEncoder' | 'IPAdapterEncoder' | 'IPAdapterCombineEmbeds' | 'IPAdapterLoadEmbeds'> { }
export interface CanProduce_PROMPT {} // 🔶 no node can output this type.
export interface CanProduce_THREED {} // 🔶 no node can output this type.
export interface CanProduce_TCOLOR {} // 🔶 no node can output this type.
export interface CanProduce_CHEESE {} // 🔶 no node can output this type.
export interface CanProduce_SCENE_ extends Pick<ComfySetup, 'ScenedetectNode$_'> { }
export interface CanProduce_CLIENT extends Pick<ComfySetup, 'load$_openAI_$_O'> { }
export interface CanProduce_OPENAI extends Pick<ComfySetup, 'ChatGPT_$_O'> { }
export interface CanProduce_XYPLOT extends Pick<ComfySetup, 'ttN_xyPlot'> { }
export interface CanProduce_NUMBER extends Pick<ComfySetup, 'Constant_Number' | 'Debug_Number_to_Console' | 'Logic_Boolean' | 'Image_Aspect_Ratio' | 'Image_Aspect_Ratio' | 'Image_Size_to_Number' | 'Image_Size_to_Number' | 'Latent_Size_to_Number' | 'Latent_Size_to_Number' | 'Number_Counter' | 'Number_Operation' | 'Number_Input_Switch' | 'Number_Input_Condition' | 'Number_Multiple_Of' | 'Number_PI' | 'Random_Number' | 'Seed' | 'Text_Compare' | 'Text_Find_and_Replace_Input' | 'Text_Find_and_Replace' | 'Text_to_Number' | 'True_Random$5org_Number_Generator' | 'Video_Dump_Frames'> { }
export interface CanProduce_MODEL extends Pick<ComfySetup, 'CheckpointLoaderSimple' | 'LoraLoader' | 'UNETLoader' | 'unCLIPCheckpointLoader' | 'CheckpointLoader' | 'DiffusersLoader' | 'LoraLoaderModelOnly' | 'LatentApplyOperationCFG' | 'HypernetworkLoader' | 'ModelMergeSimple' | 'ModelMergeBlocks' | 'ModelMergeSubtract' | 'ModelMergeAdd' | 'TomePatchModel' | 'FreeU' | 'FreeU$_V2' | 'HyperTile' | 'ModelSamplingDiscrete' | 'ModelSamplingContinuousEDM' | 'ModelSamplingContinuousV' | 'ModelSamplingStableCascade' | 'ModelSamplingSD3' | 'ModelSamplingAuraFlow' | 'ModelSamplingFlux' | 'RescaleCFG' | 'PatchModelAddDownscale' | 'ImageOnlyCheckpointLoader' | 'VideoLinearCFGGuidance' | 'VideoTriangleCFGGuidance' | 'SelfAttentionGuidance' | 'PerpNeg' | 'DifferentialDiffusion' | 'ModelMergeSD1' | 'ModelMergeSD2' | 'ModelMergeSDXL' | 'ModelMergeSD3$_2B' | 'ModelMergeFlux1' | 'ModelMergeSD35$_Large' | 'PerturbedAttentionGuidance' | 'UNetSelfAttentionMultiply' | 'UNetCrossAttentionMultiply' | 'UNetTemporalAttentionMultiply' | 'SkipLayerGuidanceSD3' | 'TorchCompileModel' | 'AttentionCouple' | 'CivitAI$_Lora$_Loader' | 'CivitAI$_Checkpoint$_Loader' | 'ModelClamp' | 'ADE$_RegisterLoraHook' | 'ADE$_RegisterLoraHookModelOnly' | 'ADE$_RegisterModelAsLoraHook' | 'ADE$_RegisterModelAsLoraHookModelOnly' | 'ADE$_AnimateDiffUnload' | 'CheckpointLoaderSimpleWithNoiseSelect' | 'ADE$_PerturbedAttentionGuidanceMultival' | 'ADE$_RescaleCFGMultival' | 'ADE$_AnimateDiffLoaderGen1' | 'ADE$_AnimateDiffLoaderWithContext' | 'ADE$_UseEvolvedSampling' | 'AnimateDiffLoaderV1' | 'ADE$_AnimateDiffLoaderV1Advanced' | 'AV$_LoraLoader' | 'AV$_LoraListLoader' | 'AV$_CheckpointMerge' | 'MergeModels' | 'AV$_IPAdapter' | 'LoraLoader$8pysssss' | 'CheckpointLoader$8pysssss' | 'FromDetailerPipe' | 'FromDetailerPipe$_v2' | 'FromDetailerPipeSDXL' | 'FromDetailerPipeSDXL' | 'FromBasicPipe' | 'FromBasicPipe$_v2' | 'ImpactWildcardEncode' | 'INPAINT$_ApplyFooocusInpaint' | 'LoraLoaderBlockWeight_$3$3Inspire' | 'ApplyLBW_$3$3Inspire' | 'HyperTile_$3$3Inspire' | 'WildcardEncode_$3$3Inspire' | 'FromIPAdapterPipe_$3$3Inspire' | 'ApplyRegionalIPAdapters_$3$3Inspire' | 'RegionalCFG_$3$3Inspire' | 'CheckpointLoaderSimpleShared_$3$3Inspire' | 'StableCascade$_CheckpointLoader_$3$3Inspire' | 'StableCascade$_CheckpointLoader_$3$3Inspire' | 'IPAdapterModelHelper_$3$3Inspire' | 'VRAM$_Debug' | 'ModelPassThrough' | 'LoadResAdapterNormalization' | 'CheckpointPerturbWeights' | 'DifferentialDiffusionAdvanced' | 'FluxBlockLoraLoader' | 'CheckpointLoaderKJ' | 'TorchCompileModelFluxAdvanced' | 'ApplyVisualStylePrompting$_' | 'StyleAlignedBatchAlign$_' | 'CR_Select_Model' | 'CR_Load_LoRA' | 'CR_Apply_LoRA_Stack' | 'CR_Apply_Model_Merge' | 'CR_Module_Input' | 'CR_Model_Input_Switch' | 'CR_Switch_Model_and_CLIP' | 'CR_Load_Scheduled_Models' | 'CR_Load_Scheduled_LoRAs' | 'CR_Cycle_Models' | 'CR_Cycle_LoRAs' | 'FluxBlocksBuster$6' | 'GuidanceTimestepping$6' | 'ModelSamplingSD3Advanced$6' | 'ModelCompile$6' | 'IPAdapter' | 'IPAdapterAdvanced' | 'IPAdapterBatch' | 'IPAdapterFaceID' | 'IPAdapterFaceIDKolors' | 'IPAAdapterFaceIDBatch' | 'IPAdapterTiled' | 'IPAdapterTiledBatch' | 'IPAdapterEmbeds' | 'IPAdapterEmbedsBatch' | 'IPAdapterStyleComposition' | 'IPAdapterStyleCompositionBatch' | 'IPAdapterMS' | 'IPAdapterClipVisionEnhancer' | 'IPAdapterClipVisionEnhancerBatch' | 'IPAdapterFromParams' | 'IPAdapterPreciseStyleTransfer' | 'IPAdapterPreciseStyleTransferBatch' | 'IPAdapterPreciseComposition' | 'IPAdapterPreciseCompositionBatch' | 'IPAdapterUnifiedLoader' | 'IPAdapterUnifiedLoaderFaceID' | 'IPAdapterUnifiedLoaderCommunity' | 'Lora_Loader_$1JPS$2' | 'Model_Switch_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'Images_Masks_MultiPipe_$1JPS$2' | 'ttN_tinyLoader' | 'ttN_conditioning' | 'ttN_KSampler$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSamplerAdvanced$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeEDIT' | 'ttN_multiModelMerge' | 'ttN_pipeOUT' | 'ttN_pipeLoader' | 'ttN_pipeKSampler' | 'ttN_pipeKSamplerAdvanced' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeKSamplerSDXL' | 'ttN_pipeKSamplerSDXL' | 'Context_Big_$1rgthree$2' | 'Context_$1rgthree$2' | 'Context_Switch_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Lora_Loader_Stack_$1rgthree$2' | 'Power_Prompt_$1rgthree$2' | 'SDXL_Power_Prompt_$7_Positive_$1rgthree$2' | 'Power_Lora_Loader_$1rgthree$2' | 'PerturbedAttention' | 'SmoothedEnergyGuidanceAdvanced' | 'TRTAttachPag' | 'TRTPerturbedAttention' | 'Bus_Node' | 'Checkpoint_Loader' | 'Checkpoint_Loader_$1Simple$2' | 'Diffusers_Model_Loader' | 'Diffusers_Hub_Model_Down$7Loader' | 'Lora_Loader' | 'Load_Lora' | 'Lora_Input_Switch' | 'Model_Input_Switch' | 'unCLIP_Checkpoint_Loader' | 'Checkpoint_Loader_w$3Name_$1WLSH$2'> { }
export interface CanProduce_IMAGE extends Pick<ComfySetup, 'VAEDecode' | 'LoadImage' | 'ImageScale' | 'ImageScaleBy' | 'ImageInvert' | 'ImageBatch' | 'ImagePadForOutpaint' | 'EmptyImage' | 'VAEDecodeTiled' | 'ImageUpscaleWithModel' | 'ImageBlend' | 'ImageBlur' | 'ImageQuantize' | 'ImageSharpen' | 'ImageScaleToTotalPixels' | 'ImageCompositeMasked' | 'MaskToImage' | 'PorterDuffImageComposite' | 'SplitImageWithAlpha' | 'JoinImageWithAlpha' | 'RebatchImages' | 'Canny' | 'ImageCrop' | 'RepeatImageBatch' | 'ImageFromBatch' | 'Morphology' | 'StableCascade$_SuperResolutionControlnet' | 'WebcamCapture' | 'Base64ImageInput' | 'CLIPSeg' | 'CLIPSeg' | 'CombineSegMasks' | 'CombineSegMasks' | 'AlphaChanelAdd' | 'AlphaChanelAddByMask' | 'AlphaChanelRestore' | 'AlphaChanelRemove' | 'ImageClamp' | 'ImageBatchGet' | 'ImageBatchCopy' | 'ImageBatchRemove' | 'ImageBatchFork' | 'ImageBatchFork' | 'ImageBatchJoin' | 'ImageBatchPermute' | 'ImageCompositeAbsolute' | 'ImageCompositeAbsoluteByContainer' | 'ImageCompositeRelative' | 'ImageCompositeRelativeByContainer' | 'ImageContainer' | 'ImageContainerInheritanceAdd' | 'ImageContainerInheritanceScale' | 'ImageContainerInheritanceMax' | 'ImageContainerInheritanceSum' | 'ImageDrawArc' | 'ImageDrawArcByContainer' | 'ImageDrawChord' | 'ImageDrawChordByContainer' | 'ImageDrawEllipse' | 'ImageDrawEllipseByContainer' | 'ImageDrawLine' | 'ImageDrawLineByContainer' | 'ImageDrawPieslice' | 'ImageDrawPiesliceByContainer' | 'ImageDrawRectangle' | 'ImageDrawRectangleByContainer' | 'ImageDrawRectangleRounded' | 'ImageDrawRectangleRoundedByContainer' | 'ImageDrawPolygon' | 'ImageEffectsAdjustment' | 'ImageEffectsGrayscale' | 'ImageEffectsNegative' | 'ImageEffectsSepia' | 'ImageEffectsLensZoomBurst' | 'ImageEffectsLensChromaticAberration' | 'ImageEffectsLensBokeh' | 'ImageEffectsLensOpticAxis' | 'ImageEffectsLensVignette' | 'ImageFilterSmooth' | 'ImageFilterSmoothMore' | 'ImageFilterBlur' | 'ImageFilterBoxBlur' | 'ImageFilterGaussianBlur' | 'ImageFilterGaussianBlurAdvanced' | 'ImageFilterStackBlur' | 'ImageFilterMedianBlur' | 'ImageFilterBilateralBlur' | 'ImageFilterContour' | 'ImageFilterDetail' | 'ImageFilterEdgeEnhance' | 'ImageFilterEdgeEnhanceMore' | 'ImageFilterEmboss' | 'ImageFilterFindEdges' | 'ImageFilterSharpen' | 'ImageFilterRank' | 'ImageFilterMin' | 'ImageFilterMax' | 'ImageFilterMode' | 'ImageNoiseBeta' | 'ImageNoiseBinomial' | 'ImageNoiseBytes' | 'ImageNoiseGaussian' | 'ImageSegmentation' | 'ImageSegmentationCustom' | 'ImageSegmentationCustomAdvanced' | 'ImageText' | 'ImageTextOutlined' | 'ImageTextMultiline' | 'ImageTextMultilineOutlined' | 'ImageTransformResizeAbsolute' | 'ImageTransformResizeRelative' | 'ImageTransformResizeClip' | 'ImageTransformCropAbsolute' | 'ImageTransformCropRelative' | 'ImageTransformCropCorners' | 'ImageTransformPaddingAbsolute' | 'ImageTransformPaddingRelative' | 'ImageTransformRotate' | 'ImageTransformTranspose' | 'ADE$_VisualizeContextOptionsK' | 'ADE$_VisualizeContextOptionsKAdv' | 'ADE$_VisualizeContextOptionsSCustom' | 'AV$_ParametersPipeToPrompts' | 'LoadImageFromUrl' | 'ImageMuxer' | 'ImageScaleDown' | 'ImageScaleDownBy' | 'ImageScaleDownToSize' | 'ImageScaleToMegapixels' | 'ImageAlphaComposite' | 'ImageGaussianBlur' | 'ImageRepeat' | 'ImageApplyChannel' | 'QRCodeGenerator' | 'ColorBlend' | 'ColorCorrect' | 'AV$_ControlNetPreprocessor' | 'ISNetSegment' | 'SAMEmbeddingToImage' | 'LaMaInpaint' | 'PrepareImageAndMaskForInpaint' | 'PrepareImageAndMaskForInpaint' | 'OverlayInpaintedImage' | 'AV$_FaceDetailer' | 'AV$_FaceDetailer' | 'AV$_FaceDetailer' | 'AV$_FaceDetailer' | 'AV$_FaceDetailerPipe' | 'AV$_FaceDetailerPipe' | 'AV$_FaceDetailerPipe' | 'AV$_FaceDetailerPipe' | 'BRIA$_RMBG$_Zho' | 'ConstrainImage$8pysssss' | 'ConstrainImageforVideo$8pysssss' | 'DetailerForEach' | 'DetailerForEachDebug' | 'DetailerForEachDebug' | 'DetailerForEachDebug' | 'DetailerForEachDebug' | 'DetailerForEachDebug' | 'DetailerForEachPipe' | 'DetailerForEachPipe' | 'DetailerForEachDebugPipe' | 'DetailerForEachDebugPipe' | 'DetailerForEachDebugPipe' | 'DetailerForEachDebugPipe' | 'DetailerForEachDebugPipe' | 'DetailerForEachPipeForAnimateDiff' | 'DetailerForEachPipeForAnimateDiff' | 'FaceDetailer' | 'FaceDetailer' | 'FaceDetailer' | 'FaceDetailer' | 'FaceDetailerPipe' | 'FaceDetailerPipe' | 'FaceDetailerPipe' | 'FaceDetailerPipe' | 'MaskDetailerPipe' | 'MaskDetailerPipe' | 'MaskDetailerPipe' | 'LatentPixelScale' | 'IterativeImageUpscale' | 'ImageListToImageBatch' | 'ImpactFrom$_SEG$_ELT' | 'PreviewBridge' | 'ImageReceiver' | 'ImageMaskSwitch' | 'SEGSUpscaler' | 'SEGSUpscalerPipe' | 'SEGSDetailer' | 'SEGSPaste' | 'SEGSPreview' | 'SEGSPreviewCNet' | 'SEGSToImageList' | 'SEGSDetailerForAnimateDiff' | 'ImpactImageBatchToImageList' | 'ImpactMakeImageList' | 'ImpactMakeImageBatch' | 'INPAINT$_MaskedFill' | 'INPAINT$_MaskedBlur' | 'INPAINT$_InpaintWithModel' | 'BindImageListPromptList_$3$3Inspire' | 'LoadImagesFromDir_$3$3Inspire' | 'LoadImageListFromDir_$3$3Inspire' | 'LoadImage_$3$3Inspire' | 'ChangeImageBatchSize_$3$3Inspire' | 'ImageBatchSplitter_$3$3Inspire' | 'BatchCLIPSeg' | 'CreateTextMask' | 'CreateAudioMask' | 'CreateFluidMask' | 'AddLabel' | 'ColorMatch' | 'CrossFadeImages' | 'CrossFadeImagesMulti' | 'GetImagesFromBatchIndexed' | 'GetImageRangeFromBatch' | 'GetImageSizeAndCount' | 'ImageAndMaskPreview' | 'ImageAddMulti' | 'ImageBatchMulti' | 'ImageBatchRepeatInterleaving' | 'ImageBatchTestPattern' | 'ImageConcanate' | 'ImageConcatFromBatch' | 'ImageConcatMulti' | 'ImageCropByMaskAndResize' | 'ImageUncropByMask' | 'ImageGrabPIL' | 'ImageGridComposite2x2' | 'ImageGridComposite3x3' | 'ImageGridtoBatch' | 'ImageNormalize$_Neg1$_To$_1' | 'ImagePass' | 'ImagePadForOutpaintMasked' | 'ImagePadForOutpaintTargetSize' | 'ImageResizeKJ' | 'ImageUpscaleWithModelBatched' | 'InsertImagesToBatchIndexed' | 'LoadAndResizeImage' | 'LoadImagesFromFolderKJ' | 'MergeImageChannels' | 'RemapImageRange' | 'ReverseImageBatch' | 'ReplaceImagesInBatch' | 'ShuffleImageBatch' | 'SplitImageChannels' | 'SplitImageChannels' | 'SplitImageChannels' | 'TransitionImagesMulti' | 'TransitionImagesInBatch' | 'BatchCropFromMask' | 'BatchCropFromMask' | 'BatchCropFromMaskAdvanced' | 'BatchCropFromMaskAdvanced' | 'BatchCropFromMaskAdvanced' | 'FilterZeroMasksAndCorrespondingImages' | 'FilterZeroMasksAndCorrespondingImages' | 'InsertImageBatchByIndexes' | 'BatchUncrop' | 'BatchUncropAdvanced' | 'BboxVisualize' | 'CameraPoseVisualizer' | 'VRAM$_Debug' | 'ImageTransformByNormalizedAmplitude' | 'CreateShapeImageOnPath' | 'CreateTextOnPath' | 'CreateGradientFromCoords' | 'PlotCoordinates' | 'PointsEditor' | 'StabilityAPI$_SD3' | 'GLIGENTextBoxApplyBatchCoords' | 'Intrinsic$_lora$_sampling' | 'Screencap$_mss' | 'WebcamCaptureCV2' | 'DrawInstanceDiffusionTracking' | 'MarigoldDepthEstimation$_v2' | 'MarigoldDepthEstimation$_v2$_video' | 'MarigoldDepthEstimation' | 'MarigoldDepthEstimationVideo' | 'ColorizeDepthmap' | 'RemapDepth' | 'GridInput' | 'ImagesPrompt$_' | 'MirroredImage' | 'NoiseImage' | 'GradientImage' | 'TransparentImage' | 'ResizeImageMixlab' | 'ResizeImageMixlab' | 'LoadImagesFromPath' | 'LoadImagesFromURL' | 'LoadImagesToBatch' | 'TextImage' | 'EnhanceImage' | 'SvgImage' | 'ImageListToBatch$_' | 'ImageBatchToList$_' | 'ImageCropByAlpha' | '_3DImage' | '_3DImage' | '_3DImage' | 'DepthViewer' | 'ImageColorTransfer' | 'MergeLayers' | 'CompositeImages$_' | 'ScreenShare' | 'P5Input' | 'SiliconflowTextToImageNode' | 'EditMask' | 'LaMaInpainting' | 'RembgNode$_Mix' | 'ImageListReplace$_' | 'ImageListReplace$_' | 'ScenesNode$_' | 'GenerateFramesByCount' | 'SceneInfoNode' | 'SceneInfoNode' | 'LoadVideoFromURL' | 'create_image_$_O' | 'variation$_image_$_O' | 'Text2Image_$_O' | 'ImageScaleFactor_$_O' | 'ImageScaleFactorSimple_$_O' | 'create$_image_$_O' | 'string2Image_$_O' | 'Sam2AutoSegmentation' | 'CR_VAE_Decode' | 'CR_Load_Image_List' | 'CR_Load_Image_List_Plus' | 'CR_Load_GIF_As_List' | 'CR_Batch_Images_From_List' | 'CR_Module_Input' | 'CR_Image_Pipe_Out' | 'CR_Upscale_Image' | 'CR_Apply_Multi_Upscale' | 'CR_XY_From_Folder' | 'CR_Halftone_Grid' | 'CR_Color_Bars' | 'CR_Style_Bars' | 'CR_Checker_Pattern' | 'CR_Polygons' | 'CR_Color_Gradient' | 'CR_Radial_Gradient' | 'CR_Starburst_Lines' | 'CR_Starburst_Colors' | 'CR_Simple_Binary_Pattern' | 'CR_Binary_Pattern' | 'CR_Draw_Shape' | 'CR_Draw_Pie' | 'CR_Random_Shape_Pattern' | 'CR_Overlay_Text' | 'CR_Draw_Text' | 'CR_Mask_Text' | 'CR_Composite_Text' | 'CR_Simple_Text_Watermark' | 'CR_Halftone_Filter' | 'CR_Color_Tint' | 'CR_Vignette_Filter' | 'CR_Page_Layout' | 'CR_Image_Panel' | 'CR_Image_Grid_Panel' | 'CR_Image_Border' | 'CR_Feathered_Border' | 'CR_Simple_Text_Panel' | 'CR_Color_Panel' | 'CR_Overlay_Transparent_Image' | 'CR_Half_Drop_Panel' | 'CR_Diamond_Panel' | 'CR_Simple_Meme_Template' | 'CR_Simple_Banner' | 'CR_Comic_Panel_Templates' | 'CR_Simple_Image_Compare' | 'CR_Image_Input_Switch' | 'CR_Image_Input_Switch_$14_way$2' | 'CR_Batch_Process_Switch' | 'CR_Debatch_Frames' | 'CR_Load_Animation_Frames' | 'CR_Load_Flow_Frames' | 'CR_Load_Flow_Frames' | 'CR_Cycle_Images' | 'CR_Cycle_Images_Simple' | 'AnimeFace$_SemSegPreprocessor' | 'AnyLineArtPreprocessor$_aux' | 'BinaryPreprocessor' | 'CannyEdgePreprocessor' | 'ColorPreprocessor' | 'DensePosePreprocessor' | 'DepthAnythingPreprocessor' | 'Zoe$_DepthAnythingPreprocessor' | 'DepthAnythingV2Preprocessor' | 'DiffusionEdge$_Preprocessor' | 'DSINE$7NormalMapPreprocessor' | 'DWPreprocessor' | 'AnimalPosePreprocessor' | 'HEDPreprocessor' | 'FakeScribblePreprocessor' | 'InpaintPreprocessor' | 'LeReS$7DepthMapPreprocessor' | 'LineArtPreprocessor' | 'AnimeLineArtPreprocessor' | 'LineartStandardPreprocessor' | 'Manga2Anime$_LineArt$_Preprocessor' | 'MediaPipe$7FaceMeshPreprocessor' | 'MeshGraphormer$7DepthMapPreprocessor' | 'MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor' | 'Metric3D$7DepthMapPreprocessor' | 'Metric3D$7NormalMapPreprocessor' | 'MiDaS$7NormalMapPreprocessor' | 'MiDaS$7DepthMapPreprocessor' | 'M$7LSDPreprocessor' | 'BAE$7NormalMapPreprocessor' | 'OneFormer$7COCO$7SemSegPreprocessor' | 'OneFormer$7ADE20K$7SemSegPreprocessor' | 'OpenposePreprocessor' | 'PiDiNetPreprocessor' | 'FacialPartColoringFromPoseKps' | 'RenderPeopleKps' | 'RenderAnimalKps' | 'PyraCannyPreprocessor' | 'ImageLuminanceDetector' | 'ImageIntensityDetector' | 'ScribblePreprocessor' | 'Scribble$_XDoG$_Preprocessor' | 'Scribble$_PiDiNet$_Preprocessor' | 'SAMPreprocessor' | 'ShufflePreprocessor' | 'TEEDPreprocessor' | 'TilePreprocessor' | 'TTPlanet$_TileGF$_Preprocessor' | 'TTPlanet$_TileSimple$_Preprocessor' | 'UniFormer$7SemSegPreprocessor' | 'SemSegPreprocessor' | 'Unimatch$_OptFlowPreprocessor' | 'MaskOptFlow' | 'Zoe$7DepthMapPreprocessor' | 'AIO$_Preprocessor' | 'HintImageEnchance' | 'ExecuteAllControlNetPreprocessors' | 'ControlNetAuxSimpleAddText' | 'ImageEnhanceDifference$6' | 'ImageBatchMultiple$6' | 'ImageExpandBatch$6' | 'ImageFromBatch$6' | 'ImageListToBatch$6' | 'ImageBatchToList$6' | 'ImageCompositeFromMaskBatch$6' | 'ImageComposite$6' | 'ImageCrop$6' | 'ImageFlip$6' | 'ImageRandomTransform$6' | 'ImageRemoveAlpha$6' | 'ImageRemoveBackground$6' | 'ImageResize$6' | 'ImageSeamCarving$6' | 'ImageTile$6' | 'ImageUntile$6' | 'ImageApplyLUT$6' | 'ImageCASharpening$6' | 'ImageDesaturate$6' | 'PixelOEPixelize$6' | 'ImagePosterize$6' | 'ImageColorMatch$6' | 'ImageColorMatchAdobe$6' | 'ImageHistogramMatch$6' | 'ImageSmartSharpen$6' | 'ImageToDevice$6' | 'ImagePreviewFromLatent$6' | 'NoiseFromImage$6' | 'MaskBoundingBox$6' | 'PlotParameters$6' | 'DrawText$6' | 'ImagesFromBatchSchedule' | 'IPAdapterFaceID' | 'IPAdapterFaceIDKolors' | 'IPAAdapterFaceIDBatch' | 'IPAdapterTiled' | 'IPAdapterTiledBatch' | 'IPAdapterNoise' | 'PrepImageForClipVision' | 'IPAdapterWeights' | 'IPAdapterWeights' | 'IPAdapterWeightsFromStrategy' | 'IPAdapterWeightsFromStrategy' | 'Image_Switch_$1JPS$2' | 'Images_Masks_MultiPipe_$1JPS$2' | 'Images_Masks_MultiPipe_$1JPS$2' | 'Images_Masks_MultiPipe_$1JPS$2' | 'Images_Masks_MultiPipe_$1JPS$2' | 'Images_Masks_MultiPipe_$1JPS$2' | 'Crop_Image_Square_$1JPS$2' | 'Crop_Image_TargetSize_$1JPS$2' | 'Prepare_Image_$1JPS$2' | 'Prepare_Image_Plus_$1JPS$2' | 'Prepare_Image_Tiled_IPA_$1JPS$2' | 'ttN_KSampler$_v2' | 'ttN_KSampler$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSamplerAdvanced$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_advPlot_images' | 'ttN_advPlot_images' | 'ttN_pipeEDIT' | 'ttN_imageOutput' | 'ttN_imageREMBG' | 'ttN_hiresfixScale' | 'ttN_pipeOUT' | 'ttN_pipeKSampler' | 'ttN_pipeKSamplerAdvanced' | 'ttN_pipeKSamplerSDXL' | 'DF$_Image$_scale$_by$_ratio' | 'DF$_Image$_scale$_to$_side' | 'Mask_By_Text' | 'Mask_By_Text' | 'Mask_Morphology' | 'Combine_Masks' | 'Unary_Mask_Op' | 'Unary_Image_Op' | 'Blur' | 'Mix_Images_By_Mask' | 'Mix_Color_By_Mask' | 'Mask_To_Region' | 'Cut_By_Mask' | 'Paste_By_Mask' | 'Change_Channel_Count' | 'Constant_Mask' | 'Prune_By_Mask' | 'Separate_Mask_Components' | 'Create_Rect_Mask' | 'Make_Image_Batch' | 'Create_QR_Code' | 'Convert_Color_Space' | 'Image_Remove_Background_$1rembg$2' | 'Context_Big_$1rgthree$2' | 'Context_$1rgthree$2' | 'Context_Switch_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Image_Inset_Crop_$1rgthree$2' | 'Create_Grid_Image' | 'Create_Grid_Image_from_Batch' | 'Create_Morph_Image' | 'Create_Morph_Image' | 'CLIPSeg_Masking' | 'CLIPSeg_Batch_Masking' | 'CLIPSeg_Batch_Masking' | 'Convert_Masks_to_Images' | 'Load_Cache' | 'Image_SSAO_$1Ambient_Occlusion$2' | 'Image_SSAO_$1Ambient_Occlusion$2' | 'Image_SSAO_$1Ambient_Occlusion$2' | 'Image_SSDO_$1Direct_Occlusion$2' | 'Image_SSDO_$1Direct_Occlusion$2' | 'Image_SSDO_$1Direct_Occlusion$2' | 'Image_SSDO_$1Direct_Occlusion$2' | 'Image_Analyze' | 'Image_Batch' | 'Image_Blank' | 'Image_Blend_by_Mask' | 'Image_Blend' | 'Image_Blending_Mode' | 'Image_Bloom_Filter' | 'Image_Canny_Filter' | 'Image_Chromatic_Aberration' | 'Image_Color_Palette' | 'Image_Crop_Face' | 'Image_Crop_Location' | 'Image_Crop_Square_Location' | 'Image_Displacement_Warp' | 'Image_Lucy_Sharpen' | 'Image_Paste_Face' | 'Image_Paste_Face' | 'Image_Paste_Crop' | 'Image_Paste_Crop' | 'Image_Paste_Crop_by_Location' | 'Image_Paste_Crop_by_Location' | 'Image_Pixelate' | 'Image_Power_Noise' | 'Image_Dragan_Photography_Filter' | 'Image_Edge_Detection_Filter' | 'Image_Film_Grain' | 'Image_Filter_Adjustments' | 'Image_Flip' | 'Image_Gradient_Map' | 'Image_Generate_Gradient' | 'Image_High_Pass_Filter' | 'Image_History_Loader' | 'Image_Input_Switch' | 'Image_Levels_Adjustment' | 'Image_Load' | 'Image_Median_Filter' | 'Image_Mix_RGB_Channels' | 'Image_Monitor_Effects_Filter' | 'Image_Nova_Filter' | 'Image_Padding' | 'Image_Padding' | 'Image_Perlin_Noise' | 'Image_Rembg_$1Remove_Background$2' | 'Image_Perlin_Power_Fractal' | 'Image_Remove_Background_$1Alpha$2' | 'Image_Remove_Color' | 'Image_Resize' | 'Image_Rotate' | 'Image_Rotate_Hue' | 'Image_Save' | 'Image_Seamless_Texture' | 'Image_Select_Channel' | 'Image_Select_Color' | 'Image_Shadows_and_Highlights' | 'Image_Shadows_and_Highlights' | 'Image_Shadows_and_Highlights' | 'Image_Stitch' | 'Image_Style_Filter' | 'Image_Threshold' | 'Image_Tiled' | 'Image_Transpose' | 'Image_fDOF_Filter' | 'Image_to_Noise' | 'Images_to_RGB' | 'Images_to_Linear' | 'Image_Voronoi_Noise_Filter' | 'Load_Image_Batch' | 'MiDaS_Depth_Approximation' | 'MiDaS_Mask_Image' | 'MiDaS_Mask_Image' | 'Tensor_Batch_to_Image' | 'SAM_Image_Mask' | 'Bounded_Image_Blend' | 'Bounded_Image_Blend_with_Mask' | 'Bounded_Image_Crop' | 'Bounded_Image_Crop_with_Mask' | 'Write_to_GIF' | 'Write_to_Video' | 'CLIPSEG2' | 'VividSharpen' | 'Image_Load_with_Metadata_$1WLSH$2' | 'Grayscale_Image_$1WLSH$2' | 'Generate_Border_Mask_$1WLSH$2' | 'Outpaint_to_Image_$1WLSH$2' | 'Image_Scale_By_Factor_$1WLSH$2' | 'Image_Scale_by_Shortside_$1WLSH$2' | 'SDXL_Quick_Image_Scale_$1WLSH$2' | 'Upscale_by_Factor_with_Model_$1WLSH$2'> { }
export interface CanProduce_NOISE extends Pick<ComfySetup, 'RandomNoise' | 'DisableNoise' | 'RandomNoise_$3$3Inspire' | 'SeedExplorer_$3$3Inspire' | 'CompositeNoise_$3$3Inspire' | 'RegionalSeedExplorerMask_$3$3Inspire' | 'RegionalSeedExplorerColorMask_$3$3Inspire'> { }
export interface CanProduce_AUDIO extends Pick<ComfySetup, 'VAEDecodeAudio' | 'LoadAudio' | 'LoadAndCombinedAudio$_'> { }
export interface CanProduce_$Star extends Pick<ComfySetup, 'PlaySound$8pysssss' | 'Repeater$8pysssss' | 'ReroutePrimitive$8pysssss' | 'SystemNotification$8pysssss' | 'LatentSwitch' | 'SEGSSwitch' | 'ImpactSwitch' | 'ImpactInversedSwitch' | 'ImpactMakeAnyList' | 'ImpactConditionalBranch' | 'ImpactConditionalBranchSelMode' | 'ImpactIfNone' | 'ImpactValueSender' | 'ImpactValueReceiver' | 'ImpactExecutionOrderController' | 'ImpactExecutionOrderController' | 'ImpactDummyInput' | 'ImpactQueueTrigger' | 'ImpactQueueTriggerCountdown' | 'ImpactSetWidgetValue' | 'ImpactNodeSetMuteState' | 'ImpactControlBridge' | 'ImpactSleep' | 'RandomGeneratorForList_$3$3Inspire' | 'CacheBackendData_$3$3Inspire' | 'CacheBackendDataNumberKey_$3$3Inspire' | 'CacheBackendDataList_$3$3Inspire' | 'CacheBackendDataNumberKeyList_$3$3Inspire' | 'RetrieveBackendData_$3$3Inspire' | 'RetrieveBackendDataNumberKey_$3$3Inspire' | 'RemoveBackendData_$3$3Inspire' | 'RemoveBackendDataNumberKey_$3$3Inspire' | 'DummyOut' | 'Sleep' | 'VRAM$_Debug' | 'If_ANY_return_A_else_B$7$$D83D$$DD2C' | 'TESTNODE$_' | 'LimitNumber' | 'AnalyzeAudio' | 'DynamicDelayProcessor' | 'SwitchByIndex' | 'ListSplit$_' | 'CkptNames$_' | 'SamplerNames$_' | 'LoraNames$_' | 'SenseVoiceNode' | 'CR_Simple_List' | 'CR_Text_Cycler' | 'CR_Font_File_List' | 'CR_Repeater' | 'CR_XY_Product' | 'CR_XY_Product' | 'CR_Data_Bus_Out' | 'CR_Data_Bus_Out' | 'CR_Data_Bus_Out' | 'CR_Data_Bus_Out' | 'CR_8_Channel_Out' | 'CR_8_Channel_Out' | 'CR_8_Channel_Out' | 'CR_8_Channel_Out' | 'CR_8_Channel_Out' | 'CR_8_Channel_Out' | 'CR_8_Channel_Out' | 'CR_8_Channel_Out' | 'CR_Select_Font' | 'CR_String_To_Combo' | 'CR_Random_Multiline_Values' | 'CR_Text' | 'CR_Multiline_Text' | 'CR_Split_String' | 'CR_Split_String' | 'CR_Split_String' | 'CR_Split_String' | 'CR_Text_Concatenate' | 'CR_Text_Replace' | 'CR_Text_Operation' | 'CR_Text_Blacklist' | 'CR_Set_Value_on_String' | 'CR_Get_Parameter_From_Prompt' | 'CR_Select_Resize_Method' | 'SimpleCondition$6' | 'DF$_To$_text$_$1Debug$2' | 'DF$_Logic$_node' | 'Any_Switch_$1rgthree$2'> { }
export interface CanProduce_model {} // 🔶 no node can output this type.
export interface CanProduce__GRID extends Pick<ComfySetup, 'GridInput' | 'SplitImage' | 'SplitImage' | 'CenterImage'> { }
export interface CanProduce_LAYER extends Pick<ComfySetup, 'SvgImage' | 'NewLayer'> { }
export interface CanProduce_SLIDE {} // 🔶 no node can output this type.
export interface CanProduce_CLIP extends Pick<ComfySetup, 'CheckpointLoaderSimple' | 'CLIPSetLastLayer' | 'LoraLoader' | 'CLIPLoader' | 'DualCLIPLoader' | 'unCLIPCheckpointLoader' | 'CheckpointLoader' | 'DiffusersLoader' | 'CLIPMergeSimple' | 'CLIPMergeSubtract' | 'CLIPMergeAdd' | 'CLIPAttentionMultiply' | 'TripleCLIPLoader' | 'CivitAI$_Lora$_Loader' | 'CivitAI$_Checkpoint$_Loader' | 'ClipClamp' | 'ADE$_RegisterLoraHook' | 'ADE$_RegisterModelAsLoraHook' | 'ADE$_AttachLoraHookToCLIP' | 'CheckpointLoaderSimpleWithNoiseSelect' | 'AV$_LoraLoader' | 'AV$_LoraListLoader' | 'LoraLoader$8pysssss' | 'CheckpointLoader$8pysssss' | 'FromDetailerPipe' | 'FromDetailerPipe$_v2' | 'FromDetailerPipeSDXL' | 'FromDetailerPipeSDXL' | 'FromBasicPipe' | 'FromBasicPipe$_v2' | 'ImpactWildcardEncode' | 'LoraLoaderBlockWeight_$3$3Inspire' | 'ApplyLBW_$3$3Inspire' | 'WildcardEncode_$3$3Inspire' | 'CheckpointLoaderSimpleShared_$3$3Inspire' | 'StableCascade$_CheckpointLoader_$3$3Inspire' | 'IPAdapterModelHelper_$3$3Inspire' | 'CheckpointLoaderKJ' | 'CR_Select_Model' | 'CR_Load_LoRA' | 'CR_Apply_LoRA_Stack' | 'CR_Apply_Model_Merge' | 'CR_Module_Input' | 'CR_Clip_Input_Switch' | 'CR_Switch_Model_and_CLIP' | 'CR_Load_Scheduled_Models' | 'CR_Load_Scheduled_LoRAs' | 'CR_Cycle_Models' | 'CR_Cycle_LoRAs' | 'FluxAttentionSeeker$6' | 'SD3AttentionSeekerLG$6' | 'SD3AttentionSeekerT5$6' | 'Lora_Loader_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'ttN_tinyLoader' | 'ttN_conditioning' | 'ttN_KSampler$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSamplerAdvanced$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeEDIT' | 'ttN_pipeEncodeConcat' | 'ttN_multiModelMerge' | 'ttN_pipeOUT' | 'ttN_pipeLoader' | 'ttN_pipeKSampler' | 'ttN_pipeKSamplerAdvanced' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeKSamplerSDXL' | 'Context_Big_$1rgthree$2' | 'Context_$1rgthree$2' | 'Context_Switch_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Lora_Loader_Stack_$1rgthree$2' | 'Power_Prompt_$1rgthree$2' | 'SDXL_Power_Prompt_$7_Positive_$1rgthree$2' | 'Power_Lora_Loader_$1rgthree$2' | 'Bus_Node' | 'Checkpoint_Loader' | 'Checkpoint_Loader_$1Simple$2' | 'CLIP_Input_Switch' | 'Diffusers_Model_Loader' | 'Diffusers_Hub_Model_Down$7Loader' | 'Lora_Loader' | 'Load_Lora' | 'Lora_Input_Switch' | 'unCLIP_Checkpoint_Loader' | 'Checkpoint_Loader_w$3Name_$1WLSH$2'> { }
export interface CanProduce_MASK extends Pick<ComfySetup, 'LoadImage' | 'LoadImageMask' | 'ImagePadForOutpaint' | 'ImageToMask' | 'ImageColorToMask' | 'SolidMask' | 'InvertMask' | 'CropMask' | 'MaskComposite' | 'FeatherMask' | 'GrowMask' | 'ThresholdMask' | 'PorterDuffImageComposite' | 'SplitImageWithAlpha' | 'CLIPSeg' | 'CombineSegMasks' | 'AlphaChanelAsMask' | 'MaskClamp' | 'ImageEffectsLensOpticAxis' | 'ImageEffectsLensVignette' | 'ADE$_MultivalConvertToMask' | 'AV$_ParametersPipeToPrompts' | 'LoadImageFromUrl' | 'LoadImageAsMaskFromUrl' | 'ImageExtractChannel' | 'ISNetSegment' | 'PrepareImageAndMaskForInpaint' | 'AV$_FaceDetailer' | 'AV$_FaceDetailerPipe' | 'BRIA$_RMBG$_Zho' | 'SAMDetectorCombined' | 'SAMDetectorSegmented' | 'SAMDetectorSegmented' | 'FaceDetailer' | 'FaceDetailerPipe' | 'BitwiseAndMask' | 'SubtractMask' | 'AddMask' | 'ImpactFlattenMask' | 'ToBinaryMask' | 'MasksToMaskList' | 'MaskListToMaskBatch' | 'ImpactFrom$_SEG$_ELT' | 'ImpactDilateMask' | 'ImpactGaussianBlurMask' | 'BboxDetectorCombined$_v2' | 'SegmDetectorCombined$_v2' | 'SegsToCombinedMask' | 'PreviewBridge' | 'PreviewBridgeLatent' | 'ImageReceiver' | 'ImageMaskSwitch' | 'ImpactSEGSToMaskList' | 'ImpactSEGSToMaskBatch' | 'ImpactMakeMaskList' | 'ImpactMakeMaskBatch' | 'INPAINT$_ExpandMask' | 'INPAINT$_DenoiseToCompositingMask' | 'LoadImagesFromDir_$3$3Inspire' | 'LoadImageListFromDir_$3$3Inspire' | 'LoadImage_$3$3Inspire' | 'ColorMapToMasks_$3$3Inspire' | 'SelectNthMask_$3$3Inspire' | 'RegionalPromptColorMask_$3$3Inspire' | 'RegionalConditioningColorMask_$3$3Inspire' | 'RegionalIPAdapterColorMask_$3$3Inspire' | 'RegionalIPAdapterEncodedColorMask_$3$3Inspire' | 'RegionalSeedExplorerColorMask_$3$3Inspire' | 'ColorMaskToDepthMask_$3$3Inspire' | 'BatchCLIPSeg' | 'ColorToMask' | 'CreateGradientMask' | 'CreateTextMask' | 'CreateFadeMask' | 'CreateFadeMaskAdvanced' | 'CreateFluidMask' | 'CreateShapeMask' | 'CreateShapeMask' | 'CreateVoronoiMask' | 'CreateVoronoiMask' | 'CreateMagicMask' | 'CreateMagicMask' | 'GetMaskSizeAndCount' | 'GrowMaskWithBlur' | 'GrowMaskWithBlur' | 'MaskBatchMulti' | 'OffsetMask' | 'RemapMaskRange' | 'ResizeMask' | 'RoundMask' | 'GetImageRangeFromBatch' | 'ImageCropByMaskAndResize' | 'ImagePadForOutpaintMasked' | 'ImagePadForOutpaintTargetSize' | 'LoadAndResizeImage' | 'LoadImagesFromFolderKJ' | 'SplitImageChannels' | 'BatchCropFromMaskAdvanced' | 'BatchCropFromMaskAdvanced' | 'FilterZeroMasksAndCorrespondingImages' | 'NormalizedAmplitudeToMask' | 'OffsetMaskByNormalizedAmplitude' | 'SplineEditor' | 'CreateShapeImageOnPath' | 'CreateShapeMaskOnPath' | 'CreateShapeMaskOnPath' | 'CreateTextOnPath' | 'CreateTextOnPath' | 'FloatToMask' | 'PointsEditor' | 'GradientImage' | 'ResizeImageMixlab' | 'LoadImagesFromPath' | 'LoadImagesFromURL' | 'TextImage' | 'ImageCropByAlpha' | 'ImageCropByAlpha' | '_3DImage' | 'MergeLayers' | 'SplitImage' | 'CenterImage' | 'GridOutput' | 'SplitLongMask' | 'FeatheredMask' | 'SmoothMask' | 'FaceToMask' | 'AreaToMask' | 'OutlineMask' | 'MaskListMerge$_' | 'MaskListReplace$_' | 'EditMask' | 'RembgNode$_Mix' | 'create_image_$_O' | 'variation$_image_$_O' | 'create$_image_$_O' | 'Sam2Segmentation' | 'Sam2AutoSegmentation' | 'Sam2VideoSegmentation' | 'CR_Load_Image_List_Plus' | 'CR_Load_GIF_As_List' | 'CR_Vignette_Filter' | 'AnimeFace$_SemSegPreprocessor' | 'MeshGraphormer$7DepthMapPreprocessor' | 'MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor' | 'ImageRemoveBackground$6' | 'ImagePreviewFromLatent$6' | 'MaskBlur$6' | 'MaskBoundingBox$6' | 'MaskFix$6' | 'MaskFlip$6' | 'MaskFromColor$6' | 'MaskFromList$6' | 'MaskFromRGBCMYBW$6' | 'MaskFromRGBCMYBW$6' | 'MaskFromRGBCMYBW$6' | 'MaskFromRGBCMYBW$6' | 'MaskFromRGBCMYBW$6' | 'MaskFromRGBCMYBW$6' | 'MaskFromRGBCMYBW$6' | 'MaskFromRGBCMYBW$6' | 'MaskFromSegmentation$6' | 'MaskSmooth$6' | 'TransitionMask$6' | 'MaskBatch$6' | 'MaskExpandBatch$6' | 'MaskFromBatch$6' | 'ApplyCLIPSeg$6' | 'DrawText$6' | 'IPAdapterTiled' | 'IPAdapterTiledBatch' | 'Mask_Switch_$1JPS$2' | 'Images_Masks_MultiPipe_$1JPS$2' | 'Images_Masks_MultiPipe_$1JPS$2' | 'Images_Masks_MultiPipe_$1JPS$2' | 'ttN_imageREMBG' | 'Image_To_Mask' | 'Context_Big_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'CLIPSeg_Masking' | 'CLIPSeg_Batch_Masking' | 'Image_Load' | 'Image_to_Latent_Mask' | 'Masks_Add' | 'Masks_Subtract' | 'Mask_Arbitrary_Region' | 'Mask_Batch_to_Mask' | 'Mask_Batch' | 'Mask_Ceiling_Region' | 'Mask_Crop_Dominant_Region' | 'Mask_Crop_Minority_Region' | 'Mask_Crop_Region' | 'Mask_Paste_Region' | 'Mask_Paste_Region' | 'Mask_Dilate_Region' | 'Mask_Dominant_Region' | 'Mask_Erode_Region' | 'Mask_Fill_Holes' | 'Mask_Floor_Region' | 'Mask_Gaussian_Region' | 'Mask_Invert' | 'Mask_Minority_Region' | 'Mask_Smooth_Region' | 'Mask_Threshold_Region' | 'Masks_Combine_Regions' | 'Masks_Combine_Batch' | 'SAM_Image_Mask' | 'Outpaint_to_Image_$1WLSH$2'> { }
export interface CanProduce_INTS extends Pick<ComfySetup, 'ADE$_ValueScheduling' | 'ADE$_ValueSchedulingLatents'> { }
export interface CanProduce_PIPE extends Pick<ComfySetup, 'AV$_CheckpointModelsToParametersPipe' | 'AV$_PromptsToParametersPipe' | 'AV$_ParametersPipeToCheckpointModels' | 'AV$_ParametersPipeToPrompts'> { }
export interface CanProduce_JSON extends Pick<ComfySetup, 'LoadJsonFromUrl' | 'LoadJsonFromText' | 'GetObjectFromJson'> { }
export interface CanProduce_SEGS extends Pick<ComfySetup, 'BitwiseAndMaskForEach' | 'SubtractMaskForEach' | 'DetailerForEachPipe' | 'DetailerForEachDebugPipe' | 'DetailerForEachPipeForAnimateDiff' | 'ImpactSegsAndMask' | 'ImpactSegsAndMaskForEach' | 'EmptySegs' | 'MediaPipeFaceMeshToSEGS' | 'MaskToSEGS' | 'MaskToSEGS$_for$_AnimateDiff' | 'SetDefaultImageForSEGS' | 'RemoveImageFromSEGS' | 'BboxDetectorSEGS' | 'SegmDetectorSEGS' | 'ONNXDetectorSEGS' | 'ImpactSimpleDetectorSEGS$_for$_AD' | 'ImpactSimpleDetectorSEGS' | 'ImpactSimpleDetectorSEGSPipe' | 'ImpactControlNetApplySEGS' | 'ImpactControlNetApplyAdvancedSEGS' | 'ImpactControlNetClearSEGS' | 'ImpactIPAdapterApplySEGS' | 'ImpactAssembleSEGS' | 'ImpactDilateMaskInSEGS' | 'ImpactGaussianBlurMaskInSEGS' | 'SEGSDetailer' | 'ImpactSEGSConcat' | 'ImpactSEGSPicker' | 'ImpactMakeTileSEGS' | 'ImpactSEGSMerge' | 'SEGSDetailerForAnimateDiff' | 'ImpactSEGSLabelAssign' | 'ImpactSEGSLabelFilter' | 'ImpactSEGSLabelFilter' | 'ImpactSEGSRangeFilter' | 'ImpactSEGSRangeFilter' | 'ImpactSEGSOrderedFilter' | 'ImpactSEGSOrderedFilter' | 'ImpactSEGSClassify' | 'ImpactSEGSClassify'> { }
export interface CanProduce_BBOX extends Pick<ComfySetup, 'ImageCropByMaskAndResize' | 'BatchCropFromMask' | 'BatchCropFromMaskAdvanced' | 'BatchCropFromMaskAdvanced' | 'SplitBboxes' | 'SplitBboxes' | 'PointsEditor' | 'Florence2toCoordinates' | 'Sam2AutoSegmentation'> { }
export interface CanProduce_RGBA extends Pick<ComfySetup, 'TransparentImage' | 'RembgNode$_Mix'> { }
export interface CanProduce_EDIT {} // 🔶 no node can output this type.
export interface CanProduce_SEED extends Pick<ComfySetup, 'Number_to_Seed' | 'Seed' | 'Seed_and_Int_$1WLSH$2'> { }
export interface CanProduce_MESH extends Pick<ComfySetup, 'TripoSRSampler$_'> { }
export interface CanProduce_DICT extends Pick<ComfySetup, 'Dictionary_to_Console' | 'Load_Text_File' | 'Text_Dictionary_Update' | 'Text_Dictionary_Convert' | 'Text_Dictionary_New' | 'Text_File_History_Loader' | 'Text_Load_Line_From_File'> { }
export interface CanProduce_LIST extends Pick<ComfySetup, 'Image_Color_Palette' | 'Text_Dictionary_Keys' | 'Text_List' | 'Text_List_Concatenate'> { }
export interface CanProduce_INFO extends Pick<ComfySetup, 'KSamplerAdvanced_$1WLSH$2'> { }
export interface CanProduce_VAE extends Pick<ComfySetup, 'CheckpointLoaderSimple' | 'VAELoader' | 'unCLIPCheckpointLoader' | 'CheckpointLoader' | 'DiffusersLoader' | 'ImageOnlyCheckpointLoader' | 'CivitAI$_Checkpoint$_Loader' | 'VaeClamp' | 'CheckpointLoaderSimpleWithNoiseSelect' | 'AV$_VAELoader' | 'CheckpointLoader$8pysssss' | 'FromDetailerPipe' | 'FromDetailerPipe$_v2' | 'FromDetailerPipeSDXL' | 'FromBasicPipe' | 'FromBasicPipe$_v2' | 'IterativeLatentUpscale' | 'ImpactKSamplerBasicPipe' | 'ImpactKSamplerAdvancedBasicPipe' | 'KSamplerPipe_$3$3Inspire' | 'KSamplerAdvancedPipe_$3$3Inspire' | 'CheckpointLoaderSimpleShared_$3$3Inspire' | 'StableCascade$_CheckpointLoader_$3$3Inspire' | 'StableCascade$_CheckpointLoader_$3$3Inspire' | 'CheckpointLoaderKJ' | 'TorchCompileVAE' | 'CR_Select_Model' | 'CR_Module_Input' | 'CR_VAE_Input_Switch' | 'CR_Load_Scheduled_Models' | 'CR_Cycle_Models' | 'VAE_Switch_$1JPS$2' | 'SDXL_Fundamentals_MultiPipe_$1JPS$2' | 'ttN_tinyLoader' | 'ttN_KSampler$_v2' | 'ttN_pipeLoader$_v2' | 'ttN_pipeKSampler$_v2' | 'ttN_pipeKSamplerAdvanced$_v2' | 'ttN_pipeLoaderSDXL$_v2' | 'ttN_pipeKSamplerSDXL$_v2' | 'ttN_pipeEDIT' | 'ttN_pipeOUT' | 'ttN_pipeLoader' | 'ttN_pipeKSampler' | 'ttN_pipeKSamplerAdvanced' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeLoaderSDXL' | 'ttN_pipeKSamplerSDXL' | 'ttN_pipeKSamplerSDXL' | 'TAESDLoader' | 'Context_Big_$1rgthree$2' | 'Context_$1rgthree$2' | 'Context_Switch_$1rgthree$2' | 'Context_Switch_Big_$1rgthree$2' | 'Context_Merge_$1rgthree$2' | 'Context_Merge_Big_$1rgthree$2' | 'Bus_Node' | 'Checkpoint_Loader' | 'Checkpoint_Loader_$1Simple$2' | 'Diffusers_Model_Loader' | 'Diffusers_Hub_Model_Down$7Loader' | 'unCLIP_Checkpoint_Loader' | 'VAE_Input_Switch' | 'Checkpoint_Loader_w$3Name_$1WLSH$2'> { }
export interface CanProduce_GIF extends Pick<ComfySetup, 'ADE$_AnimateDiffCombine'> { }
export interface CanProduce_KEY {} // 🔶 no node can output this type.
export interface CanProduce_SVG {} // 🔶 no node can output this type.
export interface CanProduce_int extends Pick<ComfySetup, 'Equation1param_$_O'> { }
export interface CanProduce_STR extends Pick<ComfySetup, 'Chat$_Completion_$_O' | 'String_$_O' | 'concat_Strings_$_O' | 'trim_String_$_O' | 'replace_String_$_O' | 'replace_String_advanced_$_O'> { }
export interface CanProduce_BUS extends Pick<ComfySetup, 'Bus_Node'> { }
export interface CanProduce_XY extends Pick<ComfySetup, 'XY_Input$4_Lora_Block_Weight_$3$3Inspire' | 'XY_Input$4_Lora_Block_Weight_$3$3Inspire'> { }

// 4. TYPES -------------------------------

// 5. ACCEPTABLE INPUTS -------------------------------
export type _INVALID_null = any
export type _SEG_ELT_control_net_wrapper = ComfyNodeOutput<'SEG_ELT_control_net_wrapper'> | HasSingle_SEG_ELT_control_net_wrapper | ((x: CanProduce_SEG_ELT_control_net_wrapper) => _SEG_ELT_control_net_wrapper)
export type _ATTENTION_COUPLE_REGION = ComfyNodeOutput<'ATTENTION_COUPLE_REGION'> | HasSingle_ATTENTION_COUPLE_REGION | ((x: CanProduce_ATTENTION_COUPLE_REGION) => _ATTENTION_COUPLE_REGION)
export type _TRANSFORMERS_CLASSIFIER = ComfyNodeOutput<'TRANSFORMERS_CLASSIFIER'> | HasSingle_TRANSFORMERS_CLASSIFIER | ((x: CanProduce_TRANSFORMERS_CLASSIFIER) => _TRANSFORMERS_CLASSIFIER)
export type _OPENAI_CHAT_COMPLETION = ComfyNodeOutput<'OPENAI_CHAT_COMPLETION'> | HasSingle_OPENAI_CHAT_COMPLETION | ((x: CanProduce_OPENAI_CHAT_COMPLETION) => _OPENAI_CHAT_COMPLETION)
export type _IMAGE_INJECT_OPTIONS = ComfyNodeOutput<'IMAGE_INJECT_OPTIONS'> | HasSingle_IMAGE_INJECT_OPTIONS | ((x: CanProduce_IMAGE_INJECT_OPTIONS) => _IMAGE_INJECT_OPTIONS)
export type _NORMALIZED_AMPLITUDE = ComfyNodeOutput<'NORMALIZED_AMPLITUDE'> | HasSingle_NORMALIZED_AMPLITUDE | ((x: CanProduce_NORMALIZED_AMPLITUDE) => _NORMALIZED_AMPLITUDE)
export type _OPENAI_CHAT_MESSAGES = ComfyNodeOutput<'OPENAI_CHAT_MESSAGES'> | HasSingle_OPENAI_CHAT_MESSAGES | ((x: CanProduce_OPENAI_CHAT_MESSAGES) => _OPENAI_CHAT_MESSAGES)
export type _CONTEXTREF_KEYFRAME = ComfyNodeOutput<'CONTEXTREF_KEYFRAME'> | HasSingle_CONTEXTREF_KEYFRAME | ((x: CanProduce_CONTEXTREF_KEYFRAME) => _CONTEXTREF_KEYFRAME)
export type _NAIVEREUSE_KEYFRAME = ComfyNodeOutput<'NAIVEREUSE_KEYFRAME'> | HasSingle_NAIVEREUSE_KEYFRAME | ((x: CanProduce_NAIVEREUSE_KEYFRAME) => _NAIVEREUSE_KEYFRAME)
export type _LORA_HOOK_KEYFRAMES = ComfyNodeOutput<'LORA_HOOK_KEYFRAMES'> | HasSingle_LORA_HOOK_KEYFRAMES | ((x: CanProduce_LORA_HOOK_KEYFRAMES) => _LORA_HOOK_KEYFRAMES)
export type _SEG_ELT_crop_region = ComfyNodeOutput<'SEG_ELT_crop_region'> | HasSingle_SEG_ELT_crop_region | ((x: CanProduce_SEG_ELT_crop_region) => _SEG_ELT_crop_region)
export type _CONTROL_NET_WEIGHTS = ComfyNodeOutput<'CONTROL_NET_WEIGHTS'> | HasSingle_CONTROL_NET_WEIGHTS | ((x: CanProduce_CONTROL_NET_WEIGHTS) => _CONTROL_NET_WEIGHTS)
export type _CLIP_VISION_OUTPUT = ComfyNodeOutput<'CLIP_VISION_OUTPUT'> | HasSingle_CLIP_VISION_OUTPUT | ((x: CanProduce_CLIP_VISION_OUTPUT) => _CLIP_VISION_OUTPUT)
export type _REGIONAL_IPADAPTER = ComfyNodeOutput<'REGIONAL_IPADAPTER'> | HasSingle_REGIONAL_IPADAPTER | ((x: CanProduce_REGIONAL_IPADAPTER) => _REGIONAL_IPADAPTER)
export type _SAM2INFERENCESTATE = ComfyNodeOutput<'SAM2INFERENCESTATE'> | HasSingle_SAM2INFERENCESTATE | ((x: CanProduce_SAM2INFERENCESTATE) => _SAM2INFERENCESTATE)
export type _SIMPLE_PROMPT_LIST = ComfyNodeOutput<'SIMPLE_PROMPT_LIST'> | HasSingle_SIMPLE_PROMPT_LIST | ((x: CanProduce_SIMPLE_PROMPT_LIST) => _SIMPLE_PROMPT_LIST)
export type _BOOLEAN = boolean | ComfyNodeOutput<'BOOLEAN'> | HasSingle_BOOLEAN | ((x: CanProduce_BOOLEAN) => _BOOLEAN)
export type _CONTROL_NET_STACK = ComfyNodeOutput<'CONTROL_NET_STACK'> | HasSingle_CONTROL_NET_STACK | ((x: CanProduce_CONTROL_NET_STACK) => _CONTROL_NET_STACK)
export type _TIMESTEP_KEYFRAME = ComfyNodeOutput<'TIMESTEP_KEYFRAME'> | HasSingle_TIMESTEP_KEYFRAME | ((x: CanProduce_TIMESTEP_KEYFRAME) => _TIMESTEP_KEYFRAME)
export type _SEGS_PREPROCESSOR = ComfyNodeOutput<'SEGS_PREPROCESSOR'> | HasSingle_SEGS_PREPROCESSOR | ((x: CanProduce_SEGS_PREPROCESSOR) => _SEGS_PREPROCESSOR)
export type _KSAMPLER_ADVANCED = ComfyNodeOutput<'KSAMPLER_ADVANCED'> | HasSingle_KSAMPLER_ADVANCED | ((x: CanProduce_KSAMPLER_ADVANCED) => _KSAMPLER_ADVANCED)
export type _CN_WEIGHTS_EXTRAS = ComfyNodeOutput<'CN_WEIGHTS_EXTRAS'> | HasSingle_CN_WEIGHTS_EXTRAS | ((x: CanProduce_CN_WEIGHTS_EXTRAS) => _CN_WEIGHTS_EXTRAS)
export type _IMAGE_LIST_SIMPLE = ComfyNodeOutput<'IMAGE_LIST_SIMPLE'> | HasSingle_IMAGE_LIST_SIMPLE | ((x: CanProduce_IMAGE_LIST_SIMPLE) => _IMAGE_LIST_SIMPLE)
export type _LATENT_OPERATION = ComfyNodeOutput<'LATENT_OPERATION'> | HasSingle_LATENT_OPERATION | ((x: CanProduce_LATENT_OPERATION) => _LATENT_OPERATION)
export type _MOTION_MODEL_ADE = ComfyNodeOutput<'MOTION_MODEL_ADE'> | HasSingle_MOTION_MODEL_ADE | ((x: CanProduce_MOTION_MODEL_ADE) => _MOTION_MODEL_ADE)
export type _CAMERACTRL_POSES = ComfyNodeOutput<'CAMERACTRL_POSES'> | HasSingle_CAMERACTRL_POSES | ((x: CanProduce_CAMERACTRL_POSES) => _CAMERACTRL_POSES)
export type _REGIONAL_PROMPTS = ComfyNodeOutput<'REGIONAL_PROMPTS'> | HasSingle_REGIONAL_PROMPTS | ((x: CanProduce_REGIONAL_PROMPTS) => _REGIONAL_PROMPTS)
export type _TEXT_LIST_SIMPLE = ComfyNodeOutput<'TEXT_LIST_SIMPLE'> | HasSingle_TEXT_LIST_SIMPLE | ((x: CanProduce_TEXT_LIST_SIMPLE) => _TEXT_LIST_SIMPLE)
export type _IPADAPTER_PARAMS = ComfyNodeOutput<'IPADAPTER_PARAMS'> | HasSingle_IPADAPTER_PARAMS | ((x: CanProduce_IPADAPTER_PARAMS) => _IPADAPTER_PARAMS)
export type _WEIGHTS_STRATEGY = ComfyNodeOutput<'WEIGHTS_STRATEGY'> | HasSingle_WEIGHTS_STRATEGY | ((x: CanProduce_WEIGHTS_STRATEGY) => _WEIGHTS_STRATEGY)
export type _CONDITIONING_SEQ = ComfyNodeOutput<'CONDITIONING_SEQ'> | HasSingle_CONDITIONING_SEQ | ((x: CanProduce_CONDITIONING_SEQ) => _CONDITIONING_SEQ)
export type _STRING = string | ComfyNodeOutput<'STRING'> | HasSingle_STRING | ((x: CanProduce_STRING) => _STRING)
export type _SAMPLE_SETTINGS = ComfyNodeOutput<'SAMPLE_SETTINGS'> | HasSingle_SAMPLE_SETTINGS | ((x: CanProduce_SAMPLE_SETTINGS) => _SAMPLE_SETTINGS)
export type _CONTEXT_OPTIONS = ComfyNodeOutput<'CONTEXT_OPTIONS'> | HasSingle_CONTEXT_OPTIONS | ((x: CanProduce_CONTEXT_OPTIONS) => _CONTEXT_OPTIONS)
export type _CONTEXTREF_MODE = ComfyNodeOutput<'CONTEXTREF_MODE'> | HasSingle_CONTEXTREF_MODE | ((x: CanProduce_CONTEXTREF_MODE) => _CONTEXTREF_MODE)
export type _CONTEXTREF_TUNE = ComfyNodeOutput<'CONTEXTREF_TUNE'> | HasSingle_CONTEXTREF_TUNE | ((x: CanProduce_CONTEXTREF_TUNE) => _CONTEXTREF_TUNE)
export type _CHECKPOINT_NAME = ComfyNodeOutput<'CHECKPOINT_NAME'> | HasSingle_CHECKPOINT_NAME | ((x: CanProduce_CHECKPOINT_NAME) => _CHECKPOINT_NAME)
export type _RGTHREE_CONTEXT = ComfyNodeOutput<'RGTHREE_CONTEXT'> | HasSingle_RGTHREE_CONTEXT | ((x: CanProduce_RGTHREE_CONTEXT) => _RGTHREE_CONTEXT)
export type _FLOAT = number | ComfyNodeOutput<'FLOAT'> | HasSingle_FLOAT | ((x: CanProduce_FLOAT) => _FLOAT)
export type _ITERATION_OPTS = ComfyNodeOutput<'ITERATION_OPTS'> | HasSingle_ITERATION_OPTS | ((x: CanProduce_ITERATION_OPTS) => _ITERATION_OPTS)
export type _SIGMA_SCHEDULE = ComfyNodeOutput<'SIGMA_SCHEDULE'> | HasSingle_SIGMA_SCHEDULE | ((x: CanProduce_SIGMA_SCHEDULE) => _SIGMA_SCHEDULE)
export type _CONTEXT_EXTRAS = ComfyNodeOutput<'CONTEXT_EXTRAS'> | HasSingle_CONTEXT_EXTRAS | ((x: CanProduce_CONTEXT_EXTRAS) => _CONTEXT_EXTRAS)
export type _TIMESTEPS_COND = ComfyNodeOutput<'TIMESTEPS_COND'> | HasSingle_TIMESTEPS_COND | ((x: CanProduce_TIMESTEPS_COND) => _TIMESTEPS_COND)
export type _VALUES_REPLACE = ComfyNodeOutput<'VALUES_REPLACE'> | HasSingle_VALUES_REPLACE | ((x: CanProduce_VALUES_REPLACE) => _VALUES_REPLACE)
export type _SCHEDULER_FUNC = ComfyNodeOutput<'SCHEDULER_FUNC'> | HasSingle_SCHEDULER_FUNC | ((x: CanProduce_SCHEDULER_FUNC) => _SCHEDULER_FUNC)
export type _IPADAPTER_PIPE = ComfyNodeOutput<'IPADAPTER_PIPE'> | HasSingle_IPADAPTER_PIPE | ((x: CanProduce_IPADAPTER_PIPE) => _IPADAPTER_PIPE)
export type _SELECTEDBLOCKS = ComfyNodeOutput<'SELECTEDBLOCKS'> | HasSingle_SELECTEDBLOCKS | ((x: CanProduce_SELECTEDBLOCKS) => _SELECTEDBLOCKS)
export type _SAMPLER_PARAMS = ComfyNodeOutput<'SAMPLER_PARAMS'> | HasSingle_SAMPLER_PARAMS | ((x: CanProduce_SAMPLER_PARAMS) => _SAMPLER_PARAMS)
export type _PIPE_LINE_SDXL = ComfyNodeOutput<'PIPE_LINE_SDXL'> | HasSingle_PIPE_LINE_SDXL | ((x: CanProduce_PIPE_LINE_SDXL) => _PIPE_LINE_SDXL)
export type _SAM_PARAMETERS = ComfyNodeOutput<'SAM_PARAMETERS'> | HasSingle_SAM_PARAMETERS | ((x: CanProduce_SAM_PARAMETERS) => _SAM_PARAMETERS)
export type _UPSCALE_MODEL = ComfyNodeOutput<'UPSCALE_MODEL'> | HasSingle_UPSCALE_MODEL | ((x: CanProduce_UPSCALE_MODEL) => _UPSCALE_MODEL)
export type _WEIGHT_ADJUST = ComfyNodeOutput<'WEIGHT_ADJUST'> | HasSingle_WEIGHT_ADJUST | ((x: CanProduce_WEIGHT_ADJUST) => _WEIGHT_ADJUST)
export type _UPSCALER_NAME = ComfyNodeOutput<'UPSCALER_NAME'> | HasSingle_UPSCALER_NAME | ((x: CanProduce_UPSCALER_NAME) => _UPSCALER_NAME)
export type _SAM_EMBEDDING = ComfyNodeOutput<'SAM_EMBEDDING'> | HasSingle_SAM_EMBEDDING | ((x: CanProduce_SAM_EMBEDDING) => _SAM_EMBEDDING)
export type _DETAILER_PIPE = ComfyNodeOutput<'DETAILER_PIPE'> | HasSingle_DETAILER_PIPE | ((x: CanProduce_DETAILER_PIPE) => _DETAILER_PIPE)
export type _BBOX_DETECTOR = ComfyNodeOutput<'BBOX_DETECTOR'> | HasSingle_BBOX_DETECTOR | ((x: CanProduce_BBOX_DETECTOR) => _BBOX_DETECTOR)
export type _SEGM_DETECTOR = ComfyNodeOutput<'SEGM_DETECTOR'> | HasSingle_SEGM_DETECTOR | ((x: CanProduce_SEGM_DETECTOR) => _SEGM_DETECTOR)
export type _DETAILER_HOOK = ComfyNodeOutput<'DETAILER_HOOK'> | HasSingle_DETAILER_HOOK | ((x: CanProduce_DETAILER_HOOK) => _DETAILER_HOOK)
export type _UPSCALER_HOOK = ComfyNodeOutput<'UPSCALER_HOOK'> | HasSingle_UPSCALER_HOOK | ((x: CanProduce_UPSCALER_HOOK) => _UPSCALER_HOOK)
export type _INPAINT_PATCH = ComfyNodeOutput<'INPAINT_PATCH'> | HasSingle_INPAINT_PATCH | ((x: CanProduce_INPAINT_PATCH) => _INPAINT_PATCH)
export type _INPAINT_MODEL = ComfyNodeOutput<'INPAINT_MODEL'> | HasSingle_INPAINT_MODEL | ((x: CanProduce_INPAINT_MODEL) => _INPAINT_MODEL)
export type _ZIPPED_PROMPT = ComfyNodeOutput<'ZIPPED_PROMPT'> | HasSingle_ZIPPED_PROMPT | ((x: CanProduce_ZIPPED_PROMPT) => _ZIPPED_PROMPT)
export type _MARIGOLDMODEL = ComfyNodeOutput<'MARIGOLDMODEL'> | HasSingle_MARIGOLDMODEL | ((x: CanProduce_MARIGOLDMODEL) => _MARIGOLDMODEL)
export type _AUDIOINPUTMIX = ComfyNodeOutput<'AUDIOINPUTMIX'> | HasSingle_AUDIOINPUTMIX | ((x: CanProduce_AUDIOINPUTMIX) => _AUDIOINPUTMIX)
export type _TRIPOSR_MODEL = ComfyNodeOutput<'TRIPOSR_MODEL'> | HasSingle_TRIPOSR_MODEL | ((x: CanProduce_TRIPOSR_MODEL) => _TRIPOSR_MODEL)
export type _VHS_VIDEOINFO = ComfyNodeOutput<'VHS_VIDEOINFO'> | HasSingle_VHS_VIDEOINFO | ((x: CanProduce_VHS_VIDEOINFO) => _VHS_VIDEOINFO)
export type _UPSCALE_STACK = ComfyNodeOutput<'UPSCALE_STACK'> | HasSingle_UPSCALE_STACK | ((x: CanProduce_UPSCALE_STACK) => _UPSCALE_STACK)
export type _POSE_KEYPOINT = ComfyNodeOutput<'POSE_KEYPOINT'> | HasSingle_POSE_KEYPOINT | ((x: CanProduce_POSE_KEYPOINT) => _POSE_KEYPOINT)
export type _REMBG_SESSION = ComfyNodeOutput<'REMBG_SESSION'> | HasSingle_REMBG_SESSION | ((x: CanProduce_REMBG_SESSION) => _REMBG_SESSION)
export type _CLIPSEG_MODEL = ComfyNodeOutput<'CLIPSEG_MODEL'> | HasSingle_CLIPSEG_MODEL | ((x: CanProduce_CLIPSEG_MODEL) => _CLIPSEG_MODEL)
export type _INT = number | ComfyNodeOutput<'INT'> | HasSingle_INT | ((x: CanProduce_INT) => _INT)
export type _CONDITIONING = ComfyNodeOutput<'CONDITIONING'> | HasSingle_CONDITIONING | ((x: CanProduce_CONDITIONING) => _CONDITIONING)
export type _NOISE_LAYERS = ComfyNodeOutput<'NOISE_LAYERS'> | HasSingle_NOISE_LAYERS | ((x: CanProduce_NOISE_LAYERS) => _NOISE_LAYERS)
export type _IMAGE_INJECT = ComfyNodeOutput<'IMAGE_INJECT'> | HasSingle_IMAGE_INJECT | ((x: CanProduce_IMAGE_INJECT) => _IMAGE_INJECT)
export type _AD_KEYFRAMES = ComfyNodeOutput<'AD_KEYFRAMES'> | HasSingle_AD_KEYFRAMES | ((x: CanProduce_AD_KEYFRAMES) => _AD_KEYFRAMES)
export type _DEPENDENCIES = ComfyNodeOutput<'DEPENDENCIES'> | HasSingle_DEPENDENCIES | ((x: CanProduce_DEPENDENCIES) => _DEPENDENCIES)
export type _AV_SAM_MODEL = ComfyNodeOutput<'AV_SAM_MODEL'> | HasSingle_AV_SAM_MODEL | ((x: CanProduce_AV_SAM_MODEL) => _AV_SAM_MODEL)
export type _SEG_ELT_bbox = ComfyNodeOutput<'SEG_ELT_bbox'> | HasSingle_SEG_ELT_bbox | ((x: CanProduce_SEG_ELT_bbox) => _SEG_ELT_bbox)
export type _CLIPSEGMODEL = ComfyNodeOutput<'CLIPSEGMODEL'> | HasSingle_CLIPSEGMODEL | ((x: CanProduce_CLIPSEGMODEL) => _CLIPSEGMODEL)
export type _STEP_LATENTS = ComfyNodeOutput<'STEP_LATENTS'> | HasSingle_STEP_LATENTS | ((x: CanProduce_STEP_LATENTS) => _STEP_LATENTS)
export type _OPTICAL_FLOW = ComfyNodeOutput<'OPTICAL_FLOW'> | HasSingle_OPTICAL_FLOW | ((x: CanProduce_OPTICAL_FLOW) => _OPTICAL_FLOW)
export type _MASK_MAPPING = ComfyNodeOutput<'MASK_MAPPING'> | HasSingle_MASK_MAPPING | ((x: CanProduce_MASK_MAPPING) => _MASK_MAPPING)
export type _IMAGE_BOUNDS = ComfyNodeOutput<'IMAGE_BOUNDS'> | HasSingle_IMAGE_BOUNDS | ((x: CanProduce_IMAGE_BOUNDS) => _IMAGE_BOUNDS)
export type _CLIP_VISION = ComfyNodeOutput<'CLIP_VISION'> | HasSingle_CLIP_VISION | ((x: CanProduce_CLIP_VISION) => _CLIP_VISION)
export type _STYLE_MODEL = ComfyNodeOutput<'STYLE_MODEL'> | HasSingle_STYLE_MODEL | ((x: CanProduce_STYLE_MODEL) => _STYLE_MODEL)
export type _CONTROL_NET = ComfyNodeOutput<'CONTROL_NET'> | HasSingle_CONTROL_NET | ((x: CanProduce_CONTROL_NET) => _CONTROL_NET)
export type _MOTION_LORA = ComfyNodeOutput<'MOTION_LORA'> | HasSingle_MOTION_LORA | ((x: CanProduce_MOTION_LORA) => _MOTION_LORA)
export type _ADEAUTOSIZE = ComfyNodeOutput<'ADEAUTOSIZE'> | HasSingle_ADEAUTOSIZE | ((x: CanProduce_ADEAUTOSIZE) => _ADEAUTOSIZE)
export type _AD_SETTINGS = ComfyNodeOutput<'AD_SETTINGS'> | HasSingle_AD_SETTINGS | ((x: CanProduce_AD_SETTINGS) => _AD_SETTINGS)
export type _ISNET_MODEL = ComfyNodeOutput<'ISNET_MODEL'> | HasSingle_ISNET_MODEL | ((x: CanProduce_ISNET_MODEL) => _ISNET_MODEL)
export type _CROP_REGION = ComfyNodeOutput<'CROP_REGION'> | HasSingle_CROP_REGION | ((x: CanProduce_CROP_REGION) => _CROP_REGION)
export type _LLM_MESSAGE = ComfyNodeOutput<'LLM_MESSAGE'> | HasSingle_LLM_MESSAGE | ((x: CanProduce_LLM_MESSAGE) => _LLM_MESSAGE)
export type _SEGS_HEADER = ComfyNodeOutput<'SEGS_HEADER'> | HasSingle_SEGS_HEADER | ((x: CanProduce_SEGS_HEADER) => _SEGS_HEADER)
export type _INSIGHTFACE = ComfyNodeOutput<'INSIGHTFACE'> | HasSingle_INSIGHTFACE | ((x: CanProduce_INSIGHTFACE) => _INSIGHTFACE)
export type _ACNAUTOSIZE = ComfyNodeOutput<'ACNAUTOSIZE'> | HasSingle_ACNAUTOSIZE | ((x: CanProduce_ACNAUTOSIZE) => _ACNAUTOSIZE)
export type _IMAGEBASE64 = ComfyNodeOutput<'IMAGEBASE64'> | HasSingle_IMAGEBASE64 | ((x: CanProduce_IMAGEBASE64) => _IMAGEBASE64)
export type _SCENE_VIDEO = ComfyNodeOutput<'SCENE_VIDEO'> | HasSingle_SCENE_VIDEO | ((x: CanProduce_SCENE_VIDEO) => _SCENE_VIDEO)
export type _AUDIOBASE64 = ComfyNodeOutput<'AUDIOBASE64'> | HasSingle_AUDIOBASE64 | ((x: CanProduce_AUDIOBASE64) => _AUDIOBASE64)
export type _MODEL_STACK = ComfyNodeOutput<'MODEL_STACK'> | HasSingle_MODEL_STACK | ((x: CanProduce_MODEL_STACK) => _MODEL_STACK)
export type _PROMPT_LIST = ComfyNodeOutput<'PROMPT_LIST'> | HasSingle_PROMPT_LIST | ((x: CanProduce_PROMPT_LIST) => _PROMPT_LIST)
export type _LORA_PARAMS = ComfyNodeOutput<'LORA_PARAMS'> | HasSingle_LORA_PARAMS | ((x: CanProduce_LORA_PARAMS) => _LORA_PARAMS)
export type _MIDAS_MODEL = ComfyNodeOutput<'MIDAS_MODEL'> | HasSingle_MIDAS_MODEL | ((x: CanProduce_MIDAS_MODEL) => _MIDAS_MODEL)
export type _PHOTOMAKER = ComfyNodeOutput<'PHOTOMAKER'> | HasSingle_PHOTOMAKER | ((x: CanProduce_PHOTOMAKER) => _PHOTOMAKER)
export type _CUSTOM_CFG = ComfyNodeOutput<'CUSTOM_CFG'> | HasSingle_CUSTOM_CFG | ((x: CanProduce_CUSTOM_CFG) => _CUSTOM_CFG)
export type _CFG_EXTRAS = ComfyNodeOutput<'CFG_EXTRAS'> | HasSingle_CFG_EXTRAS | ((x: CanProduce_CFG_EXTRAS) => _CFG_EXTRAS)
export type _LORA_STACK = ComfyNodeOutput<'LORA_STACK'> | HasSingle_LORA_STACK | ((x: CanProduce_LORA_STACK) => _LORA_STACK)
export type _BLIP_MODEL = ComfyNodeOutput<'BLIP_MODEL'> | HasSingle_BLIP_MODEL | ((x: CanProduce_BLIP_MODEL) => _BLIP_MODEL)
export type _LLM_CONFIG = ComfyNodeOutput<'LLM_CONFIG'> | HasSingle_LLM_CONFIG | ((x: CanProduce_LLM_CONFIG) => _LLM_CONFIG)
export type _BASIC_PIPE = ComfyNodeOutput<'BASIC_PIPE'> | HasSingle_BASIC_PIPE | ((x: CanProduce_BASIC_PIPE) => _BASIC_PIPE)
export type _IMAGE_FILE = ComfyNodeOutput<'IMAGE_FILE'> | HasSingle_IMAGE_FILE | ((x: CanProduce_IMAGE_FILE) => _IMAGE_FILE)
export type _MODEL_LIST = ComfyNodeOutput<'MODEL_LIST'> | HasSingle_MODEL_LIST | ((x: CanProduce_MODEL_LIST) => _MODEL_LIST)
export type _IMAGE_LIST = ComfyNodeOutput<'IMAGE_LIST'> | HasSingle_IMAGE_LIST | ((x: CanProduce_IMAGE_LIST) => _IMAGE_LIST)
export type _image_LIST = ComfyNodeOutput<'image_LIST'> | HasSingle_image_LIST | ((x: CanProduce_image_LIST) => _image_LIST)
export type _CLIPREGION = ComfyNodeOutput<'CLIPREGION'> | HasSingle_CLIPREGION | ((x: CanProduce_CLIPREGION) => _CLIPREGION)
export type _ADV_XYPLOT = ComfyNodeOutput<'ADV_XYPLOT'> | HasSingle_ADV_XYPLOT | ((x: CanProduce_ADV_XYPLOT) => _ADV_XYPLOT)
export type _VIEW_OPTS = ComfyNodeOutput<'VIEW_OPTS'> | HasSingle_VIEW_OPTS | ((x: CanProduce_VIEW_OPTS) => _VIEW_OPTS)
export type _LORA_HOOK = ComfyNodeOutput<'LORA_HOOK'> | HasSingle_LORA_HOOK | ((x: CanProduce_LORA_HOOK) => _LORA_HOOK)
export type _PE_ADJUST = ComfyNodeOutput<'PE_ADJUST'> | HasSingle_PE_ADJUST | ((x: CanProduce_PE_ADJUST) => _PE_ADJUST)
export type _PER_BLOCK = ComfyNodeOutput<'PER_BLOCK'> | HasSingle_PER_BLOCK | ((x: CanProduce_PER_BLOCK) => _PER_BLOCK)
export type _PIA_INPUT = ComfyNodeOutput<'PIA_INPUT'> | HasSingle_PIA_INPUT | ((x: CanProduce_PIA_INPUT) => _PIA_INPUT)
export type _LORA_NAME = ComfyNodeOutput<'LORA_NAME'> | HasSingle_LORA_NAME | ((x: CanProduce_LORA_NAME) => _LORA_NAME)
export type _IPADAPTER = ComfyNodeOutput<'IPADAPTER'> | HasSingle_IPADAPTER | ((x: CanProduce_IPADAPTER) => _IPADAPTER)
export type _SAM_MODEL = ComfyNodeOutput<'SAM_MODEL'> | HasSingle_SAM_MODEL | ((x: CanProduce_SAM_MODEL) => _SAM_MODEL)
export type _RMBGMODEL = ComfyNodeOutput<'RMBGMODEL'> | HasSingle_RMBGMODEL | ((x: CanProduce_RMBGMODEL) => _RMBGMODEL)
export type _LBW_MODEL = ComfyNodeOutput<'LBW_MODEL'> | HasSingle_LBW_MODEL | ((x: CanProduce_LBW_MODEL) => _LBW_MODEL)
export type _SAM2MODEL = ComfyNodeOutput<'SAM2MODEL'> | HasSingle_SAM2MODEL | ((x: CanProduce_SAM2MODEL) => _SAM2MODEL)
export type _PIPE_LINE = ComfyNodeOutput<'PIPE_LINE'> | HasSingle_PIPE_LINE | ((x: CanProduce_PIPE_LINE) => _PIPE_LINE)
export type _LORA_LIST = ComfyNodeOutput<'LORA_LIST'> | HasSingle_LORA_LIST | ((x: CanProduce_LORA_LIST) => _LORA_LIST)
export type _TEXT_LIST = ComfyNodeOutput<'TEXT_LIST'> | HasSingle_TEXT_LIST | ((x: CanProduce_TEXT_LIST) => _TEXT_LIST)
export type _lora_LIST = ComfyNodeOutput<'lora_LIST'> | HasSingle_lora_LIST | ((x: CanProduce_lora_LIST) => _lora_LIST)
export type _INT$4seed = ComfyNodeOutput<'INT$4seed'> | HasSingle_INT$4seed | ((x: CanProduce_INT$4seed) => _INT$4seed)
export type _FIZZFRAME = ComfyNodeOutput<'FIZZFRAME'> | HasSingle_FIZZFRAME | ((x: CanProduce_FIZZFRAME) => _FIZZFRAME)
export type _CROP_DATA = ComfyNodeOutput<'CROP_DATA'> | HasSingle_CROP_DATA | ((x: CanProduce_CROP_DATA) => _CROP_DATA)
export type _MULTIVAL = ComfyNodeOutput<'MULTIVAL'> | HasSingle_MULTIVAL | ((x: CanProduce_MULTIVAL) => _MULTIVAL)
export type _AD_BLOCK = ComfyNodeOutput<'AD_BLOCK'> | HasSingle_AD_BLOCK | ((x: CanProduce_AD_BLOCK) => _AD_BLOCK)
export type _M_MODELS = ComfyNodeOutput<'M_MODELS'> | HasSingle_M_MODELS | ((x: CanProduce_M_MODELS) => _M_MODELS)
export type _VAE_NAME = ComfyNodeOutput<'VAE_NAME'> | HasSingle_VAE_NAME | ((x: CanProduce_VAE_NAME) => _VAE_NAME)
export type _UPSCALER = ComfyNodeOutput<'UPSCALER'> | HasSingle_UPSCALER | ((x: CanProduce_UPSCALER) => _UPSCALER)
export type _KSAMPLER = ComfyNodeOutput<'KSAMPLER'> | HasSingle_KSAMPLER | ((x: CanProduce_KSAMPLER) => _KSAMPLER)
export type _TRACKING = ComfyNodeOutput<'TRACKING'> | HasSingle_TRACKING | ((x: CanProduce_TRACKING) => _TRACKING)
export type _$$7B$$7D = ComfyNodeOutput<'$$7B$$7D'> | HasSingle_$$7B$$7D | ((x: CanProduce_$$7B$$7D) => _$$7B$$7D)
export type _SCHEDULE = ComfyNodeOutput<'SCHEDULE'> | HasSingle_SCHEDULE | ((x: CanProduce_SCHEDULE) => _SCHEDULE)
export type _CLIP_SEG = ComfyNodeOutput<'CLIP_SEG'> | HasSingle_CLIP_SEG | ((x: CanProduce_CLIP_SEG) => _CLIP_SEG)
export type _SAMPLER = ComfyNodeOutput<'SAMPLER'> | HasSingle_SAMPLER | ((x: CanProduce_SAMPLER) => _SAMPLER)
export type _ADEWARN = ComfyNodeOutput<'ADEWARN'> | HasSingle_ADEWARN | ((x: CanProduce_ADEWARN) => _ADEWARN)
export type _LLM_API = ComfyNodeOutput<'LLM_API'> | HasSingle_LLM_API | ((x: CanProduce_LLM_API) => _LLM_API)
export type _PK_HOOK = ComfyNodeOutput<'PK_HOOK'> | HasSingle_PK_HOOK | ((x: CanProduce_PK_HOOK) => _PK_HOOK)
export type _SEG_ELT = ComfyNodeOutput<'SEG_ELT'> | HasSingle_SEG_ELT | ((x: CanProduce_SEG_ELT) => _SEG_ELT)
export type _INDEXES = ComfyNodeOutput<'INDEXES'> | HasSingle_INDEXES | ((x: CanProduce_INDEXES) => _INDEXES)
export type _WATCHER = ComfyNodeOutput<'WATCHER'> | HasSingle_WATCHER | ((x: CanProduce_WATCHER) => _WATCHER)
export type _LATENT = ComfyNodeOutput<'LATENT'> | HasSingle_LATENT | ((x: CanProduce_LATENT) => _LATENT)
export type _GLIGEN = ComfyNodeOutput<'GLIGEN'> | HasSingle_GLIGEN | ((x: CanProduce_GLIGEN) => _GLIGEN)
export type _SIGMAS = ComfyNodeOutput<'SIGMAS'> | HasSingle_SIGMAS | ((x: CanProduce_SIGMAS) => _SIGMAS)
export type _GUIDER = ComfyNodeOutput<'GUIDER'> | HasSingle_GUIDER | ((x: CanProduce_GUIDER) => _GUIDER)
export type _WEBCAM = ComfyNodeOutput<'WEBCAM'> | HasSingle_WEBCAM | ((x: CanProduce_WEBCAM) => _WEBCAM)
export type _FLOATS = ComfyNodeOutput<'FLOATS'> | HasSingle_FLOATS | ((x: CanProduce_FLOATS) => _FLOATS)
export type _HIDDEN = ComfyNodeOutput<'HIDDEN'> | HasSingle_HIDDEN | ((x: CanProduce_HIDDEN) => _HIDDEN)
export type _EMBEDS = ComfyNodeOutput<'EMBEDS'> | HasSingle_EMBEDS | ((x: CanProduce_EMBEDS) => _EMBEDS)
export type _PROMPT = ComfyNodeOutput<'PROMPT'> | HasSingle_PROMPT | ((x: CanProduce_PROMPT) => _PROMPT)
export type _THREED = ComfyNodeOutput<'THREED'> | HasSingle_THREED | ((x: CanProduce_THREED) => _THREED)
export type _TCOLOR = ComfyNodeOutput<'TCOLOR'> | HasSingle_TCOLOR | ((x: CanProduce_TCOLOR) => _TCOLOR)
export type _CHEESE = ComfyNodeOutput<'CHEESE'> | HasSingle_CHEESE | ((x: CanProduce_CHEESE) => _CHEESE)
export type _SCENE_ = ComfyNodeOutput<'SCENE_'> | HasSingle_SCENE_ | ((x: CanProduce_SCENE_) => _SCENE_)
export type _CLIENT = ComfyNodeOutput<'CLIENT'> | HasSingle_CLIENT | ((x: CanProduce_CLIENT) => _CLIENT)
export type _OPENAI = ComfyNodeOutput<'OPENAI'> | HasSingle_OPENAI | ((x: CanProduce_OPENAI) => _OPENAI)
export type _XYPLOT = ComfyNodeOutput<'XYPLOT'> | HasSingle_XYPLOT | ((x: CanProduce_XYPLOT) => _XYPLOT)
export type _NUMBER = ComfyNodeOutput<'NUMBER'> | HasSingle_NUMBER | ((x: CanProduce_NUMBER) => _NUMBER)
export type _MODEL = ComfyNodeOutput<'MODEL'> | HasSingle_MODEL | ((x: CanProduce_MODEL) => _MODEL)
export type _IMAGE = ComfyNodeOutput<'IMAGE'> | HasSingle_IMAGE | ((x: CanProduce_IMAGE) => _IMAGE)
export type _NOISE = ComfyNodeOutput<'NOISE'> | HasSingle_NOISE | ((x: CanProduce_NOISE) => _NOISE)
export type _AUDIO = ComfyNodeOutput<'AUDIO'> | HasSingle_AUDIO | ((x: CanProduce_AUDIO) => _AUDIO)
export type _$Star = ComfyNodeOutput<'$Star'> | HasSingle_$Star | ((x: CanProduce_$Star) => _$Star)
export type _model = ComfyNodeOutput<'model'> | HasSingle_model | ((x: CanProduce_model) => _model)
export type __GRID = ComfyNodeOutput<'_GRID'> | HasSingle__GRID | ((x: CanProduce__GRID) => __GRID)
export type _LAYER = ComfyNodeOutput<'LAYER'> | HasSingle_LAYER | ((x: CanProduce_LAYER) => _LAYER)
export type _SLIDE = ComfyNodeOutput<'SLIDE'> | HasSingle_SLIDE | ((x: CanProduce_SLIDE) => _SLIDE)
export type _CLIP = ComfyNodeOutput<'CLIP'> | HasSingle_CLIP | ((x: CanProduce_CLIP) => _CLIP)
export type _MASK = ComfyNodeOutput<'MASK'> | HasSingle_MASK | ((x: CanProduce_MASK) => _MASK)
export type _INTS = ComfyNodeOutput<'INTS'> | HasSingle_INTS | ((x: CanProduce_INTS) => _INTS)
export type _PIPE = ComfyNodeOutput<'PIPE'> | HasSingle_PIPE | ((x: CanProduce_PIPE) => _PIPE)
export type _JSON = ComfyNodeOutput<'JSON'> | HasSingle_JSON | ((x: CanProduce_JSON) => _JSON)
export type _SEGS = ComfyNodeOutput<'SEGS'> | HasSingle_SEGS | ((x: CanProduce_SEGS) => _SEGS)
export type _BBOX = ComfyNodeOutput<'BBOX'> | HasSingle_BBOX | ((x: CanProduce_BBOX) => _BBOX)
export type _RGBA = ComfyNodeOutput<'RGBA'> | HasSingle_RGBA | ((x: CanProduce_RGBA) => _RGBA)
export type _EDIT = ComfyNodeOutput<'EDIT'> | HasSingle_EDIT | ((x: CanProduce_EDIT) => _EDIT)
export type _SEED = ComfyNodeOutput<'SEED'> | HasSingle_SEED | ((x: CanProduce_SEED) => _SEED)
export type _MESH = ComfyNodeOutput<'MESH'> | HasSingle_MESH | ((x: CanProduce_MESH) => _MESH)
export type _DICT = ComfyNodeOutput<'DICT'> | HasSingle_DICT | ((x: CanProduce_DICT) => _DICT)
export type _LIST = ComfyNodeOutput<'LIST'> | HasSingle_LIST | ((x: CanProduce_LIST) => _LIST)
export type _INFO = ComfyNodeOutput<'INFO'> | HasSingle_INFO | ((x: CanProduce_INFO) => _INFO)
export type _VAE = ComfyNodeOutput<'VAE'> | HasSingle_VAE | ((x: CanProduce_VAE) => _VAE)
export type _GIF = ComfyNodeOutput<'GIF'> | HasSingle_GIF | ((x: CanProduce_GIF) => _GIF)
export type _KEY = ComfyNodeOutput<'KEY'> | HasSingle_KEY | ((x: CanProduce_KEY) => _KEY)
export type _SVG = ComfyNodeOutput<'SVG'> | HasSingle_SVG | ((x: CanProduce_SVG) => _SVG)
export type _int = ComfyNodeOutput<'int'> | HasSingle_int | ((x: CanProduce_int) => _int)
export type _STR = ComfyNodeOutput<'STR'> | HasSingle_STR | ((x: CanProduce_STR) => _STR)
export type _BUS = ComfyNodeOutput<'BUS'> | HasSingle_BUS | ((x: CanProduce_BUS) => _BUS)
export type _XY = ComfyNodeOutput<'XY'> | HasSingle_XY | ((x: CanProduce_XY) => _XY)

// 6. ENUMS -------------------------------
export type Enum_KSampler_sampler_name = "ddim" | "ddpm" | "deis" | "dpm_2" | "dpm_2_ancestral" | "dpm_adaptive" | "dpm_fast" | "dpmpp_2m" | "dpmpp_2m_cfg_pp" | "dpmpp_2m_sde" | "dpmpp_2m_sde_gpu" | "dpmpp_2s_ancestral" | "dpmpp_2s_ancestral_cfg_pp" | "dpmpp_3m_sde" | "dpmpp_3m_sde_gpu" | "dpmpp_sde" | "dpmpp_sde_gpu" | "euler" | "euler_ancestral" | "euler_ancestral_cfg_pp" | "euler_cfg_pp" | "heun" | "heunpp2" | "ipndm" | "ipndm_v" | "lcm" | "lms" | "uni_pc" | "uni_pc_bh2"
export type Enum_KSamplerAdvanced_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerSelect_sampler_name = Enum_KSampler_sampler_name
export type Enum_ADE$_VisualizeContextOptionsK_sampler_name = Enum_KSampler_sampler_name
export type Enum_ADE$_VisualizeContextOptionsKAdv_sampler_name = Enum_KSampler_sampler_name
export type Enum_Fooocus$_KSampler_sampler_name = Enum_KSampler_sampler_name
export type Enum_Fooocus$_KSamplerAdvanced_sampler_name = Enum_KSampler_sampler_name
export type Enum_AV$_FaceDetailer_sampler_name = Enum_KSampler_sampler_name
export type Enum_AV$_FaceDetailerPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_DetailerForEach_sampler_name = Enum_KSampler_sampler_name
export type Enum_DetailerForEachDebug_sampler_name = Enum_KSampler_sampler_name
export type Enum_DetailerForEachPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_DetailerForEachDebugPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_DetailerForEachPipeForAnimateDiff_sampler_name = Enum_KSampler_sampler_name
export type Enum_FaceDetailer_sampler_name = Enum_KSampler_sampler_name
export type Enum_FaceDetailerPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_MaskDetailerPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_PixelKSampleUpscalerProvider_sampler_name = Enum_KSampler_sampler_name
export type Enum_PixelKSampleUpscalerProviderPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_PixelTiledKSampleUpscalerProvider_sampler_name = Enum_KSampler_sampler_name
export type Enum_PixelTiledKSampleUpscalerProviderPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_UnsamplerHookProvider_sampler_name = Enum_KSampler_sampler_name
export type Enum_UnsamplerDetailerHookProvider_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerProvider_sampler_name = Enum_KSampler_sampler_name
export type Enum_TiledKSamplerProvider_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerAdvancedProvider_sampler_name = Enum_KSampler_sampler_name
export type Enum_SEGSUpscaler_sampler_name = Enum_KSampler_sampler_name
export type Enum_SEGSUpscalerPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_SEGSDetailer_sampler_name = Enum_KSampler_sampler_name
export type Enum_SEGSDetailerForAnimateDiff_sampler_name = Enum_KSampler_sampler_name
export type Enum_ImpactKSamplerBasicPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_ImpactKSamplerAdvancedBasicPipe_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSampler_$3$3Inspire_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerAdvanced_$3$3Inspire_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerPipe_$3$3Inspire_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerAdvancedPipe_$3$3Inspire_sampler_name = Enum_KSampler_sampler_name
export type Enum_GlobalSampler_$3$3Inspire_sampler_name = Enum_KSampler_sampler_name
export type Enum_RegionalPromptSimple_$3$3Inspire_sampler_name = Enum_KSampler_sampler_name
export type Enum_RegionalPromptColorMask_$3$3Inspire_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerProgress_$3$3Inspire_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerAdvancedProgress_$3$3Inspire_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerVariationsStochastic$6_sampler = Enum_KSampler_sampler_name
export type Enum_KSamplerVariationsWithNoise$6_sampler_name = Enum_KSampler_sampler_name
export type Enum_SDXL_Basic_Settings_$1JPS$2_sampler_name = Enum_KSampler_sampler_name
export type Enum_SDXL_Settings_$1JPS$2_sampler_name = Enum_KSampler_sampler_name
export type Enum_ImageToImage_Settings_$1JPS$2_unsampler_sampler = Enum_KSampler_sampler_name
export type Enum_Sampler_Scheduler_Settings_$1JPS$2_sampler_name_out = Enum_KSampler_sampler_name
export type Enum_Sampler_Scheduler_Settings_$1JPS$2_sampler_name = Enum_KSampler_sampler_name
export type Enum_SDXL_Basic_Settings_Pipe_$1JPS$2_sampler_name_out = Enum_KSampler_sampler_name
export type Enum_SDXL_Settings_Pipe_$1JPS$2_sampler_name_out = Enum_KSampler_sampler_name
export type Enum_ImageToImage_Pipe_$1JPS$2_unsampler_sampler_out = Enum_KSampler_sampler_name
export type Enum_BNK$_GetSigma_sampler_name = Enum_KSampler_sampler_name
export type Enum_BNK$_Unsampler_sampler_name = Enum_KSampler_sampler_name
export type Enum_BNK$_TiledKSamplerAdvanced_sampler_name = Enum_KSampler_sampler_name
export type Enum_BNK$_TiledKSampler_sampler_name = Enum_KSampler_sampler_name
export type Enum_ttN_KSampler$_v2_sampler_name = Enum_KSampler_sampler_name
export type Enum_ttN_pipeKSampler$_v2_sampler_name = Enum_KSampler_sampler_name
export type Enum_ttN_pipeKSamplerAdvanced$_v2_sampler_name = Enum_KSampler_sampler_name
export type Enum_ttN_pipeKSamplerSDXL$_v2_sampler_name = Enum_KSampler_sampler_name
export type Enum_ttN_pipeKSampler_sampler_name = Enum_KSampler_sampler_name
export type Enum_ttN_pipeKSamplerAdvanced_sampler_name = Enum_KSampler_sampler_name
export type Enum_ttN_pipeKSamplerSDXL_sampler_name = Enum_KSampler_sampler_name
export type Enum_Context_Big_$1rgthree$2_SAMPLER_out = Enum_KSampler_sampler_name
export type Enum_Context_Big_$1rgthree$2_sampler = Enum_KSampler_sampler_name
export type Enum_Context_Switch_Big_$1rgthree$2_SAMPLER_out = Enum_KSampler_sampler_name
export type Enum_Context_Merge_Big_$1rgthree$2_SAMPLER_out = Enum_KSampler_sampler_name
export type Enum_KSampler_Config_$1rgthree$2_SAMPLER_out = Enum_KSampler_sampler_name
export type Enum_KSampler_Config_$1rgthree$2_sampler_name = Enum_KSampler_sampler_name
export type Enum_SDXLMixSampler_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSampler_$1WAS$2_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSampler_Cycle_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerSeq_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerSeq2_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSamplerAdvanced_$1WLSH$2_sampler_name = Enum_KSampler_sampler_name
export type Enum_KSampler_scheduler = "beta" | "ddim_uniform" | "exponential" | "karras" | "linear_quadratic" | "normal" | "sgm_uniform" | "simple"
export type Enum_KSamplerAdvanced_scheduler = Enum_KSampler_scheduler
export type Enum_BasicScheduler_scheduler = Enum_KSampler_scheduler
export type Enum_ADE$_VisualizeContextOptionsK_scheduler = Enum_KSampler_scheduler
export type Enum_ADE$_VisualizeContextOptionsKAdv_scheduler = Enum_KSampler_scheduler
export type Enum_ADE$_SigmaScheduleToSigmas_scheduler = Enum_KSampler_scheduler
export type Enum_Fooocus$_KSampler_scheduler = Enum_KSampler_scheduler
export type Enum_Fooocus$_KSamplerAdvanced_scheduler = Enum_KSampler_scheduler
export type Enum_PixelTiledKSampleUpscalerProvider_scheduler = Enum_KSampler_scheduler
export type Enum_PixelTiledKSampleUpscalerProviderPipe_scheduler = Enum_KSampler_scheduler
export type Enum_UnsamplerHookProvider_scheduler = Enum_KSampler_scheduler
export type Enum_UnsamplerDetailerHookProvider_scheduler = Enum_KSampler_scheduler
export type Enum_TiledKSamplerProvider_scheduler = Enum_KSampler_scheduler
export type Enum_ImpactSchedulerAdapter_scheduler = Enum_KSampler_scheduler
export type Enum_StyleAlignedReferenceSampler$__scheduler = Enum_KSampler_scheduler
export type Enum_KSamplerVariationsStochastic$6_scheduler = Enum_KSampler_scheduler
export type Enum_KSamplerVariationsWithNoise$6_scheduler = Enum_KSampler_scheduler
export type Enum_SDXL_Basic_Settings_$1JPS$2_scheduler = Enum_KSampler_scheduler
export type Enum_SDXL_Settings_$1JPS$2_scheduler = Enum_KSampler_scheduler
export type Enum_ImageToImage_Settings_$1JPS$2_unsampler_scheduler = Enum_KSampler_scheduler
export type Enum_Sampler_Scheduler_Settings_$1JPS$2_scheduler_out = Enum_KSampler_scheduler
export type Enum_Sampler_Scheduler_Settings_$1JPS$2_scheduler = Enum_KSampler_scheduler
export type Enum_SDXL_Basic_Settings_Pipe_$1JPS$2_scheduler_out = Enum_KSampler_scheduler
export type Enum_SDXL_Settings_Pipe_$1JPS$2_scheduler_out = Enum_KSampler_scheduler
export type Enum_ImageToImage_Pipe_$1JPS$2_unsampler_scheduler_out = Enum_KSampler_scheduler
export type Enum_BNK$_GetSigma_scheduler = Enum_KSampler_scheduler
export type Enum_BNK$_Unsampler_scheduler = Enum_KSampler_scheduler
export type Enum_BNK$_TiledKSamplerAdvanced_scheduler = Enum_KSampler_scheduler
export type Enum_BNK$_TiledKSampler_scheduler = Enum_KSampler_scheduler
export type Enum_ttN_pipeKSampler_scheduler = Enum_KSampler_scheduler
export type Enum_ttN_pipeKSamplerAdvanced_scheduler = Enum_KSampler_scheduler
export type Enum_ttN_pipeKSamplerSDXL_scheduler = Enum_KSampler_scheduler
export type Enum_Context_Big_$1rgthree$2_SCHEDULER_out = Enum_KSampler_scheduler
export type Enum_Context_Big_$1rgthree$2_scheduler = Enum_KSampler_scheduler
export type Enum_Context_Switch_Big_$1rgthree$2_SCHEDULER_out = Enum_KSampler_scheduler
export type Enum_Context_Merge_Big_$1rgthree$2_SCHEDULER_out = Enum_KSampler_scheduler
export type Enum_KSampler_Config_$1rgthree$2_SCHEDULER_out = Enum_KSampler_scheduler
export type Enum_KSampler_Config_$1rgthree$2_scheduler = Enum_KSampler_scheduler
export type Enum_SDXLMixSampler_scheduler = Enum_KSampler_scheduler
export type Enum_KSampler_$1WAS$2_scheduler = Enum_KSampler_scheduler
export type Enum_KSampler_Cycle_scheduler = Enum_KSampler_scheduler
export type Enum_KSamplerSeq_scheduler = Enum_KSampler_scheduler
export type Enum_KSamplerSeq2_scheduler = Enum_KSampler_scheduler
export type Enum_KSamplerAdvanced_$1WLSH$2_scheduler = Enum_KSampler_scheduler
export type Enum_CheckpointLoaderSimple_ckpt_name = "AOM3A1_orangemixs.safetensors" | "AOM3A3_orangemixs.safetensors" | "Deliberate-inpainting.safetensors" | "FLUX1\\flux1-dev-fp8.safetensors" | "Sevenof9V3.safetensors" | "albedobaseXL_v13.safetensors" | "albedobaseXL_v21.safetensors" | "angel1_36224.safetensors" | "anything-v3-fp16-pruned.safetensors" | "autismmixSDXL_autismmixConfetti.safetensors" | "cartoonArcadiaSDXLSD1_xenoArcadiaCX.safetensors" | "copaxTimelessxlSDXL1_v8.safetensors" | "deliberate_v2.safetensors" | "dndMapGenerator_v3.safetensors" | "illustriousXL_v01.safetensors" | "lyriel_v15.safetensors" | "mistoonAnime_v10.safetensors" | "mistoonAnime_v10Inpainting.safetensors" | "noobaiXLNAIXL_earlyAccessVersion.safetensors" | "noobaiXLNAIXL_vPredTestVersion.safetensors" | "ponyDiffusionV6XL_v6StartWithThisOne.safetensors" | "realisticVisionV20_v20.safetensors" | "realisticVisionV51_v51VAE.safetensors" | "revAnimated_v121.safetensors" | "revAnimated_v121Inp-inpainting.safetensors" | "revAnimated_v122.safetensors" | "sd_xl_base_1.0.safetensors" | "sd_xl_refiner_1.0.safetensors" | "sdxlMergeheaven_betaM15.safetensors" | "toonyou_beta1.safetensors" | "toonyou_beta6.safetensors" | "upscale\\x4-upscaler-ema.safetensors" | "v1-5-pruned-emaonly.ckpt" | "v1-5-pruned-emaonly.safetensors" | "v2-1_512-ema-pruned.safetensors" | "v2-1_768-ema-pruned.safetensors" | "wd-1-5-beta2-fp16.safetensors" | "zero123\\stable_zero123.ckpt"
export type Enum_unCLIPCheckpointLoader_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_CheckpointLoader_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_ImageOnlyCheckpointLoader_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_ADE$_RegisterModelAsLoraHook_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_ADE$_RegisterModelAsLoraHookModelOnly_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_CheckpointLoaderSimpleWithNoiseSelect_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_AV$_CheckpointModelsToParametersPipe_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_CheckpointNameSelector_ckpt_name_out = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_CheckpointNameSelector_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_CheckpointLoader$8pysssss_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_MakeBasicPipe_$3$3Inspire_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_CheckpointLoaderSimpleShared_$3$3Inspire_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_StableCascade$_CheckpointLoader_$3$3Inspire_stage_b = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_StableCascade$_CheckpointLoader_$3$3Inspire_stage_c = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_LoadResAdapterNormalization_resadapter_path = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_CheckpointLoaderKJ_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_CR_Load_Scheduled_Models_default_model = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_ttN_tinyLoader_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_ttN_pipeLoader$_v2_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_ttN_pipeLoaderSDXL$_v2_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_ttN_multiModelMerge_ckpt_A_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_ttN_pipeLoader_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_ttN_pipeLoaderSDXL_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_Context_Big_$1rgthree$2_CKPT_NAME_out = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_Context_Big_$1rgthree$2_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_Context_Switch_Big_$1rgthree$2_CKPT_NAME_out = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_Context_Merge_Big_$1rgthree$2_CKPT_NAME_out = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_Checkpoint_Loader_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_Checkpoint_Loader_$1Simple$2_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_unCLIP_Checkpoint_Loader_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_Checkpoint_Loader_w$3Name_$1WLSH$2_ckpt_name = Enum_CheckpointLoaderSimple_ckpt_name
export type Enum_VAELoader_vae_name = "FLUX1\\ae.sft" | "Stable-Cascade\\stage_a.safetensors" | "blessed2.vae.pt" | "kl-f8-anime2.ckpt" | "orangemix.vae.pt" | "sdxl_vae.safetensors" | "taesd" | "taesdxl" | "vae-ft-mse-840000-ema-pruned.safetensors"
export type Enum_AV$_VAELoader_vae_name = Enum_VAELoader_vae_name
export type Enum_LatentUpscale_upscale_method = "area" | "bicubic" | "bilinear" | "bislerp" | "nearest-exact"
export type Enum_LatentUpscaleBy_upscale_method = Enum_LatentUpscale_upscale_method
export type Enum_PatchModelAddDownscale_downscale_method = Enum_LatentUpscale_upscale_method
export type Enum_PatchModelAddDownscale_upscale_method = Enum_LatentUpscale_upscale_method
export type Enum_SamplerLCMUpscale_upscale_method = Enum_LatentUpscale_upscale_method
export type Enum_LatentUpscale_crop = "center" | "disabled"
export type Enum_ImageScale_crop = Enum_LatentUpscale_crop
export type Enum_ADE$_UpscaleAndVAEEncode_crop = Enum_LatentUpscale_crop
export type Enum_ImageScaleDown_crop = Enum_LatentUpscale_crop
export type Enum_ImageResizeKJ_crop = Enum_LatentUpscale_crop
export type Enum_LatentUpscaleFactor_$_O_crop = Enum_LatentUpscale_crop
export type Enum_LatentUpscaleFactorSimple_$_O_crop = Enum_LatentUpscale_crop
export type Enum_ImageScaleFactor_$_O_crop = Enum_LatentUpscale_crop
export type Enum_ImageScaleFactorSimple_$_O_crop = Enum_LatentUpscale_crop
export type Enum_LatentUpscaleMultiply_crop = Enum_LatentUpscale_crop
export type Enum_ttN_KSampler$_v2_crop = Enum_LatentUpscale_crop
export type Enum_ttN_pipeKSampler$_v2_crop = Enum_LatentUpscale_crop
export type Enum_ttN_pipeKSamplerAdvanced$_v2_crop = Enum_LatentUpscale_crop
export type Enum_ttN_pipeKSamplerSDXL$_v2_crop = Enum_LatentUpscale_crop
export type Enum_ttN_hiresfixScale_crop = Enum_LatentUpscale_crop
export type Enum_ttN_pipeKSampler_crop = Enum_LatentUpscale_crop
export type Enum_ttN_pipeKSamplerAdvanced_crop = Enum_LatentUpscale_crop
export type Enum_ttN_pipeKSamplerSDXL_crop = Enum_LatentUpscale_crop
export type Enum_DF$_Latent$_Scale$_by$_ratio_crop = Enum_LatentUpscale_crop
export type Enum_DF$_Latent$_Scale$_to$_side_crop = Enum_LatentUpscale_crop
export type Enum_DF$_Image$_scale$_by$_ratio_crop = Enum_LatentUpscale_crop
export type Enum_DF$_Image$_scale$_to$_side_crop = Enum_LatentUpscale_crop
export type Enum_SDXL_Quick_Image_Scale_$1WLSH$2_crop = Enum_LatentUpscale_crop
export type Enum_LoadImage_image = "000ba971de46c1b075f08af87758b6d2b791ba5d.png" | "00116c3de33f3012c90bf7d875c1ef4f0c44ca09.png" | "001fd93909b4156d23f798b11c28d531ad253673.png" | "002ab2e8ba7c17acf29f5976b69de9255c823c75.png" | "002b38d74d256dbcba63ea972987b9a71fec3c0a.png" | "0052d194f729628a7113af5a4416ca49b3e2a18f.png" | "0096440b8160c009e78cc9df09f94dc585984d5e.png" | "00a54030bacc9e47eb38eeea3f4129400029b6b2.png" | "013bb17560c93301fe544edd9647531b709823ea.png" | "015a798674b7a87dee66034fde02a57a2d04bfc6.png" | "0161352ba35f3a6b8738596fef4cb2e39f4f5a41.png" | "017549a19dc543d3fd6ebe309d6ee39d7d7e12d0.png" | "01f9df436d5dc3008de7f8d78baa64285a4a3429.png" | "0220d0da5cec73e5f5221f7d8ca056a545621ce7.png" | "02240cec8cdee299440e65317b38bf9a5a32d35e.png" | "0229755b5e9ad2748898aecd345c672d1795e192.png" | "024278f8e61aee0e9ca9bc6bca33709495deeff9.png" | "024c293c471dd30f270694a1538b5acb0a44cec6.png" | "027664a8d0cfbf1b1a369fdf9a5b22c86677ee1b.png" | "027db46bd39acf00ccd81d780d99fc59898695ee.png" | "0286a2e67471d644b1ce50168d39f5e885052a41.png" | "029ddad4f8aec4343961d6782f5931a5a3bcc299.png" | "02a83e7a682cc81443457977ecefeddbba1f43ed.png" | "02c30357ede603ce6431fc4b33c3b595636fc6c0.png" | "02d800dca72f0711adde685edae1fd8011b0c2ed.png" | "0308a82daa2d55c9336119a0d94ed88404bfb5ea.png" | "03122136d622c2eec32365a8269ad3f6886b5578.png" | "035d3251057b0eb1131db52d3cf8f515f18efbd9.png" | "0392310d86cdd3171ba54576719a16e46d89b36d.png" | "03c62562dc817eacd56856fa4dc8dc716f8b5f9b.png" | "03f63093ab4cd14218fd755ddd46a6185c40959a.png" | "04011f1c8c97683329f98435d16f385db9a84fa9.png" | "0432440a2eeb88db2dee3a7ad7a04a67c7e91d92.png" | "043f8e83600212df4d976b5ff9c6ba257cc1958e.png" | "04683b0e7ced473d4bd1d051623babf7ab6e10d2.png" | "048a77fd0632083f4629b0376519f3effa8e5d7a.png" | "04d274f4ee7ca4141f9cd663b83913b4f560ca5f.png" | "04d4ba28db64c0c221484aa5029ddaa7a75575b3.png" | "04f3416c939dfa2cf4d6fae595b92c0cbe76a520.png" | "04f8a9d6296200e15b6cd723b5e034375bdaf1f6.png" | "0510e53e8b67d831a245faf38055adbf6512509d.png" | "051a931a0e02b524789b223420ea729ffc7040d7.png" | "05748df0f5c61164e3df77984e2d30521fe4f219.png" | "05888477441d656caa5be0adaeee73b370606553.png" | "05e5a245d8b627f9d6dccb37b80cb3a3bf112efd.png" | "0625b809aa12e56313a333c96dd8f4ad4cd4bd4f.png" | "063578bf30ab1f28a133f20103952505fdb7cc7a.png" | "0663d1466d311018cff6ca54397aae7849e59610.png" | "067aa86fc69c710743a0c791f38140cc20f4c773.png" | "06cf0311855ca6748955561e7cc4d352e8a2173e.png" | "0777cbdad691dfb644a5bcb748594ae882b9c25e.png" | "07a30425c127dea0a31bb8d913c869c615c15c98.png" | "07aaa4db32b3fa0cdd85ee92f3cd8a26557f5dd2.png" | "07d56e6c10984993f2687ac577c1e7ac8e58c83e.png" | "08274fc9b0e6ebb74f364e54ba254fd19e8c7e2b.png" | "08722d58baf4816d9655630779f9732573ccde25.png" | "08d11c109edfdb6178fca4d00e80d82f8e5259ec.png" | "08e11cecf023226ce4a6f1d855ce19194e0b2536.png" | "0958b8802ba5ce4fba0262d7d6ab4065c8df9195.png" | "09a156ed13e30186d0d1d354dd126c5a8e13dc7b.png" | "09a89b60dd18574000147a68a4882dfeed263704.png" | "09b0d7e58d4c4828a181fd5d12ddb9cb0f8cbf40.png" | "09bd2df70547c20752a293abd0e1780df2983212.png" | "09de17e2c962c3904487931d1bafcfc70d9f0438.png" | "0a071d0383d588a6390eb1890946720b09ea636d.png" | "0a166abcca886e35c830dc9d2da1c1ac104f30f3.png" | "0a1ab8118200ae047f8fd2db0b9daba1bd7c2eb2.png" | "0a48f1ff039dd4ea8114689ee40b4e7eb2e0946b.png" | "0a9918ba667eb73cec75a562d8fc6010cc09c36b.png" | "0a9e4d129e6b3c5401da3ef549808a6b75013a0e.png" | "0a9fae5c6771b37fa6582760bde38436b765bf4a.png" | "0ab965cd325f434e82245d75dfccf58d56b9ee35.png" | "0b31d24f40a043e681ae25c0156039ba35bc41ff.png" | "0b34498e12b211de0f4e83ee2ed97299ebcc4789.png" | "0b35043fdfd010cedd0ac1c6f4503560d70a2d28.png" | "0bbb1718e982995a36624363e375661236a8f57b.png" | "0bca6d2a24620dae1e67cf5f8a07515917e69bba.png" | "0c3ad1b3a7dfa55493c868015ebaa9163434445c.png" | "0c42fa6554051d564dee8b8912ca44ec7ea60633.png" | "0c46b51b56306658796daaf6feab962b63e1e970.png" | "0c47d1bff2b1bed800bce0e9c064f2c87c80b1d0.png" | "0c4b482602460a27d014d9bd1309c23d74ddab82.png" | "0c666c52d2f9f7c1663cb38b45d7a378d00252ae.png" | "0cef13ac6bf29a791c240e381de9f10ed993786e.png" | "0cfad8173d4a5e85cdb5d4beeddf5f5c41c745be.png" | "0d12acb652f1537c0ddd34afcd21f3855b8268b9.png" | "0d162cc4443154a70bb0340a95f35f359978107b.png" | "0d539bf558cc0f2f6f0cc2ff2586a0724d8741f1.png" | "0d56a5ee9197c04aafa866efb8e3f0928d72737c.png" | "0d6772672f8051be04818b017a7a61cbf708d85d.png" | "0d6cae11a967fc8869a6349c4abf815e53a4d7e1.png" | "0d750fe285378bb8fd7f671b6813cefbd9ca2f68.png" | "0d9d32d1e7cc040e8bc1453a1c5ff56453f06272.png" | "0da002c1e86256be86c1ef31f9ce4581bb8d5dd5.png" | "0e018c4626b402e0b61a9139cdc1755dd9f1d0a5.png" | "0e11c7eff40ce9d018ec44553c8efb552b85904b.png" | "0e92f6f12c099bbb80889078aff8940dc78b64ab.png" | "0ea2c1c05ca1d5303139aa11e29f159a702465e8.png" | "0eba0f777e74f97e305fd813d426b48a061a8484.png" | "0ebad3562519bc6026dbf3f16f078e1ed8fa4ec8.png" | "0ef17b447cb567d8e30d00559338352cd2bc2b82.png" | "0ef386ca2e3d148c6767fe0cd8b55f04b18c569b.png" | "0f0470c5256ae63805a1c81c8b55cd263d8654f8.png" | "0f261bb648e8da770939bdaa656c3d54925af6a2.png" | "0f5d088b58a17bd8235a1f06e595ed24ac37760d.png" | "0fad6c64e9068be0fbf64a6404885447df06db52.png" | "0ffca95c9ed921647260e2af7789d665b5aa6d78.png" | "104a8ac9e8db90d98d04f29b7fcf2de79dcfa68a.png" | "10e49c8a1def1ef0d82bf301efff644b10d1ad59.png" | "10e6975ef564ab2a2a28cda49816068fc8b211eb.png" | "10f26d112e01ce80035a05ed9cf3480852cb58b1.png" | "10f6cb6b087cafd8630551b79bc8c3d6dcc753de.png" | "110ba9030cea18733ea19be13bfe8c14065295dc.png" | "1185edd9d55de30cbe4dc8372a786b0c19ebabdb.png" | "11b2dcdb5fe3fd0fc15cd4b903eba17c6ed0adf9.png" | "11c17c6b0c8f4dac06191ea3de661f4a542d7267.png" | "11e7d4273134aae4820aad5a73deb8f6461a0464.png" | "1244fe7c2d0cca10a2cd851e81174a8d9feb37b3.png" | "12679224b510a5b1a5db367bd2bd6fd00d478f8e.png" | "1274cc035648f67ddeca6e3724cbc8d748964774.png" | "1287109f9f62290f9c8a55d5f79ee5536b2f523e.png" | "12a28c96060648c8e1592457985f571e44c3de3a.png" | "12ab18183b0e85a48ef28a3ffabb9d2557763d28.png" | "12df6f5064fab3cf023267552519342731af0538.png" | "12f91f515fb7d0597a83972177833f2272a8db2b.png" | "131034f4c6a82681458280bc549d9de4408ed166.png" | "131f6a848a006f5804b5dbe7e558dc7ea6a9e360.png" | "136626d208c50857dadb7b3cbebd169912b97dca.png" | "136b00e2f7184dd795f37212e537455201b4ccc1.png" | "136efef2146f86bddc6f05729cef117859efae08.png" | "137d2805932a19aab42c58fc75e3f3b4c411a0d7.png" | "138135b29760465cd303762256ce7be4e10f83f9.png" | "13b45b0cf794c7f6a550e409c3f116697887c2d0.png" | "13e518df8cb97e20ea394f407a2f65ff656415d0.webp" | "13fef5b21785d41fa97b55916f29bf9a1fac22ab.png" | "14133f4ec39e075b49b5afebe4e1cc00bb79bcf2.png" | "143f3718543fbd8d1c7a3583185a07f49062d35d.png" | "145573035b097084c57d59c6b41fc2d66a59f115.png" | "1482deeadfd1a29daeb72929f60950bd3646769a.png" | "149d478be74d2fdc0d8c62f5f8b74f9d15b8623e.png" | "14a7e27f23f03e8c85135294b42ddb3f88c2ee1e.png" | "1506259089b9367d67d86395bf8a61030fe5c8a1.png" | "154190870562c4c74144c4c61c49668b597c4f1f.png" | "154330ab2afd6802d0fcfce62d0a460e25750e8d.png" | "15805e9240ae27e7a37e95c44683961ea3b57254.png" | "159f33d266bc63d27abdc2d9b82444b47c55510e.png" | "15b8b61211870917b04523305cac357439151032.png" | "15f664f442fffa0f9e719a904634d1e439cb52b1.png" | "162699f5abd4b29d83d7afe2d3f6ef16d347721e.png" | "162afe84046d51a688eec86abd1004ae300586a3.png" | "16535b08b37b0309ea48961f0a4d53542abd5011.png" | "1670a5e1bbb8563a43f496b7d45104ff8abb7d70.png" | "1677e298d4838b8b453cada8e65cf4ebe7e08457.png" | "16b8c29c4439c9c408cecdfbe5abca0badac532c.png" | "1741fb8d759b45f719cf01c8e94282d3db289fc8.png" | "17470b1de754f7e426998f82b504135a527a12a0.png" | "174edd33bec8e48ff927ec09c6d695f693d1fb64.png" | "1788001c47cb1d555d7cc059afd4b2a6a12327bf.png" | "179a2234e432b281cc708e78d04ffaeeb7363592.png" | "179d0fcbe60b66a247a3660f92de03e3b23c1dba.png" | "179e5c631d8fbe97316c64f0780ca7dbbd448a3b.png" | "17c241194cfc0feef0ee2d775419b0d1b5f8edbd.png" | "17f545e040c3a5aa3f2cc2aeb346dcb55ee81821.png" | "1816e277947fde568d130ddda29750e73ac1a629.webp" | "182d1adcae34cf20c9ddaf245a4bb1ceeb8b5bdf.png" | "182f9f14ab29ca743ec9b1d765ae7cf49af624e9.png" | "18414e230929a3554b1199988ec60b262d1f0025.png" | "185aeacfb8f03c5cec9fd2bbf346f6463856e8f3.png" | "185f28e0be8809ddef1481c816fd39b4ed213c62.png" | "18659aa444967ada6a457ef1cda7a7c7429519f5.png" | "18a3ae49cb9c0038a430d87c8d6e65e1ec2b2c42.png" | "18d8930a53b848580b2bd5bbcb98c592ce292821.png" | "18e726bf7776be9f98cb4eb41567d5d91c33db08.png" | "18f2ab3855e7165d19dfaadf9063c87890bcb19e.png" | "18f858e223b2018a260d80f0f724e3bb808abc02.png" | "190f5a8413fb2e9d84ec8115d5e9d72f78f94db0.png" | "1953f52062e1e7600bcae0d5edd7aa6dd2074901.png" | "19708996cd47b9cf8bcaab80e2ac1eab6612ddf8.png" | "19a179cf1c6b6c978414531606178ba4b8b43408.png" | "1a05bb6527f3a708da957e48a7866146eb034d4a.webp" | "1a263945660e31abe05ae25e74cf2be7abde6b60.png" | "1a377fe9d00b5da1d0166a1b1ba3ee7cda7abf4a.png" | "1a65e03043aca9e29621874b3fd137b9fb2b2683.png" | "1a85a5f91835383aee1e9fbbf77b092c9c53ddbf.png" | "1a923669dcdd133f7369e0e274793ccc856e69ce.png" | "1ad290c6a995fbc1198febe54cc1d7c9ec0c11eb.png" | "1adaaab0392d8e78add8b3619327ffca857f452e.png" | "1adafdc27f480f4a4626bd846cb76b3a86bc9e3c.png" | "1afd6b600e871f87d86e65b6e335de19a7756405.png" | "1b04ae64e62a11c501ba48eeac30e07032267d0a.png" | "1b09ae077387c236cb05551f0ea7929d521d34b8.png" | "1b14cf084618337eff9cbd33203bc4c13b4668c8.png" | "1b1730b76cb2a874f23bf6440eeb2a548a650f4b.png" | "1b3b40a10482e392a36610193b5ede2b53f8ae53.png" | "1b3cfa99fa7a30be6c515d4b39c8365ef683d4ad.png" | "1b49ae711039b490639c0e87e5c79d28e3128c71.png" | "1b9512065b03555c2d9a3c9220043711d5e63cc5.png" | "1b9a835ba04ec095d7492e04896199b9eabadd02.png" | "1bb6744ae5bfd6619efef926e21334f09ea1485d.png" | "1bd394c0252a623428026368277662695190f372.png" | "1beda7cba8cced3e0a57c9fa5828d8337d8f01ae.png" | "1c1392fbca883eb5febc93d17661c61ced67fdd7.png" | "1c28f9672b901205747b13e6e04b96ea3e4ccf1a.png" | "1c2c66c594833049207e6afe5abe3d411b1e3616.png" | "1c5f8b46d41c072c42fa86ee1c3832d86c1f9fd6.png" | "1cad09fb035dc4a82ea56195d1bdbc8df5dbcdbc.png" | "1cfd5cb31c8afe6980574b16b9b1f0e04ef245c5.png" | "1d25c56bf29b1ec847179accca7a31e7619ad591.png" | "1d4336013d0961707b4c898d5f247ed0648beab5.png" | "1db0d17da8a519d7c2080e0bd68f2dc7fe856c94.png" | "1ddd47785541e154596b984abef8a4c240d79a79.jpeg" | "1de166d66db53221a8fa7f3e607f6f0152f1e639.png" | "1de29c4e5b3174a62d53df9cb36b70e3dcdb8614.png" | "1dec4e67c0b0aaf5703a825e5f308b83671b97d3.png" | "1dfac933a817a86e62ef7b19e257bb6de7d9d457.png" | "1dfb3b9fe4ae6b1c51b6ac891755f8590cb0f433.png" | "1e080ffce73598375fcb8fabe6524dfe750f61ee.png" | "1e195fda27734978f1a925cad942ff00fc6bd225.png" | "1e340c01821e980d90c84599190307fdd4ccb94d.png" | "1e3a4695e201632e249ef5ad86a8aa7f44cad494.png" | "1e75d065b723ab890b76e72f93647269eaeceec9.png" | "1e764bdae906f5be3a275d6adb91e43fe0687625.png" | "1e7e87bfe2077f8f7add58ed917b4cd33a076189.png" | "1eab32839858452c5b4364f99b462603c87da5bb.png" | "1eceedf37b756e07ff61ce276b881938d023c6d9.png" | "1ee568dd7bbf82e728d375011333e4733ac647e0.png" | "1f0edbeca21a918e7cba7ea3ef7758811526989b.png" | "1f3ad3bf0a8cd3ceeee0583383f69112cd1eeb94.png" | "1f3b8440bfc1d449517e97ef68cb39e8d43e16ff.png" | "1f4000f81c56726c1e16a93dcc8df5a3691d9c7f.png" | "1f57e3d5886a003e34e2d0ec38d2f9c5244dfbd5.png" | "1f69bb39545e980a0e409f933a6827cacba2ae03.png" | "1fa318728aae648415dd8645cda7e28e41a350d8.png" | "1fa60fbd23db0aa9828e2ae0ec073c772c09c669.png" | "1fb7d15f4c5a767dbde2908f4691fc547fb8a3d7.png" | "1fcddaf3b056db3bb92e8585f9ef793af468f35f.png" | "1fd4601e29bb253b9078d40ac79ea43bf6f24cf3.png" | "1fdc79dca05a4bb460115b57fab1143d85d6d9d0.png" | "1fe0acffbb63b002fda744a176fff95de8fb1ba3.png" | "1fe61ffba4f16663141375b51d068e198b2e595e.png" | "20082ba4dd2fd33599a1d580dc496792b0573c17.png" | "201ef1f424119b2b0b814db7919f3daa338c9475.png" | "2020b5dd540f642465663affb261545aa94cd3ab.png" | "2021b9b98105fc20850d09be1e0c8437cc1a43fc.png" | "2037b6d3785434615fb1202325625ebbee4a65e1.png" | "2041230bc0ede4b4e7727979bdf3ad8ccc49c9c4.png" | "20d5b9f9e228f58deb91a25d10716cc6f95343a5.png" | "217dc2411650d11d7b555576c116eb0011eeee55.png" | "21c629853c572d6169e45a4cc03fb80269b519db.png" | "21d540ca7594f457f989023f884d425502f23b76.png" | "22289af3d733bf157deb9578b2d7312d2af67c2c.png" | "22537299966128a7779e19ee24ecd6cc93cfcf19.png" | "225c877c04a8207a61b58d6b87a7707c2e1632d0.webp" | "22888d12810ec343a94c8eaac32df26b9e43f0e4.png" | "22a029f7e9888a880ebd3fca2e481742e60bc751.webp" | "232e6f5cffff45bcf10b7ed8b08378e80d54e43f.png" | "2346c529c27e3bb2512b71ae41f6a49185e2057a.png" | "2379efb12f8e0f9305ea410cca35392c4cf3b7a7.png" | "24293c102527620e27380e8eb6151563b499c810.png" | "2445dbd21566faa37e52249c9d5993dc89d1e2f3.png" | "24855b8d2e70bd955a5465af2190fa5c866e0069.png" | "24b743d1b4b1091f8495eeed22c9a0e4e01722e0.png" | "250df43a07fbdff74148048caf59b5184658ca56.png" | "252f7c75795b9aff2a5424baf0fb4fbb0b457021.png" | "259745fab318857a364b440db729c51a28d5418d.png" | "25c173fc30c859cef0bd5fd754d4ecd0d88a74d5.png" | "2635f1e6157eee0e502d14344bdd7efe8e405c1e.png" | "268a5003fe9fbbd3d8bc24344faecefb26cf3b78.png" | "270861098d3c6052ebdb8f30c73f96f19bc7eb9a.png" | "2709dc43a88eda2e14de85d975446567207b263a.png" | "27108478e0cd631783eec923c5d7d90651f77340.png" | "273ad73180e1852e3145df12315fda2023ebe70e.png" | "2740d937bf8929e25e5fdec335f84dddfa1a97d0.png" | "27839fa19c1cdfa60d82f266cadae2c63cb27533.png" | "27d2aa8e3e4ccaa007135bee0a317e27fb60201f.png" | "27e6f3dd2a8d74546ba93d04024b7618f73a3d3e.png" | "27ea7632e7c390b01b56b596e079c13305d04db8.png" | "27ec06eeb2ff9b22d281382b5b6b5c9549268346.png" | "280c7a9fe7db73ce893d294bd65fb59404581b34.png" | "282ba5e8adaa9076cbae4064265aff356c9d8d02.png" | "28609e1964e0ac810c85df6411991c6d49bd9751.png" | "28c83fb755935bc0030d6748c4deaee2e58c6b4e.png" | "29306719cc24710aa5414367333f872dbf313f6c.png" | "29369a0005a2a9732ec5ffebd338094bca4d4c3a.png" | "29da1d8265ddfc2aa5e22393429a2b06f00886e4.png" | "2a24f507e8a7c90d1ea32fcf83645c59397fbe33.png" | "2a50919a3cf163adda599b879c28fd86aaec0875.png" | "2a7597e9db8a9e0ad93a4ef9820dc1a55a4162b1.png" | "2b10ef27891669b4cdc1f41c7c2c1e62b1495569.png" | "2b130670b2340a84fee6ce9d032b885a8363de98.png" | "2b1574d9de398ffd4da51f98cce725db1cd0d659.png" | "2b2e3f4ed2be1936c1926d33d9f95de2afcdaeca.png" | "2b4b0a0f16687aea4370b1218776bb60ebe7b902.png" | "2b6c71ab6a2dece2f24eefcf70264e839fee2a28.png" | "2b814726348cdf5e7a87628250d324740bbb4953.png" | "2baa746c1c0c051551e875692e19f677764dd0bc.png" | "2bb88a763ffa946266e73a324d30ae89d5cc52fe.png" | "2bc713d66e898ee83d5cee9ccdb6b60a633c9b43.png" | "2bdbf076839b29896d339b59d88043cc5801c2db.png" | "2c05aad93419c00275e31a9425b3728cdccdfbc5.png" | "2c21585a62b0f755e2ec91a74e2aebb5458c1830.png" | "2c5d833a4eba934759da056a3108ab1dcc004380.png" | "2c96b69c3c8255d3086cb44387f70da57580a4a2.png" | "2d0d2f68cbb4bfd2b145f0576d5b5f8ab3a04cba.png" | "2d1f5078c49c9a4800f899f0023053fbb8e262ff.png" | "2d3657a6e81cb241b8fb2ba427f44e88b2aaae00.png" | "2d5ddcdb0e8c388488b4defedb7fc3feec57b3eb.png" | "2da2940ceafc65228dfd8b66459fd3f17e60c8a0.png" | "2dada23a171830798e03ed2392f6eb52fbafce46.png" | "2e1d01ca7380f86859b55027549811f75cdab0d2.png" | "2e2035631cce2987ab041c7bb32f2bafe87858dd.png" | "2e26e19290fb2265ebabfb88e4adfa81dd546343.webp" | "2e2a3f22ed9f5cc86464d2897ffeb3f29481ac1b.png" | "2e9bb866cbedd03ddb8fbd129f3453d5b0f14542.png" | "2ea585fff2b5e74dec939f73fef54cda176021b1.png" | "2ec721eb0b1a3e87ef3ee822fe5ec51fc2f83c6d.png" | "2f00d0e47bdc253322df1e8adebd5030673b3f1b.png" | "2f03a2704ea7977c41cd91a8a2347e27a11136e2.png" | "2f1a587cfb34f57e9f39cf3e6b14e5e33dc183f4.png" | "2f47c5fa3aa0025eb11afb4a9293b0bd6f16493c.png" | "2f68b451f71159b4083f8b4bdf6c851dcb9bcb01.png" | "2fb1ba99a58b0d9bbdb3e06c42609917a540a56f.png" | "2fbd9c96c8dc9fa4d57f5e2f2e23058b986ae1eb.png" | "2fd3678a8ea96456f68036e659aecfb054e85b1b.png" | "2fd9d69a200dbfc9bb79edfdc608ea753d4f81b1.png" | "2fe81dc5ca6eec75b6b18b382e0f3ea9c63e759d.png" | "30034e0654d3e61198df8b5eeefec76231dc5c2c.png" | "30122d2c77912d8bb9899f6adf5d457468e9bf44.png" | "30305dbe5be508ac2e520b35f1070b15e99b6107.png" | "3035a55fc42bc55a6c995b510785c3213b42d434.png" | "305b1cbc03735c6502d3beae6313e94a8437c60e.png" | "30825a1452bad9ea8e61a061991f55a96a07d1eb.png" | "3090c7fc7e0bec955e8bb610c8dfe5d9cd198aea.png" | "30d24d6f64fd33de7665c6862ac184a3cde5e91a.png" | "30dd7fa32ca4cc3cb39acf7454bac34c574c2434.png" | "31299d781b0e0ed888d6f722367c6db092d012e5.png" | "312af8cae34417e178bb73c27972d43933b77297.png" | "31542fce0ed97022ab096ab6055ddf43782f1d29.png" | "3190763574b23f2dfa1f1ec1fa101d7ff75bd5f1.png" | "31ac42c22e7ae0edf1a8ac64e8425d6968e87c75.png" | "31b002f244cea3b413d4a963463521951bbdc459.png" | "31b438e94c509cf46ccc9b2c0846a49dc317e7f8.png" | "321991363df151a440874d5db6861c09d1eedb2f.png" | "3293b136ad3e93b6797f3b32bd90545e65375000.png" | "3312023531c0a8bb670d4b2c1ad9c285898f6f87.png" | "3312fb2d1f0146cbbf617cc80278b58e6f594a88.png" | "3365e74d3dc261d675a03dfe41ff827cc61f66cd.png" | "337cebce3b569862c6045cb6017a4ec205ab1a5b.png" | "338826ecaa0453f26da0c8ba4e0d9d9492c47010.png" | "33914fb65dd99708e0d112579bc47220af346bd3.png" | "3409c33837a6f815b825b4bfa302f6c3cc42b223.png" | "3425809b44421ae93c458489c7bee2b7e951434e.png" | "345f4a0c6777940e2d594118118f6566fa9ffe89.png" | "3472e483c34884855bc6ba9520f7a19f2bacedd7.png" | "3477acb81c523a976fd2ce565f0a1b04f7ffb837.png" | "34a010fc2c48c1f4c2b9e0bf5a9184cf32ae2f6d.png" | "34a50641f8626d1119f8cbd061206df511b6956a.png" | "34d815fd8baeaf71b3ba8178955d24f8eafb08c3.png" | "34f01b58ce3481533373d54176f777c8c9298582.png" | "35015c38d485abe35ff43de3c2df6a6aed64ca9b.png" | "3516621fd74137f60e8b48c2b33cb85e6f4bbc42.png" | "3516d396279827452ab5d1ef28ac04a0597f9b0d.png" | "3541e260dc0ca177bffb73cc30d7f7aaabf1c09b.png" | "354765a59446780b495cc42d0f20d153cf82786b.png" | "355f1f3f44f21dee2960d8005db2b59cdc46c0c8.png" | "3588a814de3743fc6df0a890f5fddd843e98bd3c.webp" | "3593dac4fcf80cf11b753ae14c88011c1877c064.png" | "35b712db1fda1beaee66ceec199576f7e8a42cbb.png" | "35c6721562a8856e2a230b844f9540c6064d2fc9.png" | "35d66b88654882888dccc6b2ddbeb03d53bd3b7d.png" | "35da4d74838392e9ba918e328e780b0cbdf261b2.png" | "35e3749ed49bf872562dbd52ca64946620500382.png" | "35ee48f40ead86a238e3d6a47a87f9cb9c4e9c4e.png" | "35f44c59e9b5fd2e1927e8ee1eaa8d9d4eb38b40.png" | "3638fea770d8e58c645ec8c54f7adaf4e130af9f.png" | "36650bc289a7d2d3e189211c8c72c2e3d72591f7.png" | "366dfe1b96af5b025d908d01305d25c1c2a4fa45.png" | "3689f921ba820ae6af85b37a450ae552a7528e09.png" | "36aab5c4924296d845466ba0edf81639dc91b281.png" | "36bb80dc249f0d76056b3f104e898755b7324c12.png" | "36d16cd491c8d241701a646c9ebb2df3a4d96a92.png" | "36d63b650371b1e8624c01052b2c9328a009ad91.png" | "36db4b733a084cd0233a484b2ce2dc057aca2ac7.png" | "373b68dd2b175d80cfadda8fbedb2ea021a0c984.png" | "3746b66b30de7f38486596f6edfefe2520e2e8bb.png" | "376a0cd7949eedbea371da51c29b9d4175def74c.png" | "38091d0e911649615311786fa97d67c027a132cc.png" | "3816efafe88e1f3b73904f077b43df2f7dbdac5a.png" | "38c2b7cc16181976f802f9691ac9e2b0739d5098.png" | "3985f1b718197a6ae6e9692176f79719aef21b10.png" | "3a25f34e04b857ffe87b0608eceb035b58fd6c2a.png" | "3aa92771c373f8c12939d61f8643d8958e76a6b0.png" | "3acb9751b449092364d19a8989fe1cd873b5fff4.png" | "3ae68817485dd7e2ca82fa020da4b1f8b9093224.png" | "3af8e51ecfbd74137a59ee1cab75db6dc285d5c2.png" | "3b001aced259ecc1984f3fe366572ed64f433962.png" | "3b2bc81a3afb8d1944a3da10e3504b37680c4c7f.png" | "3b435fc96af474c5346add62af9a08f83ea6dcfa.png" | "3b6479da805f499e566dd3e7d56e153efd56db95.png" | "3b7e7812699cd1c5453ab12c241f54d1de60127c.png" | "3b954a7dfb4da8aef24edf99a678468baa7731c3.png" | "3bcd9a162eb794c4f4d73664b78f84baa8c4ed74.png" | "3bd37b986938a6f6edf282e5a015c28eaea1e7dc.png" | "3c2381b12270943cbf231ceead4dcc8496899d69.png" | "3c6a80737481243649d9f670917e2fadfc1c1f23.png" | "3cbec3583b185ec7025ca3b84c06de6c086d56e8.png" | "3cccef5890cb65c7724ca5cfabd6a86c2433f1f0.png" | "3d222270056d94880801278a2cd74911a3041595.png" | "3d2853147256fd90a96a28c6f0e88ee92dc12c59.png" | "3d5b20708aac8b5a6b33be412b9dd1088fca4559.png" | "3d6d6fbbab8249978882063aa4818218d1036bf2.png" | "3d84b0456a85cab774b585c702607233703f9bae.png" | "3da8dffb33b5e94cf306934ec1be53efcca07f31.png" | "3dfd3b2d2e38815400f336de2c72cfb7093d7769.png" | "3e12447513cf31933254c53cabd1e9e2592e32e7.png" | "3e35b0b83e8e31b5c690a2bdd15d1dfbeba0b26f.png" | "3eb7cecc8fe06f6beb0930afd24d20492bba2a44.png" | "3ec39fe78a698e44b6c2cb691fa0622c9b872b09.png" | "3ecc5281ae5ff88a8e437a3370c177931e7a18b5.png" | "3f00bbc215566f7a32e02e62a480620ec521ff38.png" | "3f10dcd0dad9ff37f46aac175022389bce3ff7eb.png" | "3f51ec69abc35c5aba27c6f96d84bdc888762496.png" | "3f873a896f60543d9846f9c5035b14d5ecdfb205.png" | "3f9c3912044105e1415c674e44b1af8f21eb04ad.png" | "4001083638174ff6a945fdab29fc4c20a422a0c6.png" | "401275c176e8e624f376bee8136fea8b9eac24db.png" | "402ee8fe8a83f7b865acf9e1b108d052b06d9b19.png" | "407eff14fd4d8a13f825cea2dda66ec64f7aaf19.png" | "4089874b5db33b0599c9df15a8045e6d21f491f9.png" | "40a399b6e5d93d3cae845a0deaf883fdc055238e.png" | "40a648a63fed8328afd3454a2a6791d618587f70.png" | "40bfbd0ae764a220880ec2b0ed4ec92be955ebe3.png" | "40d8b723970cc2130f1f9250a6b6c14c1b2480ee.png" | "40e01e67e2b4a00f1fda44a18c99b720824927bb.png" | "40e57bb4993242e962ca3d14a5013869f0690db6.png" | "40ec33de7aceb74b43ad12052c14021ecb164674.png" | "4128ffbc7cf67d690b8196e6aee219bd03ed5a09.png" | "413725138516c9b0276299577f83a7689fe40f52.png" | "41b537d7e28a8139c3c34dd94cf9b8d1229be44d.png" | "41d928f7db291c8a91c79d12e54b9508eab177ca.png" | "41ec90e094a98a04f4f869b7f1cade9cce688d0f.png" | "41ff8653d4e6f75250e0f2abb610620e7e1e5416.png" | "4223bb407da117b4b010c9f570362777bbac0d1d.png" | "4231ec8ac1c22fcfd2585f5983b12615c21cd253.png" | "4235a9d12a21bd65f7a401c53efe5f3d2db0271c.png" | "423939d16158b6f184fd40852e21ad27c6136849.png" | "42673a27d832be34c0b43a60ecb029fab0a466b5.png" | "429c466beb6e0de9ceed42daa79dc725de19f34e.png" | "42c2a48ef5542ae29baef52a5c40aa81e9711535.png" | "42d57d41671d50e50f9f580adf39eb7bda8eccb3.png" | "431723d0e52e44b3af396a02edec2d12c7aa9ccb.png" | "433713b6cf372e9f9280e9b4032f639fbddb16fe.png" | "435c0680103198a2b230a7972bb328e79f6666df.png" | "437bac923a46e4eaaefc326af21aeabc85ad7966.png" | "4393ed07b139a78521741742bdb4c3dd5b970def.png" | "439ee9e3ed09a80a356b600f360f84ea2a86a586.png" | "439f4b6a080c992d670aeb2f7a1d100e9d885635.png" | "43dc934bee35a55b7ec3bf8c4a844f6f32e6ff53.png" | "43f32a1bd618592b89030f291626edcd2cef8127.png" | "440d99fb2b70535160b095e136d0435a92c4c2cb.png" | "44841cea55bb97071215dbb47508e180f1953706.png" | "44d73678ecaa1b01de125448f3f8feea03b4b36c.png" | "4515add69963a2b1f9e280d2cebf51580b3d3342.png" | "453450c547ed5f6effb08419a408818ab9f60302.png" | "453973423e58cec17bc6a764af7ae2c372d165f5.png" | "455d3347b2a6da5407fb2924fbd1852a0d23c3d5.png" | "457c269d55b0e53b74ca6f66f78be795789c52ba.png" | "4591e2c7e0520d5717ff69416886aec0ef28737f.png" | "45b5c60639073211d84528d4470560a3207a541b.png" | "45bf89862183646d27431c0aad32f492f459ff92.png" | "45c16988f271b590a0b831940a008927ac46cb1a.png" | "461839e2633f944c781d4cad129f09d2e7bbbc01.png" | "464a5adc2449f14ae4d9d6d39adddd6c92c31574.png" | "4687862a5705591fa72ccf8e6166b34fcd15d871.png" | "4690ba84dde2bd66eb5e342898f9be31af794b70.png" | "46a6a9fba9d169ef1f1d1d4cda601f74274364b3.png" | "46d753a80d0b66952450e76a58adb297fa54b723.png" | "46f0aa8fa5925182e14b8528b5ceb3e5146a2155.png" | "471a16acd3e592cfc0239532752b8107e386fb2c.png" | "47342e066b0605a5fae1e53be205b580153048f3.png" | "473dcca3b00de2e299eddcb7826093906cdd17f4.png" | "4747f5a6de0ee76cdde34f37c65ac2cbe440b99f.png" | "47691ef15d942393c5e527a48b2de3b35175a832.png" | "47ae8373c4d5da1fdc305e9b26e98503fc10b451.png" | "4828ff9db9614b9c1a4e531d1f7d63842af9fba2.png" | "4829338edeae3a98c40f94d25c5190c1c55ddf8a.png" | "483303bab4bf406e6b0f40960762fbd9834fb4cb.png" | "483a06eaefa0f080673877ba803a4455a9ada59c.png" | "484416661de2fcdf4c390935b953015d31a927ab.png" | "485baa051956ae7082a8000f5bf602103d8a6a18.png" | "48729ffc7f88bd928446fde26149eb81df0cf197.png" | "489eb061666d70591fe330ab6871a0f23fa0d381.png" | "48b8f0eaf911bac12ac8cfe9f43350ec0ff3e164.png" | "4905fb6b845b7fa030848f970c0443d996b51fc9.png" | "49105fb25509dbe54483fc841c142c5f10ca2383.png" | "493345280259a8c628221aa402d9f4eed6ccedd8.png" | "494f64c376005b1386fef4413f0457b600103af2.png" | "497427de87de66eb7eb4e1d964c63c3eba8497f6.png" | "4975478a4e35336de2f39a65f564a8bd69db78ee.png" | "49b11ff52fb49b1a5bdd47ae053a554904975237.png" | "49df23b61a7f4b3d1e88f9ac1ab1f8367e3f1309.png" | "49e642506480df75385d064c0510918a00f0f889.png" | "4a27080c35c76bd7bf18d98f7c5eff5445816178.png" | "4a4aae1d322bf506606e314e85f5d784ac425636.png" | "4a9e8d08753ca19dc15acd08b3c3e7f593de1dca.png" | "4aa1c469cd3fcbf355a46a916b54f1fffc08cea9.png" | "4abc15363d496805cbe43e39a8eb57df461d0d5f.png" | "4ac8a3615d677999b33ed3ea04fd073eb65e93d9.png" | "4ae35c4b7fa198ec0f89c8a2198ee6a3be067112.png" | "4afbf2a65ef99fed9b2945a8de60c98a31e8fd10.png" | "4b28187f67b02efb71bcfbb2e3ed4cf576b0fb7e.png" | "4b7cebeb6e96669d078a0a0257d0276830e77aa2.png" | "4b9927b19880fb8295089d5ce901746b989d9ca9.png" | "4ba3b16dd908861d6af7e652b8a9874fa73fed7e.png" | "4ba48df3bd5a1852897213362044b6766b76c212.png" | "4bb81c5b3f9e261b5cdcd36db421ac9e74b071a5.png" | "4be001f03ffec5b74a2d1d373689c05271d5c817.png" | "4be91aa35dbc31ba055f84abf1da9f92ae04a0ca.png" | "4c3d38b40dd7ce7466fb999087b1e3434ce65e74.png" | "4c5127ffaf4b4fa6e5eb28a4f6a990b180caebba.png" | "4caa046cd7e93522b0f10ba4985f0ee62887d361.png" | "4cc25fb9ebe1957d5d743c310b28c93cd9f8a093.png" | "4ce8816217acc83629016672103c77692802c829.png" | "4d07627790637451b524ed2867b08f93c9feeea7.png" | "4d2fe4a87a40ed28a7953a7c9ab1e14f1d0ce305.png" | "4d3177a527e7121c5d3d02030d53f4e05b60678b.png" | "4d42aa6d8fcf7cb248efdd5134f9be23f1b03e5d.png" | "4d92a02111a3c1aa7dd748a5da759a13c1487ed2.png" | "4da47e09ea7b7c2b3d0b907369801ceb8b6114b1.png" | "4db02789dce615958152c9b212dcb4749f380074.png" | "4db05df26bcf1c829a4e3d6d657f838a04989a23.png" | "4dd24cccd888dfc061ba8dca6ce4165415990847.png" | "4e201ba1bcd66f7db50f4fc006fd34d3223b541a.png" | "4e2e5464750a415e54115f9dcef396274bc2feac.png" | "4e6027ef3c4094c1b24e4cfdf64a0a3b1b56b425.png" | "4eaafabdaade66566eb922910af137071b93485d.png" | "4ebb19760f954bc1e2d2931ce670bfc31f9d249d.png" | "4ec0cd07502386d5d0b29ebff146c510507f20a8.png" | "4ec72f83ac60b3ebf89450b1fb347cb68af78b30.png" | "4ec7b96cbf4d1d130f52d2707b53bd866203e7f7.png" | "4ed2bbad17334192ecda37efc827658c78a1b7a7.png" | "4f348c915252faaacd08a92b79eb1e19e6fb69c2.png" | "4f4d38789bb5247c32949554c57046f4a28ba23c.png" | "4f4f711818520a61934f1ce8b113f0a60556eb55.png" | "4f5ea6efcde9c16aa72a40a038a383efb2bb9407.png" | "4fd9f59709aafc1fbb0d84b5344cee3fb2fa1ad0.png" | "502359e105ac8d87acde5d989e2c9b779b88d633.png" | "50786ea3dd3147669a74e61a96dd1eb124a81820.png" | "50944a35531075fe48e8482e7bfe277b837fe3a5.png" | "50a31ae9749df3da38072761251c52fe7692f5c1.png" | "50d5cc50bd0e2e2a703626a04692456e1524fe41.png" | "50e69a2df72de7fc28044628d5ab9750fd176511.png" | "5107ac9a3b534bf15a00ffc63e40e580721861d2.png" | "512a0ef05371fb9bc72ca0f0c43b893e77d1134e.png" | "512f3385f00d04aad18550b716905cbfd908d4f2.png" | "51482452a422273c1ae447af5462f32f7f7af8b9.png" | "5183cc9b6e3d2af741cb36dd0fb336ce1ed10cdc.png" | "519a9dd2c07d3e46e2e8d7c2517472d07304fe44.png" | "51f4d66c3b63cb6355b95477dc57178c66ea10af.png" | "51fd3bbcb9904ecd8ecbad4e092a6e2e25e136e1.png" | "51ff1d51c2c840da386bc196b92d7d1414fa7dfd.png" | "524694d9717fdfb476f685ca1278c3890e6daca3.png" | "5294abb30c197aa1f63b695dd17eb81de2bd6b9d.png" | "52a04d629e74ce5b8449f9cab3ac66f9bbabbba9.png" | "52bccb30a455eb448efa65135eebc236979fef9e.png" | "52bcff5c0eadce927d19f11030852547ce6a5a21.png" | "5312a09049a310f25f02396c1b90ecfb0b2acfd4.png" | "53137f09504cf24946c12c4daa53bd7b4782e8fa.png" | "53279b8ed93159aed4e729bdf0c7ec6022834293.png" | "53661d7beeca82ed71982246c9d2bf4f1e9e8a1c.png" | "539b873ade377a822f6f04728033e47c4183ea3e.png" | "53d46f89254731737572d7e4768c712202e75963.png" | "53f53c9a9f95c2b55f8139901ef14e65ebf7ee57.png" | "54458a2897ed002b53d5fb6ab65cab5ef19dc31e.png" | "54569a42f66c2d0dbe216192e6d260dae8636072.png" | "54c537ee63e4a12bd8ead4dc62faa83b07b6386c.png" | "55253f51326ad202fdcc388d0f5e44c4f74d77c9.png" | "552cd52ef0d7881f6ab6365050b674810ff4ec82.png" | "554254fe080bb0adad5f7fa97be06e40208a7d94.png" | "555f1f15f25949ddcbff7835ccc729266e1fff38.png" | "5596720e2115619e4c793596b9d57983e08462d7.png" | "55e68251acfc623456945091a656b80af1c7eaf4.png" | "5674df46511610d07a8b6c9ba4615aa51c3f71df.png" | "56b2dd7b543012d3f4cd09a3cf0db9d85889a6e5.png" | "56c667a97d16809ab9d6a91957b6ccf46f3be432.png" | "56cd803013c9c714c0d2087c7e2b67a894266e7a.png" | "56e900aba78516a57588800c980f5e2accc4e4a6.png" | "57377ea6f497eabea6063d2ded3840fea4895644.png" | "5739ea5e97a11c1415a4d26de9f5661b723e480f.png" | "579d61721212406606d196322a030b9573b3d74e.png" | "57a791b60b60e9e64d6350f4d5ee637d4ffb8d3c.png" | "57ebf939e8d10099e527734d3823ce46793b5fc1.png" | "5801ea5623327403603452ccdf3e31cb98880dba.png" | "5819677906317b965e9f5879256307903ce42dfd.png" | "582466a70f5c72669ca07ca4bbb143b3e51bd805.png" | "584c6b5551bb240dd3f712290eb7fc04e448cb2b.png" | "587f35701023ae0694942e1264165455ddfc874a.png" | "58801516c5f8292319a4b2e674082febcceb9e99.png" | "588dea62ba6417abf5bd454912f796f4536d72ce.png" | "58cff98543497b835438f7cfd59b1b4d4b7e898e.png" | "58df388b6f21f27abdc33a95b0eb747917718e2c.png" | "58edff94c486957301930ef8a984327a5f48c2d9.png" | "58fc7b3d9b34afac4de048bee4e3b0326a01c4f4.png" | "5932a6b4ba798ea5bc446cbf32209849ce86eb16.png" | "5945fe73d1c2ce086df0757d01f0138b2233b842.png" | "598385b1ecb757b20345c2bc028535ae5021a711.png" | "5991230ec16e5671637c60184a0c65fbd89d4c11.png" | "59a893d1e12f23b1eaf9c6047114dd9e9281de7d.png" | "59d6c99aab8525a20ea6458a050899144a19263e.png" | "5a108add214a4c973b62ac4fafd984a24b8cd465.png" | "5ae1337af7fc374aa807e4d4af87bec3ddfdce00.png" | "5aef7a7380e4709f1bfe69e11f8c5e24ba36d2f1.png" | "5b0da58bd4d42ad325545289418b0144a37b02a7.png" | "5b4d1c5092ca75854792f3632f690c3b764190c8.png" | "5b553448b5ce3431e98f00a73825c75cca19be24.png" | "5b60c973ba1ffb76228643c9c8fbadc01974c56f.png" | "5b89be11e24d6bdc610326bbe17cd683c4f30969.png" | "5bc6143ac0c8d994818d7980334e0d93cb56f959.png" | "5bebb8adfbfafabc6bb932ca71a64652e40f5d8c.png" | "5bf9978ecd9d90b9be06693a13aec60161ef2c11.png" | "5c1b61c427234677f3a7019078f4786d5f22b25b.png" | "5c2ac53dd1f64f6a467c8653a0a890b6b4337286.png" | "5c47fbe489ed4c15e13bba35953984e52a6d18fe.png" | "5c76443fd466d6a230b9dc676dd031b6e61145b4.png" | "5c7c6b86d0d029cb5e622eca4494afc2c37e6962.png" | "5cc3c3066c54fd1fbf9ee8ec2b78addb7c3411c3.png" | "5cd306cf8b16c152bdf0a33fcf3e85f29e1d3f38.png" | "5cf5b71711ea7759282432b915aadca578dec895.png" | "5d0b2fda4be867ace579862993c468e13b462b57.png" | "5d1449be23f602c9af1c0e33ae44a5a2cb70cf06.png" | "5d4a83a4477e0ade77532fbdbe4a86a3e44b986e.png" | "5d777081175a1d87bf20f4ed58a11c3e3b3e1699.png" | "5d933e9e0120349ea29a3256334a060c7c1471ae.png" | "5da7457dc160f9cee11b571d812c85829aa63ce9.png" | "5dea49b3223418a99e48eb99ba31033c2537bf71.png" | "5e338594d36a388619b3dca7c821a9bfbf4b7865.png" | "5e55b7a8b6c5523bf5e757ea07fed0d854b3349f.png" | "5e7c12ad8c83321f49e1986bd94d9b67acb180af.png" | "5eacb875880be63246d9c2c3d4dbdcffcca2b723.png" | "5f1e49247ebcb4b613d92a06e4d5104040070970.png" | "5f23fc32200fb16f9b7d28f972d6cfbb913775d6.png" | "5f4d934926fce277162de265731f66317ef18363.png" | "5f62d7c39cefa5c923c421bf40a2c9b718767b64.png" | "5f8dd798131bbb8e283e52683302c31da1a7d91a.png" | "6002e5fa68d1c9e932a4d518d81c4114a31de10a.png" | "60225eb4f38a81a6889ce5b8c619d750686c311d.png" | "604ed7c032f9b879041153b36b4940da58370431.png" | "605170a8586c0d3616ac765061fdde8b0d07b68a.png" | "607122d76749104d9b7ccf44ed7452629fdbe171.png" | "60776523332ee074f735e9ab5ba57250da252697.png" | "60b6fac57629120362d3299c96ff3865f22ebb3e.png" | "60fb1f0e8f3749eb61fab013bfbf254e77b204a5.webp" | "60fdaa3ade1065b085d1db7bccf78f9f2ee4f4ea.png" | "610525aaa2e65b521b342f2ba08ade4d40bd51d5.png" | "6147e003740032aab6f5154adf8faea16c51702f.png" | "61686cd1929e7d3a83c2d7f8b3e7fb28753a7343.png" | "6182699c7a29c7b443c924133242666a76bc02dc.png" | "6186dc602d0ccd2a56a2e97247330782e8f5bebc.png" | "61946c092014964443557d9c77be1bef4ed2fed5.png" | "61a59f7d186b80c205cfe1b0a630d84492498bca.png" | "61c063e8c7948f2c207ebcf6c8c2f6f1fe0d5e9a.png" | "61c9041fc04ab7bdeb8e181acf5607ceadd5a06f.png" | "61ed9d0bbf00961efaa6909923ae9ca334912585.png" | "620ddb451844f2b14005789a24340bac209c86d4.png" | "621baf768a8d13be31f38e2c0d629dfcd45601e5.png" | "621c98784e22b391592159c7170d1c647913e9be.png" | "621f6424041561de8d712a67561046285d652d52.png" | "624607921d3404cbb91dc7ed5e1fe8d3bad60d96.png" | "62637bf5c0a75207b98360ec36c9211c1e28bd08.png" | "627fc7b50d44c8936973d5287416d2976e49ba5b.png" | "62998044985b193eb8c5e18e7059881b234aff60.png" | "62a5fce9232df5b0d3fb6ad58387f227d1cef899.png" | "62a8a9f58b8e5faff1f88c8d0d10a801f8455cb1.png" | "62b07459335af4d90098d7ad08d551f31af75584.png" | "62b472d85f2a0248759813f8b386c9f12a9b8a4e.png" | "62feaf4546e74540f647b003b4868381239e3253.png" | "634f258e654b4fe65dfd78cf03d675b0a801b076.png" | "6358f86f02dd80babdc94315b2a4306c99f27fd8.png" | "636dab01e9f8409744cf12f9c771f6d30d2e5e1a.png" | "6371612707573f059f8923c05551dbe8ed6685d3.png" | "638a342da23a1ad5d2c11597744e948771308bd3.png" | "64290c7828961c940c4a81ff0e67a30a1665f929.png" | "6458cfeffb7b2b35c691ea4d70983097d554db30.png" | "647f8e238c14fe74229763b74bd5555955637a60.png" | "648fc6d1b1434c6987acbaf8cc2b5a0374e96b82.png" | "6497769666c4999a3896e4418f34de227fc85260.png" | "64ac7c280d060603f78addae9e2744b53a3f8360.png" | "64b0ea04d2774132923f760c1398f7ef36fcdd7e.png" | "64c3501bac0183c39621e10b10c6779e2e16b623.png" | "64d0db4cd1fd501722c3ee85605b1e3ee5eec887.png" | "64e611f6cbf61f7d2d80c3265989944a6e1d74d2.png" | "650ab16605b0e6738dd4ebb14bd04a6c522c775b.png" | "65120cbc7fdcc9eebeb0f1d70f8a0001051dfd22.png" | "6523a7fdb7ea58d72c2afa31ae550ddbed4488f7.png" | "6530e5623146cb3d8073e688583fdf3a2400c004.png" | "6532c78aa00befd8730b3e58f761f3369b56f658.png" | "65378fdc5ecb6bd042c1d15934973280e7d32efe.png" | "65476aec479958d63f2e23183675c97d34ffdd89.png" | "65a374ad732b474c02afa326407471b7804cec40.png" | "65a92a26eeed0a4dc1a4f852a23db62e7c98836a.png" | "65c715418debee85e04fe1bf99d624bd9bf170bb.png" | "65e7b9de1aaa361015d970e20678f667a7272d07.png" | "661c06cc4f0246427f8ebebad343d3be54d1bb1b.png" | "662207b1cba28844616049d5c84c8fbef454dd1b.png" | "6649490760d80b926ca5e4ceaf41b1fbf174ad79.png" | "664b55a18ad8fdc03dcbfd686228d67ab4d829a8.png" | "665fc49dc6fe6f9472d95dc39e30b723bc4af98f.png" | "6684cd3b494294bba76e603a44d4c05586a1f4b5.png" | "669794aed6ba6238d9c93ce07b96090c88fbdd38.png" | "66b1e64908382f932d7aefd7a41ec46e6e30f53f.png" | "66d4764f5dc1dc2306cac1bd8058219c999f5285.png" | "6718a4dd9711ecdd608ee5a4749570e13157f744.png" | "674eeeabf56d84775aef286fd7dc1f401a136270.png" | "6754b0fa337c14f758c85a26127128fee9d89d8e.png" | "6777aa1fc877176f077f768247ad2306bc6aff03.png" | "67941c73f60358b0d284ad113cfe6cff361ef877.png" | "6797f9933755a999f5e21e4060181d50f916b048.png" | "679d5c9c8512893c6bed1205f780306ad4ecd667.png" | "67a386b4fbf898b8e780fd0d808d45a08abb5962.png" | "681d35ab6f945c9ff82564b5ed501e06186febe0.png" | "682813278bb5687ef48e6d7aacfa1fd54b2f9cfc.png" | "68386f111d6c4d61b3c46d5f0aac07df89e88fa4.png" | "6839d13c4457f917cf661a2438707e9ce86da803.png" | "684d39615e88a9828acdfef17c0adf263ddc5af3.png" | "6856c0bd4e47c706313204a5e53d6727064a9f11.png" | "686078a22ed92de758fb25ae3a9d660efe5fb19f.png" | "687f25a07d1a7327d4564737972a58cbf84401c5.png" | "6880c8b25f1b5c87d58bea7a33c00413b3413684.png" | "6882d04e78f511e2f7fd7160a27f6a9e9ca8ef9f.png" | "6888d96c36c2b71820dd4978547adbbd321f2ce9.png" | "68a2bac49f9c2a33a6e458037c2e68997dabec9d.png" | "68c05d156e720288f052328e5f1c0f4f6349f201.png" | "690429e3bb2194ec0cc84ea1907379ce50900a93.png" | "690a02cd5956c9e75e1f364068de84b9bd04fa3a.png" | "6937c80868863424151dfcd2da5af1411148d3e5.png" | "695528986a57a4c47fd3e2e56d98036167b432f1.png" | "696f690924be9bb49dfb30add5dc8596cd36dd87.png" | "697065c7a6bfdc950f17363b8259b67aa1b962b2.png" | "69f42cfef6007a6f05651fa60ada3e37c31649f7.png" | "6a049af3c8496c3b5caaa3ac8fb3ccf8a959c6db.png" | "6a166e15bdc6be803c6d6aa3399a911c8a7f7b38.png" | "6a17b14f659f03c944814c613b2e7e3f47fd06ce.png" | "6a20e9321c81d0af00a0075821404c8a11e6679b.png" | "6a3e0541d584bae08751639ebce58f28eafd8f0d.png" | "6ae0a9bcd9db4aa221c3966e4b45fee32140ec65.png" | "6af17a8795e42ce75cea722da7f60fcbebd0b44b.png" | "6b23d544a3f81c970720f94b6e13f537b8d4de8c.png" | "6b6519a474d69412ee09cf5a587edad4ed2c8e9a.png" | "6ba343a59d17b6021a9650f0b37313a304cb3223.png" | "6bcbb0589473b9200f51b725d5069328a6983c21.png" | "6c5486e1e47f7f07e35376fdb98ef2a118dc8e77.png" | "6c62c61ef7cc9327e40c502771e4cd8b1012ac8f.png" | "6c9840728089f2e2c8d10504869fd12111c586ac.png" | "6cba9eff038e1776556b27568a38f2addf929bc7.png" | "6cbd9831899c8de4a3fb6bc84bbb27f2bbecb380.png" | "6cd91a095fa16aa221d2f4f422081cd0d533e833.png" | "6d3f47e7c53106a963706f7fb01a33fa4b3700c3.png" | "6d419d642ed68e82ee688af3922d5bcc849b288e.png" | "6d9816f6fc04758d7640f28985a73e044a18303a.png" | "6dc682b6fd4d796295c3f6e25cf9a556dc12d610.webp" | "6dd1ced13834cd1c7e81f3e4a3d774317664403d.png" | "6df4d2ab8cb4dceef82e533246f234173c2d7b9b.png" | "6e38460de0a6ffa4a43665b40c4921434bdc52fc.png" | "6e3c9c52ff10f52844a89df7f48ec66cbfb3c325.png" | "6e5e687f147672498ded50a81b69395a68b12240.png" | "6e8a3964944c05639ce2d574baaf9737f967f20f.png" | "6efb948189c7bcc7f694c7a1d1f92f88ccfd9868.png" | "6f3bbc0809eb965cc4c3bf5b38f0b119d70aff3c.png" | "6f640505f52caf39b9ea59cad0c4ca21fac986a3.png" | "6f72151f049c9be0ba90aefea4362cda8867e7d4.png" | "6f787616fe750b997d9fe8809e357a5fbdf5d962.png" | "6fce61f009d167be0151303397daf7774f5b25e5.png" | "6fd2fe25ae62126a8572eaf6da9a89e065aa6e00.png" | "6fd34139f625cf0fd1d83a0022d98771b4e2c59e.png" | "6fdf6b0d37c025eb8bfdd3d90bfe9eda48abebb4.png" | "6fe399130ef375bc0506a9c76a50301a5da649aa.png" | "70896b6834b79d57d3f7766efd266d2a5802d152.png" | "70c9dae3a83597e6265f84ba79f81ac85286fcda.png" | "7133da06d3ad8939b66c5e1a252051d59d26c668.jpg" | "714808471c6b49418a13866baf97c46a47df6a24.png" | "719c98d0b167e574f3a2c2e109c0171534e709d4.png" | "71b37529429f4182a0379ff3f6059d3498532ce2.png" | "7251a51df0b955da34a5a08bf42a14274d3ee52d.png" | "72bad4ae6c3a271948ec9c4ade4ee73664fdcdc4.png" | "731cddfb19bc4c76fc12b562a4d21eb05b3f0099.png" | "735453990a39a951503f74898bd5e0b90832c03a.png" | "735a70a732519add42abb87fc8a9ca38ee57794b.png" | "7391c797bf6f351b0f94b4decf923300d941b845.png" | "739f93b0146993f52aeb5dfd2b723bf03cc7f108.png" | "73bfe2038e33cea78060a645d4cdc3c0ae35cdff.png" | "73cb323a17d61547c60946259f3bbce50a3b56ca.png" | "745811dd235fdb7a73a418fbcaefdac0ac84dad6.png" | "746462abc3cb82d6cd4ca43882c819021b224841.png" | "7471338cf243927a7b40b59cbcd08988ab8b39ae.png" | "7476df1f774864a2f80606d296bce73b8d385749.png" | "74821946ec1af95eac660ee851e4938a23a556be.png" | "748bcf87745244e8ff442ad6a8e71460d880802a.png" | "749a3e4e6c5339fc1bd79d45a25d18fe75efa7af.png" | "74ca28e2b77b69af89366da3f958e2380ae55243.png" | "7518e7f5fa590436a2bf2681bc9aa60872bac85d.png" | "751f797f08e7dbd4a471a263d1bd4dbbf2b772c9.png" | "7554ba7d88871149805c6efeb7038f8d58b7a4e5.png" | "756b34bd27743b2815c17ca5919cbe8632a9e68d.png" | "75e8157c659680bf38eacb6ca3f0532966b4f892.png" | "768aa2da0ca7514af44b60e9255d6037cc00127b.png" | "769133279ae31ee722e1b213b63d3844f04eb51d.png" | "76a99c69dc38f9cb94c26520bfc6fd3b66dbf6a8.png" | "76cf343ec9a65c683c2b3d9de80da471f29db803.png" | "76d729608f52c24048333bf2029e59a322f60a2e.png" | "772e9f375cdf1a22b59fc61453d2f75a0b730968.png" | "7733fcb98736a777f94cfe56e31357d9e68900c5.png" | "774f372dd6706db0dea7580ccaafb4701ec2a624.png" | "77556dc08741a8a5428bc6a27babf83d940eaf96.png" | "775fb3fff92525835c6245db678643db47059ba7.png" | "778487516a53ea9b9baaf5881e1106b5bc4731c0.png" | "778dfc54e4b8b3139af04ff36ce0fdc03fec6e5f.png" | "77c361ef3015331e2eafee80ab92807f4d96769c.png" | "77e74f033754fb9965b68034aa831c34714d153e.png" | "78140fc23f35c40d3599bf92a8fe23779519770c.png" | "782e82e79ba7016f05655b92ecdbeb7062ccf06e.png" | "787a99684fff99f223a39483de08d4590a9365a0.png" | "7896636330bee41d2263599393906883e728f10c.png" | "790c221cd31c03dfbed2cfd0ae7ce8a05c45c230.png" | "7913fc124d68a4aa3e2beca86a31fc2986bd5c07.png" | "795f8cefd86cc0052f25b1e63d4ee3352c809d2f.png" | "79675a9a76d83505cd3e0301be5c9fda1bafd0b0.png" | "7973d0e1f56b267aa619225e200a5f7ed1714804.png" | "7982c5aaa3d88d792b18a438c5853e75fb1d3585.png" | "79ed3b0093e01a0005731a86ad6efecf40daa6ea.png" | "7a14d4e18d8d799c279fd18a3a93b7a5f0c55c80.png" | "7a37d68194b466343a316aae62535f66e5bd0648.png" | "7ab7aecb38686ac1fcbfa06260cc14dab90b5cfc.png" | "7abe09da4b539ed0eb00d26d7cac07797ec0b8d4.png" | "7ad13ed95f5dba947c7350dc166bfcec852c877a.png" | "7ad1c0d1a94bcd2c9458c18a3034ac0101b53645.png" | "7b02c6c7bf1e047bd8764c1beff4edcfe8de60a7.png" | "7b17f58632e17fccffaf8a55306f898d7029eedf.png" | "7b5f5999cd02b6053cd01e1b8b7b444bab7afa4b.png" | "7b689803cfe8854b4215daea17e9885a72acba51.png" | "7bb2fb7ac18e87b96d2d0add381137b880663c06.png" | "7bd9440171a6c35db756445ca2319d627c70b071.png" | "7c13cc2c46d549dc9bc4c91a4b4f450bce74763d.png" | "7c18c3a8500046495418b3749808f0f61ddbd293.png" | "7c22e4ad63962c049c995759d9f81ef8212f3cd8.png" | "7c35cbe23bebd2031e74d8f157a06ceeff99c548.png" | "7c6f02500e87fffa8414244051b58a75ad2c9ae2.png" | "7c80abd06f824151d456254e3db9a3f948c27155.png" | "7c812f7c0b52b3ac4689a4a91e4de819c285aeb3.png" | "7c82741e89f3b1d10f93e9c25add559593d4d774.png" | "7cb4655bfd9815ab98aacfdf68052c658435aca4.png" | "7cd305f8490b18ada69ac629d90cc4913745d2d5.png" | "7d00cf7aa01b9d9260694614a97228cecae98ce3.png" | "7d01dfe002e8b214302c72899682cdcc98e58996.png" | "7d0aa3ea48cb96d5e3a67a7a54b2b6353749d144.png" | "7e15061bc895da04f33056fb5791d94d7d1f6e78.png" | "7e18f99dad7b6312b11d64aded25081d8a5c297c.png" | "7e2d2d5cd91a9cdb8e10e8a4dbabdbb8e0bb124a.png" | "7e5a7fce6738f0694633f1a4c027ddb4e3b11fee.png" | "7e657e65af1655cf9460f599ea51b257170ce839.png" | "7ead63adbee7322ba39a3e8ad49eaa7f9015195a.png" | "7eba0f502851bbb540e3f78b2115669ff892894e.png" | "7ec9865395c1c533965657359b9bd56d975ec2d9.png" | "7eda1816b289cb9746c4cd5f7ee3f0adb320b39a.png" | "7ee3f52bcdd88311a203d800559f8ae344d98a38.png" | "7eea9878dad520dd8067ddaf739ced05ccd10d15.png" | "7f839b92c30e1b7d726600bd84b6cda85dac59bf.png" | "7fdd7438eb009b445156e543105c4eeab3b8e184.png" | "800bd0c062a2d911d4ba0f8f0fbfbc53672ff8cf.png" | "801ac7883d7fcb4b6f023367d02e1bd4fac05a4c.png" | "805180a28789c001c7a2a40a07e8a34f1cdc53b5.png" | "8087e6b16ab33e7e4e056785bab4ed2a68609036.png" | "8098513067acc55c7e608222fd80b545d73ad369.png" | "80e9ee21a8c33cfac96264f0b24d79221f540a44.png" | "8154c4aa75d3066d2122de528ab01465f284c3c5.png" | "816c4f6cd490fd791661c9e0c38a162589148e88.png" | "8173bc3c609ca3f813cc55f3d5e9a4ca2ec8d372.png" | "81ac6ec9ec9af10636a634b0f0509ae986d4b384.png" | "81bcaeca370702fceef9355f7809097784c5d80d.png" | "81d5fefda923e48aa1cd814a2eb4ccb64810e4e5.png" | "821f9cc6068e83542553c309533222fbb7029dae.png" | "822d0d01437a594af2ada7150a6af60a6c58a0aa.png" | "8238670dad9d9cd93296fb38b840fbcd1e67e50c.png" | "8256b717455144795864309923c51a791515df3a.png" | "82620fb43946cbc364262144e0369c4d2c92d387.png" | "827e78fe0e32d1c8211a3f7355b7486ef4696360.png" | "82901f154498ef54d987a3d4d3664a4aae178562.png" | "829f9505dd6134850b34c74194e2a61bebf3f922.png" | "82c609004cda9dccffb1cec54f7bd9f3fedb03eb.png" | "831786cbc67a977ac7c5b05d08726746012a2cb4.png" | "837fc8b7ab4639566f41677edbaf4cb6fd9ec21c.png" | "838519d172d9c26309bff51b35ba67f99fdede4a.png" | "839c23fbf12695fb5e1428910ae4d8e39e609548.png" | "83bc0520a9d86387db223bb0e834989b99257aef.png" | "83cbd2d7fd0a0137919ce483db8dbba5daee143a.png" | "843fa55e9810417af16da413eddde63800a904fc.png" | "8456ac337dc18e0397a5f6d0da139767c434bec6.png" | "845e8741d244305426bf2948730c8d4be533222f.png" | "846aea1e1eab4672c93f86532f8e5d82781da82d.png" | "8474b82c0d7f5e0a6899d915ef965bbb259f979a.png" | "848ce3b743dd80f75e77ff0f9cb3eb3db7b2fdf4.png" | "848d5faedca800b3f36b06e846eeceba7f920d41.png" | "84a10b3f22765d53311149ddcc858314463e61fe.png" | "84c7b61dc57d3becdd055c51c598f8fa860f649c.png" | "84cb4ef246d09de0c9299d09af6a6e5993a4e869.png" | "84e1907685990cd1e4d515dec8788eb21d35e48c.png" | "84ee0670ee38886ef276d9b68b5e91a66f64b767.png" | "85047ae743205744998d87ce8f751a0860e83ead.png" | "85a4cd52cb1e34458c05d8675d98f9b1605406ca.png" | "85ae04f0c6b61f88731d3fb1413cdc1173a0a448.png" | "85b6170bf235c73676f51d0e8de4f7ec2e81e0a3.png" | "85c12da4a0df5d364265b98b15034cc7faa70896.png" | "85f74912634e4618daadf9d54fe2372374230118.png" | "85fddb6ee8a9fca4baf19ca06ac718197bf3690c.png" | "861e857acd4d3078f8faffd5765a57d15867e696.png" | "86560fee15eb93a0459dfbcec9deda4eaa6edf11.png" | "8668e8350670a4a24e743a58c676a831e0347a26.png" | "870d1ae1deb282989e86e0b5c1562b8cb9c629f6.png" | "8710ee5aa140c5cdab586c657d5edb76a99707c9.png" | "873e340fb0c9a2c630650f5cfad3a0b6a31e5c4c.png" | "875812f524cbda8198df45d405ebcdb70aca46ec.png" | "876d99fe5d0ec6355b3fe1f33cba5be4626bc52f.png" | "876edc6885c879ab5b687d61f8f81c8ee699cb09.png" | "876fe1cfeeb993f0aea607e00ed7f4b8efbd7493.png" | "879552192f0d2cd1d002654c049b8a85913d22fe.png" | "879ab430e7103bd070ebd271acae0420331eb4e1.png" | "87a706935934c4b10bef05f5241c04d87bc0288c.png" | "8809aeb58c7b77b879c1b94d4b48fb15638e7327.png" | "8818ae29f57f8d0e710e09ae27b29e0c16f22d53.png" | "8840c88097445133e7ce2360cb8d2b01b142dd5b.png" | "886a5aaea56fb88e56858ef85b09e86de01df667.png" | "887d6455985da98958bd436867cef7dc22c4038e.png" | "890cfc889cf9fdac75e300bbbd3f677bee132625.png" | "891294a9ed661c9cec33d98735e5c0de3749ff37.png" | "893bdf2d4396ce2cbef8cdc49031280cdeff8c4d.png" | "89809981456787dbda3e8fe5f8410605ab35a2ff.png" | "89bf5373d42085b06ca1d9d488dd951947992f85.png" | "89c99d3324d093a4f352676431cd68d98abb2aee.png" | "89d08d17a8c2d07dae5926962d4d80122c38ed4c.png" | "89d2cecbb4600756caf2001b64edccd954a9e9e7.png" | "89d4b7754bc153327b4132b12c4f7f17bac79304.png" | "89ecb8a43ee12e30be8493287649e61922560f64.png" | "89f4ffce4f894c2b8c6e3083c77ddd6ddff0f6ae.png" | "89f56e9a873d26a22301004d9dcea3ecc26023a8.png" | "89fcad753a4231f666a1ac1c83d90a68a96cbcda.png" | "89fd0479d7f657a66974c7b99d0a5e56b1d8f65b.png" | "8a0f6536964cfb682ec25e05e13ccfac525815a1.png" | "8a19b66ddc5171ceced6e41fe17f76ed3065c496.png" | "8aacc858a9943cf7207f1f6788c9ee7ae03e7652.png" | "8adcad9bd625ad15b104a0de32b998758141e32c.png" | "8ae8f5378f5b1652d935cdef1b2a1b17879fb9ce.png" | "8af3280c8986d7719d665f5d9e8c0fa5fd426fc9.png" | "8b03f3487ae504fe79bc2e26c3bbd0f1717cb837.png" | "8b0e8aa7acf271a6e70af8208d91d7cccd584ea1.png" | "8b1f6e0efa614b9f97e0df4f263025d2a0f9e831.png" | "8b1fde94509c330a343cddded89dce874bd798be.png" | "8bee8191b5714827ffe84480675a0bcff44d2f95.png" | "8c04222469f9d5e1edc2a156b5d105be72c27cff.png" | "8c270a541c329b011010df63b47b75b058fbda65.png" | "8c8870938972beca96b4056825495f3d0a99cb30.png" | "8c8bbbad9efcf84191f26eb04c0ad0bb87bb6bf2.png" | "8c8e45bfbb6a201e98ef3b354d31837e35e98454.png" | "8cdb0fa99c2e99038b8b7b83360aec94ae91c773.png" | "8d3ff268d3bce7a97a973c4a99381401f822dafb.png" | "8daf1afdd8144d69f3ebacd280c900189479e1ed.png" | "8db097e482c7673c65925cd11655f59d20983ccf.png" | "8dc25db6a2a42c8c8c3e91373c06141f933c8c8b.png" | "8dc965203ce5ff2504a6564ff74fbd76542548c7.png" | "8dd33be6ef9b9c2469f6e9f96efb75f01c4a89d4.png" | "8dddf74475e4348791573305d842717a6b16fde4.png" | "8dfaba4797c02e342b9ede766ee743f9b6449f7c.png" | "8e355a688f9a7d3d741bd82f950c282ea1baa0f9.png" | "8e3e4846ab0630e0e5856e5abc97240254abf751.png" | "8e52af6d62ce66f6b155ae7883f6d17163f25849.png" | "8e7175f7875406a62f2f621ad330426fb6975f42.png" | "8e734362dc1ebb2f032cc9274de81249259f7bd3.png" | "8eb27e3e57b21131ef9bbe3bc0ebd933ba53d972.png" | "8ec07f3c142a5c4cae9c90a3e33758c59b7ad00c.png" | "8eed0dfead0ba2ae5b3ca0646f188149b4bcb037.png" | "8f733dc73ce477ce5485fa933b4bdcefb4d93ebe.png" | "8faf43e9ca81bd11c367b7ffbe1d635ff223e401.png" | "8fe7af7b38732504cb000f12b28e120cdff275da.png" | "8ff2f16271cedb4fb03ca639733127fd31b9167f.png" | "900daa37b276d975dd2e287b534115e659f9e3e0.png" | "902e0da3f32d06aec2ebbc4fc7c0a1e649c096ea.png" | "9040b52a5343ea62b979a1b52207a7fe42fefe68.png" | "9051198eab7c5106aabf2595ae386fd020ca434b.png" | "90512b8ad4ea5b1b805e7f1fb3fe1f7fd75efdec.png" | "90d8fb1838d46f810f027780a6f25ef063cd4cd5.png" | "915f14f7b72fa78c0ea38b626467799b2c45854a.png" | "9161968d695361b13f548fb6e101873fdd437170.png" | "91755f29c85fabb694522081061298020b5adc0e.png" | "917ccc38f11e825f9eb9c3e04e92128ef937170f.png" | "9189629d78b74cbf8b7fb6ec3348753259bfecdd.png" | "918f5242aa6923e4f232495371f1bc92c9d33321.png" | "919b2d974a4b89a8f7e1601d385291c7631067fa.png" | "91adcbab6def57df15e27bb4a584a96984b5d6bb.png" | "91f8bf5f9aa9e795657620adaa280786629c28fb.png" | "922f641c3955876e4853699ee745077c92211121.png" | "92513539337d6178b1e07bd16222e20990892916.png" | "92782b0e642396b037a5d6545c4340c0bc8f54eb.png" | "928a4a91c0266d6d2be40bd57a9ceb7e8cbfcde6.png" | "92bc1f34fe9b1e81680d4e50db70b1efff798444.png" | "92d96857e29e9694bd05fbbf13654afce2cfa400.png" | "93167824b435e3d5ce74006fe4e156c3e610de35.png" | "934c2ffc45f25e832d6cfae1d8e7e743b1fc2dcb.png" | "935f7874dfc03aae145416ce1c834dd84547bc6d.png" | "936f2c8dcf803c07511148b3090438956973b11d.png" | "9388e1ba0e2c3b9d1c628a12bd75352ee1604315.png" | "939fcea27b90f00d7643fec21d7fb04a33390527.png" | "93af8f63d17b877acacfa5cbeb9a922cfcfd27b7.png" | "93b7b3eda88a86bdb7d378cb571d4e1d8506c470.png" | "93c75e01cd0ccd099be8f07879e4a15854933319.png" | "93ceed42aa5da604b25d47a72e727bcbc047f7f2.png" | "93f88a8de4c75263122d108b07237b2b02e62aa4.webp" | "943d5be94629438c1a764402bdde0e73d9b47b97.png" | "946e94a0a8bbfe2d53124cd7062661636bcfa6a4.png" | "947958698ea5a23cdddefdbe27da4a0010a690dc.png" | "948b0dda4062f0930a2f4183a44986a0c1bc5733.png" | "94c9365ca1510a2a139dbc7424bbee9b91bb1798.png" | "94e5249eeeb9c043a5819aaed83311cd9f96cfbc.png" | "94ef3dafc1733880f857ca9a255e7a4e4c2caaf3.png" | "952b67f2e7fd91545cd2ab012fe8ed52400117e8.png" | "952ff132b05f2a98d411ed64ac90338e40ead875.png" | "95404873d0584f5e5fcea8f960c5e5938ff9562d.png" | "9542cadbb0eb211cd9f18e430f70096712a0929a.png" | "958c2f470b000786f34d9c69a66b54ad69ab4a27.png" | "95b83e13dae7ced25b338bb2e9d9e86c2a4b55e0.png" | "95d0d90d71e73e3c318e6a6305a0b7b2c18eb6ef.png" | "95da0444f6ee1ee753109a97ff3bebd3dc1cf1e0.png" | "95f42c056baca598fa01bad6cf4e1bb508451224.png" | "962b66571c881342b66fc5e22124a89e43f8d5b8.png" | "96489bd2a84f35662be69689c8ebac3bac54efd3.png" | "967d407c18363c50b992c6a49d60d7c8761824f2.png" | "96a7b0c95a919613a09531efd642f0c320e5d624.png" | "96ad8dc77111129b602eec42effe0e0224e535a8.png" | "96e630971966c9a8078972fb045b638776efdd28.png" | "9700db817731e44bd3c24509e13be8e3650d0e28.png" | "97386428e025c8d4a86394f467cf17ce877915cc.png" | "978cea6c1818b5c0352931781ccba1eee7519402.png" | "97abc0aaf753137a397003de26bf4cdd3d385a67.png" | "97f6e2300f1b7da83f44286a8b07fe18736f2f5d.png" | "97f9b9a2f9d3e29322643c128f7e9887c8baf51b.png" | "9805a39a52e250a35a95905fa76f242164112685.png" | "981a0c863f61830ad5d2408560a671ea60e9f4b6.png" | "985556f6a2819de157f0dc6bc4c60fef8a2261a4.png" | "987adbe5caedf3443a84f839d7fbc7bac165801d.png" | "9881d53378cb79ee9f5c83012ab930ee51511091.png" | "9891d1b79f077f484c355e9896853049812679db.png" | "98c6a48f053d29c531e683475b3920189451ce07.png" | "990362469e3ab9278d782568601bf63071be4a02.png" | "99054569e52478fb2828cf84f6a80ed9dcb808c6.png" | "991ef897716b2ea2a61a342eea553624645e492f.png" | "992fe5daf1c6b68c54d87e627800940713850b5b.png" | "9946afa58554eb6d67409adc14c3540246b7f95d.png" | "99850b86a193919ce7ec544b55d2e90eb82b45d0.png" | "9989ce4af7167b49ad55d638c62dd6b7589d92fe.png" | "9a41e435c4b6af814c9e955101776801d003c001.png" | "9a50a90b792f1d856ef9fafad6128b002ea15f89.png" | "9a8c72a960fae55bddeb4192f811a8d2745b3c57.png" | "9ab7ca1151236319f32656560fc7c7e89d67f259.png" | "9aec46bafa0106b8e4c51e9919727905a1d35f33.png" | "9b04e655a6ce27ff9f2046b00829115789f82916.png" | "9b1bc7799cffbcc5daf5079fd8bda4100d1ddb07.png" | "9b90107ca3049e6f9819962c35cde43167fb0a30.png" | "9b98397bb643c72f8f2d955c3d744b76947e65ef.png" | "9ba7974b1ff4b8bfc666cad3e64699aaa464cf4b.png" | "9bb16fa63c401f01cb149b6efed4ad93ad26304a.png" | "9bcf8a73784cf93ec635721fe72923d438a6b7dc.png" | "9c175b635b4e3e8a0d8db208e65aacc8a4028f31.png" | "9c424bff013558fc0ed5f858fdb5eb2fded9e9f8.png" | "9c465f52f4e6a4d9e549b0575f281d407906ab60.png" | "9c54ebb008347c16e62ebbae5938b5ff7f574ed7.png" | "9c7feaf723c3201a5ab834943b7e8e21fc810e5f.png" | "9c8bd682f4acd78ae804baae856b3c541c701833.png" | "9c95544c60064bfbf2d45b7624d0ca5469be89c9.png" | "9cf36be79a3e8c348e017343f4a10f270ef26f69 (1).png" | "9cf36be79a3e8c348e017343f4a10f270ef26f69.png" | "9d497841388530a8e9214b9945ce8bc70b63ead1.png" | "9d49b9870204876fda448df851fdecca1ec63d2c.png" | "9d6dd169088672959d145e8e5c06a21f0a4299c0.png" | "9d99979293858a9d4fb3079e8532d9117b6e0179.png" | "9db65624d8958be4eca8dcb7ccf85d2e37c8da83.png" | "9dba903e853dc93d6a2f3e69cbf0078b4723227c.png" | "9e078adb05bd5ddc5bc62036285c4d8f9cd4fb57.png" | "9e2a82a618ea1643c8b27d20cb9ac91372d02eaf.png" | "9e5d68def105e89d2d46cb664ce55558c7a137c2.png" | "9ee2816c8d26f723fdb0edd7d6972df87251afa3.png" | "9ef99e69b4f7b82f775472cd9176594a2043cb25.png" | "9f5ea5e8b31caffc106d47f00a4d1059116c3c8a.png" | "9f6c013689d219d8e961f0b8bd5387a83a228d76.png" | "9f7356c4cb881ba049ecfa60fc2838951b525859.png" | "9f9d2072dc9950e2e4486776126f9a4232964821.png" | "9fa055691df609e5bfe5b3781057f62529b445b0.png" | "9fc1edd36fa92c10965f99959a6f82fff84dcd5d.png" | "9fdf8061d31567f62d6a5f62d0c8b26604ead7a6.png" | "9ff26fca3e122a74ee0b1e3cfe0d312935e42abc.png" | "9ff3f0dbc5a70392449dfa179a0119e7de3dfa3d.png" | "J7Ey0mAZWlXpi0oqddm02Qt7siiv3TFiFUTkVzMAvA.png" | "R1U9zUfOo6I4GJPAPaSexVwPtGtE52CyFpBpwp1YrQ.png" | "a0960a7fad75aeb3853ac5e7b5f806867d3d7283.png" | "a0bb305dff21e5fc6b2fff6820b7ab7774d3fd22.png" | "a0cfa581583900898b285bd613a7ac7f9a5204b1.png" | "a0e32dbb1008e8e9b986e9852ee90d9226cb3d10.png" | "a105d060fa165791c48b750422ab360291206f63.png" | "a10c97a5d682300e98f57423416b932f1aa10136.png" | "a12eb31e4f9ec48cd8bc2d7638ffea0d044f9dd9.png" | "a1399d3658cdf5cd59950011ca1ddcbec61b2b95.png" | "a13f9071badd3e5c32c1b0c8eb3417171e1b410c.png" | "a157f9bcfee5909dd011d8afba905784d89375f9.png" | "a162700e0bab0b659fcdfce242fbeb3a73a2af85.png" | "a16e0835daa749488b9c04a8b9a096f92d2f20c0.png" | "a19b04c178ed759ba126963591496c2d7ffa423d.png" | "a19e397011bf5981d349973f0bd32fe19735dbc5.png" | "a1a664f65cea6f520cc5400bb3afcca94f6433a2.png" | "a1c3339371d18919932c79bc02eb892b974f78ad.png" | "a1fd5b026c43e229fd275c5495d5b1afda83f7a7.png" | "a25c44e73a0c6bf4d20f58d26b794882bb7597bd.png" | "a28dd39cb8cb8e806a9a5267a3dacd80eed069dd.png" | "a2bda809ca1e6fe5e0325f9b1e39dcb136487774.png" | "a2cec8293b5a04b5bec2cb45135f4aaeb760694e.png" | "a3114a752ce326983aed2317e1f5b1f9df28291a.png" | "a385320ab07b4b9429b0c9e5d959c5a0d3ed0269.png" | "a41df7d9bfa5a34a1c471a8e3a69bbc73adbc2ac.png" | "a423ac257d525490c73a66f480bc07eaa5a2ef01.png" | "a466c9a9aa9dea8a1f5bbfeabfae66f756644090.png" | "a46b2163395f8bd4ec67cea661313c966483a5ce.png" | "a4843d6443c817e38063aa5593ee35252aa58393.png" | "a4a2f2a2c60533fd96190f45af7b271bada5c13e.png" | "a4b36f7c5ad60b818ca5af805e52dd7e8ab9d3f3.png" | "a4c19fdcc3952c7c4cc37fab9c19abafa292214c.png" | "a4f9fc62aa6902ae14619d445b517f2bcf28fb07.png" | "a5364dba30aae19281b81886f0a020937067c630.png" | "a558fc0feeb75a04b310f77d265cca88577ae621.png" | "a596474455566fba15c839f8afbdee5864935ee1.png" | "a5b5330851dc3598c98e5a7e05f04fd8eb41a0bc.png" | "a6271fc27257f7894f8294993d1c873b78cf6e7c.png" | "a6278d8b97a3a35afd8044efea82a11fcdb4e5fe.png" | "a638b1252274ba302e6d4f8ec079c8132e5becb2.png" | "a65f5be59003df34d36e1e7ede2e561cd974a41e.png" | "a66e6b1e4131002e14afd092835d0f8be51031ca.png" | "a67c218c53ce4e190f8e2d2362f2e1f964375557.png" | "a68c70fa5bb6aaebb0b77b90f5b83f0f207f5184.png" | "a6b3f274dae5586bde71545f13753be8447decc1.png" | "a6cabf5a53ff15cdf4fa59bc5e3b17ffdea22f04.png" | "a6cd723109d6100faebd483b2efc994bdfe59aaa.png" | "a70137fe859b4ce6fc00d603bc10ac4b00748394.png" | "a7782043b9091fc8b819e8e6048bc644cc6549ce.png" | "a7aa3a6c619a71b358a4276cb2a964ffa172ee54.png" | "a7c5832a856e7b6ad5ed87f5aaff92d084c70cd1.png" | "a7e1c6d7280a196d305e2e6fc545b24824e29dee.png" | "a7f651cc86defc42d1d0cac8764d349cb1c2d5d8.png" | "a802ae6c53d9008b9618de23259c1745732b802c.png" | "a8446ed9790f1166375e668e5962825217b20395.png" | "a86ae137e3368ce5a7d34a847b2d86d4d028a7ec.jpg" | "a871b7e92d9b5b47ad398607630d3fdf434d7dd8.png" | "a8c8d725bbb3d57b5b7faae3c29e090d0d464a54.png" | "a8ceb3c5f6f7dd7a03e7348874b40cb332d9dd83.png" | "a8cf16d00d143377b3372b349c3b0f501fa3f48f.png" | "a8f118e3e5b1e8f81f079a5bd7dbbfe531a64f95.png" | "a9492522cd5265705c918d7eba2d270bda39aaec.png" | "a9689f72dc00bf401a9c88b76e8cf7eace06797c.png" | "a99002c8204d1d4dad2045fa7a12924ea1b65707.png" | "a99067996fbbefb6e09f5d9bc70bb6c8a4b8b998.png" | "a991d50cabd6a3395c41f38a18acca4fd1e5bc92.png" | "a9e38717dd1fe2ea8735e194d78197d3d631208b.png" | "aa1de3ba39472c8c0923d8f81833e453e32cd924.png" | "aa1f81d926f340e8e82f9db7db9f68d8f118655e.png" | "aa28b7bbe177f67a7deaf87f09a98aaaa2d3f978.png" | "aa525d08302e717df2bda11c1265d31f3802920b.png" | "aa56d0999eb69f653192baba8a5bb20e06a35e68.png" | "aac93ebd493e48d82221667810b70d45607f7adc.png" | "ab13cf3c1be673b663165bb25ccd4ddcd54c7c52.png" | "ab273eef74c18fa84f1c8550f8ebf3594f626d84.png" | "ab3048841067f112baa5ac8a778d586ce4427624.png" | "ab6cb3b466de3f5c13decc4a313d261dc8f02dc5.png" | "ab8ed15928a8fee7318a6504af305a06477c0065.png" | "ab9ebe3c4ecb8b8dc8db532a7efa6e1dbfad0698.png" | "abdd07c57aa868434602d592ee65cb6e92b6b6c5.png" | "abe93791a9397bb2f0e2e26019257fcabf6e149c.png" | "ac767eb2476540ec6c5c4c89f43513ee61ce1ff1.png" | "aca4ec5fd3b78fb4160b4cf6596b0e254df27fb0.png" | "acb8334c47319fcd126197baebba3a839ef50e4d.png" | "acd9785716cb17062e76cd88ca518a4b1e92a765.png" | "ace82747e1f216eedc187bd6da1bb352c11df5e2.png" | "ad280a3adea01de4a6aec9452bdefb6401df0097.png" | "ad2aff0fc223bb0dd58cce7b4271ab8f0a73e18a.png" | "ad366b9353f8462f61ebbb7d6462e27aea4e14e2.png" | "ad4ae86b555d1882e2eb6fcd10b233e60cf4c9cf.png" | "ad60786d908a6effc7b045119937f657d88ef509.png" | "ad692af056b6c6881d7792f390bc3020b7a44d27.png" | "ad7b4be171ad10b434cc8346052e2022d3ca35c6.png" | "adb063e9022852082848363109ba85f3bbc670e3.png" | "adb29abd14c5cd48d674046574e1f766b563d9cd.png" | "adcb1c10b3af627b2303c27931c029722937a655.png" | "ae57ebcd4d790751c08be73580eb3527e0931ef8.png" | "ae6a1fb60091c353e4dd16cb18dccc905fa24b7b.png" | "ae707d42c027f289e1206348cd593f3fbe8369d1.png" | "ae7f6efdaa575c3a8f1fbf0160d139b4434d4130.png" | "aefb1c21b9b21ce1d04efc929bab17c3fc357fe9.png" | "af0df39469b85ce9757d659f3655ee3f3df57587.png" | "af168f3c20c3de1e9c93768e2f1d3a6524e27a60.png" | "af1e45d3b732c9631e21b7aa2f622e52a857f9cf.png" | "af2c145e37df86369d07d1f064f50afa3571c1ed.png" | "af6694c8c3f67eb9b24ccf8f6f2e7c85be61fcd8.png" | "af70b63284235ba1f00194feaea66325ceffc711.png" | "b031052b340f538c674ed9d14d0bedc8f1336e88.png" | "b052a950143fe3431484a31e5915ea2ca4fa3a0f.png" | "b05a54272dc86b16c88f5f8da4ccc0f40167a132.png" | "b07afd44a2cd23ed0822d699d239c119669c9a00.png" | "b091483840a373999409c2c13d17d6123be1136a.png" | "b0c16a87bdae44c5f96d566a45ab895a5fc6a8fb.png" | "b0fbbca12557b9ddd19d3db0f797104743163472.png" | "b10d0b6c441cafad53a4a5a546d85542c7432f56.png" | "b12227d50c4ef01070b19ae8027671897e09851d.png" | "b12883dac47b142ddb583a5211986f803319a92b.png" | "b1316ecb309eaba3bfcf18eb14aedf7e6c941d62.png" | "b142a59eb59b6eb5e56c3ebb2e0bc8ffcd831a9f.png" | "b1549088dad680f5afe2befc86c58e2958cc279e.png" | "b19ddea35f6763235ce74afec13d8b9e3844d501.png" | "b1a18084c1b04db5744714d5ace1ebd8658fdb4f.png" | "b1a2e9f220b7bc9e062ee07aec1597338e874644.png" | "b1b3d68f972245556aad0aef2e11a12ca1c56bd1.png" | "b1b961fce28381acbcf48d6ae8278c237f574603.png" | "b1f718210f921cdaa81c6bffd75f045fd9f4b5af.png" | "b22c0208df8a7cfcfcfc9c1595c2c91098787ea4.png" | "b234d8384284850cd0d5c3882f650053546e2556.png" | "b24b3c78e97eb29827a6c5175594ff34561c0dcb.png" | "b2ddf474f5ef1c6d280c230787cf1abc4d826ba5.png" | "b2eeb66960d64f3fce4712daa3339bf0f3ab4d77.png" | "b30770a0c4004facd8a8a61934230d3dee90c289.png" | "b32af9ece77f6cecf7851cceda5feeefdd4dd85a.png" | "b32b6b6a43833d66a16274eca2b326af274f3b61.png" | "b32bb327e2c7dc73f1ea1abdbd49cae0f3deb475.png" | "b346374824226746564790c54056159708f0fae5.png" | "b39775d6c776db63cfa07d86bd1c7225e31b4dd7.webp" | "b39e2d50a8243a6aabfb5162ccba682c4add3573.png" | "b3a40949e72dff57404d39fc037c4442af9edce5.png" | "b3bbaea8194ac8b7c0fe789d34120d4eb9a53504.png" | "b3ceb087902d95b5471b94a13b22dfe876f5b3fc.png" | "b3e77cf7a36b610a7c7a2dad01e66401846872c9.png" | "b3f7127ca97a4e258de7f9b2cbb9336336c0ddf6.png" | "b3f9a1c6b17c584bef7d570b942bee8717b1e6a9.png" | "b3fbf7d4606279373bb73eb1115e7f5f8a27dedc.png" | "b447ac8eaad8fde26b1622e03b20d94c3ef89a58.png" | "b4571cb30733a53536563dfcc2772d179796d59d.png" | "b4612da0d026807576790a59ac25873aa5dd4d09.png" | "b4b88cf8ad41a4a6a4a75464981b6017961ce2d8.png" | "b4df1afb14d5b0c626692ec97b045a781c16d19a.png" | "b504e29efb58d0627efeb63d93bbe526ef22fbc8.png" | "b5118598a551328721566c153055a7ac6d0a2b91.png" | "b52e68d9246fbb566f7ebfd4ccd3232c5dc2c0e8.png" | "b532c17845522e16b52340781c2482fda7e1b357.png" | "b594d4f61ae7357e39cb22d73515a795b22c643d.png" | "b5bd2420b6f800fe9714ef05f08ed22ec75a390a.png" | "b60e4653ee3b57adde497710083de676529d96f0.png" | "b61161679e45a034df5c9437c17bdedd6c2a9208.png" | "b648ecbb8ac4d70d6d1ea4f65776e4d0ada529f8.png" | "b673fe69086bba1433dcc59dad1c560dfb55fbc0.png" | "b6d815ebf3ffc88175ee052288ba2b82e2a08eb6.png" | "b72163d9f6b2808b48f035663408511daff315ec.png" | "b726ed44d199b415839b4ee1ccd37f1330bbd06b.png" | "b7bbfaf257eb23c2f7f288a16b5edd246c445b2d.png" | "b7de6beaa3abe5b492efdfffe8844f920b1ccaaf.png" | "b80a0e1ee385529a073719c74bbf1b6da3050d30.png" | "b85dd70a74bba0e966e3d2ec64f8d8e473dc3030.png" | "b878c238c6f06a5bba628c96967ad4b95a0dcd71.png" | "b8867125885399e51a3296a81668f532a6dda4cf.png" | "b88c02033b2dad1681b5d413710e84fd4060c1a3.png" | "b90c806610e6e20101c6816f0cdbe76f74b988d8.png" | "b9149d3cc82a5f5b23ff0851cd43074e8fb63511.png" | "b978042d3e8c9cf7dff538610aeba041448d10b1.png" | "b9a755d610ae3ff88a6c78a1f4695393484f38d8.png" | "b9c3b701f248a2a8b9ed1c32a74553c06f1ea791.png" | "b9fce9706addba41c278445f0161a9675a15dcb9.png" | "ba1bfe95dbb66fbe1608a7a834a0591e12c16313.png" | "ba1f1151921559b22ee2e294826147a3ff292dd4.png" | "ba646ea7f27898fc093878a573a85cbcaf524062.png" | "ba858caca016a54abc55a13085d2611178d59d96.png" | "babd53317a48bcb9a73fa17c1bf1e9a76d4d13ed.png" | "bae69d2737ebdeea6ea9bc651cd93842e06f9fa0.png" | "baef2e02d223a6346ce8003c13631c6a5fd2a031.png" | "baf7a4099fee56d495d8b425243ecd085e34d479.png" | "bb26baa78349213630819da4f94faf9fece422c6.png" | "bbcef6f3e667ce29a83a72783c955b3fd7b198e9.png" | "bbf22c86741cef7a1db2cea7e14ffd06e0dc30aa.png" | "bbfafd2e7ec4d9d68364a57a00e544dbd3905597.png" | "bbfd522127ae5eca59b12c84926e9001e9293a8c.png" | "bc2d45edcd78f4818b8dc539a7a52db01adbbc15.png" | "bc3b7c2585e61792e7dc26906ed527fd2e1b0d06.png" | "bc830e878b0f3344d6d7155c45de1685b10b5a7e.png" | "bcbf3599b78736cd50b10c9a8cbca7dbab944cc2.png" | "bcd8982aec24df8794dd755ab2f5f6630ba6943d.png" | "bce67936e33f7db1b67e11bd28f502a40c822c6b.png" | "bd204595fbeac85fd04546b5a2aa0e12ebd644ae.png" | "bd36f3192685c624a30f96de95592518904e5983.png" | "bd48f497b6a3423ae8ee8c0d60f9f0fc0a0933fc.png" | "bd4caee8ba179d3e92dedbe3d0b50d1788783084.png" | "bd5106e7b8ce1f4e0c82cdfa8ff0f6bfc94b112a.png" | "bd6f9b2fdad93bbfbe74fbe635a4fd895e50a9ce.png" | "bd851f6d75ddf4c30fe2796858db00732eb9c001.png" | "bdc6db5828251bd1187e78d2131d8c2e58c20958.png" | "be029322d3ac0bfdb33202b1085fa119197bc695.png" | "be117d533829917f6ac57b65141db26913b660e3.png" | "be2913fdc367ce42d3522cf8148e8eb5b12bc8df.png" | "be50880c206c79133c5a1d6e610bc8510862784e.png" | "be534d72f06f677ee7bdcec8e6e93c89d9a027bf.png" | "be63443ddf2e62fdc099f218d208df5dff32ea10.png" | "be6f8e4ebeebea0701e48272c03b6bd45dc2a366.png" | "be95f4fe07028b8e3336b6ae1b5d5f795f5403c4.png" | "be99b700e9b4bc9b50f5d85c3f68acd48ea6f509.png" | "bec10081f8c918f12a3933febba7575f0b020503.png" | "bec56b9df43c931334d2d72be10e7a7e8068bcc0.png" | "bed75f8d2442792ac32a7beae3aab5c4cccb8c50.png" | "bf10281d6b5db57078392c14ff7be6a0dab660f1.png" | "bf2c5a4793287e62b656128d7274f09d07b6463f.png" | "bf3d3377177725f6391c7ef82ba00027175e0a22.png" | "bf44d49cf0c33b3ab7344df17b4f865c818e0f29.png" | "bf768e17c6e316bfa10b506c756061bc21d141b8.png" | "bf78a88a4493a544cf42eb86e61c8cadd3262182.png" | "bf818c4d2f90fe80880af2dd72a76f7b25453b6e.png" | "bf913cf447517516958ec7a94763257448a16eac.png" | "bfeab26663569e1e6ecc7adc6d874c9e09d08a25.png" | "c01cd81a2d1b2ea3d6f1cfaa219892a0c096cc97.png" | "c032342ca8b3fc18452878f7e7fd65655be2feb3.png" | "c058e676c08a838be57ba22bab17f39dcd7cc3c6.png" | "c05a4baf10c548112396102a41cea72345ae4c8d.png" | "c05baa106560988bce828bfc175df549498b394e.png" | "c070bc65041056776e659238ed26bd97401afff0.png" | "c075ecdeeab2ea6be2019e0b053a9954807e6c0c.png" | "c078594d018978de9cb2a76b9b33344967fcacf8.png" | "c098f63fc60e1f557c7fdf5a1541d33dde309b66.png" | "c09a7397be3981859427a95d9f1447a4bd6afc7d.png" | "c0c67cc0e259ee831c0f15695d254b1ea463cc45.png" | "c0ec5fd17034a19e6ff77b8db6ec5dd1036d2f37.png" | "c0f260956cd7a6c6f499fcc9c10dd93a3c3527b4.png" | "c114831d3078ad475d38b54c54115f6355ed85b8.png" | "c1226d6ac26a687b9e8a14823f8e0f62f1e5b3e9.png" | "c12769fa4ff862e1c682cfc40919e511a60011f0.png" | "c130157c7d36b41ff4eade69fa2b68253321a9e8.png" | "c18e8a4557ace575c325bc562792f3c408d7ace6.png" | "c1ac1690b4bf4703b3234399761173b2b3fe9def.png" | "c1c793c5b7a76bd422df432061ce35d5067e6ba4.png" | "c1cb711cddbf5a1f029c8d7ba3fae003b87e561b.png" | "c1ee4fa0077a8b659d2f508b481c9a271cc1c185.png" | "c235d61a9a296f5472906c1d41120764c8562372.png" | "c2784ba18d0b3723f08a772ede9bae27454f7e31.png" | "c27d7ef0832d107d6b1ae258d4a6feb5a3d10e66.png" | "c32799b5741a38b20f3148cdbe66080a10c911e9.png" | "c338d363318d17821d9495f3aeddde82cbc04560.png" | "c39fbc53cec1f52ae3b710b023498f3b19667f2c.png" | "c3a1e9d77ba8d33628afcf26bd63d221ee2fa431.png" | "c3d99122538ee05478db867ab2cc7d3e1ee1f37f.png" | "c3fd382416c03fa4e8004647772724ea64db8f90.png" | "c447924524ad267b90e1f89a2a03f789037daa66.png" | "c45a591ffdda0ab418f192d1b109e019084cf07c.png" | "c45c46a7f92a75f490beaddf3084e9d3e39c53cd.png" | "c4995feaf9728067cb738f6f1c4a80788c3af948.png" | "c57b9b1e7710bad089e1fcd568f06fd4239d2ca7.png" | "c594dbdab7851cc18aa537ce2468e11e86b29863.png" | "c5c0734007d9318e967ec48b93deff16a14e8854.png" | "c5ed4c43873edb650c880ff5685afe88c1484faa.png" | "c5f04312b45cdc8d254bc2ace724e4a2df41ae3d.png" | "c64e3a86b5a63b72d20f5d1441fb3644c78f9492.png" | "c662ca32de6627c17d8ede43cffa1b29039663f7.png" | "c6668f6b00a6bdc7edec974fd9fb88dea040a9c8.png" | "c6c6d4aab84a6aa81bf16ca21d9042a014e7af98.png" | "c6e6090df7bce26c8448da2b96388cca4e8d258e.png" | "c708cf7a7b86f4f029165b13fc85238328ca65fa.png" | "c71a61de1882c8ff37c817981383d618a17b5fe6.png" | "c73e717e3272a441c67e9a1dcd1d22d0a61c5bf1.png" | "c77de0c77c13d1e6cf5d6928221e0f40d1b6b55b.png" | "c79fa133c56ea221d57264fbdf0a7c4445070a54.png" | "c7c305a4c3dd3965a47bac9926ca9ee52732ad3f.png" | "c7ecd4152fe9dccaf784be54cb4e710f079a5437.png" | "c7f5b7ad98d2e10bb6a43ace0ad28b98349a8a86.png" | "c8461aa11cfcb95d01c524a41b9895ee6797be9c.webp" | "c850401d69cb241a8d79642527ab4cfc4cc8fbe9.png" | "c8683a5550ec6f8e1e810efb039e4749ed002563.png" | "c8bb8b662a4f9c116f947a62b5b3a9ce817faf14.png" | "c8d3a38038370b285219edeba960d45786a02174.png" | "c943c647af74b22be4ca1f947a75be759f30d43c.png" | "c9524048e48dc4645c6489100e83a59a7b436772.png" | "c977c0f2dcdc38363b5d4942950b9dcf009b7277.png" | "c98506d1e9662f62e968f4d41cfe289dad68bed7.png" | "c99a0861a58fcf83e2e8e767c12cbe78169cb618.png" | "c99e020a992eba5a127696ab89558b767a858356.png" | "c9aeb4e54c0fcf3e330a399eb495e5e2cf4d8436.png" | "c9bd266f5dec1ad86895e6cb3cbc1f4e1ed7103a.png" | "c9f094de7a3c9adc76088b95132164cadb2031c6.png" | "c9fbbd699b1eba637ed3b1cd1cc7045415df722a.png" | "ca21ac1f338195051daf16597c210526f84cf1db.png" | "ca542ee5099ef468c791e37aec4e37cfd96bb77a.png" | "ca64020da13976c894162417e4fe01dd1ae461c4.png" | "cae8f2777bf632b41f2dedeca0d6f727857b9c9c.png" | "caeb3bcf0d918e83c62f44735b496880c739b62c.png" | "caf7c7d70d8c7f12cefa2b35f8a50da375ffdafb.png" | "cb13210863860991016a79cfadbdd25389df7d64.png" | "cb3056dbba412ca970d3000ff8b37edcc6b2edaa.png" | "cb383a376010200d5632ccfdefc93c8b573620fc.png" | "cb96c999a0eccf84f0dc5d79b47e50256368b857.png" | "cbc50ae5e3771db0223da75804664248407131aa.png" | "cc13a92993a0b1904e883dd579615a69855cbc8b.png" | "cc258a7ff8fce79e924b198079c63aceeecdc553.png" | "cc3111de19471339be475bca2a49302c7699410d.png" | "cc68b0debb9252695aa40e87088f55c6189ba1a9.png" | "ccd1506b379f59044ba9f5a4574f888765df94e9.png" | "ccfcf35ac18c2e3c789fd10b22332d88371f5854.png" | "cd2e7d09c4dfa1cdb50b9fbf29e3afc953f254d0.png" | "cd7a3048cef38d2c6f872bdb25e032fa9baa2b0f.png" | "cdac323c6327963f8075ef1a744369ebfa008417.png" | "cdc96f90186c8f8c3f16b9da4924bd20cc796101.png" | "cde328c10c27d797dfb1b80184c027592b5f32cd.png" | "cdf256d9109cf6b7d775fc34d28053f34148430c.png" | "ce0b5c0edd0b98238a078152f7d1fe703b213b94.png" | "ce1dc933a8dc9de6f687ad2e642e3536afcb3df6.png" | "ce2d50d06cbb9d520a9e27e874bf3deb0be4b988.png" | "ce387713219eb50278c42c83e4944ed82b8232f0.png" | "ce3dd58cfd51cf1942e700185624a674b7cf8ef4.png" | "ce75cd48ac9c623c702870fa464c22c7be04bd8f.png" | "cefa7466465d30e07b29c2baa3b192826abfc9d5.png" | "cf5f8cf4bbef41fa71ab1592c25fb615813528c0.png" | "cf9a43ad47a05604d154232ae012b70bc6c4c045.png" | "cfd77dbd356bac5ba6044be7135705439900aa97.png" | "d004bac0a3c43eef36d151c28d05b653ab385632.png" | "d01df462d8a3467945bee9034180736fd12134c7.png" | "d0938d08f84e0d48297e13126697e53f327bff5a.png" | "d09d1a87cef9311dcf44c24f7f8c918abbc5248b.png" | "d11ec1920d277c83b5dfb498af774cd45be06229.png" | "d1370266b49ee38e9c8d51a3085aa3468fe3a089.png" | "d1a04b3a4f54e9d880e704859baed1ee3137c88b.png" | "d1b4cbb0e75a867a1a42cfd016b7f20702230bb6.png" | "d1b5a14053b7f45fae0d74e470cc92bc41364813.png" | "d26223e226bacb913c6a9ff902deef462990ef94.png" | "d2d46118a51002035477b3678d2825390dfb2041.png" | "d2d4ae2a72aa030c3d960c4cfea55ca5d1b0193a.png" | "d3144aa916772e091f4e14e1fc51d06fc4aa80b5.png" | "d377f00d215cdae6c22a5c8f6d18f8ac31789c25.png" | "d38e83bd278fcdf2497f253c975ee771d6e50729.png" | "d3a233cb335784245c4e0163cbd8df7f4356903a.png" | "d3a3b6555773652da01b0b435e565fd9c6826a57.png" | "d3b6f9491b555f5ec389564ad5753b753550cf8c.png" | "d3fbcdc12a46d9323eae37d574ce01552c484807.png" | "d4151da25559c70bc0a76c6c9f01cb0ff5724b6a.png" | "d4395e1ab5d56d5a450c6eb2ec1a6edd7b8e4892.webp" | "d47bce2a67ce95aee08df528b96aff24e47f5d88.png" | "d4dcaa8463053c7a49357b15fd4fa4ce83a89a2f.png" | "d4fd55bb0e5c2f7ae235a9993a3d91da28b4917c.png" | "d5028be76149d2155cf6c5d6cceabbabcb9e809e.png" | "d512d1e6a2e15b1aa9cfcfcede33c7e93b241f5e.png" | "d57df3838dfca81333574eaf168442ccf5b4c31d.png" | "d5d3c629c72a4c3fd88dffd43a943f359997b8bc.png" | "d5d6d9bb3d26d85a0770363365711f06bbd6274e.png" | "d5dc2fa9d3175a470cd90867ef60f6c617f8b268.png" | "d5dd918ebfb987bf4b65702685a3acc97b1332e1.png" | "d5e9082c6d31b05a59e60cc43419d9b54d36cff8.png" | "d5f95f6563ec7b65efaf447579988ee65b3ce554.png" | "d636bc21f9b34b729ee7b945dd92ed19bd7e0c62.png" | "d6516325f32f59a40da98e5aa40067614cfb2b20.png" | "d65c0a71fcc7484df8f8e7b169abe0d6670c3976.png" | "d6649039bdd77eeaf75043c7970d3f48bc58a717.png" | "d68618835861591f7ff65eba02fed2efb75e4499.png" | "d6d612884aa0b8fe17915d01b5febf96f9522dd6.png" | "d6ee7bb4aefd4e8b518c926a5f2da889113e478f.png" | "d71bd3c4fbce6dcb177591b92f1c2441ec4e2115.webp" | "d71e737494469afa2a383f79c1e798d5d554cf85.png" | "d76ae66b10f455c491ee59b444a637697c8bbdf1.png" | "d789077a4cb92b601266f5b585cdba59bd2c389d.png" | "d799877bd46c13b63cfa55fdac70b15e47fd6e49.png" | "d7a7369a5c56df061e6ce29e61f7d3b67d892ed4.png" | "d7cc10be8eab8367d89db99eb3e51d06bd265377.png" | "d816856a935566b5a8e1d619e64ddaae3539718f.png" | "d82b145115efa43b3e3689c1ac06f70099c85fa3.png" | "d8948fefd42523fb22e5189c1a83831cf6443dcf.png" | "d8cfd9b3bf53f9931aa870d66bb3c8bdd885a4d3.png" | "d8dd8db448e3cfad81819ce04d0fc5710b6d82aa.png" | "d8e020176d9068f91f6a69141722fb198da79fa6.png" | "d8ebb09c9e9c9d7728328eacd2cdd3a9b9ed82c8.png" | "d94cb589c652951d0d5a3253c70e43f571329541.png" | "d99079aa32df5682a7412dfaeac2f5e26b65d371.png" | "d99ba3563e2e24c60b416fd0fab45b6031e96eef.png" | "d9c255ea1f0ee7ec7b2a9bc4d19fc4cc330497da.png" | "d9ca5253e41984eb084b34c77c68ede4392eead9.png" | "d9d10340ba771d3e62389a1cb92c7b233f83f030.png" | "d9f7870eddb01edd180cf4629a3c8ccd705b49f8.png" | "da0a84550646c0ca6626c92f5f1c9029ba5af622.png" | "da29b7fc9a30f5fd2a9e1236d6129fce45d0e778.png" | "da2c7732e2fe27ee2a06d903a8de571e41ce1e91.png" | "da4299b53d7ba8367e6b958e63444e24692b1f6f.png" | "da920aecb83bbbd6e2904ce49a8462b90dc75051.png" | "daa13cd358761d88b0239f353d10c990aac2043e.png" | "dab6bb59e2df55935983146890e8b1500f46742d.png" | "db1efee77c45fc850a03831c7ee9b5de87be4861.png" | "db6b8d6536464f4e0341aff1c5ca47b3e9676104.png" | "db738e0f0f517893d1e77fd46a741c758742c532.png" | "db7befafec211966d2fa6dee3fdde29deefecf28.png" | "db9238e7b9b2ccf92e2bd8cdbc9ef0377ff9bd2a.png" | "dbd7105e727537999577a3bff11650bd26b0076f.png" | "dbf55da22e667cf9d87879379253e4ecc2d755ef.png" | "dc3c8f5f876f9530656041694771ba5a0a1457e9.png" | "dc69b630508db98e3fc0fbb7ec8fb5d1653ecc82.png" | "dc8fbf39dfb223424de8b81c8fe190f001395032.png" | "dd11047f84c969636724f974eab69606e586d87d.png" | "dd36f8ef577f34326b8d1ab8255f2cebd27ca824.png" | "ddaae5cbc5c755e9c1bc3f8b87111e9ff4d3fe1e.png" | "ddbbf8c55ce5a7b21d3f41145a695980a6985616.png" | "ddd040165587792f91c9c66c25769c83b4724a2a.png" | "ddf057c412ea31e7fdccad435e7521c6b9284272.png" | "ddfe2585bcb28dee8bf2e4bcf3ff0b00fd1be710.png" | "de4928545c41adad545233bfd1db4dbec2a4baa0.png" | "de63d9d48fd1be42f3f87565a4322fbca0c74c32.png" | "de80002bfe1ae28eaca21af58aec363225aecfc1.png" | "de8e28d449b39ad53670f63c9e39da34ccc2ed0d.png" | "dea0b25fa9bb0aebfb0be7158df73198adea11a8.png" | "deada193c94b38f86b2b45eb4ceccc9bfa924d25.png" | "dec2f2af72fa3814087ee9445cc545120f834385.png" | "ded302bdb8853d029cc2a495e54efd6f954ddb7a.png" | "dedb2e66f6ba533c5d0fdd2964b082e6dec7d50c.png" | "dee35629b6c2a9d53c39120d27ad7162023c3795.png" | "df03cb37007cc642c117f0f95aa4bb77338c69c4.png" | "df44ad35be37991d925523b80d9c4afa8698300b.png" | "df607353e0d680982d5cee0849b98c06e21ba8f4.png" | "df625b7b4c9c7b0e5b2637db079f7d17f26faa76.png" | "df72387ce533fec96e159113c521b9595f6b0758.png" | "df86b78030972783251484d18352b1478c6f6d95.png" | "dfb4118cce71db9d7b6c039e48429ff0bdd8e012.png" | "dfb762befee2d0823eab69b1e4adfa0a83d46e76.png" | "dff7948d1d56c5551df0378a60972309d6ca7e59.png" | "dffd585d8dd97ed1766046c7ae722054ee50ffad.png" | "e064d83403099e3a4c69d2145b49ceb9f47eafc6.png" | "e094a980d6168f7ac765d2860afe021c81d3a02c.png" | "e1131a89ccad7cc2739d7a7c288412c0656b6625.png" | "e11f7a7e18c0340f923b8630b9bae85c45d0871c.png" | "e14b2c6a9dfa414a8fd2f918a358447a8ab4ef0a.png" | "e158c8da7e8524321f2af4e80fb63cee552b77a0.png" | "e1c514d2d758d35190acfed3149fc71c457b9343.png" | "e1ef84c013997d42c994bf94b86b3b7930ac0fc2.png" | "e20e63e4d7b55d5fb984f2c5abd4881e35b95f38.png" | "e23c7b7efab026744c15def96a1d89d51f4e1170.png" | "e266d00d54226864559e68c907c5a886199d52fe.png" | "e297a69e11e2e5210df76efca9d388e3d224ae9f.png" | "e2af5555fd321fa5fcae278dd0a19f3f247e6a9e.png" | "e30ff6114961fd9696a8ecc145fed77878596f57.png" | "e325b9d4c53913e42331afc29502e3d6ddee05ee.png" | "e32c29fba12f58e60fe838b605e1b9031098e0ba.png" | "e33fe152152f76c0135deec7544e7096a6ba3283.png" | "e3400544e34a35508db0f0588cb837da1d5e23b9.png" | "e373561ef793c6e3e1fc8ca392b8e61f7b33a40e.png" | "e3a209a721b5aa6008d4ec09943ad451779e4802.png" | "e3a506fa511ee883e8f1ad5f08703c89d90d4b86.png" | "e3d89e0635ea7670ef65badc639067663e01625d.png" | "e3f41810599844f158d7037e4894cedfbd80d52a.png" | "e45b6956acb78380a191c7ff0087ad3968cf9876.png" | "e49daef723c962f026c283d1fdece09b830bee04.png" | "e4b6da3e0f9dfb04c13ba09e4f894d47a43b3e1c.png" | "e4ce97dd134d9380e8554502071e5763645608f7.png" | "e4db677f2daea4f07dd38b3cb776a2289d03c06c.png" | "e4df6a9805cb149fc0e93afc43e30fda7285bc56.png" | "e558f8ce524ed9738c2fc20f4109186f137d048b.png" | "e59298139398fb8dd964c798d5286a3b9d7ec147.png" | "e5ad139ca742fbe29345f25a18f0a69c8e3cb841.png" | "e5c87d6a0f14057a3d38bb417d2bd8ac19e67c15.png" | "e5d7f69b845fa906b32cdb79d3b1a5be680cf0bf.png" | "e5e7df3765be02a6eb64185c968ff1e082eb1e26.png" | "e5f46b6a680e7e1df9ca8feebdcb6763e10087a0.png" | "e60f931dca51d032196a067fae700f9066c7d77e.png" | "e64c746ecf3915ed844c5c9199bcf7d339970c90.png" | "e65f215cbb1b6875b7ddf8d5a82dd94bcffb0e5c.png" | "e675617376491fbeae2a5241f35e04d6fb995209.png" | "e68b25301494e5acb7bdf5dabb4d6ef9c7fba443.png" | "e69933e528f5fe22aea9b63481d5640c58fc2150.png" | "e6ac8c2059d57b32c87fa3cc7144525d17f7605e.png" | "e6afd1e3f85f15f1a872f76f35fd99aa3ff42cd6.png" | "e6bafc9f049cdbe4e63a4af55fcda1e98e3b7dfb.png" | "e7371e992a0438f50351ee3f52e5b2128abba699.png" | "e79cb90f423cb49faaba7749bdddfb4fea72016e.png" | "e7e9571f42e02db9abe24ca8b449e1e952cc866c.png" | "e83777557eb7cad14e80438b39af32dcd6745a29.png" | "e8e45ddba9c3131094e6d1be8343fb4d7591cc2d.webp" | "e8f049d029a5fbfef63903688390f479a9818717.png" | "e9366e0c8f7f4157942a92c6d38e760422cf8c47.png" | "e95003b4e658fdaf2c99f38894ee18839a313ab8.png" | "e963db6b0c01f23efeba7114feea37fab46ff942.png" | "e9a9737a981aa592f6ebe9d946f071a0650f0786.png" | "e9d283f0170836fe640e37769959785a276a2751.png" | "e9f0d724a500a816e011ef64ecc272c00511fdb3.png" | "ea0b24879867f86a890cd514b775d7df6ac93813.png" | "ea410fdf6a744f0f7fe56a95c9393534af4b822b.png" | "ea8c980e24cde8cb7fa986ef27ef449f8f7a3725.png" | "eaa6aeb19fce71a0b2d5ac10fa628b364819c32b.png" | "ead7cfb33eabc68f2a8ccc09361e1e7cf4d02b5c.png" | "ead95d3100dd3104e78588598f51e66395c80568.png" | "eaf2985b9d7ee62b651e40d22add4806caa28c7b.png" | "eb2db1b13ec90dffe715b5cd5fd9c3ac987549ff.png" | "eb3597684ccd1bbecda0575bb80259e3e562027d.png" | "eb41f8c298a984280c451cefb33f76b964f4ceb8.png" | "eb483b35e30d595fd274d17d82a91701b1010d95.png" | "eb49959b2a99372c64b4eb0ff15f3be087ebe0a5.png" | "eb4d7e91c773b7e0e9c02ddf1a0fbde155658c9b.png" | "eb6bd63005a20c8773d4a0add09ac89588e6ca50.png" | "eb6d95537074d126761e58c0894d920ab243faff.png" | "ebd01bb557741214501fb97096a3f85251f3d783.png" | "ebdd30c2acff605779495d7ea113b9aea27a7731.png" | "ec036e241ab8967f7434204e94cc5ca207a52c34.png" | "ec09760e314cb93eccacd4b26136ece9c3009c5b.png" | "ec147ff014a3a47e506a5978a5f329df03962393.png" | "ec568415672603378967809c29e277a1adff68a5.png" | "ec638f8de0591617e1bc8827a0769bcb2dabfc17.png" | "ec94e0a0e19587e8aeffe160d1c2ad59ebda3c5c.png" | "ecc6b5f5925b99a087ee5d64a5d7c4548fa0eb48.png" | "edae03e82e8e0c6179d69da0194c74be87e9fb94.png" | "edc6c43e46b9574a27a37dcfde2ea67faaddc9e0.png" | "edc70739fa63982754934e205e7c98c0270e8e00.png" | "ee15f5b4d9aadded73db0dce36996e86f1197cf4.png" | "ee29bf9a96a5a871271cd02130271addc7ae89a1.png" | "ee413c26f4dfa400a9a23127fff6366bdae630bc.png" | "ee476c7e4a15dd462562dfa3bc0b49413cb480ce.png" | "ee55af5fc429a3128ed17874e4e01acda767d3ee.png" | "ee66512bd9a697353be9d709eb937f617344f0ed.png" | "eec87da200ee12831147765b4c96cd84db0e9750.png" | "eecbe8b06eb481d15cef84621a16573cddabd8bc.png" | "ef1a5495d15c83be4d879679600520550844a2a1.png" | "ef2fe6d7a1d1363d01d1ef8a4839141758603a3e.png" | "ef602a8bc2e65e4fd8b0cdbd371239b100f8743c.png" | "ef9d81aca77cf1791f69d743aee57e203922ddce.png" | "efb8e3a2ff8d2ee2cf6c2bf256984972ac14f649.png" | "example.png" | "f0ac50adb6f0ed37792451d425d6bcaaf56e3009.png" | "f0e169504509aece829c3be1b24ee7ef35c2ab27.png" | "f1185ab1c3b68cec6fc76b96f61f76fc094a032d.png" | "f1346070f53cec6b48c40933354fb20f73297419.png" | "f15e3efe1034baaa48aa042bdbfb56a85762f9c2.png" | "f1613f6a7842203ae9ebb3515ae44a877a720d4a.png" | "f1765c1e720583ed58d3d7860c6a16d73031c229.png" | "f1ecc82fa28e99328f81ef20e54f383ecea27825.png" | "f2211e4b002a672f70a710fbfab5f6a410595443.png" | "f275a0a3881bda75f80dbeb3a10bfc27438c2ea1.png" | "f2b27070cf76c974c2e44142f2fd1aacba65c881.png" | "f2c0c1d2139fcc092a3feb402825a77dd2c3d379.png" | "f2cb2f73ecf2ba3116c08e346efb298f17613e79.png" | "f2d276570a483cab13ad28d291daa31a86de70c5.png" | "f2e741ac013e99b5edb990b5ca72e1ae0d88965d.png" | "f329e363a61f34ee11f959fa59f09d5d7bc69b96.png" | "f3456b360e7f353b77a1fae39b3c2b1803ff8f38.png" | "f345cb123cf65a63aa20b5339f2bf49b2cee4e92.png" | "f34ccb2535b7ad467cd4467de70dabf0095872da.png" | "f3574abc1d16a2ff56f2d5fee5b081f5c620549c.png" | "f35afb690f1b940a3ae73617294e30eac1f82039.png" | "f36f731a5dca4bd7cbcd0fef3463875852e026a2.png" | "f38f4112f741b208900ee6ebc2e3e550a1ae166e.png" | "f39b77c7691f14b7e40a61cfb197a372a56eb7e2.png" | "f3ce44a969a97f96cf8921289c53cad62a9ff05d.png" | "f4024c668f78bcc6eff9328f3541b71cbff5c486.png" | "f43e54b082194038aaf22a4336451220b7fa2a35.png" | "f47773b31079426c3e2a07216405e77525cb8fa9.png" | "f4eda5cccd24d521ceaec2acb40791bfee0f83bf.png" | "f4f53445ccbf174dafbb8296b0f2d1dfcd0abdad.png" | "f505db5e4b7c696fb667033cf52ad1df561e8df4.png" | "f5166f0f08b39b548f26f8293ef4a854392dd774.png" | "f51e157f4e5a2d1c3399f0fcda8b5cba3dc8de25.png" | "f53a2595f0317b9ab50ba47def036ffb6ede0d99.png" | "f55a13636c8788280f36f32daeaa861844e02fcd.png" | "f55c5760e804cf7549185e2d9f10ba9a17fbb4aa.png" | "f55f0068c1236574b13f7fd593bcbb71df141e94.png" | "f56183ab0458600eae8e12ae87eef456615ba417.png" | "f5d1b7bd86bbf172aa52eb65c52ae54a3b44f6fe.png" | "f61693107fa2c517d1b07281c5497e4f87bf0d01.png" | "f65242f62ccc2943cf45cae3c2c5936bcd6a4fe5.png" | "f6f18891d3b4b9bbaf8357b394c005f22cc3454e.png" | "f72c37be414dcb7b487ffc266666ea7d3f88c96c.png" | "f762070b5ea46ac69b1fb81b6cb508bcfdceec14.png" | "f7c3e17b40f4dbe64a3c2182bdc9e8767440240c.png" | "f7ee5793e5e25faec0ddb48faee7aee1dc80408b.png" | "f84498144cbd6f5860afe8a3b81ddc2e45ed8a1b.png" | "f87f2dba1160a6449d8974ec385dc775f61e2bc2.png" | "f897aacfeca6026a1c20271fe14f9bc216d35296.png" | "f8b427670a00f7601027e037b353371f2433de6e.png" | "f8bce9145c9cbfe8e4dad07f33be34307293a83e.png" | "f8fa7c28277e95ea7db124c7c80795d2eac36e07.png" | "f91e1389fcff4177187ca99375a9dff6afb15907.png" | "f9ae0a924dcf9a20b801a57e91313378eae12972.png" | "f9fcf3eb1fb72f64e7f886162f767a5e860fcb3c.png" | "fa0b31274b7bec7e8bde8bdff4ee0c7c89703bea.png" | "fa8f7b0cf8fd21982cbe3f55fe2558bcd2c75ccb.png" | "fae7c441f5708add5b6ec76785c74a719f02517d.png" | "faf0e2814d63f5387ecbf10b8027d96058500c27.png" | "faf299430786f46414dde4dbb94c447525af33c4.png" | "fafa8c98864e4bcdcef97396ce2f9eb3946da9a1.png" | "fb2fbc3904ed87b880d1d4f1cec6ee70fc76377a.png" | "fb6b33dcb9ba2c6a8944f2d059efc6091872bba4.png" | "fb93d7297328bb1a362261931b7ef90269c8cc61.png" | "fba97631ef281b446363bfa54057e549417e61b2.png" | "fbbc8eb3aea8709a703268697f4ba6078d5743a0.png" | "fbf27b0b9340fea0f3efe03ea790f21df304d2a7.png" | "fbf8897d4e3809331e3d338efa5c558f4f14d7cb.png" | "fc34512a24cd828835fdcf723c4175ace64630e9.png" | "fc38e7f50390b852278c7181438a963190804074.png" | "fc55faab8a6882bb3133f89a5dd59dbacda32048.png" | "fc923327a9a94c8f29244d55faea47ab9e8240e4.png" | "fca7f736ab00a5acc6d4ecc822699926db5697fd.png" | "fcb495dd9e8f53038f41cfdd3638ea6ed821038e.png" | "fcb87153349f607ca9700ffc201dbb6297244575.png" | "fcce60ee5a3b6f4a36fca62d9527e546520f50cb.png" | "fcdfdfa6e9e9f51fd2f4b6a9e22c0b6c0f1ee9fa.png" | "fd06d6b326990406bc751d8a77c703997ee16d9f.png" | "fd0a279e1ba79eb915c84fcdb52d2e7eed8e14d7.png" | "fd1dabb3e9bdbaa3100b517a7ba9879e1a7787ce.png" | "fd2a8bc59425fcb4d9291468d569d773e0e2ef0e.png" | "fd6f60c02695e4826496de1a8fdf805aacdab516.png" | "fd804b8901da59cbeff4acd16d1e510a04c966cb.png" | "fd9494b192d1c4fee3fcdc7e409a2459f9109714.png" | "fd9d2f452b780f3c57d21bb4e248541983c453f2.png" | "fdc2a917dd1c7d373f517478fd8a6ded4d8d0686.png" | "fe1e2e45c4051e2d37278102c136475453b4b31a.png" | "fe2f68d3a9522d9a1c60fc8dc45605b3b4b949a2.png" | "febd902e0a8a1b2d0b15170e0012523ffb64ea55.png" | "ff09c4755896194c6afbf196635513269c71f8f3.png" | "ffaca78dd81e8661f2ba8974ca06a150302d2e11.png" | "sOA4nLYCSC1J0KN64N5qJnZDcwO8hq64pcv0xLLtg.png"
export type Enum_LoadImageMask_image = Enum_LoadImage_image
export type Enum_ImageReceiver_image = Enum_LoadImage_image
export type Enum_PromptExtractor_$3$3Inspire_image = Enum_LoadImage_image
export type Enum_LoadAndResizeImage_image = Enum_LoadImage_image
export type Enum_Image_Load_with_Metadata_$1WLSH$2_image = Enum_LoadImage_image
export type Enum_LoadImageMask_channel = "alpha" | "blue" | "green" | "red"
export type Enum_ImageToMask_channel = Enum_LoadImageMask_channel
export type Enum_LoadImageAsMaskFromUrl_channel = Enum_LoadImageMask_channel
export type Enum_LoadAndResizeImage_mask_channel = Enum_LoadImageMask_channel
export type Enum_Image_to_Latent_Mask_channel = Enum_LoadImageMask_channel
export type Enum_ImageScale_upscale_method = "area" | "bicubic" | "bilinear" | "lanczos" | "nearest-exact"
export type Enum_ImageScaleBy_upscale_method = Enum_ImageScale_upscale_method
export type Enum_ImageScaleToTotalPixels_upscale_method = Enum_ImageScale_upscale_method
export type Enum_ADE$_UpscaleAndVAEEncode_scale_method = Enum_ImageScale_upscale_method
export type Enum_ImagePadForOutpaintTargetSize_upscale_method = Enum_ImageScale_upscale_method
export type Enum_ImageResizeKJ_upscale_method = Enum_ImageScale_upscale_method
export type Enum_ImageBatchMultiple$6_method = Enum_ImageScale_upscale_method
export type Enum_ConditioningSetMask_set_cond_area = "default" | "mask bounds"
export type Enum_ADE$_PairedConditioningSetMask_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_ADE$_ConditioningSetMask_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_ADE$_PairedConditioningSetMaskAndCombine_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_ADE$_ConditioningSetMaskAndCombine_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_RegionalConditioningSimple_$3$3Inspire_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_RegionalConditioningColorMask_$3$3Inspire_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_ConditioningSetMaskAndCombine_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_ConditioningSetMaskAndCombine3_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_ConditioningSetMaskAndCombine4_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_ConditioningSetMaskAndCombine5_set_cond_area = Enum_ConditioningSetMask_set_cond_area
export type Enum_KSamplerAdvanced_add_noise = "disable" | "enable"
export type Enum_KSamplerAdvanced_return_with_leftover_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_Fooocus$_KSamplerAdvanced_add_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_Fooocus$_KSamplerAdvanced_return_with_leftover_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_UnsamplerHookProvider_normalize = Enum_KSamplerAdvanced_add_noise
export type Enum_UnsamplerDetailerHookProvider_normalize = Enum_KSamplerAdvanced_add_noise
export type Enum_AppInfo_auto_save = Enum_KSamplerAdvanced_add_noise
export type Enum_RandomPrompt_random_sample = Enum_KSamplerAdvanced_add_noise
export type Enum_PromptImage_save_to_image = Enum_KSamplerAdvanced_add_noise
export type Enum_SaveImageAndMetadata$__metadata = Enum_KSamplerAdvanced_add_noise
export type Enum_LoadImagesFromPath_white_bg = Enum_KSamplerAdvanced_add_noise
export type Enum_LoadImagesFromPath_watcher = Enum_KSamplerAdvanced_add_noise
export type Enum_TextToNumber_random_number = Enum_KSamplerAdvanced_add_noise
export type Enum_DynamicDelayProcessor_replace_output = Enum_KSamplerAdvanced_add_noise
export type Enum_DWPreprocessor_detect_hand = Enum_KSamplerAdvanced_add_noise
export type Enum_DWPreprocessor_detect_body = Enum_KSamplerAdvanced_add_noise
export type Enum_DWPreprocessor_detect_face = Enum_KSamplerAdvanced_add_noise
export type Enum_DWPreprocessor_scale_stick_for_xinsr_cn = Enum_KSamplerAdvanced_add_noise
export type Enum_HEDPreprocessor_safe = Enum_KSamplerAdvanced_add_noise
export type Enum_FakeScribblePreprocessor_safe = Enum_KSamplerAdvanced_add_noise
export type Enum_LeReS$7DepthMapPreprocessor_boost = Enum_KSamplerAdvanced_add_noise
export type Enum_LineArtPreprocessor_coarse = Enum_KSamplerAdvanced_add_noise
export type Enum_OpenposePreprocessor_detect_hand = Enum_KSamplerAdvanced_add_noise
export type Enum_OpenposePreprocessor_detect_body = Enum_KSamplerAdvanced_add_noise
export type Enum_OpenposePreprocessor_detect_face = Enum_KSamplerAdvanced_add_noise
export type Enum_OpenposePreprocessor_scale_stick_for_xinsr_cn = Enum_KSamplerAdvanced_add_noise
export type Enum_PiDiNetPreprocessor_safe = Enum_KSamplerAdvanced_add_noise
export type Enum_Scribble$_PiDiNet$_Preprocessor_safe = Enum_KSamplerAdvanced_add_noise
export type Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_body = Enum_KSamplerAdvanced_add_noise
export type Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_face = Enum_KSamplerAdvanced_add_noise
export type Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_hand = Enum_KSamplerAdvanced_add_noise
export type Enum_Disable_Enable_Switch_$1JPS$2_disable_enable_out = Enum_KSamplerAdvanced_add_noise
export type Enum_Enable_Disable_Switch_$1JPS$2_enable_disable_out = Enum_KSamplerAdvanced_add_noise
export type Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_body_out = Enum_KSamplerAdvanced_add_noise
export type Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_face_out = Enum_KSamplerAdvanced_add_noise
export type Enum_CtrlNet_OpenPose_Pipe_$1JPS$2_openpose_hand_out = Enum_KSamplerAdvanced_add_noise
export type Enum_BNK$_Unsampler_normalize = Enum_KSamplerAdvanced_add_noise
export type Enum_BNK$_TiledKSamplerAdvanced_add_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_BNK$_TiledKSamplerAdvanced_return_with_leftover_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_BNK$_TiledKSamplerAdvanced_preview = Enum_KSamplerAdvanced_add_noise
export type Enum_ttN_pipeKSamplerAdvanced$_v2_add_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_ttN_pipeKSamplerAdvanced$_v2_return_with_leftover_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_ttN_pipeKSamplerAdvanced_add_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_ttN_pipeKSamplerAdvanced_return_with_leftover_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_KSampler_Cycle_tiled_vae = Enum_KSamplerAdvanced_add_noise
export type Enum_KSampler_Cycle_scale_denoise = Enum_KSamplerAdvanced_add_noise
export type Enum_KSampler_Cycle_pos_add_strength_scaling = Enum_KSamplerAdvanced_add_noise
export type Enum_KSampler_Cycle_neg_add_strength_scaling = Enum_KSamplerAdvanced_add_noise
export type Enum_KSampler_Cycle_steps_scaling = Enum_KSamplerAdvanced_add_noise
export type Enum_KSamplerAdvanced_$1WLSH$2_add_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_KSamplerAdvanced_$1WLSH$2_return_with_leftover_noise = Enum_KSamplerAdvanced_add_noise
export type Enum_LatentRotate_rotation = "180 degrees" | "270 degrees" | "90 degrees" | "none"
export type Enum_LatentFlip_flip_method = "x-axis: vertically" | "y-axis: horizontally"
export type Enum_LoraLoader_lora_name = "LogoRedmondV2-Logo-LogoRedmAF.safetensors" | "SpreadAssMS.safetensors" | "ip-adapter-faceid-plusv2_sd15_lora.safetensors" | "ip-adapter-faceid_sd15_lora.safetensors" | "ipadapter\\ip-adapter-faceid-plusv2_sd15_lora.safetensors" | "ipadapter\\ip-adapter-faceid_sd15_lora.safetensors" | "lcm\\SD1.5\\pytorch_lora_weights.safetensors" | "lcm\\pytorch_lora_weights.safetensors" | "pixel-art-xl-v1.1.safetensors" | "pixelgirl.safetensors" | "samsung_line_art.safetensors" | "sd15\\Character Design.safetensors" | "sd15\\Isometric Cutaway.safetensors" | "sd15\\Stained Glass Portrait.safetensors" | "sd15\\animemix_16.safetensors" | "sd15\\animemix_v3_offset.safetensors" | "sd15\\chars\\dark_magician_girl.safetensors" | "sd15\\chars\\yorha_noDOT_2_type_b.safetensors" | "sd15\\colors\\LowRa.safetensors" | "sd15\\colors\\theovercomer8sContrastFix_sd15.safetensors" | "sd15\\colors\\theovercomer8sContrastFix_sd21768.safetensors" | "sd15\\styles\\ConstructionyardAIV3.safetensors" | "sd15\\styles\\StonepunkAI-000011.safetensors" | "sd15\\styles\\ToonYou_Style.safetensors" | "sd15\\styles\\baroqueAI.safetensors" | "sd15\\styles\\pixel_f2.safetensors" | "sd15\\test\\Moxin_10.safetensors" | "sd15\\test\\animeLineartMangaLike_v30MangaLike.safetensors" | "sd15\\utils\\charTurnBetaLora.safetensors" | "sleepygimp.safetensors" | "xl\\Flat style-000014.safetensors" | "xl\\moebzxl.safetensors" | "xl\\pxll.safetensors" | "xl\\sdxl-baton-v02-e93.safetensors" | "xl\\watson_lora_v2_128.safetensors" | "z-arthur\\AmateurPornStyle-v1.safetensors"
export type Enum_LoraLoaderModelOnly_lora_name = Enum_LoraLoader_lora_name
export type Enum_ADE$_RegisterLoraHook_lora_name = Enum_LoraLoader_lora_name
export type Enum_ADE$_RegisterLoraHookModelOnly_lora_name = Enum_LoraLoader_lora_name
export type Enum_AV$_LoraLoader_lora_name = Enum_LoraLoader_lora_name
export type Enum_LoraLoader$8pysssss_lora_name = Enum_LoraLoader_lora_name
export type Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_lora_name = Enum_LoraLoader_lora_name
export type Enum_LoraLoaderBlockWeight_$3$3Inspire_lora_name = Enum_LoraLoader_lora_name
export type Enum_LoraBlockInfo_$3$3Inspire_lora_name = Enum_LoraLoader_lora_name
export type Enum_MakeLBW_$3$3Inspire_lora_name = Enum_LoraLoader_lora_name
export type Enum_FluxBlockLoraLoader_lora_name = Enum_LoraLoader_lora_name
export type Enum_CR_Load_Scheduled_LoRAs_default_lora = Enum_LoraLoader_lora_name
export type Enum_LorasForFluxParams$6_lora_1 = Enum_LoraLoader_lora_name
export type Enum_CLIPLoader_clip_name = "Stable-Cascade\\model.safetensors" | "clip_l.safetensors" | "t5-base\\model.safetensors" | "t5\\google_t5-v1_1-xxl_encoderonly-fp16.safetensors"
export type Enum_DualCLIPLoader_clip_name1 = Enum_CLIPLoader_clip_name
export type Enum_DualCLIPLoader_clip_name2 = Enum_CLIPLoader_clip_name
export type Enum_TripleCLIPLoader_clip_name1 = Enum_CLIPLoader_clip_name
export type Enum_TripleCLIPLoader_clip_name2 = Enum_CLIPLoader_clip_name
export type Enum_TripleCLIPLoader_clip_name3 = Enum_CLIPLoader_clip_name
export type Enum_CLIPLoader_type = "mochi" | "sd3" | "stable_audio" | "stable_cascade" | "stable_diffusion"
export type Enum_UNETLoader_unet_name = "FLUX1\\flux1-dev-fp8.safetensors" | "FLUX1\\flux1-schnell-fp8.safetensors" | "Stable-Cascade\\stage_b.safetensors" | "Stable-Cascade\\stage_b_bf16.safetensors" | "Stable-Cascade\\stage_b_lite_bf16.safetensors" | "Stable-Cascade\\stage_c_lite_bf16.safetensors" | "xl-inpaint-0.1\\diffusion_pytorch_model.fp16.safetensors"
export type Enum_UNETLoader_weight_dtype = "default" | "fp8_e4m3fn" | "fp8_e4m3fn_fast" | "fp8_e5m2"
export type Enum_DualCLIPLoader_type = "flux" | "sd3" | "sdxl"
export type Enum_ControlNetLoader_control_net_name = "OpenPoseXL2.safetensors" | "control-lora-canny-rank128.safetensors" | "control-lora-canny-rank256.safetensors" | "control-lora-depth-rank128.safetensors" | "control-lora-depth-rank256.safetensors" | "control-lora-recolor-rank128.safetensors" | "control-lora-sketch-rank128-metadata.safetensors" | "control_depth-fp16.safetensors" | "control_openpose-fp16.safetensors" | "control_scribble-fp16.safetensors" | "control_v11p_sd15_canny_fp16.safetensors" | "control_v11p_sd15_lineart_fp16.safetensors" | "control_v11p_sd15_normalbae_fp16.safetensors" | "control_v11p_sd15_softedge_fp16.safetensors" | "control_v11p_sd15s2_lineart_anime_fp16.safetensors" | "control_v11u_sd15_tile.pth" | "control_v11u_sd15_tile_fp16.safetensors" | "t2iadapter_canny_sd14v1.pth" | "t2iadapter_sketch_sd14v1.pth"
export type Enum_DiffControlNetLoader_control_net_name = Enum_ControlNetLoader_control_net_name
export type Enum_AV$_ControlNetLoader_control_net_name = Enum_ControlNetLoader_control_net_name
export type Enum_StyleModelLoader_style_model_name = '🔴' // never
export type Enum_CLIPVisionLoader_clip_name = "SD1.5\\CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors" | "SD1.5\\model.safetensors" | "SD1.5\\pytorch_model.bin" | "SDXL\\pytorch_model.bin" | "clip_vit14.bin"
export type Enum_AV$_IPAdapterPipe_clip_name = Enum_CLIPVisionLoader_clip_name
export type Enum_GLIGENLoader_gligen_name = '🔴' // never
export type Enum_CheckpointLoader_config_name = "anything_v3.yaml" | "v1-inference.yaml" | "v1-inference_clip_skip_2.yaml" | "v1-inference_clip_skip_2_fp16.yaml" | "v1-inference_fp16.yaml" | "v1-inpainting-inference.yaml" | "v2-inference-v.yaml" | "v2-inference-v_fp32.yaml" | "v2-inference.yaml" | "v2-inference_fp32.yaml" | "v2-inpainting-inference.yaml"
export type Enum_Checkpoint_Loader_config_name = Enum_CheckpointLoader_config_name
export type Enum_DiffusersLoader_model_path = "Marigold"
export type Enum_Diffusers_Model_Loader_model_path = Enum_DiffusersLoader_model_path
export type Enum_LoadLatent_latent = '🔴' // never
export type Enum_LatentBatchSeedBehavior_seed_behavior = "fixed" | "random"
export type Enum_True_Random$5org_Number_Generator_mode = Enum_LatentBatchSeedBehavior_seed_behavior
export type Enum_HypernetworkLoader_hypernetwork_name = '🔴' // never
export type Enum_UpscaleModelLoader_model_name = "4x-AnimeSharp.pth" | "4x-UltraSharp.pth" | "4x_NMKD-Siax_200k.pth" | "4x_foolhardy_Remacri.pth" | "8x_NMKD-Superscale_150000_G.pth" | "ESRGAN_4x.pth" | "RealESRGAN_x2.pth" | "RealESRGAN_x4.pth" | "ldsr\\last.ckpt"
export type Enum_CR_Upscale_Image_upscale_model = Enum_UpscaleModelLoader_model_name
export type Enum_ttN_hiresfixScale_model_name = Enum_UpscaleModelLoader_model_name
export type Enum_Upscale_Model_Loader_model_name = Enum_UpscaleModelLoader_model_name
export type Enum_ImageBlend_blend_mode = "difference" | "multiply" | "normal" | "overlay" | "screen" | "soft_light"
export type Enum_ImageQuantize_dither = "bayer-16" | "bayer-2" | "bayer-4" | "bayer-8" | "floyd-steinberg" | "none"
export type Enum_MaskComposite_operation = "add" | "and" | "multiply" | "or" | "subtract" | "xor"
export type Enum_PorterDuffImageComposite_mode = "ADD" | "CLEAR" | "DARKEN" | "DST" | "DST_ATOP" | "DST_IN" | "DST_OUT" | "DST_OVER" | "LIGHTEN" | "MULTIPLY" | "OVERLAY" | "SCREEN" | "SRC" | "SRC_ATOP" | "SRC_IN" | "SRC_OUT" | "SRC_OVER" | "XOR"
export type Enum_SamplerDPMPP$_3M$_SDE_noise_device = "cpu" | "gpu"
export type Enum_SamplerDPMPP$_2M$_SDE_noise_device = Enum_SamplerDPMPP$_3M$_SDE_noise_device
export type Enum_SamplerDPMPP$_SDE_noise_device = Enum_SamplerDPMPP$_3M$_SDE_noise_device
export type Enum_SamplerDPMPP$_2M$_SDE_solver_type = "heun" | "midpoint"
export type Enum_ModelSamplingDiscrete_sampling = "eps" | "lcm" | "v_prediction" | "x0"
export type Enum_ModelSamplingContinuousEDM_sampling = "edm_playground_v2.5" | "eps" | "v_prediction"
export type Enum_ModelSamplingContinuousV_sampling = "v_prediction"
export type Enum_SaveAnimatedWEBP_method = "default" | "fastest" | "slowest"
export type Enum_PhotoMakerLoader_photomaker_model_name = '🔴' // never
export type Enum_Morphology_operation = "bottom_hat" | "close" | "dilate" | "erode" | "gradient" | "open" | "top_hat"
export type Enum_AlignYourStepsScheduler_model_type = "SD1" | "SDXL" | "SVD"
export type Enum_SamplerEulerCFGpp_version = "alternative" | "regular"
export type Enum_LoadAudio_audio = '🔴' // never
export type Enum_CLIPTextEncodeSD3_empty_padding = "empty_prompt" | "none"
export type Enum_SetUnionControlNetType_type = "auto" | "canny/lineart/anime_lineart/mlsd" | "depth" | "hed/pidi/scribble/ted" | "normal" | "openpose" | "repaint" | "segment" | "tile"
export type Enum_LoraSave_lora_type = "full_diff" | "standard"
export type Enum_TorchCompileModel_backend = "cudagraphs" | "inductor"
export type Enum_TorchCompileModelFluxAdvanced_backend = Enum_TorchCompileModel_backend
export type Enum_TorchCompileVAE_backend = Enum_TorchCompileModel_backend
export type Enum_TorchCompileControlNet_backend = Enum_TorchCompileModel_backend
export type Enum_CivitAI$_Lora$_Loader_lora_name = "LogoRedmondV2-Logo-LogoRedmAF.safetensors" | "SpreadAssMS.safetensors" | "ip-adapter-faceid-plusv2_sd15_lora.safetensors" | "ip-adapter-faceid_sd15_lora.safetensors" | "ipadapter\\ip-adapter-faceid-plusv2_sd15_lora.safetensors" | "ipadapter\\ip-adapter-faceid_sd15_lora.safetensors" | "lcm\\SD1.5\\pytorch_lora_weights.safetensors" | "lcm\\pytorch_lora_weights.safetensors" | "none" | "pixel-art-xl-v1.1.safetensors" | "pixelgirl.safetensors" | "samsung_line_art.safetensors" | "sd15\\Character Design.safetensors" | "sd15\\Isometric Cutaway.safetensors" | "sd15\\Stained Glass Portrait.safetensors" | "sd15\\animemix_16.safetensors" | "sd15\\animemix_v3_offset.safetensors" | "sd15\\chars\\dark_magician_girl.safetensors" | "sd15\\chars\\yorha_noDOT_2_type_b.safetensors" | "sd15\\colors\\LowRa.safetensors" | "sd15\\colors\\theovercomer8sContrastFix_sd15.safetensors" | "sd15\\colors\\theovercomer8sContrastFix_sd21768.safetensors" | "sd15\\styles\\ConstructionyardAIV3.safetensors" | "sd15\\styles\\StonepunkAI-000011.safetensors" | "sd15\\styles\\ToonYou_Style.safetensors" | "sd15\\styles\\baroqueAI.safetensors" | "sd15\\styles\\pixel_f2.safetensors" | "sd15\\test\\Moxin_10.safetensors" | "sd15\\test\\animeLineartMangaLike_v30MangaLike.safetensors" | "sd15\\utils\\charTurnBetaLora.safetensors" | "sleepygimp.safetensors" | "xl\\Flat style-000014.safetensors" | "xl\\moebzxl.safetensors" | "xl\\pxll.safetensors" | "xl\\sdxl-baton-v02-e93.safetensors" | "xl\\watson_lora_v2_128.safetensors" | "z-arthur\\AmateurPornStyle-v1.safetensors"
export type Enum_CivitAI$_Lora$_Loader_download_path = "models\\loras"
export type Enum_CivitAI$_Checkpoint$_Loader_ckpt_name = "AOM3A1_orangemixs.safetensors" | "AOM3A3_orangemixs.safetensors" | "Deliberate-inpainting.safetensors" | "FLUX1\\flux1-dev-fp8.safetensors" | "Sevenof9V3.safetensors" | "albedobaseXL_v13.safetensors" | "albedobaseXL_v21.safetensors" | "angel1_36224.safetensors" | "anything-v3-fp16-pruned.safetensors" | "autismmixSDXL_autismmixConfetti.safetensors" | "cartoonArcadiaSDXLSD1_xenoArcadiaCX.safetensors" | "copaxTimelessxlSDXL1_v8.safetensors" | "deliberate_v2.safetensors" | "dndMapGenerator_v3.safetensors" | "illustriousXL_v01.safetensors" | "lyriel_v15.safetensors" | "mistoonAnime_v10.safetensors" | "mistoonAnime_v10Inpainting.safetensors" | "none" | "noobaiXLNAIXL_earlyAccessVersion.safetensors" | "noobaiXLNAIXL_vPredTestVersion.safetensors" | "ponyDiffusionV6XL_v6StartWithThisOne.safetensors" | "realisticVisionV20_v20.safetensors" | "realisticVisionV51_v51VAE.safetensors" | "revAnimated_v121.safetensors" | "revAnimated_v121Inp-inpainting.safetensors" | "revAnimated_v122.safetensors" | "sd_xl_base_1.0.safetensors" | "sd_xl_refiner_1.0.safetensors" | "sdxlMergeheaven_betaM15.safetensors" | "toonyou_beta1.safetensors" | "toonyou_beta6.safetensors" | "upscale\\x4-upscaler-ema.safetensors" | "v1-5-pruned-emaonly.ckpt" | "v1-5-pruned-emaonly.safetensors" | "v2-1_512-ema-pruned.safetensors" | "v2-1_768-ema-pruned.safetensors" | "wd-1-5-beta2-fp16.safetensors" | "zero123\\stable_zero123.ckpt"
export type Enum_CivitAI$_Checkpoint$_Loader_download_path = "models\\checkpoints"
export type Enum_AlphaChanelAddByMask_method = "default" | "invert"
export type Enum_AlphaChanelAsMask_method = Enum_AlphaChanelAddByMask_method
export type Enum_ImageBatchFork_priority = "first" | "second"
export type Enum_ImageCompositeAbsolute_background = "images_a" | "images_b"
export type Enum_ImageCompositeAbsoluteByContainer_background = Enum_ImageCompositeAbsolute_background
export type Enum_ImageCompositeRelative_background = Enum_ImageCompositeAbsolute_background
export type Enum_ImageCompositeRelativeByContainer_background = Enum_ImageCompositeAbsolute_background
export type Enum_ImageCompositeAbsolute_method = "matrix" | "pair"
export type Enum_ImageCompositeAbsoluteByContainer_method = Enum_ImageCompositeAbsolute_method
export type Enum_ImageCompositeRelative_method = Enum_ImageCompositeAbsolute_method
export type Enum_ImageCompositeRelativeByContainer_method = Enum_ImageCompositeAbsolute_method
export type Enum_ImageCompositeRelative_container_size_type = "max" | "sum" | "sum_height" | "sum_width"
export type Enum_ImageContainerInheritanceAdd_method = "for_each" | "single"
export type Enum_ImageContainerInheritanceScale_method = Enum_ImageContainerInheritanceAdd_method
export type Enum_ImageContainerInheritanceMax_method = "for_each_matrix" | "for_each_pair" | "single"
export type Enum_ImageContainerInheritanceSum_method = Enum_ImageContainerInheritanceMax_method
export type Enum_ImageContainerInheritanceSum_container_size_type = "sum" | "sum_height" | "sum_width"
export type Enum_ImageDrawArc_method = "bicubic" | "bilinear" | "box" | "hamming" | "lanczos" | "nearest"
export type Enum_ImageDrawArcByContainer_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawChord_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawChordByContainer_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawEllipse_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawEllipseByContainer_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawLine_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawLineByContainer_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawPieslice_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawPiesliceByContainer_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawRectangle_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawRectangleByContainer_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawRectangleRounded_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawRectangleRoundedByContainer_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawPolygon_method = Enum_ImageDrawArc_method
export type Enum_ImageTransformResizeAbsolute_method = Enum_ImageDrawArc_method
export type Enum_ImageTransformResizeRelative_method = Enum_ImageDrawArc_method
export type Enum_ImageTransformResizeClip_method = Enum_ImageDrawArc_method
export type Enum_ImageTransformCropCorners_method = Enum_ImageDrawArc_method
export type Enum_ImageTransformRotate_method = Enum_ImageDrawArc_method
export type Enum_ImageDrawRectangleRounded_top_left_corner = "false" | "true"
export type Enum_ImageDrawRectangleRounded_top_right_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageDrawRectangleRounded_bottom_right_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageDrawRectangleRounded_bottom_left_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageDrawRectangleRoundedByContainer_top_left_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageDrawRectangleRoundedByContainer_top_right_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageDrawRectangleRoundedByContainer_bottom_right_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageDrawRectangleRoundedByContainer_bottom_left_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageEffectsLensZoomBurst_stabilization = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageNoiseBeta_monochromatic = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageNoiseBeta_invert = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageNoiseBinomial_monochromatic = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageNoiseBinomial_invert = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageNoiseBytes_monochromatic = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageNoiseBytes_invert = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageNoiseGaussian_monochromatic = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageNoiseGaussian_invert = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageSegmentation_alpha_matting = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageSegmentation_post_process_mask = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageSegmentationCustom_alpha_matting = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageSegmentationCustom_post_process_mask = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageSegmentationCustomAdvanced_alpha_matting = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageSegmentationCustomAdvanced_post_process_mask = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageTransformCropCorners_top_left_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageTransformCropCorners_top_right_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageTransformCropCorners_bottom_right_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageTransformCropCorners_bottom_left_corner = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageTransformRotate_expand = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_SEGSUpscaler_supersample = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_SEGSUpscalerPipe_supersample = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_saveTextToFile_$_O_append = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Text2Image_$_O_expand = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_CR_Upscale_Image_supersample = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_CR_Apply_Multi_Upscale_supersample = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_InjectLatentNoise$6_normalize = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ttN_pipeEncodeConcat_toggle = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ttN_pipeLoraStack_toggle = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ttN_textDebug_print_to_console = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ttN_hiresfixScale_rescale_after_model = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ttN_hiresfixScale_output_latent = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_DF$_Absolute$_value_negative_out = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_DF$_Get$_latent$_size_original = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_DF$_Sinus_arcSin = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_DF$_Cosines_arcCos = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_DF$_Tangent_arcTan = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Create_Grid_Image_include_subfolders = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Canny_Filter_enable_threshold = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Dragan_Photography_Filter_colorize = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Filter_Adjustments_detail_enhance = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Gradient_Map_flip_left_right = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_High_Pass_Filter_color_output = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_High_Pass_Filter_neutral_background = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Load_RGBA = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Load_filename_text_extension = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Padding_feather_second_pass = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Resize_supersample = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Save_filename_number_start = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Save_optimize_image = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Save_lossless_webp = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Save_show_history = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Save_show_history_by_prefix = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Save_embed_workflow = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Save_show_previews = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Seamless_Texture_tiled = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Latent_Upscale_by_Factor_$1WAS$2_align = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Load_Image_Batch_allow_RGBA_output = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Load_Image_Batch_filename_text_extension = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_MiDaS_Depth_Approximation_use_cpu = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_MiDaS_Depth_Approximation_invert_depth = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_MiDaS_Mask_Image_use_cpu = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_MiDaS_Mask_Image_threshold = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Number_Input_Condition_return_boolean = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Text_Add_Tokens_print_current_tokens = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Text_Add_Token_by_Input_print_current_tokens = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Text_Concatenate_clean_whitespace = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_Image_Load_with_Metadata_$1WLSH$2_verbose = Enum_ImageDrawRectangleRounded_top_left_corner
export type Enum_ImageEffectsLensZoomBurst_method = "circle" | "point"
export type Enum_ImageEffectsLensChromaticAberration_method = "constant" | "edge" | "reflect"
export type Enum_ImageTransformPaddingAbsolute_method = Enum_ImageEffectsLensChromaticAberration_method
export type Enum_ImageTransformPaddingRelative_method = Enum_ImageEffectsLensChromaticAberration_method
export type Enum_ImageEffectsLensChromaticAberration_transpose = "none" | "reflect" | "rotate"
export type Enum_ImageEffectsLensChromaticAberration_colors = "gb" | "rb" | "rg"
export type Enum_ImageEffectsLensBokeh_blur_type = "bilateral" | "none" | "stack"
export type Enum_ImageEffectsLensBokeh_method = "dilate" | "filter"
export type Enum_ImageEffectsLensOpticAxis_lens_shape = "circle" | "corners" | "rectangle" | "square"
export type Enum_ImageEffectsLensOpticAxis_lens_edge = "around" | "symmetric"
export type Enum_ImageEffectsLensVignette_lens_edge = Enum_ImageEffectsLensOpticAxis_lens_edge
export type Enum_ImageEffectsLensVignette_lens_shape = "circle" | "rectangle"
export type Enum_ImageNoiseBeta_channels = "a" | "b" | "ba" | "g" | "ga" | "gb" | "r" | "ra" | "rb" | "rg" | "rgb" | "rgba"
export type Enum_ImageNoiseBinomial_channels = Enum_ImageNoiseBeta_channels
export type Enum_ImageNoiseBytes_channels = Enum_ImageNoiseBeta_channels
export type Enum_ImageNoiseGaussian_channels = Enum_ImageNoiseBeta_channels
export type Enum_ImageSegmentation_model = "isnet-general-use" | "isnetis" | "modnet-p" | "modnet-w" | "silueta" | "u2net" | "u2net_cloth_seg" | "u2net_human_seg" | "u2netp"
export type Enum_ImageSegmentationCustom_model = "silueta.onnx" | "u2net.onnx" | "u2net_human_seg.onnx"
export type Enum_ImageSegmentationCustomAdvanced_model = Enum_ImageSegmentationCustom_model
export type Enum_ONNXDetectorProvider_model_name = Enum_ImageSegmentationCustom_model
export type Enum_ImageText_font = "Roboto-Regular.ttf"
export type Enum_ImageTextOutlined_font = Enum_ImageText_font
export type Enum_ImageTextMultiline_font = Enum_ImageText_font
export type Enum_ImageTextMultilineOutlined_font = Enum_ImageText_font
export type Enum_ImageTextMultiline_align = "center" | "left" | "right"
export type Enum_ImageTextMultilineOutlined_align = Enum_ImageTextMultiline_align
export type Enum_CreateTextOnPath_alignment = Enum_ImageTextMultiline_align
export type Enum_CR_Overlay_Text_justify = Enum_ImageTextMultiline_align
export type Enum_CR_Draw_Text_justify = Enum_ImageTextMultiline_align
export type Enum_CR_Mask_Text_justify = Enum_ImageTextMultiline_align
export type Enum_CR_Composite_Text_justify = Enum_ImageTextMultiline_align
export type Enum_CR_Page_Layout_header_align = Enum_ImageTextMultiline_align
export type Enum_CR_Page_Layout_footer_align = Enum_ImageTextMultiline_align
export type Enum_CR_Simple_Text_Panel_justify = Enum_ImageTextMultiline_align
export type Enum_DrawText$6_horizontal_align = Enum_ImageTextMultiline_align
export type Enum_ImageTransformTranspose_method = "flip_horizontally" | "flip_vertically" | "rotate_180" | "rotate_270" | "rotate_90" | "transpose" | "transverse"
export type Enum_ADE$_AnimateDiffLoRALoader_name = '🔴' // never
export type Enum_ADE$_AnimateDiffSamplingSettings_noise_type = "FreeNoise" | "constant" | "default" | "empty" | "repeated_context"
export type Enum_ADE$_NoiseLayerAdd_noise_type = Enum_ADE$_AnimateDiffSamplingSettings_noise_type
export type Enum_ADE$_NoiseLayerAddWeighted_noise_type = Enum_ADE$_AnimateDiffSamplingSettings_noise_type
export type Enum_ADE$_NoiseLayerReplace_noise_type = Enum_ADE$_AnimateDiffSamplingSettings_noise_type
export type Enum_ADE$_AnimateDiffSamplingSettings_seed_gen = "auto1111" | "auto1111 [gpu]" | "comfy" | "comfy [gpu]"
export type Enum_ADE$_MultivalScaledMask_scaling = "absolute" | "relative"
export type Enum_ADE$_StandardStaticContextOptions_fuse_method = "delayed reverse sawtooth" | "flat" | "gauss-sigma" | "gauss-sigma inverse" | "pyramid" | "pyramid-sigma" | "pyramid-sigma inverse" | "random" | "relative"
export type Enum_ADE$_StandardUniformContextOptions_fuse_method = "delayed reverse sawtooth" | "flat" | "gauss-sigma" | "gauss-sigma inverse" | "pyramid" | "pyramid-sigma" | "pyramid-sigma inverse" | "random"
export type Enum_ADE$_LoopedUniformContextOptions_fuse_method = Enum_ADE$_StandardUniformContextOptions_fuse_method
export type Enum_ADE$_AnimateDiffUniformContextOptions_fuse_method = Enum_ADE$_StandardUniformContextOptions_fuse_method
export type Enum_ADE$_StandardStaticViewOptions_fuse_method = Enum_ADE$_StandardUniformContextOptions_fuse_method
export type Enum_ADE$_StandardUniformViewOptions_fuse_method = Enum_ADE$_StandardUniformContextOptions_fuse_method
export type Enum_ADE$_LoopedUniformViewOptions_fuse_method = Enum_ADE$_StandardUniformContextOptions_fuse_method
export type Enum_ADE$_AnimateDiffUniformContextOptions_context_schedule = "uniform"
export type Enum_ADE$_AnimateDiffLoaderV1Advanced_context_schedule = Enum_ADE$_AnimateDiffUniformContextOptions_context_schedule
export type Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation = "ease_in" | "ease_in_out" | "ease_out" | "linear"
export type Enum_ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation_interpolation = Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
export type Enum_ADE$_LoraHookKeyframeInterpolation_interpolation = Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
export type Enum_ADE$_CustomCFGKeyframeInterpolation_interpolation = Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
export type Enum_ADE$_SigmaScheduleWeightedAverageInterp_interpolation = Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
export type Enum_CreateFadeMask_interpolation = Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
export type Enum_CreateFadeMaskAdvanced_interpolation = Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
export type Enum_StableZero123$_BatchSchedule_interpolation = Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
export type Enum_SV3D$_BatchSchedule_interpolation = Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
export type Enum_ADE$_IterationOptsFreeInit_filter = "box" | "butterworth" | "gaussian" | "ideal"
export type Enum_ADE$_IterationOptsFreeInit_init_type = "DinkInit_v1" | "FreeInit [model sigma]" | "FreeInit [sampler sigma]"
export type Enum_ADE$_NoiseLayerAdd_seed_gen_override = "auto1111" | "auto1111 [gpu]" | "comfy" | "comfy [gpu]" | "use existing"
export type Enum_ADE$_NoiseLayerAddWeighted_seed_gen_override = Enum_ADE$_NoiseLayerAdd_seed_gen_override
export type Enum_ADE$_NoiseLayerReplace_seed_gen_override = Enum_ADE$_NoiseLayerAdd_seed_gen_override
export type Enum_ADE$_SigmaSchedule_beta_schedule = "avg(sqrt_linear,linear)" | "cosine" | "lcm" | "lcm >> sqrt_linear" | "lcm avg(sqrt_linear,linear)" | "lcm[100_ots]" | "linear (AnimateDiff-SDXL)" | "linear (HotshotXL/default)" | "sqrt" | "sqrt_linear (AnimateDiff)" | "squaredcos_cap_v2"
export type Enum_ADE$_RawSigmaSchedule_raw_beta_schedule = "cosine" | "linear" | "sqrt" | "sqrt_linear" | "squaredcos_cap_v2"
export type Enum_ADE$_RawSigmaSchedule_sampling = "eps" | "lcm" | "v_prediction"
export type Enum_ADE$_PromptScheduling_tensor_interp = "lerp" | "slerp"
export type Enum_ADE$_PromptSchedulingLatents_tensor_interp = Enum_ADE$_PromptScheduling_tensor_interp
export type Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule = "autoselect" | "avg(sqrt_linear,linear)" | "cosine" | "lcm" | "lcm >> sqrt_linear" | "lcm avg(sqrt_linear,linear)" | "lcm[100_ots]" | "linear (AnimateDiff-SDXL)" | "linear (HotshotXL/default)" | "sqrt" | "sqrt_linear (AnimateDiff)" | "squaredcos_cap_v2" | "use existing"
export type Enum_ADE$_AnimateDiffLoaderGen1_beta_schedule = Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
export type Enum_ADE$_AnimateDiffLoaderWithContext_beta_schedule = Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
export type Enum_ADE$_UseEvolvedSampling_beta_schedule = Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
export type Enum_AnimateDiffLoaderV1_beta_schedule = Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
export type Enum_ADE$_AnimateDiffLoaderV1Advanced_beta_schedule = Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
export type Enum_ADE$_AnimateDiffLoaderGen1_model_name = "mm_sd_v15_v2.ckpt" | "v2_lora_PanLeft.ckpt" | "v2_lora_PanRight.ckpt" | "v2_lora_RollingAnticlockwise.ckpt" | "v2_lora_RollingClockwise.ckpt" | "v2_lora_ZoomIn.ckpt" | "v2_lora_ZoomOut.ckpt"
export type Enum_ADE$_AnimateDiffLoaderWithContext_model_name = Enum_ADE$_AnimateDiffLoaderGen1_model_name
export type Enum_ADE$_LoadAnimateDiffModel_model_name = Enum_ADE$_AnimateDiffLoaderGen1_model_name
export type Enum_ADE$_LoadAnimateLCMI2VModel_model_name = Enum_ADE$_AnimateDiffLoaderGen1_model_name
export type Enum_ADE$_InjectI2VIntoAnimateDiffModel_model_name = Enum_ADE$_AnimateDiffLoaderGen1_model_name
export type Enum_ADE$_LoadAnimateDiffModelWithCameraCtrl_model_name = Enum_ADE$_AnimateDiffLoaderGen1_model_name
export type Enum_ADE$_LoadAnimateDiffModelWithCameraCtrl_camera_ctrl = Enum_ADE$_AnimateDiffLoaderGen1_model_name
export type Enum_ADE$_InjectPIAIntoAnimateDiffModel_model_name = Enum_ADE$_AnimateDiffLoaderGen1_model_name
export type Enum_AnimateDiffLoaderV1_model_name = Enum_ADE$_AnimateDiffLoaderGen1_model_name
export type Enum_ADE$_AnimateDiffLoaderV1Advanced_model_name = Enum_ADE$_AnimateDiffLoaderGen1_model_name
export type Enum_ADE$_LoadCameraPoses_pose_filename = '🔴' // never
export type Enum_ADE$_CameraPoseBasic_motion_type = "Pan Down" | "Pan Left" | "Pan Right" | "Pan Up" | "Roll Anticlockwise" | "Roll Clockwise" | "Static" | "Tilt Down" | "Tilt Left" | "Tilt Right" | "Tilt Up" | "Zoom In" | "Zoom Out"
export type Enum_ADE$_CameraPoseCombo_motion_type1 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseCombo_motion_type2 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseCombo_motion_type3 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseCombo_motion_type4 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseCombo_motion_type5 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseCombo_motion_type6 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseAdvanced_motion_type1 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseAdvanced_motion_type2 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseAdvanced_motion_type3 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseAdvanced_motion_type4 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseAdvanced_motion_type5 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_CameraPoseAdvanced_motion_type6 = Enum_ADE$_CameraPoseBasic_motion_type
export type Enum_ADE$_InputPIA$_PaperPresets_preset = "Animation (Large Motion)" | "Animation (Medium Motion)" | "Animation (Small Motion)" | "Loop (Large Motion)" | "Loop (Medium Motion)" | "Loop (Small Motion)" | "Style Transfer (Large Motion)" | "Style Transfer (Medium Motion)" | "Style Transfer (Small Motion)"
export type Enum_ADE$_AnimateDiffCombine_format = "image/gif" | "image/webp"
export type Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name = "AOM3A1_orangemixs.safetensors" | "AOM3A3_orangemixs.safetensors" | "Deliberate-inpainting.safetensors" | "FLUX1\\flux1-dev-fp8.safetensors" | "None" | "Sevenof9V3.safetensors" | "albedobaseXL_v13.safetensors" | "albedobaseXL_v21.safetensors" | "angel1_36224.safetensors" | "anything-v3-fp16-pruned.safetensors" | "autismmixSDXL_autismmixConfetti.safetensors" | "cartoonArcadiaSDXLSD1_xenoArcadiaCX.safetensors" | "copaxTimelessxlSDXL1_v8.safetensors" | "deliberate_v2.safetensors" | "dndMapGenerator_v3.safetensors" | "illustriousXL_v01.safetensors" | "lyriel_v15.safetensors" | "mistoonAnime_v10.safetensors" | "mistoonAnime_v10Inpainting.safetensors" | "noobaiXLNAIXL_earlyAccessVersion.safetensors" | "noobaiXLNAIXL_vPredTestVersion.safetensors" | "ponyDiffusionV6XL_v6StartWithThisOne.safetensors" | "realisticVisionV20_v20.safetensors" | "realisticVisionV51_v51VAE.safetensors" | "revAnimated_v121.safetensors" | "revAnimated_v121Inp-inpainting.safetensors" | "revAnimated_v122.safetensors" | "sd_xl_base_1.0.safetensors" | "sd_xl_refiner_1.0.safetensors" | "sdxlMergeheaven_betaM15.safetensors" | "toonyou_beta1.safetensors" | "toonyou_beta6.safetensors" | "upscale\\x4-upscaler-ema.safetensors" | "v1-5-pruned-emaonly.ckpt" | "v1-5-pruned-emaonly.safetensors" | "v2-1_512-ema-pruned.safetensors" | "v2-1_768-ema-pruned.safetensors" | "wd-1-5-beta2-fp16.safetensors" | "zero123\\stable_zero123.ckpt"
export type Enum_CR_Select_Model_ckpt_name1 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Select_Model_ckpt_name2 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Select_Model_ckpt_name3 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Select_Model_ckpt_name4 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Select_Model_ckpt_name5 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Model_Merge_Stack_ckpt_name1 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Model_Merge_Stack_ckpt_name2 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Model_Merge_Stack_ckpt_name3 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Model_List_ckpt_name1 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Model_List_ckpt_name2 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Model_List_ckpt_name3 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Model_List_ckpt_name4 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_CR_Model_List_ckpt_name5 = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_ttN_pipeLoaderSDXL$_v2_refiner_ckpt_name = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_ttN_multiModelMerge_ckpt_B_name = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_ttN_multiModelMerge_ckpt_C_name = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_ttN_pipeLoaderSDXL_refiner_ckpt_name = Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
export type Enum_AV$_CheckpointModelsToParametersPipe_vae_name = "FLUX1\\ae.sft" | "None" | "Stable-Cascade\\stage_a.safetensors" | "blessed2.vae.pt" | "kl-f8-anime2.ckpt" | "orangemix.vae.pt" | "sdxl_vae.safetensors" | "vae-ft-mse-840000-ema-pruned.safetensors"
export type Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name = "4x-AnimeSharp.pth" | "4x-UltraSharp.pth" | "4x_NMKD-Siax_200k.pth" | "4x_foolhardy_Remacri.pth" | "8x_NMKD-Superscale_150000_G.pth" | "ESRGAN_4x.pth" | "None" | "RealESRGAN_x2.pth" | "RealESRGAN_x4.pth" | "ldsr\\last.ckpt"
export type Enum_AV$_CheckpointModelsToParametersPipe_secondary_upscaler_name = Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
export type Enum_CR_Multi_Upscale_Stack_upscale_model_1 = Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
export type Enum_CR_Multi_Upscale_Stack_upscale_model_2 = Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
export type Enum_CR_Multi_Upscale_Stack_upscale_model_3 = Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
export type Enum_ttN_KSampler$_v2_upscale_model_name = Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
export type Enum_ttN_pipeKSampler$_v2_upscale_model_name = Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
export type Enum_ttN_pipeKSamplerAdvanced$_v2_upscale_model_name = Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
export type Enum_ttN_pipeKSamplerSDXL$_v2_upscale_model_name = Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
export type Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name = "LogoRedmondV2-Logo-LogoRedmAF.safetensors" | "None" | "SpreadAssMS.safetensors" | "ip-adapter-faceid-plusv2_sd15_lora.safetensors" | "ip-adapter-faceid_sd15_lora.safetensors" | "ipadapter\\ip-adapter-faceid-plusv2_sd15_lora.safetensors" | "ipadapter\\ip-adapter-faceid_sd15_lora.safetensors" | "lcm\\SD1.5\\pytorch_lora_weights.safetensors" | "lcm\\pytorch_lora_weights.safetensors" | "pixel-art-xl-v1.1.safetensors" | "pixelgirl.safetensors" | "samsung_line_art.safetensors" | "sd15\\Character Design.safetensors" | "sd15\\Isometric Cutaway.safetensors" | "sd15\\Stained Glass Portrait.safetensors" | "sd15\\animemix_16.safetensors" | "sd15\\animemix_v3_offset.safetensors" | "sd15\\chars\\dark_magician_girl.safetensors" | "sd15\\chars\\yorha_noDOT_2_type_b.safetensors" | "sd15\\colors\\LowRa.safetensors" | "sd15\\colors\\theovercomer8sContrastFix_sd15.safetensors" | "sd15\\colors\\theovercomer8sContrastFix_sd21768.safetensors" | "sd15\\styles\\ConstructionyardAIV3.safetensors" | "sd15\\styles\\StonepunkAI-000011.safetensors" | "sd15\\styles\\ToonYou_Style.safetensors" | "sd15\\styles\\baroqueAI.safetensors" | "sd15\\styles\\pixel_f2.safetensors" | "sd15\\test\\Moxin_10.safetensors" | "sd15\\test\\animeLineartMangaLike_v30MangaLike.safetensors" | "sd15\\utils\\charTurnBetaLora.safetensors" | "sleepygimp.safetensors" | "xl\\Flat style-000014.safetensors" | "xl\\moebzxl.safetensors" | "xl\\pxll.safetensors" | "xl\\sdxl-baton-v02-e93.safetensors" | "xl\\watson_lora_v2_128.safetensors" | "z-arthur\\AmateurPornStyle-v1.safetensors"
export type Enum_AV$_CheckpointModelsToParametersPipe_lora_2_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_AV$_CheckpointModelsToParametersPipe_lora_3_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_Load_LoRA_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_LoRA_Stack_lora_name_1 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_LoRA_Stack_lora_name_2 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_LoRA_Stack_lora_name_3 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_Random_LoRA_Stack_lora_name_1 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_Random_LoRA_Stack_lora_name_2 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_Random_LoRA_Stack_lora_name_3 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_Random_Weight_LoRA_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_LoRA_List_lora_name1 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_LoRA_List_lora_name2 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_CR_LoRA_List_lora_name3 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_Lora_Loader_$1JPS$2_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_KSampler$_v2_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeKSampler$_v2_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeKSamplerAdvanced$_v2_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeKSamplerSDXL$_v2_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_1_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_2_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_3_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_4_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_5_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_6_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_7_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_8_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_9_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_10_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_11_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_12_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_13_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_14_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_15_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_16_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_17_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_18_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_19_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoraStack_lora_20_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoader_lora1_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoader_lora2_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoader_lora3_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeKSampler_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeKSamplerAdvanced_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoaderSDXL_lora1_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoaderSDXL_lora2_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoaderSDXL_refiner_lora1_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_ttN_pipeLoaderSDXL_refiner_lora2_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_Lora_Loader_Stack_$1rgthree$2_lora_01 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_Lora_Loader_Stack_$1rgthree$2_lora_02 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_Lora_Loader_Stack_$1rgthree$2_lora_03 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_Lora_Loader_Stack_$1rgthree$2_lora_04 = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_Lora_Loader_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_Load_Lora_lora_name = Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
export type Enum_AV$_CheckpointSave_dtype = "float16" | "float32"
export type Enum_StringToNumber_rounding = "ceil" | "floor" | "round"
export type Enum_ImageExtractChannel_channel = "A" | "B" | "G" | "R"
export type Enum_ImageApplyChannel_channel = Enum_ImageExtractChannel_channel
export type Enum_QRCodeGenerator_error_correction = "H" | "L" | "M" | "Q"
export type Enum_Create_QR_Code_error_correction = Enum_QRCodeGenerator_error_correction
export type Enum_DependenciesEdit_ckpt_name = "AOM3A1_orangemixs.safetensors" | "AOM3A3_orangemixs.safetensors" | "Deliberate-inpainting.safetensors" | "FLUX1\\flux1-dev-fp8.safetensors" | "Original" | "Sevenof9V3.safetensors" | "albedobaseXL_v13.safetensors" | "albedobaseXL_v21.safetensors" | "angel1_36224.safetensors" | "anything-v3-fp16-pruned.safetensors" | "autismmixSDXL_autismmixConfetti.safetensors" | "cartoonArcadiaSDXLSD1_xenoArcadiaCX.safetensors" | "copaxTimelessxlSDXL1_v8.safetensors" | "deliberate_v2.safetensors" | "dndMapGenerator_v3.safetensors" | "illustriousXL_v01.safetensors" | "lyriel_v15.safetensors" | "mistoonAnime_v10.safetensors" | "mistoonAnime_v10Inpainting.safetensors" | "noobaiXLNAIXL_earlyAccessVersion.safetensors" | "noobaiXLNAIXL_vPredTestVersion.safetensors" | "ponyDiffusionV6XL_v6StartWithThisOne.safetensors" | "realisticVisionV20_v20.safetensors" | "realisticVisionV51_v51VAE.safetensors" | "revAnimated_v121.safetensors" | "revAnimated_v121Inp-inpainting.safetensors" | "revAnimated_v122.safetensors" | "sd_xl_base_1.0.safetensors" | "sd_xl_refiner_1.0.safetensors" | "sdxlMergeheaven_betaM15.safetensors" | "toonyou_beta1.safetensors" | "toonyou_beta6.safetensors" | "upscale\\x4-upscaler-ema.safetensors" | "v1-5-pruned-emaonly.ckpt" | "v1-5-pruned-emaonly.safetensors" | "v2-1_512-ema-pruned.safetensors" | "v2-1_768-ema-pruned.safetensors" | "wd-1-5-beta2-fp16.safetensors" | "zero123\\stable_zero123.ckpt"
export type Enum_DependenciesEdit_vae_name = "Baked VAE" | "FLUX1\\ae.sft" | "Original" | "Stable-Cascade\\stage_a.safetensors" | "blessed2.vae.pt" | "kl-f8-anime2.ckpt" | "orangemix.vae.pt" | "sdxl_vae.safetensors" | "vae-ft-mse-840000-ema-pruned.safetensors"
export type Enum_AspectRatioSelector_aspect_ratio = "16:9" | "1:1" | "2:3" | "3:2" | "3:4" | "4:3" | "9:16"
export type Enum_SDXLAspectRatioSelector_aspect_ratio = "16:9" | "19:9" | "1:1" | "21:9" | "2:3" | "3:2" | "3:4" | "4:3" | "5:8" | "8:5" | "9:16" | "9:19" | "9:21"
export type Enum_SDXLPromptStyler_style = "3d-model" | "ads-advertising" | "ads-automotive" | "ads-corporate" | "ads-fashion editorial" | "ads-food photography" | "ads-gourmet food photography" | "ads-luxury" | "ads-real estate" | "ads-retail" | "analog film" | "anime" | "artstyle-abstract" | "artstyle-abstract expressionism" | "artstyle-art deco" | "artstyle-art nouveau" | "artstyle-constructivist" | "artstyle-cubist" | "artstyle-expressionist" | "artstyle-graffiti" | "artstyle-hyperrealism" | "artstyle-impressionist" | "artstyle-pointillism" | "artstyle-pop art" | "artstyle-psychedelic" | "artstyle-renaissance" | "artstyle-steampunk" | "artstyle-surrealist" | "artstyle-typography" | "artstyle-watercolor" | "base" | "cinematic" | "comic book" | "craft clay" | "digital art" | "enhance" | "fantasy art" | "futuristic-biomechanical" | "futuristic-biomechanical cyberpunk" | "futuristic-cybernetic" | "futuristic-cybernetic robot" | "futuristic-cyberpunk cityscape" | "futuristic-futuristic" | "futuristic-retro cyberpunk" | "futuristic-retro futurism" | "futuristic-sci-fi" | "futuristic-vaporwave" | "game-bubble bobble" | "game-cyberpunk game" | "game-fighting game" | "game-gta" | "game-mario" | "game-minecraft" | "game-pokemon" | "game-retro arcade" | "game-retro game" | "game-rpg fantasy game" | "game-strategy game" | "game-streetfighter" | "game-zelda" | "isometric" | "line art" | "lowpoly" | "misc-architectural" | "misc-disco" | "misc-dreamscape" | "misc-dystopian" | "misc-fairy tale" | "misc-gothic" | "misc-grunge" | "misc-horror" | "misc-kawaii" | "misc-lovecraftian" | "misc-macabre" | "misc-manga" | "misc-metropolis" | "misc-minimalist" | "misc-monochrome" | "misc-nautical" | "misc-space" | "misc-stained glass" | "misc-techwear fashion" | "misc-tribal" | "misc-zentangle" | "neonpunk" | "origami" | "papercraft-collage" | "papercraft-flat papercut" | "papercraft-kirigami" | "papercraft-paper mache" | "papercraft-paper quilling" | "papercraft-papercut collage" | "papercraft-papercut shadow box" | "papercraft-stacked papercut" | "papercraft-thick layered papercut" | "photo-alien" | "photo-film noir" | "photo-glamour" | "photo-hdr" | "photo-iphone photographic" | "photo-long exposure" | "photo-neon noir" | "photo-silhouette" | "photo-tilt-shift" | "photographic" | "pixel art" | "texture"
export type Enum_SDXLPromptStyler_log_prompt = "No" | "Yes"
export type Enum_DPRandomGenerator_autorefresh = Enum_SDXLPromptStyler_log_prompt
export type Enum_DPCombinatorialGenerator_autorefresh = Enum_SDXLPromptStyler_log_prompt
export type Enum_DPFeelingLucky_autorefresh = Enum_SDXLPromptStyler_log_prompt
export type Enum_DPJinja_autorefresh = Enum_SDXLPromptStyler_log_prompt
export type Enum_DPMagicPrompt_autorefresh = Enum_SDXLPromptStyler_log_prompt
export type Enum_CR_Apply_Model_Merge_normalise_ratios = Enum_SDXLPromptStyler_log_prompt
export type Enum_CR_Halftone_Grid_reverse_dot_style = Enum_SDXLPromptStyler_log_prompt
export type Enum_CR_Index_print_to_console = Enum_SDXLPromptStyler_log_prompt
export type Enum_CR_Prompt_Scheduler_interpolate_prompt = Enum_SDXLPromptStyler_log_prompt
export type Enum_CR_Current_Frame_print_to_console = Enum_SDXLPromptStyler_log_prompt
export type Enum_BLIPLoader_model_name = '🔴' // never
export type Enum_BLIPCaption_device_mode = "AUTO" | "CPU" | "Prefer GPU"
export type Enum_DeepDanbooruCaption_device_mode = Enum_BLIPCaption_device_mode
export type Enum_ISNetSegment_device_mode = Enum_BLIPCaption_device_mode
export type Enum_GetSAMEmbedding_device_mode = Enum_BLIPCaption_device_mode
export type Enum_LaMaInpaint_device_mode = Enum_BLIPCaption_device_mode
export type Enum_SAMLoader_device_mode = Enum_BLIPCaption_device_mode
export type Enum_ImpactHFTransformersClassifierProvider_device_mode = Enum_BLIPCaption_device_mode
export type Enum_DownloadAndLoadBlip_model_name = "model_base_capfilt_large.pth" | "model_base_caption_capfilt_large.pth"
export type Enum_AV$_ControlNetEfficientLoader_control_net_name = "None" | "OpenPoseXL2.safetensors" | "control-lora-canny-rank128.safetensors" | "control-lora-canny-rank256.safetensors" | "control-lora-depth-rank128.safetensors" | "control-lora-depth-rank256.safetensors" | "control-lora-recolor-rank128.safetensors" | "control-lora-sketch-rank128-metadata.safetensors" | "control_depth-fp16.safetensors" | "control_openpose-fp16.safetensors" | "control_scribble-fp16.safetensors" | "control_v11p_sd15_canny_fp16.safetensors" | "control_v11p_sd15_lineart_fp16.safetensors" | "control_v11p_sd15_normalbae_fp16.safetensors" | "control_v11p_sd15_softedge_fp16.safetensors" | "control_v11p_sd15s2_lineart_anime_fp16.safetensors" | "control_v11u_sd15_tile.pth" | "control_v11u_sd15_tile_fp16.safetensors" | "t2iadapter_canny_sd14v1.pth" | "t2iadapter_sketch_sd14v1.pth"
export type Enum_AV$_ControlNetEfficientLoaderAdvanced_control_net_name = Enum_AV$_ControlNetEfficientLoader_control_net_name
export type Enum_CR_Multi$7ControlNet_Stack_controlnet_1 = Enum_AV$_ControlNetEfficientLoader_control_net_name
export type Enum_CR_Multi$7ControlNet_Stack_controlnet_2 = Enum_AV$_ControlNetEfficientLoader_control_net_name
export type Enum_CR_Multi$7ControlNet_Stack_controlnet_3 = Enum_AV$_ControlNetEfficientLoader_control_net_name
export type Enum_AV$_ControlNetEfficientLoader_preprocessor = "None" | "canny" | "canny_pyra" | "color" | "depth" | "depth_anything" | "depth_anything_v2" | "depth_anything_zoe" | "depth_leres" | "depth_meshgraphormer" | "depth_metric3d" | "depth_midas" | "depth_zoe" | "dwpose" | "hed" | "lineart" | "lineart_anime" | "lineart_any" | "lineart_manga" | "mlsd" | "normalmap_bae" | "normalmap_dsine" | "normalmap_midas" | "openpose" | "pidi" | "pose" | "pose_animal" | "pose_dense" | "sam" | "scribble" | "scribble_hed" | "scribble_pidi" | "scribble_xdog" | "seg_animeface" | "seg_ofade20k" | "seg_ofcoco" | "seg_ufade20k" | "shuffle" | "teed" | "tile"
export type Enum_AV$_ControlNetEfficientLoaderAdvanced_preprocessor = Enum_AV$_ControlNetEfficientLoader_preprocessor
export type Enum_AV$_ControlNetEfficientStacker_preprocessor = Enum_AV$_ControlNetEfficientLoader_preprocessor
export type Enum_AV$_ControlNetEfficientStackerSimple_preprocessor = Enum_AV$_ControlNetEfficientLoader_preprocessor
export type Enum_AV$_ControlNetPreprocessor_preprocessor = Enum_AV$_ControlNetEfficientLoader_preprocessor
export type Enum_AV$_ControlNetEfficientStacker_control_net_name = "Auto: sd15" | "Auto: sdxl" | "Auto: sdxl_t2i" | "None" | "OpenPoseXL2.safetensors" | "control-lora-canny-rank128.safetensors" | "control-lora-canny-rank256.safetensors" | "control-lora-depth-rank128.safetensors" | "control-lora-depth-rank256.safetensors" | "control-lora-recolor-rank128.safetensors" | "control-lora-sketch-rank128-metadata.safetensors" | "control_depth-fp16.safetensors" | "control_openpose-fp16.safetensors" | "control_scribble-fp16.safetensors" | "control_v11p_sd15_canny_fp16.safetensors" | "control_v11p_sd15_lineart_fp16.safetensors" | "control_v11p_sd15_normalbae_fp16.safetensors" | "control_v11p_sd15_softedge_fp16.safetensors" | "control_v11p_sd15s2_lineart_anime_fp16.safetensors" | "control_v11u_sd15_tile.pth" | "control_v11u_sd15_tile_fp16.safetensors" | "t2iadapter_canny_sd14v1.pth" | "t2iadapter_sketch_sd14v1.pth"
export type Enum_AV$_ControlNetEfficientStackerSimple_control_net_name = Enum_AV$_ControlNetEfficientStacker_control_net_name
export type Enum_AV$_ControlNetPreprocessor_sd_version = "sd15" | "sdxl"
export type Enum_AV$_IPAdapter_ip_adapter_name = "None" | "ip-adapter-faceid-plusv2_sd15.bin" | "ip-adapter-faceid_sd15.bin" | "ip-adapter-full-face_sd15.safetensors" | "ip-adapter-plus-face_sd15.safetensors" | "ip-adapter-plus-face_sdxl_vit-h.safetensors" | "ip-adapter-plus_sd15.safetensors" | "ip-adapter-plus_sdxl_vit-h.safetensors" | "ip-adapter_sd15.safetensors" | "ip-adapter_sd15_light.safetensors" | "ip-adapter_sd15_light_v11.bin" | "ip-adapter_sd15_vit-G.safetensors" | "ip-adapter_sdxl_vit-h.safetensors"
export type Enum_AV$_IPAdapter_clip_name = "None" | "SD1.5\\CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors" | "SD1.5\\model.safetensors" | "SD1.5\\pytorch_model.bin" | "SDXL\\pytorch_model.bin" | "clip_vit14.bin"
export type Enum_AV$_IPAdapter_weight_type = "prompt is more important" | "standard" | "style transfer"
export type Enum_IPAdapter_weight_type = Enum_AV$_IPAdapter_weight_type
export type Enum_AV$_IPAdapterPipe_ip_adapter_name = "ip-adapter-faceid-plusv2_sd15.bin" | "ip-adapter-faceid_sd15.bin" | "ip-adapter-full-face_sd15.safetensors" | "ip-adapter-plus-face_sd15.safetensors" | "ip-adapter-plus-face_sdxl_vit-h.safetensors" | "ip-adapter-plus_sd15.safetensors" | "ip-adapter-plus_sdxl_vit-h.safetensors" | "ip-adapter_sd15.safetensors" | "ip-adapter_sd15_light.safetensors" | "ip-adapter_sd15_light_v11.bin" | "ip-adapter_sd15_vit-G.safetensors" | "ip-adapter_sdxl_vit-h.safetensors"
export type Enum_IPAdapterModelLoader_ipadapter_file = Enum_AV$_IPAdapterPipe_ip_adapter_name
export type Enum_ISNetLoader_model_name = '🔴' // never
export type Enum_DownloadISNetModel_model_name = "RMBG-1.4.bin" | "isnet-general-use.pth" | "isnetis.pth"
export type Enum_AV$_SAMLoader_model_name = "sam_vit_b_01ec64.pth" | "sam_vit_h_4b8939.pth"
export type Enum_AV$_FaceDetailer_scheduler = "AYS SD1" | "AYS SDXL" | "AYS SVD" | "GITS[coeff=1.2]" | "beta" | "ddim_uniform" | "exponential" | "karras" | "linear_quadratic" | "normal" | "sgm_uniform" | "simple"
export type Enum_AV$_FaceDetailerPipe_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_DetailerForEach_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_DetailerForEachDebug_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_DetailerForEachPipe_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_DetailerForEachDebugPipe_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_DetailerForEachPipeForAnimateDiff_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_FaceDetailer_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_FaceDetailerPipe_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_MaskDetailerPipe_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_PixelKSampleUpscalerProvider_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_PixelKSampleUpscalerProviderPipe_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_KSamplerProvider_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_KSamplerAdvancedProvider_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_SEGSUpscaler_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_SEGSUpscalerPipe_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_SEGSDetailer_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_SEGSDetailerForAnimateDiff_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_ImpactKSamplerBasicPipe_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_ImpactKSamplerAdvancedBasicPipe_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_ImpactSchedulerAdapter_scheduler_out = Enum_AV$_FaceDetailer_scheduler
export type Enum_KSampler_$3$3Inspire_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_KSamplerAdvanced_$3$3Inspire_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_KSamplerPipe_$3$3Inspire_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_KSamplerAdvancedPipe_$3$3Inspire_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_GlobalSampler_$3$3Inspire_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_RegionalPromptSimple_$3$3Inspire_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_RegionalPromptColorMask_$3$3Inspire_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_KSamplerProgress_$3$3Inspire_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_KSamplerAdvancedProgress_$3$3Inspire_scheduler = Enum_AV$_FaceDetailer_scheduler
export type Enum_AV$_FaceDetailer_sam_detection_hint = "center-1" | "diamond-4" | "horizontal-2" | "mask-area" | "mask-point-bbox" | "mask-points" | "none" | "rect-4" | "vertical-2"
export type Enum_AV$_FaceDetailerPipe_sam_detection_hint = Enum_AV$_FaceDetailer_sam_detection_hint
export type Enum_SAMDetectorCombined_detection_hint = Enum_AV$_FaceDetailer_sam_detection_hint
export type Enum_SAMDetectorSegmented_detection_hint = Enum_AV$_FaceDetailer_sam_detection_hint
export type Enum_FaceDetailer_sam_detection_hint = Enum_AV$_FaceDetailer_sam_detection_hint
export type Enum_FaceDetailerPipe_sam_detection_hint = Enum_AV$_FaceDetailer_sam_detection_hint
export type Enum_AV$_FaceDetailer_sam_mask_hint_use_negative = "False" | "Outter" | "Small"
export type Enum_AV$_FaceDetailerPipe_sam_mask_hint_use_negative = Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
export type Enum_SAMDetectorCombined_mask_hint_use_negative = Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
export type Enum_SAMDetectorSegmented_mask_hint_use_negative = Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
export type Enum_FaceDetailer_sam_mask_hint_use_negative = Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
export type Enum_FaceDetailerPipe_sam_mask_hint_use_negative = Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
export type Enum_AV$_ClaudeApi_version = "2023-06-01"
export type Enum_AV$_AwsBedrockClaudeApi_region = "ap-northeast-1" | "ap-south-3" | "ap-southeast-1" | "ap-southeast-2" | "eu-central-1" | "eu-west-1" | "eu-west-3" | "us-east-1" | "us-west-2"
export type Enum_AV$_AwsBedrockMistralApi_region = Enum_AV$_AwsBedrockClaudeApi_region
export type Enum_AV$_AwsBedrockClaudeApi_version = "bedrock-2023-05-31"
export type Enum_AV$_LLMApiConfig_model = "anthropic.claude-3-haiku-20240307-v1:0" | "anthropic.claude-3-opus-20240229-v1:0" | "anthropic.claude-3-sonnet-20240229-v1:0" | "anthropic.claude-v2" | "anthropic.claude-v2.1" | "claude-2.1" | "claude-3-haiku-20240307" | "claude-3-opus-20240229" | "claude-3-sonnet-20240229" | "gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-4" | "gpt-4-0125-preview" | "gpt-4-0613" | "gpt-4-1106-preview" | "gpt-4-turbo" | "gpt-4-turbo-preview" | "gpt-4-vision-preview" | "mistral.mistral-7b-instruct-v0:2" | "mistral.mistral-large-2402-v1:0" | "mistral.mixtral-8x7b-instruct-v0:1"
export type Enum_AV$_LLMMessage_role = "assistant" | "system" | "user"
export type Enum_Chat$_Message_$_O_role = Enum_AV$_LLMMessage_role
export type Enum_Chat$_Message$_fromString_$_O_role = Enum_AV$_LLMMessage_role
export type Enum_ConstrainImage$8pysssss_crop_if_required = "no" | "yes"
export type Enum_ConstrainImageforVideo$8pysssss_crop_if_required = Enum_ConstrainImage$8pysssss_crop_if_required
export type Enum_StringFunction$8pysssss_tidy_tags = Enum_ConstrainImage$8pysssss_crop_if_required
export type Enum_TransparentImage_invert = Enum_ConstrainImage$8pysssss_crop_if_required
export type Enum_TransparentImage_save = Enum_ConstrainImage$8pysssss_crop_if_required
export type Enum_CR_Vignette_Filter_reverse = Enum_ConstrainImage$8pysssss_crop_if_required
export type Enum_Mask_By_Text_normalize = Enum_ConstrainImage$8pysssss_crop_if_required
export type Enum_Combine_Masks_clamp_result = Enum_ConstrainImage$8pysssss_crop_if_required
export type Enum_Combine_Masks_round_result = Enum_ConstrainImage$8pysssss_crop_if_required
export type Enum_SDXLMixSampler_final_only = Enum_ConstrainImage$8pysssss_crop_if_required
export type Enum_PlaySound$8pysssss_mode = "always" | "on empty queue"
export type Enum_SystemNotification$8pysssss_mode = Enum_PlaySound$8pysssss_mode
export type Enum_Repeater$8pysssss_output = "multi" | "single"
export type Enum_Repeater$8pysssss_node_mode = "create" | "reuse"
export type Enum_StringFunction$8pysssss_action = "append" | "replace"
export type Enum_LoadText$8pysssss_root_dir = "input" | "output" | "temp"
export type Enum_SaveText$8pysssss_root_dir = Enum_LoadText$8pysssss_root_dir
export type Enum_LoadText$8pysssss_file = "[none]"
export type Enum_SaveText$8pysssss_append = "append" | "new only" | "overwrite"
export type Enum_SAMLoader_model_name = "ESAM" | "sam_vit_b_01ec64.pth" | "sam_vit_h_4b8939.pth"
export type Enum_ToDetailerPipe_Select$_to$_add$_LoRA = "LogoRedmondV2-Logo-LogoRedmAF.safetensors" | "Select the LoRA to add to the text" | "SpreadAssMS.safetensors" | "ip-adapter-faceid-plusv2_sd15_lora.safetensors" | "ip-adapter-faceid_sd15_lora.safetensors" | "ipadapter\\ip-adapter-faceid-plusv2_sd15_lora.safetensors" | "ipadapter\\ip-adapter-faceid_sd15_lora.safetensors" | "lcm\\SD1.5\\pytorch_lora_weights.safetensors" | "lcm\\pytorch_lora_weights.safetensors" | "pixel-art-xl-v1.1.safetensors" | "pixelgirl.safetensors" | "samsung_line_art.safetensors" | "sd15\\Character Design.safetensors" | "sd15\\Isometric Cutaway.safetensors" | "sd15\\Stained Glass Portrait.safetensors" | "sd15\\animemix_16.safetensors" | "sd15\\animemix_v3_offset.safetensors" | "sd15\\chars\\dark_magician_girl.safetensors" | "sd15\\chars\\yorha_noDOT_2_type_b.safetensors" | "sd15\\colors\\LowRa.safetensors" | "sd15\\colors\\theovercomer8sContrastFix_sd15.safetensors" | "sd15\\colors\\theovercomer8sContrastFix_sd21768.safetensors" | "sd15\\styles\\ConstructionyardAIV3.safetensors" | "sd15\\styles\\StonepunkAI-000011.safetensors" | "sd15\\styles\\ToonYou_Style.safetensors" | "sd15\\styles\\baroqueAI.safetensors" | "sd15\\styles\\pixel_f2.safetensors" | "sd15\\test\\Moxin_10.safetensors" | "sd15\\test\\animeLineartMangaLike_v30MangaLike.safetensors" | "sd15\\utils\\charTurnBetaLora.safetensors" | "sleepygimp.safetensors" | "xl\\Flat style-000014.safetensors" | "xl\\moebzxl.safetensors" | "xl\\pxll.safetensors" | "xl\\sdxl-baton-v02-e93.safetensors" | "xl\\watson_lora_v2_128.safetensors" | "z-arthur\\AmateurPornStyle-v1.safetensors"
export type Enum_ToDetailerPipeSDXL_Select$_to$_add$_LoRA = Enum_ToDetailerPipe_Select$_to$_add$_LoRA
export type Enum_BasicPipeToDetailerPipe_Select$_to$_add$_LoRA = Enum_ToDetailerPipe_Select$_to$_add$_LoRA
export type Enum_BasicPipeToDetailerPipeSDXL_Select$_to$_add$_LoRA = Enum_ToDetailerPipe_Select$_to$_add$_LoRA
export type Enum_EditDetailerPipe_Select$_to$_add$_LoRA = Enum_ToDetailerPipe_Select$_to$_add$_LoRA
export type Enum_EditDetailerPipeSDXL_Select$_to$_add$_LoRA = Enum_ToDetailerPipe_Select$_to$_add$_LoRA
export type Enum_ImpactWildcardEncode_Select$_to$_add$_LoRA = Enum_ToDetailerPipe_Select$_to$_add$_LoRA
export type Enum_WildcardEncode_$3$3Inspire_Select$_to$_add$_LoRA = Enum_ToDetailerPipe_Select$_to$_add$_LoRA
export type Enum_MakeBasicPipe_$3$3Inspire_Select$_to$_add$_LoRA = Enum_ToDetailerPipe_Select$_to$_add$_LoRA
export type Enum_ToDetailerPipe_Select$_to$_add$_Wildcard = "Select the Wildcard to add to the text"
export type Enum_ToDetailerPipeSDXL_Select$_to$_add$_Wildcard = Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
export type Enum_BasicPipeToDetailerPipe_Select$_to$_add$_Wildcard = Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
export type Enum_BasicPipeToDetailerPipeSDXL_Select$_to$_add$_Wildcard = Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
export type Enum_EditDetailerPipe_Select$_to$_add$_Wildcard = Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
export type Enum_EditDetailerPipeSDXL_Select$_to$_add$_Wildcard = Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
export type Enum_ImpactWildcardProcessor_Select$_to$_add$_Wildcard = Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
export type Enum_ImpactWildcardEncode_Select$_to$_add$_Wildcard = Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
export type Enum_WildcardEncode_$3$3Inspire_Select$_to$_add$_Wildcard = Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
export type Enum_MakeBasicPipe_$3$3Inspire_Select$_to$_add$_Wildcard = Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
export type Enum_LatentPixelScale_scale_method = "area" | "bilinear" | "lanczos" | "nearest-exact"
export type Enum_PixelKSampleUpscalerProvider_scale_method = Enum_LatentPixelScale_scale_method
export type Enum_PixelKSampleUpscalerProviderPipe_scale_method = Enum_LatentPixelScale_scale_method
export type Enum_PixelTiledKSampleUpscalerProvider_scale_method = Enum_LatentPixelScale_scale_method
export type Enum_PixelTiledKSampleUpscalerProviderPipe_scale_method = Enum_LatentPixelScale_scale_method
export type Enum_TwoSamplersForMaskUpscalerProvider_scale_method = Enum_LatentPixelScale_scale_method
export type Enum_TwoSamplersForMaskUpscalerProviderPipe_scale_method = Enum_LatentPixelScale_scale_method
export type Enum_IterativeLatentUpscale_step_mode = "geometric" | "simple"
export type Enum_IterativeImageUpscale_step_mode = Enum_IterativeLatentUpscale_step_mode
export type Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy = "padded" | "random" | "simple"
export type Enum_PixelTiledKSampleUpscalerProviderPipe_tiling_strategy = Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy
export type Enum_TiledKSamplerProvider_tiling_strategy = Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy
export type Enum_TwoSamplersForMaskUpscalerProvider_full_sample_schedule = "interleave1" | "interleave1+last1" | "interleave2" | "interleave2+last1" | "interleave3" | "interleave3+last1" | "last1" | "last2" | "none"
export type Enum_TwoSamplersForMaskUpscalerProviderPipe_full_sample_schedule = Enum_TwoSamplersForMaskUpscalerProvider_full_sample_schedule
export type Enum_DenoiseScheduleHookProvider_schedule_for_iteration = "simple"
export type Enum_StepsScheduleHookProvider_schedule_for_iteration = Enum_DenoiseScheduleHookProvider_schedule_for_iteration
export type Enum_CfgScheduleHookProvider_schedule_for_iteration = Enum_DenoiseScheduleHookProvider_schedule_for_iteration
export type Enum_NoiseInjectionHookProvider_schedule_for_iteration = Enum_DenoiseScheduleHookProvider_schedule_for_iteration
export type Enum_UnsamplerHookProvider_schedule_for_iteration = Enum_DenoiseScheduleHookProvider_schedule_for_iteration
export type Enum_DenoiseSchedulerDetailerHookProvider_schedule_for_cycle = Enum_DenoiseScheduleHookProvider_schedule_for_iteration
export type Enum_ChangeImageBatchSize_$3$3Inspire_mode = Enum_DenoiseScheduleHookProvider_schedule_for_iteration
export type Enum_ChangeLatentBatchSize_$3$3Inspire_mode = Enum_DenoiseScheduleHookProvider_schedule_for_iteration
export type Enum_NoiseInjectionHookProvider_source = "CPU" | "GPU"
export type Enum_NoiseInjectionDetailerHookProvider_source = Enum_NoiseInjectionHookProvider_source
export type Enum_TransitionImagesMulti_device = Enum_NoiseInjectionHookProvider_source
export type Enum_TransitionImagesInBatch_device = Enum_NoiseInjectionHookProvider_source
export type Enum_BNK$_NoisyLatentImage_source = Enum_NoiseInjectionHookProvider_source
export type Enum_CoreMLDetailerHookProvider_mode = "512x512" | "512x768" | "768x512" | "768x768"
export type Enum_NoiseInjectionDetailerHookProvider_schedule_for_cycle = "from_start" | "skip_start"
export type Enum_UnsamplerDetailerHookProvider_schedule_for_cycle = Enum_NoiseInjectionDetailerHookProvider_schedule_for_cycle
export type Enum_SEGSOrderedFilterDetailerHookProvider_target = "area(=w*h)" | "height" | "width" | "x1" | "x2" | "y1" | "y2"
export type Enum_SEGSRangeFilterDetailerHookProvider_target = "area(=w*h)" | "height" | "length_percent" | "width" | "x1" | "x2" | "y1" | "y2"
export type Enum_SEGSLabelFilterDetailerHookProvider_preset = "airplane" | "all" | "apple" | "backpack" | "banana" | "baseball bat" | "baseball glove" | "bear" | "bed" | "bench" | "bicycle" | "bird" | "boat" | "book" | "bottle" | "bowl" | "broccoli" | "bus" | "cake" | "car" | "carrot" | "cat" | "cell phone" | "chair" | "clock" | "couch" | "cow" | "cup" | "dining table" | "dog" | "donut" | "elephant" | "eyebrows" | "eyes" | "face" | "fire hydrant" | "fork" | "frisbee" | "giraffe" | "hair drier" | "hand" | "handbag" | "horse" | "hot dog" | "keyboard" | "kite" | "knife" | "laptop" | "left_eye" | "left_eyebrow" | "left_pupil" | "long_sleeved_dress" | "long_sleeved_outwear" | "long_sleeved_shirt" | "microwave" | "motorcycle" | "mouse" | "mouth" | "orange" | "oven" | "parking meter" | "person" | "pizza" | "potted plant" | "pupils" | "refrigerator" | "remote" | "right_eye" | "right_eyebrow" | "right_pupil" | "sandwich" | "scissors" | "sheep" | "short_sleeved_dress" | "short_sleeved_outwear" | "short_sleeved_shirt" | "shorts" | "sink" | "skateboard" | "skirt" | "skis" | "sling" | "sling_dress" | "snowboard" | "spoon" | "sports ball" | "stop sign" | "suitcase" | "surfboard" | "teddy bear" | "tennis racket" | "tie" | "toaster" | "toilet" | "toothbrush" | "traffic light" | "train" | "trousers" | "truck" | "tv" | "umbrella" | "vase" | "vest" | "vest_dress" | "wine glass" | "zebra"
export type Enum_ImpactSEGSLabelFilter_preset = Enum_SEGSLabelFilterDetailerHookProvider_preset
export type Enum_ImpactSimpleDetectorSEGS$_for$_AD_masking_mode = "Combine neighboring frames" | "Don't combine" | "Pivot SEGS"
export type Enum_ImpactSimpleDetectorSEGS$_for$_AD_segs_pivot = "1st frame mask" | "Combined mask"
export type Enum_ImpactIPAdapterApplySEGS_weight_type = "channel penalty" | "linear" | "original"
export type Enum_ImpactIPAdapterApplySEGS_combine_embeds = "add" | "average" | "concat" | "norm average" | "subtract"
export type Enum_RegionalIPAdapterMask_$3$3Inspire_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_RegionalIPAdapterColorMask_$3$3Inspire_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterAdvanced_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterFaceID_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterFaceIDKolors_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAAdapterFaceIDBatch_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterTiled_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterStyleComposition_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterMS_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterClipVisionEnhancer_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterFromParams_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterPreciseStyleTransfer_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterPreciseStyleTransferBatch_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterPreciseComposition_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_IPAdapterPreciseCompositionBatch_combine_embeds = Enum_ImpactIPAdapterApplySEGS_combine_embeds
export type Enum_PreviewBridge_restore_mask = "always" | "if_same_size" | "never"
export type Enum_PreviewBridgeLatent_restore_mask = Enum_PreviewBridge_restore_mask
export type Enum_PreviewBridgeLatent_preview_method = "Latent2RGB-FLUX.1" | "Latent2RGB-Playground-2.5" | "Latent2RGB-SC-B" | "Latent2RGB-SC-Prior" | "Latent2RGB-SD-X4" | "Latent2RGB-SD15" | "Latent2RGB-SD3" | "Latent2RGB-SDXL" | "TAEF1" | "TAESD15" | "TAESD3" | "TAESDXL"
export type Enum_LatentSender_preview_method = "Latent2RGB-SD15" | "Latent2RGB-SDXL" | "TAESD15" | "TAESDXL"
export type Enum_LatentReceiver_latent = '🔴' // never
export type Enum_SEGSUpscaler_resampling_method = "bicubic" | "bilinear" | "lanczos" | "nearest"
export type Enum_SEGSUpscalerPipe_resampling_method = Enum_SEGSUpscaler_resampling_method
export type Enum_CR_Upscale_Image_resampling_method = Enum_SEGSUpscaler_resampling_method
export type Enum_CR_Apply_Multi_Upscale_resampling_method = Enum_SEGSUpscaler_resampling_method
export type Enum_Image_Resize_resampling = Enum_SEGSUpscaler_resampling_method
export type Enum_KSampler_Cycle_scale_sampling = Enum_SEGSUpscaler_resampling_method
export type Enum_ImpactMakeTileSEGS_irregular_mask_mode = "All random fast" | "All random quality" | "Reuse fast" | "Reuse quality"
export type Enum_ReencodeLatent_tile_mode = "Both" | "Decode(input) only" | "Encode(output) only" | "None"
export type Enum_ReencodeLatentPipe_tile_mode = Enum_ReencodeLatent_tile_mode
export type Enum_RegionalSampler_seed_2nd_mode = "decrement" | "fixed" | "ignore" | "increment" | "randomize" | "seed+seed_2nd" | "seed-seed_2nd"
export type Enum_RegionalSampler_additional_mode = "DISABLE" | "ratio additional" | "ratio between"
export type Enum_RegionalSamplerAdvanced_additional_mode = Enum_RegionalSampler_additional_mode
export type Enum_RegionalSampler_additional_sampler = "AUTO" | "ddpm" | "dpm_2" | "dpm_fast" | "dpmpp_2m" | "euler" | "heun" | "heunpp2"
export type Enum_RegionalSamplerAdvanced_additional_sampler = Enum_RegionalSampler_additional_sampler
export type Enum_RegionalPrompt_variation_method = "linear" | "slerp"
export type Enum_KSampler_$3$3Inspire_variation_method = Enum_RegionalPrompt_variation_method
export type Enum_KSamplerAdvanced_$3$3Inspire_variation_method = Enum_RegionalPrompt_variation_method
export type Enum_RandomNoise_$3$3Inspire_variation_method = Enum_RegionalPrompt_variation_method
export type Enum_SeedExplorer_$3$3Inspire_variation_method = Enum_RegionalPrompt_variation_method
export type Enum_RegionalPromptSimple_$3$3Inspire_variation_method = Enum_RegionalPrompt_variation_method
export type Enum_RegionalPromptColorMask_$3$3Inspire_variation_method = Enum_RegionalPrompt_variation_method
export type Enum_RegionalSeedExplorerMask_$3$3Inspire_variation_method = Enum_RegionalPrompt_variation_method
export type Enum_RegionalSeedExplorerColorMask_$3$3Inspire_variation_method = Enum_RegionalPrompt_variation_method
export type Enum_ImpactSEGSRangeFilter_target = "area(=w*h)" | "confidence(0-100)" | "height" | "length_percent" | "width" | "x1" | "x2" | "y1" | "y2"
export type Enum_ImpactSEGSOrderedFilter_target = "area(=w*h)" | "confidence" | "height" | "width" | "x1" | "x2" | "y1" | "y2"
export type Enum_ImpactCompare_cmp = "a < b" | "a <= b" | "a <> b" | "a = b" | "a > b" | "a >= b" | "ff" | "tt"
export type Enum_ImpactLogicalOperators_operator = "and" | "or" | "xor"
export type Enum_ImpactValueReceiver_typ = "BOOLEAN" | "FLOAT" | "INT" | "STRING"
export type Enum_ImpactControlBridge_behavior = "Bypass" | "Mute" | "Stop"
export type Enum_ImpactHFTransformersClassifierProvider_preset_repo_id = "Leilab/gender_class" | "Manual repo id" | "NTQAI/pedestrian_gender_recognition" | "ProjectPersonal/GenderClassifier" | "cledoux42/GenderNew_v002" | "crangana/trained-gender" | "ivensamdh/genderage2" | "rizvandwiki/gender-classification-2"
export type Enum_ImpactSEGSClassify_preset_expr = "#Female < #Male" | "#Female > #Male" | "Age16to25 > 0.1" | "Age50to69 > 0.1" | "Manual expr" | "female > 0.5" | "male > 0.5"
export type Enum_ImpactSchedulerAdapter_extra_scheduler = "AYS SD1" | "AYS SDXL" | "AYS SVD" | "GITS[coeff=1.2]" | "None"
export type Enum_UltralyticsDetectorProvider_model_name = "bbox/face_yolov8m.pt" | "bbox/hand_yolov8n.pt" | "bbox/hand_yolov8s.pt" | "segm/person_yolov8m-seg.pt"
export type Enum_INPAINT$_LoadFooocusInpaint_head = '🔴' // never
export type Enum_INPAINT$_LoadFooocusInpaint_patch = '🔴' // never
export type Enum_INPAINT$_MaskedFill_fill = "navier-stokes" | "neutral" | "telea"
export type Enum_INPAINT$_LoadInpaintModel_model_name = '🔴' // never
export type Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter = "" | "All" | "ipadapter" | "lcm" | "lcm\\SD1.5" | "sd15" | "sd15\\chars" | "sd15\\colors" | "sd15\\styles" | "sd15\\test" | "sd15\\utils" | "xl" | "z-arthur"
export type Enum_LoraLoaderBlockWeight_$3$3Inspire_category_filter = Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter
export type Enum_MakeLBW_$3$3Inspire_category_filter = Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter
export type Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_preset = "@FLUX-DBL-FULL:19" | "@FLUX-DBL-SGL-FULL:58" | "@FLUX-DBL0-TEST:19,14,2" | "@FLUX-DBL1-TEST:19,14,3" | "@FLUX-DBL10-TEST:19,14,12" | "@FLUX-DBL11-TEST:19,14,13" | "@FLUX-DBL12-TEST:19,14,14" | "@FLUX-DBL13-TEST:19,14,15" | "@FLUX-DBL14-TEST:19,14,16" | "@FLUX-DBL15-TEST:19,14,17" | "@FLUX-DBL16-TEST:19,14,18" | "@FLUX-DBL17-TEST:19,14,19" | "@FLUX-DBL18-TEST:19,14,20" | "@FLUX-DBL2-TEST:19,14,4" | "@FLUX-DBL3-TEST:19,14,5" | "@FLUX-DBL4-TEST:19,14,6" | "@FLUX-DBL5-TEST:19,14,7" | "@FLUX-DBL6-TEST:19,14,8" | "@FLUX-DBL7-TEST:19,14,9" | "@FLUX-DBL8-TEST:19,14,10" | "@FLUX-DBL9-TEST:19,14,11" | "@FLUX-SGL0-TEST:58,6,21" | "@FLUX-SGL1-TEST:58,6,22" | "@FLUX-SGL10-TEST:58,6,31" | "@FLUX-SGL11-TEST:58,6,32" | "@FLUX-SGL12-TEST:58,6,33" | "@FLUX-SGL13-TEST:58,6,34" | "@FLUX-SGL14-TEST:58,6,35" | "@FLUX-SGL15-TEST:58,6,36" | "@FLUX-SGL16-TEST:58,6,37" | "@FLUX-SGL17-TEST:58,6,38" | "@FLUX-SGL18-TEST:58,6,39" | "@FLUX-SGL19-TEST:58,6,40" | "@FLUX-SGL2-TEST:58,6,23" | "@FLUX-SGL20-TEST:58,6,41" | "@FLUX-SGL21-TEST:58,6,42" | "@FLUX-SGL22-TEST:58,6,43" | "@FLUX-SGL23-TEST:58,6,44" | "@FLUX-SGL24-TEST:58,6,45" | "@FLUX-SGL25-TEST:58,6,46" | "@FLUX-SGL26-TEST:58,6,47" | "@FLUX-SGL27-TEST:58,6,48" | "@FLUX-SGL28-TEST:58,6,49" | "@FLUX-SGL29-TEST:58,6,50" | "@FLUX-SGL3-TEST:58,6,24" | "@FLUX-SGL30-TEST:58,6,51" | "@FLUX-SGL31-TEST:58,6,52" | "@FLUX-SGL32-TEST:58,6,53" | "@FLUX-SGL33-TEST:58,6,54" | "@FLUX-SGL34-TEST:58,6,55" | "@FLUX-SGL35-TEST:58,6,56" | "@FLUX-SGL36-TEST:58,6,57" | "@FLUX-SGL37-TEST:58,6,58" | "@FLUX-SGL38-TEST:58,6,59" | "@FLUX-SGL4-TEST:58,6,25" | "@FLUX-SGL5-TEST:58,6,26" | "@FLUX-SGL6-TEST:58,6,27" | "@FLUX-SGL7-TEST:58,6,28" | "@FLUX-SGL8-TEST:58,6,29" | "@FLUX-SGL9-TEST:58,6,30" | "@SD-BLOCK1-TEST:17,12,1" | "@SD-BLOCK10-TEST:17,12,10" | "@SD-BLOCK11-TEST:17,12,11" | "@SD-BLOCK12-TEST:17,12,12" | "@SD-BLOCK13-TEST:17,12,13" | "@SD-BLOCK14-TEST:17,12,14" | "@SD-BLOCK15-TEST:17,12,15" | "@SD-BLOCK16-TEST:17,12,16" | "@SD-BLOCK17-TEST:17,12,17" | "@SD-BLOCK2-TEST:17,12,2" | "@SD-BLOCK3-TEST:17,12,3" | "@SD-BLOCK4-TEST:17,12,4" | "@SD-BLOCK5-TEST:17,12,5" | "@SD-BLOCK6-TEST:17,12,6" | "@SD-BLOCK7-TEST:17,12,7" | "@SD-BLOCK8-TEST:17,12,8" | "@SD-BLOCK9-TEST:17,12,9" | "@SD-FULL-TEST:17" | "@SD-LyC-FULL-TEST:27" | "@SDXL-FULL-TEST:12" | "@SDXL-LyC-FULL-TEST:21" | "FLUX-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "FLUX-DBL-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "FLUX-DBL-FRONT7:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0" | "FLUX-DBL-MID6:1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0" | "FLUX-DBL-TAIL6:1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1" | "FLUX-SINGLE-11to20:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "FLUX-SINGLE-1to10:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "FLUX-SINGLE-21to30:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0" | "FLUX-SINGLE-31to37:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1" | "FLUX-SINGLE-ALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "Preset" | "SD-AB:A,B,B,B,B,B,B,B,B,B,B,B,A,A,A,A,A" | "SD-ALL0.5:0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5" | "SD-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "SD-AOUT:A,1,1,1,1,1,1,1,1,1,1,1,A,A,A,A,A" | "SD-INALL:1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0" | "SD-IND:1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0" | "SD-INS:1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "SD-LyC-INALL:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-LyC-MIDALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1" | "SD-MIDD0.2:1,0,0,0,0,0,0.2,0.4,0.4,0.2,0,0,0,0,0,0,0" | "SD-MIDD0.8:1,0,0,0,0,0.5,0.8,0.8,0.4,0,0,0,0,0,0,0,0" | "SD-MIDD:1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0" | "SD-MOUT:1,0,0,0,0,0,1,1,1,1,1,1,1,1,0.5,0,0" | "SD-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-OUTALL:1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1" | "SD-OUTD:1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0" | "SD-OUTS:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1" | "SD-ROUT:1,1,1,1,1,1,1,1,R,R,R,R,R,R,R,R,R" | "SDXL-ALL:1,1,1,1,1,1,1,1,1,1,1,1" | "SDXL-INALL:1,1,1,1,1,0,0,0,0,0,0,0" | "SDXL-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "SDXL-LyC-INALL:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0" | "SDXL-LyC-MIDALL:1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0" | "SDXL-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SDXL-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1" | "SDXL-MIDALL:1,0,0,0,0,1,0,0,0,0,0,0" | "SDXL-NONE:0,0,0,0,0,0,0,0,0,0,0,0" | "SDXL-OUTALL:1,0,0,0,0,0,1,1,1,1,1,1"
export type Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_heatmap_palette = "cividis" | "inferno" | "magma" | "plasma" | "viridis"
export type Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_xyplot_mode = "Diff" | "Diff+Heatmap" | "Simple"
export type Enum_LoraLoaderBlockWeight_$3$3Inspire_preset = "FLUX-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "FLUX-DBL-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "FLUX-DBL-FRONT7:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0" | "FLUX-DBL-MID6:1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0" | "FLUX-DBL-TAIL6:1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1" | "FLUX-SINGLE-11to20:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "FLUX-SINGLE-1to10:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "FLUX-SINGLE-21to30:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0" | "FLUX-SINGLE-31to37:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1" | "FLUX-SINGLE-ALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "Preset" | "SD-AB:A,B,B,B,B,B,B,B,B,B,B,B,A,A,A,A,A" | "SD-ALL0.5:0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5" | "SD-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "SD-AOUT:A,1,1,1,1,1,1,1,1,1,1,1,A,A,A,A,A" | "SD-INALL:1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0" | "SD-IND:1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0" | "SD-INS:1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "SD-LyC-INALL:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-LyC-MIDALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1" | "SD-MIDD0.2:1,0,0,0,0,0,0.2,0.4,0.4,0.2,0,0,0,0,0,0,0" | "SD-MIDD0.8:1,0,0,0,0,0.5,0.8,0.8,0.4,0,0,0,0,0,0,0,0" | "SD-MIDD:1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0" | "SD-MOUT:1,0,0,0,0,0,1,1,1,1,1,1,1,1,0.5,0,0" | "SD-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SD-OUTALL:1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1" | "SD-OUTD:1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0" | "SD-OUTS:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1" | "SD-ROUT:1,1,1,1,1,1,1,1,R,R,R,R,R,R,R,R,R" | "SDXL-ALL:1,1,1,1,1,1,1,1,1,1,1,1" | "SDXL-INALL:1,1,1,1,1,0,0,0,0,0,0,0" | "SDXL-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" | "SDXL-LyC-INALL:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0" | "SDXL-LyC-MIDALL:1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0" | "SDXL-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" | "SDXL-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1" | "SDXL-MIDALL:1,0,0,0,0,1,0,0,0,0,0,0" | "SDXL-NONE:0,0,0,0,0,0,0,0,0,0,0,0" | "SDXL-OUTALL:1,0,0,0,0,0,1,1,1,1,1,1"
export type Enum_MakeLBW_$3$3Inspire_preset = Enum_LoraLoaderBlockWeight_$3$3Inspire_preset
export type Enum_LoadLBW_$3$3Inspire_lbw_model = '🔴' // never
export type Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector = "yolo_nas_l_fp16.onnx" | "yolo_nas_m_fp16.onnx" | "yolo_nas_s_fp16.onnx" | "yolox_l.onnx" | "yolox_l.torchscript.pt"
export type Enum_DWPreprocessor_bbox_detector = Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector
export type Enum_AnimalPosePreprocessor_bbox_detector = Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector
export type Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_pose_estimator = "dw-ll_ucoco.onnx" | "dw-ll_ucoco_384.onnx" | "dw-ll_ucoco_384_bs5.torchscript.pt"
export type Enum_DWPreprocessor_pose_estimator = Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_pose_estimator
export type Enum_KSampler_$3$3Inspire_noise_mode = "CPU" | "GPU(=A1111)"
export type Enum_KSamplerAdvanced_$3$3Inspire_noise_mode = Enum_KSampler_$3$3Inspire_noise_mode
export type Enum_KSamplerPipe_$3$3Inspire_noise_mode = Enum_KSampler_$3$3Inspire_noise_mode
export type Enum_KSamplerAdvancedPipe_$3$3Inspire_noise_mode = Enum_KSampler_$3$3Inspire_noise_mode
export type Enum_RandomNoise_$3$3Inspire_noise_mode = Enum_KSampler_$3$3Inspire_noise_mode
export type Enum_SeedExplorer_$3$3Inspire_noise_mode = Enum_KSampler_$3$3Inspire_noise_mode
export type Enum_RegionalSeedExplorerMask_$3$3Inspire_noise_mode = Enum_KSampler_$3$3Inspire_noise_mode
export type Enum_RegionalSeedExplorerColorMask_$3$3Inspire_noise_mode = Enum_KSampler_$3$3Inspire_noise_mode
export type Enum_KSamplerProgress_$3$3Inspire_noise_mode = Enum_KSampler_$3$3Inspire_noise_mode
export type Enum_KSamplerAdvancedProgress_$3$3Inspire_noise_mode = Enum_KSampler_$3$3Inspire_noise_mode
export type Enum_KSampler_$3$3Inspire_batch_seed_mode = "comfy" | "incremental" | "variation str inc:0.01" | "variation str inc:0.05"
export type Enum_KSamplerAdvanced_$3$3Inspire_batch_seed_mode = Enum_KSampler_$3$3Inspire_batch_seed_mode
export type Enum_KSamplerPipe_$3$3Inspire_batch_seed_mode = Enum_KSampler_$3$3Inspire_batch_seed_mode
export type Enum_KSamplerAdvancedPipe_$3$3Inspire_batch_seed_mode = Enum_KSampler_$3$3Inspire_batch_seed_mode
export type Enum_RandomNoise_$3$3Inspire_batch_seed_mode = Enum_KSampler_$3$3Inspire_batch_seed_mode
export type Enum_LoadPromptsFromDir_$3$3Inspire_prompt_dir = "example"
export type Enum_LoadPromptsFromFile_$3$3Inspire_prompt_file = "example\\prompt1.txt" | "example\\prompt2.txt"
export type Enum_LoadSinglePromptFromFile_$3$3Inspire_prompt_file = Enum_LoadPromptsFromFile_$3$3Inspire_prompt_file
export type Enum_GlobalSeed_$3$3Inspire_action = "decrement" | "decrement for each node" | "fixed" | "increment" | "increment for each node" | "randomize" | "randomize for each node"
export type Enum_WildcardEncode_$3$3Inspire_token_normalization = "length" | "length+mean" | "mean" | "none"
export type Enum_MakeBasicPipe_$3$3Inspire_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_BNK$_CLIPTextEncodeAdvanced_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_BNK$_CLIPTextEncodeSDXLAdvanced_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_BNK$_CutoffRegionsToConditioning$_ADV_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_conditioning_positive_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_conditioning_negative_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_pipeLoader$_v2_positive_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_pipeLoader$_v2_negative_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_pipeEncodeConcat_positive_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_pipeEncodeConcat_negative_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_pipeLoader_positive_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_pipeLoader_negative_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_pipeLoaderSDXL_positive_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_ttN_pipeLoaderSDXL_negative_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_CLIPTextEncodeList_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_CLIPTextEncodeSequence2_token_normalization = Enum_WildcardEncode_$3$3Inspire_token_normalization
export type Enum_WildcardEncode_$3$3Inspire_weight_interpretation = "A1111" | "comfy" | "comfy++" | "compel" | "down_weight"
export type Enum_MakeBasicPipe_$3$3Inspire_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_BNK$_CLIPTextEncodeAdvanced_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_BNK$_CLIPTextEncodeSDXLAdvanced_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_conditioning_positive_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_conditioning_negative_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_pipeLoader$_v2_positive_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_pipeLoader$_v2_negative_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_pipeEncodeConcat_positive_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_pipeEncodeConcat_negative_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_pipeLoader_positive_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_pipeLoader_negative_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_pipeLoaderSDXL_positive_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_ttN_pipeLoaderSDXL_negative_weight_interpretation = Enum_WildcardEncode_$3$3Inspire_weight_interpretation
export type Enum_PromptBuilder_$3$3Inspire_category = "#PLACEHOLDER" | "Angle of View" | "Artists" | "Character Types" | "Colors" | "Composition" | "Composition Form" | "Lighting" | "Negative" | "Picture Effect" | "Picture Quality" | "Setting" | "Shot" | "Style"
export type Enum_PromptBuilder_$3$3Inspire_preset = "#PRESET"
export type Enum_SeedExplorer_$3$3Inspire_initial_batch_seed_mode = "comfy" | "incremental"
export type Enum_CompositeNoise_$3$3Inspire_mode = "center" | "left-bottom" | "left-top" | "right-bottom" | "right-top" | "xy"
export type Enum_LoadImage_$3$3Inspire_image = "#DATA" | "000ba971de46c1b075f08af87758b6d2b791ba5d.png" | "00116c3de33f3012c90bf7d875c1ef4f0c44ca09.png" | "001fd93909b4156d23f798b11c28d531ad253673.png" | "002ab2e8ba7c17acf29f5976b69de9255c823c75.png" | "002b38d74d256dbcba63ea972987b9a71fec3c0a.png" | "0052d194f729628a7113af5a4416ca49b3e2a18f.png" | "0096440b8160c009e78cc9df09f94dc585984d5e.png" | "00a54030bacc9e47eb38eeea3f4129400029b6b2.png" | "013bb17560c93301fe544edd9647531b709823ea.png" | "015a798674b7a87dee66034fde02a57a2d04bfc6.png" | "0161352ba35f3a6b8738596fef4cb2e39f4f5a41.png" | "017549a19dc543d3fd6ebe309d6ee39d7d7e12d0.png" | "01f9df436d5dc3008de7f8d78baa64285a4a3429.png" | "0220d0da5cec73e5f5221f7d8ca056a545621ce7.png" | "02240cec8cdee299440e65317b38bf9a5a32d35e.png" | "0229755b5e9ad2748898aecd345c672d1795e192.png" | "024278f8e61aee0e9ca9bc6bca33709495deeff9.png" | "024c293c471dd30f270694a1538b5acb0a44cec6.png" | "027664a8d0cfbf1b1a369fdf9a5b22c86677ee1b.png" | "027db46bd39acf00ccd81d780d99fc59898695ee.png" | "0286a2e67471d644b1ce50168d39f5e885052a41.png" | "029ddad4f8aec4343961d6782f5931a5a3bcc299.png" | "02a83e7a682cc81443457977ecefeddbba1f43ed.png" | "02c30357ede603ce6431fc4b33c3b595636fc6c0.png" | "02d800dca72f0711adde685edae1fd8011b0c2ed.png" | "0308a82daa2d55c9336119a0d94ed88404bfb5ea.png" | "03122136d622c2eec32365a8269ad3f6886b5578.png" | "035d3251057b0eb1131db52d3cf8f515f18efbd9.png" | "0392310d86cdd3171ba54576719a16e46d89b36d.png" | "03c62562dc817eacd56856fa4dc8dc716f8b5f9b.png" | "03f63093ab4cd14218fd755ddd46a6185c40959a.png" | "04011f1c8c97683329f98435d16f385db9a84fa9.png" | "0432440a2eeb88db2dee3a7ad7a04a67c7e91d92.png" | "043f8e83600212df4d976b5ff9c6ba257cc1958e.png" | "04683b0e7ced473d4bd1d051623babf7ab6e10d2.png" | "048a77fd0632083f4629b0376519f3effa8e5d7a.png" | "04d274f4ee7ca4141f9cd663b83913b4f560ca5f.png" | "04d4ba28db64c0c221484aa5029ddaa7a75575b3.png" | "04f3416c939dfa2cf4d6fae595b92c0cbe76a520.png" | "04f8a9d6296200e15b6cd723b5e034375bdaf1f6.png" | "0510e53e8b67d831a245faf38055adbf6512509d.png" | "051a931a0e02b524789b223420ea729ffc7040d7.png" | "05748df0f5c61164e3df77984e2d30521fe4f219.png" | "05888477441d656caa5be0adaeee73b370606553.png" | "05e5a245d8b627f9d6dccb37b80cb3a3bf112efd.png" | "0625b809aa12e56313a333c96dd8f4ad4cd4bd4f.png" | "063578bf30ab1f28a133f20103952505fdb7cc7a.png" | "0663d1466d311018cff6ca54397aae7849e59610.png" | "067aa86fc69c710743a0c791f38140cc20f4c773.png" | "06cf0311855ca6748955561e7cc4d352e8a2173e.png" | "0777cbdad691dfb644a5bcb748594ae882b9c25e.png" | "07a30425c127dea0a31bb8d913c869c615c15c98.png" | "07aaa4db32b3fa0cdd85ee92f3cd8a26557f5dd2.png" | "07d56e6c10984993f2687ac577c1e7ac8e58c83e.png" | "08274fc9b0e6ebb74f364e54ba254fd19e8c7e2b.png" | "08722d58baf4816d9655630779f9732573ccde25.png" | "08d11c109edfdb6178fca4d00e80d82f8e5259ec.png" | "08e11cecf023226ce4a6f1d855ce19194e0b2536.png" | "0958b8802ba5ce4fba0262d7d6ab4065c8df9195.png" | "09a156ed13e30186d0d1d354dd126c5a8e13dc7b.png" | "09a89b60dd18574000147a68a4882dfeed263704.png" | "09b0d7e58d4c4828a181fd5d12ddb9cb0f8cbf40.png" | "09bd2df70547c20752a293abd0e1780df2983212.png" | "09de17e2c962c3904487931d1bafcfc70d9f0438.png" | "0a071d0383d588a6390eb1890946720b09ea636d.png" | "0a166abcca886e35c830dc9d2da1c1ac104f30f3.png" | "0a1ab8118200ae047f8fd2db0b9daba1bd7c2eb2.png" | "0a48f1ff039dd4ea8114689ee40b4e7eb2e0946b.png" | "0a9918ba667eb73cec75a562d8fc6010cc09c36b.png" | "0a9e4d129e6b3c5401da3ef549808a6b75013a0e.png" | "0a9fae5c6771b37fa6582760bde38436b765bf4a.png" | "0ab965cd325f434e82245d75dfccf58d56b9ee35.png" | "0b31d24f40a043e681ae25c0156039ba35bc41ff.png" | "0b34498e12b211de0f4e83ee2ed97299ebcc4789.png" | "0b35043fdfd010cedd0ac1c6f4503560d70a2d28.png" | "0bbb1718e982995a36624363e375661236a8f57b.png" | "0bca6d2a24620dae1e67cf5f8a07515917e69bba.png" | "0c3ad1b3a7dfa55493c868015ebaa9163434445c.png" | "0c42fa6554051d564dee8b8912ca44ec7ea60633.png" | "0c46b51b56306658796daaf6feab962b63e1e970.png" | "0c47d1bff2b1bed800bce0e9c064f2c87c80b1d0.png" | "0c4b482602460a27d014d9bd1309c23d74ddab82.png" | "0c666c52d2f9f7c1663cb38b45d7a378d00252ae.png" | "0cef13ac6bf29a791c240e381de9f10ed993786e.png" | "0cfad8173d4a5e85cdb5d4beeddf5f5c41c745be.png" | "0d12acb652f1537c0ddd34afcd21f3855b8268b9.png" | "0d162cc4443154a70bb0340a95f35f359978107b.png" | "0d539bf558cc0f2f6f0cc2ff2586a0724d8741f1.png" | "0d56a5ee9197c04aafa866efb8e3f0928d72737c.png" | "0d6772672f8051be04818b017a7a61cbf708d85d.png" | "0d6cae11a967fc8869a6349c4abf815e53a4d7e1.png" | "0d750fe285378bb8fd7f671b6813cefbd9ca2f68.png" | "0d9d32d1e7cc040e8bc1453a1c5ff56453f06272.png" | "0da002c1e86256be86c1ef31f9ce4581bb8d5dd5.png" | "0e018c4626b402e0b61a9139cdc1755dd9f1d0a5.png" | "0e11c7eff40ce9d018ec44553c8efb552b85904b.png" | "0e92f6f12c099bbb80889078aff8940dc78b64ab.png" | "0ea2c1c05ca1d5303139aa11e29f159a702465e8.png" | "0eba0f777e74f97e305fd813d426b48a061a8484.png" | "0ebad3562519bc6026dbf3f16f078e1ed8fa4ec8.png" | "0ef17b447cb567d8e30d00559338352cd2bc2b82.png" | "0ef386ca2e3d148c6767fe0cd8b55f04b18c569b.png" | "0f0470c5256ae63805a1c81c8b55cd263d8654f8.png" | "0f261bb648e8da770939bdaa656c3d54925af6a2.png" | "0f5d088b58a17bd8235a1f06e595ed24ac37760d.png" | "0fad6c64e9068be0fbf64a6404885447df06db52.png" | "0ffca95c9ed921647260e2af7789d665b5aa6d78.png" | "104a8ac9e8db90d98d04f29b7fcf2de79dcfa68a.png" | "10e49c8a1def1ef0d82bf301efff644b10d1ad59.png" | "10e6975ef564ab2a2a28cda49816068fc8b211eb.png" | "10f26d112e01ce80035a05ed9cf3480852cb58b1.png" | "10f6cb6b087cafd8630551b79bc8c3d6dcc753de.png" | "110ba9030cea18733ea19be13bfe8c14065295dc.png" | "1185edd9d55de30cbe4dc8372a786b0c19ebabdb.png" | "11b2dcdb5fe3fd0fc15cd4b903eba17c6ed0adf9.png" | "11c17c6b0c8f4dac06191ea3de661f4a542d7267.png" | "11e7d4273134aae4820aad5a73deb8f6461a0464.png" | "1244fe7c2d0cca10a2cd851e81174a8d9feb37b3.png" | "12679224b510a5b1a5db367bd2bd6fd00d478f8e.png" | "1274cc035648f67ddeca6e3724cbc8d748964774.png" | "1287109f9f62290f9c8a55d5f79ee5536b2f523e.png" | "12a28c96060648c8e1592457985f571e44c3de3a.png" | "12ab18183b0e85a48ef28a3ffabb9d2557763d28.png" | "12df6f5064fab3cf023267552519342731af0538.png" | "12f91f515fb7d0597a83972177833f2272a8db2b.png" | "131034f4c6a82681458280bc549d9de4408ed166.png" | "131f6a848a006f5804b5dbe7e558dc7ea6a9e360.png" | "136626d208c50857dadb7b3cbebd169912b97dca.png" | "136b00e2f7184dd795f37212e537455201b4ccc1.png" | "136efef2146f86bddc6f05729cef117859efae08.png" | "137d2805932a19aab42c58fc75e3f3b4c411a0d7.png" | "138135b29760465cd303762256ce7be4e10f83f9.png" | "13b45b0cf794c7f6a550e409c3f116697887c2d0.png" | "13e518df8cb97e20ea394f407a2f65ff656415d0.webp" | "13fef5b21785d41fa97b55916f29bf9a1fac22ab.png" | "14133f4ec39e075b49b5afebe4e1cc00bb79bcf2.png" | "143f3718543fbd8d1c7a3583185a07f49062d35d.png" | "145573035b097084c57d59c6b41fc2d66a59f115.png" | "1482deeadfd1a29daeb72929f60950bd3646769a.png" | "149d478be74d2fdc0d8c62f5f8b74f9d15b8623e.png" | "14a7e27f23f03e8c85135294b42ddb3f88c2ee1e.png" | "1506259089b9367d67d86395bf8a61030fe5c8a1.png" | "154190870562c4c74144c4c61c49668b597c4f1f.png" | "154330ab2afd6802d0fcfce62d0a460e25750e8d.png" | "15805e9240ae27e7a37e95c44683961ea3b57254.png" | "159f33d266bc63d27abdc2d9b82444b47c55510e.png" | "15b8b61211870917b04523305cac357439151032.png" | "15f664f442fffa0f9e719a904634d1e439cb52b1.png" | "162699f5abd4b29d83d7afe2d3f6ef16d347721e.png" | "162afe84046d51a688eec86abd1004ae300586a3.png" | "16535b08b37b0309ea48961f0a4d53542abd5011.png" | "1670a5e1bbb8563a43f496b7d45104ff8abb7d70.png" | "1677e298d4838b8b453cada8e65cf4ebe7e08457.png" | "16b8c29c4439c9c408cecdfbe5abca0badac532c.png" | "1741fb8d759b45f719cf01c8e94282d3db289fc8.png" | "17470b1de754f7e426998f82b504135a527a12a0.png" | "174edd33bec8e48ff927ec09c6d695f693d1fb64.png" | "1788001c47cb1d555d7cc059afd4b2a6a12327bf.png" | "179a2234e432b281cc708e78d04ffaeeb7363592.png" | "179d0fcbe60b66a247a3660f92de03e3b23c1dba.png" | "179e5c631d8fbe97316c64f0780ca7dbbd448a3b.png" | "17c241194cfc0feef0ee2d775419b0d1b5f8edbd.png" | "17f545e040c3a5aa3f2cc2aeb346dcb55ee81821.png" | "1816e277947fde568d130ddda29750e73ac1a629.webp" | "182d1adcae34cf20c9ddaf245a4bb1ceeb8b5bdf.png" | "182f9f14ab29ca743ec9b1d765ae7cf49af624e9.png" | "18414e230929a3554b1199988ec60b262d1f0025.png" | "185aeacfb8f03c5cec9fd2bbf346f6463856e8f3.png" | "185f28e0be8809ddef1481c816fd39b4ed213c62.png" | "18659aa444967ada6a457ef1cda7a7c7429519f5.png" | "18a3ae49cb9c0038a430d87c8d6e65e1ec2b2c42.png" | "18d8930a53b848580b2bd5bbcb98c592ce292821.png" | "18e726bf7776be9f98cb4eb41567d5d91c33db08.png" | "18f2ab3855e7165d19dfaadf9063c87890bcb19e.png" | "18f858e223b2018a260d80f0f724e3bb808abc02.png" | "190f5a8413fb2e9d84ec8115d5e9d72f78f94db0.png" | "1953f52062e1e7600bcae0d5edd7aa6dd2074901.png" | "19708996cd47b9cf8bcaab80e2ac1eab6612ddf8.png" | "19a179cf1c6b6c978414531606178ba4b8b43408.png" | "1a05bb6527f3a708da957e48a7866146eb034d4a.webp" | "1a263945660e31abe05ae25e74cf2be7abde6b60.png" | "1a377fe9d00b5da1d0166a1b1ba3ee7cda7abf4a.png" | "1a65e03043aca9e29621874b3fd137b9fb2b2683.png" | "1a85a5f91835383aee1e9fbbf77b092c9c53ddbf.png" | "1a923669dcdd133f7369e0e274793ccc856e69ce.png" | "1ad290c6a995fbc1198febe54cc1d7c9ec0c11eb.png" | "1adaaab0392d8e78add8b3619327ffca857f452e.png" | "1adafdc27f480f4a4626bd846cb76b3a86bc9e3c.png" | "1afd6b600e871f87d86e65b6e335de19a7756405.png" | "1b04ae64e62a11c501ba48eeac30e07032267d0a.png" | "1b09ae077387c236cb05551f0ea7929d521d34b8.png" | "1b14cf084618337eff9cbd33203bc4c13b4668c8.png" | "1b1730b76cb2a874f23bf6440eeb2a548a650f4b.png" | "1b3b40a10482e392a36610193b5ede2b53f8ae53.png" | "1b3cfa99fa7a30be6c515d4b39c8365ef683d4ad.png" | "1b49ae711039b490639c0e87e5c79d28e3128c71.png" | "1b9512065b03555c2d9a3c9220043711d5e63cc5.png" | "1b9a835ba04ec095d7492e04896199b9eabadd02.png" | "1bb6744ae5bfd6619efef926e21334f09ea1485d.png" | "1bd394c0252a623428026368277662695190f372.png" | "1beda7cba8cced3e0a57c9fa5828d8337d8f01ae.png" | "1c1392fbca883eb5febc93d17661c61ced67fdd7.png" | "1c28f9672b901205747b13e6e04b96ea3e4ccf1a.png" | "1c2c66c594833049207e6afe5abe3d411b1e3616.png" | "1c5f8b46d41c072c42fa86ee1c3832d86c1f9fd6.png" | "1cad09fb035dc4a82ea56195d1bdbc8df5dbcdbc.png" | "1cfd5cb31c8afe6980574b16b9b1f0e04ef245c5.png" | "1d25c56bf29b1ec847179accca7a31e7619ad591.png" | "1d4336013d0961707b4c898d5f247ed0648beab5.png" | "1db0d17da8a519d7c2080e0bd68f2dc7fe856c94.png" | "1ddd47785541e154596b984abef8a4c240d79a79.jpeg" | "1de166d66db53221a8fa7f3e607f6f0152f1e639.png" | "1de29c4e5b3174a62d53df9cb36b70e3dcdb8614.png" | "1dec4e67c0b0aaf5703a825e5f308b83671b97d3.png" | "1dfac933a817a86e62ef7b19e257bb6de7d9d457.png" | "1dfb3b9fe4ae6b1c51b6ac891755f8590cb0f433.png" | "1e080ffce73598375fcb8fabe6524dfe750f61ee.png" | "1e195fda27734978f1a925cad942ff00fc6bd225.png" | "1e340c01821e980d90c84599190307fdd4ccb94d.png" | "1e3a4695e201632e249ef5ad86a8aa7f44cad494.png" | "1e75d065b723ab890b76e72f93647269eaeceec9.png" | "1e764bdae906f5be3a275d6adb91e43fe0687625.png" | "1e7e87bfe2077f8f7add58ed917b4cd33a076189.png" | "1eab32839858452c5b4364f99b462603c87da5bb.png" | "1eceedf37b756e07ff61ce276b881938d023c6d9.png" | "1ee568dd7bbf82e728d375011333e4733ac647e0.png" | "1f0edbeca21a918e7cba7ea3ef7758811526989b.png" | "1f3ad3bf0a8cd3ceeee0583383f69112cd1eeb94.png" | "1f3b8440bfc1d449517e97ef68cb39e8d43e16ff.png" | "1f4000f81c56726c1e16a93dcc8df5a3691d9c7f.png" | "1f57e3d5886a003e34e2d0ec38d2f9c5244dfbd5.png" | "1f69bb39545e980a0e409f933a6827cacba2ae03.png" | "1fa318728aae648415dd8645cda7e28e41a350d8.png" | "1fa60fbd23db0aa9828e2ae0ec073c772c09c669.png" | "1fb7d15f4c5a767dbde2908f4691fc547fb8a3d7.png" | "1fcddaf3b056db3bb92e8585f9ef793af468f35f.png" | "1fd4601e29bb253b9078d40ac79ea43bf6f24cf3.png" | "1fdc79dca05a4bb460115b57fab1143d85d6d9d0.png" | "1fe0acffbb63b002fda744a176fff95de8fb1ba3.png" | "1fe61ffba4f16663141375b51d068e198b2e595e.png" | "20082ba4dd2fd33599a1d580dc496792b0573c17.png" | "201ef1f424119b2b0b814db7919f3daa338c9475.png" | "2020b5dd540f642465663affb261545aa94cd3ab.png" | "2021b9b98105fc20850d09be1e0c8437cc1a43fc.png" | "2037b6d3785434615fb1202325625ebbee4a65e1.png" | "2041230bc0ede4b4e7727979bdf3ad8ccc49c9c4.png" | "20d5b9f9e228f58deb91a25d10716cc6f95343a5.png" | "217dc2411650d11d7b555576c116eb0011eeee55.png" | "21c629853c572d6169e45a4cc03fb80269b519db.png" | "21d540ca7594f457f989023f884d425502f23b76.png" | "22289af3d733bf157deb9578b2d7312d2af67c2c.png" | "22537299966128a7779e19ee24ecd6cc93cfcf19.png" | "225c877c04a8207a61b58d6b87a7707c2e1632d0.webp" | "22888d12810ec343a94c8eaac32df26b9e43f0e4.png" | "22a029f7e9888a880ebd3fca2e481742e60bc751.webp" | "232e6f5cffff45bcf10b7ed8b08378e80d54e43f.png" | "2346c529c27e3bb2512b71ae41f6a49185e2057a.png" | "2379efb12f8e0f9305ea410cca35392c4cf3b7a7.png" | "24293c102527620e27380e8eb6151563b499c810.png" | "2445dbd21566faa37e52249c9d5993dc89d1e2f3.png" | "24855b8d2e70bd955a5465af2190fa5c866e0069.png" | "24b743d1b4b1091f8495eeed22c9a0e4e01722e0.png" | "250df43a07fbdff74148048caf59b5184658ca56.png" | "252f7c75795b9aff2a5424baf0fb4fbb0b457021.png" | "259745fab318857a364b440db729c51a28d5418d.png" | "25c173fc30c859cef0bd5fd754d4ecd0d88a74d5.png" | "2635f1e6157eee0e502d14344bdd7efe8e405c1e.png" | "268a5003fe9fbbd3d8bc24344faecefb26cf3b78.png" | "270861098d3c6052ebdb8f30c73f96f19bc7eb9a.png" | "2709dc43a88eda2e14de85d975446567207b263a.png" | "27108478e0cd631783eec923c5d7d90651f77340.png" | "273ad73180e1852e3145df12315fda2023ebe70e.png" | "2740d937bf8929e25e5fdec335f84dddfa1a97d0.png" | "27839fa19c1cdfa60d82f266cadae2c63cb27533.png" | "27d2aa8e3e4ccaa007135bee0a317e27fb60201f.png" | "27e6f3dd2a8d74546ba93d04024b7618f73a3d3e.png" | "27ea7632e7c390b01b56b596e079c13305d04db8.png" | "27ec06eeb2ff9b22d281382b5b6b5c9549268346.png" | "280c7a9fe7db73ce893d294bd65fb59404581b34.png" | "282ba5e8adaa9076cbae4064265aff356c9d8d02.png" | "28609e1964e0ac810c85df6411991c6d49bd9751.png" | "28c83fb755935bc0030d6748c4deaee2e58c6b4e.png" | "29306719cc24710aa5414367333f872dbf313f6c.png" | "29369a0005a2a9732ec5ffebd338094bca4d4c3a.png" | "29da1d8265ddfc2aa5e22393429a2b06f00886e4.png" | "2a24f507e8a7c90d1ea32fcf83645c59397fbe33.png" | "2a50919a3cf163adda599b879c28fd86aaec0875.png" | "2a7597e9db8a9e0ad93a4ef9820dc1a55a4162b1.png" | "2b10ef27891669b4cdc1f41c7c2c1e62b1495569.png" | "2b130670b2340a84fee6ce9d032b885a8363de98.png" | "2b1574d9de398ffd4da51f98cce725db1cd0d659.png" | "2b2e3f4ed2be1936c1926d33d9f95de2afcdaeca.png" | "2b4b0a0f16687aea4370b1218776bb60ebe7b902.png" | "2b6c71ab6a2dece2f24eefcf70264e839fee2a28.png" | "2b814726348cdf5e7a87628250d324740bbb4953.png" | "2baa746c1c0c051551e875692e19f677764dd0bc.png" | "2bb88a763ffa946266e73a324d30ae89d5cc52fe.png" | "2bc713d66e898ee83d5cee9ccdb6b60a633c9b43.png" | "2bdbf076839b29896d339b59d88043cc5801c2db.png" | "2c05aad93419c00275e31a9425b3728cdccdfbc5.png" | "2c21585a62b0f755e2ec91a74e2aebb5458c1830.png" | "2c5d833a4eba934759da056a3108ab1dcc004380.png" | "2c96b69c3c8255d3086cb44387f70da57580a4a2.png" | "2d0d2f68cbb4bfd2b145f0576d5b5f8ab3a04cba.png" | "2d1f5078c49c9a4800f899f0023053fbb8e262ff.png" | "2d3657a6e81cb241b8fb2ba427f44e88b2aaae00.png" | "2d5ddcdb0e8c388488b4defedb7fc3feec57b3eb.png" | "2da2940ceafc65228dfd8b66459fd3f17e60c8a0.png" | "2dada23a171830798e03ed2392f6eb52fbafce46.png" | "2e1d01ca7380f86859b55027549811f75cdab0d2.png" | "2e2035631cce2987ab041c7bb32f2bafe87858dd.png" | "2e26e19290fb2265ebabfb88e4adfa81dd546343.webp" | "2e2a3f22ed9f5cc86464d2897ffeb3f29481ac1b.png" | "2e9bb866cbedd03ddb8fbd129f3453d5b0f14542.png" | "2ea585fff2b5e74dec939f73fef54cda176021b1.png" | "2ec721eb0b1a3e87ef3ee822fe5ec51fc2f83c6d.png" | "2f00d0e47bdc253322df1e8adebd5030673b3f1b.png" | "2f03a2704ea7977c41cd91a8a2347e27a11136e2.png" | "2f1a587cfb34f57e9f39cf3e6b14e5e33dc183f4.png" | "2f47c5fa3aa0025eb11afb4a9293b0bd6f16493c.png" | "2f68b451f71159b4083f8b4bdf6c851dcb9bcb01.png" | "2fb1ba99a58b0d9bbdb3e06c42609917a540a56f.png" | "2fbd9c96c8dc9fa4d57f5e2f2e23058b986ae1eb.png" | "2fd3678a8ea96456f68036e659aecfb054e85b1b.png" | "2fd9d69a200dbfc9bb79edfdc608ea753d4f81b1.png" | "2fe81dc5ca6eec75b6b18b382e0f3ea9c63e759d.png" | "30034e0654d3e61198df8b5eeefec76231dc5c2c.png" | "30122d2c77912d8bb9899f6adf5d457468e9bf44.png" | "30305dbe5be508ac2e520b35f1070b15e99b6107.png" | "3035a55fc42bc55a6c995b510785c3213b42d434.png" | "305b1cbc03735c6502d3beae6313e94a8437c60e.png" | "30825a1452bad9ea8e61a061991f55a96a07d1eb.png" | "3090c7fc7e0bec955e8bb610c8dfe5d9cd198aea.png" | "30d24d6f64fd33de7665c6862ac184a3cde5e91a.png" | "30dd7fa32ca4cc3cb39acf7454bac34c574c2434.png" | "31299d781b0e0ed888d6f722367c6db092d012e5.png" | "312af8cae34417e178bb73c27972d43933b77297.png" | "31542fce0ed97022ab096ab6055ddf43782f1d29.png" | "3190763574b23f2dfa1f1ec1fa101d7ff75bd5f1.png" | "31ac42c22e7ae0edf1a8ac64e8425d6968e87c75.png" | "31b002f244cea3b413d4a963463521951bbdc459.png" | "31b438e94c509cf46ccc9b2c0846a49dc317e7f8.png" | "321991363df151a440874d5db6861c09d1eedb2f.png" | "3293b136ad3e93b6797f3b32bd90545e65375000.png" | "3312023531c0a8bb670d4b2c1ad9c285898f6f87.png" | "3312fb2d1f0146cbbf617cc80278b58e6f594a88.png" | "3365e74d3dc261d675a03dfe41ff827cc61f66cd.png" | "337cebce3b569862c6045cb6017a4ec205ab1a5b.png" | "338826ecaa0453f26da0c8ba4e0d9d9492c47010.png" | "33914fb65dd99708e0d112579bc47220af346bd3.png" | "3409c33837a6f815b825b4bfa302f6c3cc42b223.png" | "3425809b44421ae93c458489c7bee2b7e951434e.png" | "345f4a0c6777940e2d594118118f6566fa9ffe89.png" | "3472e483c34884855bc6ba9520f7a19f2bacedd7.png" | "3477acb81c523a976fd2ce565f0a1b04f7ffb837.png" | "34a010fc2c48c1f4c2b9e0bf5a9184cf32ae2f6d.png" | "34a50641f8626d1119f8cbd061206df511b6956a.png" | "34d815fd8baeaf71b3ba8178955d24f8eafb08c3.png" | "34f01b58ce3481533373d54176f777c8c9298582.png" | "35015c38d485abe35ff43de3c2df6a6aed64ca9b.png" | "3516621fd74137f60e8b48c2b33cb85e6f4bbc42.png" | "3516d396279827452ab5d1ef28ac04a0597f9b0d.png" | "3541e260dc0ca177bffb73cc30d7f7aaabf1c09b.png" | "354765a59446780b495cc42d0f20d153cf82786b.png" | "355f1f3f44f21dee2960d8005db2b59cdc46c0c8.png" | "3588a814de3743fc6df0a890f5fddd843e98bd3c.webp" | "3593dac4fcf80cf11b753ae14c88011c1877c064.png" | "35b712db1fda1beaee66ceec199576f7e8a42cbb.png" | "35c6721562a8856e2a230b844f9540c6064d2fc9.png" | "35d66b88654882888dccc6b2ddbeb03d53bd3b7d.png" | "35da4d74838392e9ba918e328e780b0cbdf261b2.png" | "35e3749ed49bf872562dbd52ca64946620500382.png" | "35ee48f40ead86a238e3d6a47a87f9cb9c4e9c4e.png" | "35f44c59e9b5fd2e1927e8ee1eaa8d9d4eb38b40.png" | "3638fea770d8e58c645ec8c54f7adaf4e130af9f.png" | "36650bc289a7d2d3e189211c8c72c2e3d72591f7.png" | "366dfe1b96af5b025d908d01305d25c1c2a4fa45.png" | "3689f921ba820ae6af85b37a450ae552a7528e09.png" | "36aab5c4924296d845466ba0edf81639dc91b281.png" | "36bb80dc249f0d76056b3f104e898755b7324c12.png" | "36d16cd491c8d241701a646c9ebb2df3a4d96a92.png" | "36d63b650371b1e8624c01052b2c9328a009ad91.png" | "36db4b733a084cd0233a484b2ce2dc057aca2ac7.png" | "373b68dd2b175d80cfadda8fbedb2ea021a0c984.png" | "3746b66b30de7f38486596f6edfefe2520e2e8bb.png" | "376a0cd7949eedbea371da51c29b9d4175def74c.png" | "38091d0e911649615311786fa97d67c027a132cc.png" | "3816efafe88e1f3b73904f077b43df2f7dbdac5a.png" | "38c2b7cc16181976f802f9691ac9e2b0739d5098.png" | "3985f1b718197a6ae6e9692176f79719aef21b10.png" | "3a25f34e04b857ffe87b0608eceb035b58fd6c2a.png" | "3aa92771c373f8c12939d61f8643d8958e76a6b0.png" | "3acb9751b449092364d19a8989fe1cd873b5fff4.png" | "3ae68817485dd7e2ca82fa020da4b1f8b9093224.png" | "3af8e51ecfbd74137a59ee1cab75db6dc285d5c2.png" | "3b001aced259ecc1984f3fe366572ed64f433962.png" | "3b2bc81a3afb8d1944a3da10e3504b37680c4c7f.png" | "3b435fc96af474c5346add62af9a08f83ea6dcfa.png" | "3b6479da805f499e566dd3e7d56e153efd56db95.png" | "3b7e7812699cd1c5453ab12c241f54d1de60127c.png" | "3b954a7dfb4da8aef24edf99a678468baa7731c3.png" | "3bcd9a162eb794c4f4d73664b78f84baa8c4ed74.png" | "3bd37b986938a6f6edf282e5a015c28eaea1e7dc.png" | "3c2381b12270943cbf231ceead4dcc8496899d69.png" | "3c6a80737481243649d9f670917e2fadfc1c1f23.png" | "3cbec3583b185ec7025ca3b84c06de6c086d56e8.png" | "3cccef5890cb65c7724ca5cfabd6a86c2433f1f0.png" | "3d222270056d94880801278a2cd74911a3041595.png" | "3d2853147256fd90a96a28c6f0e88ee92dc12c59.png" | "3d5b20708aac8b5a6b33be412b9dd1088fca4559.png" | "3d6d6fbbab8249978882063aa4818218d1036bf2.png" | "3d84b0456a85cab774b585c702607233703f9bae.png" | "3da8dffb33b5e94cf306934ec1be53efcca07f31.png" | "3dfd3b2d2e38815400f336de2c72cfb7093d7769.png" | "3e12447513cf31933254c53cabd1e9e2592e32e7.png" | "3e35b0b83e8e31b5c690a2bdd15d1dfbeba0b26f.png" | "3eb7cecc8fe06f6beb0930afd24d20492bba2a44.png" | "3ec39fe78a698e44b6c2cb691fa0622c9b872b09.png" | "3ecc5281ae5ff88a8e437a3370c177931e7a18b5.png" | "3f00bbc215566f7a32e02e62a480620ec521ff38.png" | "3f10dcd0dad9ff37f46aac175022389bce3ff7eb.png" | "3f51ec69abc35c5aba27c6f96d84bdc888762496.png" | "3f873a896f60543d9846f9c5035b14d5ecdfb205.png" | "3f9c3912044105e1415c674e44b1af8f21eb04ad.png" | "4001083638174ff6a945fdab29fc4c20a422a0c6.png" | "401275c176e8e624f376bee8136fea8b9eac24db.png" | "402ee8fe8a83f7b865acf9e1b108d052b06d9b19.png" | "407eff14fd4d8a13f825cea2dda66ec64f7aaf19.png" | "4089874b5db33b0599c9df15a8045e6d21f491f9.png" | "40a399b6e5d93d3cae845a0deaf883fdc055238e.png" | "40a648a63fed8328afd3454a2a6791d618587f70.png" | "40bfbd0ae764a220880ec2b0ed4ec92be955ebe3.png" | "40d8b723970cc2130f1f9250a6b6c14c1b2480ee.png" | "40e01e67e2b4a00f1fda44a18c99b720824927bb.png" | "40e57bb4993242e962ca3d14a5013869f0690db6.png" | "40ec33de7aceb74b43ad12052c14021ecb164674.png" | "4128ffbc7cf67d690b8196e6aee219bd03ed5a09.png" | "413725138516c9b0276299577f83a7689fe40f52.png" | "41b537d7e28a8139c3c34dd94cf9b8d1229be44d.png" | "41d928f7db291c8a91c79d12e54b9508eab177ca.png" | "41ec90e094a98a04f4f869b7f1cade9cce688d0f.png" | "41ff8653d4e6f75250e0f2abb610620e7e1e5416.png" | "4223bb407da117b4b010c9f570362777bbac0d1d.png" | "4231ec8ac1c22fcfd2585f5983b12615c21cd253.png" | "4235a9d12a21bd65f7a401c53efe5f3d2db0271c.png" | "423939d16158b6f184fd40852e21ad27c6136849.png" | "42673a27d832be34c0b43a60ecb029fab0a466b5.png" | "429c466beb6e0de9ceed42daa79dc725de19f34e.png" | "42c2a48ef5542ae29baef52a5c40aa81e9711535.png" | "42d57d41671d50e50f9f580adf39eb7bda8eccb3.png" | "431723d0e52e44b3af396a02edec2d12c7aa9ccb.png" | "433713b6cf372e9f9280e9b4032f639fbddb16fe.png" | "435c0680103198a2b230a7972bb328e79f6666df.png" | "437bac923a46e4eaaefc326af21aeabc85ad7966.png" | "4393ed07b139a78521741742bdb4c3dd5b970def.png" | "439ee9e3ed09a80a356b600f360f84ea2a86a586.png" | "439f4b6a080c992d670aeb2f7a1d100e9d885635.png" | "43dc934bee35a55b7ec3bf8c4a844f6f32e6ff53.png" | "43f32a1bd618592b89030f291626edcd2cef8127.png" | "440d99fb2b70535160b095e136d0435a92c4c2cb.png" | "44841cea55bb97071215dbb47508e180f1953706.png" | "44d73678ecaa1b01de125448f3f8feea03b4b36c.png" | "4515add69963a2b1f9e280d2cebf51580b3d3342.png" | "453450c547ed5f6effb08419a408818ab9f60302.png" | "453973423e58cec17bc6a764af7ae2c372d165f5.png" | "455d3347b2a6da5407fb2924fbd1852a0d23c3d5.png" | "457c269d55b0e53b74ca6f66f78be795789c52ba.png" | "4591e2c7e0520d5717ff69416886aec0ef28737f.png" | "45b5c60639073211d84528d4470560a3207a541b.png" | "45bf89862183646d27431c0aad32f492f459ff92.png" | "45c16988f271b590a0b831940a008927ac46cb1a.png" | "461839e2633f944c781d4cad129f09d2e7bbbc01.png" | "464a5adc2449f14ae4d9d6d39adddd6c92c31574.png" | "4687862a5705591fa72ccf8e6166b34fcd15d871.png" | "4690ba84dde2bd66eb5e342898f9be31af794b70.png" | "46a6a9fba9d169ef1f1d1d4cda601f74274364b3.png" | "46d753a80d0b66952450e76a58adb297fa54b723.png" | "46f0aa8fa5925182e14b8528b5ceb3e5146a2155.png" | "471a16acd3e592cfc0239532752b8107e386fb2c.png" | "47342e066b0605a5fae1e53be205b580153048f3.png" | "473dcca3b00de2e299eddcb7826093906cdd17f4.png" | "4747f5a6de0ee76cdde34f37c65ac2cbe440b99f.png" | "47691ef15d942393c5e527a48b2de3b35175a832.png" | "47ae8373c4d5da1fdc305e9b26e98503fc10b451.png" | "4828ff9db9614b9c1a4e531d1f7d63842af9fba2.png" | "4829338edeae3a98c40f94d25c5190c1c55ddf8a.png" | "483303bab4bf406e6b0f40960762fbd9834fb4cb.png" | "483a06eaefa0f080673877ba803a4455a9ada59c.png" | "484416661de2fcdf4c390935b953015d31a927ab.png" | "485baa051956ae7082a8000f5bf602103d8a6a18.png" | "48729ffc7f88bd928446fde26149eb81df0cf197.png" | "489eb061666d70591fe330ab6871a0f23fa0d381.png" | "48b8f0eaf911bac12ac8cfe9f43350ec0ff3e164.png" | "4905fb6b845b7fa030848f970c0443d996b51fc9.png" | "49105fb25509dbe54483fc841c142c5f10ca2383.png" | "493345280259a8c628221aa402d9f4eed6ccedd8.png" | "494f64c376005b1386fef4413f0457b600103af2.png" | "497427de87de66eb7eb4e1d964c63c3eba8497f6.png" | "4975478a4e35336de2f39a65f564a8bd69db78ee.png" | "49b11ff52fb49b1a5bdd47ae053a554904975237.png" | "49df23b61a7f4b3d1e88f9ac1ab1f8367e3f1309.png" | "49e642506480df75385d064c0510918a00f0f889.png" | "4a27080c35c76bd7bf18d98f7c5eff5445816178.png" | "4a4aae1d322bf506606e314e85f5d784ac425636.png" | "4a9e8d08753ca19dc15acd08b3c3e7f593de1dca.png" | "4aa1c469cd3fcbf355a46a916b54f1fffc08cea9.png" | "4abc15363d496805cbe43e39a8eb57df461d0d5f.png" | "4ac8a3615d677999b33ed3ea04fd073eb65e93d9.png" | "4ae35c4b7fa198ec0f89c8a2198ee6a3be067112.png" | "4afbf2a65ef99fed9b2945a8de60c98a31e8fd10.png" | "4b28187f67b02efb71bcfbb2e3ed4cf576b0fb7e.png" | "4b7cebeb6e96669d078a0a0257d0276830e77aa2.png" | "4b9927b19880fb8295089d5ce901746b989d9ca9.png" | "4ba3b16dd908861d6af7e652b8a9874fa73fed7e.png" | "4ba48df3bd5a1852897213362044b6766b76c212.png" | "4bb81c5b3f9e261b5cdcd36db421ac9e74b071a5.png" | "4be001f03ffec5b74a2d1d373689c05271d5c817.png" | "4be91aa35dbc31ba055f84abf1da9f92ae04a0ca.png" | "4c3d38b40dd7ce7466fb999087b1e3434ce65e74.png" | "4c5127ffaf4b4fa6e5eb28a4f6a990b180caebba.png" | "4caa046cd7e93522b0f10ba4985f0ee62887d361.png" | "4cc25fb9ebe1957d5d743c310b28c93cd9f8a093.png" | "4ce8816217acc83629016672103c77692802c829.png" | "4d07627790637451b524ed2867b08f93c9feeea7.png" | "4d2fe4a87a40ed28a7953a7c9ab1e14f1d0ce305.png" | "4d3177a527e7121c5d3d02030d53f4e05b60678b.png" | "4d42aa6d8fcf7cb248efdd5134f9be23f1b03e5d.png" | "4d92a02111a3c1aa7dd748a5da759a13c1487ed2.png" | "4da47e09ea7b7c2b3d0b907369801ceb8b6114b1.png" | "4db02789dce615958152c9b212dcb4749f380074.png" | "4db05df26bcf1c829a4e3d6d657f838a04989a23.png" | "4dd24cccd888dfc061ba8dca6ce4165415990847.png" | "4e201ba1bcd66f7db50f4fc006fd34d3223b541a.png" | "4e2e5464750a415e54115f9dcef396274bc2feac.png" | "4e6027ef3c4094c1b24e4cfdf64a0a3b1b56b425.png" | "4eaafabdaade66566eb922910af137071b93485d.png" | "4ebb19760f954bc1e2d2931ce670bfc31f9d249d.png" | "4ec0cd07502386d5d0b29ebff146c510507f20a8.png" | "4ec72f83ac60b3ebf89450b1fb347cb68af78b30.png" | "4ec7b96cbf4d1d130f52d2707b53bd866203e7f7.png" | "4ed2bbad17334192ecda37efc827658c78a1b7a7.png" | "4f348c915252faaacd08a92b79eb1e19e6fb69c2.png" | "4f4d38789bb5247c32949554c57046f4a28ba23c.png" | "4f4f711818520a61934f1ce8b113f0a60556eb55.png" | "4f5ea6efcde9c16aa72a40a038a383efb2bb9407.png" | "4fd9f59709aafc1fbb0d84b5344cee3fb2fa1ad0.png" | "502359e105ac8d87acde5d989e2c9b779b88d633.png" | "50786ea3dd3147669a74e61a96dd1eb124a81820.png" | "50944a35531075fe48e8482e7bfe277b837fe3a5.png" | "50a31ae9749df3da38072761251c52fe7692f5c1.png" | "50d5cc50bd0e2e2a703626a04692456e1524fe41.png" | "50e69a2df72de7fc28044628d5ab9750fd176511.png" | "5107ac9a3b534bf15a00ffc63e40e580721861d2.png" | "512a0ef05371fb9bc72ca0f0c43b893e77d1134e.png" | "512f3385f00d04aad18550b716905cbfd908d4f2.png" | "51482452a422273c1ae447af5462f32f7f7af8b9.png" | "5183cc9b6e3d2af741cb36dd0fb336ce1ed10cdc.png" | "519a9dd2c07d3e46e2e8d7c2517472d07304fe44.png" | "51f4d66c3b63cb6355b95477dc57178c66ea10af.png" | "51fd3bbcb9904ecd8ecbad4e092a6e2e25e136e1.png" | "51ff1d51c2c840da386bc196b92d7d1414fa7dfd.png" | "524694d9717fdfb476f685ca1278c3890e6daca3.png" | "5294abb30c197aa1f63b695dd17eb81de2bd6b9d.png" | "52a04d629e74ce5b8449f9cab3ac66f9bbabbba9.png" | "52bccb30a455eb448efa65135eebc236979fef9e.png" | "52bcff5c0eadce927d19f11030852547ce6a5a21.png" | "5312a09049a310f25f02396c1b90ecfb0b2acfd4.png" | "53137f09504cf24946c12c4daa53bd7b4782e8fa.png" | "53279b8ed93159aed4e729bdf0c7ec6022834293.png" | "53661d7beeca82ed71982246c9d2bf4f1e9e8a1c.png" | "539b873ade377a822f6f04728033e47c4183ea3e.png" | "53d46f89254731737572d7e4768c712202e75963.png" | "53f53c9a9f95c2b55f8139901ef14e65ebf7ee57.png" | "54458a2897ed002b53d5fb6ab65cab5ef19dc31e.png" | "54569a42f66c2d0dbe216192e6d260dae8636072.png" | "54c537ee63e4a12bd8ead4dc62faa83b07b6386c.png" | "55253f51326ad202fdcc388d0f5e44c4f74d77c9.png" | "552cd52ef0d7881f6ab6365050b674810ff4ec82.png" | "554254fe080bb0adad5f7fa97be06e40208a7d94.png" | "555f1f15f25949ddcbff7835ccc729266e1fff38.png" | "5596720e2115619e4c793596b9d57983e08462d7.png" | "55e68251acfc623456945091a656b80af1c7eaf4.png" | "5674df46511610d07a8b6c9ba4615aa51c3f71df.png" | "56b2dd7b543012d3f4cd09a3cf0db9d85889a6e5.png" | "56c667a97d16809ab9d6a91957b6ccf46f3be432.png" | "56cd803013c9c714c0d2087c7e2b67a894266e7a.png" | "56e900aba78516a57588800c980f5e2accc4e4a6.png" | "57377ea6f497eabea6063d2ded3840fea4895644.png" | "5739ea5e97a11c1415a4d26de9f5661b723e480f.png" | "579d61721212406606d196322a030b9573b3d74e.png" | "57a791b60b60e9e64d6350f4d5ee637d4ffb8d3c.png" | "57ebf939e8d10099e527734d3823ce46793b5fc1.png" | "5801ea5623327403603452ccdf3e31cb98880dba.png" | "5819677906317b965e9f5879256307903ce42dfd.png" | "582466a70f5c72669ca07ca4bbb143b3e51bd805.png" | "584c6b5551bb240dd3f712290eb7fc04e448cb2b.png" | "587f35701023ae0694942e1264165455ddfc874a.png" | "58801516c5f8292319a4b2e674082febcceb9e99.png" | "588dea62ba6417abf5bd454912f796f4536d72ce.png" | "58cff98543497b835438f7cfd59b1b4d4b7e898e.png" | "58df388b6f21f27abdc33a95b0eb747917718e2c.png" | "58edff94c486957301930ef8a984327a5f48c2d9.png" | "58fc7b3d9b34afac4de048bee4e3b0326a01c4f4.png" | "5932a6b4ba798ea5bc446cbf32209849ce86eb16.png" | "5945fe73d1c2ce086df0757d01f0138b2233b842.png" | "598385b1ecb757b20345c2bc028535ae5021a711.png" | "5991230ec16e5671637c60184a0c65fbd89d4c11.png" | "59a893d1e12f23b1eaf9c6047114dd9e9281de7d.png" | "59d6c99aab8525a20ea6458a050899144a19263e.png" | "5a108add214a4c973b62ac4fafd984a24b8cd465.png" | "5ae1337af7fc374aa807e4d4af87bec3ddfdce00.png" | "5aef7a7380e4709f1bfe69e11f8c5e24ba36d2f1.png" | "5b0da58bd4d42ad325545289418b0144a37b02a7.png" | "5b4d1c5092ca75854792f3632f690c3b764190c8.png" | "5b553448b5ce3431e98f00a73825c75cca19be24.png" | "5b60c973ba1ffb76228643c9c8fbadc01974c56f.png" | "5b89be11e24d6bdc610326bbe17cd683c4f30969.png" | "5bc6143ac0c8d994818d7980334e0d93cb56f959.png" | "5bebb8adfbfafabc6bb932ca71a64652e40f5d8c.png" | "5bf9978ecd9d90b9be06693a13aec60161ef2c11.png" | "5c1b61c427234677f3a7019078f4786d5f22b25b.png" | "5c2ac53dd1f64f6a467c8653a0a890b6b4337286.png" | "5c47fbe489ed4c15e13bba35953984e52a6d18fe.png" | "5c76443fd466d6a230b9dc676dd031b6e61145b4.png" | "5c7c6b86d0d029cb5e622eca4494afc2c37e6962.png" | "5cc3c3066c54fd1fbf9ee8ec2b78addb7c3411c3.png" | "5cd306cf8b16c152bdf0a33fcf3e85f29e1d3f38.png" | "5cf5b71711ea7759282432b915aadca578dec895.png" | "5d0b2fda4be867ace579862993c468e13b462b57.png" | "5d1449be23f602c9af1c0e33ae44a5a2cb70cf06.png" | "5d4a83a4477e0ade77532fbdbe4a86a3e44b986e.png" | "5d777081175a1d87bf20f4ed58a11c3e3b3e1699.png" | "5d933e9e0120349ea29a3256334a060c7c1471ae.png" | "5da7457dc160f9cee11b571d812c85829aa63ce9.png" | "5dea49b3223418a99e48eb99ba31033c2537bf71.png" | "5e338594d36a388619b3dca7c821a9bfbf4b7865.png" | "5e55b7a8b6c5523bf5e757ea07fed0d854b3349f.png" | "5e7c12ad8c83321f49e1986bd94d9b67acb180af.png" | "5eacb875880be63246d9c2c3d4dbdcffcca2b723.png" | "5f1e49247ebcb4b613d92a06e4d5104040070970.png" | "5f23fc32200fb16f9b7d28f972d6cfbb913775d6.png" | "5f4d934926fce277162de265731f66317ef18363.png" | "5f62d7c39cefa5c923c421bf40a2c9b718767b64.png" | "5f8dd798131bbb8e283e52683302c31da1a7d91a.png" | "6002e5fa68d1c9e932a4d518d81c4114a31de10a.png" | "60225eb4f38a81a6889ce5b8c619d750686c311d.png" | "604ed7c032f9b879041153b36b4940da58370431.png" | "605170a8586c0d3616ac765061fdde8b0d07b68a.png" | "607122d76749104d9b7ccf44ed7452629fdbe171.png" | "60776523332ee074f735e9ab5ba57250da252697.png" | "60b6fac57629120362d3299c96ff3865f22ebb3e.png" | "60fb1f0e8f3749eb61fab013bfbf254e77b204a5.webp" | "60fdaa3ade1065b085d1db7bccf78f9f2ee4f4ea.png" | "610525aaa2e65b521b342f2ba08ade4d40bd51d5.png" | "6147e003740032aab6f5154adf8faea16c51702f.png" | "61686cd1929e7d3a83c2d7f8b3e7fb28753a7343.png" | "6182699c7a29c7b443c924133242666a76bc02dc.png" | "6186dc602d0ccd2a56a2e97247330782e8f5bebc.png" | "61946c092014964443557d9c77be1bef4ed2fed5.png" | "61a59f7d186b80c205cfe1b0a630d84492498bca.png" | "61c063e8c7948f2c207ebcf6c8c2f6f1fe0d5e9a.png" | "61c9041fc04ab7bdeb8e181acf5607ceadd5a06f.png" | "61ed9d0bbf00961efaa6909923ae9ca334912585.png" | "620ddb451844f2b14005789a24340bac209c86d4.png" | "621baf768a8d13be31f38e2c0d629dfcd45601e5.png" | "621c98784e22b391592159c7170d1c647913e9be.png" | "621f6424041561de8d712a67561046285d652d52.png" | "624607921d3404cbb91dc7ed5e1fe8d3bad60d96.png" | "62637bf5c0a75207b98360ec36c9211c1e28bd08.png" | "627fc7b50d44c8936973d5287416d2976e49ba5b.png" | "62998044985b193eb8c5e18e7059881b234aff60.png" | "62a5fce9232df5b0d3fb6ad58387f227d1cef899.png" | "62a8a9f58b8e5faff1f88c8d0d10a801f8455cb1.png" | "62b07459335af4d90098d7ad08d551f31af75584.png" | "62b472d85f2a0248759813f8b386c9f12a9b8a4e.png" | "62feaf4546e74540f647b003b4868381239e3253.png" | "634f258e654b4fe65dfd78cf03d675b0a801b076.png" | "6358f86f02dd80babdc94315b2a4306c99f27fd8.png" | "636dab01e9f8409744cf12f9c771f6d30d2e5e1a.png" | "6371612707573f059f8923c05551dbe8ed6685d3.png" | "638a342da23a1ad5d2c11597744e948771308bd3.png" | "64290c7828961c940c4a81ff0e67a30a1665f929.png" | "6458cfeffb7b2b35c691ea4d70983097d554db30.png" | "647f8e238c14fe74229763b74bd5555955637a60.png" | "648fc6d1b1434c6987acbaf8cc2b5a0374e96b82.png" | "6497769666c4999a3896e4418f34de227fc85260.png" | "64ac7c280d060603f78addae9e2744b53a3f8360.png" | "64b0ea04d2774132923f760c1398f7ef36fcdd7e.png" | "64c3501bac0183c39621e10b10c6779e2e16b623.png" | "64d0db4cd1fd501722c3ee85605b1e3ee5eec887.png" | "64e611f6cbf61f7d2d80c3265989944a6e1d74d2.png" | "650ab16605b0e6738dd4ebb14bd04a6c522c775b.png" | "65120cbc7fdcc9eebeb0f1d70f8a0001051dfd22.png" | "6523a7fdb7ea58d72c2afa31ae550ddbed4488f7.png" | "6530e5623146cb3d8073e688583fdf3a2400c004.png" | "6532c78aa00befd8730b3e58f761f3369b56f658.png" | "65378fdc5ecb6bd042c1d15934973280e7d32efe.png" | "65476aec479958d63f2e23183675c97d34ffdd89.png" | "65a374ad732b474c02afa326407471b7804cec40.png" | "65a92a26eeed0a4dc1a4f852a23db62e7c98836a.png" | "65c715418debee85e04fe1bf99d624bd9bf170bb.png" | "65e7b9de1aaa361015d970e20678f667a7272d07.png" | "661c06cc4f0246427f8ebebad343d3be54d1bb1b.png" | "662207b1cba28844616049d5c84c8fbef454dd1b.png" | "6649490760d80b926ca5e4ceaf41b1fbf174ad79.png" | "664b55a18ad8fdc03dcbfd686228d67ab4d829a8.png" | "665fc49dc6fe6f9472d95dc39e30b723bc4af98f.png" | "6684cd3b494294bba76e603a44d4c05586a1f4b5.png" | "669794aed6ba6238d9c93ce07b96090c88fbdd38.png" | "66b1e64908382f932d7aefd7a41ec46e6e30f53f.png" | "66d4764f5dc1dc2306cac1bd8058219c999f5285.png" | "6718a4dd9711ecdd608ee5a4749570e13157f744.png" | "674eeeabf56d84775aef286fd7dc1f401a136270.png" | "6754b0fa337c14f758c85a26127128fee9d89d8e.png" | "6777aa1fc877176f077f768247ad2306bc6aff03.png" | "67941c73f60358b0d284ad113cfe6cff361ef877.png" | "6797f9933755a999f5e21e4060181d50f916b048.png" | "679d5c9c8512893c6bed1205f780306ad4ecd667.png" | "67a386b4fbf898b8e780fd0d808d45a08abb5962.png" | "681d35ab6f945c9ff82564b5ed501e06186febe0.png" | "682813278bb5687ef48e6d7aacfa1fd54b2f9cfc.png" | "68386f111d6c4d61b3c46d5f0aac07df89e88fa4.png" | "6839d13c4457f917cf661a2438707e9ce86da803.png" | "684d39615e88a9828acdfef17c0adf263ddc5af3.png" | "6856c0bd4e47c706313204a5e53d6727064a9f11.png" | "686078a22ed92de758fb25ae3a9d660efe5fb19f.png" | "687f25a07d1a7327d4564737972a58cbf84401c5.png" | "6880c8b25f1b5c87d58bea7a33c00413b3413684.png" | "6882d04e78f511e2f7fd7160a27f6a9e9ca8ef9f.png" | "6888d96c36c2b71820dd4978547adbbd321f2ce9.png" | "68a2bac49f9c2a33a6e458037c2e68997dabec9d.png" | "68c05d156e720288f052328e5f1c0f4f6349f201.png" | "690429e3bb2194ec0cc84ea1907379ce50900a93.png" | "690a02cd5956c9e75e1f364068de84b9bd04fa3a.png" | "6937c80868863424151dfcd2da5af1411148d3e5.png" | "695528986a57a4c47fd3e2e56d98036167b432f1.png" | "696f690924be9bb49dfb30add5dc8596cd36dd87.png" | "697065c7a6bfdc950f17363b8259b67aa1b962b2.png" | "69f42cfef6007a6f05651fa60ada3e37c31649f7.png" | "6a049af3c8496c3b5caaa3ac8fb3ccf8a959c6db.png" | "6a166e15bdc6be803c6d6aa3399a911c8a7f7b38.png" | "6a17b14f659f03c944814c613b2e7e3f47fd06ce.png" | "6a20e9321c81d0af00a0075821404c8a11e6679b.png" | "6a3e0541d584bae08751639ebce58f28eafd8f0d.png" | "6ae0a9bcd9db4aa221c3966e4b45fee32140ec65.png" | "6af17a8795e42ce75cea722da7f60fcbebd0b44b.png" | "6b23d544a3f81c970720f94b6e13f537b8d4de8c.png" | "6b6519a474d69412ee09cf5a587edad4ed2c8e9a.png" | "6ba343a59d17b6021a9650f0b37313a304cb3223.png" | "6bcbb0589473b9200f51b725d5069328a6983c21.png" | "6c5486e1e47f7f07e35376fdb98ef2a118dc8e77.png" | "6c62c61ef7cc9327e40c502771e4cd8b1012ac8f.png" | "6c9840728089f2e2c8d10504869fd12111c586ac.png" | "6cba9eff038e1776556b27568a38f2addf929bc7.png" | "6cbd9831899c8de4a3fb6bc84bbb27f2bbecb380.png" | "6cd91a095fa16aa221d2f4f422081cd0d533e833.png" | "6d3f47e7c53106a963706f7fb01a33fa4b3700c3.png" | "6d419d642ed68e82ee688af3922d5bcc849b288e.png" | "6d9816f6fc04758d7640f28985a73e044a18303a.png" | "6dc682b6fd4d796295c3f6e25cf9a556dc12d610.webp" | "6dd1ced13834cd1c7e81f3e4a3d774317664403d.png" | "6df4d2ab8cb4dceef82e533246f234173c2d7b9b.png" | "6e38460de0a6ffa4a43665b40c4921434bdc52fc.png" | "6e3c9c52ff10f52844a89df7f48ec66cbfb3c325.png" | "6e5e687f147672498ded50a81b69395a68b12240.png" | "6e8a3964944c05639ce2d574baaf9737f967f20f.png" | "6efb948189c7bcc7f694c7a1d1f92f88ccfd9868.png" | "6f3bbc0809eb965cc4c3bf5b38f0b119d70aff3c.png" | "6f640505f52caf39b9ea59cad0c4ca21fac986a3.png" | "6f72151f049c9be0ba90aefea4362cda8867e7d4.png" | "6f787616fe750b997d9fe8809e357a5fbdf5d962.png" | "6fce61f009d167be0151303397daf7774f5b25e5.png" | "6fd2fe25ae62126a8572eaf6da9a89e065aa6e00.png" | "6fd34139f625cf0fd1d83a0022d98771b4e2c59e.png" | "6fdf6b0d37c025eb8bfdd3d90bfe9eda48abebb4.png" | "6fe399130ef375bc0506a9c76a50301a5da649aa.png" | "70896b6834b79d57d3f7766efd266d2a5802d152.png" | "70c9dae3a83597e6265f84ba79f81ac85286fcda.png" | "7133da06d3ad8939b66c5e1a252051d59d26c668.jpg" | "714808471c6b49418a13866baf97c46a47df6a24.png" | "719c98d0b167e574f3a2c2e109c0171534e709d4.png" | "71b37529429f4182a0379ff3f6059d3498532ce2.png" | "7251a51df0b955da34a5a08bf42a14274d3ee52d.png" | "72bad4ae6c3a271948ec9c4ade4ee73664fdcdc4.png" | "731cddfb19bc4c76fc12b562a4d21eb05b3f0099.png" | "735453990a39a951503f74898bd5e0b90832c03a.png" | "735a70a732519add42abb87fc8a9ca38ee57794b.png" | "7391c797bf6f351b0f94b4decf923300d941b845.png" | "739f93b0146993f52aeb5dfd2b723bf03cc7f108.png" | "73bfe2038e33cea78060a645d4cdc3c0ae35cdff.png" | "73cb323a17d61547c60946259f3bbce50a3b56ca.png" | "745811dd235fdb7a73a418fbcaefdac0ac84dad6.png" | "746462abc3cb82d6cd4ca43882c819021b224841.png" | "7471338cf243927a7b40b59cbcd08988ab8b39ae.png" | "7476df1f774864a2f80606d296bce73b8d385749.png" | "74821946ec1af95eac660ee851e4938a23a556be.png" | "748bcf87745244e8ff442ad6a8e71460d880802a.png" | "749a3e4e6c5339fc1bd79d45a25d18fe75efa7af.png" | "74ca28e2b77b69af89366da3f958e2380ae55243.png" | "7518e7f5fa590436a2bf2681bc9aa60872bac85d.png" | "751f797f08e7dbd4a471a263d1bd4dbbf2b772c9.png" | "7554ba7d88871149805c6efeb7038f8d58b7a4e5.png" | "756b34bd27743b2815c17ca5919cbe8632a9e68d.png" | "75e8157c659680bf38eacb6ca3f0532966b4f892.png" | "768aa2da0ca7514af44b60e9255d6037cc00127b.png" | "769133279ae31ee722e1b213b63d3844f04eb51d.png" | "76a99c69dc38f9cb94c26520bfc6fd3b66dbf6a8.png" | "76cf343ec9a65c683c2b3d9de80da471f29db803.png" | "76d729608f52c24048333bf2029e59a322f60a2e.png" | "772e9f375cdf1a22b59fc61453d2f75a0b730968.png" | "7733fcb98736a777f94cfe56e31357d9e68900c5.png" | "774f372dd6706db0dea7580ccaafb4701ec2a624.png" | "77556dc08741a8a5428bc6a27babf83d940eaf96.png" | "775fb3fff92525835c6245db678643db47059ba7.png" | "778487516a53ea9b9baaf5881e1106b5bc4731c0.png" | "778dfc54e4b8b3139af04ff36ce0fdc03fec6e5f.png" | "77c361ef3015331e2eafee80ab92807f4d96769c.png" | "77e74f033754fb9965b68034aa831c34714d153e.png" | "78140fc23f35c40d3599bf92a8fe23779519770c.png" | "782e82e79ba7016f05655b92ecdbeb7062ccf06e.png" | "787a99684fff99f223a39483de08d4590a9365a0.png" | "7896636330bee41d2263599393906883e728f10c.png" | "790c221cd31c03dfbed2cfd0ae7ce8a05c45c230.png" | "7913fc124d68a4aa3e2beca86a31fc2986bd5c07.png" | "795f8cefd86cc0052f25b1e63d4ee3352c809d2f.png" | "79675a9a76d83505cd3e0301be5c9fda1bafd0b0.png" | "7973d0e1f56b267aa619225e200a5f7ed1714804.png" | "7982c5aaa3d88d792b18a438c5853e75fb1d3585.png" | "79ed3b0093e01a0005731a86ad6efecf40daa6ea.png" | "7a14d4e18d8d799c279fd18a3a93b7a5f0c55c80.png" | "7a37d68194b466343a316aae62535f66e5bd0648.png" | "7ab7aecb38686ac1fcbfa06260cc14dab90b5cfc.png" | "7abe09da4b539ed0eb00d26d7cac07797ec0b8d4.png" | "7ad13ed95f5dba947c7350dc166bfcec852c877a.png" | "7ad1c0d1a94bcd2c9458c18a3034ac0101b53645.png" | "7b02c6c7bf1e047bd8764c1beff4edcfe8de60a7.png" | "7b17f58632e17fccffaf8a55306f898d7029eedf.png" | "7b5f5999cd02b6053cd01e1b8b7b444bab7afa4b.png" | "7b689803cfe8854b4215daea17e9885a72acba51.png" | "7bb2fb7ac18e87b96d2d0add381137b880663c06.png" | "7bd9440171a6c35db756445ca2319d627c70b071.png" | "7c13cc2c46d549dc9bc4c91a4b4f450bce74763d.png" | "7c18c3a8500046495418b3749808f0f61ddbd293.png" | "7c22e4ad63962c049c995759d9f81ef8212f3cd8.png" | "7c35cbe23bebd2031e74d8f157a06ceeff99c548.png" | "7c6f02500e87fffa8414244051b58a75ad2c9ae2.png" | "7c80abd06f824151d456254e3db9a3f948c27155.png" | "7c812f7c0b52b3ac4689a4a91e4de819c285aeb3.png" | "7c82741e89f3b1d10f93e9c25add559593d4d774.png" | "7cb4655bfd9815ab98aacfdf68052c658435aca4.png" | "7cd305f8490b18ada69ac629d90cc4913745d2d5.png" | "7d00cf7aa01b9d9260694614a97228cecae98ce3.png" | "7d01dfe002e8b214302c72899682cdcc98e58996.png" | "7d0aa3ea48cb96d5e3a67a7a54b2b6353749d144.png" | "7e15061bc895da04f33056fb5791d94d7d1f6e78.png" | "7e18f99dad7b6312b11d64aded25081d8a5c297c.png" | "7e2d2d5cd91a9cdb8e10e8a4dbabdbb8e0bb124a.png" | "7e5a7fce6738f0694633f1a4c027ddb4e3b11fee.png" | "7e657e65af1655cf9460f599ea51b257170ce839.png" | "7ead63adbee7322ba39a3e8ad49eaa7f9015195a.png" | "7eba0f502851bbb540e3f78b2115669ff892894e.png" | "7ec9865395c1c533965657359b9bd56d975ec2d9.png" | "7eda1816b289cb9746c4cd5f7ee3f0adb320b39a.png" | "7ee3f52bcdd88311a203d800559f8ae344d98a38.png" | "7eea9878dad520dd8067ddaf739ced05ccd10d15.png" | "7f839b92c30e1b7d726600bd84b6cda85dac59bf.png" | "7fdd7438eb009b445156e543105c4eeab3b8e184.png" | "800bd0c062a2d911d4ba0f8f0fbfbc53672ff8cf.png" | "801ac7883d7fcb4b6f023367d02e1bd4fac05a4c.png" | "805180a28789c001c7a2a40a07e8a34f1cdc53b5.png" | "8087e6b16ab33e7e4e056785bab4ed2a68609036.png" | "8098513067acc55c7e608222fd80b545d73ad369.png" | "80e9ee21a8c33cfac96264f0b24d79221f540a44.png" | "8154c4aa75d3066d2122de528ab01465f284c3c5.png" | "816c4f6cd490fd791661c9e0c38a162589148e88.png" | "8173bc3c609ca3f813cc55f3d5e9a4ca2ec8d372.png" | "81ac6ec9ec9af10636a634b0f0509ae986d4b384.png" | "81bcaeca370702fceef9355f7809097784c5d80d.png" | "81d5fefda923e48aa1cd814a2eb4ccb64810e4e5.png" | "821f9cc6068e83542553c309533222fbb7029dae.png" | "822d0d01437a594af2ada7150a6af60a6c58a0aa.png" | "8238670dad9d9cd93296fb38b840fbcd1e67e50c.png" | "8256b717455144795864309923c51a791515df3a.png" | "82620fb43946cbc364262144e0369c4d2c92d387.png" | "827e78fe0e32d1c8211a3f7355b7486ef4696360.png" | "82901f154498ef54d987a3d4d3664a4aae178562.png" | "829f9505dd6134850b34c74194e2a61bebf3f922.png" | "82c609004cda9dccffb1cec54f7bd9f3fedb03eb.png" | "831786cbc67a977ac7c5b05d08726746012a2cb4.png" | "837fc8b7ab4639566f41677edbaf4cb6fd9ec21c.png" | "838519d172d9c26309bff51b35ba67f99fdede4a.png" | "839c23fbf12695fb5e1428910ae4d8e39e609548.png" | "83bc0520a9d86387db223bb0e834989b99257aef.png" | "83cbd2d7fd0a0137919ce483db8dbba5daee143a.png" | "843fa55e9810417af16da413eddde63800a904fc.png" | "8456ac337dc18e0397a5f6d0da139767c434bec6.png" | "845e8741d244305426bf2948730c8d4be533222f.png" | "846aea1e1eab4672c93f86532f8e5d82781da82d.png" | "8474b82c0d7f5e0a6899d915ef965bbb259f979a.png" | "848ce3b743dd80f75e77ff0f9cb3eb3db7b2fdf4.png" | "848d5faedca800b3f36b06e846eeceba7f920d41.png" | "84a10b3f22765d53311149ddcc858314463e61fe.png" | "84c7b61dc57d3becdd055c51c598f8fa860f649c.png" | "84cb4ef246d09de0c9299d09af6a6e5993a4e869.png" | "84e1907685990cd1e4d515dec8788eb21d35e48c.png" | "84ee0670ee38886ef276d9b68b5e91a66f64b767.png" | "85047ae743205744998d87ce8f751a0860e83ead.png" | "85a4cd52cb1e34458c05d8675d98f9b1605406ca.png" | "85ae04f0c6b61f88731d3fb1413cdc1173a0a448.png" | "85b6170bf235c73676f51d0e8de4f7ec2e81e0a3.png" | "85c12da4a0df5d364265b98b15034cc7faa70896.png" | "85f74912634e4618daadf9d54fe2372374230118.png" | "85fddb6ee8a9fca4baf19ca06ac718197bf3690c.png" | "861e857acd4d3078f8faffd5765a57d15867e696.png" | "86560fee15eb93a0459dfbcec9deda4eaa6edf11.png" | "8668e8350670a4a24e743a58c676a831e0347a26.png" | "870d1ae1deb282989e86e0b5c1562b8cb9c629f6.png" | "8710ee5aa140c5cdab586c657d5edb76a99707c9.png" | "873e340fb0c9a2c630650f5cfad3a0b6a31e5c4c.png" | "875812f524cbda8198df45d405ebcdb70aca46ec.png" | "876d99fe5d0ec6355b3fe1f33cba5be4626bc52f.png" | "876edc6885c879ab5b687d61f8f81c8ee699cb09.png" | "876fe1cfeeb993f0aea607e00ed7f4b8efbd7493.png" | "879552192f0d2cd1d002654c049b8a85913d22fe.png" | "879ab430e7103bd070ebd271acae0420331eb4e1.png" | "87a706935934c4b10bef05f5241c04d87bc0288c.png" | "8809aeb58c7b77b879c1b94d4b48fb15638e7327.png" | "8818ae29f57f8d0e710e09ae27b29e0c16f22d53.png" | "8840c88097445133e7ce2360cb8d2b01b142dd5b.png" | "886a5aaea56fb88e56858ef85b09e86de01df667.png" | "887d6455985da98958bd436867cef7dc22c4038e.png" | "890cfc889cf9fdac75e300bbbd3f677bee132625.png" | "891294a9ed661c9cec33d98735e5c0de3749ff37.png" | "893bdf2d4396ce2cbef8cdc49031280cdeff8c4d.png" | "89809981456787dbda3e8fe5f8410605ab35a2ff.png" | "89bf5373d42085b06ca1d9d488dd951947992f85.png" | "89c99d3324d093a4f352676431cd68d98abb2aee.png" | "89d08d17a8c2d07dae5926962d4d80122c38ed4c.png" | "89d2cecbb4600756caf2001b64edccd954a9e9e7.png" | "89d4b7754bc153327b4132b12c4f7f17bac79304.png" | "89ecb8a43ee12e30be8493287649e61922560f64.png" | "89f4ffce4f894c2b8c6e3083c77ddd6ddff0f6ae.png" | "89f56e9a873d26a22301004d9dcea3ecc26023a8.png" | "89fcad753a4231f666a1ac1c83d90a68a96cbcda.png" | "89fd0479d7f657a66974c7b99d0a5e56b1d8f65b.png" | "8a0f6536964cfb682ec25e05e13ccfac525815a1.png" | "8a19b66ddc5171ceced6e41fe17f76ed3065c496.png" | "8aacc858a9943cf7207f1f6788c9ee7ae03e7652.png" | "8adcad9bd625ad15b104a0de32b998758141e32c.png" | "8ae8f5378f5b1652d935cdef1b2a1b17879fb9ce.png" | "8af3280c8986d7719d665f5d9e8c0fa5fd426fc9.png" | "8b03f3487ae504fe79bc2e26c3bbd0f1717cb837.png" | "8b0e8aa7acf271a6e70af8208d91d7cccd584ea1.png" | "8b1f6e0efa614b9f97e0df4f263025d2a0f9e831.png" | "8b1fde94509c330a343cddded89dce874bd798be.png" | "8bee8191b5714827ffe84480675a0bcff44d2f95.png" | "8c04222469f9d5e1edc2a156b5d105be72c27cff.png" | "8c270a541c329b011010df63b47b75b058fbda65.png" | "8c8870938972beca96b4056825495f3d0a99cb30.png" | "8c8bbbad9efcf84191f26eb04c0ad0bb87bb6bf2.png" | "8c8e45bfbb6a201e98ef3b354d31837e35e98454.png" | "8cdb0fa99c2e99038b8b7b83360aec94ae91c773.png" | "8d3ff268d3bce7a97a973c4a99381401f822dafb.png" | "8daf1afdd8144d69f3ebacd280c900189479e1ed.png" | "8db097e482c7673c65925cd11655f59d20983ccf.png" | "8dc25db6a2a42c8c8c3e91373c06141f933c8c8b.png" | "8dc965203ce5ff2504a6564ff74fbd76542548c7.png" | "8dd33be6ef9b9c2469f6e9f96efb75f01c4a89d4.png" | "8dddf74475e4348791573305d842717a6b16fde4.png" | "8dfaba4797c02e342b9ede766ee743f9b6449f7c.png" | "8e355a688f9a7d3d741bd82f950c282ea1baa0f9.png" | "8e3e4846ab0630e0e5856e5abc97240254abf751.png" | "8e52af6d62ce66f6b155ae7883f6d17163f25849.png" | "8e7175f7875406a62f2f621ad330426fb6975f42.png" | "8e734362dc1ebb2f032cc9274de81249259f7bd3.png" | "8eb27e3e57b21131ef9bbe3bc0ebd933ba53d972.png" | "8ec07f3c142a5c4cae9c90a3e33758c59b7ad00c.png" | "8eed0dfead0ba2ae5b3ca0646f188149b4bcb037.png" | "8f733dc73ce477ce5485fa933b4bdcefb4d93ebe.png" | "8faf43e9ca81bd11c367b7ffbe1d635ff223e401.png" | "8fe7af7b38732504cb000f12b28e120cdff275da.png" | "8ff2f16271cedb4fb03ca639733127fd31b9167f.png" | "900daa37b276d975dd2e287b534115e659f9e3e0.png" | "902e0da3f32d06aec2ebbc4fc7c0a1e649c096ea.png" | "9040b52a5343ea62b979a1b52207a7fe42fefe68.png" | "9051198eab7c5106aabf2595ae386fd020ca434b.png" | "90512b8ad4ea5b1b805e7f1fb3fe1f7fd75efdec.png" | "90d8fb1838d46f810f027780a6f25ef063cd4cd5.png" | "915f14f7b72fa78c0ea38b626467799b2c45854a.png" | "9161968d695361b13f548fb6e101873fdd437170.png" | "91755f29c85fabb694522081061298020b5adc0e.png" | "917ccc38f11e825f9eb9c3e04e92128ef937170f.png" | "9189629d78b74cbf8b7fb6ec3348753259bfecdd.png" | "918f5242aa6923e4f232495371f1bc92c9d33321.png" | "919b2d974a4b89a8f7e1601d385291c7631067fa.png" | "91adcbab6def57df15e27bb4a584a96984b5d6bb.png" | "91f8bf5f9aa9e795657620adaa280786629c28fb.png" | "922f641c3955876e4853699ee745077c92211121.png" | "92513539337d6178b1e07bd16222e20990892916.png" | "92782b0e642396b037a5d6545c4340c0bc8f54eb.png" | "928a4a91c0266d6d2be40bd57a9ceb7e8cbfcde6.png" | "92bc1f34fe9b1e81680d4e50db70b1efff798444.png" | "92d96857e29e9694bd05fbbf13654afce2cfa400.png" | "93167824b435e3d5ce74006fe4e156c3e610de35.png" | "934c2ffc45f25e832d6cfae1d8e7e743b1fc2dcb.png" | "935f7874dfc03aae145416ce1c834dd84547bc6d.png" | "936f2c8dcf803c07511148b3090438956973b11d.png" | "9388e1ba0e2c3b9d1c628a12bd75352ee1604315.png" | "939fcea27b90f00d7643fec21d7fb04a33390527.png" | "93af8f63d17b877acacfa5cbeb9a922cfcfd27b7.png" | "93b7b3eda88a86bdb7d378cb571d4e1d8506c470.png" | "93c75e01cd0ccd099be8f07879e4a15854933319.png" | "93ceed42aa5da604b25d47a72e727bcbc047f7f2.png" | "93f88a8de4c75263122d108b07237b2b02e62aa4.webp" | "943d5be94629438c1a764402bdde0e73d9b47b97.png" | "946e94a0a8bbfe2d53124cd7062661636bcfa6a4.png" | "947958698ea5a23cdddefdbe27da4a0010a690dc.png" | "948b0dda4062f0930a2f4183a44986a0c1bc5733.png" | "94c9365ca1510a2a139dbc7424bbee9b91bb1798.png" | "94e5249eeeb9c043a5819aaed83311cd9f96cfbc.png" | "94ef3dafc1733880f857ca9a255e7a4e4c2caaf3.png" | "952b67f2e7fd91545cd2ab012fe8ed52400117e8.png" | "952ff132b05f2a98d411ed64ac90338e40ead875.png" | "95404873d0584f5e5fcea8f960c5e5938ff9562d.png" | "9542cadbb0eb211cd9f18e430f70096712a0929a.png" | "958c2f470b000786f34d9c69a66b54ad69ab4a27.png" | "95b83e13dae7ced25b338bb2e9d9e86c2a4b55e0.png" | "95d0d90d71e73e3c318e6a6305a0b7b2c18eb6ef.png" | "95da0444f6ee1ee753109a97ff3bebd3dc1cf1e0.png" | "95f42c056baca598fa01bad6cf4e1bb508451224.png" | "962b66571c881342b66fc5e22124a89e43f8d5b8.png" | "96489bd2a84f35662be69689c8ebac3bac54efd3.png" | "967d407c18363c50b992c6a49d60d7c8761824f2.png" | "96a7b0c95a919613a09531efd642f0c320e5d624.png" | "96ad8dc77111129b602eec42effe0e0224e535a8.png" | "96e630971966c9a8078972fb045b638776efdd28.png" | "9700db817731e44bd3c24509e13be8e3650d0e28.png" | "97386428e025c8d4a86394f467cf17ce877915cc.png" | "978cea6c1818b5c0352931781ccba1eee7519402.png" | "97abc0aaf753137a397003de26bf4cdd3d385a67.png" | "97f6e2300f1b7da83f44286a8b07fe18736f2f5d.png" | "97f9b9a2f9d3e29322643c128f7e9887c8baf51b.png" | "9805a39a52e250a35a95905fa76f242164112685.png" | "981a0c863f61830ad5d2408560a671ea60e9f4b6.png" | "985556f6a2819de157f0dc6bc4c60fef8a2261a4.png" | "987adbe5caedf3443a84f839d7fbc7bac165801d.png" | "9881d53378cb79ee9f5c83012ab930ee51511091.png" | "9891d1b79f077f484c355e9896853049812679db.png" | "98c6a48f053d29c531e683475b3920189451ce07.png" | "990362469e3ab9278d782568601bf63071be4a02.png" | "99054569e52478fb2828cf84f6a80ed9dcb808c6.png" | "991ef897716b2ea2a61a342eea553624645e492f.png" | "992fe5daf1c6b68c54d87e627800940713850b5b.png" | "9946afa58554eb6d67409adc14c3540246b7f95d.png" | "99850b86a193919ce7ec544b55d2e90eb82b45d0.png" | "9989ce4af7167b49ad55d638c62dd6b7589d92fe.png" | "9a41e435c4b6af814c9e955101776801d003c001.png" | "9a50a90b792f1d856ef9fafad6128b002ea15f89.png" | "9a8c72a960fae55bddeb4192f811a8d2745b3c57.png" | "9ab7ca1151236319f32656560fc7c7e89d67f259.png" | "9aec46bafa0106b8e4c51e9919727905a1d35f33.png" | "9b04e655a6ce27ff9f2046b00829115789f82916.png" | "9b1bc7799cffbcc5daf5079fd8bda4100d1ddb07.png" | "9b90107ca3049e6f9819962c35cde43167fb0a30.png" | "9b98397bb643c72f8f2d955c3d744b76947e65ef.png" | "9ba7974b1ff4b8bfc666cad3e64699aaa464cf4b.png" | "9bb16fa63c401f01cb149b6efed4ad93ad26304a.png" | "9bcf8a73784cf93ec635721fe72923d438a6b7dc.png" | "9c175b635b4e3e8a0d8db208e65aacc8a4028f31.png" | "9c424bff013558fc0ed5f858fdb5eb2fded9e9f8.png" | "9c465f52f4e6a4d9e549b0575f281d407906ab60.png" | "9c54ebb008347c16e62ebbae5938b5ff7f574ed7.png" | "9c7feaf723c3201a5ab834943b7e8e21fc810e5f.png" | "9c8bd682f4acd78ae804baae856b3c541c701833.png" | "9c95544c60064bfbf2d45b7624d0ca5469be89c9.png" | "9cf36be79a3e8c348e017343f4a10f270ef26f69 (1).png" | "9cf36be79a3e8c348e017343f4a10f270ef26f69.png" | "9d497841388530a8e9214b9945ce8bc70b63ead1.png" | "9d49b9870204876fda448df851fdecca1ec63d2c.png" | "9d6dd169088672959d145e8e5c06a21f0a4299c0.png" | "9d99979293858a9d4fb3079e8532d9117b6e0179.png" | "9db65624d8958be4eca8dcb7ccf85d2e37c8da83.png" | "9dba903e853dc93d6a2f3e69cbf0078b4723227c.png" | "9e078adb05bd5ddc5bc62036285c4d8f9cd4fb57.png" | "9e2a82a618ea1643c8b27d20cb9ac91372d02eaf.png" | "9e5d68def105e89d2d46cb664ce55558c7a137c2.png" | "9ee2816c8d26f723fdb0edd7d6972df87251afa3.png" | "9ef99e69b4f7b82f775472cd9176594a2043cb25.png" | "9f5ea5e8b31caffc106d47f00a4d1059116c3c8a.png" | "9f6c013689d219d8e961f0b8bd5387a83a228d76.png" | "9f7356c4cb881ba049ecfa60fc2838951b525859.png" | "9f9d2072dc9950e2e4486776126f9a4232964821.png" | "9fa055691df609e5bfe5b3781057f62529b445b0.png" | "9fc1edd36fa92c10965f99959a6f82fff84dcd5d.png" | "9fdf8061d31567f62d6a5f62d0c8b26604ead7a6.png" | "9ff26fca3e122a74ee0b1e3cfe0d312935e42abc.png" | "9ff3f0dbc5a70392449dfa179a0119e7de3dfa3d.png" | "J7Ey0mAZWlXpi0oqddm02Qt7siiv3TFiFUTkVzMAvA.png" | "R1U9zUfOo6I4GJPAPaSexVwPtGtE52CyFpBpwp1YrQ.png" | "a0960a7fad75aeb3853ac5e7b5f806867d3d7283.png" | "a0bb305dff21e5fc6b2fff6820b7ab7774d3fd22.png" | "a0cfa581583900898b285bd613a7ac7f9a5204b1.png" | "a0e32dbb1008e8e9b986e9852ee90d9226cb3d10.png" | "a105d060fa165791c48b750422ab360291206f63.png" | "a10c97a5d682300e98f57423416b932f1aa10136.png" | "a12eb31e4f9ec48cd8bc2d7638ffea0d044f9dd9.png" | "a1399d3658cdf5cd59950011ca1ddcbec61b2b95.png" | "a13f9071badd3e5c32c1b0c8eb3417171e1b410c.png" | "a157f9bcfee5909dd011d8afba905784d89375f9.png" | "a162700e0bab0b659fcdfce242fbeb3a73a2af85.png" | "a16e0835daa749488b9c04a8b9a096f92d2f20c0.png" | "a19b04c178ed759ba126963591496c2d7ffa423d.png" | "a19e397011bf5981d349973f0bd32fe19735dbc5.png" | "a1a664f65cea6f520cc5400bb3afcca94f6433a2.png" | "a1c3339371d18919932c79bc02eb892b974f78ad.png" | "a1fd5b026c43e229fd275c5495d5b1afda83f7a7.png" | "a25c44e73a0c6bf4d20f58d26b794882bb7597bd.png" | "a28dd39cb8cb8e806a9a5267a3dacd80eed069dd.png" | "a2bda809ca1e6fe5e0325f9b1e39dcb136487774.png" | "a2cec8293b5a04b5bec2cb45135f4aaeb760694e.png" | "a3114a752ce326983aed2317e1f5b1f9df28291a.png" | "a385320ab07b4b9429b0c9e5d959c5a0d3ed0269.png" | "a41df7d9bfa5a34a1c471a8e3a69bbc73adbc2ac.png" | "a423ac257d525490c73a66f480bc07eaa5a2ef01.png" | "a466c9a9aa9dea8a1f5bbfeabfae66f756644090.png" | "a46b2163395f8bd4ec67cea661313c966483a5ce.png" | "a4843d6443c817e38063aa5593ee35252aa58393.png" | "a4a2f2a2c60533fd96190f45af7b271bada5c13e.png" | "a4b36f7c5ad60b818ca5af805e52dd7e8ab9d3f3.png" | "a4c19fdcc3952c7c4cc37fab9c19abafa292214c.png" | "a4f9fc62aa6902ae14619d445b517f2bcf28fb07.png" | "a5364dba30aae19281b81886f0a020937067c630.png" | "a558fc0feeb75a04b310f77d265cca88577ae621.png" | "a596474455566fba15c839f8afbdee5864935ee1.png" | "a5b5330851dc3598c98e5a7e05f04fd8eb41a0bc.png" | "a6271fc27257f7894f8294993d1c873b78cf6e7c.png" | "a6278d8b97a3a35afd8044efea82a11fcdb4e5fe.png" | "a638b1252274ba302e6d4f8ec079c8132e5becb2.png" | "a65f5be59003df34d36e1e7ede2e561cd974a41e.png" | "a66e6b1e4131002e14afd092835d0f8be51031ca.png" | "a67c218c53ce4e190f8e2d2362f2e1f964375557.png" | "a68c70fa5bb6aaebb0b77b90f5b83f0f207f5184.png" | "a6b3f274dae5586bde71545f13753be8447decc1.png" | "a6cabf5a53ff15cdf4fa59bc5e3b17ffdea22f04.png" | "a6cd723109d6100faebd483b2efc994bdfe59aaa.png" | "a70137fe859b4ce6fc00d603bc10ac4b00748394.png" | "a7782043b9091fc8b819e8e6048bc644cc6549ce.png" | "a7aa3a6c619a71b358a4276cb2a964ffa172ee54.png" | "a7c5832a856e7b6ad5ed87f5aaff92d084c70cd1.png" | "a7e1c6d7280a196d305e2e6fc545b24824e29dee.png" | "a7f651cc86defc42d1d0cac8764d349cb1c2d5d8.png" | "a802ae6c53d9008b9618de23259c1745732b802c.png" | "a8446ed9790f1166375e668e5962825217b20395.png" | "a86ae137e3368ce5a7d34a847b2d86d4d028a7ec.jpg" | "a871b7e92d9b5b47ad398607630d3fdf434d7dd8.png" | "a8c8d725bbb3d57b5b7faae3c29e090d0d464a54.png" | "a8ceb3c5f6f7dd7a03e7348874b40cb332d9dd83.png" | "a8cf16d00d143377b3372b349c3b0f501fa3f48f.png" | "a8f118e3e5b1e8f81f079a5bd7dbbfe531a64f95.png" | "a9492522cd5265705c918d7eba2d270bda39aaec.png" | "a9689f72dc00bf401a9c88b76e8cf7eace06797c.png" | "a99002c8204d1d4dad2045fa7a12924ea1b65707.png" | "a99067996fbbefb6e09f5d9bc70bb6c8a4b8b998.png" | "a991d50cabd6a3395c41f38a18acca4fd1e5bc92.png" | "a9e38717dd1fe2ea8735e194d78197d3d631208b.png" | "aa1de3ba39472c8c0923d8f81833e453e32cd924.png" | "aa1f81d926f340e8e82f9db7db9f68d8f118655e.png" | "aa28b7bbe177f67a7deaf87f09a98aaaa2d3f978.png" | "aa525d08302e717df2bda11c1265d31f3802920b.png" | "aa56d0999eb69f653192baba8a5bb20e06a35e68.png" | "aac93ebd493e48d82221667810b70d45607f7adc.png" | "ab13cf3c1be673b663165bb25ccd4ddcd54c7c52.png" | "ab273eef74c18fa84f1c8550f8ebf3594f626d84.png" | "ab3048841067f112baa5ac8a778d586ce4427624.png" | "ab6cb3b466de3f5c13decc4a313d261dc8f02dc5.png" | "ab8ed15928a8fee7318a6504af305a06477c0065.png" | "ab9ebe3c4ecb8b8dc8db532a7efa6e1dbfad0698.png" | "abdd07c57aa868434602d592ee65cb6e92b6b6c5.png" | "abe93791a9397bb2f0e2e26019257fcabf6e149c.png" | "ac767eb2476540ec6c5c4c89f43513ee61ce1ff1.png" | "aca4ec5fd3b78fb4160b4cf6596b0e254df27fb0.png" | "acb8334c47319fcd126197baebba3a839ef50e4d.png" | "acd9785716cb17062e76cd88ca518a4b1e92a765.png" | "ace82747e1f216eedc187bd6da1bb352c11df5e2.png" | "ad280a3adea01de4a6aec9452bdefb6401df0097.png" | "ad2aff0fc223bb0dd58cce7b4271ab8f0a73e18a.png" | "ad366b9353f8462f61ebbb7d6462e27aea4e14e2.png" | "ad4ae86b555d1882e2eb6fcd10b233e60cf4c9cf.png" | "ad60786d908a6effc7b045119937f657d88ef509.png" | "ad692af056b6c6881d7792f390bc3020b7a44d27.png" | "ad7b4be171ad10b434cc8346052e2022d3ca35c6.png" | "adb063e9022852082848363109ba85f3bbc670e3.png" | "adb29abd14c5cd48d674046574e1f766b563d9cd.png" | "adcb1c10b3af627b2303c27931c029722937a655.png" | "ae57ebcd4d790751c08be73580eb3527e0931ef8.png" | "ae6a1fb60091c353e4dd16cb18dccc905fa24b7b.png" | "ae707d42c027f289e1206348cd593f3fbe8369d1.png" | "ae7f6efdaa575c3a8f1fbf0160d139b4434d4130.png" | "aefb1c21b9b21ce1d04efc929bab17c3fc357fe9.png" | "af0df39469b85ce9757d659f3655ee3f3df57587.png" | "af168f3c20c3de1e9c93768e2f1d3a6524e27a60.png" | "af1e45d3b732c9631e21b7aa2f622e52a857f9cf.png" | "af2c145e37df86369d07d1f064f50afa3571c1ed.png" | "af6694c8c3f67eb9b24ccf8f6f2e7c85be61fcd8.png" | "af70b63284235ba1f00194feaea66325ceffc711.png" | "b031052b340f538c674ed9d14d0bedc8f1336e88.png" | "b052a950143fe3431484a31e5915ea2ca4fa3a0f.png" | "b05a54272dc86b16c88f5f8da4ccc0f40167a132.png" | "b07afd44a2cd23ed0822d699d239c119669c9a00.png" | "b091483840a373999409c2c13d17d6123be1136a.png" | "b0c16a87bdae44c5f96d566a45ab895a5fc6a8fb.png" | "b0fbbca12557b9ddd19d3db0f797104743163472.png" | "b10d0b6c441cafad53a4a5a546d85542c7432f56.png" | "b12227d50c4ef01070b19ae8027671897e09851d.png" | "b12883dac47b142ddb583a5211986f803319a92b.png" | "b1316ecb309eaba3bfcf18eb14aedf7e6c941d62.png" | "b142a59eb59b6eb5e56c3ebb2e0bc8ffcd831a9f.png" | "b1549088dad680f5afe2befc86c58e2958cc279e.png" | "b19ddea35f6763235ce74afec13d8b9e3844d501.png" | "b1a18084c1b04db5744714d5ace1ebd8658fdb4f.png" | "b1a2e9f220b7bc9e062ee07aec1597338e874644.png" | "b1b3d68f972245556aad0aef2e11a12ca1c56bd1.png" | "b1b961fce28381acbcf48d6ae8278c237f574603.png" | "b1f718210f921cdaa81c6bffd75f045fd9f4b5af.png" | "b22c0208df8a7cfcfcfc9c1595c2c91098787ea4.png" | "b234d8384284850cd0d5c3882f650053546e2556.png" | "b24b3c78e97eb29827a6c5175594ff34561c0dcb.png" | "b2ddf474f5ef1c6d280c230787cf1abc4d826ba5.png" | "b2eeb66960d64f3fce4712daa3339bf0f3ab4d77.png" | "b30770a0c4004facd8a8a61934230d3dee90c289.png" | "b32af9ece77f6cecf7851cceda5feeefdd4dd85a.png" | "b32b6b6a43833d66a16274eca2b326af274f3b61.png" | "b32bb327e2c7dc73f1ea1abdbd49cae0f3deb475.png" | "b346374824226746564790c54056159708f0fae5.png" | "b39775d6c776db63cfa07d86bd1c7225e31b4dd7.webp" | "b39e2d50a8243a6aabfb5162ccba682c4add3573.png" | "b3a40949e72dff57404d39fc037c4442af9edce5.png" | "b3bbaea8194ac8b7c0fe789d34120d4eb9a53504.png" | "b3ceb087902d95b5471b94a13b22dfe876f5b3fc.png" | "b3e77cf7a36b610a7c7a2dad01e66401846872c9.png" | "b3f7127ca97a4e258de7f9b2cbb9336336c0ddf6.png" | "b3f9a1c6b17c584bef7d570b942bee8717b1e6a9.png" | "b3fbf7d4606279373bb73eb1115e7f5f8a27dedc.png" | "b447ac8eaad8fde26b1622e03b20d94c3ef89a58.png" | "b4571cb30733a53536563dfcc2772d179796d59d.png" | "b4612da0d026807576790a59ac25873aa5dd4d09.png" | "b4b88cf8ad41a4a6a4a75464981b6017961ce2d8.png" | "b4df1afb14d5b0c626692ec97b045a781c16d19a.png" | "b504e29efb58d0627efeb63d93bbe526ef22fbc8.png" | "b5118598a551328721566c153055a7ac6d0a2b91.png" | "b52e68d9246fbb566f7ebfd4ccd3232c5dc2c0e8.png" | "b532c17845522e16b52340781c2482fda7e1b357.png" | "b594d4f61ae7357e39cb22d73515a795b22c643d.png" | "b5bd2420b6f800fe9714ef05f08ed22ec75a390a.png" | "b60e4653ee3b57adde497710083de676529d96f0.png" | "b61161679e45a034df5c9437c17bdedd6c2a9208.png" | "b648ecbb8ac4d70d6d1ea4f65776e4d0ada529f8.png" | "b673fe69086bba1433dcc59dad1c560dfb55fbc0.png" | "b6d815ebf3ffc88175ee052288ba2b82e2a08eb6.png" | "b72163d9f6b2808b48f035663408511daff315ec.png" | "b726ed44d199b415839b4ee1ccd37f1330bbd06b.png" | "b7bbfaf257eb23c2f7f288a16b5edd246c445b2d.png" | "b7de6beaa3abe5b492efdfffe8844f920b1ccaaf.png" | "b80a0e1ee385529a073719c74bbf1b6da3050d30.png" | "b85dd70a74bba0e966e3d2ec64f8d8e473dc3030.png" | "b878c238c6f06a5bba628c96967ad4b95a0dcd71.png" | "b8867125885399e51a3296a81668f532a6dda4cf.png" | "b88c02033b2dad1681b5d413710e84fd4060c1a3.png" | "b90c806610e6e20101c6816f0cdbe76f74b988d8.png" | "b9149d3cc82a5f5b23ff0851cd43074e8fb63511.png" | "b978042d3e8c9cf7dff538610aeba041448d10b1.png" | "b9a755d610ae3ff88a6c78a1f4695393484f38d8.png" | "b9c3b701f248a2a8b9ed1c32a74553c06f1ea791.png" | "b9fce9706addba41c278445f0161a9675a15dcb9.png" | "ba1bfe95dbb66fbe1608a7a834a0591e12c16313.png" | "ba1f1151921559b22ee2e294826147a3ff292dd4.png" | "ba646ea7f27898fc093878a573a85cbcaf524062.png" | "ba858caca016a54abc55a13085d2611178d59d96.png" | "babd53317a48bcb9a73fa17c1bf1e9a76d4d13ed.png" | "bae69d2737ebdeea6ea9bc651cd93842e06f9fa0.png" | "baef2e02d223a6346ce8003c13631c6a5fd2a031.png" | "baf7a4099fee56d495d8b425243ecd085e34d479.png" | "bb26baa78349213630819da4f94faf9fece422c6.png" | "bbcef6f3e667ce29a83a72783c955b3fd7b198e9.png" | "bbf22c86741cef7a1db2cea7e14ffd06e0dc30aa.png" | "bbfafd2e7ec4d9d68364a57a00e544dbd3905597.png" | "bbfd522127ae5eca59b12c84926e9001e9293a8c.png" | "bc2d45edcd78f4818b8dc539a7a52db01adbbc15.png" | "bc3b7c2585e61792e7dc26906ed527fd2e1b0d06.png" | "bc830e878b0f3344d6d7155c45de1685b10b5a7e.png" | "bcbf3599b78736cd50b10c9a8cbca7dbab944cc2.png" | "bcd8982aec24df8794dd755ab2f5f6630ba6943d.png" | "bce67936e33f7db1b67e11bd28f502a40c822c6b.png" | "bd204595fbeac85fd04546b5a2aa0e12ebd644ae.png" | "bd36f3192685c624a30f96de95592518904e5983.png" | "bd48f497b6a3423ae8ee8c0d60f9f0fc0a0933fc.png" | "bd4caee8ba179d3e92dedbe3d0b50d1788783084.png" | "bd5106e7b8ce1f4e0c82cdfa8ff0f6bfc94b112a.png" | "bd6f9b2fdad93bbfbe74fbe635a4fd895e50a9ce.png" | "bd851f6d75ddf4c30fe2796858db00732eb9c001.png" | "bdc6db5828251bd1187e78d2131d8c2e58c20958.png" | "be029322d3ac0bfdb33202b1085fa119197bc695.png" | "be117d533829917f6ac57b65141db26913b660e3.png" | "be2913fdc367ce42d3522cf8148e8eb5b12bc8df.png" | "be50880c206c79133c5a1d6e610bc8510862784e.png" | "be534d72f06f677ee7bdcec8e6e93c89d9a027bf.png" | "be63443ddf2e62fdc099f218d208df5dff32ea10.png" | "be6f8e4ebeebea0701e48272c03b6bd45dc2a366.png" | "be95f4fe07028b8e3336b6ae1b5d5f795f5403c4.png" | "be99b700e9b4bc9b50f5d85c3f68acd48ea6f509.png" | "bec10081f8c918f12a3933febba7575f0b020503.png" | "bec56b9df43c931334d2d72be10e7a7e8068bcc0.png" | "bed75f8d2442792ac32a7beae3aab5c4cccb8c50.png" | "bf10281d6b5db57078392c14ff7be6a0dab660f1.png" | "bf2c5a4793287e62b656128d7274f09d07b6463f.png" | "bf3d3377177725f6391c7ef82ba00027175e0a22.png" | "bf44d49cf0c33b3ab7344df17b4f865c818e0f29.png" | "bf768e17c6e316bfa10b506c756061bc21d141b8.png" | "bf78a88a4493a544cf42eb86e61c8cadd3262182.png" | "bf818c4d2f90fe80880af2dd72a76f7b25453b6e.png" | "bf913cf447517516958ec7a94763257448a16eac.png" | "bfeab26663569e1e6ecc7adc6d874c9e09d08a25.png" | "c01cd81a2d1b2ea3d6f1cfaa219892a0c096cc97.png" | "c032342ca8b3fc18452878f7e7fd65655be2feb3.png" | "c058e676c08a838be57ba22bab17f39dcd7cc3c6.png" | "c05a4baf10c548112396102a41cea72345ae4c8d.png" | "c05baa106560988bce828bfc175df549498b394e.png" | "c070bc65041056776e659238ed26bd97401afff0.png" | "c075ecdeeab2ea6be2019e0b053a9954807e6c0c.png" | "c078594d018978de9cb2a76b9b33344967fcacf8.png" | "c098f63fc60e1f557c7fdf5a1541d33dde309b66.png" | "c09a7397be3981859427a95d9f1447a4bd6afc7d.png" | "c0c67cc0e259ee831c0f15695d254b1ea463cc45.png" | "c0ec5fd17034a19e6ff77b8db6ec5dd1036d2f37.png" | "c0f260956cd7a6c6f499fcc9c10dd93a3c3527b4.png" | "c114831d3078ad475d38b54c54115f6355ed85b8.png" | "c1226d6ac26a687b9e8a14823f8e0f62f1e5b3e9.png" | "c12769fa4ff862e1c682cfc40919e511a60011f0.png" | "c130157c7d36b41ff4eade69fa2b68253321a9e8.png" | "c18e8a4557ace575c325bc562792f3c408d7ace6.png" | "c1ac1690b4bf4703b3234399761173b2b3fe9def.png" | "c1c793c5b7a76bd422df432061ce35d5067e6ba4.png" | "c1cb711cddbf5a1f029c8d7ba3fae003b87e561b.png" | "c1ee4fa0077a8b659d2f508b481c9a271cc1c185.png" | "c235d61a9a296f5472906c1d41120764c8562372.png" | "c2784ba18d0b3723f08a772ede9bae27454f7e31.png" | "c27d7ef0832d107d6b1ae258d4a6feb5a3d10e66.png" | "c32799b5741a38b20f3148cdbe66080a10c911e9.png" | "c338d363318d17821d9495f3aeddde82cbc04560.png" | "c39fbc53cec1f52ae3b710b023498f3b19667f2c.png" | "c3a1e9d77ba8d33628afcf26bd63d221ee2fa431.png" | "c3d99122538ee05478db867ab2cc7d3e1ee1f37f.png" | "c3fd382416c03fa4e8004647772724ea64db8f90.png" | "c447924524ad267b90e1f89a2a03f789037daa66.png" | "c45a591ffdda0ab418f192d1b109e019084cf07c.png" | "c45c46a7f92a75f490beaddf3084e9d3e39c53cd.png" | "c4995feaf9728067cb738f6f1c4a80788c3af948.png" | "c57b9b1e7710bad089e1fcd568f06fd4239d2ca7.png" | "c594dbdab7851cc18aa537ce2468e11e86b29863.png" | "c5c0734007d9318e967ec48b93deff16a14e8854.png" | "c5ed4c43873edb650c880ff5685afe88c1484faa.png" | "c5f04312b45cdc8d254bc2ace724e4a2df41ae3d.png" | "c64e3a86b5a63b72d20f5d1441fb3644c78f9492.png" | "c662ca32de6627c17d8ede43cffa1b29039663f7.png" | "c6668f6b00a6bdc7edec974fd9fb88dea040a9c8.png" | "c6c6d4aab84a6aa81bf16ca21d9042a014e7af98.png" | "c6e6090df7bce26c8448da2b96388cca4e8d258e.png" | "c708cf7a7b86f4f029165b13fc85238328ca65fa.png" | "c71a61de1882c8ff37c817981383d618a17b5fe6.png" | "c73e717e3272a441c67e9a1dcd1d22d0a61c5bf1.png" | "c77de0c77c13d1e6cf5d6928221e0f40d1b6b55b.png" | "c79fa133c56ea221d57264fbdf0a7c4445070a54.png" | "c7c305a4c3dd3965a47bac9926ca9ee52732ad3f.png" | "c7ecd4152fe9dccaf784be54cb4e710f079a5437.png" | "c7f5b7ad98d2e10bb6a43ace0ad28b98349a8a86.png" | "c8461aa11cfcb95d01c524a41b9895ee6797be9c.webp" | "c850401d69cb241a8d79642527ab4cfc4cc8fbe9.png" | "c8683a5550ec6f8e1e810efb039e4749ed002563.png" | "c8bb8b662a4f9c116f947a62b5b3a9ce817faf14.png" | "c8d3a38038370b285219edeba960d45786a02174.png" | "c943c647af74b22be4ca1f947a75be759f30d43c.png" | "c9524048e48dc4645c6489100e83a59a7b436772.png" | "c977c0f2dcdc38363b5d4942950b9dcf009b7277.png" | "c98506d1e9662f62e968f4d41cfe289dad68bed7.png" | "c99a0861a58fcf83e2e8e767c12cbe78169cb618.png" | "c99e020a992eba5a127696ab89558b767a858356.png" | "c9aeb4e54c0fcf3e330a399eb495e5e2cf4d8436.png" | "c9bd266f5dec1ad86895e6cb3cbc1f4e1ed7103a.png" | "c9f094de7a3c9adc76088b95132164cadb2031c6.png" | "c9fbbd699b1eba637ed3b1cd1cc7045415df722a.png" | "ca21ac1f338195051daf16597c210526f84cf1db.png" | "ca542ee5099ef468c791e37aec4e37cfd96bb77a.png" | "ca64020da13976c894162417e4fe01dd1ae461c4.png" | "cae8f2777bf632b41f2dedeca0d6f727857b9c9c.png" | "caeb3bcf0d918e83c62f44735b496880c739b62c.png" | "caf7c7d70d8c7f12cefa2b35f8a50da375ffdafb.png" | "cb13210863860991016a79cfadbdd25389df7d64.png" | "cb3056dbba412ca970d3000ff8b37edcc6b2edaa.png" | "cb383a376010200d5632ccfdefc93c8b573620fc.png" | "cb96c999a0eccf84f0dc5d79b47e50256368b857.png" | "cbc50ae5e3771db0223da75804664248407131aa.png" | "cc13a92993a0b1904e883dd579615a69855cbc8b.png" | "cc258a7ff8fce79e924b198079c63aceeecdc553.png" | "cc3111de19471339be475bca2a49302c7699410d.png" | "cc68b0debb9252695aa40e87088f55c6189ba1a9.png" | "ccd1506b379f59044ba9f5a4574f888765df94e9.png" | "ccfcf35ac18c2e3c789fd10b22332d88371f5854.png" | "cd2e7d09c4dfa1cdb50b9fbf29e3afc953f254d0.png" | "cd7a3048cef38d2c6f872bdb25e032fa9baa2b0f.png" | "cdac323c6327963f8075ef1a744369ebfa008417.png" | "cdc96f90186c8f8c3f16b9da4924bd20cc796101.png" | "cde328c10c27d797dfb1b80184c027592b5f32cd.png" | "cdf256d9109cf6b7d775fc34d28053f34148430c.png" | "ce0b5c0edd0b98238a078152f7d1fe703b213b94.png" | "ce1dc933a8dc9de6f687ad2e642e3536afcb3df6.png" | "ce2d50d06cbb9d520a9e27e874bf3deb0be4b988.png" | "ce387713219eb50278c42c83e4944ed82b8232f0.png" | "ce3dd58cfd51cf1942e700185624a674b7cf8ef4.png" | "ce75cd48ac9c623c702870fa464c22c7be04bd8f.png" | "cefa7466465d30e07b29c2baa3b192826abfc9d5.png" | "cf5f8cf4bbef41fa71ab1592c25fb615813528c0.png" | "cf9a43ad47a05604d154232ae012b70bc6c4c045.png" | "cfd77dbd356bac5ba6044be7135705439900aa97.png" | "d004bac0a3c43eef36d151c28d05b653ab385632.png" | "d01df462d8a3467945bee9034180736fd12134c7.png" | "d0938d08f84e0d48297e13126697e53f327bff5a.png" | "d09d1a87cef9311dcf44c24f7f8c918abbc5248b.png" | "d11ec1920d277c83b5dfb498af774cd45be06229.png" | "d1370266b49ee38e9c8d51a3085aa3468fe3a089.png" | "d1a04b3a4f54e9d880e704859baed1ee3137c88b.png" | "d1b4cbb0e75a867a1a42cfd016b7f20702230bb6.png" | "d1b5a14053b7f45fae0d74e470cc92bc41364813.png" | "d26223e226bacb913c6a9ff902deef462990ef94.png" | "d2d46118a51002035477b3678d2825390dfb2041.png" | "d2d4ae2a72aa030c3d960c4cfea55ca5d1b0193a.png" | "d3144aa916772e091f4e14e1fc51d06fc4aa80b5.png" | "d377f00d215cdae6c22a5c8f6d18f8ac31789c25.png" | "d38e83bd278fcdf2497f253c975ee771d6e50729.png" | "d3a233cb335784245c4e0163cbd8df7f4356903a.png" | "d3a3b6555773652da01b0b435e565fd9c6826a57.png" | "d3b6f9491b555f5ec389564ad5753b753550cf8c.png" | "d3fbcdc12a46d9323eae37d574ce01552c484807.png" | "d4151da25559c70bc0a76c6c9f01cb0ff5724b6a.png" | "d4395e1ab5d56d5a450c6eb2ec1a6edd7b8e4892.webp" | "d47bce2a67ce95aee08df528b96aff24e47f5d88.png" | "d4dcaa8463053c7a49357b15fd4fa4ce83a89a2f.png" | "d4fd55bb0e5c2f7ae235a9993a3d91da28b4917c.png" | "d5028be76149d2155cf6c5d6cceabbabcb9e809e.png" | "d512d1e6a2e15b1aa9cfcfcede33c7e93b241f5e.png" | "d57df3838dfca81333574eaf168442ccf5b4c31d.png" | "d5d3c629c72a4c3fd88dffd43a943f359997b8bc.png" | "d5d6d9bb3d26d85a0770363365711f06bbd6274e.png" | "d5dc2fa9d3175a470cd90867ef60f6c617f8b268.png" | "d5dd918ebfb987bf4b65702685a3acc97b1332e1.png" | "d5e9082c6d31b05a59e60cc43419d9b54d36cff8.png" | "d5f95f6563ec7b65efaf447579988ee65b3ce554.png" | "d636bc21f9b34b729ee7b945dd92ed19bd7e0c62.png" | "d6516325f32f59a40da98e5aa40067614cfb2b20.png" | "d65c0a71fcc7484df8f8e7b169abe0d6670c3976.png" | "d6649039bdd77eeaf75043c7970d3f48bc58a717.png" | "d68618835861591f7ff65eba02fed2efb75e4499.png" | "d6d612884aa0b8fe17915d01b5febf96f9522dd6.png" | "d6ee7bb4aefd4e8b518c926a5f2da889113e478f.png" | "d71bd3c4fbce6dcb177591b92f1c2441ec4e2115.webp" | "d71e737494469afa2a383f79c1e798d5d554cf85.png" | "d76ae66b10f455c491ee59b444a637697c8bbdf1.png" | "d789077a4cb92b601266f5b585cdba59bd2c389d.png" | "d799877bd46c13b63cfa55fdac70b15e47fd6e49.png" | "d7a7369a5c56df061e6ce29e61f7d3b67d892ed4.png" | "d7cc10be8eab8367d89db99eb3e51d06bd265377.png" | "d816856a935566b5a8e1d619e64ddaae3539718f.png" | "d82b145115efa43b3e3689c1ac06f70099c85fa3.png" | "d8948fefd42523fb22e5189c1a83831cf6443dcf.png" | "d8cfd9b3bf53f9931aa870d66bb3c8bdd885a4d3.png" | "d8dd8db448e3cfad81819ce04d0fc5710b6d82aa.png" | "d8e020176d9068f91f6a69141722fb198da79fa6.png" | "d8ebb09c9e9c9d7728328eacd2cdd3a9b9ed82c8.png" | "d94cb589c652951d0d5a3253c70e43f571329541.png" | "d99079aa32df5682a7412dfaeac2f5e26b65d371.png" | "d99ba3563e2e24c60b416fd0fab45b6031e96eef.png" | "d9c255ea1f0ee7ec7b2a9bc4d19fc4cc330497da.png" | "d9ca5253e41984eb084b34c77c68ede4392eead9.png" | "d9d10340ba771d3e62389a1cb92c7b233f83f030.png" | "d9f7870eddb01edd180cf4629a3c8ccd705b49f8.png" | "da0a84550646c0ca6626c92f5f1c9029ba5af622.png" | "da29b7fc9a30f5fd2a9e1236d6129fce45d0e778.png" | "da2c7732e2fe27ee2a06d903a8de571e41ce1e91.png" | "da4299b53d7ba8367e6b958e63444e24692b1f6f.png" | "da920aecb83bbbd6e2904ce49a8462b90dc75051.png" | "daa13cd358761d88b0239f353d10c990aac2043e.png" | "dab6bb59e2df55935983146890e8b1500f46742d.png" | "db1efee77c45fc850a03831c7ee9b5de87be4861.png" | "db6b8d6536464f4e0341aff1c5ca47b3e9676104.png" | "db738e0f0f517893d1e77fd46a741c758742c532.png" | "db7befafec211966d2fa6dee3fdde29deefecf28.png" | "db9238e7b9b2ccf92e2bd8cdbc9ef0377ff9bd2a.png" | "dbd7105e727537999577a3bff11650bd26b0076f.png" | "dbf55da22e667cf9d87879379253e4ecc2d755ef.png" | "dc3c8f5f876f9530656041694771ba5a0a1457e9.png" | "dc69b630508db98e3fc0fbb7ec8fb5d1653ecc82.png" | "dc8fbf39dfb223424de8b81c8fe190f001395032.png" | "dd11047f84c969636724f974eab69606e586d87d.png" | "dd36f8ef577f34326b8d1ab8255f2cebd27ca824.png" | "ddaae5cbc5c755e9c1bc3f8b87111e9ff4d3fe1e.png" | "ddbbf8c55ce5a7b21d3f41145a695980a6985616.png" | "ddd040165587792f91c9c66c25769c83b4724a2a.png" | "ddf057c412ea31e7fdccad435e7521c6b9284272.png" | "ddfe2585bcb28dee8bf2e4bcf3ff0b00fd1be710.png" | "de4928545c41adad545233bfd1db4dbec2a4baa0.png" | "de63d9d48fd1be42f3f87565a4322fbca0c74c32.png" | "de80002bfe1ae28eaca21af58aec363225aecfc1.png" | "de8e28d449b39ad53670f63c9e39da34ccc2ed0d.png" | "dea0b25fa9bb0aebfb0be7158df73198adea11a8.png" | "deada193c94b38f86b2b45eb4ceccc9bfa924d25.png" | "dec2f2af72fa3814087ee9445cc545120f834385.png" | "ded302bdb8853d029cc2a495e54efd6f954ddb7a.png" | "dedb2e66f6ba533c5d0fdd2964b082e6dec7d50c.png" | "dee35629b6c2a9d53c39120d27ad7162023c3795.png" | "df03cb37007cc642c117f0f95aa4bb77338c69c4.png" | "df44ad35be37991d925523b80d9c4afa8698300b.png" | "df607353e0d680982d5cee0849b98c06e21ba8f4.png" | "df625b7b4c9c7b0e5b2637db079f7d17f26faa76.png" | "df72387ce533fec96e159113c521b9595f6b0758.png" | "df86b78030972783251484d18352b1478c6f6d95.png" | "dfb4118cce71db9d7b6c039e48429ff0bdd8e012.png" | "dfb762befee2d0823eab69b1e4adfa0a83d46e76.png" | "dff7948d1d56c5551df0378a60972309d6ca7e59.png" | "dffd585d8dd97ed1766046c7ae722054ee50ffad.png" | "e064d83403099e3a4c69d2145b49ceb9f47eafc6.png" | "e094a980d6168f7ac765d2860afe021c81d3a02c.png" | "e1131a89ccad7cc2739d7a7c288412c0656b6625.png" | "e11f7a7e18c0340f923b8630b9bae85c45d0871c.png" | "e14b2c6a9dfa414a8fd2f918a358447a8ab4ef0a.png" | "e158c8da7e8524321f2af4e80fb63cee552b77a0.png" | "e1c514d2d758d35190acfed3149fc71c457b9343.png" | "e1ef84c013997d42c994bf94b86b3b7930ac0fc2.png" | "e20e63e4d7b55d5fb984f2c5abd4881e35b95f38.png" | "e23c7b7efab026744c15def96a1d89d51f4e1170.png" | "e266d00d54226864559e68c907c5a886199d52fe.png" | "e297a69e11e2e5210df76efca9d388e3d224ae9f.png" | "e2af5555fd321fa5fcae278dd0a19f3f247e6a9e.png" | "e30ff6114961fd9696a8ecc145fed77878596f57.png" | "e325b9d4c53913e42331afc29502e3d6ddee05ee.png" | "e32c29fba12f58e60fe838b605e1b9031098e0ba.png" | "e33fe152152f76c0135deec7544e7096a6ba3283.png" | "e3400544e34a35508db0f0588cb837da1d5e23b9.png" | "e373561ef793c6e3e1fc8ca392b8e61f7b33a40e.png" | "e3a209a721b5aa6008d4ec09943ad451779e4802.png" | "e3a506fa511ee883e8f1ad5f08703c89d90d4b86.png" | "e3d89e0635ea7670ef65badc639067663e01625d.png" | "e3f41810599844f158d7037e4894cedfbd80d52a.png" | "e45b6956acb78380a191c7ff0087ad3968cf9876.png" | "e49daef723c962f026c283d1fdece09b830bee04.png" | "e4b6da3e0f9dfb04c13ba09e4f894d47a43b3e1c.png" | "e4ce97dd134d9380e8554502071e5763645608f7.png" | "e4db677f2daea4f07dd38b3cb776a2289d03c06c.png" | "e4df6a9805cb149fc0e93afc43e30fda7285bc56.png" | "e558f8ce524ed9738c2fc20f4109186f137d048b.png" | "e59298139398fb8dd964c798d5286a3b9d7ec147.png" | "e5ad139ca742fbe29345f25a18f0a69c8e3cb841.png" | "e5c87d6a0f14057a3d38bb417d2bd8ac19e67c15.png" | "e5d7f69b845fa906b32cdb79d3b1a5be680cf0bf.png" | "e5e7df3765be02a6eb64185c968ff1e082eb1e26.png" | "e5f46b6a680e7e1df9ca8feebdcb6763e10087a0.png" | "e60f931dca51d032196a067fae700f9066c7d77e.png" | "e64c746ecf3915ed844c5c9199bcf7d339970c90.png" | "e65f215cbb1b6875b7ddf8d5a82dd94bcffb0e5c.png" | "e675617376491fbeae2a5241f35e04d6fb995209.png" | "e68b25301494e5acb7bdf5dabb4d6ef9c7fba443.png" | "e69933e528f5fe22aea9b63481d5640c58fc2150.png" | "e6ac8c2059d57b32c87fa3cc7144525d17f7605e.png" | "e6afd1e3f85f15f1a872f76f35fd99aa3ff42cd6.png" | "e6bafc9f049cdbe4e63a4af55fcda1e98e3b7dfb.png" | "e7371e992a0438f50351ee3f52e5b2128abba699.png" | "e79cb90f423cb49faaba7749bdddfb4fea72016e.png" | "e7e9571f42e02db9abe24ca8b449e1e952cc866c.png" | "e83777557eb7cad14e80438b39af32dcd6745a29.png" | "e8e45ddba9c3131094e6d1be8343fb4d7591cc2d.webp" | "e8f049d029a5fbfef63903688390f479a9818717.png" | "e9366e0c8f7f4157942a92c6d38e760422cf8c47.png" | "e95003b4e658fdaf2c99f38894ee18839a313ab8.png" | "e963db6b0c01f23efeba7114feea37fab46ff942.png" | "e9a9737a981aa592f6ebe9d946f071a0650f0786.png" | "e9d283f0170836fe640e37769959785a276a2751.png" | "e9f0d724a500a816e011ef64ecc272c00511fdb3.png" | "ea0b24879867f86a890cd514b775d7df6ac93813.png" | "ea410fdf6a744f0f7fe56a95c9393534af4b822b.png" | "ea8c980e24cde8cb7fa986ef27ef449f8f7a3725.png" | "eaa6aeb19fce71a0b2d5ac10fa628b364819c32b.png" | "ead7cfb33eabc68f2a8ccc09361e1e7cf4d02b5c.png" | "ead95d3100dd3104e78588598f51e66395c80568.png" | "eaf2985b9d7ee62b651e40d22add4806caa28c7b.png" | "eb2db1b13ec90dffe715b5cd5fd9c3ac987549ff.png" | "eb3597684ccd1bbecda0575bb80259e3e562027d.png" | "eb41f8c298a984280c451cefb33f76b964f4ceb8.png" | "eb483b35e30d595fd274d17d82a91701b1010d95.png" | "eb49959b2a99372c64b4eb0ff15f3be087ebe0a5.png" | "eb4d7e91c773b7e0e9c02ddf1a0fbde155658c9b.png" | "eb6bd63005a20c8773d4a0add09ac89588e6ca50.png" | "eb6d95537074d126761e58c0894d920ab243faff.png" | "ebd01bb557741214501fb97096a3f85251f3d783.png" | "ebdd30c2acff605779495d7ea113b9aea27a7731.png" | "ec036e241ab8967f7434204e94cc5ca207a52c34.png" | "ec09760e314cb93eccacd4b26136ece9c3009c5b.png" | "ec147ff014a3a47e506a5978a5f329df03962393.png" | "ec568415672603378967809c29e277a1adff68a5.png" | "ec638f8de0591617e1bc8827a0769bcb2dabfc17.png" | "ec94e0a0e19587e8aeffe160d1c2ad59ebda3c5c.png" | "ecc6b5f5925b99a087ee5d64a5d7c4548fa0eb48.png" | "edae03e82e8e0c6179d69da0194c74be87e9fb94.png" | "edc6c43e46b9574a27a37dcfde2ea67faaddc9e0.png" | "edc70739fa63982754934e205e7c98c0270e8e00.png" | "ee15f5b4d9aadded73db0dce36996e86f1197cf4.png" | "ee29bf9a96a5a871271cd02130271addc7ae89a1.png" | "ee413c26f4dfa400a9a23127fff6366bdae630bc.png" | "ee476c7e4a15dd462562dfa3bc0b49413cb480ce.png" | "ee55af5fc429a3128ed17874e4e01acda767d3ee.png" | "ee66512bd9a697353be9d709eb937f617344f0ed.png" | "eec87da200ee12831147765b4c96cd84db0e9750.png" | "eecbe8b06eb481d15cef84621a16573cddabd8bc.png" | "ef1a5495d15c83be4d879679600520550844a2a1.png" | "ef2fe6d7a1d1363d01d1ef8a4839141758603a3e.png" | "ef602a8bc2e65e4fd8b0cdbd371239b100f8743c.png" | "ef9d81aca77cf1791f69d743aee57e203922ddce.png" | "efb8e3a2ff8d2ee2cf6c2bf256984972ac14f649.png" | "example.png" | "f0ac50adb6f0ed37792451d425d6bcaaf56e3009.png" | "f0e169504509aece829c3be1b24ee7ef35c2ab27.png" | "f1185ab1c3b68cec6fc76b96f61f76fc094a032d.png" | "f1346070f53cec6b48c40933354fb20f73297419.png" | "f15e3efe1034baaa48aa042bdbfb56a85762f9c2.png" | "f1613f6a7842203ae9ebb3515ae44a877a720d4a.png" | "f1765c1e720583ed58d3d7860c6a16d73031c229.png" | "f1ecc82fa28e99328f81ef20e54f383ecea27825.png" | "f2211e4b002a672f70a710fbfab5f6a410595443.png" | "f275a0a3881bda75f80dbeb3a10bfc27438c2ea1.png" | "f2b27070cf76c974c2e44142f2fd1aacba65c881.png" | "f2c0c1d2139fcc092a3feb402825a77dd2c3d379.png" | "f2cb2f73ecf2ba3116c08e346efb298f17613e79.png" | "f2d276570a483cab13ad28d291daa31a86de70c5.png" | "f2e741ac013e99b5edb990b5ca72e1ae0d88965d.png" | "f329e363a61f34ee11f959fa59f09d5d7bc69b96.png" | "f3456b360e7f353b77a1fae39b3c2b1803ff8f38.png" | "f345cb123cf65a63aa20b5339f2bf49b2cee4e92.png" | "f34ccb2535b7ad467cd4467de70dabf0095872da.png" | "f3574abc1d16a2ff56f2d5fee5b081f5c620549c.png" | "f35afb690f1b940a3ae73617294e30eac1f82039.png" | "f36f731a5dca4bd7cbcd0fef3463875852e026a2.png" | "f38f4112f741b208900ee6ebc2e3e550a1ae166e.png" | "f39b77c7691f14b7e40a61cfb197a372a56eb7e2.png" | "f3ce44a969a97f96cf8921289c53cad62a9ff05d.png" | "f4024c668f78bcc6eff9328f3541b71cbff5c486.png" | "f43e54b082194038aaf22a4336451220b7fa2a35.png" | "f47773b31079426c3e2a07216405e77525cb8fa9.png" | "f4eda5cccd24d521ceaec2acb40791bfee0f83bf.png" | "f4f53445ccbf174dafbb8296b0f2d1dfcd0abdad.png" | "f505db5e4b7c696fb667033cf52ad1df561e8df4.png" | "f5166f0f08b39b548f26f8293ef4a854392dd774.png" | "f51e157f4e5a2d1c3399f0fcda8b5cba3dc8de25.png" | "f53a2595f0317b9ab50ba47def036ffb6ede0d99.png" | "f55a13636c8788280f36f32daeaa861844e02fcd.png" | "f55c5760e804cf7549185e2d9f10ba9a17fbb4aa.png" | "f55f0068c1236574b13f7fd593bcbb71df141e94.png" | "f56183ab0458600eae8e12ae87eef456615ba417.png" | "f5d1b7bd86bbf172aa52eb65c52ae54a3b44f6fe.png" | "f61693107fa2c517d1b07281c5497e4f87bf0d01.png" | "f65242f62ccc2943cf45cae3c2c5936bcd6a4fe5.png" | "f6f18891d3b4b9bbaf8357b394c005f22cc3454e.png" | "f72c37be414dcb7b487ffc266666ea7d3f88c96c.png" | "f762070b5ea46ac69b1fb81b6cb508bcfdceec14.png" | "f7c3e17b40f4dbe64a3c2182bdc9e8767440240c.png" | "f7ee5793e5e25faec0ddb48faee7aee1dc80408b.png" | "f84498144cbd6f5860afe8a3b81ddc2e45ed8a1b.png" | "f87f2dba1160a6449d8974ec385dc775f61e2bc2.png" | "f897aacfeca6026a1c20271fe14f9bc216d35296.png" | "f8b427670a00f7601027e037b353371f2433de6e.png" | "f8bce9145c9cbfe8e4dad07f33be34307293a83e.png" | "f8fa7c28277e95ea7db124c7c80795d2eac36e07.png" | "f91e1389fcff4177187ca99375a9dff6afb15907.png" | "f9ae0a924dcf9a20b801a57e91313378eae12972.png" | "f9fcf3eb1fb72f64e7f886162f767a5e860fcb3c.png" | "fa0b31274b7bec7e8bde8bdff4ee0c7c89703bea.png" | "fa8f7b0cf8fd21982cbe3f55fe2558bcd2c75ccb.png" | "fae7c441f5708add5b6ec76785c74a719f02517d.png" | "faf0e2814d63f5387ecbf10b8027d96058500c27.png" | "faf299430786f46414dde4dbb94c447525af33c4.png" | "fafa8c98864e4bcdcef97396ce2f9eb3946da9a1.png" | "fb2fbc3904ed87b880d1d4f1cec6ee70fc76377a.png" | "fb6b33dcb9ba2c6a8944f2d059efc6091872bba4.png" | "fb93d7297328bb1a362261931b7ef90269c8cc61.png" | "fba97631ef281b446363bfa54057e549417e61b2.png" | "fbbc8eb3aea8709a703268697f4ba6078d5743a0.png" | "fbf27b0b9340fea0f3efe03ea790f21df304d2a7.png" | "fbf8897d4e3809331e3d338efa5c558f4f14d7cb.png" | "fc34512a24cd828835fdcf723c4175ace64630e9.png" | "fc38e7f50390b852278c7181438a963190804074.png" | "fc55faab8a6882bb3133f89a5dd59dbacda32048.png" | "fc923327a9a94c8f29244d55faea47ab9e8240e4.png" | "fca7f736ab00a5acc6d4ecc822699926db5697fd.png" | "fcb495dd9e8f53038f41cfdd3638ea6ed821038e.png" | "fcb87153349f607ca9700ffc201dbb6297244575.png" | "fcce60ee5a3b6f4a36fca62d9527e546520f50cb.png" | "fcdfdfa6e9e9f51fd2f4b6a9e22c0b6c0f1ee9fa.png" | "fd06d6b326990406bc751d8a77c703997ee16d9f.png" | "fd0a279e1ba79eb915c84fcdb52d2e7eed8e14d7.png" | "fd1dabb3e9bdbaa3100b517a7ba9879e1a7787ce.png" | "fd2a8bc59425fcb4d9291468d569d773e0e2ef0e.png" | "fd6f60c02695e4826496de1a8fdf805aacdab516.png" | "fd804b8901da59cbeff4acd16d1e510a04c966cb.png" | "fd9494b192d1c4fee3fcdc7e409a2459f9109714.png" | "fd9d2f452b780f3c57d21bb4e248541983c453f2.png" | "fdc2a917dd1c7d373f517478fd8a6ded4d8d0686.png" | "fe1e2e45c4051e2d37278102c136475453b4b31a.png" | "fe2f68d3a9522d9a1c60fc8dc45605b3b4b949a2.png" | "febd902e0a8a1b2d0b15170e0012523ffb64ea55.png" | "ff09c4755896194c6afbf196635513269c71f8f3.png" | "ffaca78dd81e8661f2ba8974ca06a150302d2e11.png" | "sOA4nLYCSC1J0KN64N5qJnZDcwO8hq64pcv0xLLtg.png"
export type Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type = "composition" | "composition precise" | "ease in" | "ease in-out" | "ease out" | "linear" | "reverse in-out" | "strong middle" | "strong style transfer" | "style and composition" | "style transfer" | "style transfer precise" | "weak input" | "weak middle" | "weak output"
export type Enum_RegionalIPAdapterColorMask_$3$3Inspire_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_RegionalIPAdapterEncodedMask_$3$3Inspire_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_RegionalIPAdapterEncodedColorMask_$3$3Inspire_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterAdvanced_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterBatch_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterFaceID_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterFaceIDKolors_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAAdapterFaceIDBatch_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterTiled_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterTiledBatch_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterEmbeds_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterEmbedsBatch_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterMS_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterClipVisionEnhancer_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterClipVisionEnhancerBatch_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_IPAdapterRegionalConditioning_weight_type = Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
export type Enum_ColorMaskToDepthMask_$3$3Inspire_flatten_method = "max" | "override" | "sum"
export type Enum_ScheduledCFGGuider_$3$3Inspire_schedule = "cos" | "exp" | "linear" | "log"
export type Enum_ScheduledPerpNegCFGGuider_$3$3Inspire_schedule = Enum_ScheduledCFGGuider_$3$3Inspire_schedule
export type Enum_CheckpointLoaderSimpleShared_$3$3Inspire_mode = "Auto" | "Override Cache" | "Read Only"
export type Enum_StableCascade$_CheckpointLoader_$3$3Inspire_cache_mode = "all" | "none" | "stage_b" | "stage_c"
export type Enum_IPAdapterModelHelper_$3$3Inspire_preset = "Kolors FaceID Plus" | "Kolors Plus" | "SD1.5" | "SD1.5 FaceID" | "SD1.5 FaceID Plus" | "SD1.5 FaceID Plus v2" | "SD1.5 FaceID Portrait" | "SD1.5 FaceID Portrait v11" | "SD1.5 Full Face" | "SD1.5 Light" | "SD1.5 Light v11" | "SD1.5 Plus" | "SD1.5 Plus Composition" | "SD1.5 Plus Face" | "SD1.5 ViT-G" | "SDXL" | "SDXL FaceID" | "SDXL FaceID Portrait" | "SDXL FaceID Portrait unnorm" | "SDXL Plus Composition" | "SDXL Plus Face ViT-H" | "SDXL Plus ViT-H" | "SDXL ViT-H"
export type Enum_IPAdapterModelHelper_$3$3Inspire_insightface_provider = "CPU" | "CUDA" | "ROCM"
export type Enum_IPAdapterInsightFaceLoader_provider = Enum_IPAdapterModelHelper_$3$3Inspire_insightface_provider
export type Enum_IPAdapterModelHelper_$3$3Inspire_cache_mode = "all" | "clip_vision only" | "insightface only" | "none"
export type Enum_IPAdapterModelHelper_$3$3Inspire_insightface_model_name = "antelopev2" | "buffalo_l"
export type Enum_IPAdapterInsightFaceLoader_model_name = Enum_IPAdapterModelHelper_$3$3Inspire_insightface_model_name
export type Enum_ConditioningMultiCombine_operation = "combine" | "concat"
export type Enum_DownloadAndLoadCLIPSeg_model = "CIDAS/clipseg-rd64-refined" | "Kijai/clipseg-rd64-refined-fp16"
export type Enum_CreateTextMask_font = "FreeMono.ttf" | "FreeMonoBoldOblique.otf" | "TTNorms-Black.otf"
export type Enum_AddLabel_font = Enum_CreateTextMask_font
export type Enum_ImageBatchTestPattern_font = Enum_CreateTextMask_font
export type Enum_CreateTextOnPath_font = Enum_CreateTextMask_font
export type Enum_DrawInstanceDiffusionTracking_font = Enum_CreateTextMask_font
export type Enum_CreateShapeMask_shape = "circle" | "square" | "triangle"
export type Enum_CreateShapeImageOnPath_shape = Enum_CreateShapeMask_shape
export type Enum_CreateShapeMaskOnPath_shape = Enum_CreateShapeMask_shape
export type Enum_OffsetMask_padding_mode = "border" | "empty" | "reflection"
export type Enum_AddLabel_direction = "down" | "left" | "overlay" | "right" | "up"
export type Enum_ColorMatch_method = "hm" | "hm-mkl-hm" | "hm-mvgd-hm" | "mkl" | "mvgd" | "reinhard"
export type Enum_CrossFadeImages_interpolation = "bounce" | "ease_in" | "ease_in_out" | "ease_out" | "elastic" | "exponential_ease_out" | "glitchy" | "linear"
export type Enum_CrossFadeImagesMulti_interpolation = Enum_CrossFadeImages_interpolation
export type Enum_TransitionImagesMulti_interpolation = Enum_CrossFadeImages_interpolation
export type Enum_TransitionImagesInBatch_interpolation = Enum_CrossFadeImages_interpolation
export type Enum_FastPreview_format = "JPEG" | "PNG" | "WEBP"
export type Enum_ImageAddMulti_blending = "add" | "difference" | "multiply" | "subtract"
export type Enum_ImageConcanate_direction = "down" | "left" | "right" | "up"
export type Enum_ImageConcatMulti_direction = Enum_ImageConcanate_direction
export type Enum_Generate_Border_Mask_$1WLSH$2_direction = Enum_ImageConcanate_direction
export type Enum_Outpaint_to_Image_$1WLSH$2_direction = Enum_ImageConcanate_direction
export type Enum_TransitionImagesMulti_transition_type = "box" | "circle" | "fade" | "horizontal door" | "horizontal slide" | "vertical door" | "vertical slide"
export type Enum_TransitionImagesInBatch_transition_type = Enum_TransitionImagesMulti_transition_type
export type Enum_GenerateNoise_latent_channels = "16" | "4"
export type Enum_EmptyLatentImagePresets_dimensions = "1024 x 1024 (1:1)" | "1024 x 512 (2:1)" | "1024 x 576 (1.778:1)" | "1152 x 896 (1.286:1)" | "1216 x 832 (1.46:1)" | "1344 x 768 (1.75:1)" | "1536 x 640 (2.4:1)" | "512 x 512 (1:1)" | "768 x 512 (1.5:1)" | "960 x 512 (1.875:1)"
export type Enum_EmptyLatentImageCustomPresets_dimensions = "4k - 2048x2048" | "Full HD - 1024x1024" | "HD - 768x768" | "SD - 512x512" | "SVD - 1024x576"
export type Enum_SetShakkerLabsUnionControlNetType_type = "auto" | "blur" | "canny" | "depth" | "gray" | "low quality" | "pose" | "tile"
export type Enum_NormalizedAmplitudeToMask_shape = "circle" | "none" | "square" | "triangle"
export type Enum_NormalizedAmplitudeToMask_color = "amplitude" | "white"
export type Enum_SplineEditor_sampling_method = "controlpoints" | "path" | "time"
export type Enum_SplineEditor_interpolation = "basis" | "cardinal" | "linear" | "monotone" | "polar" | "polar-reverse" | "step-after" | "step-before"
export type Enum_SplineEditor_float_output_type = "list" | "pandas series" | "tensor"
export type Enum_WeightScheduleExtend_output_type = "list" | "match_input" | "pandas series" | "tensor"
export type Enum_WeightScheduleConvert_output_type = Enum_WeightScheduleExtend_output_type
export type Enum_MaskOrImageToWeight_output_type = "list" | "pandas series" | "string" | "tensor"
export type Enum_PointsEditor_bbox_format = "xywh" | "xyxy"
export type Enum_StabilityAPI$_SD3_model = "sd3" | "sd3-turbo"
export type Enum_StabilityAPI$_SD3_aspect_ratio = "16:9" | "1:1" | "21:9" | "2:3" | "3:2" | "4:5" | "5:4" | "9:16" | "9:21"
export type Enum_StabilityAPI$_SD3_output_format = "jpeg" | "png"
export type Enum_Intrinsic$_lora$_sampling_lora_name = "intrinsic_lora_sd15_albedo.safetensors" | "intrinsic_lora_sd15_depth.safetensors" | "intrinsic_lora_sd15_normal.safetensors" | "intrinsic_lora_sd15_shading.safetensors" | "intrinsic_loras.txt"
export type Enum_Intrinsic$_lora$_sampling_task = "albedo" | "depth map" | "shading" | "surface normals"
export type Enum_TorchCompileModelFluxAdvanced_mode = "default" | "max-autotune" | "max-autotune-no-cudagraphs" | "reduce-overhead"
export type Enum_TorchCompileVAE_mode = Enum_TorchCompileModelFluxAdvanced_mode
export type Enum_TorchCompileControlNet_mode = Enum_TorchCompileModelFluxAdvanced_mode
export type Enum_ModelCompile$6_mode = Enum_TorchCompileModelFluxAdvanced_mode
export type Enum_Compare$7$$D83D$$DD2C_comparison = "a != b" | "a < b" | "a <= b" | "a == b" | "a > b" | "a >= b"
export type Enum_MarigoldModelLoader_model = "GonzaloMG/marigold-e2e-ft-depth" | "GonzaloMG/marigold-e2e-ft-normals" | "prs-eth/marigold-lcm-v1-0" | "prs-eth/marigold-normals-lcm-v0-1" | "prs-eth/marigold-normals-v0-1" | "prs-eth/marigold-v1-0"
export type Enum_MarigoldDepthEstimation$_v2_scheduler = "DDIMScheduler" | "LCMScheduler"
export type Enum_MarigoldDepthEstimation$_v2$_video_scheduler = Enum_MarigoldDepthEstimation$_v2_scheduler
export type Enum_MarigoldDepthEstimation_reduction_method = "mean" | "median"
export type Enum_MarigoldDepthEstimation_scheduler = "DDIMScheduler" | "DDPMScheduler" | "DEISMultistepScheduler" | "LCMScheduler" | "PNDMScheduler"
export type Enum_MarigoldDepthEstimationVideo_scheduler = Enum_MarigoldDepthEstimation_scheduler
export type Enum_MarigoldDepthEstimation_model = "Marigold" | "marigold-lcm-v1-0"
export type Enum_MarigoldDepthEstimationVideo_model = Enum_MarigoldDepthEstimation_model
export type Enum_MarigoldDepthEstimationVideo_dtype = "bf16" | "fp16" | "fp32"
export type Enum_DownloadAndLoadSAM2Model_precision = Enum_MarigoldDepthEstimationVideo_dtype
export type Enum_ColorizeDepthmap_colorize_method = "Spectral" | "afmhot" | "brg" | "cividis" | "copper" | "gist_earth" | "gist_ncar" | "gist_rainbow" | "hsv" | "inferno" | "jet" | "magma" | "plasma" | "rainbow" | "seismic" | "terrain" | "turbo" | "twilight" | "viridis"
export type Enum_EmbeddingPrompt_embedding = "EasyNegative.safetensors" | "bad-artist-anime.pt" | "bad-artist.pt" | "bad_prompt_version2.pt" | "badquality.pt" | "charturnerv2.pt" | "ng_deepnegative_v1_75t.pt" | "realisticvision-negative-embedding.pt"
export type Enum_GLIGENTextBoxApply$_Advanced_random_shuffle = "off" | "on"
export type Enum_ResizeImageMixlab_average_color = Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
export type Enum_SwitchByIndex_flat = Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
export type Enum_ClipInterrogator_image_analysis = Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
export type Enum_PromptGenerate$_Mix_multiple = Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
export type Enum_ChinesePrompt$_Mix_generation = Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
export type Enum_Font_font = "Candara" | "Candarab" | "Candarai" | "Candaral" | "Candarali" | "Candaraz" | "CascadiaCode" | "CascadiaMono" | "Gabriola" | "Inkfree" | "LeelUIsl" | "LeelaUIb" | "LeelawUI" | "Nirmala" | "NirmalaB" | "NirmalaS" | "SansSerifCollection" | "SegUIVar" | "SegoeIcons" | "SimsunExtG" | "SitkaVF" | "SitkaVF-Italic" | "arial" | "arialbd" | "arialbi" | "ariali" | "ariblk" | "bahnschrift" | "calibri" | "calibrib" | "calibrii" | "calibril" | "calibrili" | "calibriz" | "cambriab" | "cambriai" | "cambriaz" | "comic" | "comicbd" | "comici" | "comicz" | "consola" | "consolab" | "consolai" | "consolaz" | "constan" | "constanb" | "constani" | "constanz" | "corbel" | "corbelb" | "corbeli" | "corbell" | "corbelli" | "corbelz" | "cour" | "courbd" | "courbi" | "couri" | "ebrima" | "ebrimabd" | "framd" | "framdit" | "gadugi" | "gadugib" | "georgia" | "georgiab" | "georgiai" | "georgiaz" | "himalaya" | "holomdl2" | "impact" | "javatext" | "l_10646" | "lucon" | "malgun" | "malgunbd" | "malgunsl" | "marlett" | "micross" | "mmrtext" | "mmrtextb" | "monbaiti" | "msyi" | "mvboli" | "ntailu" | "ntailub" | "pala" | "palab" | "palabi" | "palai" | "phagspa" | "phagspab" | "segmdl2" | "segoepr" | "segoeprb" | "segoesc" | "segoescb" | "segoeui" | "segoeuib" | "segoeuii" | "segoeuil" | "segoeuisl" | "segoeuiz" | "seguibl" | "seguibli" | "seguiemj" | "seguihis" | "seguili" | "seguisb" | "seguisbi" | "seguisli" | "seguisym" | "simsunb" | "sylfaen" | "symbol" | "tahoma" | "tahomabd" | "taile" | "taileb" | "times" | "timesbd" | "timesbi" | "timesi" | "trebuc" | "trebucbd" | "trebucbi" | "trebucit" | "verdana" | "verdanab" | "verdanai" | "verdanaz" | "webdings" | "wingding"
export type Enum_ResizeImageMixlab_scale_option = "center" | "height" | "overall" | "width"
export type Enum_LoadImagesFromPath_sort_by = "file_name" | "newest"
export type Enum_TextImage_font = "庞门正道粗书体6.0.ttf" | "有爱黑体ARHei.ttf" | "有爱黑体arheiuhk_bd.ttf" | "王汉宗颜楷体繁.ttf"
export type Enum_ShowLayer_scale_option = "height" | "overall" | "width"
export type Enum_NewLayer_scale_option = Enum_ShowLayer_scale_option
export type Enum_CompositeImages$__position = "center_bottom" | "center_center" | "center_top" | "left_bottom" | "left_top" | "overall" | "right_bottom" | "right_top"
export type Enum_JoinWithDelimiter_delimiter = "backslash" | "comma" | "newline" | "space"
export type Enum_StyleAlignedReferenceSampler$__share_norm = "both" | "disabled" | "group" | "layer"
export type Enum_StyleAlignedBatchAlign$__share_norm = Enum_StyleAlignedReferenceSampler$__share_norm
export type Enum_StyleAlignedReferenceSampler$__share_attn = "disabled" | "q+k" | "q+k+v"
export type Enum_StyleAlignedBatchAlign$__share_attn = Enum_StyleAlignedReferenceSampler$__share_attn
export type INVALID_null = "❌"
export type Enum_ChatGPTOpenAI_model = "01-ai/Yi-1.5-9B-Chat-16K" | "Qwen/Qwen2-7B-Instruct" | "THUDM/glm-4-9b-chat" | "deepseek-chat" | "glm-3-turbo" | "glm-4" | "gpt-3.5-turbo" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-16k-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4o" | "gpt-4o-2024-05-13" | "meta-llama/Meta-Llama-3.1-8B-Instruct" | "moonshot-v1-128k" | "moonshot-v1-32k" | "moonshot-v1-8k" | "qwen-long" | "qwen-max" | "qwen-max-longcontext" | "qwen-plus" | "qwen-turbo"
export type Enum_ChatGPTOpenAI_api_url = "DeepSeek-V2" | "Kimi" | "SiliconCloud" | "api2d" | "openai"
export type Enum_SimulateDevDesignDiscussions_api_url = Enum_ChatGPTOpenAI_api_url
export type Enum_SiliconflowLLM_model = "01-ai/Yi-1.5-9B-Chat-16K" | "Qwen/Qwen2-7B-Instruct" | "Qwen/Qwen2.5-7B-Instruct" | "THUDM/glm-4-9b-chat" | "meta-llama/Meta-Llama-3.1-8B-Instruct"
export type Enum_SiliconflowTextToImageNode_model = "black-forest-labs/FLUX.1-schnell"
export type Enum_SimulateDevDesignDiscussions_model = "01-ai/Yi-1.5-9B-Chat-16K" | "Qwen/Qwen2-7B-Instruct" | "THUDM/glm-4-9b-chat" | "deepseek-chat" | "glm-3-turbo" | "glm-4" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4o" | "gpt-4o-2024-05-13" | "moonshot-v1-128k" | "moonshot-v1-32k" | "moonshot-v1-8k" | "qwen-long" | "qwen-max" | "qwen-max-longcontext" | "qwen-plus" | "qwen-turbo"
export type Enum_ClipInterrogator_prompt_mode = "best" | "classic" | "fast" | "negative"
export type Enum_RembgNode$_Mix_model_name = "isnet-anime" | "isnet-general-use" | "silueta" | "u2net" | "u2net_human_seg" | "u2netp"
export type Enum_Image_Rembg_$1Remove_Background$2_model = Enum_RembgNode$_Mix_model_name
export type Enum_LoadVideoAndSegment$__video = '🔴' // never
export type Enum_VideoCombine$_Adv_format = "image/gif" | "image/webp" | "video/av1-webm" | "video/h264-mp4" | "video/h265-mp4" | "video/webm"
export type Enum_TripoSRSampler$__device = "auto" | "cpu"
export type Enum_SenseVoiceNode_device = Enum_TripoSRSampler$__device
export type Enum_ScenedetectNode$__video = '🔴' // never
export type Enum_SenseVoiceNode_language = "auto" | "en" | "ja" | "ko" | "nospeech" | "yue" | "zh"
export type Enum_VideoGenKlingNode_duration = "10" | "5"
export type Enum_VideoGenRunwayGen3Node_duration = Enum_VideoGenKlingNode_duration
export type Enum_VideoGenKlingNode_aspect_ratio = "16:9" | "1:1" | "9:16"
export type Enum_VideoGenKlingNode_mode = "pro" | "standard"
export type Enum_VideoGenRunwayGen3Node_aspect_ratio = "16:9" | "9:16"
export type Enum_VideoGenLumaDreamMachineNode_aspect_ratio = "16:9" | "21:9" | "3:4" | "4:3" | "9:16" | "9:21"
export type Enum_LoadVideoFromURL_force_size = "256x256" | "256x?" | "512x512" | "512x?" | "?x256" | "?x512" | "Custom" | "Custom Height" | "Custom Width" | "Disabled"
export type Enum_ChatGPT_Simple_$_O_model = "@cf/meta/llama-2-7b-chat-int8" | "gpt-3.5-turbo"
export type Enum_ChatGPT_compact_$_O_model = Enum_ChatGPT_Simple_$_O_model
export type Enum_Chat_completion_$_O_model = Enum_ChatGPT_Simple_$_O_model
export type Enum_ChatGPT_Simple_$_O_behaviour = "description" | "tags"
export type Enum_create_image_$_O_size = "1024x1024" | "256x256" | "512x512"
export type Enum_variation$_image_$_O_size = Enum_create_image_$_O_size
export type Enum_create$_image_$_O_size = Enum_create_image_$_O_size
export type Enum_LatentUpscaleFactor_$_O_upscale_method = "area" | "bilinear" | "nearest-exact"
export type Enum_LatentUpscaleFactorSimple_$_O_upscale_method = Enum_LatentUpscaleFactor_$_O_upscale_method
export type Enum_ImageScaleFactor_$_O_upscale_method = Enum_LatentUpscaleFactor_$_O_upscale_method
export type Enum_ImageScaleFactorSimple_$_O_upscale_method = Enum_LatentUpscaleFactor_$_O_upscale_method
export type Enum_LatentUpscaleMultiply_upscale_method = Enum_LatentUpscaleFactor_$_O_upscale_method
export type Enum_Image_Scale_By_Factor_$1WLSH$2_upscale_method = Enum_LatentUpscaleFactor_$_O_upscale_method
export type Enum_Image_Scale_by_Shortside_$1WLSH$2_upscale_method = Enum_LatentUpscaleFactor_$_O_upscale_method
export type Enum_SDXL_Quick_Image_Scale_$1WLSH$2_upscale_method = Enum_LatentUpscaleFactor_$_O_upscale_method
export type Enum_Upscale_by_Factor_with_Model_$1WLSH$2_upscale_method = Enum_LatentUpscaleFactor_$_O_upscale_method
export type Enum_RandomNSP_$_O_terminology = "3d-terms" | "adj-architecture" | "adj-beauty" | "adj-general" | "adj-horror" | "album-cover" | "animals" | "artist" | "artist-botanical" | "artist-surreal" | "aspect-ratio" | "band" | "bird" | "body-fit" | "body-heavy" | "body-light" | "body-poor" | "body-shape" | "body-short" | "body-tall" | "bodyshape" | "camera" | "camera-manu" | "celeb" | "color" | "color-palette" | "comic" | "cosmic-galaxy" | "cosmic-nebula" | "cosmic-star" | "cosmic-terms" | "details" | "dinosaur" | "eyecolor" | "f-stop" | "fantasy-creature" | "fantasy-setting" | "fish" | "flower" | "focal-length" | "foods" | "forest-type" | "fruit" | "games" | "gen-modifier" | "gender" | "gender-ext" | "hair" | "hd" | "identity" | "identity-adult" | "identity-young" | "iso-stop" | "landscape-type" | "movement" | "movie" | "movie-director" | "nationality" | "natl-park" | "neg-weight" | "noun-beauty" | "noun-emote" | "noun-fantasy" | "noun-general" | "noun-horror" | "occupation" | "penciller" | "photo-term" | "pop-culture" | "pop-location" | "portrait-type" | "punk" | "quantity" | "rpg-Item" | "scenario-desc" | "site" | "skin-color" | "style" | "tree" | "trippy" | "water" | "wh-site"
export type Enum_ConcatRandomNSP$_O_terminology = Enum_RandomNSP_$_O_terminology
export type Enum_Text2Image_$_O_font = "Alkatra.ttf" | "CALIBRI.TTF" | "COMIC.TTF" | "COMICI.TTF" | "COMICZ.TTF"
export type Enum_ImageScaleFactor_$_O_MulOf46 = "disabled" | "enabled"
export type Enum_ImageScaleFactorSimple_$_O_MulOf46 = Enum_ImageScaleFactor_$_O_MulOf46
export type Enum_DownloadAndLoadSAM2Model_model = "sam2.1_hiera_base_plus.safetensors" | "sam2.1_hiera_large.safetensors" | "sam2.1_hiera_small.safetensors" | "sam2.1_hiera_tiny.safetensors" | "sam2_hiera_base_plus.safetensors" | "sam2_hiera_large.safetensors" | "sam2_hiera_small.safetensors" | "sam2_hiera_tiny.safetensors"
export type Enum_DownloadAndLoadSAM2Model_segmentor = "automaskgenerator" | "single_image" | "video"
export type Enum_DownloadAndLoadSAM2Model_device = "cpu" | "cuda" | "mps"
export type Enum_CR_Image_Output_output_type = "Preview" | "Save" | "UI (no batch)"
export type Enum_CR_Image_Output_prefix_presets = "None" | "yyyyMMdd"
export type Enum_CR_Image_Output_file_format = "jpg" | "png" | "tif" | "webp"
export type Enum_CR_XY_Save_Grid_Image_file_format = Enum_CR_Image_Output_file_format
export type Enum_CR_Conditioning_Mixer_mix_method = "Average" | "Combine" | "Concatenate"
export type Enum_CR_Float_Range_List_operation = "cos" | "none" | "sin" | "tan"
export type Enum_CR_Load_Text_List_file_extension = "csv" | "txt"
export type Enum_CR_Save_Text_To_File_file_extension = Enum_CR_Load_Text_List_file_extension
export type Enum_CR_Output_Schedule_To_File_file_extension = Enum_CR_Load_Text_List_file_extension
export type Enum_CR_Load_Schedule_From_File_file_extension = Enum_CR_Load_Text_List_file_extension
export type Enum_CR_Load_Image_List_input_folder = '🔴' // never
export type Enum_CR_Load_Image_List_Plus_input_folder = '🔴' // never
export type Enum_CR_Load_GIF_As_List_input_folder = '🔴' // never
export type Enum_CR_Font_File_List_source_folder = "Comfyroll" | "from folder" | "system"
export type Enum_CR_SD1$55_Aspect_Ratio_aspect_ratio = "1.85:1 cinema 952x512" | "16:9 cinema 910x512" | "1:1 square 1024x1024" | "1:1 square 512x512" | "2.39:1 anamorphic 1224x512" | "2:1 cinema 1024x512" | "2:3 portrait 512x768" | "3:2 landscape 768x512" | "3:4 portrait 512x682" | "4:3 landscape 682x512" | "custom"
export type Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions = "Off" | "On"
export type Enum_CR_SDXL_Aspect_Ratio_swap_dimensions = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Aspect_Ratio_swap_dimensions = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Aspect_Ratio_Banners_swap_dimensions = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Aspect_Ratio_Social_Media_swap_dimensions = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR$_Aspect_Ratio_For_Print_swap_dimensions = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Aspect_Ratio_SDXL_swap_dimensions = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Apply_ControlNet_switch = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Multi$7ControlNet_Stack_switch_1 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Multi$7ControlNet_Stack_switch_2 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Multi$7ControlNet_Stack_switch_3 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Apply_Multi$7ControlNet_switch = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Load_LoRA_switch = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_LoRA_Stack_switch_1 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_LoRA_Stack_switch_2 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_LoRA_Stack_switch_3 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Random_LoRA_Stack_exclusive_mode = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Random_LoRA_Stack_force_randomize_after_stride = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Random_LoRA_Stack_switch_1 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Random_LoRA_Stack_switch_2 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Random_LoRA_Stack_switch_3 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Random_Weight_LoRA_force_randomize_after_stride = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Random_Weight_LoRA_switch = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Model_Merge_Stack_switch_1 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Model_Merge_Stack_switch_2 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Model_Merge_Stack_switch_3 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Multi_Upscale_Stack_switch_1 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Multi_Upscale_Stack_switch_2 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_Multi_Upscale_Stack_switch_3 = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_Lora_Loader_$1JPS$2_switch = Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
export type Enum_CR_SDXL_Aspect_Ratio_aspect_ratio = "16:9 landscape 1344x768" | "1:1 square 1024x1024" | "21:9 landscape 1536x640" | "3:2 landscape 1216x832" | "3:4 portrait 896x1152" | "4:3 landscape 1152x896" | "5:8 portrait 832x1216" | "9:16 portrait 768x1344" | "9:21 portrait 640x1536" | "custom"
export type Enum_CR_Aspect_Ratio_SDXL_aspect_ratio = Enum_CR_SDXL_Aspect_Ratio_aspect_ratio
export type Enum_CR_Aspect_Ratio_aspect_ratio = "SD1.5 - 1.85:1 cinema 952x512" | "SD1.5 - 16:9 cinema 910x512" | "SD1.5 - 1:1 square 512x512" | "SD1.5 - 2:1 cinema 1024x512" | "SD1.5 - 2:3 portrait 512x768" | "SD1.5 - 3:2 landscape 768x512" | "SD1.5 - 3:4 portrait 512x682" | "SD1.5 - 4:3 landscape 682x512" | "SDXL - 16:9 landscape 1344x768" | "SDXL - 1:1 square 1024x1024" | "SDXL - 21:9 landscape 1536x640" | "SDXL - 3:2 landscape 1216x832" | "SDXL - 3:4 portrait 896x1152" | "SDXL - 4:3 landscape 1152x896" | "SDXL - 5:8 portrait 832x1216" | "SDXL - 9:16 portrait 768x1344" | "SDXL - 9:21 portrait 640x1536" | "custom"
export type Enum_CR_Aspect_Ratio_Banners_aspect_ratio = "Banner - 468x60" | "Billboard - 970x250" | "Button - 125x125" | "Half Page - 300x600" | "Large Rectangle - 336x280" | "Leaderboard - 728x90" | "Medium Rectangle - 300x250" | "Portrait - 300x1050" | "Skyscraper - 120x600" | "Small Rectangle - 180x150" | "Small Square - 200x200" | "Square - 250x250" | "Vertical Banner - 120x240" | "Wide Skyscraper - 160x600" | "custom"
export type Enum_CR_Aspect_Ratio_Social_Media_aspect_ratio = "CivitAI Cover - 1600x400" | "Facebook Landscape - 1080x1350" | "Facebook Marketplace - 1200x1200" | "Facebook Stories - 1080x1920" | "Instagram Landscape - 1080x608" | "Instagram Portrait - 1080x1350" | "Instagram Square - 1080x1080" | "Instagram Stories/Reels - 1080x1920" | "LinkedIn Page Cover - 1128x191" | "LinkedIn Post - 1200x627" | "LinkedIn Profile Banner - 1584x396" | "OpenArt App - 1500x1000" | "Pinterest Pin Image - 1000x1500" | "TikTok - 1080x1920" | "YouTube Banner - 2560×1440" | "custom"
export type Enum_CR$_Aspect_Ratio_For_Print_aspect_ratio = "A10 - 307x437" | "A4 - 2480x3508" | "A5 - 1748x2480" | "A6 - 1240x1748" | "A7 - 874x1240" | "A8 - 614x874" | "A9 - 437x614" | "B10 - 366x520" | "B4 - 2953x4169" | "B5 - 2079x2953" | "B6 - 1476x2079" | "B7 - 1039x1476" | "B8 - 732x1039" | "B9 - 520x732" | "C10 - 331x472" | "C4 - 2705x3827" | "C5 - 1913x2705" | "C6 - 1346x1913" | "C7 - 957x1346" | "C8 - 673x957" | "C9 - 472x673" | "Legal (8.5 x 14 inches) - 2550x4200" | "Letter (8.5 x 11 inches) - 2550x3300"
export type Enum_CR_SDXL_Prompt_Mixer_preset = "preset 1" | "preset 2" | "preset 3" | "preset 4" | "preset 5"
export type Enum_CR_Apply_Model_Merge_merge_method = "Recursive" | "Weighted"
export type Enum_CR_SDXL_Prompt_Mix_Presets_preset = "default with no style text" | "default with style text" | "style boost 1" | "style boost 2" | "style text to refiner"
export type Enum_CR_SDXL_Base_Prompt_Encoder_preset = "preset A" | "preset B" | "preset C"
export type Enum_CR_Upscale_Image_mode = "rescale" | "resize"
export type Enum_Image_Resize_mode = Enum_CR_Upscale_Image_mode
export type Enum_CR_XY_Interpolate_gradient_profile = "Lerp"
export type Enum_CR_Gradient_Float_gradient_profile = Enum_CR_XY_Interpolate_gradient_profile
export type Enum_CR_Gradient_Integer_gradient_profile = Enum_CR_XY_Interpolate_gradient_profile
export type Enum_CR_XY_From_Folder_image_folder = "MeshTest" | "cards"
export type Enum_CR_XY_Save_Grid_Image_output_folder = Enum_CR_XY_From_Folder_image_folder
export type Enum_CR_Output_Flow_Frames_output_folder = Enum_CR_XY_From_Folder_image_folder
export type Enum_CR_XY_Save_Grid_Image_mode = "Preview" | "Save"
export type Enum_ttN_textOutput_text_output = Enum_CR_XY_Save_Grid_Image_mode
export type Enum_CR_Halftone_Grid_dot_style = "Accent" | "Blues" | "BrBG" | "BuGn" | "BuPu" | "CMRmap" | "Dark2" | "GnBu" | "Greens" | "Greys" | "OrRd" | "Oranges" | "PRGn" | "Paired" | "Pastel1" | "Pastel2" | "PiYG" | "PuBu" | "PuBuGn" | "PuOr" | "PuRd" | "Purples" | "RdBu" | "RdGy" | "RdPu" | "RdYlBu" | "RdYlGn" | "Reds" | "Set1" | "Set2" | "Set3" | "Spectral" | "Wistia" | "YlGn" | "YlGnBu" | "YlOrBr" | "YlOrRd" | "afmhot" | "autumn" | "binary" | "bone" | "brg" | "bwr" | "cividis" | "cool" | "coolwarm" | "copper" | "cubehelix" | "flag" | "gist_earth" | "gist_gray" | "gist_heat" | "gist_rainbow" | "gist_stern" | "gist_yarg" | "gnuplot" | "gnuplot2" | "gray" | "hot" | "hsv" | "inferno" | "jet" | "magma" | "nipy_spectral" | "ocean" | "pink" | "plasma" | "prism" | "rainbow" | "seismic" | "spring" | "summer" | "tab10" | "tab20" | "tab20b" | "tab20c" | "terrain" | "turbo" | "twilight" | "twilight_shifted" | "viridis" | "winter"
export type Enum_CR_Style_Bars_bar_style = Enum_CR_Halftone_Grid_dot_style
export type Enum_CR_Halftone_Grid_background_color = "aqua" | "black" | "blue" | "brown" | "coral" | "custom" | "cyan" | "darkgray" | "fuchsia" | "gold" | "gray" | "green" | "indigo" | "lavender" | "lightgray" | "lime" | "magenta" | "maroon" | "navy" | "olive" | "orange" | "pink" | "purple" | "red" | "silver" | "teal" | "turquoise" | "violet" | "white" | "yellow"
export type Enum_CR_Color_Bars_color_1 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Color_Bars_color_2 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Checker_Pattern_color_1 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Checker_Pattern_color_2 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Polygons_face_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Polygons_background_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Polygons_line_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Color_Gradient_start_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Color_Gradient_end_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Radial_Gradient_start_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Radial_Gradient_end_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Starburst_Lines_line_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Starburst_Lines_background_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Starburst_Colors_color_1 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Starburst_Colors_color_2 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Binary_Pattern_background_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Binary_Pattern_color_0 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Binary_Pattern_color_1 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Binary_Pattern_outline_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Draw_Shape_shape_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Draw_Shape_back_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Draw_Pie_shape_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Draw_Pie_back_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Random_Shape_Pattern_color1 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Random_Shape_Pattern_color2 = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Overlay_Text_font_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Draw_Text_font_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Draw_Text_background_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Mask_Text_background_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Simple_Text_Watermark_font_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Page_Layout_font_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Page_Layout_border_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Page_Layout_background_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Image_Panel_border_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Image_Grid_Panel_border_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Image_Border_border_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Feathered_Border_border_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Simple_Text_Panel_font_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Simple_Text_Panel_font_outline_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Simple_Text_Panel_background_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Color_Panel_fill_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Simple_Meme_Template_font_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Simple_Meme_Template_bar_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Simple_Banner_font_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Simple_Banner_outline_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Comic_Panel_Templates_outline_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Comic_Panel_Templates_panel_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Comic_Panel_Templates_background_color = Enum_CR_Halftone_Grid_background_color
export type Enum_CR_Color_Bars_mode = "2-color"
export type Enum_CR_Color_Bars_orientation = "alt_diagonal" | "diagonal" | "horizontal" | "vertical"
export type Enum_CR_Style_Bars_mode = "color bars" | "gradient bars" | "sin wave"
export type Enum_CR_Style_Bars_orientation = "horizontal" | "vertical"
export type Enum_CR_Color_Gradient_orientation = Enum_CR_Style_Bars_orientation
export type Enum_CR_Image_Panel_layout_direction = Enum_CR_Style_Bars_orientation
export type Enum_Image_Flip_mode = Enum_CR_Style_Bars_orientation
export type Enum_Image_Generate_Gradient_direction = Enum_CR_Style_Bars_orientation
export type Enum_CR_Checker_Pattern_mode = "regular" | "stepped"
export type Enum_CR_Polygons_mode = "hexagons" | "triangles"
export type Enum_CR_Draw_Shape_shape = "circle" | "cross" | "diagonal regions" | "diamond" | "half circle" | "hexagon" | "octagon" | "oval" | "quarter circle" | "quarter circle" | "square" | "star" | "starburst" | "triangle"
export type Enum_CR_Overlay_Text_font_name = "AlumniSansCollegiateOne-Regular.ttf" | "Caveat-VariableFont_wght.ttf" | "NotoSansArabic-Regular.ttf" | "Oswald-Bold.ttf" | "PixelifySans-Bold.ttf" | "Quicksand-Bold.ttf" | "Roboto-Regular.ttf" | "YoungSerif-Regular.ttf" | "comic.ttf" | "impact.ttf"
export type Enum_CR_Draw_Text_font_name = Enum_CR_Overlay_Text_font_name
export type Enum_CR_Mask_Text_font_name = Enum_CR_Overlay_Text_font_name
export type Enum_CR_Composite_Text_font_name = Enum_CR_Overlay_Text_font_name
export type Enum_CR_Simple_Text_Watermark_font_name = Enum_CR_Overlay_Text_font_name
export type Enum_CR_Page_Layout_font_name = Enum_CR_Overlay_Text_font_name
export type Enum_CR_Simple_Text_Panel_font_name = Enum_CR_Overlay_Text_font_name
export type Enum_CR_Simple_Meme_Template_font_name = Enum_CR_Overlay_Text_font_name
export type Enum_CR_Simple_Banner_font_name = Enum_CR_Overlay_Text_font_name
export type Enum_CR_Simple_Image_Compare_font_name = Enum_CR_Overlay_Text_font_name
export type Enum_CR_Overlay_Text_align = "bottom" | "center" | "top"
export type Enum_CR_Draw_Text_align = Enum_CR_Overlay_Text_align
export type Enum_CR_Mask_Text_align = Enum_CR_Overlay_Text_align
export type Enum_CR_Composite_Text_align = Enum_CR_Overlay_Text_align
export type Enum_CR_Simple_Text_Panel_align = Enum_CR_Overlay_Text_align
export type Enum_DrawText$6_vertical_align = Enum_CR_Overlay_Text_align
export type Enum_CR_Overlay_Text_rotation_options = "image center" | "text center"
export type Enum_CR_Draw_Text_rotation_options = Enum_CR_Overlay_Text_rotation_options
export type Enum_CR_Mask_Text_rotation_options = Enum_CR_Overlay_Text_rotation_options
export type Enum_CR_Composite_Text_rotation_options = Enum_CR_Overlay_Text_rotation_options
export type Enum_CR_Simple_Text_Watermark_align = "bottom center" | "bottom left" | "bottom right" | "center" | "top center" | "top left" | "top right"
export type Enum_CR_Select_Font_font_name = "Candara.ttf" | "Candarab.ttf" | "Candarai.ttf" | "Candaral.ttf" | "Candarali.ttf" | "Candaraz.ttf" | "CascadiaCode.ttf" | "CascadiaMono.ttf" | "Gabriola.ttf" | "Inkfree.ttf" | "LeelUIsl.ttf" | "LeelaUIb.ttf" | "LeelawUI.ttf" | "Nirmala.ttf" | "NirmalaB.ttf" | "NirmalaS.ttf" | "SansSerifCollection.ttf" | "SegUIVar.ttf" | "SegoeIcons.ttf" | "SimsunExtG.ttf" | "SitkaVF-Italic.ttf" | "SitkaVF.ttf" | "arial.ttf" | "arialbd.ttf" | "arialbi.ttf" | "ariali.ttf" | "ariblk.ttf" | "bahnschrift.ttf" | "calibri.ttf" | "calibrib.ttf" | "calibrii.ttf" | "calibril.ttf" | "calibrili.ttf" | "calibriz.ttf" | "cambriab.ttf" | "cambriai.ttf" | "cambriaz.ttf" | "comic.ttf" | "comicbd.ttf" | "comici.ttf" | "comicz.ttf" | "consola.ttf" | "consolab.ttf" | "consolai.ttf" | "consolaz.ttf" | "constan.ttf" | "constanb.ttf" | "constani.ttf" | "constanz.ttf" | "corbel.ttf" | "corbelb.ttf" | "corbeli.ttf" | "corbell.ttf" | "corbelli.ttf" | "corbelz.ttf" | "cour.ttf" | "courbd.ttf" | "courbi.ttf" | "couri.ttf" | "ebrima.ttf" | "ebrimabd.ttf" | "framd.ttf" | "framdit.ttf" | "gadugi.ttf" | "gadugib.ttf" | "georgia.ttf" | "georgiab.ttf" | "georgiai.ttf" | "georgiaz.ttf" | "himalaya.ttf" | "holomdl2.ttf" | "impact.ttf" | "javatext.ttf" | "l_10646.ttf" | "lucon.ttf" | "malgun.ttf" | "malgunbd.ttf" | "malgunsl.ttf" | "marlett.ttf" | "micross.ttf" | "mmrtext.ttf" | "mmrtextb.ttf" | "monbaiti.ttf" | "msyi.ttf" | "mvboli.ttf" | "ntailu.ttf" | "ntailub.ttf" | "pala.ttf" | "palab.ttf" | "palabi.ttf" | "palai.ttf" | "phagspa.ttf" | "phagspab.ttf" | "segmdl2.ttf" | "segoepr.ttf" | "segoeprb.ttf" | "segoesc.ttf" | "segoescb.ttf" | "segoeui.ttf" | "segoeuib.ttf" | "segoeuii.ttf" | "segoeuil.ttf" | "segoeuisl.ttf" | "segoeuiz.ttf" | "seguibl.ttf" | "seguibli.ttf" | "seguiemj.ttf" | "seguihis.ttf" | "seguili.ttf" | "seguisb.ttf" | "seguisbi.ttf" | "seguisli.ttf" | "seguisym.ttf" | "simsunb.ttf" | "sylfaen.ttf" | "symbol.ttf" | "tahoma.ttf" | "tahomabd.ttf" | "taile.ttf" | "taileb.ttf" | "times.ttf" | "timesbd.ttf" | "timesbi.ttf" | "timesi.ttf" | "trebuc.ttf" | "trebucbd.ttf" | "trebucbi.ttf" | "trebucit.ttf" | "verdana.ttf" | "verdanab.ttf" | "verdanai.ttf" | "verdanaz.ttf" | "webdings.ttf" | "wingding.ttf"
export type Enum_CR_Halftone_Filter_dot_shape = "ellipse" | "rectangle"
export type Enum_CR_Halftone_Filter_resolution = "hi-res (2x output size)" | "normal"
export type Enum_CR_Color_Tint_mode = "black" | "blue" | "cool" | "custom" | "cyan" | "green" | "lavender" | "lime" | "magenta" | "maroon" | "navy" | "olive" | "orange" | "peach" | "purple" | "red" | "rose" | "sepia" | "teal" | "vintage" | "warm" | "white" | "yellow"
export type Enum_CR_Vignette_Filter_vignette_shape = "circle" | "diamond" | "oval" | "square"
export type Enum_CR_Page_Layout_layout_options = "footer" | "header" | "header and footer" | "no header or footer"
export type Enum_CR_Image_Panel_outline_color = "aqua" | "black" | "blue" | "brown" | "coral" | "cyan" | "darkgray" | "fuchsia" | "gold" | "gray" | "green" | "indigo" | "lavender" | "lightgray" | "lime" | "magenta" | "maroon" | "navy" | "olive" | "orange" | "pink" | "purple" | "red" | "silver" | "teal" | "turquoise" | "violet" | "white" | "yellow"
export type Enum_CR_Image_Grid_Panel_outline_color = Enum_CR_Image_Panel_outline_color
export type Enum_CR_Image_Border_outline_color = Enum_CR_Image_Panel_outline_color
export type Enum_CR_Half_Drop_Panel_pattern = "custom drop %" | "half drop" | "none" | "quarter drop"
export type Enum_CR_Diamond_Panel_pattern = "diamond" | "none"
export type Enum_CR_Simple_Meme_Template_preset = "Good Morning ... No Such Thing!" | "One Does Not Simply ... MEME IN COMFY" | "This is fine." | "custom"
export type Enum_CR_Simple_Meme_Template_font_outline = "extra thick" | "none" | "thick" | "thin"
export type Enum_CR_Simple_Meme_Template_bar_options = "bottom" | "no bars" | "top" | "top and bottom"
export type Enum_CR_Comic_Panel_Templates_template = "G22" | "G33" | "H12" | "H13" | "H2" | "H21" | "H23" | "H3" | "H31" | "H32" | "V12" | "V13" | "V2" | "V21" | "V23" | "V3" | "V31" | "V32" | "custom"
export type Enum_CR_Comic_Panel_Templates_reading_direction = "left to right" | "right to left"
export type Enum_CR_Simple_Image_Compare_mode = "dark" | "normal"
export type Enum_CR_Seamless_Checker_grid_options = "2x2" | "3x3" | "4x4" | "5x5" | "6x6"
export type Enum_CR_Batch_Process_Switch_Input = "image" | "image batch"
export type Enum_CR_Img2Img_Process_Switch_Input = "img2img" | "txt2img"
export type Enum_CR_Hires_Fix_Process_Switch_Input = "image_upscale" | "latent_upscale"
export type Enum_CR_String_To_Number_round_integer = "round" | "round down" | "round up"
export type Enum_CR_Random_Multiline_Values_value_type = "alphabetic" | "alphanumeric" | "binary" | "custom" | "decimal" | "hexadecimal" | "natural"
export type Enum_CR_Random_Multiline_Colors_value_type = "hex color" | "matplotlib xkcd" | "rgb"
export type Enum_CR_Text_Operation_operation = "capitalize" | "invert_case" | "lowercase" | "remove_spaces" | "reverse" | "trim" | "uppercase"
export type Enum_CR_Math_Operation_operation = "abs" | "cos" | "exp" | "log" | "neg" | "sin" | "sqrt" | "tan"
export type Enum_CR_Select_Resize_Method_method = "Crop" | "Fit"
export type Enum_CR_Select_ISO_Size_iso_size = "A0 - 9933x14043" | "A1 - 7016x9933" | "A10 - 307x437" | "A11 - 213x307" | "A12 - 154x213" | "A13 - 106x154" | "A2 - 4960x7016" | "A3 - 3508x4960" | "A4 - 2480x3508" | "A5 - 1748x2480" | "A6 - 1240x1748" | "A7 - 874x1240" | "A8 - 614x874" | "A9 - 437x614" | "B0 - 11811x16701" | "B1 - 8350x11811" | "B10 - 366x520" | "B2 - 5906x8350" | "B3 - 4169x5906" | "B4 - 2953x4169" | "B5 - 2079x2953" | "B6 - 1476x2079" | "B7 - 1039x1476" | "B8 - 732x1039" | "B9 - 520x732" | "C0 - 10831x15319" | "C1 - 7654x10831" | "C10 - 331x472" | "C2 - 5409x7654" | "C3 - 3827x5409" | "C4 - 2705x3827" | "C5 - 1913x2705" | "C6 - 1346x1913" | "C7 - 957x1346" | "C8 - 673x957" | "C9 - 472x673"
export type Enum_CR_Simple_Schedule_schedule_type = "Camera" | "ControlNet" | "Job" | "LoRA" | "Model" | "Prompt" | "Prompt Weight" | "Style" | "Text" | "Upscale" | "Value"
export type Enum_CR_Central_Schedule_schedule_type1 = Enum_CR_Simple_Schedule_schedule_type
export type Enum_CR_Central_Schedule_schedule_type2 = Enum_CR_Simple_Schedule_schedule_type
export type Enum_CR_Central_Schedule_schedule_type3 = Enum_CR_Simple_Schedule_schedule_type
export type Enum_CR_Simple_Schedule_schedule_format = "CR" | "Deforum"
export type Enum_CR_Central_Schedule_schedule_format = Enum_CR_Simple_Schedule_schedule_format
export type Enum_CR_Value_Scheduler_schedule_format = Enum_CR_Simple_Schedule_schedule_format
export type Enum_CR_Text_Scheduler_schedule_format = Enum_CR_Simple_Schedule_schedule_format
export type Enum_CR_Load_Scheduled_Models_schedule_format = Enum_CR_Simple_Schedule_schedule_format
export type Enum_CR_Load_Scheduled_LoRAs_schedule_format = Enum_CR_Simple_Schedule_schedule_format
export type Enum_CR_Prompt_Scheduler_schedule_format = Enum_CR_Simple_Schedule_schedule_format
export type Enum_CR_Simple_Prompt_Scheduler_keyframe_format = Enum_CR_Simple_Schedule_schedule_format
export type Enum_CR_Keyframe_List_keyframe_format = Enum_CR_Simple_Schedule_schedule_format
export type Enum_CR_Value_Scheduler_mode = "Default Value" | "Schedule"
export type Enum_CR_Text_Scheduler_mode = "Default Text" | "Schedule"
export type Enum_CR_Load_Scheduled_Models_mode = "Load default Model" | "Schedule"
export type Enum_CR_Load_Scheduled_LoRAs_mode = "Load default LoRA" | "Off" | "Schedule"
export type Enum_CR_Prompt_Scheduler_mode = "Default Prompt" | "Keyframe List" | "Schedule"
export type Enum_CR_Interpolate_Latents_method = "lerp"
export type Enum_CR_Load_Animation_Frames_image_sequence_folder = '🔴' // never
export type Enum_CR_Load_Flow_Frames_input_folder = '🔴' // never
export type Enum_CR_Load_Flow_Frames_sort_by = "Alphabetic" | "Index"
export type Enum_CR_Prompt_List_Keyframes_keyframe_format = "Deforum"
export type Enum_CR_Simple_Prompt_List_Keyframes_keyframe_format = Enum_CR_Prompt_List_Keyframes_keyframe_format
export type Enum_CR_Simple_Prompt_List_Keyframes_transition_type = "Default"
export type Enum_CR_Simple_Prompt_List_Keyframes_transition_speed = Enum_CR_Simple_Prompt_List_Keyframes_transition_type
export type Enum_CR_Simple_Prompt_List_Keyframes_transition_profile = Enum_CR_Simple_Prompt_List_Keyframes_transition_type
export type Enum_CR_Cycle_Models_mode = "Off" | "Sequential"
export type Enum_CR_Cycle_LoRAs_mode = Enum_CR_Cycle_Models_mode
export type Enum_CR_Cycle_Text_mode = "Sequential"
export type Enum_CR_Cycle_Text_Simple_mode = Enum_CR_Cycle_Text_mode
export type Enum_CR_Cycle_Images_mode = Enum_CR_Cycle_Text_mode
export type Enum_CR_Cycle_Images_Simple_mode = Enum_CR_Cycle_Text_mode
export type Enum_AnyLineArtPreprocessor$_aux_merge_with_lineart = "lineart_anime" | "lineart_realisitic" | "lineart_standard" | "manga_line"
export type Enum_DensePosePreprocessor_model = "densepose_r101_fpn_dl.torchscript" | "densepose_r50_fpn_dl.torchscript"
export type Enum_DensePosePreprocessor_cmap = "Parula (CivitAI)" | "Viridis (MagicAnimate)"
export type Enum_DepthAnythingPreprocessor_ckpt_name = "depth_anything_vitb14.pth" | "depth_anything_vitl14.pth" | "depth_anything_vits14.pth"
export type Enum_Zoe$_DepthAnythingPreprocessor_environment = "indoor" | "outdoor"
export type Enum_DepthAnythingV2Preprocessor_ckpt_name = "depth_anything_v2_vitb.pth" | "depth_anything_v2_vitg.pth" | "depth_anything_v2_vitl.pth" | "depth_anything_v2_vits.pth"
export type Enum_DiffusionEdge$_Preprocessor_environment = "indoor" | "natrual" | "urban"
export type Enum_AnimalPosePreprocessor_pose_estimator = "rtmpose-m_ap10k_256.onnx" | "rtmpose-m_ap10k_256_bs5.torchscript.pt"
export type Enum_MeshGraphormer$7DepthMapPreprocessor_mask_type = "based_on_depth" | "original" | "tight_bboxes"
export type Enum_MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor_mask_type = Enum_MeshGraphormer$7DepthMapPreprocessor_mask_type
export type Enum_Metric3D$7DepthMapPreprocessor_backbone = "vit-giant2" | "vit-large" | "vit-small"
export type Enum_Metric3D$7NormalMapPreprocessor_backbone = Enum_Metric3D$7DepthMapPreprocessor_backbone
export type Enum_FacialPartColoringFromPoseKps_mode = "point" | "polygon"
export type Enum_Unimatch$_OptFlowPreprocessor_ckpt_name = "gmflow-scale1-mixdata.pth" | "gmflow-scale2-mixdata.pth" | "gmflow-scale2-regrefine6-mixdata.pth"
export type Enum_AIO$_Preprocessor_preprocessor = "AnimalPosePreprocessor" | "AnimeFace_SemSegPreprocessor" | "AnimeLineArtPreprocessor" | "AnyLineArtPreprocessor_aux" | "BAE-NormalMapPreprocessor" | "BinaryPreprocessor" | "CannyEdgePreprocessor" | "ColorPreprocessor" | "DSINE-NormalMapPreprocessor" | "DWPreprocessor" | "DensePosePreprocessor" | "DepthAnythingPreprocessor" | "DepthAnythingV2Preprocessor" | "FakeScribblePreprocessor" | "HEDPreprocessor" | "ImageIntensityDetector" | "ImageLuminanceDetector" | "LeReS-DepthMapPreprocessor" | "LineArtPreprocessor" | "LineartStandardPreprocessor" | "M-LSDPreprocessor" | "Manga2Anime_LineArt_Preprocessor" | "MediaPipe-FaceMeshPreprocessor" | "MeshGraphormer-DepthMapPreprocessor" | "Metric3D-DepthMapPreprocessor" | "Metric3D-NormalMapPreprocessor" | "MiDaS-DepthMapPreprocessor" | "MiDaS-NormalMapPreprocessor" | "OneFormer-ADE20K-SemSegPreprocessor" | "OneFormer-COCO-SemSegPreprocessor" | "OpenposePreprocessor" | "PiDiNetPreprocessor" | "PyraCannyPreprocessor" | "SAMPreprocessor" | "ScribblePreprocessor" | "Scribble_PiDiNet_Preprocessor" | "Scribble_XDoG_Preprocessor" | "SemSegPreprocessor" | "ShufflePreprocessor" | "TEEDPreprocessor" | "TTPlanet_TileGF_Preprocessor" | "TTPlanet_TileSimple_Preprocessor" | "TilePreprocessor" | "UniFormer-SemSegPreprocessor" | "Zoe-DepthMapPreprocessor" | "Zoe_DepthAnythingPreprocessor" | "none"
export type Enum_ControlNetPreprocessorSelector_preprocessor_out = Enum_AIO$_Preprocessor_preprocessor
export type Enum_ControlNetPreprocessorSelector_preprocessor = Enum_AIO$_Preprocessor_preprocessor
export type Enum_PixelPerfectResolution_resize_mode = "Crop and Resize" | "Just Resize" | "Resize and Fill"
export type Enum_HintImageEnchance_resize_mode = Enum_PixelPerfectResolution_resize_mode
export type Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation = "A1111" | "comfy" | "comfy++" | "compel"
export type Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_weight_interpretation = Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation
export type Enum_CLIPTextEncodeList_weight_interpretation = Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation
export type Enum_CLIPTextEncodeSequence2_weight_interpretation = Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation
export type Enum_ImageExpandBatch$6_method = "expand" | "repeat all" | "repeat first" | "repeat last"
export type Enum_MaskExpandBatch$6_method = Enum_ImageExpandBatch$6_method
export type Enum_ImageCrop$6_position = "bottom-center" | "bottom-left" | "bottom-right" | "center" | "left-center" | "right-center" | "top-center" | "top-left" | "top-right"
export type Enum_ImageFlip$6_axis = "x" | "xy" | "y"
export type Enum_MaskFlip$6_axis = Enum_ImageFlip$6_axis
export type Enum_ImageResize$6_interpolation = "area" | "bicubic" | "bilinear" | "lanczos" | "nearest" | "nearest-exact"
export type Enum_Crop_Image_Settings_$1JPS$2_crop_intpol = Enum_ImageResize$6_interpolation
export type Enum_Revision_Settings_$1JPS$2_crop_intpol = Enum_ImageResize$6_interpolation
export type Enum_IP_Adapter_Settings_$1JPS$2_crop_intpol = Enum_ImageResize$6_interpolation
export type Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_intpol = Enum_ImageResize$6_interpolation
export type Enum_Image_Prepare_Settings_$1JPS$2_interpolation = Enum_ImageResize$6_interpolation
export type Enum_InstantID_Source_Prepare_Settings_$1JPS$2_interpolation = Enum_ImageResize$6_interpolation
export type Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_interpolation = Enum_ImageResize$6_interpolation
export type Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_interpolation = Enum_ImageResize$6_interpolation
export type Enum_Crop_Image_Pipe_$1JPS$2_crop_intpol_out = Enum_ImageResize$6_interpolation
export type Enum_IP_Adapter_Settings_Pipe_$1JPS$2_crop_intpol_out = Enum_ImageResize$6_interpolation
export type Enum_IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_prepare_intpol_out = Enum_ImageResize$6_interpolation
export type Enum_Image_Prepare_Pipe_$1JPS$2_interpolation_out = Enum_ImageResize$6_interpolation
export type Enum_InstantID_Source_Prepare_Pipe_$1JPS$2_interpolation_out = Enum_ImageResize$6_interpolation
export type Enum_InstantID_Pose_Prepare_Pipe_$1JPS$2_interpolation_out = Enum_ImageResize$6_interpolation
export type Enum_InstantID_Mask_Prepare_Pipe_$1JPS$2_interpolation_out = Enum_ImageResize$6_interpolation
export type Enum_Revision_Settings_Pipe_$1JPS$2_crop_intpol_out = Enum_ImageResize$6_interpolation
export type Enum_Crop_Image_Square_$1JPS$2_interpolation = Enum_ImageResize$6_interpolation
export type Enum_Crop_Image_TargetSize_$1JPS$2_interpolation = Enum_ImageResize$6_interpolation
export type Enum_Prepare_Image_$1JPS$2_interpolation = Enum_ImageResize$6_interpolation
export type Enum_Prepare_Image_Plus_$1JPS$2_interpolation = Enum_ImageResize$6_interpolation
export type Enum_Prepare_Image_Tiled_IPA_$1JPS$2_interpolation = Enum_ImageResize$6_interpolation
export type Enum_ImageResize$6_method = "fill / crop" | "keep proportion" | "pad" | "stretch"
export type Enum_ImageResize$6_condition = "always" | "downscale if bigger" | "if bigger area" | "if smaller area" | "upscale if smaller"
export type Enum_ImageSeamCarving$6_energy = "backward" | "forward"
export type Enum_ImageSeamCarving$6_order = "height-first" | "width-first"
export type Enum_RemBGSession$6_model = "isnet-anime: anime illustrations" | "isnet-general-use: general purpose" | "sam: general purpose" | "silueta: very small u2net" | "u2net: general purpose" | "u2net_cloth_seg: cloths Parsing" | "u2net_human_seg: human segmentation" | "u2netp: lightweight general purpose"
export type Enum_RemBGSession$6_providers = "Azure" | "CPU" | "CUDA" | "CoreML" | "DirectML" | "OpenVINO" | "ROCM" | "Tensorrt"
export type Enum_TransparentBGSession$6_mode = "base" | "base-nightly" | "fast"
export type Enum_ImageApplyLUT$6_lut_file = "put_luts_files_here.txt"
export type Enum_ImageDesaturate$6_method = "average" | "lightness" | "luminance (Rec.601)" | "luminance (Rec.709)"
export type Enum_PixelOEPixelize$6_downscale_mode = "bicubic" | "center" | "contrast" | "k-centroid" | "nearest"
export type Enum_ImageColorMatch$6_color_space = "LAB" | "LUV" | "RGB" | "XYZ" | "YCbCr" | "YUV"
export type Enum_ImageColorMatch$6_device = "auto" | "cpu" | "gpu"
export type Enum_ImageColorMatchAdobe$6_device = Enum_ImageColorMatch$6_device
export type Enum_ImageHistogramMatch$6_device = Enum_ImageColorMatch$6_device
export type Enum_ImageToDevice$6_device = Enum_ImageColorMatch$6_device
export type Enum_MaskBlur$6_device = Enum_ImageColorMatch$6_device
export type Enum_ImageColorMatchAdobe$6_color_space = "LAB" | "RGB"
export type Enum_ImageHistogramMatch$6_method = "pytorch" | "skimage"
export type Enum_ImagePreviewFromLatent$6_image = "none"
export type Enum_TransitionMask$6_transition_type = "center box" | "circle" | "fade" | "horizontal bar" | "horizontal door" | "horizontal slide" | "vertical bar" | "vertical door" | "vertical slide"
export type Enum_TransitionMask$6_timing_function = "in" | "in-out" | "linear" | "out"
export type Enum_PlotParameters$6_order_by = "base_shift" | "denoise" | "guidance" | "lora_strength" | "max_shift" | "none" | "sampler" | "scheduler" | "seed" | "steps" | "time"
export type Enum_PlotParameters$6_cols_value = Enum_PlotParameters$6_order_by
export type Enum_PlotParameters$6_add_prompt = "excerpt" | "false" | "true"
export type Enum_PlotParameters$6_add_params = "changes only" | "false" | "true"
export type Enum_DrawText$6_font = "ShareTechMono-Regular.ttf"
export type Enum_DrawText$6_direction = "ltr" | "rtl"
export type Enum_DisplayAny_mode = "raw value" | "tensor shape"
export type Enum_SDXLEmptyLatentSizePicker$6_resolution = "1024x1024 (1.0)" | "1024x960 (1.07)" | "1088x896 (1.21)" | "1088x960 (1.13)" | "1152x832 (1.38)" | "1152x896 (1.29)" | "1216x832 (1.46)" | "1280x768 (1.67)" | "1344x704 (1.91)" | "1344x768 (1.75)" | "1408x704 (2.0)" | "1472x704 (2.09)" | "1536x640 (2.4)" | "1600x640 (2.5)" | "1664x576 (2.89)" | "1728x576 (3.0)" | "704x1344 (0.52)" | "704x1408 (0.5)" | "768x1280 (0.6)" | "768x1344 (0.57)" | "832x1152 (0.72)" | "832x1216 (0.68)" | "896x1088 (0.82)" | "896x1152 (0.78)" | "960x1024 (0.94)" | "960x1088 (0.88)"
export type Enum_SimpleComparison$6_comparison = "!=" | "<" | "<=" | "==" | ">" | ">="
export type Enum_IPAdapterAdvanced_embeds_scaling = "K+V" | "K+V w/ C penalty" | "K+mean(V) w/ C penalty" | "V only"
export type Enum_IPAdapterBatch_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterFaceID_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterFaceIDKolors_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAAdapterFaceIDBatch_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterTiled_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterTiledBatch_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterEmbeds_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterEmbedsBatch_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterStyleComposition_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterStyleCompositionBatch_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterMS_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterClipVisionEnhancer_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterClipVisionEnhancerBatch_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterFromParams_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterPreciseStyleTransfer_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterPreciseStyleTransferBatch_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterPreciseComposition_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterPreciseCompositionBatch_embeds_scaling = Enum_IPAdapterAdvanced_embeds_scaling
export type Enum_IPAdapterUnifiedLoader_preset = "FULL FACE - SD1.5 only (portraits stronger)" | "LIGHT - SD1.5 only (low strength)" | "PLUS (high strength)" | "PLUS FACE (portraits)" | "STANDARD (medium strength)" | "VIT-G (medium strength)"
export type Enum_IPAdapterUnifiedLoaderFaceID_preset = "FACEID" | "FACEID PLUS - SD1.5 only" | "FACEID PLUS V2" | "FACEID PORTRAIT (style transfer)" | "FACEID PORTRAIT UNNORM - SDXL only (strong)"
export type Enum_IPAdapterUnifiedLoaderFaceID_provider = "CPU" | "CUDA" | "CoreML" | "DirectML" | "OpenVINO" | "ROCM"
export type Enum_IPAdapterUnifiedLoaderCommunity_preset = "Composition" | "Kolors"
export type Enum_IPAdapterCombineEmbeds_method = "add" | "average" | "concat" | "max" | "min" | "norm average" | "subtract"
export type Enum_IPAdapterNoise_type = "dissolve" | "fade" | "gaussian" | "shuffle"
export type Enum_PrepImageForClipVision_interpolation = "BICUBIC" | "BILINEAR" | "BOX" | "HAMMING" | "LANCZOS" | "NEAREST"
export type Enum_PrepImageForClipVision_crop_position = "bottom" | "center" | "left" | "pad" | "right" | "top"
export type Enum_IPAdapterLoadEmbeds_embeds = '🔴' // never
export type Enum_IPAdapterWeights_timing = "custom" | "ease_in" | "ease_in_out" | "ease_out" | "linear" | "random"
export type Enum_IPAdapterWeights_method = "alternate batches" | "full batch" | "shift batches"
export type Enum_SDXL_Resolutions_$1JPS$2_resolution = "landscape - 1152x896 (4:3)" | "landscape - 1216x832 (3:2)" | "landscape - 1344x768 (16:9)" | "landscape - 1536x640 (21:9)" | "portrait - 640x1536 (9:21)" | "portrait - 768x1344 (9:16)" | "portrait - 832x1216 (2:3)" | "portrait - 896x1152 (3:4)" | "square - 1024x1024 (1:1)"
export type Enum_SDXL_Basic_Settings_$1JPS$2_resolution = "Use Image Resolution" | "landscape - 1152x896 (4:3)" | "landscape - 1216x832 (3:2)" | "landscape - 1344x768 (16:9)" | "landscape - 1536x640 (21:9)" | "portrait - 640x1536 (9:21)" | "portrait - 768x1344 (9:16)" | "portrait - 832x1216 (2:3)" | "portrait - 896x1152 (3:4)" | "square - 1024x1024 (1:1)"
export type Enum_SDXL_Settings_$1JPS$2_resolution = Enum_SDXL_Basic_Settings_$1JPS$2_resolution
export type Enum_Generation_TXT_IMG_Settings_$1JPS$2_mode = "Img2Img" | "Txt2Img"
export type Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos = "bottom" | "center" | "left" | "right" | "top"
export type Enum_Crop_Image_Settings_$1JPS$2_support_crop_pos = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_Revision_Settings_$1JPS$2_rev1_crop = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_Revision_Settings_$1JPS$2_rev2_crop = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_IP_Adapter_Settings_$1JPS$2_ipa_crop = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_Crop_Image_Pipe_$1JPS$2_source_crop_pos_out = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_Crop_Image_Pipe_$1JPS$2_support_crop_pos_out = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_IP_Adapter_Settings_Pipe_$1JPS$2_ipa_crop_out = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_Revision_Settings_Pipe_$1JPS$2_rev1_crop_out = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_Revision_Settings_Pipe_$1JPS$2_rev2_crop_out = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_Crop_Image_Square_$1JPS$2_crop_position = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_Crop_Image_TargetSize_$1JPS$2_crop_position = Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
export type Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from = "Source Image" | "Support Direct" | "Support Image"
export type Enum_CtrlNet_ZoeDepth_Settings_$1JPS$2_zoe_from = Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from
export type Enum_CtrlNet_MiDaS_Settings_$1JPS$2_midas_from = Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from
export type Enum_CtrlNet_OpenPose_Settings_$1JPS$2_openpose_from = Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from
export type Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype = "ease in" | "ease in-out" | "ease out" | "linear" | "reverse in-out" | "strong middle" | "weak input" | "weak middle" | "weak output"
export type Enum_IP_Adapter_Tiled_Settings_$1JPS$2_ipa_wtype = Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype
export type Enum_IP_Adapter_Settings_Pipe_$1JPS$2_ipa_wtype_out = Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype
export type Enum_IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_ipa_wtype_out = Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype
export type Enum_IP_Adapter_Settings_$1JPS$2_ipa_mask = "Blue from Image" | "Green from Image" | "Mask Editor" | "Mask Editor (inverted)" | "No Mask" | "Red from Image"
export type Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_mask_type = Enum_IP_Adapter_Settings_$1JPS$2_ipa_mask
export type Enum_IP_Adapter_Settings_$1JPS$2_ipa_model = "SDXL Plus Face ViT-H" | "SDXL Plus ViT-H" | "SDXL ViT-H"
export type Enum_IP_Adapter_Tiled_Settings_$1JPS$2_ipa_model = Enum_IP_Adapter_Settings_$1JPS$2_ipa_model
export type Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_type = "Direct Source" | "Source AR + Source Res" | "Source AR + Tile Res" | "Square AR + Target Res" | "Square AR + Tile Res" | "Target AR + Target Res" | "Target AR + Tile Res" | "Tile AR + Source Res" | "Tile AR + Target Res"
export type Enum_InstantID_Source_Prepare_Settings_$1JPS$2_resize_to = "Keep Size" | "Resize to Target"
export type Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip = "No" | "X-Axis" | "Y-Axis"
export type Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_flip = Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip
export type Enum_InstantID_Source_Prepare_Pipe_$1JPS$2_flip_out = Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip
export type Enum_InstantID_Pose_Prepare_Pipe_$1JPS$2_flip_out = Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip
export type Enum_Prepare_Image_Plus_$1JPS$2_flip = Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip
export type Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_resize_to = "Keep Size" | "Resize to Source" | "Resize to Target"
export type Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_to = Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_resize_to
export type Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type = "Crop" | "Stretch"
export type Enum_InstantID_Mask_Prepare_Pipe_$1JPS$2_resize_type_out = Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type
export type Enum_Prepare_Image_Plus_$1JPS$2_resize_type = Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type
export type Enum_Disable_Enable_Switch_$1JPS$2_match = "Set to Disable" | "Set to Enable"
export type Enum_Enable_Disable_Switch_$1JPS$2_match = Enum_Disable_Enable_Switch_$1JPS$2_match
export type Enum_Text_Concatenate_$1JPS$2_delimiter = "comma" | "none" | "space"
export type Enum_Get_Date_Time_String_$1JPS$2_style = "%H%M" | "%H%M%S" | "%H_%M" | "%H_%M_%S" | "%Y%m%d" | "%Y%m%d%H%M" | "%Y%m%d%H%M%S" | "%Y-%m-%d" | "%Y-%m-%d" | "%Y-%m-%d %H_%M" | "%Y-%m-%d %H_%M_%S" | "%Y-%m-%d-%H_%M" | "%Y-%m-%d-%H_%M_%S"
export type Enum_SDXL_Prompt_Styler_$1JPS$2_artist = "Al Capp" | "Alberto Dros" | "Alejandro Burdisio" | "Aleksi Briclot" | "Alena Aenami" | "Amanda Clark" | "Anita Dongre" | "Anna Bocek" | "Anna Dittmann" | "Anne Bachelier" | "Ansel Adams" | "Aron Demetz" | "Becky Cloonan" | "Bo Bartlett" | "Bo Chen" | "Bob Byerley" | "Bob Eggleton" | "Butcher Billy" | "Camilla d'Errico" | "Carey Chen" | "Carl Barks" | "Chad Dutson" | "Charles E Burchfield" | "Chesley Bonestell" | "Chris Dunn" | "Chris Dyer" | "Christine Ellger" | "Christopher Bucklow" | "Clemens Ascher" | "Cliff Chiang" | "Clive Barker" | "Clyde Caldwell" | "Craig Davison" | "Dale Chihuly" | "Daniel Arsham" | "Daniel Clowes" | "Daria Endresen" | "Darwyn Cooke" | "David Aja" | "Diane Arbus" | "Dima Dmitriev" | "Doug Chiang" | "Ed Emshwiller" | "Eddie Colla" | "Esao Andrews" | "Etam Cru" | "Evgeni Dinev" | "Eyvind Earle" | "Franck Bohbot" | "Fritz Eichenberg" | "Gabriel Dawe" | "George Digalakis" | "Gil Elvgren" | "Giorgio de Chirico" | "Gregory Colbert" | "Guido Crepax" | "Harold Edgerton" | "Howard Chaykin" | "Hsiao Ron Cheng" | "Hussein Chalayan" | "James Lee Byars" | "Janet Echelman" | "Jason Edmiston" | "Jessica Drossin" | "Jessica Durrant" | "John Berkey" | "Josh Adamski" | "Judy Chicago" | "Katia Chausheva" | "Keith Carter" | "Larry Carlson" | "Les Edwards" | "Lois van Baarle" | "Lori Earley" | "MC Escher" | "Mac Duggal" | "Marc Adamus" | "Margaret Brundage" | "Mark Arian" | "Martin Ansin" | "Matthew Barney" | "Michael Cheval" | "Michael Cho" | "Michael Cinco" | "Michael Eastman" | "Mike Dargas" | "Miki Asai" | "Miles Aldridge" | "Miss Aniela" | "Neal Adams" | "Nicholas Alan Cope" | "Nigel Cooke" | "Norman Ackroyd" | "Olafur Eliasson" | "PJ Crook" | "Pablo Amaringo" | "Paul Barson" | "Peter Arno" | "Peter Chilelli" | "Peter Coulson" | "Peter Elson" | "Philip Lorca diCorcia" | "Rachel Bingaman" | "Reem Acra" | "Robert Crumb" | "Ron Embleton" | "Ron English" | "Ruth Asawa" | "Ruth Bernhard" | "Ryan Dyar" | "Sergio Aragonés" | "Shigeru Ban" | "Stan Berenstain" | "Stanley Donwood" | "TJ Drysdale" | "Terry Dodson" | "Thomas Hart Benton" | "Tim Burton" | "Tim Doyle" | "Tom Chambers" | "Tom Dixon" | "Tristan Eaton" | "Wes Anderson" | "Will Eisner" | "Wim Delvoye" | "Xu Beihong" | "none"
export type Enum_SDXL_Prompt_Styler_$1JPS$2_movie = "2001 - A Space Odyssey" | "300" | "A.I." | "Akira" | "Amélie" | "Avatar" | "Black Swan" | "Blade Runner 2049" | "Blue Velvet" | "Brazil" | "Dark City" | "Django Unchained" | "Dune (2021)" | "Ex Machina" | "Eyes Wide Shut" | "Gattaca" | "Hero" | "In the Mood for Love" | "Inception" | "Kill Bill" | "Life of Pi" | "Mad Max - Fury Road" | "Melancholia" | "Metropolis" | "Moulin Rouge" | "Neon Demon" | "Parasite" | "Sin City" | "Spider-Man - Into the Spider-Verse" | "Spirited Away" | "The Cell" | "The Fall" | "The Fountain" | "The Grand Budapest Hotel" | "The Lord of the Rings" | "The Matrix" | "Tron Legacy" | "V for Vendetta" | "What Dreams May Come" | "none"
export type Enum_SDXL_Prompt_Styler_$1JPS$2_style = "Dystopian" | "Film Noir" | "Gothic" | "Horror" | "Hyperrealism" | "Manga" | "Neon Noir" | "Paper Mache" | "Papercut Shadow Box" | "Papercut Stacked" | "Silhouette" | "Techwear Fashion" | "none" | "sai-3d-model" | "sai-analog film" | "sai-anime" | "sai-cinematic" | "sai-comic book" | "sai-craft clay" | "sai-digital art" | "sai-enhance" | "sai-fantasy art" | "sai-isometric" | "sai-line art" | "sai-lowpoly" | "sai-neonpunk" | "sai-origami" | "sai-photographic" | "sai-pixel art" | "sai-texture"
export type Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance = "OFF" | "ON"
export type Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_negative = Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance
export type Enum_SDXL_Prompt_Styler_$1JPS$2_universal_negative = Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance
export type Enum_SDXL_Prompt_Handling_$1JPS$2_handling = "Combine Positive_G + Positive_L" | "Combine Positive_L + Positive_G" | "Copy Positive_G to Both" | "Copy Positive_L to Both" | "Copy to Both if Empty" | "Ignore Positive_G Input" | "Ignore Positive_L Input" | "Use Positive_G + Positive_L"
export type Enum_SDXL_Prompt_Handling_Plus_$1JPS$2_handling = Enum_SDXL_Prompt_Handling_$1JPS$2_handling
export type Enum_NNLatentUpscale_version = "SD 1.x" | "SDXL"
export type Enum_BNK$_TiledKSamplerAdvanced_tiling_strategy = "padded" | "random" | "random strict" | "simple"
export type Enum_BNK$_TiledKSampler_tiling_strategy = Enum_BNK$_TiledKSamplerAdvanced_tiling_strategy
export type Enum_ttN_tinyLoader_config_name = "Default" | "anything_v3.yaml" | "v1-inference.yaml" | "v1-inference_clip_skip_2.yaml" | "v1-inference_clip_skip_2_fp16.yaml" | "v1-inference_fp16.yaml" | "v1-inpainting-inference.yaml" | "v2-inference-v.yaml" | "v2-inference-v_fp32.yaml" | "v2-inference.yaml" | "v2-inference_fp32.yaml" | "v2-inpainting-inference.yaml"
export type Enum_ttN_pipeLoader$_v2_config_name = Enum_ttN_tinyLoader_config_name
export type Enum_ttN_pipeLoaderSDXL$_v2_config_name = Enum_ttN_tinyLoader_config_name
export type Enum_ttN_pipeLoaderSDXL$_v2_refiner_config_name = Enum_ttN_tinyLoader_config_name
export type Enum_ttN_multiModelMerge_config_A_name = Enum_ttN_tinyLoader_config_name
export type Enum_ttN_multiModelMerge_config_B_name = Enum_ttN_tinyLoader_config_name
export type Enum_ttN_multiModelMerge_config_C_name = Enum_ttN_tinyLoader_config_name
export type Enum_ttN_pipeLoader_config_name = Enum_ttN_tinyLoader_config_name
export type Enum_ttN_tinyLoader_sampling = "Default" | "eps" | "lcm" | "v_prediction" | "x0"
export type Enum_ttN_tinyLoader_vae_name = "Baked VAE" | "FLUX1\\ae.sft" | "Stable-Cascade\\stage_a.safetensors" | "blessed2.vae.pt" | "kl-f8-anime2.ckpt" | "orangemix.vae.pt" | "sdxl_vae.safetensors" | "vae-ft-mse-840000-ema-pruned.safetensors"
export type Enum_ttN_pipeLoader$_v2_vae_name = Enum_ttN_tinyLoader_vae_name
export type Enum_ttN_pipeLoaderSDXL$_v2_vae_name = Enum_ttN_tinyLoader_vae_name
export type Enum_ttN_pipeLoader_vae_name = Enum_ttN_tinyLoader_vae_name
export type Enum_ttN_pipeLoaderSDXL_vae_name = Enum_ttN_tinyLoader_vae_name
export type Enum_ttN_pipeLoaderSDXL_refiner_vae_name = Enum_ttN_tinyLoader_vae_name
export type Enum_ttN_tinyLoader_empty_latent_aspect = "1024 x 1024 [S] 1:1" | "1024 x 512 [L] 2:1" | "1152 x 896 [L] 4:3" | "1216 x 768 [L] 8:5" | "1216 x 832 [L] 3:2" | "1344 x 768 [L] 16:9" | "1472 x 704 [L] 19:9" | "1536 x 640 [L] 21:9" | "512 x 1024 [P] 1:2" | "512 x 512 [S] 1:1" | "512 x 682 [P] 3:4" | "512 x 768 [P] 2:3" | "512 x 910 [P] 9:16" | "640 x 1536 [P] 9:21" | "682 x 512 [L] 4:3" | "704 x 1472 [P] 9:19" | "768 x 1216 [P] 5:8" | "768 x 1344 [P] 9:16" | "768 x 512 [L] 3:2" | "768 x 768 [S] 1:1" | "832 x 1216 [P] 2:3" | "896 x 1152 [P] 3:4" | "910 x 512 [L] 16:9" | "910 x 910 [S] 1:1" | "width x height [custom]"
export type Enum_ttN_KSampler$_v2_upscale_method = "None" | "[hiresFix] area" | "[hiresFix] bicubic" | "[hiresFix] bilinear" | "[hiresFix] bislerp" | "[hiresFix] lanczos" | "[hiresFix] nearest-exact" | "[latent] area" | "[latent] bicubic" | "[latent] bilinear" | "[latent] bislerp" | "[latent] lanczos" | "[latent] nearest-exact"
export type Enum_ttN_pipeKSampler$_v2_upscale_method = Enum_ttN_KSampler$_v2_upscale_method
export type Enum_ttN_pipeKSamplerAdvanced$_v2_upscale_method = Enum_ttN_KSampler$_v2_upscale_method
export type Enum_ttN_pipeKSamplerSDXL$_v2_upscale_method = Enum_ttN_KSampler$_v2_upscale_method
export type Enum_ttN_KSampler$_v2_rescale = "None" | "by percentage" | "to Width/Height" | "to longer side - maintain aspect"
export type Enum_ttN_pipeKSampler$_v2_rescale = Enum_ttN_KSampler$_v2_rescale
export type Enum_ttN_pipeKSamplerAdvanced$_v2_rescale = Enum_ttN_KSampler$_v2_rescale
export type Enum_ttN_pipeKSamplerSDXL$_v2_rescale = Enum_ttN_KSampler$_v2_rescale
export type Enum_ttN_KSampler$_v2_scheduler = "AYS SD1" | "AYS SDXL" | "AYS SVD" | "GITS SD1" | "beta" | "ddim_uniform" | "exponential" | "karras" | "linear_quadratic" | "normal" | "sgm_uniform" | "simple"
export type Enum_ttN_pipeKSampler$_v2_scheduler = Enum_ttN_KSampler$_v2_scheduler
export type Enum_ttN_pipeKSamplerAdvanced$_v2_scheduler = Enum_ttN_KSampler$_v2_scheduler
export type Enum_ttN_pipeKSamplerSDXL$_v2_scheduler = Enum_ttN_KSampler$_v2_scheduler
export type Enum_ttN_KSampler$_v2_image_output = "Disabled" | "Hide" | "Hide/Save" | "Preview" | "Save"
export type Enum_ttN_pipeKSampler$_v2_image_output = Enum_ttN_KSampler$_v2_image_output
export type Enum_ttN_pipeKSamplerAdvanced$_v2_image_output = Enum_ttN_KSampler$_v2_image_output
export type Enum_ttN_pipeKSamplerSDXL$_v2_image_output = Enum_ttN_KSampler$_v2_image_output
export type Enum_ttN_advPlot_images_image_output = Enum_ttN_KSampler$_v2_image_output
export type Enum_ttN_KSampler$_v2_file_type = "bmp" | "jpeg" | "jpg" | "png" | "tif" | "tiff" | "webp"
export type Enum_ttN_pipeKSampler$_v2_file_type = Enum_ttN_KSampler$_v2_file_type
export type Enum_ttN_pipeKSamplerAdvanced$_v2_file_type = Enum_ttN_KSampler$_v2_file_type
export type Enum_ttN_pipeKSamplerSDXL$_v2_file_type = Enum_ttN_KSampler$_v2_file_type
export type Enum_ttN_advPlot_images_file_type = Enum_ttN_KSampler$_v2_file_type
export type Enum_ttN_imageOutput_file_type = Enum_ttN_KSampler$_v2_file_type
export type Enum_ttN_pipeLoader$_v2_empty_latent_aspect = "1024 x 1024 [S] 1:1" | "1024 x 512 [L] 2:1" | "512 x 1024 [P] 1:2" | "512 x 512 [S] 1:1" | "512 x 682 [P] 3:4" | "512 x 768 [P] 2:3" | "512 x 910 [P] 9:16" | "682 x 512 [L] 4:3" | "768 x 512 [L] 3:2" | "768 x 768 [S] 1:1" | "910 x 512 [L] 16:9" | "910 x 910 [S] 1:1" | "width x height [custom]"
export type Enum_ttN_pipeLoaderSDXL$_v2_conditioning_aspect = "1x Empty Latent Aspect" | "2x Empty Latent Aspect" | "3x Empty Latent Aspect" | "4x Empty Latent Aspect" | "5x Empty Latent Aspect" | "6x Empty Latent ASpect" | "7x Empty Latent Aspect" | "8x Empty Latent Aspect" | "width x height [custom]"
export type Enum_ttN_pipeLoaderSDXL$_v2_target_aspect = Enum_ttN_pipeLoaderSDXL$_v2_conditioning_aspect
export type Enum_ttN_pipeLoaderSDXL$_v2_empty_latent_aspect = "1024 x 1024 [S] 1:1" | "1152 x 896 [L] 4:3" | "1216 x 768 [L] 8:5" | "1216 x 832 [L] 3:2" | "1344 x 768 [L] 16:9" | "1472 x 704 [L] 19:9" | "1536 x 640 [L] 21:9" | "640 x 1536 [P] 9:21" | "704 x 1472 [P] 9:19" | "768 x 1216 [P] 5:8" | "768 x 1344 [P] 9:16" | "832 x 1216 [P] 2:3" | "896 x 1152 [P] 3:4" | "width x height [custom]"
export type Enum_ttN_advPlot_range_node = "Connect to xyPlot for options"
export type Enum_ttN_advPlot_string_node = Enum_ttN_advPlot_range_node
export type Enum_ttN_advPlot_combo_node = Enum_ttN_advPlot_range_node
export type Enum_ttN_advPlot_range_widget = "Select node for options"
export type Enum_ttN_advPlot_string_widget = Enum_ttN_advPlot_range_widget
export type Enum_ttN_advPlot_combo_widget = Enum_ttN_advPlot_range_widget
export type Enum_ttN_advPlot_range_range_mode = "num_steps_float" | "num_steps_int" | "step_float" | "step_int"
export type Enum_ttN_advPlot_range_label_type = "ID, Title and Values" | "Title and Values" | "Values"
export type Enum_ttN_advPlot_string_label_type = Enum_ttN_advPlot_range_label_type
export type Enum_ttN_advPlot_combo_label_type = Enum_ttN_advPlot_range_label_type
export type Enum_ttN_advPlot_combo_mode = "all" | "range" | "select"
export type Enum_ttN_advPlot_combo_start_from = "Select widget for options"
export type Enum_ttN_advPlot_combo_end_with = Enum_ttN_advPlot_combo_start_from
export type Enum_ttN_advPlot_combo_select = Enum_ttN_advPlot_combo_start_from
export type Enum_ttN_pipeLoraStack_mode = "advanced" | "simple"
export type Enum_ttN_multiModelMerge_model_interpolation = "A Only" | "Add difference = (  A + (B-C)*M  )" | "Weighted sum = (  A*(1-M) + B*M  )"
export type Enum_ttN_multiModelMerge_clip_interpolation = "A Only" | "Add difference = (  A + (B-C)*M  )" | "B Only" | "C Only" | "Follow model interp" | "Weighted sum = (  A*(1-M) + B*M  )"
export type Enum_ttN_debugInput_console_color = "Black" | "Blue" | "Cyan" | "Green" | "Grey" | "LightBlue" | "LightCyan" | "LightGreen" | "LightRed" | "LightViolet" | "LightWhite" | "LightYellow" | "Red" | "Violet" | "White" | "Yellow"
export type Enum_ttN_textDebug_execute = "Always" | "On Change"
export type Enum_ttN_textCycleLine_index_control = "decrement" | "fixed" | "increment" | "randomize"
export type Enum_ttN_textOutput_number_padding = 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | "None"
export type Enum_ttN_imageOutput_number_padding = Enum_ttN_textOutput_number_padding
export type Enum_ttN_textOutput_file_type = "csv" | "ini" | "log" | "md" | "rtf" | "txt"
export type Enum_ttN_imageOutput_image_output = "Hide" | "Hide/Save" | "Preview" | "Save"
export type Enum_ttN_imageREMBG_image_output = Enum_ttN_imageOutput_image_output
export type Enum_ttN_hiresfixScale_image_output = Enum_ttN_imageOutput_image_output
export type Enum_ttN_pipeKSampler_image_output = Enum_ttN_imageOutput_image_output
export type Enum_ttN_pipeKSamplerAdvanced_image_output = Enum_ttN_imageOutput_image_output
export type Enum_ttN_pipeKSamplerSDXL_image_output = Enum_ttN_imageOutput_image_output
export type Enum_ttN_hiresfixScale_rescale_method = "area" | "bicubic" | "bilinear" | "bislerp" | "lanczos" | "nearest-exact"
export type Enum_DF$_Latent$_Scale$_by$_ratio_scale_method = Enum_ttN_hiresfixScale_rescale_method
export type Enum_DF$_Latent$_Scale$_to$_side_scale_method = Enum_ttN_hiresfixScale_rescale_method
export type Enum_DF$_Image$_scale$_by$_ratio_upscale_method = Enum_ttN_hiresfixScale_rescale_method
export type Enum_DF$_Image$_scale$_to$_side_upscale_method = Enum_ttN_hiresfixScale_rescale_method
export type Enum_ttN_hiresfixScale_rescale = "by percentage" | "to Width/Height" | "to longer side - maintain aspect"
export type Enum_ttN_xyPlot_output_individuals = "False" | "True"
export type Enum_ttN_xyPlot_flip_xy = Enum_ttN_xyPlot_output_individuals
export type Enum_Image_SSAO_$1Ambient_Occlusion$2_enable_specular_masking = Enum_ttN_xyPlot_output_individuals
export type Enum_Image_SSDO_$1Direct_Occlusion$2_colored_occlusion = Enum_ttN_xyPlot_output_individuals
export type Enum_Image_Pixelate_dither = Enum_ttN_xyPlot_output_individuals
export type Enum_Image_Pixelate_reverse_palette = Enum_ttN_xyPlot_output_individuals
export type Enum_Image_Voronoi_Noise_Filter_flat = Enum_ttN_xyPlot_output_individuals
export type Enum_Image_Voronoi_Noise_Filter_RGB_output = Enum_ttN_xyPlot_output_individuals
export type Enum_ttN_xyPlot_x_axis = "---------------------" | "---------------------" | "None" | "loader: ckpt_name" | "loader: clip_skip" | "loader: lora1_clip_strength" | "loader: lora1_model&clip_strength" | "loader: lora1_model_strength" | "loader: lora1_name" | "loader: lora2_clip_strength" | "loader: lora2_model&clip_strength" | "loader: lora2_model_strength" | "loader: lora2_name" | "loader: lora3_clip_strength" | "loader: lora3_model&clip_strength" | "loader: lora3_model_strength" | "loader: lora3_name" | "loader: negative" | "loader: negative_token_normalization" | "loader: negative_weight_interpretation" | "loader: positive" | "loader: positive_token_normalization" | "loader: positive_weight_interpretation" | "loader: vae_name" | "sampler: cfg" | "sampler: denoise" | "sampler: lora_clip_strength" | "sampler: lora_model&clip_strength" | "sampler: lora_model_strength" | "sampler: lora_name" | "sampler: sampler_name" | "sampler: scheduler" | "sampler: seed" | "sampler: steps"
export type Enum_ttN_xyPlot_y_axis = Enum_ttN_xyPlot_x_axis
export type Enum_ttN_pipeKSampler_upscale_method = "None" | "area" | "bicubic" | "bilinear" | "bislerp" | "lanczos" | "nearest-exact"
export type Enum_ttN_pipeKSamplerAdvanced_upscale_method = Enum_ttN_pipeKSampler_upscale_method
export type Enum_ttN_pipeKSamplerSDXL_upscale_method = Enum_ttN_pipeKSampler_upscale_method
export type Enum_ttN_pipeKSampler_sampler_state = "Hold" | "Sample"
export type Enum_ttN_pipeKSamplerAdvanced_sampler_state = Enum_ttN_pipeKSampler_sampler_state
export type Enum_ttN_pipeKSamplerSDXL_sampler_state = Enum_ttN_pipeKSampler_sampler_state
export type Enum_DF$_String$_Replace_Mode = "RegEx" | "Strict"
export type Enum_DF$_Search$_In$_Text_Mode = Enum_DF$_String$_Replace_Mode
export type Enum_DF$_Sinus_type_ = "DEG" | "RAD"
export type Enum_DF$_Cosines_type_ = Enum_DF$_Sinus_type_
export type Enum_DF$_Tangent_type_ = Enum_DF$_Sinus_type_
export type Enum_DF$_Logic$_node_Operation = "A < B" | "A = B" | "A > B" | "A AND B" | "A OR B" | "A XOR B"
export type Enum_DF$_Latent$_Scale$_to$_side_side = "Height" | "Longest" | "Shortest" | "Width"
export type Enum_DF$_Image$_scale$_to$_side_side = Enum_DF$_Latent$_Scale$_to$_side_side
export type Enum_LatentByRatio_model = "SD1.5 512" | "SD2.1 768" | "SDXL 1024"
export type Enum_LatentByRatio_ratio = "16:9" | "1:1" | "1:2" | "1:4" | "21:9" | "2:1" | "2:3" | "3:2" | "3:4" | "4:1" | "4:3" | "9:16" | "9:21"
export type Enum_TAESDLoader_file_name = "taesd_decoder.pth" | "taesd_encoder.pth" | "taesdxl_decoder.pth" | "taesdxl_encoder.pth"
export type Enum_Mask_Morphology_op = "close" | "dilate" | "erode" | "open"
export type Enum_Combine_Masks_op = "add" | "difference" | "greater" | "greater_or_equal" | "intersection (min)" | "multiply" | "multiply_alpha" | "union (max)"
export type Enum_Unary_Mask_Op_op = "abs" | "average" | "clamp" | "invert" | "round"
export type Enum_Unary_Image_Op_op = Enum_Unary_Mask_Op_op
export type Enum_Image_To_Mask_method = "alpha" | "intensity"
export type Enum_Mask_To_Region_constraints = "ignore" | "keep_ratio" | "keep_ratio_divisible" | "multiple_of"
export type Enum_Mask_To_Region_batch_behavior = "match_ratio" | "match_size"
export type Enum_Paste_By_Mask_resize_behavior = "keep_ratio_fill" | "keep_ratio_fit" | "resize" | "source_size" | "source_size_unmasked"
export type Enum_Change_Channel_Count_kind = "RGB" | "RGBA" | "mask"
export type Enum_Create_Rect_Mask_mode = "percent" | "pixels"
export type Enum_Create_Rect_Mask_origin = "bottomleft" | "bottomright" | "topleft" | "topright"
export type Enum_Convert_Color_Space_in_space = "HSL" | "HSV" | "RGB"
export type Enum_Convert_Color_Space_out_space = Enum_Convert_Color_Space_in_space
export type Enum_Image_Inset_Crop_$1rgthree$2_measurement = "Percentage" | "Pixels"
export type Enum_Power_Prompt_$1rgthree$2_insert_lora = "CHOOSE" | "DISABLE LORAS" | "LogoRedmondV2-Logo-LogoRedmAF" | "SpreadAssMS" | "ip-adapter-faceid-plusv2_sd15_lora" | "ip-adapter-faceid_sd15_lora" | "ipadapter\\ip-adapter-faceid-plusv2_sd15_lora" | "ipadapter\\ip-adapter-faceid_sd15_lora" | "lcm\\SD1.5\\pytorch_lora_weights" | "lcm\\pytorch_lora_weights" | "pixel-art-xl-v1.1" | "pixelgirl" | "samsung_line_art" | "sd15\\Character Design" | "sd15\\Isometric Cutaway" | "sd15\\Stained Glass Portrait" | "sd15\\animemix_16" | "sd15\\animemix_v3_offset" | "sd15\\chars\\dark_magician_girl" | "sd15\\chars\\yorha_noDOT_2_type_b" | "sd15\\colors\\LowRa" | "sd15\\colors\\theovercomer8sContrastFix_sd15" | "sd15\\colors\\theovercomer8sContrastFix_sd21768" | "sd15\\styles\\ConstructionyardAIV3" | "sd15\\styles\\StonepunkAI-000011" | "sd15\\styles\\ToonYou_Style" | "sd15\\styles\\baroqueAI" | "sd15\\styles\\pixel_f2" | "sd15\\test\\Moxin_10" | "sd15\\test\\animeLineartMangaLike_v30MangaLike" | "sd15\\utils\\charTurnBetaLora" | "sleepygimp" | "xl\\Flat style-000014" | "xl\\moebzxl" | "xl\\pxll" | "xl\\sdxl-baton-v02-e93" | "xl\\watson_lora_v2_128" | "z-arthur\\AmateurPornStyle-v1"
export type Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_lora = Enum_Power_Prompt_$1rgthree$2_insert_lora
export type Enum_Power_Prompt_$1rgthree$2_insert_embedding = "CHOOSE" | "EasyNegative" | "bad-artist" | "bad-artist-anime" | "bad_prompt_version2" | "badquality" | "charturnerv2" | "ng_deepnegative_v1_75t" | "realisticvision-negative-embedding"
export type Enum_Power_Prompt_$7_Simple_$1rgthree$2_insert_embedding = Enum_Power_Prompt_$1rgthree$2_insert_embedding
export type Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_embedding = Enum_Power_Prompt_$1rgthree$2_insert_embedding
export type Enum_SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_insert_embedding = Enum_Power_Prompt_$1rgthree$2_insert_embedding
export type Enum_Power_Prompt_$1rgthree$2_insert_saved = "CHOOSE"
export type Enum_Power_Prompt_$7_Simple_$1rgthree$2_insert_saved = Enum_Power_Prompt_$1rgthree$2_insert_saved
export type Enum_SDXL_Power_Prompt_$7_Positive_$1rgthree$2_insert_saved = Enum_Power_Prompt_$1rgthree$2_insert_saved
export type Enum_SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_insert_saved = Enum_Power_Prompt_$1rgthree$2_insert_saved
export type Enum_SDXL_Empty_Latent_Image_$1rgthree$2_dimensions = " 640 x 1536  (portrait)" | " 768 x 1344  (portrait)" | " 832 x 1216  (portrait)" | " 896 x 1152  (portrait)" | "1024 x 1024  (square)" | "1152 x 896   (landscape)" | "1216 x 832   (landscape)" | "1344 x 768   (landscape)" | "1536 x 640   (landscape)"
export type Enum_PerturbedAttention_unet_block = "input" | "middle" | "output"
export type Enum_SmoothedEnergyGuidanceAdvanced_unet_block = Enum_PerturbedAttention_unet_block
export type Enum_TRTAttachPag_unet_block = Enum_PerturbedAttention_unet_block
export type Enum_PerturbedAttention_rescale_mode = "full" | "partial" | "snf"
export type Enum_SmoothedEnergyGuidanceAdvanced_rescale_mode = Enum_PerturbedAttention_rescale_mode
export type Enum_TRTPerturbedAttention_rescale_mode = "full" | "partial"
export type Enum_BLIP_Model_Loader_device = "cpu" | "cuda"
export type Enum_Blend_Latents_operation = "add" | "difference" | "divide" | "exclusion" | "hard_light" | "linear_dodge" | "multiply" | "overlay" | "random" | "screen" | "soft_light" | "subtract"
export type Enum_CLIPTextEncode_$1NSP$2_mode = "Noodle Soup Prompts" | "Wildcards"
export type Enum_Text_Parse_Noodle_Soup_Prompts_mode = Enum_CLIPTextEncode_$1NSP$2_mode
export type Enum_CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_mode = Enum_CLIPTextEncode_$1NSP$2_mode
export type Enum_Constant_Number_number_type = "bool" | "float" | "integer"
export type Enum_Random_Number_number_type = Enum_Constant_Number_number_type
export type Enum_Create_Morph_Image_filetype = "APNG" | "GIF"
export type Enum_Create_Morph_Image_from_Path_filetype = Enum_Create_Morph_Image_filetype
export type Enum_Create_Video_from_Path_codec = "AVC1" | "FFV1" | "H264" | "MP4V"
export type Enum_Write_to_Video_codec = Enum_Create_Video_from_Path_codec
export type Enum_Export_API_save_prompt_api = "true" | "true"
export type Enum_Image_Analyze_mode = "Black White Levels" | "RGB Levels"
export type Enum_Image_Blending_Mode_mode = "add" | "color" | "color_burn" | "color_dodge" | "darken" | "difference" | "exclusion" | "hard_light" | "hue" | "lighten" | "multiply" | "overlay" | "screen" | "soft_light"
export type Enum_Image_Color_Palette_mode = "Chart" | "back_to_back"
export type Enum_Image_Crop_Face_cascade_xml = "haarcascade_eye.xml" | "haarcascade_frontalface_alt.xml" | "haarcascade_frontalface_alt2.xml" | "haarcascade_frontalface_alt_tree.xml" | "haarcascade_frontalface_default.xml" | "haarcascade_profileface.xml" | "haarcascade_upperbody.xml" | "lbpcascade_animeface.xml"
export type Enum_Image_Pixelate_init_mode = "k-means++" | "none" | "random"
export type Enum_Image_Pixelate_dither_mode = "FloydSteinberg" | "Ordered"
export type Enum_Image_Pixelate_color_palette_mode = "Brightness" | "BrightnessAndTonal" | "Linear" | "Tonal"
export type Enum_Image_Power_Noise_noise_type = "blue" | "green" | "grey" | "mix" | "pink" | "white"
export type Enum_Image_Edge_Detection_Filter_mode = "laplacian" | "normal"
export type Enum_Image_History_Loader_image = "...\\input\\example.png" | "...\\input\\poker-heart.png" | "...\\input\\poker-heart.png" | "...\\outputs\\ComfyUI_13090_.png"
export type Enum_Image_Monitor_Effects_Filter_mode = "Digital Distortion" | "Signal Distortion" | "TV Distortion"
export type Enum_Image_Rembg_$1Remove_Background$2_background_color = "black" | "chroma blue" | "chroma green" | "magenta" | "none" | "white"
export type Enum_Image_Remove_Background_$1Alpha$2_mode = "background" | "foreground"
export type Enum_Image_Rotate_mode = "internal" | "transpose"
export type Enum_Image_Rotate_sampler = "bicubic" | "bilinear" | "nearest"
export type Enum_Image_Send_HTTP_method_type = "patch" | "post" | "put"
export type Enum_Image_Save_extension = "bmp" | "gif" | "jpeg" | "jpg" | "png" | "tiff" | "webp"
export type Enum_Image_Save_overwrite_mode = "false" | "prefix_as_filename"
export type Enum_Image_Select_Channel_channel = "blue" | "green" | "red"
export type Enum_Image_Stitch_stitch = "bottom" | "left" | "right" | "top"
export type Enum_Image_Style_Filter_style = "1977" | "aden" | "brannan" | "brooklyn" | "clarendon" | "earlybird" | "fairy tale" | "gingham" | "hudson" | "inkwell" | "kelvin" | "lark" | "lofi" | "maven" | "mayfair" | "moon" | "nashville" | "perpetua" | "reyes" | "rise" | "slumber" | "stinson" | "toaster" | "valencia" | "walden" | "willow" | "xpro2"
export type Enum_Image_fDOF_Filter_mode = "box" | "gaussian" | "mock"
export type Enum_Image_to_Noise_output_mode = "batch" | "list"
export type Enum_KSampler_Cycle_latent_upscale = "area" | "bicubic" | "bilinear" | "bislerp" | "disable" | "nearest-exact"
export type Enum_KSampler_Cycle_pos_add_mode = "decrement" | "increment"
export type Enum_KSampler_Cycle_neg_add_mode = Enum_KSampler_Cycle_pos_add_mode
export type Enum_KSampler_Cycle_steps_control = Enum_KSampler_Cycle_pos_add_mode
export type Enum_Latent_Upscale_by_Factor_$1WAS$2_mode = "area" | "bicubic" | "bilinear" | "nearest"
export type Enum_Load_Image_Batch_mode = "incremental_image" | "random" | "single_image"
export type Enum_Mask_Crop_Region_region_type = "dominant" | "minority"
export type Enum_MiDaS_Model_Loader_midas_model = "DPT_Hybrid" | "DPT_Large"
export type Enum_MiDaS_Depth_Approximation_midas_type = Enum_MiDaS_Model_Loader_midas_model
export type Enum_MiDaS_Mask_Image_midas_model = "DPT_Hybrid" | "DPT_Large" | "DPT_Small"
export type Enum_MiDaS_Mask_Image_remove = "background" | "foregroud"
export type Enum_Number_Counter_number_type = "float" | "integer"
export type Enum_Number_Counter_mode = "decrement" | "decrement_to_stop" | "increment" | "increment_to_stop"
export type Enum_Number_Operation_operation = "addition" | "division" | "does not equal" | "equals" | "exponentiation" | "floor division" | "greater-than" | "greater-than or equals" | "less-than" | "less-than or equals" | "modulus" | "multiplication" | "subtraction"
export type Enum_Number_Input_Condition_comparison = "and" | "divisible by" | "does not equal" | "equals" | "factor of" | "greater-than" | "greater-than or equals" | "if A even" | "if A odd" | "if A prime" | "less-than" | "less-than or equals" | "or"
export type Enum_Prompt_Styles_Selector_style = "None"
export type Enum_Prompt_Multiple_Styles_Selector_style1 = Enum_Prompt_Styles_Selector_style
export type Enum_Prompt_Multiple_Styles_Selector_style2 = Enum_Prompt_Styles_Selector_style
export type Enum_Prompt_Multiple_Styles_Selector_style3 = Enum_Prompt_Styles_Selector_style
export type Enum_Prompt_Multiple_Styles_Selector_style4 = Enum_Prompt_Styles_Selector_style
export type Enum_BLIP_Analyze_Image_mode = "caption" | "interrogate"
export type Enum_SAM_Model_Loader_model_size = "ViT-B" | "ViT-H" | "ViT-L"
export type Enum_Text_Compare_mode = "difference" | "similarity"
export type Enum_Text_File_History_Loader_file = "...\\wildcardTest\\HairColor.txt"
export type Enum_Text_Load_Line_From_File_mode = "automatic" | "index"
export type Enum_Text_String_Truncate_truncate_by = "characters" | "words"
export type Enum_Text_String_Truncate_truncate_from = "beginning" | "end"
export type Enum_Video_Dump_Frames_extension = "gif" | "jpg" | "png" | "tiff"
export type Enum_ConditioningBlend_blending_mode = "add" | "bislerp" | "cosine interp" | "cuberp" | "difference" | "exclusion" | "hslerp" | "inject" | "lerp" | "random" | "slerp" | "subtract"
export type Enum_CLIPTextEncodeSequence2_cond_keyframes_type = "half_sinus" | "half_sinus_inverted" | "linear" | "sinus" | "sinus_inverted"
export type Enum_KSamplerSeq_seed_mode_seq = "decrement" | "fixed" | "increment" | "random"
export type Enum_KSamplerSeq2_seed_mode_seq = Enum_KSamplerSeq_seed_mode_seq
export type Enum_KSamplerSeq_latent_interpolation_mode = "Blend" | "Cosine Interp" | "Slerp"
export type Enum_KSamplerSeq2_latent_interpolation_mode = Enum_KSamplerSeq_latent_interpolation_mode
export type Enum_KSamplerSeq2_seed_keying_mode = "modulo" | "sine"
export type Enum_CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_conditioner = "SD1.5" | "SDXL"
export type Enum_Empty_Latent_by_Pixels_$1WLSH$2_aspect = "16:10" | "16:9" | "19:9" | "1:1" | "21:9" | "2:1" | "3:1" | "3:2" | "43:18" | "4:1" | "4:3" | "5:4"
export type Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction = "landscape" | "portrait"
export type Enum_Empty_Latent_by_Ratio_$1WLSH$2_direction = Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
export type Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_direction = Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
export type Enum_SDXL_Quick_Image_Scale_$1WLSH$2_direction = Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
export type Enum_Resolutions_by_Ratio_$1WLSH$2_direction = Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
export type Enum_SDXL_Resolutions_$1WLSH$2_direction = Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
export type Enum_Empty_Latent_by_Ratio_$1WLSH$2_aspect = "16:10" | "16:9" | "19:9" | "1:1" | "21:9" | "2:1" | "3:1" | "3:2" | "43:18" | "4:1" | "4:3" | "5:4" | "6:5"
export type Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution = "1024x1024|1:1" | "1152x896|9:7" | "1216x832|19:13" | "1344x768|7:4" | "1536x640|12:5"
export type Enum_SDXL_Quick_Image_Scale_$1WLSH$2_resolution = Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution
export type Enum_SDXL_Resolutions_$1WLSH$2_resolution = Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution
export type Enum_Resolutions_by_Ratio_$1WLSH$2_aspect = "16:10" | "16:9" | "1:1" | "21:9" | "2:1" | "3:1" | "3:2" | "43:18" | "4:1" | "4:3" | "5:4" | "6:5"
export type Enum_Time_String_$1WLSH$2_style = "%Y%m%d" | "%Y%m%d%H%M" | "%Y%m%d%H%M%S" | "%Y-%m-%d" | "%Y-%m-%d-%H%M" | "%Y-%m-%d-%H%M%S"
export type Enum_Simple_String_Combine_$1WLSH$2_placement = "after" | "before"
export type Enum_Simple_String_Combine_$1WLSH$2_separator = "comma" | "newline" | "none" | "space"
export type Enum_Image_Save_with_Prompt_$1WLSH$2_extension = "gif" | "jpeg" | "png" | "tiff"
export type Enum_Image_Save_with_Prompt$3Info_$1WLSH$2_extension = Enum_Image_Save_with_Prompt_$1WLSH$2_extension
export type Enum_Image_Save_with_Prompt_File_$1WLSH$2_extension = Enum_Image_Save_with_Prompt_$1WLSH$2_extension
export type Enum_Image_Save_with_Prompt$3Info_File_$1WLSH$2_extension = Enum_Image_Save_with_Prompt_$1WLSH$2_extension

// 7. INTERFACES --------------------------
export interface HasSingle_SEG_ELT_control_net_wrapper { _SEG_ELT_control_net_wrapper: ComfyNodeOutput<'SEG_ELT_control_net_wrapper'> } // prettier-ignore
export interface HasSingle_ATTENTION_COUPLE_REGION { _ATTENTION_COUPLE_REGION: ComfyNodeOutput<'ATTENTION_COUPLE_REGION'> } // prettier-ignore
export interface HasSingle_TRANSFORMERS_CLASSIFIER { _TRANSFORMERS_CLASSIFIER: ComfyNodeOutput<'TRANSFORMERS_CLASSIFIER'> } // prettier-ignore
export interface HasSingle_OPENAI_CHAT_COMPLETION { _OPENAI_CHAT_COMPLETION: ComfyNodeOutput<'OPENAI_CHAT_COMPLETION'> } // prettier-ignore
export interface HasSingle_IMAGE_INJECT_OPTIONS { _IMAGE_INJECT_OPTIONS: ComfyNodeOutput<'IMAGE_INJECT_OPTIONS'> } // prettier-ignore
export interface HasSingle_NORMALIZED_AMPLITUDE { _NORMALIZED_AMPLITUDE: ComfyNodeOutput<'NORMALIZED_AMPLITUDE'> } // prettier-ignore
export interface HasSingle_OPENAI_CHAT_MESSAGES { _OPENAI_CHAT_MESSAGES: ComfyNodeOutput<'OPENAI_CHAT_MESSAGES'> } // prettier-ignore
export interface HasSingle_CONTEXTREF_KEYFRAME { _CONTEXTREF_KEYFRAME: ComfyNodeOutput<'CONTEXTREF_KEYFRAME'> } // prettier-ignore
export interface HasSingle_NAIVEREUSE_KEYFRAME { _NAIVEREUSE_KEYFRAME: ComfyNodeOutput<'NAIVEREUSE_KEYFRAME'> } // prettier-ignore
export interface HasSingle_LORA_HOOK_KEYFRAMES { _LORA_HOOK_KEYFRAMES: ComfyNodeOutput<'LORA_HOOK_KEYFRAMES'> } // prettier-ignore
export interface HasSingle_SEG_ELT_crop_region { _SEG_ELT_crop_region: ComfyNodeOutput<'SEG_ELT_crop_region'> } // prettier-ignore
export interface HasSingle_CONTROL_NET_WEIGHTS { _CONTROL_NET_WEIGHTS: ComfyNodeOutput<'CONTROL_NET_WEIGHTS'> } // prettier-ignore
export interface HasSingle_CLIP_VISION_OUTPUT { _CLIP_VISION_OUTPUT: ComfyNodeOutput<'CLIP_VISION_OUTPUT'> } // prettier-ignore
export interface HasSingle_REGIONAL_IPADAPTER { _REGIONAL_IPADAPTER: ComfyNodeOutput<'REGIONAL_IPADAPTER'> } // prettier-ignore
export interface HasSingle_SAM2INFERENCESTATE { _SAM2INFERENCESTATE: ComfyNodeOutput<'SAM2INFERENCESTATE'> } // prettier-ignore
export interface HasSingle_SIMPLE_PROMPT_LIST { _SIMPLE_PROMPT_LIST: ComfyNodeOutput<'SIMPLE_PROMPT_LIST'> } // prettier-ignore
export interface HasSingle_BOOLEAN { _BOOLEAN: boolean | ComfyNodeOutput<'BOOLEAN'> } // prettier-ignore
export interface HasSingle_CONTROL_NET_STACK { _CONTROL_NET_STACK: ComfyNodeOutput<'CONTROL_NET_STACK'> } // prettier-ignore
export interface HasSingle_TIMESTEP_KEYFRAME { _TIMESTEP_KEYFRAME: ComfyNodeOutput<'TIMESTEP_KEYFRAME'> } // prettier-ignore
export interface HasSingle_SEGS_PREPROCESSOR { _SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR'> } // prettier-ignore
export interface HasSingle_KSAMPLER_ADVANCED { _KSAMPLER_ADVANCED: ComfyNodeOutput<'KSAMPLER_ADVANCED'> } // prettier-ignore
export interface HasSingle_CN_WEIGHTS_EXTRAS { _CN_WEIGHTS_EXTRAS: ComfyNodeOutput<'CN_WEIGHTS_EXTRAS'> } // prettier-ignore
export interface HasSingle_IMAGE_LIST_SIMPLE { _IMAGE_LIST_SIMPLE: ComfyNodeOutput<'IMAGE_LIST_SIMPLE'> } // prettier-ignore
export interface HasSingle_LATENT_OPERATION { _LATENT_OPERATION: ComfyNodeOutput<'LATENT_OPERATION'> } // prettier-ignore
export interface HasSingle_MOTION_MODEL_ADE { _MOTION_MODEL_ADE: ComfyNodeOutput<'MOTION_MODEL_ADE'> } // prettier-ignore
export interface HasSingle_CAMERACTRL_POSES { _CAMERACTRL_POSES: ComfyNodeOutput<'CAMERACTRL_POSES'> } // prettier-ignore
export interface HasSingle_REGIONAL_PROMPTS { _REGIONAL_PROMPTS: ComfyNodeOutput<'REGIONAL_PROMPTS'> } // prettier-ignore
export interface HasSingle_TEXT_LIST_SIMPLE { _TEXT_LIST_SIMPLE: ComfyNodeOutput<'TEXT_LIST_SIMPLE'> } // prettier-ignore
export interface HasSingle_IPADAPTER_PARAMS { _IPADAPTER_PARAMS: ComfyNodeOutput<'IPADAPTER_PARAMS'> } // prettier-ignore
export interface HasSingle_WEIGHTS_STRATEGY { _WEIGHTS_STRATEGY: ComfyNodeOutput<'WEIGHTS_STRATEGY'> } // prettier-ignore
export interface HasSingle_CONDITIONING_SEQ { _CONDITIONING_SEQ: ComfyNodeOutput<'CONDITIONING_SEQ'> } // prettier-ignore
export interface HasSingle_STRING { _STRING: string | ComfyNodeOutput<'STRING'> } // prettier-ignore
export interface HasSingle_SAMPLE_SETTINGS { _SAMPLE_SETTINGS: ComfyNodeOutput<'SAMPLE_SETTINGS'> } // prettier-ignore
export interface HasSingle_CONTEXT_OPTIONS { _CONTEXT_OPTIONS: ComfyNodeOutput<'CONTEXT_OPTIONS'> } // prettier-ignore
export interface HasSingle_CONTEXTREF_MODE { _CONTEXTREF_MODE: ComfyNodeOutput<'CONTEXTREF_MODE'> } // prettier-ignore
export interface HasSingle_CONTEXTREF_TUNE { _CONTEXTREF_TUNE: ComfyNodeOutput<'CONTEXTREF_TUNE'> } // prettier-ignore
export interface HasSingle_CHECKPOINT_NAME { _CHECKPOINT_NAME: ComfyNodeOutput<'CHECKPOINT_NAME'> } // prettier-ignore
export interface HasSingle_RGTHREE_CONTEXT { _RGTHREE_CONTEXT: ComfyNodeOutput<'RGTHREE_CONTEXT'> } // prettier-ignore
export interface HasSingle_FLOAT { _FLOAT: number | ComfyNodeOutput<'FLOAT'> } // prettier-ignore
export interface HasSingle_ITERATION_OPTS { _ITERATION_OPTS: ComfyNodeOutput<'ITERATION_OPTS'> } // prettier-ignore
export interface HasSingle_SIGMA_SCHEDULE { _SIGMA_SCHEDULE: ComfyNodeOutput<'SIGMA_SCHEDULE'> } // prettier-ignore
export interface HasSingle_CONTEXT_EXTRAS { _CONTEXT_EXTRAS: ComfyNodeOutput<'CONTEXT_EXTRAS'> } // prettier-ignore
export interface HasSingle_TIMESTEPS_COND { _TIMESTEPS_COND: ComfyNodeOutput<'TIMESTEPS_COND'> } // prettier-ignore
export interface HasSingle_VALUES_REPLACE { _VALUES_REPLACE: ComfyNodeOutput<'VALUES_REPLACE'> } // prettier-ignore
export interface HasSingle_SCHEDULER_FUNC { _SCHEDULER_FUNC: ComfyNodeOutput<'SCHEDULER_FUNC'> } // prettier-ignore
export interface HasSingle_IPADAPTER_PIPE { _IPADAPTER_PIPE: ComfyNodeOutput<'IPADAPTER_PIPE'> } // prettier-ignore
export interface HasSingle_SELECTEDBLOCKS { _SELECTEDBLOCKS: ComfyNodeOutput<'SELECTEDBLOCKS'> } // prettier-ignore
export interface HasSingle_SAMPLER_PARAMS { _SAMPLER_PARAMS: ComfyNodeOutput<'SAMPLER_PARAMS'> } // prettier-ignore
export interface HasSingle_PIPE_LINE_SDXL { _PIPE_LINE_SDXL: ComfyNodeOutput<'PIPE_LINE_SDXL'> } // prettier-ignore
export interface HasSingle_SAM_PARAMETERS { _SAM_PARAMETERS: ComfyNodeOutput<'SAM_PARAMETERS'> } // prettier-ignore
export interface HasSingle_UPSCALE_MODEL { _UPSCALE_MODEL: ComfyNodeOutput<'UPSCALE_MODEL'> } // prettier-ignore
export interface HasSingle_WEIGHT_ADJUST { _WEIGHT_ADJUST: ComfyNodeOutput<'WEIGHT_ADJUST'> } // prettier-ignore
export interface HasSingle_UPSCALER_NAME { _UPSCALER_NAME: ComfyNodeOutput<'UPSCALER_NAME'> } // prettier-ignore
export interface HasSingle_SAM_EMBEDDING { _SAM_EMBEDDING: ComfyNodeOutput<'SAM_EMBEDDING'> } // prettier-ignore
export interface HasSingle_DETAILER_PIPE { _DETAILER_PIPE: ComfyNodeOutput<'DETAILER_PIPE'> } // prettier-ignore
export interface HasSingle_BBOX_DETECTOR { _BBOX_DETECTOR: ComfyNodeOutput<'BBOX_DETECTOR'> } // prettier-ignore
export interface HasSingle_SEGM_DETECTOR { _SEGM_DETECTOR: ComfyNodeOutput<'SEGM_DETECTOR'> } // prettier-ignore
export interface HasSingle_DETAILER_HOOK { _DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK'> } // prettier-ignore
export interface HasSingle_UPSCALER_HOOK { _UPSCALER_HOOK: ComfyNodeOutput<'UPSCALER_HOOK'> } // prettier-ignore
export interface HasSingle_INPAINT_PATCH { _INPAINT_PATCH: ComfyNodeOutput<'INPAINT_PATCH'> } // prettier-ignore
export interface HasSingle_INPAINT_MODEL { _INPAINT_MODEL: ComfyNodeOutput<'INPAINT_MODEL'> } // prettier-ignore
export interface HasSingle_ZIPPED_PROMPT { _ZIPPED_PROMPT: ComfyNodeOutput<'ZIPPED_PROMPT'> } // prettier-ignore
export interface HasSingle_MARIGOLDMODEL { _MARIGOLDMODEL: ComfyNodeOutput<'MARIGOLDMODEL'> } // prettier-ignore
export interface HasSingle_AUDIOINPUTMIX { _AUDIOINPUTMIX: ComfyNodeOutput<'AUDIOINPUTMIX'> } // prettier-ignore
export interface HasSingle_TRIPOSR_MODEL { _TRIPOSR_MODEL: ComfyNodeOutput<'TRIPOSR_MODEL'> } // prettier-ignore
export interface HasSingle_VHS_VIDEOINFO { _VHS_VIDEOINFO: ComfyNodeOutput<'VHS_VIDEOINFO'> } // prettier-ignore
export interface HasSingle_UPSCALE_STACK { _UPSCALE_STACK: ComfyNodeOutput<'UPSCALE_STACK'> } // prettier-ignore
export interface HasSingle_POSE_KEYPOINT { _POSE_KEYPOINT: ComfyNodeOutput<'POSE_KEYPOINT'> } // prettier-ignore
export interface HasSingle_REMBG_SESSION { _REMBG_SESSION: ComfyNodeOutput<'REMBG_SESSION'> } // prettier-ignore
export interface HasSingle_CLIPSEG_MODEL { _CLIPSEG_MODEL: ComfyNodeOutput<'CLIPSEG_MODEL'> } // prettier-ignore
export interface HasSingle_INT { _INT: number | ComfyNodeOutput<'INT'> } // prettier-ignore
export interface HasSingle_CONDITIONING { _CONDITIONING: ComfyNodeOutput<'CONDITIONING'> } // prettier-ignore
export interface HasSingle_NOISE_LAYERS { _NOISE_LAYERS: ComfyNodeOutput<'NOISE_LAYERS'> } // prettier-ignore
export interface HasSingle_IMAGE_INJECT { _IMAGE_INJECT: ComfyNodeOutput<'IMAGE_INJECT'> } // prettier-ignore
export interface HasSingle_AD_KEYFRAMES { _AD_KEYFRAMES: ComfyNodeOutput<'AD_KEYFRAMES'> } // prettier-ignore
export interface HasSingle_DEPENDENCIES { _DEPENDENCIES: ComfyNodeOutput<'DEPENDENCIES'> } // prettier-ignore
export interface HasSingle_AV_SAM_MODEL { _AV_SAM_MODEL: ComfyNodeOutput<'AV_SAM_MODEL'> } // prettier-ignore
export interface HasSingle_SEG_ELT_bbox { _SEG_ELT_bbox: ComfyNodeOutput<'SEG_ELT_bbox'> } // prettier-ignore
export interface HasSingle_CLIPSEGMODEL { _CLIPSEGMODEL: ComfyNodeOutput<'CLIPSEGMODEL'> } // prettier-ignore
export interface HasSingle_STEP_LATENTS { _STEP_LATENTS: ComfyNodeOutput<'STEP_LATENTS'> } // prettier-ignore
export interface HasSingle_OPTICAL_FLOW { _OPTICAL_FLOW: ComfyNodeOutput<'OPTICAL_FLOW'> } // prettier-ignore
export interface HasSingle_MASK_MAPPING { _MASK_MAPPING: ComfyNodeOutput<'MASK_MAPPING'> } // prettier-ignore
export interface HasSingle_IMAGE_BOUNDS { _IMAGE_BOUNDS: ComfyNodeOutput<'IMAGE_BOUNDS'> } // prettier-ignore
export interface HasSingle_CLIP_VISION { _CLIP_VISION: ComfyNodeOutput<'CLIP_VISION'> } // prettier-ignore
export interface HasSingle_STYLE_MODEL { _STYLE_MODEL: ComfyNodeOutput<'STYLE_MODEL'> } // prettier-ignore
export interface HasSingle_CONTROL_NET { _CONTROL_NET: ComfyNodeOutput<'CONTROL_NET'> } // prettier-ignore
export interface HasSingle_MOTION_LORA { _MOTION_LORA: ComfyNodeOutput<'MOTION_LORA'> } // prettier-ignore
export interface HasSingle_ADEAUTOSIZE { _ADEAUTOSIZE: ComfyNodeOutput<'ADEAUTOSIZE'> } // prettier-ignore
export interface HasSingle_AD_SETTINGS { _AD_SETTINGS: ComfyNodeOutput<'AD_SETTINGS'> } // prettier-ignore
export interface HasSingle_ISNET_MODEL { _ISNET_MODEL: ComfyNodeOutput<'ISNET_MODEL'> } // prettier-ignore
export interface HasSingle_CROP_REGION { _CROP_REGION: ComfyNodeOutput<'CROP_REGION'> } // prettier-ignore
export interface HasSingle_LLM_MESSAGE { _LLM_MESSAGE: ComfyNodeOutput<'LLM_MESSAGE'> } // prettier-ignore
export interface HasSingle_SEGS_HEADER { _SEGS_HEADER: ComfyNodeOutput<'SEGS_HEADER'> } // prettier-ignore
export interface HasSingle_INSIGHTFACE { _INSIGHTFACE: ComfyNodeOutput<'INSIGHTFACE'> } // prettier-ignore
export interface HasSingle_ACNAUTOSIZE { _ACNAUTOSIZE: ComfyNodeOutput<'ACNAUTOSIZE'> } // prettier-ignore
export interface HasSingle_IMAGEBASE64 { _IMAGEBASE64: ComfyNodeOutput<'IMAGEBASE64'> } // prettier-ignore
export interface HasSingle_SCENE_VIDEO { _SCENE_VIDEO: ComfyNodeOutput<'SCENE_VIDEO'> } // prettier-ignore
export interface HasSingle_AUDIOBASE64 { _AUDIOBASE64: ComfyNodeOutput<'AUDIOBASE64'> } // prettier-ignore
export interface HasSingle_MODEL_STACK { _MODEL_STACK: ComfyNodeOutput<'MODEL_STACK'> } // prettier-ignore
export interface HasSingle_PROMPT_LIST { _PROMPT_LIST: ComfyNodeOutput<'PROMPT_LIST'> } // prettier-ignore
export interface HasSingle_LORA_PARAMS { _LORA_PARAMS: ComfyNodeOutput<'LORA_PARAMS'> } // prettier-ignore
export interface HasSingle_MIDAS_MODEL { _MIDAS_MODEL: ComfyNodeOutput<'MIDAS_MODEL'> } // prettier-ignore
export interface HasSingle_PHOTOMAKER { _PHOTOMAKER: ComfyNodeOutput<'PHOTOMAKER'> } // prettier-ignore
export interface HasSingle_CUSTOM_CFG { _CUSTOM_CFG: ComfyNodeOutput<'CUSTOM_CFG'> } // prettier-ignore
export interface HasSingle_CFG_EXTRAS { _CFG_EXTRAS: ComfyNodeOutput<'CFG_EXTRAS'> } // prettier-ignore
export interface HasSingle_LORA_STACK { _LORA_STACK: ComfyNodeOutput<'LORA_STACK'> } // prettier-ignore
export interface HasSingle_BLIP_MODEL { _BLIP_MODEL: ComfyNodeOutput<'BLIP_MODEL'> } // prettier-ignore
export interface HasSingle_LLM_CONFIG { _LLM_CONFIG: ComfyNodeOutput<'LLM_CONFIG'> } // prettier-ignore
export interface HasSingle_BASIC_PIPE { _BASIC_PIPE: ComfyNodeOutput<'BASIC_PIPE'> } // prettier-ignore
export interface HasSingle_IMAGE_FILE { _IMAGE_FILE: ComfyNodeOutput<'IMAGE_FILE'> } // prettier-ignore
export interface HasSingle_MODEL_LIST { _MODEL_LIST: ComfyNodeOutput<'MODEL_LIST'> } // prettier-ignore
export interface HasSingle_IMAGE_LIST { _IMAGE_LIST: ComfyNodeOutput<'IMAGE_LIST'> } // prettier-ignore
export interface HasSingle_image_LIST { _image_LIST: ComfyNodeOutput<'image_LIST'> } // prettier-ignore
export interface HasSingle_CLIPREGION { _CLIPREGION: ComfyNodeOutput<'CLIPREGION'> } // prettier-ignore
export interface HasSingle_ADV_XYPLOT { _ADV_XYPLOT: ComfyNodeOutput<'ADV_XYPLOT'> } // prettier-ignore
export interface HasSingle_VIEW_OPTS { _VIEW_OPTS: ComfyNodeOutput<'VIEW_OPTS'> } // prettier-ignore
export interface HasSingle_LORA_HOOK { _LORA_HOOK: ComfyNodeOutput<'LORA_HOOK'> } // prettier-ignore
export interface HasSingle_PE_ADJUST { _PE_ADJUST: ComfyNodeOutput<'PE_ADJUST'> } // prettier-ignore
export interface HasSingle_PER_BLOCK { _PER_BLOCK: ComfyNodeOutput<'PER_BLOCK'> } // prettier-ignore
export interface HasSingle_PIA_INPUT { _PIA_INPUT: ComfyNodeOutput<'PIA_INPUT'> } // prettier-ignore
export interface HasSingle_LORA_NAME { _LORA_NAME: ComfyNodeOutput<'LORA_NAME'> } // prettier-ignore
export interface HasSingle_IPADAPTER { _IPADAPTER: ComfyNodeOutput<'IPADAPTER'> } // prettier-ignore
export interface HasSingle_SAM_MODEL { _SAM_MODEL: ComfyNodeOutput<'SAM_MODEL'> } // prettier-ignore
export interface HasSingle_RMBGMODEL { _RMBGMODEL: ComfyNodeOutput<'RMBGMODEL'> } // prettier-ignore
export interface HasSingle_LBW_MODEL { _LBW_MODEL: ComfyNodeOutput<'LBW_MODEL'> } // prettier-ignore
export interface HasSingle_SAM2MODEL { _SAM2MODEL: ComfyNodeOutput<'SAM2MODEL'> } // prettier-ignore
export interface HasSingle_PIPE_LINE { _PIPE_LINE: ComfyNodeOutput<'PIPE_LINE'> } // prettier-ignore
export interface HasSingle_LORA_LIST { _LORA_LIST: ComfyNodeOutput<'LORA_LIST'> } // prettier-ignore
export interface HasSingle_TEXT_LIST { _TEXT_LIST: ComfyNodeOutput<'TEXT_LIST'> } // prettier-ignore
export interface HasSingle_lora_LIST { _lora_LIST: ComfyNodeOutput<'lora_LIST'> } // prettier-ignore
export interface HasSingle_INT$4seed { _INT$4seed: ComfyNodeOutput<'INT$4seed'> } // prettier-ignore
export interface HasSingle_FIZZFRAME { _FIZZFRAME: ComfyNodeOutput<'FIZZFRAME'> } // prettier-ignore
export interface HasSingle_CROP_DATA { _CROP_DATA: ComfyNodeOutput<'CROP_DATA'> } // prettier-ignore
export interface HasSingle_MULTIVAL { _MULTIVAL: ComfyNodeOutput<'MULTIVAL'> } // prettier-ignore
export interface HasSingle_AD_BLOCK { _AD_BLOCK: ComfyNodeOutput<'AD_BLOCK'> } // prettier-ignore
export interface HasSingle_M_MODELS { _M_MODELS: ComfyNodeOutput<'M_MODELS'> } // prettier-ignore
export interface HasSingle_VAE_NAME { _VAE_NAME: ComfyNodeOutput<'VAE_NAME'> } // prettier-ignore
export interface HasSingle_UPSCALER { _UPSCALER: ComfyNodeOutput<'UPSCALER'> } // prettier-ignore
export interface HasSingle_KSAMPLER { _KSAMPLER: ComfyNodeOutput<'KSAMPLER'> } // prettier-ignore
export interface HasSingle_TRACKING { _TRACKING: ComfyNodeOutput<'TRACKING'> } // prettier-ignore
export interface HasSingle_$$7B$$7D { _$$7B$$7D: ComfyNodeOutput<'$$7B$$7D'> } // prettier-ignore
export interface HasSingle_SCHEDULE { _SCHEDULE: ComfyNodeOutput<'SCHEDULE'> } // prettier-ignore
export interface HasSingle_CLIP_SEG { _CLIP_SEG: ComfyNodeOutput<'CLIP_SEG'> } // prettier-ignore
export interface HasSingle_SAMPLER { _SAMPLER: ComfyNodeOutput<'SAMPLER'> } // prettier-ignore
export interface HasSingle_ADEWARN { _ADEWARN: ComfyNodeOutput<'ADEWARN'> } // prettier-ignore
export interface HasSingle_LLM_API { _LLM_API: ComfyNodeOutput<'LLM_API'> } // prettier-ignore
export interface HasSingle_PK_HOOK { _PK_HOOK: ComfyNodeOutput<'PK_HOOK'> } // prettier-ignore
export interface HasSingle_SEG_ELT { _SEG_ELT: ComfyNodeOutput<'SEG_ELT'> } // prettier-ignore
export interface HasSingle_INDEXES { _INDEXES: ComfyNodeOutput<'INDEXES'> } // prettier-ignore
export interface HasSingle_WATCHER { _WATCHER: ComfyNodeOutput<'WATCHER'> } // prettier-ignore
export interface HasSingle_LATENT { _LATENT: ComfyNodeOutput<'LATENT'> } // prettier-ignore
export interface HasSingle_GLIGEN { _GLIGEN: ComfyNodeOutput<'GLIGEN'> } // prettier-ignore
export interface HasSingle_SIGMAS { _SIGMAS: ComfyNodeOutput<'SIGMAS'> } // prettier-ignore
export interface HasSingle_GUIDER { _GUIDER: ComfyNodeOutput<'GUIDER'> } // prettier-ignore
export interface HasSingle_WEBCAM { _WEBCAM: ComfyNodeOutput<'WEBCAM'> } // prettier-ignore
export interface HasSingle_FLOATS { _FLOATS: ComfyNodeOutput<'FLOATS'> } // prettier-ignore
export interface HasSingle_HIDDEN { _HIDDEN: ComfyNodeOutput<'HIDDEN'> } // prettier-ignore
export interface HasSingle_EMBEDS { _EMBEDS: ComfyNodeOutput<'EMBEDS'> } // prettier-ignore
export interface HasSingle_PROMPT { _PROMPT: ComfyNodeOutput<'PROMPT'> } // prettier-ignore
export interface HasSingle_THREED { _THREED: ComfyNodeOutput<'THREED'> } // prettier-ignore
export interface HasSingle_TCOLOR { _TCOLOR: ComfyNodeOutput<'TCOLOR'> } // prettier-ignore
export interface HasSingle_CHEESE { _CHEESE: ComfyNodeOutput<'CHEESE'> } // prettier-ignore
export interface HasSingle_SCENE_ { _SCENE_: ComfyNodeOutput<'SCENE_'> } // prettier-ignore
export interface HasSingle_CLIENT { _CLIENT: ComfyNodeOutput<'CLIENT'> } // prettier-ignore
export interface HasSingle_OPENAI { _OPENAI: ComfyNodeOutput<'OPENAI'> } // prettier-ignore
export interface HasSingle_XYPLOT { _XYPLOT: ComfyNodeOutput<'XYPLOT'> } // prettier-ignore
export interface HasSingle_NUMBER { _NUMBER: ComfyNodeOutput<'NUMBER'> } // prettier-ignore
export interface HasSingle_MODEL { _MODEL: ComfyNodeOutput<'MODEL'> } // prettier-ignore
export interface HasSingle_IMAGE { _IMAGE: ComfyNodeOutput<'IMAGE'> } // prettier-ignore
export interface HasSingle_NOISE { _NOISE: ComfyNodeOutput<'NOISE'> } // prettier-ignore
export interface HasSingle_AUDIO { _AUDIO: ComfyNodeOutput<'AUDIO'> } // prettier-ignore
export interface HasSingle_$Star { _$Star: ComfyNodeOutput<'$Star'> } // prettier-ignore
export interface HasSingle_model { _model: ComfyNodeOutput<'model'> } // prettier-ignore
export interface HasSingle__GRID { __GRID: ComfyNodeOutput<'_GRID'> } // prettier-ignore
export interface HasSingle_LAYER { _LAYER: ComfyNodeOutput<'LAYER'> } // prettier-ignore
export interface HasSingle_SLIDE { _SLIDE: ComfyNodeOutput<'SLIDE'> } // prettier-ignore
export interface HasSingle_CLIP { _CLIP: ComfyNodeOutput<'CLIP'> } // prettier-ignore
export interface HasSingle_MASK { _MASK: ComfyNodeOutput<'MASK'> } // prettier-ignore
export interface HasSingle_INTS { _INTS: ComfyNodeOutput<'INTS'> } // prettier-ignore
export interface HasSingle_PIPE { _PIPE: ComfyNodeOutput<'PIPE'> } // prettier-ignore
export interface HasSingle_JSON { _JSON: ComfyNodeOutput<'JSON'> } // prettier-ignore
export interface HasSingle_SEGS { _SEGS: ComfyNodeOutput<'SEGS'> } // prettier-ignore
export interface HasSingle_BBOX { _BBOX: ComfyNodeOutput<'BBOX'> } // prettier-ignore
export interface HasSingle_RGBA { _RGBA: ComfyNodeOutput<'RGBA'> } // prettier-ignore
export interface HasSingle_EDIT { _EDIT: ComfyNodeOutput<'EDIT'> } // prettier-ignore
export interface HasSingle_SEED { _SEED: ComfyNodeOutput<'SEED'> } // prettier-ignore
export interface HasSingle_MESH { _MESH: ComfyNodeOutput<'MESH'> } // prettier-ignore
export interface HasSingle_DICT { _DICT: ComfyNodeOutput<'DICT'> } // prettier-ignore
export interface HasSingle_LIST { _LIST: ComfyNodeOutput<'LIST'> } // prettier-ignore
export interface HasSingle_INFO { _INFO: ComfyNodeOutput<'INFO'> } // prettier-ignore
export interface HasSingle_VAE { _VAE: ComfyNodeOutput<'VAE'> } // prettier-ignore
export interface HasSingle_GIF { _GIF: ComfyNodeOutput<'GIF'> } // prettier-ignore
export interface HasSingle_KEY { _KEY: ComfyNodeOutput<'KEY'> } // prettier-ignore
export interface HasSingle_SVG { _SVG: ComfyNodeOutput<'SVG'> } // prettier-ignore
export interface HasSingle_int { _int: ComfyNodeOutput<'int'> } // prettier-ignore
export interface HasSingle_STR { _STR: ComfyNodeOutput<'STR'> } // prettier-ignore
export interface HasSingle_BUS { _BUS: ComfyNodeOutput<'BUS'> } // prettier-ignore
export interface HasSingle_XY { _XY: ComfyNodeOutput<'XY'> } // prettier-ignore
export interface HasSingle_Enum_CheckpointLoaderSimple_ckpt_name { _Enum_CheckpointLoaderSimple_ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name } // prettier-ignore
export interface HasSingle_Enum_AV$_FaceDetailer_scheduler { _Enum_AV$_FaceDetailer_scheduler: Enum_AV$_FaceDetailer_scheduler } // prettier-ignore
export interface HasSingle_Enum_AIO$_Preprocessor_preprocessor { _Enum_AIO$_Preprocessor_preprocessor: Enum_AIO$_Preprocessor_preprocessor } // prettier-ignore
export interface HasSingle_Enum_KSampler_sampler_name { _Enum_KSampler_sampler_name: Enum_KSampler_sampler_name } // prettier-ignore
export interface HasSingle_Enum_KSampler_scheduler { _Enum_KSampler_scheduler: Enum_KSampler_scheduler } // prettier-ignore
export interface HasSingle_Enum_KSamplerAdvanced_add_noise { _Enum_KSamplerAdvanced_add_noise: Enum_KSamplerAdvanced_add_noise } // prettier-ignore
export interface HasSingle_Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos { _Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos } // prettier-ignore
export interface HasSingle_Enum_ImageResize$6_interpolation { _Enum_ImageResize$6_interpolation: Enum_ImageResize$6_interpolation } // prettier-ignore
export interface HasSingle_Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype { _Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype: Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype } // prettier-ignore
export interface HasSingle_Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip { _Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip } // prettier-ignore
export interface HasSingle_Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type { _Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type: Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type } // prettier-ignore

// 8. NODES -------------------------------
// KSampler [sampling]
export interface KSampler extends HasSingle_LATENT, ComfyNode<KSampler_input, KSampler_output> {
    nameInComfy: "KSampler"
}
export interface KSampler_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface KSampler_input {
    /** */
    model: _MODEL
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    /** */
    sampler_name: Enum_KSampler_sampler_name
    /** */
    scheduler: Enum_KSampler_scheduler
    /** */
    positive: _CONDITIONING
    /** */
    negative: _CONDITIONING
    /** */
    latent_image: _LATENT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// CheckpointLoaderSimple [loaders]
export interface CheckpointLoaderSimple extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<CheckpointLoaderSimple_input, CheckpointLoaderSimple_output> {
    nameInComfy: "CheckpointLoaderSimple"
}
export interface CheckpointLoaderSimple_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
}
export interface CheckpointLoaderSimple_input {
    /** */
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
}

// CLIPTextEncode [conditioning]
export interface CLIPTextEncode extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncode_input, CLIPTextEncode_output> {
    nameInComfy: "CLIPTextEncode"
}
export interface CLIPTextEncode_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPTextEncode_input {
    /** */
    text: _STRING
    /** */
    clip: _CLIP
}

// CLIPSetLastLayer [conditioning]
export interface CLIPSetLastLayer extends HasSingle_CLIP, ComfyNode<CLIPSetLastLayer_input, CLIPSetLastLayer_output> {
    nameInComfy: "CLIPSetLastLayer"
}
export interface CLIPSetLastLayer_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface CLIPSetLastLayer_input {
    clip: _CLIP
    /** default=-1 min=-1 max=-1 step=1 */
    stop_at_clip_layer?: _INT
}

// VAEDecode [latent]
export interface VAEDecode extends HasSingle_IMAGE, ComfyNode<VAEDecode_input, VAEDecode_output> {
    nameInComfy: "VAEDecode"
}
export interface VAEDecode_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface VAEDecode_input {
    /** */
    samples: _LATENT
    /** */
    vae: _VAE
}

// VAEEncode [latent]
export interface VAEEncode extends HasSingle_LATENT, ComfyNode<VAEEncode_input, VAEEncode_output> {
    nameInComfy: "VAEEncode"
}
export interface VAEEncode_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface VAEEncode_input {
    pixels: _IMAGE
    vae: _VAE
}

// VAEEncodeForInpaint [latent_inpaint]
export interface VAEEncodeForInpaint extends HasSingle_LATENT, ComfyNode<VAEEncodeForInpaint_input, VAEEncodeForInpaint_output> {
    nameInComfy: "VAEEncodeForInpaint"
}
export interface VAEEncodeForInpaint_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface VAEEncodeForInpaint_input {
    pixels: _IMAGE
    vae: _VAE
    mask: _MASK
    /** default=6 min=64 max=64 step=1 */
    grow_mask_by?: _INT
}

// VAELoader [loaders]
export interface VAELoader extends HasSingle_VAE, ComfyNode<VAELoader_input, VAELoader_output> {
    nameInComfy: "VAELoader"
}
export interface VAELoader_output {
    VAE: ComfyNodeOutput<'VAE', 0>,
}
export interface VAELoader_input {
    vae_name: Enum_VAELoader_vae_name
}

// EmptyLatentImage [latent]
export interface EmptyLatentImage extends HasSingle_LATENT, ComfyNode<EmptyLatentImage_input, EmptyLatentImage_output> {
    nameInComfy: "EmptyLatentImage"
}
export interface EmptyLatentImage_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface EmptyLatentImage_input {
    /** default=512 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// LatentUpscale [latent]
export interface LatentUpscale extends HasSingle_LATENT, ComfyNode<LatentUpscale_input, LatentUpscale_output> {
    nameInComfy: "LatentUpscale"
}
export interface LatentUpscale_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentUpscale_input {
    samples: _LATENT
    upscale_method: Enum_LatentUpscale_upscale_method
    /** default=512 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    height?: _INT
    crop: Enum_LatentUpscale_crop
}

// LatentUpscaleBy [latent]
export interface LatentUpscaleBy extends HasSingle_LATENT, ComfyNode<LatentUpscaleBy_input, LatentUpscaleBy_output> {
    nameInComfy: "LatentUpscaleBy"
}
export interface LatentUpscaleBy_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentUpscaleBy_input {
    samples: _LATENT
    upscale_method: Enum_LatentUpscale_upscale_method
    /** default=1.5 min=8 max=8 step=0.01 */
    scale_by?: _FLOAT
}

// LatentFromBatch [latent_batch]
export interface LatentFromBatch extends HasSingle_LATENT, ComfyNode<LatentFromBatch_input, LatentFromBatch_output> {
    nameInComfy: "LatentFromBatch"
}
export interface LatentFromBatch_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentFromBatch_input {
    samples: _LATENT
    /** default=0 min=63 max=63 */
    batch_index?: _INT
    /** default=1 min=64 max=64 */
    length?: _INT
}

// RepeatLatentBatch [latent_batch]
export interface RepeatLatentBatch extends HasSingle_LATENT, ComfyNode<RepeatLatentBatch_input, RepeatLatentBatch_output> {
    nameInComfy: "RepeatLatentBatch"
}
export interface RepeatLatentBatch_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface RepeatLatentBatch_input {
    samples: _LATENT
    /** default=1 min=64 max=64 */
    amount?: _INT
}

// SaveImage [image]
export interface SaveImage extends ComfyNode<SaveImage_input, SaveImage_output> {
    nameInComfy: "SaveImage"
}
export interface SaveImage_output {
}
export interface SaveImage_input {
    /** */
    images: _IMAGE
    /** default="ComfyUI" */
    filename_prefix?: _STRING
}

// PreviewImage [image]
export interface PreviewImage extends ComfyNode<PreviewImage_input, PreviewImage_output> {
    nameInComfy: "PreviewImage"
}
export interface PreviewImage_output {
}
export interface PreviewImage_input {
    images: _IMAGE
}

// LoadImage [image]
export interface LoadImage extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<LoadImage_input, LoadImage_output> {
    nameInComfy: "LoadImage"
}
export interface LoadImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface LoadImage_input {
    /** */
    image: Enum_LoadImage_image
}

// LoadImageMask [mask]
export interface LoadImageMask extends HasSingle_MASK, ComfyNode<LoadImageMask_input, LoadImageMask_output> {
    nameInComfy: "LoadImageMask"
}
export interface LoadImageMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface LoadImageMask_input {
    /** */
    image: Enum_LoadImage_image
    channel: Enum_LoadImageMask_channel
}

// ImageScale [image_upscaling]
export interface ImageScale extends HasSingle_IMAGE, ComfyNode<ImageScale_input, ImageScale_output> {
    nameInComfy: "ImageScale"
}
export interface ImageScale_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageScale_input {
    image: _IMAGE
    upscale_method: Enum_ImageScale_upscale_method
    /** default=512 min=16384 max=16384 step=1 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=1 */
    height?: _INT
    crop: Enum_LatentUpscale_crop
}

// ImageScaleBy [image_upscaling]
export interface ImageScaleBy extends HasSingle_IMAGE, ComfyNode<ImageScaleBy_input, ImageScaleBy_output> {
    nameInComfy: "ImageScaleBy"
}
export interface ImageScaleBy_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageScaleBy_input {
    image: _IMAGE
    upscale_method: Enum_ImageScale_upscale_method
    /** default=1 min=8 max=8 step=0.01 */
    scale_by?: _FLOAT
}

// ImageInvert [image]
export interface ImageInvert extends HasSingle_IMAGE, ComfyNode<ImageInvert_input, ImageInvert_output> {
    nameInComfy: "ImageInvert"
}
export interface ImageInvert_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageInvert_input {
    image: _IMAGE
}

// ImageBatch [image]
export interface ImageBatch extends HasSingle_IMAGE, ComfyNode<ImageBatch_input, ImageBatch_output> {
    nameInComfy: "ImageBatch"
}
export interface ImageBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatch_input {
    image1: _IMAGE
    image2: _IMAGE
}

// ImagePadForOutpaint [image]
export interface ImagePadForOutpaint extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ImagePadForOutpaint_input, ImagePadForOutpaint_output> {
    nameInComfy: "ImagePadForOutpaint"
}
export interface ImagePadForOutpaint_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface ImagePadForOutpaint_input {
    image: _IMAGE
    /** default=0 min=16384 max=16384 step=8 */
    left?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    top?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    right?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    bottom?: _INT
    /** default=40 min=16384 max=16384 step=1 */
    feathering?: _INT
}

// EmptyImage [image]
export interface EmptyImage extends HasSingle_IMAGE, ComfyNode<EmptyImage_input, EmptyImage_output> {
    nameInComfy: "EmptyImage"
}
export interface EmptyImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface EmptyImage_input {
    /** default=512 min=16384 max=16384 step=1 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=1 */
    height?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
    /** default=0 min=16777215 max=16777215 step=1 */
    color?: _INT
}

// ConditioningAverage [conditioning]
export interface ConditioningAverage extends HasSingle_CONDITIONING, ComfyNode<ConditioningAverage_input, ConditioningAverage_output> {
    nameInComfy: "ConditioningAverage"
}
export interface ConditioningAverage_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningAverage_input {
    conditioning_to: _CONDITIONING
    conditioning_from: _CONDITIONING
    /** default=1 min=1 max=1 step=0.01 */
    conditioning_to_strength?: _FLOAT
}

// ConditioningCombine [conditioning]
export interface ConditioningCombine extends HasSingle_CONDITIONING, ComfyNode<ConditioningCombine_input, ConditioningCombine_output> {
    nameInComfy: "ConditioningCombine"
}
export interface ConditioningCombine_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningCombine_input {
    conditioning_1: _CONDITIONING
    conditioning_2: _CONDITIONING
}

// ConditioningConcat [conditioning]
export interface ConditioningConcat extends HasSingle_CONDITIONING, ComfyNode<ConditioningConcat_input, ConditioningConcat_output> {
    nameInComfy: "ConditioningConcat"
}
export interface ConditioningConcat_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningConcat_input {
    conditioning_to: _CONDITIONING
    conditioning_from: _CONDITIONING
}

// ConditioningSetArea [conditioning]
export interface ConditioningSetArea extends HasSingle_CONDITIONING, ComfyNode<ConditioningSetArea_input, ConditioningSetArea_output> {
    nameInComfy: "ConditioningSetArea"
}
export interface ConditioningSetArea_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningSetArea_input {
    conditioning: _CONDITIONING
    /** default=64 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=64 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    y?: _INT
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
}

// ConditioningSetAreaPercentage [conditioning]
export interface ConditioningSetAreaPercentage extends HasSingle_CONDITIONING, ComfyNode<ConditioningSetAreaPercentage_input, ConditioningSetAreaPercentage_output> {
    nameInComfy: "ConditioningSetAreaPercentage"
}
export interface ConditioningSetAreaPercentage_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningSetAreaPercentage_input {
    conditioning: _CONDITIONING
    /** default=1 min=1 max=1 step=0.01 */
    width?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    height?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    x?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    y?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
}

// ConditioningSetAreaStrength [conditioning]
export interface ConditioningSetAreaStrength extends HasSingle_CONDITIONING, ComfyNode<ConditioningSetAreaStrength_input, ConditioningSetAreaStrength_output> {
    nameInComfy: "ConditioningSetAreaStrength"
}
export interface ConditioningSetAreaStrength_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningSetAreaStrength_input {
    conditioning: _CONDITIONING
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
}

// ConditioningSetMask [conditioning]
export interface ConditioningSetMask extends HasSingle_CONDITIONING, ComfyNode<ConditioningSetMask_input, ConditioningSetMask_output> {
    nameInComfy: "ConditioningSetMask"
}
export interface ConditioningSetMask_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningSetMask_input {
    conditioning: _CONDITIONING
    mask: _MASK
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
}

// KSamplerAdvanced [sampling]
export interface KSamplerAdvanced extends HasSingle_LATENT, ComfyNode<KSamplerAdvanced_input, KSamplerAdvanced_output> {
    nameInComfy: "KSamplerAdvanced"
}
export interface KSamplerAdvanced_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface KSamplerAdvanced_input {
    model: _MODEL
    add_noise: Enum_KSamplerAdvanced_add_noise
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    return_with_leftover_noise: Enum_KSamplerAdvanced_add_noise
}

// SetLatentNoiseMask [latent_inpaint]
export interface SetLatentNoiseMask extends HasSingle_LATENT, ComfyNode<SetLatentNoiseMask_input, SetLatentNoiseMask_output> {
    nameInComfy: "SetLatentNoiseMask"
}
export interface SetLatentNoiseMask_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface SetLatentNoiseMask_input {
    samples: _LATENT
    mask: _MASK
}

// LatentComposite [latent]
export interface LatentComposite extends HasSingle_LATENT, ComfyNode<LatentComposite_input, LatentComposite_output> {
    nameInComfy: "LatentComposite"
}
export interface LatentComposite_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentComposite_input {
    samples_to: _LATENT
    samples_from: _LATENT
    /** default=0 min=16384 max=16384 step=8 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    y?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    feather?: _INT
}

// LatentBlend [_for_testing]
export interface LatentBlend extends HasSingle_LATENT, ComfyNode<LatentBlend_input, LatentBlend_output> {
    nameInComfy: "LatentBlend"
}
export interface LatentBlend_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentBlend_input {
    samples1: _LATENT
    samples2: _LATENT
    /** default=0.5 min=1 max=1 step=0.01 */
    blend_factor?: _FLOAT
}

// LatentRotate [latent_transform]
export interface LatentRotate extends HasSingle_LATENT, ComfyNode<LatentRotate_input, LatentRotate_output> {
    nameInComfy: "LatentRotate"
}
export interface LatentRotate_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentRotate_input {
    samples: _LATENT
    rotation: Enum_LatentRotate_rotation
}

// LatentFlip [latent_transform]
export interface LatentFlip extends HasSingle_LATENT, ComfyNode<LatentFlip_input, LatentFlip_output> {
    nameInComfy: "LatentFlip"
}
export interface LatentFlip_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentFlip_input {
    samples: _LATENT
    flip_method: Enum_LatentFlip_flip_method
}

// LatentCrop [latent_transform]
export interface LatentCrop extends HasSingle_LATENT, ComfyNode<LatentCrop_input, LatentCrop_output> {
    nameInComfy: "LatentCrop"
}
export interface LatentCrop_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentCrop_input {
    samples: _LATENT
    /** default=512 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    y?: _INT
}

// LoraLoader [loaders]
export interface LoraLoader extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<LoraLoader_input, LoraLoader_output> {
    nameInComfy: "LoraLoader"
}
export interface LoraLoader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
}
export interface LoraLoader_input {
    /** */
    model: _MODEL
    /** */
    clip: _CLIP
    /** */
    lora_name: Enum_LoraLoader_lora_name
    /** default=1 min=100 max=100 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    strength_clip?: _FLOAT
}

// CLIPLoader [advanced_loaders]
export interface CLIPLoader extends HasSingle_CLIP, ComfyNode<CLIPLoader_input, CLIPLoader_output> {
    nameInComfy: "CLIPLoader"
}
export interface CLIPLoader_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface CLIPLoader_input {
    clip_name: Enum_CLIPLoader_clip_name
    type: Enum_CLIPLoader_type
}

// UNETLoader [advanced_loaders]
export interface UNETLoader extends HasSingle_MODEL, ComfyNode<UNETLoader_input, UNETLoader_output> {
    nameInComfy: "UNETLoader"
}
export interface UNETLoader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface UNETLoader_input {
    unet_name: Enum_UNETLoader_unet_name
    weight_dtype: Enum_UNETLoader_weight_dtype
}

// DualCLIPLoader [advanced_loaders]
export interface DualCLIPLoader extends HasSingle_CLIP, ComfyNode<DualCLIPLoader_input, DualCLIPLoader_output> {
    nameInComfy: "DualCLIPLoader"
}
export interface DualCLIPLoader_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface DualCLIPLoader_input {
    clip_name1: Enum_CLIPLoader_clip_name
    clip_name2: Enum_CLIPLoader_clip_name
    type: Enum_DualCLIPLoader_type
}

// CLIPVisionEncode [conditioning]
export interface CLIPVisionEncode extends HasSingle_CLIP_VISION_OUTPUT, ComfyNode<CLIPVisionEncode_input, CLIPVisionEncode_output> {
    nameInComfy: "CLIPVisionEncode"
}
export interface CLIPVisionEncode_output {
    CLIP_VISION_OUTPUT: ComfyNodeOutput<'CLIP_VISION_OUTPUT', 0>,
}
export interface CLIPVisionEncode_input {
    clip_vision: _CLIP_VISION
    image: _IMAGE
}

// StyleModelApply [conditioning_style_model]
export interface StyleModelApply extends HasSingle_CONDITIONING, ComfyNode<StyleModelApply_input, StyleModelApply_output> {
    nameInComfy: "StyleModelApply"
}
export interface StyleModelApply_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface StyleModelApply_input {
    conditioning: _CONDITIONING
    style_model: _STYLE_MODEL
    clip_vision_output: _CLIP_VISION_OUTPUT
}

// unCLIPConditioning [conditioning]
export interface unCLIPConditioning extends HasSingle_CONDITIONING, ComfyNode<unCLIPConditioning_input, unCLIPConditioning_output> {
    nameInComfy: "unCLIPConditioning"
}
export interface unCLIPConditioning_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface unCLIPConditioning_input {
    conditioning: _CONDITIONING
    clip_vision_output: _CLIP_VISION_OUTPUT
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    noise_augmentation?: _FLOAT
}

// ControlNetApply [conditioning_controlnet]
export interface ControlNetApply extends HasSingle_CONDITIONING, ComfyNode<ControlNetApply_input, ControlNetApply_output> {
    nameInComfy: "ControlNetApply"
}
export interface ControlNetApply_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ControlNetApply_input {
    conditioning: _CONDITIONING
    control_net: _CONTROL_NET
    image: _IMAGE
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
}

// ControlNetApplyAdvanced [conditioning_controlnet]
export interface ControlNetApplyAdvanced extends ComfyNode<ControlNetApplyAdvanced_input, ControlNetApplyAdvanced_output> {
    nameInComfy: "ControlNetApplyAdvanced"
}
export interface ControlNetApplyAdvanced_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ControlNetApplyAdvanced_input {
    positive: _CONDITIONING
    negative: _CONDITIONING
    control_net: _CONTROL_NET
    image: _IMAGE
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    vae?: _VAE
}

// ControlNetLoader [loaders]
export interface ControlNetLoader extends HasSingle_CONTROL_NET, ComfyNode<ControlNetLoader_input, ControlNetLoader_output> {
    nameInComfy: "ControlNetLoader"
}
export interface ControlNetLoader_output {
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 0>,
}
export interface ControlNetLoader_input {
    control_net_name: Enum_ControlNetLoader_control_net_name
}

// DiffControlNetLoader [loaders]
export interface DiffControlNetLoader extends HasSingle_CONTROL_NET, ComfyNode<DiffControlNetLoader_input, DiffControlNetLoader_output> {
    nameInComfy: "DiffControlNetLoader"
}
export interface DiffControlNetLoader_output {
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 0>,
}
export interface DiffControlNetLoader_input {
    model: _MODEL
    control_net_name: Enum_ControlNetLoader_control_net_name
}

// StyleModelLoader [loaders]
export interface StyleModelLoader extends HasSingle_STYLE_MODEL, ComfyNode<StyleModelLoader_input, StyleModelLoader_output> {
    nameInComfy: "StyleModelLoader"
}
export interface StyleModelLoader_output {
    STYLE_MODEL: ComfyNodeOutput<'STYLE_MODEL', 0>,
}
export interface StyleModelLoader_input {
    style_model_name: Enum_StyleModelLoader_style_model_name
}

// CLIPVisionLoader [loaders]
export interface CLIPVisionLoader extends HasSingle_CLIP_VISION, ComfyNode<CLIPVisionLoader_input, CLIPVisionLoader_output> {
    nameInComfy: "CLIPVisionLoader"
}
export interface CLIPVisionLoader_output {
    CLIP_VISION: ComfyNodeOutput<'CLIP_VISION', 0>,
}
export interface CLIPVisionLoader_input {
    clip_name: Enum_CLIPVisionLoader_clip_name
}

// VAEDecodeTiled [_for_testing]
export interface VAEDecodeTiled extends HasSingle_IMAGE, ComfyNode<VAEDecodeTiled_input, VAEDecodeTiled_output> {
    nameInComfy: "VAEDecodeTiled"
}
export interface VAEDecodeTiled_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface VAEDecodeTiled_input {
    samples: _LATENT
    vae: _VAE
    /** default=512 min=4096 max=4096 step=64 */
    tile_size?: _INT
}

// VAEEncodeTiled [_for_testing]
export interface VAEEncodeTiled extends HasSingle_LATENT, ComfyNode<VAEEncodeTiled_input, VAEEncodeTiled_output> {
    nameInComfy: "VAEEncodeTiled"
}
export interface VAEEncodeTiled_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface VAEEncodeTiled_input {
    pixels: _IMAGE
    vae: _VAE
    /** default=512 min=4096 max=4096 step=64 */
    tile_size?: _INT
}

// unCLIPCheckpointLoader [loaders]
export interface unCLIPCheckpointLoader extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_CLIP_VISION, ComfyNode<unCLIPCheckpointLoader_input, unCLIPCheckpointLoader_output> {
    nameInComfy: "unCLIPCheckpointLoader"
}
export interface unCLIPCheckpointLoader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    CLIP_VISION: ComfyNodeOutput<'CLIP_VISION', 3>,
}
export interface unCLIPCheckpointLoader_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
}

// GLIGENLoader [loaders]
export interface GLIGENLoader extends HasSingle_GLIGEN, ComfyNode<GLIGENLoader_input, GLIGENLoader_output> {
    nameInComfy: "GLIGENLoader"
}
export interface GLIGENLoader_output {
    GLIGEN: ComfyNodeOutput<'GLIGEN', 0>,
}
export interface GLIGENLoader_input {
    gligen_name: Enum_GLIGENLoader_gligen_name
}

// GLIGENTextBoxApply [conditioning_gligen]
export interface GLIGENTextBoxApply extends HasSingle_CONDITIONING, ComfyNode<GLIGENTextBoxApply_input, GLIGENTextBoxApply_output> {
    nameInComfy: "GLIGENTextBoxApply"
}
export interface GLIGENTextBoxApply_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface GLIGENTextBoxApply_input {
    conditioning_to: _CONDITIONING
    clip: _CLIP
    gligen_textbox_model: _GLIGEN
    /** */
    text: _STRING
    /** default=64 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=64 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    y?: _INT
}

// InpaintModelConditioning [conditioning_inpaint]
export interface InpaintModelConditioning extends HasSingle_LATENT, ComfyNode<InpaintModelConditioning_input, InpaintModelConditioning_output> {
    nameInComfy: "InpaintModelConditioning"
}
export interface InpaintModelConditioning_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent: ComfyNodeOutput<'LATENT', 2>,
}
export interface InpaintModelConditioning_input {
    positive: _CONDITIONING
    negative: _CONDITIONING
    vae: _VAE
    pixels: _IMAGE
    mask: _MASK
}

// CheckpointLoader [advanced_loaders]
export interface CheckpointLoader extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<CheckpointLoader_input, CheckpointLoader_output> {
    nameInComfy: "CheckpointLoader"
}
export interface CheckpointLoader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
}
export interface CheckpointLoader_input {
    config_name: Enum_CheckpointLoader_config_name
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
}

// DiffusersLoader [advanced_loaders_deprecated]
export interface DiffusersLoader extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<DiffusersLoader_input, DiffusersLoader_output> {
    nameInComfy: "DiffusersLoader"
}
export interface DiffusersLoader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
}
export interface DiffusersLoader_input {
    model_path: Enum_DiffusersLoader_model_path
}

// LoadLatent [_for_testing]
export interface LoadLatent extends HasSingle_LATENT, ComfyNode<LoadLatent_input, LoadLatent_output> {
    nameInComfy: "LoadLatent"
}
export interface LoadLatent_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LoadLatent_input {
    latent: Enum_LoadLatent_latent
}

// SaveLatent [_for_testing]
export interface SaveLatent extends ComfyNode<SaveLatent_input, SaveLatent_output> {
    nameInComfy: "SaveLatent"
}
export interface SaveLatent_output {
}
export interface SaveLatent_input {
    samples: _LATENT
    /** default="latents/ComfyUI" */
    filename_prefix?: _STRING
}

// ConditioningZeroOut [advanced_conditioning]
export interface ConditioningZeroOut extends HasSingle_CONDITIONING, ComfyNode<ConditioningZeroOut_input, ConditioningZeroOut_output> {
    nameInComfy: "ConditioningZeroOut"
}
export interface ConditioningZeroOut_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningZeroOut_input {
    conditioning: _CONDITIONING
}

// ConditioningSetTimestepRange [advanced_conditioning]
export interface ConditioningSetTimestepRange extends HasSingle_CONDITIONING, ComfyNode<ConditioningSetTimestepRange_input, ConditioningSetTimestepRange_output> {
    nameInComfy: "ConditioningSetTimestepRange"
}
export interface ConditioningSetTimestepRange_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningSetTimestepRange_input {
    conditioning: _CONDITIONING
    /** default=0 min=1 max=1 step=0.001 */
    start?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end?: _FLOAT
}

// LoraLoaderModelOnly [loaders]
export interface LoraLoaderModelOnly extends HasSingle_MODEL, ComfyNode<LoraLoaderModelOnly_input, LoraLoaderModelOnly_output> {
    nameInComfy: "LoraLoaderModelOnly"
}
export interface LoraLoaderModelOnly_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface LoraLoaderModelOnly_input {
    model: _MODEL
    lora_name: Enum_LoraLoader_lora_name
    /** default=1 min=100 max=100 step=0.01 */
    strength_model?: _FLOAT
}

// LatentAdd [latent_advanced]
export interface LatentAdd extends HasSingle_LATENT, ComfyNode<LatentAdd_input, LatentAdd_output> {
    nameInComfy: "LatentAdd"
}
export interface LatentAdd_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentAdd_input {
    samples1: _LATENT
    samples2: _LATENT
}

// LatentSubtract [latent_advanced]
export interface LatentSubtract extends HasSingle_LATENT, ComfyNode<LatentSubtract_input, LatentSubtract_output> {
    nameInComfy: "LatentSubtract"
}
export interface LatentSubtract_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentSubtract_input {
    samples1: _LATENT
    samples2: _LATENT
}

// LatentMultiply [latent_advanced]
export interface LatentMultiply extends HasSingle_LATENT, ComfyNode<LatentMultiply_input, LatentMultiply_output> {
    nameInComfy: "LatentMultiply"
}
export interface LatentMultiply_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentMultiply_input {
    samples: _LATENT
    /** default=1 min=10 max=10 step=0.01 */
    multiplier?: _FLOAT
}

// LatentInterpolate [latent_advanced]
export interface LatentInterpolate extends HasSingle_LATENT, ComfyNode<LatentInterpolate_input, LatentInterpolate_output> {
    nameInComfy: "LatentInterpolate"
}
export interface LatentInterpolate_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentInterpolate_input {
    samples1: _LATENT
    samples2: _LATENT
    /** default=1 min=1 max=1 step=0.01 */
    ratio?: _FLOAT
}

// LatentBatch [latent_batch]
export interface LatentBatch extends HasSingle_LATENT, ComfyNode<LatentBatch_input, LatentBatch_output> {
    nameInComfy: "LatentBatch"
}
export interface LatentBatch_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentBatch_input {
    samples1: _LATENT
    samples2: _LATENT
}

// LatentBatchSeedBehavior [latent_advanced]
export interface LatentBatchSeedBehavior extends HasSingle_LATENT, ComfyNode<LatentBatchSeedBehavior_input, LatentBatchSeedBehavior_output> {
    nameInComfy: "LatentBatchSeedBehavior"
}
export interface LatentBatchSeedBehavior_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentBatchSeedBehavior_input {
    samples: _LATENT
    /** default="fixed" */
    seed_behavior?: Enum_LatentBatchSeedBehavior_seed_behavior
}

// LatentApplyOperation [latent_advanced_operations]
export interface LatentApplyOperation extends HasSingle_LATENT, ComfyNode<LatentApplyOperation_input, LatentApplyOperation_output> {
    nameInComfy: "LatentApplyOperation"
}
export interface LatentApplyOperation_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentApplyOperation_input {
    samples: _LATENT
    operation: _LATENT_OPERATION
}

// LatentApplyOperationCFG [latent_advanced_operations]
export interface LatentApplyOperationCFG extends HasSingle_MODEL, ComfyNode<LatentApplyOperationCFG_input, LatentApplyOperationCFG_output> {
    nameInComfy: "LatentApplyOperationCFG"
}
export interface LatentApplyOperationCFG_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface LatentApplyOperationCFG_input {
    model: _MODEL
    operation: _LATENT_OPERATION
}

// LatentOperationTonemapReinhard [latent_advanced_operations]
export interface LatentOperationTonemapReinhard extends HasSingle_LATENT_OPERATION, ComfyNode<LatentOperationTonemapReinhard_input, LatentOperationTonemapReinhard_output> {
    nameInComfy: "LatentOperationTonemapReinhard"
}
export interface LatentOperationTonemapReinhard_output {
    LATENT_OPERATION: ComfyNodeOutput<'LATENT_OPERATION', 0>,
}
export interface LatentOperationTonemapReinhard_input {
    /** default=1 min=100 max=100 step=0.01 */
    multiplier?: _FLOAT
}

// LatentOperationSharpen [latent_advanced_operations]
export interface LatentOperationSharpen extends HasSingle_LATENT_OPERATION, ComfyNode<LatentOperationSharpen_input, LatentOperationSharpen_output> {
    nameInComfy: "LatentOperationSharpen"
}
export interface LatentOperationSharpen_output {
    LATENT_OPERATION: ComfyNodeOutput<'LATENT_OPERATION', 0>,
}
export interface LatentOperationSharpen_input {
    /** default=9 min=31 max=31 step=1 */
    sharpen_radius?: _INT
    /** default=1 min=10 max=10 step=0.1 */
    sigma?: _FLOAT
    /** default=0.1 min=5 max=5 step=0.01 */
    alpha?: _FLOAT
}

// HypernetworkLoader [loaders]
export interface HypernetworkLoader extends HasSingle_MODEL, ComfyNode<HypernetworkLoader_input, HypernetworkLoader_output> {
    nameInComfy: "HypernetworkLoader"
}
export interface HypernetworkLoader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface HypernetworkLoader_input {
    model: _MODEL
    hypernetwork_name: Enum_HypernetworkLoader_hypernetwork_name
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
}

// UpscaleModelLoader [loaders]
export interface UpscaleModelLoader extends HasSingle_UPSCALE_MODEL, ComfyNode<UpscaleModelLoader_input, UpscaleModelLoader_output> {
    nameInComfy: "UpscaleModelLoader"
}
export interface UpscaleModelLoader_output {
    UPSCALE_MODEL: ComfyNodeOutput<'UPSCALE_MODEL', 0>,
}
export interface UpscaleModelLoader_input {
    model_name: Enum_UpscaleModelLoader_model_name
}

// ImageUpscaleWithModel [image_upscaling]
export interface ImageUpscaleWithModel extends HasSingle_IMAGE, ComfyNode<ImageUpscaleWithModel_input, ImageUpscaleWithModel_output> {
    nameInComfy: "ImageUpscaleWithModel"
}
export interface ImageUpscaleWithModel_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageUpscaleWithModel_input {
    upscale_model: _UPSCALE_MODEL
    image: _IMAGE
}

// ImageBlend [image_postprocessing]
export interface ImageBlend extends HasSingle_IMAGE, ComfyNode<ImageBlend_input, ImageBlend_output> {
    nameInComfy: "ImageBlend"
}
export interface ImageBlend_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBlend_input {
    image1: _IMAGE
    image2: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    blend_factor?: _FLOAT
    blend_mode: Enum_ImageBlend_blend_mode
}

// ImageBlur [image_postprocessing]
export interface ImageBlur extends HasSingle_IMAGE, ComfyNode<ImageBlur_input, ImageBlur_output> {
    nameInComfy: "ImageBlur"
}
export interface ImageBlur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBlur_input {
    image: _IMAGE
    /** default=1 min=31 max=31 step=1 */
    blur_radius?: _INT
    /** default=1 min=10 max=10 step=0.1 */
    sigma?: _FLOAT
}

// ImageQuantize [image_postprocessing]
export interface ImageQuantize extends HasSingle_IMAGE, ComfyNode<ImageQuantize_input, ImageQuantize_output> {
    nameInComfy: "ImageQuantize"
}
export interface ImageQuantize_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageQuantize_input {
    image: _IMAGE
    /** default=256 min=256 max=256 step=1 */
    colors?: _INT
    dither: Enum_ImageQuantize_dither
}

// ImageSharpen [image_postprocessing]
export interface ImageSharpen extends HasSingle_IMAGE, ComfyNode<ImageSharpen_input, ImageSharpen_output> {
    nameInComfy: "ImageSharpen"
}
export interface ImageSharpen_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageSharpen_input {
    image: _IMAGE
    /** default=1 min=31 max=31 step=1 */
    sharpen_radius?: _INT
    /** default=1 min=10 max=10 step=0.01 */
    sigma?: _FLOAT
    /** default=1 min=5 max=5 step=0.01 */
    alpha?: _FLOAT
}

// ImageScaleToTotalPixels [image_upscaling]
export interface ImageScaleToTotalPixels extends HasSingle_IMAGE, ComfyNode<ImageScaleToTotalPixels_input, ImageScaleToTotalPixels_output> {
    nameInComfy: "ImageScaleToTotalPixels"
}
export interface ImageScaleToTotalPixels_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageScaleToTotalPixels_input {
    image: _IMAGE
    upscale_method: Enum_ImageScale_upscale_method
    /** default=1 min=16 max=16 step=0.01 */
    megapixels?: _FLOAT
}

// LatentCompositeMasked [latent]
export interface LatentCompositeMasked extends HasSingle_LATENT, ComfyNode<LatentCompositeMasked_input, LatentCompositeMasked_output> {
    nameInComfy: "LatentCompositeMasked"
}
export interface LatentCompositeMasked_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentCompositeMasked_input {
    destination: _LATENT
    source: _LATENT
    /** default=0 min=16384 max=16384 step=8 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    y?: _INT
    /** default=false */
    resize_source?: _BOOLEAN
    mask?: _MASK
}

// ImageCompositeMasked [image]
export interface ImageCompositeMasked extends HasSingle_IMAGE, ComfyNode<ImageCompositeMasked_input, ImageCompositeMasked_output> {
    nameInComfy: "ImageCompositeMasked"
}
export interface ImageCompositeMasked_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageCompositeMasked_input {
    destination: _IMAGE
    source: _IMAGE
    /** default=0 min=16384 max=16384 step=1 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    y?: _INT
    /** default=false */
    resize_source?: _BOOLEAN
    mask?: _MASK
}

// MaskToImage [mask]
export interface MaskToImage extends HasSingle_IMAGE, ComfyNode<MaskToImage_input, MaskToImage_output> {
    nameInComfy: "MaskToImage"
}
export interface MaskToImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MaskToImage_input {
    mask: _MASK
}

// ImageToMask [mask]
export interface ImageToMask extends HasSingle_MASK, ComfyNode<ImageToMask_input, ImageToMask_output> {
    nameInComfy: "ImageToMask"
}
export interface ImageToMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ImageToMask_input {
    image: _IMAGE
    channel: Enum_LoadImageMask_channel
}

// ImageColorToMask [mask]
export interface ImageColorToMask extends HasSingle_MASK, ComfyNode<ImageColorToMask_input, ImageColorToMask_output> {
    nameInComfy: "ImageColorToMask"
}
export interface ImageColorToMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ImageColorToMask_input {
    image: _IMAGE
    /** default=0 min=16777215 max=16777215 step=1 */
    color?: _INT
}

// SolidMask [mask]
export interface SolidMask extends HasSingle_MASK, ComfyNode<SolidMask_input, SolidMask_output> {
    nameInComfy: "SolidMask"
}
export interface SolidMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface SolidMask_input {
    /** default=1 min=1 max=1 step=0.01 */
    value?: _FLOAT
    /** default=512 min=16384 max=16384 step=1 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=1 */
    height?: _INT
}

// InvertMask [mask]
export interface InvertMask extends HasSingle_MASK, ComfyNode<InvertMask_input, InvertMask_output> {
    nameInComfy: "InvertMask"
}
export interface InvertMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface InvertMask_input {
    mask: _MASK
}

// CropMask [mask]
export interface CropMask extends HasSingle_MASK, ComfyNode<CropMask_input, CropMask_output> {
    nameInComfy: "CropMask"
}
export interface CropMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface CropMask_input {
    mask: _MASK
    /** default=0 min=16384 max=16384 step=1 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    y?: _INT
    /** default=512 min=16384 max=16384 step=1 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=1 */
    height?: _INT
}

// MaskComposite [mask]
export interface MaskComposite extends HasSingle_MASK, ComfyNode<MaskComposite_input, MaskComposite_output> {
    nameInComfy: "MaskComposite"
}
export interface MaskComposite_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskComposite_input {
    destination: _MASK
    source: _MASK
    /** default=0 min=16384 max=16384 step=1 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    y?: _INT
    operation: Enum_MaskComposite_operation
}

// FeatherMask [mask]
export interface FeatherMask extends HasSingle_MASK, ComfyNode<FeatherMask_input, FeatherMask_output> {
    nameInComfy: "FeatherMask"
}
export interface FeatherMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface FeatherMask_input {
    mask: _MASK
    /** default=0 min=16384 max=16384 step=1 */
    left?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    top?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    right?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    bottom?: _INT
}

// GrowMask [mask]
export interface GrowMask extends HasSingle_MASK, ComfyNode<GrowMask_input, GrowMask_output> {
    nameInComfy: "GrowMask"
}
export interface GrowMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface GrowMask_input {
    mask: _MASK
    /** default=0 min=16384 max=16384 step=1 */
    expand?: _INT
    /** default=true */
    tapered_corners?: _BOOLEAN
}

// ThresholdMask [mask]
export interface ThresholdMask extends HasSingle_MASK, ComfyNode<ThresholdMask_input, ThresholdMask_output> {
    nameInComfy: "ThresholdMask"
}
export interface ThresholdMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ThresholdMask_input {
    mask: _MASK
    /** default=0.5 min=1 max=1 step=0.01 */
    value?: _FLOAT
}

// PorterDuffImageComposite [mask_compositing]
export interface PorterDuffImageComposite extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<PorterDuffImageComposite_input, PorterDuffImageComposite_output> {
    nameInComfy: "PorterDuffImageComposite"
}
export interface PorterDuffImageComposite_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface PorterDuffImageComposite_input {
    source: _IMAGE
    source_alpha: _MASK
    destination: _IMAGE
    destination_alpha: _MASK
    /** default="DST" */
    mode?: Enum_PorterDuffImageComposite_mode
}

// SplitImageWithAlpha [mask_compositing]
export interface SplitImageWithAlpha extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<SplitImageWithAlpha_input, SplitImageWithAlpha_output> {
    nameInComfy: "SplitImageWithAlpha"
}
export interface SplitImageWithAlpha_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface SplitImageWithAlpha_input {
    image: _IMAGE
}

// JoinImageWithAlpha [mask_compositing]
export interface JoinImageWithAlpha extends HasSingle_IMAGE, ComfyNode<JoinImageWithAlpha_input, JoinImageWithAlpha_output> {
    nameInComfy: "JoinImageWithAlpha"
}
export interface JoinImageWithAlpha_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface JoinImageWithAlpha_input {
    image: _IMAGE
    alpha: _MASK
}

// RebatchLatents [latent_batch]
export interface RebatchLatents extends HasSingle_LATENT, ComfyNode<RebatchLatents_input, RebatchLatents_output> {
    nameInComfy: "RebatchLatents"
}
export interface RebatchLatents_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface RebatchLatents_input {
    latents: _LATENT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// RebatchImages [image_batch]
export interface RebatchImages extends HasSingle_IMAGE, ComfyNode<RebatchImages_input, RebatchImages_output> {
    nameInComfy: "RebatchImages"
}
export interface RebatchImages_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface RebatchImages_input {
    images: _IMAGE
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// ModelMergeSimple [advanced_model_merging]
export interface ModelMergeSimple extends HasSingle_MODEL, ComfyNode<ModelMergeSimple_input, ModelMergeSimple_output> {
    nameInComfy: "ModelMergeSimple"
}
export interface ModelMergeSimple_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeSimple_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    ratio?: _FLOAT
}

// ModelMergeBlocks [advanced_model_merging]
export interface ModelMergeBlocks extends HasSingle_MODEL, ComfyNode<ModelMergeBlocks_input, ModelMergeBlocks_output> {
    nameInComfy: "ModelMergeBlocks"
}
export interface ModelMergeBlocks_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeBlocks_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    input?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    middle?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    out?: _FLOAT
}

// ModelMergeSubtract [advanced_model_merging]
export interface ModelMergeSubtract extends HasSingle_MODEL, ComfyNode<ModelMergeSubtract_input, ModelMergeSubtract_output> {
    nameInComfy: "ModelMergeSubtract"
}
export interface ModelMergeSubtract_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeSubtract_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=10 max=10 step=0.01 */
    multiplier?: _FLOAT
}

// ModelMergeAdd [advanced_model_merging]
export interface ModelMergeAdd extends HasSingle_MODEL, ComfyNode<ModelMergeAdd_input, ModelMergeAdd_output> {
    nameInComfy: "ModelMergeAdd"
}
export interface ModelMergeAdd_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeAdd_input {
    model1: _MODEL
    model2: _MODEL
}

// CheckpointSave [advanced_model_merging]
export interface CheckpointSave extends ComfyNode<CheckpointSave_input, CheckpointSave_output> {
    nameInComfy: "CheckpointSave"
}
export interface CheckpointSave_output {
}
export interface CheckpointSave_input {
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    /** default="checkpoints/ComfyUI" */
    filename_prefix?: _STRING
}

// CLIPMergeSimple [advanced_model_merging]
export interface CLIPMergeSimple extends HasSingle_CLIP, ComfyNode<CLIPMergeSimple_input, CLIPMergeSimple_output> {
    nameInComfy: "CLIPMergeSimple"
}
export interface CLIPMergeSimple_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface CLIPMergeSimple_input {
    clip1: _CLIP
    clip2: _CLIP
    /** default=1 min=1 max=1 step=0.01 */
    ratio?: _FLOAT
}

// CLIPMergeSubtract [advanced_model_merging]
export interface CLIPMergeSubtract extends HasSingle_CLIP, ComfyNode<CLIPMergeSubtract_input, CLIPMergeSubtract_output> {
    nameInComfy: "CLIPMergeSubtract"
}
export interface CLIPMergeSubtract_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface CLIPMergeSubtract_input {
    clip1: _CLIP
    clip2: _CLIP
    /** default=1 min=10 max=10 step=0.01 */
    multiplier?: _FLOAT
}

// CLIPMergeAdd [advanced_model_merging]
export interface CLIPMergeAdd extends HasSingle_CLIP, ComfyNode<CLIPMergeAdd_input, CLIPMergeAdd_output> {
    nameInComfy: "CLIPMergeAdd"
}
export interface CLIPMergeAdd_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface CLIPMergeAdd_input {
    clip1: _CLIP
    clip2: _CLIP
}

// CLIPSave [advanced_model_merging]
export interface CLIPSave extends ComfyNode<CLIPSave_input, CLIPSave_output> {
    nameInComfy: "CLIPSave"
}
export interface CLIPSave_output {
}
export interface CLIPSave_input {
    clip: _CLIP
    /** default="clip/ComfyUI" */
    filename_prefix?: _STRING
}

// VAESave [advanced_model_merging]
export interface VAESave extends ComfyNode<VAESave_input, VAESave_output> {
    nameInComfy: "VAESave"
}
export interface VAESave_output {
}
export interface VAESave_input {
    vae: _VAE
    /** default="vae/ComfyUI_vae" */
    filename_prefix?: _STRING
}

// ModelSave [advanced_model_merging]
export interface ModelSave extends ComfyNode<ModelSave_input, ModelSave_output> {
    nameInComfy: "ModelSave"
}
export interface ModelSave_output {
}
export interface ModelSave_input {
    model: _MODEL
    /** default="diffusion_models/ComfyUI" */
    filename_prefix?: _STRING
}

// TomePatchModel [model_patches_unet]
export interface TomePatchModel extends HasSingle_MODEL, ComfyNode<TomePatchModel_input, TomePatchModel_output> {
    nameInComfy: "TomePatchModel"
}
export interface TomePatchModel_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface TomePatchModel_input {
    model: _MODEL
    /** default=0.3 min=1 max=1 step=0.01 */
    ratio?: _FLOAT
}

// CLIPTextEncodeSDXLRefiner [advanced_conditioning]
export interface CLIPTextEncodeSDXLRefiner extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncodeSDXLRefiner_input, CLIPTextEncodeSDXLRefiner_output> {
    nameInComfy: "CLIPTextEncodeSDXLRefiner"
}
export interface CLIPTextEncodeSDXLRefiner_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPTextEncodeSDXLRefiner_input {
    /** default=6 min=1000 max=1000 step=0.01 */
    ascore?: _FLOAT
    /** default=1024 min=16384 max=16384 */
    width?: _INT
    /** default=1024 min=16384 max=16384 */
    height?: _INT
    /** */
    text: _STRING
    clip: _CLIP
}

// CLIPTextEncodeSDXL [advanced_conditioning]
export interface CLIPTextEncodeSDXL extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncodeSDXL_input, CLIPTextEncodeSDXL_output> {
    nameInComfy: "CLIPTextEncodeSDXL"
}
export interface CLIPTextEncodeSDXL_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPTextEncodeSDXL_input {
    /** default=1024 min=16384 max=16384 */
    width?: _INT
    /** default=1024 min=16384 max=16384 */
    height?: _INT
    /** default=0 min=16384 max=16384 */
    crop_w?: _INT
    /** default=0 min=16384 max=16384 */
    crop_h?: _INT
    /** default=1024 min=16384 max=16384 */
    target_width?: _INT
    /** default=1024 min=16384 max=16384 */
    target_height?: _INT
    /** */
    text_g: _STRING
    clip: _CLIP
    /** */
    text_l: _STRING
}

// Canny [image_preprocessors]
export interface Canny extends HasSingle_IMAGE, ComfyNode<Canny_input, Canny_output> {
    nameInComfy: "Canny"
}
export interface Canny_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Canny_input {
    image: _IMAGE
    /** default=0.4 min=0.99 max=0.99 step=0.01 */
    low_threshold?: _FLOAT
    /** default=0.8 min=0.99 max=0.99 step=0.01 */
    high_threshold?: _FLOAT
}

// FreeU [model_patches_unet]
export interface FreeU extends HasSingle_MODEL, ComfyNode<FreeU_input, FreeU_output> {
    nameInComfy: "FreeU"
}
export interface FreeU_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface FreeU_input {
    model: _MODEL
    /** default=1.1 min=10 max=10 step=0.01 */
    b1?: _FLOAT
    /** default=1.2 min=10 max=10 step=0.01 */
    b2?: _FLOAT
    /** default=0.9 min=10 max=10 step=0.01 */
    s1?: _FLOAT
    /** default=0.2 min=10 max=10 step=0.01 */
    s2?: _FLOAT
}

// FreeU_V2 [model_patches_unet]
export interface FreeU$_V2 extends HasSingle_MODEL, ComfyNode<FreeU$_V2_input, FreeU$_V2_output> {
    nameInComfy: "FreeU_V2"
}
export interface FreeU$_V2_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface FreeU$_V2_input {
    model: _MODEL
    /** default=1.3 min=10 max=10 step=0.01 */
    b1?: _FLOAT
    /** default=1.4 min=10 max=10 step=0.01 */
    b2?: _FLOAT
    /** default=0.9 min=10 max=10 step=0.01 */
    s1?: _FLOAT
    /** default=0.2 min=10 max=10 step=0.01 */
    s2?: _FLOAT
}

// SamplerCustom [sampling_custom_sampling]
export interface SamplerCustom extends ComfyNode<SamplerCustom_input, SamplerCustom_output> {
    nameInComfy: "SamplerCustom"
}
export interface SamplerCustom_output {
    output: ComfyNodeOutput<'LATENT', 0>,
    denoised_output: ComfyNodeOutput<'LATENT', 1>,
}
export interface SamplerCustom_input {
    model: _MODEL
    /** default=true */
    add_noise?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    positive: _CONDITIONING
    negative: _CONDITIONING
    sampler: _SAMPLER
    sigmas: _SIGMAS
    latent_image: _LATENT
}

// BasicScheduler [sampling_custom_sampling_schedulers]
export interface BasicScheduler extends HasSingle_SIGMAS, ComfyNode<BasicScheduler_input, BasicScheduler_output> {
    nameInComfy: "BasicScheduler"
}
export interface BasicScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface BasicScheduler_input {
    model: _MODEL
    scheduler: Enum_KSampler_scheduler
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// KarrasScheduler [sampling_custom_sampling_schedulers]
export interface KarrasScheduler extends HasSingle_SIGMAS, ComfyNode<KarrasScheduler_input, KarrasScheduler_output> {
    nameInComfy: "KarrasScheduler"
}
export interface KarrasScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface KarrasScheduler_input {
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=14.614642 min=5000 max=5000 step=0.01 */
    sigma_max?: _FLOAT
    /** default=0.0291675 min=5000 max=5000 step=0.01 */
    sigma_min?: _FLOAT
    /** default=7 min=100 max=100 step=0.01 */
    rho?: _FLOAT
}

// ExponentialScheduler [sampling_custom_sampling_schedulers]
export interface ExponentialScheduler extends HasSingle_SIGMAS, ComfyNode<ExponentialScheduler_input, ExponentialScheduler_output> {
    nameInComfy: "ExponentialScheduler"
}
export interface ExponentialScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface ExponentialScheduler_input {
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=14.614642 min=5000 max=5000 step=0.01 */
    sigma_max?: _FLOAT
    /** default=0.0291675 min=5000 max=5000 step=0.01 */
    sigma_min?: _FLOAT
}

// PolyexponentialScheduler [sampling_custom_sampling_schedulers]
export interface PolyexponentialScheduler extends HasSingle_SIGMAS, ComfyNode<PolyexponentialScheduler_input, PolyexponentialScheduler_output> {
    nameInComfy: "PolyexponentialScheduler"
}
export interface PolyexponentialScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface PolyexponentialScheduler_input {
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=14.614642 min=5000 max=5000 step=0.01 */
    sigma_max?: _FLOAT
    /** default=0.0291675 min=5000 max=5000 step=0.01 */
    sigma_min?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    rho?: _FLOAT
}

// LaplaceScheduler [sampling_custom_sampling_schedulers]
export interface LaplaceScheduler extends HasSingle_SIGMAS, ComfyNode<LaplaceScheduler_input, LaplaceScheduler_output> {
    nameInComfy: "LaplaceScheduler"
}
export interface LaplaceScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface LaplaceScheduler_input {
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=14.614642 min=5000 max=5000 step=0.01 */
    sigma_max?: _FLOAT
    /** default=0.0291675 min=5000 max=5000 step=0.01 */
    sigma_min?: _FLOAT
    /** default=0 min=10 max=10 step=0.1 */
    mu?: _FLOAT
    /** default=0.5 min=10 max=10 step=0.1 */
    beta?: _FLOAT
}

// VPScheduler [sampling_custom_sampling_schedulers]
export interface VPScheduler extends HasSingle_SIGMAS, ComfyNode<VPScheduler_input, VPScheduler_output> {
    nameInComfy: "VPScheduler"
}
export interface VPScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface VPScheduler_input {
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=19.9 min=5000 max=5000 step=0.01 */
    beta_d?: _FLOAT
    /** default=0.1 min=5000 max=5000 step=0.01 */
    beta_min?: _FLOAT
    /** default=0.001 min=1 max=1 step=0.0001 */
    eps_s?: _FLOAT
}

// BetaSamplingScheduler [sampling_custom_sampling_schedulers]
export interface BetaSamplingScheduler extends HasSingle_SIGMAS, ComfyNode<BetaSamplingScheduler_input, BetaSamplingScheduler_output> {
    nameInComfy: "BetaSamplingScheduler"
}
export interface BetaSamplingScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface BetaSamplingScheduler_input {
    model: _MODEL
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=0.6 min=50 max=50 step=0.01 */
    alpha?: _FLOAT
    /** default=0.6 min=50 max=50 step=0.01 */
    beta?: _FLOAT
}

// SDTurboScheduler [sampling_custom_sampling_schedulers]
export interface SDTurboScheduler extends HasSingle_SIGMAS, ComfyNode<SDTurboScheduler_input, SDTurboScheduler_output> {
    nameInComfy: "SDTurboScheduler"
}
export interface SDTurboScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface SDTurboScheduler_input {
    model: _MODEL
    /** default=1 min=10 max=10 */
    steps?: _INT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// KSamplerSelect [sampling_custom_sampling_samplers]
export interface KSamplerSelect extends HasSingle_SAMPLER, ComfyNode<KSamplerSelect_input, KSamplerSelect_output> {
    nameInComfy: "KSamplerSelect"
}
export interface KSamplerSelect_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface KSamplerSelect_input {
    sampler_name: Enum_KSampler_sampler_name
}

// SamplerEulerAncestral [sampling_custom_sampling_samplers]
export interface SamplerEulerAncestral extends HasSingle_SAMPLER, ComfyNode<SamplerEulerAncestral_input, SamplerEulerAncestral_output> {
    nameInComfy: "SamplerEulerAncestral"
}
export interface SamplerEulerAncestral_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerEulerAncestral_input {
    /** default=1 min=100 max=100 step=0.01 */
    eta?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    s_noise?: _FLOAT
}

// SamplerEulerAncestralCFGPP [sampling_custom_sampling_samplers]
export interface SamplerEulerAncestralCFGPP extends HasSingle_SAMPLER, ComfyNode<SamplerEulerAncestralCFGPP_input, SamplerEulerAncestralCFGPP_output> {
    nameInComfy: "SamplerEulerAncestralCFGPP"
}
export interface SamplerEulerAncestralCFGPP_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerEulerAncestralCFGPP_input {
    /** default=1 min=1 max=1 step=0.01 */
    eta?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    s_noise?: _FLOAT
}

// SamplerLMS [sampling_custom_sampling_samplers]
export interface SamplerLMS extends HasSingle_SAMPLER, ComfyNode<SamplerLMS_input, SamplerLMS_output> {
    nameInComfy: "SamplerLMS"
}
export interface SamplerLMS_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerLMS_input {
    /** default=4 min=100 max=100 */
    order?: _INT
}

// SamplerDPMPP_3M_SDE [sampling_custom_sampling_samplers]
export interface SamplerDPMPP$_3M$_SDE extends HasSingle_SAMPLER, ComfyNode<SamplerDPMPP$_3M$_SDE_input, SamplerDPMPP$_3M$_SDE_output> {
    nameInComfy: "SamplerDPMPP_3M_SDE"
}
export interface SamplerDPMPP$_3M$_SDE_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerDPMPP$_3M$_SDE_input {
    /** default=1 min=100 max=100 step=0.01 */
    eta?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    s_noise?: _FLOAT
    noise_device: Enum_SamplerDPMPP$_3M$_SDE_noise_device
}

// SamplerDPMPP_2M_SDE [sampling_custom_sampling_samplers]
export interface SamplerDPMPP$_2M$_SDE extends HasSingle_SAMPLER, ComfyNode<SamplerDPMPP$_2M$_SDE_input, SamplerDPMPP$_2M$_SDE_output> {
    nameInComfy: "SamplerDPMPP_2M_SDE"
}
export interface SamplerDPMPP$_2M$_SDE_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerDPMPP$_2M$_SDE_input {
    solver_type: Enum_SamplerDPMPP$_2M$_SDE_solver_type
    /** default=1 min=100 max=100 step=0.01 */
    eta?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    s_noise?: _FLOAT
    noise_device: Enum_SamplerDPMPP$_3M$_SDE_noise_device
}

// SamplerDPMPP_SDE [sampling_custom_sampling_samplers]
export interface SamplerDPMPP$_SDE extends HasSingle_SAMPLER, ComfyNode<SamplerDPMPP$_SDE_input, SamplerDPMPP$_SDE_output> {
    nameInComfy: "SamplerDPMPP_SDE"
}
export interface SamplerDPMPP$_SDE_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerDPMPP$_SDE_input {
    /** default=1 min=100 max=100 step=0.01 */
    eta?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    s_noise?: _FLOAT
    /** default=0.5 min=100 max=100 step=0.01 */
    r?: _FLOAT
    noise_device: Enum_SamplerDPMPP$_3M$_SDE_noise_device
}

// SamplerDPMPP_2S_Ancestral [sampling_custom_sampling_samplers]
export interface SamplerDPMPP$_2S$_Ancestral extends HasSingle_SAMPLER, ComfyNode<SamplerDPMPP$_2S$_Ancestral_input, SamplerDPMPP$_2S$_Ancestral_output> {
    nameInComfy: "SamplerDPMPP_2S_Ancestral"
}
export interface SamplerDPMPP$_2S$_Ancestral_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerDPMPP$_2S$_Ancestral_input {
    /** default=1 min=100 max=100 step=0.01 */
    eta?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    s_noise?: _FLOAT
}

// SamplerDPMAdaptative [sampling_custom_sampling_samplers]
export interface SamplerDPMAdaptative extends HasSingle_SAMPLER, ComfyNode<SamplerDPMAdaptative_input, SamplerDPMAdaptative_output> {
    nameInComfy: "SamplerDPMAdaptative"
}
export interface SamplerDPMAdaptative_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerDPMAdaptative_input {
    /** default=3 min=3 max=3 */
    order?: _INT
    /** default=0.05 min=100 max=100 step=0.01 */
    rtol?: _FLOAT
    /** default=0.0078 min=100 max=100 step=0.01 */
    atol?: _FLOAT
    /** default=0.05 min=100 max=100 step=0.01 */
    h_init?: _FLOAT
    /** default=0 min=100 max=100 step=0.01 */
    pcoeff?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    icoeff?: _FLOAT
    /** default=0 min=100 max=100 step=0.01 */
    dcoeff?: _FLOAT
    /** default=0.81 min=100 max=100 step=0.01 */
    accept_safety?: _FLOAT
    /** default=0 min=100 max=100 step=0.01 */
    eta?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    s_noise?: _FLOAT
}

// SplitSigmas [sampling_custom_sampling_sigmas]
export interface SplitSigmas extends ComfyNode<SplitSigmas_input, SplitSigmas_output> {
    nameInComfy: "SplitSigmas"
}
export interface SplitSigmas_output {
    high_sigmas: ComfyNodeOutput<'SIGMAS', 0>,
    low_sigmas: ComfyNodeOutput<'SIGMAS', 1>,
}
export interface SplitSigmas_input {
    sigmas: _SIGMAS
    /** default=0 min=10000 max=10000 */
    step?: _INT
}

// SplitSigmasDenoise [sampling_custom_sampling_sigmas]
export interface SplitSigmasDenoise extends ComfyNode<SplitSigmasDenoise_input, SplitSigmasDenoise_output> {
    nameInComfy: "SplitSigmasDenoise"
}
export interface SplitSigmasDenoise_output {
    high_sigmas: ComfyNodeOutput<'SIGMAS', 0>,
    low_sigmas: ComfyNodeOutput<'SIGMAS', 1>,
}
export interface SplitSigmasDenoise_input {
    sigmas: _SIGMAS
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// FlipSigmas [sampling_custom_sampling_sigmas]
export interface FlipSigmas extends HasSingle_SIGMAS, ComfyNode<FlipSigmas_input, FlipSigmas_output> {
    nameInComfy: "FlipSigmas"
}
export interface FlipSigmas_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface FlipSigmas_input {
    sigmas: _SIGMAS
}

// CFGGuider [sampling_custom_sampling_guiders]
export interface CFGGuider extends HasSingle_GUIDER, ComfyNode<CFGGuider_input, CFGGuider_output> {
    nameInComfy: "CFGGuider"
}
export interface CFGGuider_output {
    GUIDER: ComfyNodeOutput<'GUIDER', 0>,
}
export interface CFGGuider_input {
    model: _MODEL
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
}

// DualCFGGuider [sampling_custom_sampling_guiders]
export interface DualCFGGuider extends HasSingle_GUIDER, ComfyNode<DualCFGGuider_input, DualCFGGuider_output> {
    nameInComfy: "DualCFGGuider"
}
export interface DualCFGGuider_output {
    GUIDER: ComfyNodeOutput<'GUIDER', 0>,
}
export interface DualCFGGuider_input {
    model: _MODEL
    cond1: _CONDITIONING
    cond2: _CONDITIONING
    negative: _CONDITIONING
    /** default=8 min=100 max=100 step=0.1 */
    cfg_conds?: _FLOAT
    /** default=8 min=100 max=100 step=0.1 */
    cfg_cond2_negative?: _FLOAT
}

// BasicGuider [sampling_custom_sampling_guiders]
export interface BasicGuider extends HasSingle_GUIDER, ComfyNode<BasicGuider_input, BasicGuider_output> {
    nameInComfy: "BasicGuider"
}
export interface BasicGuider_output {
    GUIDER: ComfyNodeOutput<'GUIDER', 0>,
}
export interface BasicGuider_input {
    model: _MODEL
    conditioning: _CONDITIONING
}

// RandomNoise [sampling_custom_sampling_noise]
export interface RandomNoise extends HasSingle_NOISE, ComfyNode<RandomNoise_input, RandomNoise_output> {
    nameInComfy: "RandomNoise"
}
export interface RandomNoise_output {
    NOISE: ComfyNodeOutput<'NOISE', 0>,
}
export interface RandomNoise_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
}

// DisableNoise [sampling_custom_sampling_noise]
export interface DisableNoise extends HasSingle_NOISE, ComfyNode<DisableNoise_input, DisableNoise_output> {
    nameInComfy: "DisableNoise"
}
export interface DisableNoise_output {
    NOISE: ComfyNodeOutput<'NOISE', 0>,
}
export interface DisableNoise_input {
}

// AddNoise [_for_testing_custom_sampling_noise]
export interface AddNoise extends HasSingle_LATENT, ComfyNode<AddNoise_input, AddNoise_output> {
    nameInComfy: "AddNoise"
}
export interface AddNoise_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface AddNoise_input {
    model: _MODEL
    noise: _NOISE
    sigmas: _SIGMAS
    latent_image: _LATENT
}

// SamplerCustomAdvanced [sampling_custom_sampling]
export interface SamplerCustomAdvanced extends ComfyNode<SamplerCustomAdvanced_input, SamplerCustomAdvanced_output> {
    nameInComfy: "SamplerCustomAdvanced"
}
export interface SamplerCustomAdvanced_output {
    output: ComfyNodeOutput<'LATENT', 0>,
    denoised_output: ComfyNodeOutput<'LATENT', 1>,
}
export interface SamplerCustomAdvanced_input {
    noise: _NOISE
    guider: _GUIDER
    sampler: _SAMPLER
    sigmas: _SIGMAS
    latent_image: _LATENT
}

// HyperTile [model_patches_unet]
export interface HyperTile extends HasSingle_MODEL, ComfyNode<HyperTile_input, HyperTile_output> {
    nameInComfy: "HyperTile"
}
export interface HyperTile_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface HyperTile_input {
    model: _MODEL
    /** default=256 min=2048 max=2048 */
    tile_size?: _INT
    /** default=2 min=128 max=128 */
    swap_size?: _INT
    /** default=0 min=10 max=10 */
    max_depth?: _INT
    /** default=false */
    scale_depth?: _BOOLEAN
}

// ModelSamplingDiscrete [advanced_model]
export interface ModelSamplingDiscrete extends HasSingle_MODEL, ComfyNode<ModelSamplingDiscrete_input, ModelSamplingDiscrete_output> {
    nameInComfy: "ModelSamplingDiscrete"
}
export interface ModelSamplingDiscrete_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelSamplingDiscrete_input {
    model: _MODEL
    sampling: Enum_ModelSamplingDiscrete_sampling
    /** default=false */
    zsnr?: _BOOLEAN
}

// ModelSamplingContinuousEDM [advanced_model]
export interface ModelSamplingContinuousEDM extends HasSingle_MODEL, ComfyNode<ModelSamplingContinuousEDM_input, ModelSamplingContinuousEDM_output> {
    nameInComfy: "ModelSamplingContinuousEDM"
}
export interface ModelSamplingContinuousEDM_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelSamplingContinuousEDM_input {
    model: _MODEL
    sampling: Enum_ModelSamplingContinuousEDM_sampling
    /** default=120 min=1000 max=1000 step=0.001 */
    sigma_max?: _FLOAT
    /** default=0.002 min=1000 max=1000 step=0.001 */
    sigma_min?: _FLOAT
}

// ModelSamplingContinuousV [advanced_model]
export interface ModelSamplingContinuousV extends HasSingle_MODEL, ComfyNode<ModelSamplingContinuousV_input, ModelSamplingContinuousV_output> {
    nameInComfy: "ModelSamplingContinuousV"
}
export interface ModelSamplingContinuousV_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelSamplingContinuousV_input {
    model: _MODEL
    sampling: Enum_ModelSamplingContinuousV_sampling
    /** default=500 min=1000 max=1000 step=0.001 */
    sigma_max?: _FLOAT
    /** default=0.03 min=1000 max=1000 step=0.001 */
    sigma_min?: _FLOAT
}

// ModelSamplingStableCascade [advanced_model]
export interface ModelSamplingStableCascade extends HasSingle_MODEL, ComfyNode<ModelSamplingStableCascade_input, ModelSamplingStableCascade_output> {
    nameInComfy: "ModelSamplingStableCascade"
}
export interface ModelSamplingStableCascade_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelSamplingStableCascade_input {
    model: _MODEL
    /** default=2 min=100 max=100 step=0.01 */
    shift?: _FLOAT
}

// ModelSamplingSD3 [advanced_model]
export interface ModelSamplingSD3 extends HasSingle_MODEL, ComfyNode<ModelSamplingSD3_input, ModelSamplingSD3_output> {
    nameInComfy: "ModelSamplingSD3"
}
export interface ModelSamplingSD3_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelSamplingSD3_input {
    model: _MODEL
    /** default=3 min=100 max=100 step=0.01 */
    shift?: _FLOAT
}

// ModelSamplingAuraFlow [advanced_model]
export interface ModelSamplingAuraFlow extends HasSingle_MODEL, ComfyNode<ModelSamplingAuraFlow_input, ModelSamplingAuraFlow_output> {
    nameInComfy: "ModelSamplingAuraFlow"
}
export interface ModelSamplingAuraFlow_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelSamplingAuraFlow_input {
    model: _MODEL
    /** default=1.73 min=100 max=100 step=0.01 */
    shift?: _FLOAT
}

// ModelSamplingFlux [advanced_model]
export interface ModelSamplingFlux extends HasSingle_MODEL, ComfyNode<ModelSamplingFlux_input, ModelSamplingFlux_output> {
    nameInComfy: "ModelSamplingFlux"
}
export interface ModelSamplingFlux_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelSamplingFlux_input {
    model: _MODEL
    /** default=1.15 min=100 max=100 step=0.01 */
    max_shift?: _FLOAT
    /** default=0.5 min=100 max=100 step=0.01 */
    base_shift?: _FLOAT
    /** default=1024 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    height?: _INT
}

// RescaleCFG [advanced_model]
export interface RescaleCFG extends HasSingle_MODEL, ComfyNode<RescaleCFG_input, RescaleCFG_output> {
    nameInComfy: "RescaleCFG"
}
export interface RescaleCFG_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface RescaleCFG_input {
    model: _MODEL
    /** default=0.7 min=1 max=1 step=0.01 */
    multiplier?: _FLOAT
}

// PatchModelAddDownscale [model_patches_unet]
export interface PatchModelAddDownscale extends HasSingle_MODEL, ComfyNode<PatchModelAddDownscale_input, PatchModelAddDownscale_output> {
    nameInComfy: "PatchModelAddDownscale"
}
export interface PatchModelAddDownscale_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface PatchModelAddDownscale_input {
    model: _MODEL
    /** default=3 min=32 max=32 step=1 */
    block_number?: _INT
    /** default=2 min=9 max=9 step=0.001 */
    downscale_factor?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=0.35 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=true */
    downscale_after_skip?: _BOOLEAN
    downscale_method: Enum_LatentUpscale_upscale_method
    upscale_method: Enum_LatentUpscale_upscale_method
}

// ImageCrop [image_transform]
export interface ImageCrop extends HasSingle_IMAGE, ComfyNode<ImageCrop_input, ImageCrop_output> {
    nameInComfy: "ImageCrop"
}
export interface ImageCrop_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageCrop_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=1 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=1 */
    height?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    y?: _INT
}

// RepeatImageBatch [image_batch]
export interface RepeatImageBatch extends HasSingle_IMAGE, ComfyNode<RepeatImageBatch_input, RepeatImageBatch_output> {
    nameInComfy: "RepeatImageBatch"
}
export interface RepeatImageBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface RepeatImageBatch_input {
    image: _IMAGE
    /** default=1 min=4096 max=4096 */
    amount?: _INT
}

// ImageFromBatch [image_batch]
export interface ImageFromBatch extends HasSingle_IMAGE, ComfyNode<ImageFromBatch_input, ImageFromBatch_output> {
    nameInComfy: "ImageFromBatch"
}
export interface ImageFromBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFromBatch_input {
    image: _IMAGE
    /** default=0 min=4095 max=4095 */
    batch_index?: _INT
    /** default=1 min=4096 max=4096 */
    length?: _INT
}

// SaveAnimatedWEBP [image_animation]
export interface SaveAnimatedWEBP extends ComfyNode<SaveAnimatedWEBP_input, SaveAnimatedWEBP_output> {
    nameInComfy: "SaveAnimatedWEBP"
}
export interface SaveAnimatedWEBP_output {
}
export interface SaveAnimatedWEBP_input {
    images: _IMAGE
    /** default="ComfyUI" */
    filename_prefix?: _STRING
    /** default=6 min=1000 max=1000 step=0.01 */
    fps?: _FLOAT
    /** default=true */
    lossless?: _BOOLEAN
    /** default=80 min=100 max=100 */
    quality?: _INT
    method: Enum_SaveAnimatedWEBP_method
}

// SaveAnimatedPNG [image_animation]
export interface SaveAnimatedPNG extends ComfyNode<SaveAnimatedPNG_input, SaveAnimatedPNG_output> {
    nameInComfy: "SaveAnimatedPNG"
}
export interface SaveAnimatedPNG_output {
}
export interface SaveAnimatedPNG_input {
    images: _IMAGE
    /** default="ComfyUI" */
    filename_prefix?: _STRING
    /** default=6 min=1000 max=1000 step=0.01 */
    fps?: _FLOAT
    /** default=4 min=9 max=9 */
    compress_level?: _INT
}

// ImageOnlyCheckpointLoader [loaders_video_models]
export interface ImageOnlyCheckpointLoader extends HasSingle_MODEL, HasSingle_CLIP_VISION, HasSingle_VAE, ComfyNode<ImageOnlyCheckpointLoader_input, ImageOnlyCheckpointLoader_output> {
    nameInComfy: "ImageOnlyCheckpointLoader"
}
export interface ImageOnlyCheckpointLoader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP_VISION: ComfyNodeOutput<'CLIP_VISION', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
}
export interface ImageOnlyCheckpointLoader_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
}

// SVD_img2vid_Conditioning [conditioning_video_models]
export interface SVD$_img2vid$_Conditioning extends HasSingle_LATENT, ComfyNode<SVD$_img2vid$_Conditioning_input, SVD$_img2vid$_Conditioning_output> {
    nameInComfy: "SVD_img2vid_Conditioning"
}
export interface SVD$_img2vid$_Conditioning_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent: ComfyNodeOutput<'LATENT', 2>,
}
export interface SVD$_img2vid$_Conditioning_input {
    clip_vision: _CLIP_VISION
    init_image: _IMAGE
    vae: _VAE
    /** default=1024 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=576 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=14 min=4096 max=4096 */
    video_frames?: _INT
    /** default=127 min=1023 max=1023 */
    motion_bucket_id?: _INT
    /** default=6 min=1024 max=1024 */
    fps?: _INT
    /** default=0 min=10 max=10 step=0.01 */
    augmentation_level?: _FLOAT
}

// VideoLinearCFGGuidance [sampling_video_models]
export interface VideoLinearCFGGuidance extends HasSingle_MODEL, ComfyNode<VideoLinearCFGGuidance_input, VideoLinearCFGGuidance_output> {
    nameInComfy: "VideoLinearCFGGuidance"
}
export interface VideoLinearCFGGuidance_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface VideoLinearCFGGuidance_input {
    model: _MODEL
    /** default=1 min=100 max=100 step=0.5 */
    min_cfg?: _FLOAT
}

// VideoTriangleCFGGuidance [sampling_video_models]
export interface VideoTriangleCFGGuidance extends HasSingle_MODEL, ComfyNode<VideoTriangleCFGGuidance_input, VideoTriangleCFGGuidance_output> {
    nameInComfy: "VideoTriangleCFGGuidance"
}
export interface VideoTriangleCFGGuidance_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface VideoTriangleCFGGuidance_input {
    model: _MODEL
    /** default=1 min=100 max=100 step=0.5 */
    min_cfg?: _FLOAT
}

// ImageOnlyCheckpointSave [advanced_model_merging]
export interface ImageOnlyCheckpointSave extends ComfyNode<ImageOnlyCheckpointSave_input, ImageOnlyCheckpointSave_output> {
    nameInComfy: "ImageOnlyCheckpointSave"
}
export interface ImageOnlyCheckpointSave_output {
}
export interface ImageOnlyCheckpointSave_input {
    model: _MODEL
    clip_vision: _CLIP_VISION
    vae: _VAE
    /** default="checkpoints/ComfyUI" */
    filename_prefix?: _STRING
}

// SelfAttentionGuidance [_for_testing]
export interface SelfAttentionGuidance extends HasSingle_MODEL, ComfyNode<SelfAttentionGuidance_input, SelfAttentionGuidance_output> {
    nameInComfy: "SelfAttentionGuidance"
}
export interface SelfAttentionGuidance_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface SelfAttentionGuidance_input {
    model: _MODEL
    /** default=0.5 min=5 max=5 step=0.01 */
    scale?: _FLOAT
    /** default=2 min=10 max=10 step=0.1 */
    blur_sigma?: _FLOAT
}

// PerpNeg [_for_testing]
export interface PerpNeg extends HasSingle_MODEL, ComfyNode<PerpNeg_input, PerpNeg_output> {
    nameInComfy: "PerpNeg"
}
export interface PerpNeg_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface PerpNeg_input {
    model: _MODEL
    empty_conditioning: _CONDITIONING
    /** default=1 min=100 max=100 step=0.01 */
    neg_scale?: _FLOAT
}

// PerpNegGuider [_for_testing]
export interface PerpNegGuider extends HasSingle_GUIDER, ComfyNode<PerpNegGuider_input, PerpNegGuider_output> {
    nameInComfy: "PerpNegGuider"
}
export interface PerpNegGuider_output {
    GUIDER: ComfyNodeOutput<'GUIDER', 0>,
}
export interface PerpNegGuider_input {
    model: _MODEL
    positive: _CONDITIONING
    negative: _CONDITIONING
    empty_conditioning: _CONDITIONING
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    neg_scale?: _FLOAT
}

// StableZero123_Conditioning [conditioning_3d_models]
export interface StableZero123$_Conditioning extends HasSingle_LATENT, ComfyNode<StableZero123$_Conditioning_input, StableZero123$_Conditioning_output> {
    nameInComfy: "StableZero123_Conditioning"
}
export interface StableZero123$_Conditioning_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent: ComfyNodeOutput<'LATENT', 2>,
}
export interface StableZero123$_Conditioning_input {
    clip_vision: _CLIP_VISION
    init_image: _IMAGE
    vae: _VAE
    /** default=256 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=256 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
    /** default=0 min=180 max=180 step=0.1 */
    elevation?: _FLOAT
    /** default=0 min=180 max=180 step=0.1 */
    azimuth?: _FLOAT
}

// StableZero123_Conditioning_Batched [conditioning_3d_models]
export interface StableZero123$_Conditioning$_Batched extends HasSingle_LATENT, ComfyNode<StableZero123$_Conditioning$_Batched_input, StableZero123$_Conditioning$_Batched_output> {
    nameInComfy: "StableZero123_Conditioning_Batched"
}
export interface StableZero123$_Conditioning$_Batched_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent: ComfyNodeOutput<'LATENT', 2>,
}
export interface StableZero123$_Conditioning$_Batched_input {
    clip_vision: _CLIP_VISION
    init_image: _IMAGE
    vae: _VAE
    /** default=256 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=256 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
    /** default=0 min=180 max=180 step=0.1 */
    elevation?: _FLOAT
    /** default=0 min=180 max=180 step=0.1 */
    azimuth?: _FLOAT
    /** default=0 min=180 max=180 step=0.1 */
    elevation_batch_increment?: _FLOAT
    /** default=0 min=180 max=180 step=0.1 */
    azimuth_batch_increment?: _FLOAT
}

// SV3D_Conditioning [conditioning_3d_models]
export interface SV3D$_Conditioning extends HasSingle_LATENT, ComfyNode<SV3D$_Conditioning_input, SV3D$_Conditioning_output> {
    nameInComfy: "SV3D_Conditioning"
}
export interface SV3D$_Conditioning_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent: ComfyNodeOutput<'LATENT', 2>,
}
export interface SV3D$_Conditioning_input {
    clip_vision: _CLIP_VISION
    init_image: _IMAGE
    vae: _VAE
    /** default=576 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=576 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=21 min=4096 max=4096 */
    video_frames?: _INT
    /** default=0 min=90 max=90 step=0.1 */
    elevation?: _FLOAT
}

// SD_4XUpscale_Conditioning [conditioning_upscale_diffusion]
export interface SD$_4XUpscale$_Conditioning extends HasSingle_LATENT, ComfyNode<SD$_4XUpscale$_Conditioning_input, SD$_4XUpscale$_Conditioning_output> {
    nameInComfy: "SD_4XUpscale_Conditioning"
}
export interface SD$_4XUpscale$_Conditioning_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent: ComfyNodeOutput<'LATENT', 2>,
}
export interface SD$_4XUpscale$_Conditioning_input {
    images: _IMAGE
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=4 min=10 max=10 step=0.01 */
    scale_ratio?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    noise_augmentation?: _FLOAT
}

// PhotoMakerLoader [_for_testing_photomaker]
export interface PhotoMakerLoader extends HasSingle_PHOTOMAKER, ComfyNode<PhotoMakerLoader_input, PhotoMakerLoader_output> {
    nameInComfy: "PhotoMakerLoader"
}
export interface PhotoMakerLoader_output {
    PHOTOMAKER: ComfyNodeOutput<'PHOTOMAKER', 0>,
}
export interface PhotoMakerLoader_input {
    photomaker_model_name: Enum_PhotoMakerLoader_photomaker_model_name
}

// PhotoMakerEncode [_for_testing_photomaker]
export interface PhotoMakerEncode extends HasSingle_CONDITIONING, ComfyNode<PhotoMakerEncode_input, PhotoMakerEncode_output> {
    nameInComfy: "PhotoMakerEncode"
}
export interface PhotoMakerEncode_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface PhotoMakerEncode_input {
    photomaker: _PHOTOMAKER
    image: _IMAGE
    clip: _CLIP
    /** default="photograph of photomaker" */
    text?: _STRING
}

// CLIPTextEncodeControlnet [_for_testing_conditioning]
export interface CLIPTextEncodeControlnet extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncodeControlnet_input, CLIPTextEncodeControlnet_output> {
    nameInComfy: "CLIPTextEncodeControlnet"
}
export interface CLIPTextEncodeControlnet_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPTextEncodeControlnet_input {
    clip: _CLIP
    conditioning: _CONDITIONING
    /** */
    text: _STRING
}

// Morphology [image_postprocessing]
export interface Morphology extends HasSingle_IMAGE, ComfyNode<Morphology_input, Morphology_output> {
    nameInComfy: "Morphology"
}
export interface Morphology_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Morphology_input {
    image: _IMAGE
    operation: Enum_Morphology_operation
    /** default=3 min=999 max=999 step=1 */
    kernel_size?: _INT
}

// StableCascade_EmptyLatentImage [latent_stable_cascade]
export interface StableCascade$_EmptyLatentImage extends ComfyNode<StableCascade$_EmptyLatentImage_input, StableCascade$_EmptyLatentImage_output> {
    nameInComfy: "StableCascade_EmptyLatentImage"
}
export interface StableCascade$_EmptyLatentImage_output {
    stage_c: ComfyNodeOutput<'LATENT', 0>,
    stage_b: ComfyNodeOutput<'LATENT', 1>,
}
export interface StableCascade$_EmptyLatentImage_input {
    /** default=1024 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=42 min=128 max=128 step=1 */
    compression?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// StableCascade_StageB_Conditioning [conditioning_stable_cascade]
export interface StableCascade$_StageB$_Conditioning extends HasSingle_CONDITIONING, ComfyNode<StableCascade$_StageB$_Conditioning_input, StableCascade$_StageB$_Conditioning_output> {
    nameInComfy: "StableCascade_StageB_Conditioning"
}
export interface StableCascade$_StageB$_Conditioning_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface StableCascade$_StageB$_Conditioning_input {
    conditioning: _CONDITIONING
    stage_c: _LATENT
}

// StableCascade_StageC_VAEEncode [latent_stable_cascade]
export interface StableCascade$_StageC$_VAEEncode extends ComfyNode<StableCascade$_StageC$_VAEEncode_input, StableCascade$_StageC$_VAEEncode_output> {
    nameInComfy: "StableCascade_StageC_VAEEncode"
}
export interface StableCascade$_StageC$_VAEEncode_output {
    stage_c: ComfyNodeOutput<'LATENT', 0>,
    stage_b: ComfyNodeOutput<'LATENT', 1>,
}
export interface StableCascade$_StageC$_VAEEncode_input {
    image: _IMAGE
    vae: _VAE
    /** default=42 min=128 max=128 step=1 */
    compression?: _INT
}

// StableCascade_SuperResolutionControlnet [_for_testing_stable_cascade]
export interface StableCascade$_SuperResolutionControlnet extends HasSingle_IMAGE, ComfyNode<StableCascade$_SuperResolutionControlnet_input, StableCascade$_SuperResolutionControlnet_output> {
    nameInComfy: "StableCascade_SuperResolutionControlnet"
}
export interface StableCascade$_SuperResolutionControlnet_output {
    controlnet_input: ComfyNodeOutput<'IMAGE', 0>,
    stage_c: ComfyNodeOutput<'LATENT', 1>,
    stage_b: ComfyNodeOutput<'LATENT', 2>,
}
export interface StableCascade$_SuperResolutionControlnet_input {
    image: _IMAGE
    vae: _VAE
}

// DifferentialDiffusion [_for_testing]
export interface DifferentialDiffusion extends HasSingle_MODEL, ComfyNode<DifferentialDiffusion_input, DifferentialDiffusion_output> {
    nameInComfy: "DifferentialDiffusion"
}
export interface DifferentialDiffusion_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface DifferentialDiffusion_input {
    model: _MODEL
}

// InstructPixToPixConditioning [conditioning_instructpix2pix]
export interface InstructPixToPixConditioning extends HasSingle_LATENT, ComfyNode<InstructPixToPixConditioning_input, InstructPixToPixConditioning_output> {
    nameInComfy: "InstructPixToPixConditioning"
}
export interface InstructPixToPixConditioning_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent: ComfyNodeOutput<'LATENT', 2>,
}
export interface InstructPixToPixConditioning_input {
    positive: _CONDITIONING
    negative: _CONDITIONING
    vae: _VAE
    pixels: _IMAGE
}

// ModelMergeSD1 [advanced_model_merging_model_specific]
export interface ModelMergeSD1 extends HasSingle_MODEL, ComfyNode<ModelMergeSD1_input, ModelMergeSD1_output> {
    nameInComfy: "ModelMergeSD1"
}
export interface ModelMergeSD1_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeSD1_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    "time_embed."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "label_emb."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.3."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.4."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.5."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.6."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.7."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.8."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.9."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.10."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.11."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "middle_block.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "middle_block.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "middle_block.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.3."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.4."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.5."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.6."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.7."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.8."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.9."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.10."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.11."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "out."?: _FLOAT
}

// ModelMergeSD2 [advanced_model_merging_model_specific]
export interface ModelMergeSD2 extends HasSingle_MODEL, ComfyNode<ModelMergeSD2_input, ModelMergeSD2_output> {
    nameInComfy: "ModelMergeSD2"
}
export interface ModelMergeSD2_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeSD2_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    "time_embed."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "label_emb."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.3."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.4."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.5."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.6."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.7."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.8."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.9."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.10."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.11."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "middle_block.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "middle_block.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "middle_block.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.3."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.4."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.5."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.6."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.7."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.8."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.9."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.10."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.11."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "out."?: _FLOAT
}

// ModelMergeSDXL [advanced_model_merging_model_specific]
export interface ModelMergeSDXL extends HasSingle_MODEL, ComfyNode<ModelMergeSDXL_input, ModelMergeSDXL_output> {
    nameInComfy: "ModelMergeSDXL"
}
export interface ModelMergeSDXL_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeSDXL_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    "time_embed."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "label_emb."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.0"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.1"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.2"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.3"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.4"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.5"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.6"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.7"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "input_blocks.8"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "middle_block.0"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "middle_block.1"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "middle_block.2"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.0"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.1"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.2"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.3"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.4"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.5"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.6"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.7"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "output_blocks.8"?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "out."?: _FLOAT
}

// ModelMergeSD3_2B [advanced_model_merging_model_specific]
export interface ModelMergeSD3$_2B extends HasSingle_MODEL, ComfyNode<ModelMergeSD3$_2B_input, ModelMergeSD3$_2B_output> {
    nameInComfy: "ModelMergeSD3_2B"
}
export interface ModelMergeSD3$_2B_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeSD3$_2B_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    "pos_embed."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "x_embedder."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "context_embedder."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "y_embedder."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "t_embedder."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.3."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.4."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.5."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.6."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.7."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.8."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.9."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.10."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.11."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.12."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.13."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.14."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.15."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.16."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.17."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.18."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.19."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.20."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.21."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.22."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.23."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "final_layer."?: _FLOAT
}

// ModelMergeFlux1 [advanced_model_merging_model_specific]
export interface ModelMergeFlux1 extends HasSingle_MODEL, ComfyNode<ModelMergeFlux1_input, ModelMergeFlux1_output> {
    nameInComfy: "ModelMergeFlux1"
}
export interface ModelMergeFlux1_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeFlux1_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    "img_in."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "time_in."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    guidance_in?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "vector_in."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "txt_in."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.3."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.4."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.5."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.6."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.7."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.8."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.9."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.10."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.11."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.12."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.13."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.14."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.15."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.16."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.17."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "double_blocks.18."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.3."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.4."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.5."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.6."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.7."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.8."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.9."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.10."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.11."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.12."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.13."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.14."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.15."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.16."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.17."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.18."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.19."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.20."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.21."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.22."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.23."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.24."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.25."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.26."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.27."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.28."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.29."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.30."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.31."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.32."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.33."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.34."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.35."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.36."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "single_blocks.37."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "final_layer."?: _FLOAT
}

// ModelMergeSD35_Large [advanced_model_merging_model_specific]
export interface ModelMergeSD35$_Large extends HasSingle_MODEL, ComfyNode<ModelMergeSD35$_Large_input, ModelMergeSD35$_Large_output> {
    nameInComfy: "ModelMergeSD35_Large"
}
export interface ModelMergeSD35$_Large_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelMergeSD35$_Large_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    "pos_embed."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "x_embedder."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "context_embedder."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "y_embedder."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "t_embedder."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.0."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.1."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.2."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.3."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.4."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.5."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.6."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.7."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.8."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.9."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.10."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.11."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.12."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.13."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.14."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.15."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.16."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.17."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.18."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.19."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.20."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.21."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.22."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.23."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.24."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.25."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.26."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.27."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.28."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.29."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.30."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.31."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.32."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.33."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.34."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.35."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.36."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "joint_blocks.37."?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    "final_layer."?: _FLOAT
}

// PerturbedAttentionGuidance [model_patches_unet]
export interface PerturbedAttentionGuidance extends HasSingle_MODEL, ComfyNode<PerturbedAttentionGuidance_input, PerturbedAttentionGuidance_output> {
    nameInComfy: "PerturbedAttentionGuidance"
}
export interface PerturbedAttentionGuidance_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface PerturbedAttentionGuidance_input {
    model: _MODEL
    /** default=3 min=100 max=100 step=0.01 */
    scale?: _FLOAT
}

// AlignYourStepsScheduler [sampling_custom_sampling_schedulers]
export interface AlignYourStepsScheduler extends HasSingle_SIGMAS, ComfyNode<AlignYourStepsScheduler_input, AlignYourStepsScheduler_output> {
    nameInComfy: "AlignYourStepsScheduler"
}
export interface AlignYourStepsScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface AlignYourStepsScheduler_input {
    model_type: Enum_AlignYourStepsScheduler_model_type
    /** default=10 min=10000 max=10000 */
    steps?: _INT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// UNetSelfAttentionMultiply [_for_testing_attention_experiments]
export interface UNetSelfAttentionMultiply extends HasSingle_MODEL, ComfyNode<UNetSelfAttentionMultiply_input, UNetSelfAttentionMultiply_output> {
    nameInComfy: "UNetSelfAttentionMultiply"
}
export interface UNetSelfAttentionMultiply_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface UNetSelfAttentionMultiply_input {
    model: _MODEL
    /** default=1 min=10 max=10 step=0.01 */
    q?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    k?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    v?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    out?: _FLOAT
}

// UNetCrossAttentionMultiply [_for_testing_attention_experiments]
export interface UNetCrossAttentionMultiply extends HasSingle_MODEL, ComfyNode<UNetCrossAttentionMultiply_input, UNetCrossAttentionMultiply_output> {
    nameInComfy: "UNetCrossAttentionMultiply"
}
export interface UNetCrossAttentionMultiply_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface UNetCrossAttentionMultiply_input {
    model: _MODEL
    /** default=1 min=10 max=10 step=0.01 */
    q?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    k?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    v?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    out?: _FLOAT
}

// CLIPAttentionMultiply [_for_testing_attention_experiments]
export interface CLIPAttentionMultiply extends HasSingle_CLIP, ComfyNode<CLIPAttentionMultiply_input, CLIPAttentionMultiply_output> {
    nameInComfy: "CLIPAttentionMultiply"
}
export interface CLIPAttentionMultiply_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface CLIPAttentionMultiply_input {
    clip: _CLIP
    /** default=1 min=10 max=10 step=0.01 */
    q?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    k?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    v?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    out?: _FLOAT
}

// UNetTemporalAttentionMultiply [_for_testing_attention_experiments]
export interface UNetTemporalAttentionMultiply extends HasSingle_MODEL, ComfyNode<UNetTemporalAttentionMultiply_input, UNetTemporalAttentionMultiply_output> {
    nameInComfy: "UNetTemporalAttentionMultiply"
}
export interface UNetTemporalAttentionMultiply_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface UNetTemporalAttentionMultiply_input {
    model: _MODEL
    /** default=1 min=10 max=10 step=0.01 */
    self_structural?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    self_temporal?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    cross_structural?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    cross_temporal?: _FLOAT
}

// SamplerLCMUpscale [sampling_custom_sampling_samplers]
export interface SamplerLCMUpscale extends HasSingle_SAMPLER, ComfyNode<SamplerLCMUpscale_input, SamplerLCMUpscale_output> {
    nameInComfy: "SamplerLCMUpscale"
}
export interface SamplerLCMUpscale_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerLCMUpscale_input {
    /** default=1 min=20 max=20 step=0.01 */
    scale_ratio?: _FLOAT
    /** default=-1 min=1000 max=1000 step=1 */
    scale_steps?: _INT
    upscale_method: Enum_LatentUpscale_upscale_method
}

// SamplerEulerCFGpp [_for_testing]
export interface SamplerEulerCFGpp extends HasSingle_SAMPLER, ComfyNode<SamplerEulerCFGpp_input, SamplerEulerCFGpp_output> {
    nameInComfy: "SamplerEulerCFGpp"
}
export interface SamplerEulerCFGpp_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerEulerCFGpp_input {
    version: Enum_SamplerEulerCFGpp_version
}

// WebcamCapture [image]
export interface WebcamCapture extends HasSingle_IMAGE, ComfyNode<WebcamCapture_input, WebcamCapture_output> {
    nameInComfy: "WebcamCapture"
}
export interface WebcamCapture_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface WebcamCapture_input {
    /** */
    image: _WEBCAM
    /** default=0 min=16384 max=16384 step=1 */
    width?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    height?: _INT
    /** default=true */
    capture_on_queue?: _BOOLEAN
}

// EmptyLatentAudio [latent_audio]
export interface EmptyLatentAudio extends HasSingle_LATENT, ComfyNode<EmptyLatentAudio_input, EmptyLatentAudio_output> {
    nameInComfy: "EmptyLatentAudio"
}
export interface EmptyLatentAudio_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface EmptyLatentAudio_input {
    /** default=47.6 min=1000 max=1000 step=0.1 */
    seconds?: _FLOAT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// VAEEncodeAudio [latent_audio]
export interface VAEEncodeAudio extends HasSingle_LATENT, ComfyNode<VAEEncodeAudio_input, VAEEncodeAudio_output> {
    nameInComfy: "VAEEncodeAudio"
}
export interface VAEEncodeAudio_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface VAEEncodeAudio_input {
    audio: _AUDIO
    vae: _VAE
}

// VAEDecodeAudio [latent_audio]
export interface VAEDecodeAudio extends HasSingle_AUDIO, ComfyNode<VAEDecodeAudio_input, VAEDecodeAudio_output> {
    nameInComfy: "VAEDecodeAudio"
}
export interface VAEDecodeAudio_output {
    AUDIO: ComfyNodeOutput<'AUDIO', 0>,
}
export interface VAEDecodeAudio_input {
    samples: _LATENT
    vae: _VAE
}

// SaveAudio [audio]
export interface SaveAudio extends ComfyNode<SaveAudio_input, SaveAudio_output> {
    nameInComfy: "SaveAudio"
}
export interface SaveAudio_output {
}
export interface SaveAudio_input {
    audio: _AUDIO
    /** default="audio/ComfyUI" */
    filename_prefix?: _STRING
}

// LoadAudio [audio]
export interface LoadAudio extends HasSingle_AUDIO, ComfyNode<LoadAudio_input, LoadAudio_output> {
    nameInComfy: "LoadAudio"
}
export interface LoadAudio_output {
    AUDIO: ComfyNodeOutput<'AUDIO', 0>,
}
export interface LoadAudio_input {
    /** */
    audio: Enum_LoadAudio_audio
}

// PreviewAudio [audio]
export interface PreviewAudio extends ComfyNode<PreviewAudio_input, PreviewAudio_output> {
    nameInComfy: "PreviewAudio"
}
export interface PreviewAudio_output {
}
export interface PreviewAudio_input {
    audio: _AUDIO
}

// TripleCLIPLoader [advanced_loaders]
export interface TripleCLIPLoader extends HasSingle_CLIP, ComfyNode<TripleCLIPLoader_input, TripleCLIPLoader_output> {
    nameInComfy: "TripleCLIPLoader"
}
export interface TripleCLIPLoader_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface TripleCLIPLoader_input {
    clip_name1: Enum_CLIPLoader_clip_name
    clip_name2: Enum_CLIPLoader_clip_name
    clip_name3: Enum_CLIPLoader_clip_name
}

// EmptySD3LatentImage [latent_sd3]
export interface EmptySD3LatentImage extends HasSingle_LATENT, ComfyNode<EmptySD3LatentImage_input, EmptySD3LatentImage_output> {
    nameInComfy: "EmptySD3LatentImage"
}
export interface EmptySD3LatentImage_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface EmptySD3LatentImage_input {
    /** default=1024 min=16384 max=16384 step=16 */
    width?: _INT
    /** default=1024 min=16384 max=16384 step=16 */
    height?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// CLIPTextEncodeSD3 [advanced_conditioning]
export interface CLIPTextEncodeSD3 extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncodeSD3_input, CLIPTextEncodeSD3_output> {
    nameInComfy: "CLIPTextEncodeSD3"
}
export interface CLIPTextEncodeSD3_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPTextEncodeSD3_input {
    clip: _CLIP
    /** */
    clip_l: _STRING
    /** */
    clip_g: _STRING
    /** */
    t5xxl: _STRING
    empty_padding: Enum_CLIPTextEncodeSD3_empty_padding
}

// ControlNetApplySD3 [conditioning_controlnet]
export interface ControlNetApplySD3 extends ComfyNode<ControlNetApplySD3_input, ControlNetApplySD3_output> {
    nameInComfy: "ControlNetApplySD3"
}
export interface ControlNetApplySD3_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ControlNetApplySD3_input {
    positive: _CONDITIONING
    negative: _CONDITIONING
    control_net: _CONTROL_NET
    vae: _VAE
    image: _IMAGE
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
}

// SkipLayerGuidanceSD3 [advanced_guidance]
export interface SkipLayerGuidanceSD3 extends HasSingle_MODEL, ComfyNode<SkipLayerGuidanceSD3_input, SkipLayerGuidanceSD3_output> {
    nameInComfy: "SkipLayerGuidanceSD3"
}
export interface SkipLayerGuidanceSD3_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface SkipLayerGuidanceSD3_input {
    model: _MODEL
    /** default="7, 8, 9" */
    layers?: _STRING
    /** default=3 min=10 max=10 step=0.1 */
    scale?: _FLOAT
    /** default=0.01 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=0.15 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
}

// GITSScheduler [sampling_custom_sampling_schedulers]
export interface GITSScheduler extends HasSingle_SIGMAS, ComfyNode<GITSScheduler_input, GITSScheduler_output> {
    nameInComfy: "GITSScheduler"
}
export interface GITSScheduler_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface GITSScheduler_input {
    /** default=1.2 min=1.5 max=1.5 step=0.05 */
    coeff?: _FLOAT
    /** default=10 min=1000 max=1000 */
    steps?: _INT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// SetUnionControlNetType [conditioning_controlnet]
export interface SetUnionControlNetType extends HasSingle_CONTROL_NET, ComfyNode<SetUnionControlNetType_input, SetUnionControlNetType_output> {
    nameInComfy: "SetUnionControlNetType"
}
export interface SetUnionControlNetType_output {
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 0>,
}
export interface SetUnionControlNetType_input {
    control_net: _CONTROL_NET
    type: Enum_SetUnionControlNetType_type
}

// ControlNetInpaintingAliMamaApply [conditioning_controlnet]
export interface ControlNetInpaintingAliMamaApply extends ComfyNode<ControlNetInpaintingAliMamaApply_input, ControlNetInpaintingAliMamaApply_output> {
    nameInComfy: "ControlNetInpaintingAliMamaApply"
}
export interface ControlNetInpaintingAliMamaApply_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ControlNetInpaintingAliMamaApply_input {
    positive: _CONDITIONING
    negative: _CONDITIONING
    control_net: _CONTROL_NET
    vae: _VAE
    image: _IMAGE
    mask: _MASK
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
}

// CLIPTextEncodeHunyuanDiT [advanced_conditioning]
export interface CLIPTextEncodeHunyuanDiT extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncodeHunyuanDiT_input, CLIPTextEncodeHunyuanDiT_output> {
    nameInComfy: "CLIPTextEncodeHunyuanDiT"
}
export interface CLIPTextEncodeHunyuanDiT_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPTextEncodeHunyuanDiT_input {
    clip: _CLIP
    /** */
    bert: _STRING
    /** */
    mt5xl: _STRING
}

// CLIPTextEncodeFlux [advanced_conditioning_flux]
export interface CLIPTextEncodeFlux extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncodeFlux_input, CLIPTextEncodeFlux_output> {
    nameInComfy: "CLIPTextEncodeFlux"
}
export interface CLIPTextEncodeFlux_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPTextEncodeFlux_input {
    clip: _CLIP
    /** */
    clip_l: _STRING
    /** */
    t5xxl: _STRING
    /** default=3.5 min=100 max=100 step=0.1 */
    guidance?: _FLOAT
}

// FluxGuidance [advanced_conditioning_flux]
export interface FluxGuidance extends HasSingle_CONDITIONING, ComfyNode<FluxGuidance_input, FluxGuidance_output> {
    nameInComfy: "FluxGuidance"
}
export interface FluxGuidance_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface FluxGuidance_input {
    conditioning: _CONDITIONING
    /** default=3.5 min=100 max=100 step=0.1 */
    guidance?: _FLOAT
}

// LoraSave [_for_testing]
export interface LoraSave extends ComfyNode<LoraSave_input, LoraSave_output> {
    nameInComfy: "LoraSave"
}
export interface LoraSave_output {
}
export interface LoraSave_input {
    /** default="loras/ComfyUI_extracted_lora" */
    filename_prefix?: _STRING
    /** default=8 min=4096 max=4096 step=1 */
    rank?: _INT
    lora_type: Enum_LoraSave_lora_type
    /** default=true */
    bias_diff?: _BOOLEAN
    /** */
    model_diff?: _MODEL
    /** */
    text_encoder_diff?: _CLIP
}

// TorchCompileModel [_for_testing]
export interface TorchCompileModel extends HasSingle_MODEL, ComfyNode<TorchCompileModel_input, TorchCompileModel_output> {
    nameInComfy: "TorchCompileModel"
}
export interface TorchCompileModel_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface TorchCompileModel_input {
    model: _MODEL
    backend: Enum_TorchCompileModel_backend
}

// EmptyMochiLatentVideo [latent_mochi]
export interface EmptyMochiLatentVideo extends HasSingle_LATENT, ComfyNode<EmptyMochiLatentVideo_input, EmptyMochiLatentVideo_output> {
    nameInComfy: "EmptyMochiLatentVideo"
}
export interface EmptyMochiLatentVideo_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface EmptyMochiLatentVideo_input {
    /** default=848 min=16384 max=16384 step=16 */
    width?: _INT
    /** default=480 min=16384 max=16384 step=16 */
    height?: _INT
    /** default=25 min=16384 max=16384 step=6 */
    length?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// Base64ImageInput [A8R8]
export interface Base64ImageInput extends HasSingle_IMAGE, ComfyNode<Base64ImageInput_input, Base64ImageInput_output> {
    nameInComfy: "Base64ImageInput"
}
export interface Base64ImageInput_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Base64ImageInput_input {
    /** default="" */
    base64_image?: _STRING
}

// Base64ImageOutput [A8R8]
export interface Base64ImageOutput extends ComfyNode<Base64ImageOutput_input, Base64ImageOutput_output> {
    nameInComfy: "Base64ImageOutput"
}
export interface Base64ImageOutput_output {
}
export interface Base64ImageOutput_input {
    images: _IMAGE
}

// AttentionCouple [A8R8]
export interface AttentionCouple extends HasSingle_MODEL, ComfyNode<AttentionCouple_input, AttentionCouple_output> {
    nameInComfy: "AttentionCouple"
}
export interface AttentionCouple_output {
    model: ComfyNodeOutput<'MODEL', 0>,
}
export interface AttentionCouple_input {
    model: _MODEL
    base_prompt: _CONDITIONING
    /** default=0.3 min=1 max=1 step=0.1 */
    global_prompt_weight?: _FLOAT
    /** */
    regions: _ATTENTION_COUPLE_REGION
    /** default=1024 min=undefined step=8 */
    width?: _INT
    /** default=1024 min=undefined step=8 */
    height?: _INT
    /** default=false */
    ip_adapter_active?: _BOOLEAN
}

// AttentionCoupleRegion [A8R8]
export interface AttentionCoupleRegion extends HasSingle_ATTENTION_COUPLE_REGION, ComfyNode<AttentionCoupleRegion_input, AttentionCoupleRegion_output> {
    nameInComfy: "AttentionCoupleRegion"
}
export interface AttentionCoupleRegion_output {
    region: ComfyNodeOutput<'ATTENTION_COUPLE_REGION', 0>,
}
export interface AttentionCoupleRegion_input {
    cond: _CONDITIONING
    mask: _MASK
    /** default=1 min=1 max=1 step=0.01 */
    weight?: _FLOAT
}

// AttentionCoupleRegions [A8R8]
export interface AttentionCoupleRegions extends HasSingle_ATTENTION_COUPLE_REGION, ComfyNode<AttentionCoupleRegions_input, AttentionCoupleRegions_output> {
    nameInComfy: "AttentionCoupleRegions"
}
export interface AttentionCoupleRegions_output {
    regions: ComfyNodeOutput<'ATTENTION_COUPLE_REGION', 0>,
}
export interface AttentionCoupleRegions_input {
    region_1?: _ATTENTION_COUPLE_REGION
    region_2?: _ATTENTION_COUPLE_REGION
    region_3?: _ATTENTION_COUPLE_REGION
    region_4?: _ATTENTION_COUPLE_REGION
    region_5?: _ATTENTION_COUPLE_REGION
    region_6?: _ATTENTION_COUPLE_REGION
    region_7?: _ATTENTION_COUPLE_REGION
    region_8?: _ATTENTION_COUPLE_REGION
    region_9?: _ATTENTION_COUPLE_REGION
    region_10?: _ATTENTION_COUPLE_REGION
    region_11?: _ATTENTION_COUPLE_REGION
    regions?: _ATTENTION_COUPLE_REGION
}

// CLIPSeg [image]
export interface CLIPSeg extends HasSingle_MASK, ComfyNode<CLIPSeg_input, CLIPSeg_output> {
    nameInComfy: "CLIPSeg"
}
export interface CLIPSeg_output {
    Mask: ComfyNodeOutput<'MASK', 0>,
    "Heatmap$_Mask": ComfyNodeOutput<'IMAGE', 1>,
    "BW$_Mask": ComfyNodeOutput<'IMAGE', 2>,
}
export interface CLIPSeg_input {
    image: _IMAGE
    /** */
    text: _STRING
    /** default=7 min=15 max=15 step=0.1 */
    blur?: _FLOAT
    /** default=0.4 min=1 max=1 step=0.05 */
    threshold?: _FLOAT
    /** default=4 min=10 max=10 step=1 */
    dilation_factor?: _INT
}

// CombineSegMasks [image]
export interface CombineSegMasks extends HasSingle_MASK, ComfyNode<CombineSegMasks_input, CombineSegMasks_output> {
    nameInComfy: "CombineSegMasks"
}
export interface CombineSegMasks_output {
    "Combined$_Mask": ComfyNodeOutput<'MASK', 0>,
    "Heatmap$_Mask": ComfyNodeOutput<'IMAGE', 1>,
    "BW$_Mask": ComfyNodeOutput<'IMAGE', 2>,
}
export interface CombineSegMasks_input {
    input_image: _IMAGE
    mask_1: _MASK
    mask_2: _MASK
    mask_3?: _MASK
}

// CivitAI_Lora_Loader [CivitAI_Loaders]
export interface CivitAI$_Lora$_Loader extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<CivitAI$_Lora$_Loader_input, CivitAI$_Lora$_Loader_output> {
    nameInComfy: "CivitAI_Lora_Loader"
}
export interface CivitAI$_Lora$_Loader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
}
export interface CivitAI$_Lora$_Loader_input {
    model: _MODEL
    clip: _CLIP
    /** default="{model_id}@{model_version}" */
    lora_air?: _STRING
    lora_name: Enum_CivitAI$_Lora$_Loader_lora_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength_clip?: _FLOAT
    /** default="" */
    api_key?: _STRING
    /** default=4 min=12 max=12 step=1 */
    download_chunks?: _INT
    download_path?: Enum_CivitAI$_Lora$_Loader_download_path
}

// CivitAI_Checkpoint_Loader [CivitAI_Loaders]
export interface CivitAI$_Checkpoint$_Loader extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<CivitAI$_Checkpoint$_Loader_input, CivitAI$_Checkpoint$_Loader_output> {
    nameInComfy: "CivitAI_Checkpoint_Loader"
}
export interface CivitAI$_Checkpoint$_Loader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
}
export interface CivitAI$_Checkpoint$_Loader_input {
    /** default="{model_id}@{model_version}" */
    ckpt_air?: _STRING
    ckpt_name: Enum_CivitAI$_Checkpoint$_Loader_ckpt_name
    /** default="" */
    api_key?: _STRING
    /** default=4 min=12 max=12 step=1 */
    download_chunks?: _INT
    download_path?: Enum_CivitAI$_Checkpoint$_Loader_download_path
}

// AlphaChanelAdd [image_alpha]
export interface AlphaChanelAdd extends HasSingle_IMAGE, ComfyNode<AlphaChanelAdd_input, AlphaChanelAdd_output> {
    nameInComfy: "AlphaChanelAdd"
}
export interface AlphaChanelAdd_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface AlphaChanelAdd_input {
    images: _IMAGE
}

// AlphaChanelAddByMask [image_alpha]
export interface AlphaChanelAddByMask extends HasSingle_IMAGE, ComfyNode<AlphaChanelAddByMask_input, AlphaChanelAddByMask_output> {
    nameInComfy: "AlphaChanelAddByMask"
}
export interface AlphaChanelAddByMask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface AlphaChanelAddByMask_input {
    images: _IMAGE
    mask: _MASK
    method: Enum_AlphaChanelAddByMask_method
}

// AlphaChanelAsMask [image_alpha]
export interface AlphaChanelAsMask extends HasSingle_MASK, ComfyNode<AlphaChanelAsMask_input, AlphaChanelAsMask_output> {
    nameInComfy: "AlphaChanelAsMask"
}
export interface AlphaChanelAsMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface AlphaChanelAsMask_input {
    images: _IMAGE
    method: Enum_AlphaChanelAddByMask_method
}

// AlphaChanelRestore [image_alpha]
export interface AlphaChanelRestore extends HasSingle_IMAGE, ComfyNode<AlphaChanelRestore_input, AlphaChanelRestore_output> {
    nameInComfy: "AlphaChanelRestore"
}
export interface AlphaChanelRestore_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface AlphaChanelRestore_input {
    images: _IMAGE
}

// AlphaChanelRemove [image_alpha]
export interface AlphaChanelRemove extends HasSingle_IMAGE, ComfyNode<AlphaChanelRemove_input, AlphaChanelRemove_output> {
    nameInComfy: "AlphaChanelRemove"
}
export interface AlphaChanelRemove_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface AlphaChanelRemove_input {
    images: _IMAGE
}

// ClipClamp [clamp]
export interface ClipClamp extends HasSingle_CLIP, ComfyNode<ClipClamp_input, ClipClamp_output> {
    nameInComfy: "ClipClamp"
}
export interface ClipClamp_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface ClipClamp_input {
    clip: _CLIP
}

// ClipVisionClamp [clamp]
export interface ClipVisionClamp extends HasSingle_CLIP_VISION, ComfyNode<ClipVisionClamp_input, ClipVisionClamp_output> {
    nameInComfy: "ClipVisionClamp"
}
export interface ClipVisionClamp_output {
    CLIP_VISION: ComfyNodeOutput<'CLIP_VISION', 0>,
}
export interface ClipVisionClamp_input {
    clip_vision: _CLIP_VISION
}

// ClipVisionOutputClamp [clamp]
export interface ClipVisionOutputClamp extends HasSingle_CLIP_VISION_OUTPUT, ComfyNode<ClipVisionOutputClamp_input, ClipVisionOutputClamp_output> {
    nameInComfy: "ClipVisionOutputClamp"
}
export interface ClipVisionOutputClamp_output {
    CLIP_VISION_OUTPUT: ComfyNodeOutput<'CLIP_VISION_OUTPUT', 0>,
}
export interface ClipVisionOutputClamp_input {
    clip_vision_output: _CLIP_VISION_OUTPUT
}

// ConditioningClamp [clamp]
export interface ConditioningClamp extends HasSingle_CONDITIONING, ComfyNode<ConditioningClamp_input, ConditioningClamp_output> {
    nameInComfy: "ConditioningClamp"
}
export interface ConditioningClamp_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningClamp_input {
    conditioning: _CONDITIONING
}

// ControlNetClamp [clamp]
export interface ControlNetClamp extends HasSingle_CONTROL_NET, ComfyNode<ControlNetClamp_input, ControlNetClamp_output> {
    nameInComfy: "ControlNetClamp"
}
export interface ControlNetClamp_output {
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 0>,
}
export interface ControlNetClamp_input {
    control_net_clamp: _CONTROL_NET
}

// GligenClamp [clamp]
export interface GligenClamp extends HasSingle_GLIGEN, ComfyNode<GligenClamp_input, GligenClamp_output> {
    nameInComfy: "GligenClamp"
}
export interface GligenClamp_output {
    GLIGEN: ComfyNodeOutput<'GLIGEN', 0>,
}
export interface GligenClamp_input {
    gligen: _GLIGEN
}

// ImageClamp [clamp]
export interface ImageClamp extends HasSingle_IMAGE, ComfyNode<ImageClamp_input, ImageClamp_output> {
    nameInComfy: "ImageClamp"
}
export interface ImageClamp_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageClamp_input {
    image: _IMAGE
}

// LatentClamp [clamp]
export interface LatentClamp extends HasSingle_LATENT, ComfyNode<LatentClamp_input, LatentClamp_output> {
    nameInComfy: "LatentClamp"
}
export interface LatentClamp_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentClamp_input {
    latent: _LATENT
}

// MaskClamp [clamp]
export interface MaskClamp extends HasSingle_MASK, ComfyNode<MaskClamp_input, MaskClamp_output> {
    nameInComfy: "MaskClamp"
}
export interface MaskClamp_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskClamp_input {
    mask: _MASK
}

// ModelClamp [clamp]
export interface ModelClamp extends HasSingle_MODEL, ComfyNode<ModelClamp_input, ModelClamp_output> {
    nameInComfy: "ModelClamp"
}
export interface ModelClamp_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelClamp_input {
    model: _MODEL
}

// StyleModelClamp [clamp]
export interface StyleModelClamp extends HasSingle_STYLE_MODEL, ComfyNode<StyleModelClamp_input, StyleModelClamp_output> {
    nameInComfy: "StyleModelClamp"
}
export interface StyleModelClamp_output {
    STYLE_MODEL: ComfyNodeOutput<'STYLE_MODEL', 0>,
}
export interface StyleModelClamp_input {
    style_model: _STYLE_MODEL
}

// UpscaleModelClamp [clamp]
export interface UpscaleModelClamp extends HasSingle_UPSCALE_MODEL, ComfyNode<UpscaleModelClamp_input, UpscaleModelClamp_output> {
    nameInComfy: "UpscaleModelClamp"
}
export interface UpscaleModelClamp_output {
    UPSCALE_MODEL: ComfyNodeOutput<'UPSCALE_MODEL', 0>,
}
export interface UpscaleModelClamp_input {
    upscale_model: _UPSCALE_MODEL
}

// VaeClamp [clamp]
export interface VaeClamp extends HasSingle_VAE, ComfyNode<VaeClamp_input, VaeClamp_output> {
    nameInComfy: "VaeClamp"
}
export interface VaeClamp_output {
    VAE: ComfyNodeOutput<'VAE', 0>,
}
export interface VaeClamp_input {
    vae: _VAE
}

// ImageBatchGet [image_batch]
export interface ImageBatchGet extends HasSingle_IMAGE, ComfyNode<ImageBatchGet_input, ImageBatchGet_output> {
    nameInComfy: "ImageBatchGet"
}
export interface ImageBatchGet_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchGet_input {
    images: _IMAGE
    /** default=1 min=undefined step=1 */
    index?: _INT
}

// ImageBatchCopy [image_batch]
export interface ImageBatchCopy extends HasSingle_IMAGE, ComfyNode<ImageBatchCopy_input, ImageBatchCopy_output> {
    nameInComfy: "ImageBatchCopy"
}
export interface ImageBatchCopy_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchCopy_input {
    images: _IMAGE
    /** default=1 min=undefined step=1 */
    index?: _INT
    /** default=1 min=undefined step=1 */
    quantity?: _INT
}

// ImageBatchRemove [image_batch]
export interface ImageBatchRemove extends HasSingle_IMAGE, ComfyNode<ImageBatchRemove_input, ImageBatchRemove_output> {
    nameInComfy: "ImageBatchRemove"
}
export interface ImageBatchRemove_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchRemove_input {
    images: _IMAGE
    /** default=1 min=undefined step=1 */
    index?: _INT
}

// ImageBatchFork [image_batch]
export interface ImageBatchFork extends ComfyNode<ImageBatchFork_input, ImageBatchFork_output> {
    nameInComfy: "ImageBatchFork"
}
export interface ImageBatchFork_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    IMAGE_1: ComfyNodeOutput<'IMAGE', 1>,
}
export interface ImageBatchFork_input {
    images: _IMAGE
    priority: Enum_ImageBatchFork_priority
}

// ImageBatchJoin [image_batch]
export interface ImageBatchJoin extends HasSingle_IMAGE, ComfyNode<ImageBatchJoin_input, ImageBatchJoin_output> {
    nameInComfy: "ImageBatchJoin"
}
export interface ImageBatchJoin_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchJoin_input {
    images_a: _IMAGE
    images_b: _IMAGE
}

// ImageBatchPermute [image_batch]
export interface ImageBatchPermute extends HasSingle_IMAGE, ComfyNode<ImageBatchPermute_input, ImageBatchPermute_output> {
    nameInComfy: "ImageBatchPermute"
}
export interface ImageBatchPermute_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchPermute_input {
    images: _IMAGE
    /** */
    permute: _STRING
    start_with_zero: _BOOLEAN
}

// ImageCompositeAbsolute [image_composite]
export interface ImageCompositeAbsolute extends HasSingle_IMAGE, ComfyNode<ImageCompositeAbsolute_input, ImageCompositeAbsolute_output> {
    nameInComfy: "ImageCompositeAbsolute"
}
export interface ImageCompositeAbsolute_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageCompositeAbsolute_input {
    images_a: _IMAGE
    images_b: _IMAGE
    /** default=0 step=1 */
    images_a_x?: _INT
    /** default=0 step=1 */
    images_a_y?: _INT
    /** default=0 step=1 */
    images_b_x?: _INT
    /** default=0 step=1 */
    images_b_y?: _INT
    /** default=0 step=1 */
    container_width?: _INT
    /** default=0 step=1 */
    container_height?: _INT
    background: Enum_ImageCompositeAbsolute_background
    method: Enum_ImageCompositeAbsolute_method
}

// ImageCompositeAbsoluteByContainer [image_composite]
export interface ImageCompositeAbsoluteByContainer extends HasSingle_IMAGE, ComfyNode<ImageCompositeAbsoluteByContainer_input, ImageCompositeAbsoluteByContainer_output> {
    nameInComfy: "ImageCompositeAbsoluteByContainer"
}
export interface ImageCompositeAbsoluteByContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageCompositeAbsoluteByContainer_input {
    container: _IMAGE
    images_a: _IMAGE
    images_b: _IMAGE
    /** default=0 step=1 */
    images_a_x?: _INT
    /** default=0 step=1 */
    images_a_y?: _INT
    /** default=0 step=1 */
    images_b_x?: _INT
    /** default=0 step=1 */
    images_b_y?: _INT
    background: Enum_ImageCompositeAbsolute_background
    method: Enum_ImageCompositeAbsolute_method
}

// ImageCompositeRelative [image_composite]
export interface ImageCompositeRelative extends HasSingle_IMAGE, ComfyNode<ImageCompositeRelative_input, ImageCompositeRelative_output> {
    nameInComfy: "ImageCompositeRelative"
}
export interface ImageCompositeRelative_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageCompositeRelative_input {
    images_a: _IMAGE
    images_b: _IMAGE
    /** default=0 max=1 step=0.01 */
    images_a_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    images_a_y?: _FLOAT
    /** default=0 max=1 step=0.01 */
    images_b_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    images_b_y?: _FLOAT
    background: Enum_ImageCompositeAbsolute_background
    container_size_type: Enum_ImageCompositeRelative_container_size_type
    method: Enum_ImageCompositeAbsolute_method
}

// ImageCompositeRelativeByContainer [image_composite]
export interface ImageCompositeRelativeByContainer extends HasSingle_IMAGE, ComfyNode<ImageCompositeRelativeByContainer_input, ImageCompositeRelativeByContainer_output> {
    nameInComfy: "ImageCompositeRelativeByContainer"
}
export interface ImageCompositeRelativeByContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageCompositeRelativeByContainer_input {
    container: _IMAGE
    images_a: _IMAGE
    images_b: _IMAGE
    /** default=0 max=1 step=0.01 */
    images_a_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    images_a_y?: _FLOAT
    /** default=0 max=1 step=0.01 */
    images_b_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    images_b_y?: _FLOAT
    background: Enum_ImageCompositeAbsolute_background
    method: Enum_ImageCompositeAbsolute_method
}

// ImageContainer [image_container]
export interface ImageContainer extends HasSingle_IMAGE, ComfyNode<ImageContainer_input, ImageContainer_output> {
    nameInComfy: "ImageContainer"
}
export interface ImageContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageContainer_input {
    /** default=512 min=undefined step=1 */
    width?: _INT
    /** default=512 min=undefined step=1 */
    height?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=0 max=1 step=0.01 */
    alpha?: _FLOAT
}

// ImageContainerInheritanceAdd [image_container]
export interface ImageContainerInheritanceAdd extends HasSingle_IMAGE, ComfyNode<ImageContainerInheritanceAdd_input, ImageContainerInheritanceAdd_output> {
    nameInComfy: "ImageContainerInheritanceAdd"
}
export interface ImageContainerInheritanceAdd_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageContainerInheritanceAdd_input {
    images: _IMAGE
    /** default=0 step=1 */
    add_width?: _INT
    /** default=0 step=1 */
    add_height?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=0 max=1 step=0.01 */
    alpha?: _FLOAT
    method: Enum_ImageContainerInheritanceAdd_method
}

// ImageContainerInheritanceScale [image_container]
export interface ImageContainerInheritanceScale extends HasSingle_IMAGE, ComfyNode<ImageContainerInheritanceScale_input, ImageContainerInheritanceScale_output> {
    nameInComfy: "ImageContainerInheritanceScale"
}
export interface ImageContainerInheritanceScale_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageContainerInheritanceScale_input {
    images: _IMAGE
    /** default=1 step=0.1 */
    scale_width?: _FLOAT
    /** default=1 step=0.1 */
    scale_height?: _FLOAT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=0 max=1 step=0.01 */
    alpha?: _FLOAT
    method: Enum_ImageContainerInheritanceAdd_method
}

// ImageContainerInheritanceMax [image_container]
export interface ImageContainerInheritanceMax extends HasSingle_IMAGE, ComfyNode<ImageContainerInheritanceMax_input, ImageContainerInheritanceMax_output> {
    nameInComfy: "ImageContainerInheritanceMax"
}
export interface ImageContainerInheritanceMax_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageContainerInheritanceMax_input {
    images_a: _IMAGE
    images_b: _IMAGE
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=0 max=1 step=0.01 */
    alpha?: _FLOAT
    method: Enum_ImageContainerInheritanceMax_method
}

// ImageContainerInheritanceSum [image_container]
export interface ImageContainerInheritanceSum extends HasSingle_IMAGE, ComfyNode<ImageContainerInheritanceSum_input, ImageContainerInheritanceSum_output> {
    nameInComfy: "ImageContainerInheritanceSum"
}
export interface ImageContainerInheritanceSum_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageContainerInheritanceSum_input {
    images_a: _IMAGE
    images_b: _IMAGE
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=0 max=1 step=0.01 */
    alpha?: _FLOAT
    container_size_type: Enum_ImageContainerInheritanceSum_container_size_type
    method: Enum_ImageContainerInheritanceMax_method
}

// ImageDrawArc [image_draw]
export interface ImageDrawArc extends HasSingle_IMAGE, ComfyNode<ImageDrawArc_input, ImageDrawArc_output> {
    nameInComfy: "ImageDrawArc"
}
export interface ImageDrawArc_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawArc_input {
    /** default=256 min=undefined step=1 */
    width?: _INT
    /** default=256 min=undefined step=1 */
    height?: _INT
    /** default=1 min=undefined step=1 */
    size?: _INT
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=0 max=360 step=1 */
    start?: _INT
    /** default=180 max=360 step=1 */
    end?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawArcByContainer [image_draw]
export interface ImageDrawArcByContainer extends HasSingle_IMAGE, ComfyNode<ImageDrawArcByContainer_input, ImageDrawArcByContainer_output> {
    nameInComfy: "ImageDrawArcByContainer"
}
export interface ImageDrawArcByContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawArcByContainer_input {
    container: _IMAGE
    /** default=1 min=undefined step=1 */
    size?: _INT
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=0 max=360 step=1 */
    start?: _INT
    /** default=180 max=360 step=1 */
    end?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawChord [image_draw]
export interface ImageDrawChord extends HasSingle_IMAGE, ComfyNode<ImageDrawChord_input, ImageDrawChord_output> {
    nameInComfy: "ImageDrawChord"
}
export interface ImageDrawChord_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawChord_input {
    /** default=256 min=undefined step=1 */
    width?: _INT
    /** default=256 min=undefined step=1 */
    height?: _INT
    /** default=1 min=undefined step=1 */
    size?: _INT
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=0 max=360 step=1 */
    start?: _INT
    /** default=180 max=360 step=1 */
    end?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawChordByContainer [image_draw]
export interface ImageDrawChordByContainer extends HasSingle_IMAGE, ComfyNode<ImageDrawChordByContainer_input, ImageDrawChordByContainer_output> {
    nameInComfy: "ImageDrawChordByContainer"
}
export interface ImageDrawChordByContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawChordByContainer_input {
    container: _IMAGE
    /** default=1 min=undefined step=1 */
    size?: _INT
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=0 max=360 step=1 */
    start?: _INT
    /** default=180 max=360 step=1 */
    end?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawEllipse [image_draw]
export interface ImageDrawEllipse extends HasSingle_IMAGE, ComfyNode<ImageDrawEllipse_input, ImageDrawEllipse_output> {
    nameInComfy: "ImageDrawEllipse"
}
export interface ImageDrawEllipse_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawEllipse_input {
    /** default=256 min=undefined step=1 */
    width?: _INT
    /** default=256 min=undefined step=1 */
    height?: _INT
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    outline_alpha?: _FLOAT
    /** default=255 max=255 step=1 */
    fill_red?: _INT
    /** default=255 max=255 step=1 */
    fill_green?: _INT
    /** default=255 max=255 step=1 */
    fill_blue?: _INT
    /** default=1 max=1 step=0.01 */
    fill_alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawEllipseByContainer [image_draw]
export interface ImageDrawEllipseByContainer extends HasSingle_IMAGE, ComfyNode<ImageDrawEllipseByContainer_input, ImageDrawEllipseByContainer_output> {
    nameInComfy: "ImageDrawEllipseByContainer"
}
export interface ImageDrawEllipseByContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawEllipseByContainer_input {
    container: _IMAGE
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    outline_alpha?: _FLOAT
    /** default=255 max=255 step=1 */
    fill_red?: _INT
    /** default=255 max=255 step=1 */
    fill_green?: _INT
    /** default=255 max=255 step=1 */
    fill_blue?: _INT
    /** default=1 max=1 step=0.01 */
    fill_alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawLine [image_draw]
export interface ImageDrawLine extends HasSingle_IMAGE, ComfyNode<ImageDrawLine_input, ImageDrawLine_output> {
    nameInComfy: "ImageDrawLine"
}
export interface ImageDrawLine_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawLine_input {
    /** default=256 min=undefined step=1 */
    width?: _INT
    /** default=256 min=undefined step=1 */
    height?: _INT
    /** default=1 min=undefined step=1 */
    size?: _INT
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawLineByContainer [image_draw]
export interface ImageDrawLineByContainer extends HasSingle_IMAGE, ComfyNode<ImageDrawLineByContainer_input, ImageDrawLineByContainer_output> {
    nameInComfy: "ImageDrawLineByContainer"
}
export interface ImageDrawLineByContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawLineByContainer_input {
    container: _IMAGE
    /** default=1 min=undefined step=1 */
    size?: _INT
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawPieslice [image_draw]
export interface ImageDrawPieslice extends HasSingle_IMAGE, ComfyNode<ImageDrawPieslice_input, ImageDrawPieslice_output> {
    nameInComfy: "ImageDrawPieslice"
}
export interface ImageDrawPieslice_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawPieslice_input {
    /** default=256 min=undefined step=1 */
    width?: _INT
    /** default=256 min=undefined step=1 */
    height?: _INT
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=0 max=360 step=1 */
    start?: _INT
    /** default=240 max=360 step=1 */
    end?: _INT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    outline_alpha?: _FLOAT
    /** default=255 max=255 step=1 */
    fill_red?: _INT
    /** default=255 max=255 step=1 */
    fill_green?: _INT
    /** default=255 max=255 step=1 */
    fill_blue?: _INT
    /** default=1 max=1 step=0.01 */
    fill_alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawPiesliceByContainer [image_draw]
export interface ImageDrawPiesliceByContainer extends HasSingle_IMAGE, ComfyNode<ImageDrawPiesliceByContainer_input, ImageDrawPiesliceByContainer_output> {
    nameInComfy: "ImageDrawPiesliceByContainer"
}
export interface ImageDrawPiesliceByContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawPiesliceByContainer_input {
    container: _IMAGE
    /** default=0 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=1 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=0 max=360 step=1 */
    start?: _INT
    /** default=240 max=360 step=1 */
    end?: _INT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    outline_alpha?: _FLOAT
    /** default=255 max=255 step=1 */
    fill_red?: _INT
    /** default=255 max=255 step=1 */
    fill_green?: _INT
    /** default=255 max=255 step=1 */
    fill_blue?: _INT
    /** default=1 max=1 step=0.01 */
    fill_alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawRectangle [image_draw]
export interface ImageDrawRectangle extends HasSingle_IMAGE, ComfyNode<ImageDrawRectangle_input, ImageDrawRectangle_output> {
    nameInComfy: "ImageDrawRectangle"
}
export interface ImageDrawRectangle_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawRectangle_input {
    /** default=256 min=undefined step=1 */
    width?: _INT
    /** default=256 min=undefined step=1 */
    height?: _INT
    /** default=0.1 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0.2 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=0.9 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=0.8 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    outline_alpha?: _FLOAT
    /** default=255 max=255 step=1 */
    fill_red?: _INT
    /** default=255 max=255 step=1 */
    fill_green?: _INT
    /** default=255 max=255 step=1 */
    fill_blue?: _INT
    /** default=1 max=1 step=0.01 */
    fill_alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawRectangleByContainer [image_draw]
export interface ImageDrawRectangleByContainer extends HasSingle_IMAGE, ComfyNode<ImageDrawRectangleByContainer_input, ImageDrawRectangleByContainer_output> {
    nameInComfy: "ImageDrawRectangleByContainer"
}
export interface ImageDrawRectangleByContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawRectangleByContainer_input {
    container: _IMAGE
    /** default=0.1 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0.2 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=0.9 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=0.8 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    outline_alpha?: _FLOAT
    /** default=255 max=255 step=1 */
    fill_red?: _INT
    /** default=255 max=255 step=1 */
    fill_green?: _INT
    /** default=255 max=255 step=1 */
    fill_blue?: _INT
    /** default=1 max=1 step=0.01 */
    fill_alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawRectangleRounded [image_draw]
export interface ImageDrawRectangleRounded extends HasSingle_IMAGE, ComfyNode<ImageDrawRectangleRounded_input, ImageDrawRectangleRounded_output> {
    nameInComfy: "ImageDrawRectangleRounded"
}
export interface ImageDrawRectangleRounded_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawRectangleRounded_input {
    /** default=256 min=undefined step=1 */
    width?: _INT
    /** default=256 min=undefined step=1 */
    height?: _INT
    /** default=0.1 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0.2 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=0.9 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=0.8 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=180 max=360 step=1 */
    radius?: _INT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    outline_alpha?: _FLOAT
    /** default=255 max=255 step=1 */
    fill_red?: _INT
    /** default=255 max=255 step=1 */
    fill_green?: _INT
    /** default=255 max=255 step=1 */
    fill_blue?: _INT
    /** default=1 max=1 step=0.01 */
    fill_alpha?: _FLOAT
    top_left_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    top_right_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    bottom_right_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    bottom_left_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawRectangleRoundedByContainer [image_draw]
export interface ImageDrawRectangleRoundedByContainer extends HasSingle_IMAGE, ComfyNode<ImageDrawRectangleRoundedByContainer_input, ImageDrawRectangleRoundedByContainer_output> {
    nameInComfy: "ImageDrawRectangleRoundedByContainer"
}
export interface ImageDrawRectangleRoundedByContainer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawRectangleRoundedByContainer_input {
    container: _IMAGE
    /** default=0.1 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0.2 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=0.9 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=0.8 max=1 step=0.01 */
    end_y?: _FLOAT
    /** default=180 max=360 step=1 */
    radius?: _INT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    outline_alpha?: _FLOAT
    /** default=255 max=255 step=1 */
    fill_red?: _INT
    /** default=255 max=255 step=1 */
    fill_green?: _INT
    /** default=255 max=255 step=1 */
    fill_blue?: _INT
    /** default=1 max=1 step=0.01 */
    fill_alpha?: _FLOAT
    top_left_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    top_right_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    bottom_right_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    bottom_left_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageDrawPolygon [image_draw]
export interface ImageDrawPolygon extends HasSingle_IMAGE, ComfyNode<ImageDrawPolygon_input, ImageDrawPolygon_output> {
    nameInComfy: "ImageDrawPolygon"
}
export interface ImageDrawPolygon_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDrawPolygon_input {
    /** default=256 min=undefined step=1 */
    size?: _INT
    /** default=5 min=undefined step=1 */
    sides?: _INT
    /** default=0 max=360 step=1 */
    rotation?: _INT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    outline_alpha?: _FLOAT
    /** default=255 max=255 step=1 */
    fill_red?: _INT
    /** default=255 max=255 step=1 */
    fill_green?: _INT
    /** default=255 max=255 step=1 */
    fill_blue?: _INT
    /** default=1 max=1 step=0.01 */
    fill_alpha?: _FLOAT
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageEffectsAdjustment [image_effects]
export interface ImageEffectsAdjustment extends HasSingle_IMAGE, ComfyNode<ImageEffectsAdjustment_input, ImageEffectsAdjustment_output> {
    nameInComfy: "ImageEffectsAdjustment"
}
export interface ImageEffectsAdjustment_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageEffectsAdjustment_input {
    images: _IMAGE
    /** default=1 step=0.01 */
    brightness?: _FLOAT
    /** default=1 step=0.01 */
    contrast?: _FLOAT
    /** default=1 step=0.01 */
    saturation?: _FLOAT
    /** default=0.5 max=1 step=0.01 */
    hue?: _FLOAT
    /** default=1 step=0.01 */
    gamma?: _FLOAT
    /** default=1 step=0.01 */
    sharpness?: _FLOAT
    /** default=1 step=0.01 */
    red?: _FLOAT
    /** default=1 step=0.01 */
    green?: _FLOAT
    /** default=1 step=0.01 */
    blue?: _FLOAT
}

// ImageEffectsGrayscale [image_effects]
export interface ImageEffectsGrayscale extends HasSingle_IMAGE, ComfyNode<ImageEffectsGrayscale_input, ImageEffectsGrayscale_output> {
    nameInComfy: "ImageEffectsGrayscale"
}
export interface ImageEffectsGrayscale_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageEffectsGrayscale_input {
    images: _IMAGE
}

// ImageEffectsNegative [image_effects]
export interface ImageEffectsNegative extends HasSingle_IMAGE, ComfyNode<ImageEffectsNegative_input, ImageEffectsNegative_output> {
    nameInComfy: "ImageEffectsNegative"
}
export interface ImageEffectsNegative_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageEffectsNegative_input {
    images: _IMAGE
}

// ImageEffectsSepia [image_effects]
export interface ImageEffectsSepia extends HasSingle_IMAGE, ComfyNode<ImageEffectsSepia_input, ImageEffectsSepia_output> {
    nameInComfy: "ImageEffectsSepia"
}
export interface ImageEffectsSepia_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageEffectsSepia_input {
    images: _IMAGE
}

// ImageEffectsLensZoomBurst [image_effects_lens]
export interface ImageEffectsLensZoomBurst extends HasSingle_IMAGE, ComfyNode<ImageEffectsLensZoomBurst_input, ImageEffectsLensZoomBurst_output> {
    nameInComfy: "ImageEffectsLensZoomBurst"
}
export interface ImageEffectsLensZoomBurst_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageEffectsLensZoomBurst_input {
    images: _IMAGE
    /** default=1.5 min=undefined step=0.01 */
    scale?: _FLOAT
    /** default=100 min=undefined */
    samples?: _INT
    /** default=0.5 max=1 step=0.01 */
    position_x?: _FLOAT
    /** default=0.5 max=1 step=0.01 */
    position_y?: _FLOAT
    /** default=0 min=360 max=360 */
    rotation?: _FLOAT
    method: Enum_ImageEffectsLensZoomBurst_method
    stabilization: Enum_ImageDrawRectangleRounded_top_left_corner
}

// ImageEffectsLensChromaticAberration [image_effects_lens]
export interface ImageEffectsLensChromaticAberration extends HasSingle_IMAGE, ComfyNode<ImageEffectsLensChromaticAberration_input, ImageEffectsLensChromaticAberration_output> {
    nameInComfy: "ImageEffectsLensChromaticAberration"
}
export interface ImageEffectsLensChromaticAberration_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageEffectsLensChromaticAberration_input {
    images: _IMAGE
    /** default=10 step=1 */
    shift?: _INT
    method: Enum_ImageEffectsLensChromaticAberration_method
    /** default=1 min=4 max=4 step=1 */
    shift_type?: _INT
    /** default=1 min=4 max=4 step=1 */
    mixing_type?: _INT
    transpose: Enum_ImageEffectsLensChromaticAberration_transpose
    colors: Enum_ImageEffectsLensChromaticAberration_colors
    /** default=1 max=15 step=0.1 */
    lens_curvy?: _FLOAT
}

// ImageEffectsLensBokeh [image_effects_lens]
export interface ImageEffectsLensBokeh extends HasSingle_IMAGE, ComfyNode<ImageEffectsLensBokeh_input, ImageEffectsLensBokeh_output> {
    nameInComfy: "ImageEffectsLensBokeh"
}
export interface ImageEffectsLensBokeh_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageEffectsLensBokeh_input {
    images: _IMAGE
    /** default=5 min=undefined */
    blades_shape?: _INT
    /** default=10 min=undefined */
    blades_radius?: _INT
    /** default=0 min=360 max=360 */
    blades_rotation?: _FLOAT
    /** default=10 min=undefined step=2 */
    blur_size?: _INT
    blur_type: Enum_ImageEffectsLensBokeh_blur_type
    method: Enum_ImageEffectsLensBokeh_method
}

// ImageEffectsLensOpticAxis [image_effects_lens]
export interface ImageEffectsLensOpticAxis extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ImageEffectsLensOpticAxis_input, ImageEffectsLensOpticAxis_output> {
    nameInComfy: "ImageEffectsLensOpticAxis"
}
export interface ImageEffectsLensOpticAxis_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface ImageEffectsLensOpticAxis_input {
    images: _IMAGE
    lens_shape: Enum_ImageEffectsLensOpticAxis_lens_shape
    lens_edge: Enum_ImageEffectsLensOpticAxis_lens_edge
    /** default=4 max=15 step=0.1 */
    lens_curvy?: _FLOAT
    /** default=2 step=0.1 */
    lens_zoom?: _FLOAT
    /** default=0.5 max=10 step=0.1 */
    lens_aperture?: _FLOAT
    /** default=30 min=undefined step=2 */
    blur_intensity?: _INT
}

// ImageEffectsLensVignette [image_effects_lens]
export interface ImageEffectsLensVignette extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ImageEffectsLensVignette_input, ImageEffectsLensVignette_output> {
    nameInComfy: "ImageEffectsLensVignette"
}
export interface ImageEffectsLensVignette_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface ImageEffectsLensVignette_input {
    images: _IMAGE
    lens_shape: Enum_ImageEffectsLensVignette_lens_shape
    lens_edge: Enum_ImageEffectsLensOpticAxis_lens_edge
    /** default=3 max=15 step=0.1 */
    lens_curvy?: _FLOAT
    /** default=0 step=0.1 */
    lens_zoom?: _FLOAT
    /** default=0.25 max=1 step=0.01 */
    brightness?: _FLOAT
    /** default=0.5 max=1 step=0.01 */
    saturation?: _FLOAT
}

// ImageFilterSmooth [image_filter]
export interface ImageFilterSmooth extends HasSingle_IMAGE, ComfyNode<ImageFilterSmooth_input, ImageFilterSmooth_output> {
    nameInComfy: "ImageFilterSmooth"
}
export interface ImageFilterSmooth_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterSmooth_input {
    images: _IMAGE
}

// ImageFilterSmoothMore [image_filter]
export interface ImageFilterSmoothMore extends HasSingle_IMAGE, ComfyNode<ImageFilterSmoothMore_input, ImageFilterSmoothMore_output> {
    nameInComfy: "ImageFilterSmoothMore"
}
export interface ImageFilterSmoothMore_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterSmoothMore_input {
    images: _IMAGE
}

// ImageFilterBlur [image_filter]
export interface ImageFilterBlur extends HasSingle_IMAGE, ComfyNode<ImageFilterBlur_input, ImageFilterBlur_output> {
    nameInComfy: "ImageFilterBlur"
}
export interface ImageFilterBlur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterBlur_input {
    images: _IMAGE
    /** default=10 min=undefined */
    size_x?: _INT
    /** default=10 min=undefined */
    size_y?: _INT
}

// ImageFilterBoxBlur [image_filter]
export interface ImageFilterBoxBlur extends HasSingle_IMAGE, ComfyNode<ImageFilterBoxBlur_input, ImageFilterBoxBlur_output> {
    nameInComfy: "ImageFilterBoxBlur"
}
export interface ImageFilterBoxBlur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterBoxBlur_input {
    images: _IMAGE
    /** default=10 min=undefined */
    size_x?: _INT
    /** default=10 min=undefined */
    size_y?: _INT
}

// ImageFilterGaussianBlur [image_filter]
export interface ImageFilterGaussianBlur extends HasSingle_IMAGE, ComfyNode<ImageFilterGaussianBlur_input, ImageFilterGaussianBlur_output> {
    nameInComfy: "ImageFilterGaussianBlur"
}
export interface ImageFilterGaussianBlur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterGaussianBlur_input {
    images: _IMAGE
    /** default=10 min=undefined step=2 */
    size_x?: _INT
    /** default=10 min=undefined step=2 */
    size_y?: _INT
}

// ImageFilterGaussianBlurAdvanced [image_filter]
export interface ImageFilterGaussianBlurAdvanced extends HasSingle_IMAGE, ComfyNode<ImageFilterGaussianBlurAdvanced_input, ImageFilterGaussianBlurAdvanced_output> {
    nameInComfy: "ImageFilterGaussianBlurAdvanced"
}
export interface ImageFilterGaussianBlurAdvanced_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterGaussianBlurAdvanced_input {
    images: _IMAGE
    /** default=10 min=undefined step=2 */
    size_x?: _INT
    /** default=10 min=undefined step=2 */
    size_y?: _INT
    /** default=0 */
    sigma_x?: _INT
    /** default=0 */
    sigma_y?: _INT
}

// ImageFilterStackBlur [image_filter]
export interface ImageFilterStackBlur extends HasSingle_IMAGE, ComfyNode<ImageFilterStackBlur_input, ImageFilterStackBlur_output> {
    nameInComfy: "ImageFilterStackBlur"
}
export interface ImageFilterStackBlur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterStackBlur_input {
    images: _IMAGE
    /** default=10 min=undefined step=2 */
    size_x?: _INT
    /** default=10 min=undefined step=2 */
    size_y?: _INT
}

// ImageFilterMedianBlur [image_filter]
export interface ImageFilterMedianBlur extends HasSingle_IMAGE, ComfyNode<ImageFilterMedianBlur_input, ImageFilterMedianBlur_output> {
    nameInComfy: "ImageFilterMedianBlur"
}
export interface ImageFilterMedianBlur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterMedianBlur_input {
    images: _IMAGE
    /** default=10 min=undefined step=2 */
    size?: _INT
}

// ImageFilterBilateralBlur [image_filter]
export interface ImageFilterBilateralBlur extends HasSingle_IMAGE, ComfyNode<ImageFilterBilateralBlur_input, ImageFilterBilateralBlur_output> {
    nameInComfy: "ImageFilterBilateralBlur"
}
export interface ImageFilterBilateralBlur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterBilateralBlur_input {
    images: _IMAGE
    /** default=10 min=undefined step=2 */
    size?: _INT
    /** default=1 max=1 step=0.01 */
    sigma_color?: _FLOAT
    /** default=1 max=1 step=0.01 */
    sigma_intensity?: _FLOAT
}

// ImageFilterContour [image_filter]
export interface ImageFilterContour extends HasSingle_IMAGE, ComfyNode<ImageFilterContour_input, ImageFilterContour_output> {
    nameInComfy: "ImageFilterContour"
}
export interface ImageFilterContour_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterContour_input {
    images: _IMAGE
}

// ImageFilterDetail [image_filter]
export interface ImageFilterDetail extends HasSingle_IMAGE, ComfyNode<ImageFilterDetail_input, ImageFilterDetail_output> {
    nameInComfy: "ImageFilterDetail"
}
export interface ImageFilterDetail_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterDetail_input {
    images: _IMAGE
}

// ImageFilterEdgeEnhance [image_filter]
export interface ImageFilterEdgeEnhance extends HasSingle_IMAGE, ComfyNode<ImageFilterEdgeEnhance_input, ImageFilterEdgeEnhance_output> {
    nameInComfy: "ImageFilterEdgeEnhance"
}
export interface ImageFilterEdgeEnhance_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterEdgeEnhance_input {
    images: _IMAGE
}

// ImageFilterEdgeEnhanceMore [image_filter]
export interface ImageFilterEdgeEnhanceMore extends HasSingle_IMAGE, ComfyNode<ImageFilterEdgeEnhanceMore_input, ImageFilterEdgeEnhanceMore_output> {
    nameInComfy: "ImageFilterEdgeEnhanceMore"
}
export interface ImageFilterEdgeEnhanceMore_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterEdgeEnhanceMore_input {
    images: _IMAGE
}

// ImageFilterEmboss [image_filter]
export interface ImageFilterEmboss extends HasSingle_IMAGE, ComfyNode<ImageFilterEmboss_input, ImageFilterEmboss_output> {
    nameInComfy: "ImageFilterEmboss"
}
export interface ImageFilterEmboss_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterEmboss_input {
    images: _IMAGE
}

// ImageFilterFindEdges [image_filter]
export interface ImageFilterFindEdges extends HasSingle_IMAGE, ComfyNode<ImageFilterFindEdges_input, ImageFilterFindEdges_output> {
    nameInComfy: "ImageFilterFindEdges"
}
export interface ImageFilterFindEdges_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterFindEdges_input {
    images: _IMAGE
}

// ImageFilterSharpen [image_filter]
export interface ImageFilterSharpen extends HasSingle_IMAGE, ComfyNode<ImageFilterSharpen_input, ImageFilterSharpen_output> {
    nameInComfy: "ImageFilterSharpen"
}
export interface ImageFilterSharpen_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterSharpen_input {
    images: _IMAGE
}

// ImageFilterRank [image_filter]
export interface ImageFilterRank extends HasSingle_IMAGE, ComfyNode<ImageFilterRank_input, ImageFilterRank_output> {
    nameInComfy: "ImageFilterRank"
}
export interface ImageFilterRank_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterRank_input {
    images: _IMAGE
    /** default=2 min=undefined step=2 */
    size?: _INT
    /** default=1 step=1 */
    rank?: _INT
}

// ImageFilterMin [image_filter]
export interface ImageFilterMin extends HasSingle_IMAGE, ComfyNode<ImageFilterMin_input, ImageFilterMin_output> {
    nameInComfy: "ImageFilterMin"
}
export interface ImageFilterMin_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterMin_input {
    images: _IMAGE
    /** default=2 min=undefined step=2 */
    size?: _INT
}

// ImageFilterMax [image_filter]
export interface ImageFilterMax extends HasSingle_IMAGE, ComfyNode<ImageFilterMax_input, ImageFilterMax_output> {
    nameInComfy: "ImageFilterMax"
}
export interface ImageFilterMax_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterMax_input {
    images: _IMAGE
    /** default=2 min=undefined step=2 */
    size?: _INT
}

// ImageFilterMode [image_filter]
export interface ImageFilterMode extends HasSingle_IMAGE, ComfyNode<ImageFilterMode_input, ImageFilterMode_output> {
    nameInComfy: "ImageFilterMode"
}
export interface ImageFilterMode_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFilterMode_input {
    images: _IMAGE
    /** default=2 min=undefined step=2 */
    size?: _INT
}

// ImageNoiseBeta [image_noise]
export interface ImageNoiseBeta extends HasSingle_IMAGE, ComfyNode<ImageNoiseBeta_input, ImageNoiseBeta_output> {
    nameInComfy: "ImageNoiseBeta"
}
export interface ImageNoiseBeta_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageNoiseBeta_input {
    images: _IMAGE
    /** default=1 min=undefined */
    a?: _INT
    /** default=1 min=undefined */
    b?: _INT
    monochromatic: Enum_ImageDrawRectangleRounded_top_left_corner
    invert: Enum_ImageDrawRectangleRounded_top_left_corner
    channels: Enum_ImageNoiseBeta_channels
}

// ImageNoiseBinomial [image_noise]
export interface ImageNoiseBinomial extends HasSingle_IMAGE, ComfyNode<ImageNoiseBinomial_input, ImageNoiseBinomial_output> {
    nameInComfy: "ImageNoiseBinomial"
}
export interface ImageNoiseBinomial_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageNoiseBinomial_input {
    images: _IMAGE
    /** default=128 min=255 max=255 */
    n?: _INT
    /** default=0.5 max=1 step=0.01 */
    p?: _FLOAT
    monochromatic: Enum_ImageDrawRectangleRounded_top_left_corner
    invert: Enum_ImageDrawRectangleRounded_top_left_corner
    channels: Enum_ImageNoiseBeta_channels
}

// ImageNoiseBytes [image_noise]
export interface ImageNoiseBytes extends HasSingle_IMAGE, ComfyNode<ImageNoiseBytes_input, ImageNoiseBytes_output> {
    nameInComfy: "ImageNoiseBytes"
}
export interface ImageNoiseBytes_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageNoiseBytes_input {
    images: _IMAGE
    monochromatic: Enum_ImageDrawRectangleRounded_top_left_corner
    invert: Enum_ImageDrawRectangleRounded_top_left_corner
    channels: Enum_ImageNoiseBeta_channels
}

// ImageNoiseGaussian [image_noise]
export interface ImageNoiseGaussian extends HasSingle_IMAGE, ComfyNode<ImageNoiseGaussian_input, ImageNoiseGaussian_output> {
    nameInComfy: "ImageNoiseGaussian"
}
export interface ImageNoiseGaussian_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageNoiseGaussian_input {
    images: _IMAGE
    /** default=0.5 step=0.01 */
    strength?: _FLOAT
    monochromatic: Enum_ImageDrawRectangleRounded_top_left_corner
    invert: Enum_ImageDrawRectangleRounded_top_left_corner
    channels: Enum_ImageNoiseBeta_channels
}

// ImageSegmentation [image_segmentation]
export interface ImageSegmentation extends HasSingle_IMAGE, ComfyNode<ImageSegmentation_input, ImageSegmentation_output> {
    nameInComfy: "ImageSegmentation"
}
export interface ImageSegmentation_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageSegmentation_input {
    images: _IMAGE
    model: Enum_ImageSegmentation_model
    alpha_matting: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=240 max=250 step=5 */
    alpha_matting_foreground_threshold?: _INT
    /** default=20 max=250 step=5 */
    alpha_matting_background_threshold?: _INT
    /** default=10 step=1 */
    alpha_matting_erode_size?: _INT
    post_process_mask: Enum_ImageDrawRectangleRounded_top_left_corner
}

// ImageSegmentationCustom [image_segmentation]
export interface ImageSegmentationCustom extends HasSingle_IMAGE, ComfyNode<ImageSegmentationCustom_input, ImageSegmentationCustom_output> {
    nameInComfy: "ImageSegmentationCustom"
}
export interface ImageSegmentationCustom_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageSegmentationCustom_input {
    images: _IMAGE
    model: Enum_ImageSegmentationCustom_model
    alpha_matting: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=240 max=250 step=5 */
    alpha_matting_foreground_threshold?: _INT
    /** default=20 max=250 step=5 */
    alpha_matting_background_threshold?: _INT
    /** default=10 step=1 */
    alpha_matting_erode_size?: _INT
    post_process_mask: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=0.485 max=1 step=0.01 */
    mean?: _FLOAT
    /** default=1 max=1 step=0.01 */
    std?: _FLOAT
    /** default=1024 step=8 */
    size?: _INT
}

// ImageSegmentationCustomAdvanced [image_segmentation]
export interface ImageSegmentationCustomAdvanced extends HasSingle_IMAGE, ComfyNode<ImageSegmentationCustomAdvanced_input, ImageSegmentationCustomAdvanced_output> {
    nameInComfy: "ImageSegmentationCustomAdvanced"
}
export interface ImageSegmentationCustomAdvanced_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageSegmentationCustomAdvanced_input {
    images: _IMAGE
    model: Enum_ImageSegmentationCustom_model
    alpha_matting: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=240 max=250 step=5 */
    alpha_matting_foreground_threshold?: _INT
    /** default=20 max=250 step=5 */
    alpha_matting_background_threshold?: _INT
    /** default=10 step=1 */
    alpha_matting_erode_size?: _INT
    post_process_mask: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=0.485 max=1 step=0.01 */
    mean_r?: _FLOAT
    /** default=0.456 max=1 step=0.01 */
    mean_g?: _FLOAT
    /** default=0.406 max=1 step=0.01 */
    mean_b?: _FLOAT
    /** default=1 max=1 step=0.01 */
    std_r?: _FLOAT
    /** default=1 max=1 step=0.01 */
    std_g?: _FLOAT
    /** default=1 max=1 step=0.01 */
    std_b?: _FLOAT
    /** default=1024 step=8 */
    width?: _INT
    /** default=1024 step=8 */
    height?: _INT
}

// ImageText [image_draw]
export interface ImageText extends HasSingle_IMAGE, ComfyNode<ImageText_input, ImageText_output> {
    nameInComfy: "ImageText"
}
export interface ImageText_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageText_input {
    /** */
    text: _STRING
    font: Enum_ImageText_font
    /** default=28 min=undefined step=1 */
    size?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=0 step=1 */
    margin_x?: _INT
    /** default=0 step=1 */
    margin_y?: _INT
}

// ImageTextOutlined [image_draw]
export interface ImageTextOutlined extends HasSingle_IMAGE, ComfyNode<ImageTextOutlined_input, ImageTextOutlined_output> {
    nameInComfy: "ImageTextOutlined"
}
export interface ImageTextOutlined_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTextOutlined_input {
    /** */
    text: _STRING
    font: Enum_ImageText_font
    /** default=28 min=undefined step=1 */
    size?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=0 step=1 */
    margin_x?: _INT
    /** default=0 step=1 */
    margin_y?: _INT
}

// ImageTextMultiline [image_draw]
export interface ImageTextMultiline extends HasSingle_IMAGE, ComfyNode<ImageTextMultiline_input, ImageTextMultiline_output> {
    nameInComfy: "ImageTextMultiline"
}
export interface ImageTextMultiline_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTextMultiline_input {
    /** */
    text: _STRING
    font: Enum_ImageText_font
    align: Enum_ImageTextMultiline_align
    /** default=28 min=undefined step=1 */
    size?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=0 step=1 */
    margin_x?: _INT
    /** default=0 step=1 */
    margin_y?: _INT
}

// ImageTextMultilineOutlined [image_draw]
export interface ImageTextMultilineOutlined extends HasSingle_IMAGE, ComfyNode<ImageTextMultilineOutlined_input, ImageTextMultilineOutlined_output> {
    nameInComfy: "ImageTextMultilineOutlined"
}
export interface ImageTextMultilineOutlined_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTextMultilineOutlined_input {
    /** */
    text: _STRING
    font: Enum_ImageText_font
    align: Enum_ImageTextMultiline_align
    /** default=28 min=undefined step=1 */
    size?: _INT
    /** default=255 max=255 step=1 */
    red?: _INT
    /** default=255 max=255 step=1 */
    green?: _INT
    /** default=255 max=255 step=1 */
    blue?: _INT
    /** default=1 step=1 */
    outline_size?: _INT
    /** default=0 max=255 step=1 */
    outline_red?: _INT
    /** default=0 max=255 step=1 */
    outline_green?: _INT
    /** default=0 max=255 step=1 */
    outline_blue?: _INT
    /** default=1 max=1 step=0.01 */
    alpha?: _FLOAT
    /** default=0 step=1 */
    margin_x?: _INT
    /** default=0 step=1 */
    margin_y?: _INT
}

// ImageTransformResizeAbsolute [image_transform]
export interface ImageTransformResizeAbsolute extends HasSingle_IMAGE, ComfyNode<ImageTransformResizeAbsolute_input, ImageTransformResizeAbsolute_output> {
    nameInComfy: "ImageTransformResizeAbsolute"
}
export interface ImageTransformResizeAbsolute_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformResizeAbsolute_input {
    images: _IMAGE
    /** default=256 min=undefined step=1 */
    width?: _INT
    /** default=256 min=undefined step=1 */
    height?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageTransformResizeRelative [image_transform]
export interface ImageTransformResizeRelative extends HasSingle_IMAGE, ComfyNode<ImageTransformResizeRelative_input, ImageTransformResizeRelative_output> {
    nameInComfy: "ImageTransformResizeRelative"
}
export interface ImageTransformResizeRelative_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformResizeRelative_input {
    images: _IMAGE
    /** default=1 step=0.1 */
    scale_width?: _FLOAT
    /** default=1 step=0.1 */
    scale_height?: _FLOAT
    method: Enum_ImageDrawArc_method
}

// ImageTransformResizeClip [image_transform]
export interface ImageTransformResizeClip extends HasSingle_IMAGE, ComfyNode<ImageTransformResizeClip_input, ImageTransformResizeClip_output> {
    nameInComfy: "ImageTransformResizeClip"
}
export interface ImageTransformResizeClip_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformResizeClip_input {
    images: _IMAGE
    /** default=1024 */
    max_width?: _INT
    /** default=1024 */
    max_height?: _INT
    /** default=0 */
    min_width?: _INT
    /** default=0 */
    min_height?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageTransformCropAbsolute [image_transform]
export interface ImageTransformCropAbsolute extends HasSingle_IMAGE, ComfyNode<ImageTransformCropAbsolute_input, ImageTransformCropAbsolute_output> {
    nameInComfy: "ImageTransformCropAbsolute"
}
export interface ImageTransformCropAbsolute_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformCropAbsolute_input {
    images: _IMAGE
    /** default=0 step=1 */
    start_x?: _INT
    /** default=0 step=1 */
    start_y?: _INT
    /** default=128 step=1 */
    end_x?: _INT
    /** default=128 step=1 */
    end_y?: _INT
}

// ImageTransformCropRelative [image_transform]
export interface ImageTransformCropRelative extends HasSingle_IMAGE, ComfyNode<ImageTransformCropRelative_input, ImageTransformCropRelative_output> {
    nameInComfy: "ImageTransformCropRelative"
}
export interface ImageTransformCropRelative_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformCropRelative_input {
    images: _IMAGE
    /** default=0.25 max=1 step=0.01 */
    start_x?: _FLOAT
    /** default=0.25 max=1 step=0.01 */
    start_y?: _FLOAT
    /** default=0.75 max=1 step=0.01 */
    end_x?: _FLOAT
    /** default=0.75 max=1 step=0.01 */
    end_y?: _FLOAT
}

// ImageTransformCropCorners [image_transform]
export interface ImageTransformCropCorners extends HasSingle_IMAGE, ComfyNode<ImageTransformCropCorners_input, ImageTransformCropCorners_output> {
    nameInComfy: "ImageTransformCropCorners"
}
export interface ImageTransformCropCorners_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformCropCorners_input {
    images: _IMAGE
    /** default=180 max=360 step=1 */
    radius?: _INT
    top_left_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    top_right_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    bottom_right_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    bottom_left_corner: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageTransformPaddingAbsolute [image_transform]
export interface ImageTransformPaddingAbsolute extends HasSingle_IMAGE, ComfyNode<ImageTransformPaddingAbsolute_input, ImageTransformPaddingAbsolute_output> {
    nameInComfy: "ImageTransformPaddingAbsolute"
}
export interface ImageTransformPaddingAbsolute_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformPaddingAbsolute_input {
    images: _IMAGE
    /** default=64 min=undefined */
    add_width?: _INT
    /** default=64 min=undefined */
    add_height?: _INT
    method: Enum_ImageEffectsLensChromaticAberration_method
}

// ImageTransformPaddingRelative [image_transform]
export interface ImageTransformPaddingRelative extends HasSingle_IMAGE, ComfyNode<ImageTransformPaddingRelative_input, ImageTransformPaddingRelative_output> {
    nameInComfy: "ImageTransformPaddingRelative"
}
export interface ImageTransformPaddingRelative_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformPaddingRelative_input {
    images: _IMAGE
    /** default=0.25 step=0.1 */
    scale_width?: _FLOAT
    /** default=0.25 step=0.1 */
    scale_height?: _FLOAT
    method: Enum_ImageEffectsLensChromaticAberration_method
}

// ImageTransformRotate [image_transform]
export interface ImageTransformRotate extends HasSingle_IMAGE, ComfyNode<ImageTransformRotate_input, ImageTransformRotate_output> {
    nameInComfy: "ImageTransformRotate"
}
export interface ImageTransformRotate_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformRotate_input {
    images: _IMAGE
    /** default=35 max=360 step=0.1 */
    angle?: _FLOAT
    expand: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=4 min=16 max=16 step=1 */
    SSAA?: _INT
    method: Enum_ImageDrawArc_method
}

// ImageTransformTranspose [image_transform]
export interface ImageTransformTranspose extends HasSingle_IMAGE, ComfyNode<ImageTransformTranspose_input, ImageTransformTranspose_output> {
    nameInComfy: "ImageTransformTranspose"
}
export interface ImageTransformTranspose_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformTranspose_input {
    images: _IMAGE
    method: Enum_ImageTransformTranspose_method
}

// ADE_AnimateDiffLoRALoader [Animate Diff 🎭🅐🅓]
export interface ADE$_AnimateDiffLoRALoader extends HasSingle_MOTION_LORA, ComfyNode<ADE$_AnimateDiffLoRALoader_input, ADE$_AnimateDiffLoRALoader_output> {
    nameInComfy: "ADE_AnimateDiffLoRALoader"
}
export interface ADE$_AnimateDiffLoRALoader_output {
    MOTION_LORA: ComfyNodeOutput<'MOTION_LORA', 0>,
}
export interface ADE$_AnimateDiffLoRALoader_input {
    name: Enum_ADE$_AnimateDiffLoRALoader_name
    /** default=1 min=10 max=10 step=0.001 */
    strength?: _FLOAT
    prev_motion_lora?: _MOTION_LORA
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AnimateDiffSamplingSettings [Animate Diff 🎭🅐🅓]
export interface ADE$_AnimateDiffSamplingSettings extends HasSingle_SAMPLE_SETTINGS, ComfyNode<ADE$_AnimateDiffSamplingSettings_input, ADE$_AnimateDiffSamplingSettings_output> {
    nameInComfy: "ADE_AnimateDiffSamplingSettings"
}
export interface ADE$_AnimateDiffSamplingSettings_output {
    settings: ComfyNodeOutput<'SAMPLE_SETTINGS', 0>,
}
export interface ADE$_AnimateDiffSamplingSettings_input {
    /** default=0 min=9007199254740991 max=9007199254740991 */
    batch_offset?: _INT
    noise_type: Enum_ADE$_AnimateDiffSamplingSettings_noise_type
    seed_gen: Enum_ADE$_AnimateDiffSamplingSettings_seed_gen
    /** default=0 min=9007199254740991 max=9007199254740991 */
    seed_offset?: _INT
    noise_layers?: _NOISE_LAYERS
    iteration_opts?: _ITERATION_OPTS
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed_override?: _INT
    /** default=false */
    adapt_denoise_steps?: _BOOLEAN
    custom_cfg?: _CUSTOM_CFG
    sigma_schedule?: _SIGMA_SCHEDULE
    image_inject?: _IMAGE_INJECT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AnimateDiffKeyframe [Animate Diff 🎭🅐🅓]
export interface ADE$_AnimateDiffKeyframe extends HasSingle_AD_KEYFRAMES, ComfyNode<ADE$_AnimateDiffKeyframe_input, ADE$_AnimateDiffKeyframe_output> {
    nameInComfy: "ADE_AnimateDiffKeyframe"
}
export interface ADE$_AnimateDiffKeyframe_output {
    AD_KEYFRAMES: ComfyNodeOutput<'AD_KEYFRAMES', 0>,
}
export interface ADE$_AnimateDiffKeyframe_input {
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    prev_ad_keyframes?: _AD_KEYFRAMES
    scale_multival?: _MULTIVAL
    effect_multival?: _MULTIVAL
    /** default=true */
    inherit_missing?: _BOOLEAN
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_MultivalDynamic [Animate Diff 🎭🅐🅓_multival]
export interface ADE$_MultivalDynamic extends HasSingle_MULTIVAL, ComfyNode<ADE$_MultivalDynamic_input, ADE$_MultivalDynamic_output> {
    nameInComfy: "ADE_MultivalDynamic"
}
export interface ADE$_MultivalDynamic_output {
    MULTIVAL: ComfyNodeOutput<'MULTIVAL', 0>,
}
export interface ADE$_MultivalDynamic_input {
    /** default=1 min=undefined step=0.001 */
    float_val?: _FLOAT
    mask_optional?: _MASK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_MultivalDynamicFloatInput [Animate Diff 🎭🅐🅓_multival]
export interface ADE$_MultivalDynamicFloatInput extends HasSingle_MULTIVAL, ComfyNode<ADE$_MultivalDynamicFloatInput_input, ADE$_MultivalDynamicFloatInput_output> {
    nameInComfy: "ADE_MultivalDynamicFloatInput"
}
export interface ADE$_MultivalDynamicFloatInput_output {
    MULTIVAL: ComfyNodeOutput<'MULTIVAL', 0>,
}
export interface ADE$_MultivalDynamicFloatInput_input {
    /** default=1 min=10 max=10 step=0.001 */
    float_val?: _FLOAT
    mask_optional?: _MASK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_MultivalDynamicFloats [Animate Diff 🎭🅐🅓_multival]
export interface ADE$_MultivalDynamicFloats extends HasSingle_MULTIVAL, ComfyNode<ADE$_MultivalDynamicFloats_input, ADE$_MultivalDynamicFloats_output> {
    nameInComfy: "ADE_MultivalDynamicFloats"
}
export interface ADE$_MultivalDynamicFloats_output {
    MULTIVAL: ComfyNodeOutput<'MULTIVAL', 0>,
}
export interface ADE$_MultivalDynamicFloats_input {
    /** default=1 min=10 max=10 step=0.001 */
    floats?: _FLOATS
    mask_optional?: _MASK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_MultivalScaledMask [Animate Diff 🎭🅐🅓_multival]
export interface ADE$_MultivalScaledMask extends HasSingle_MULTIVAL, ComfyNode<ADE$_MultivalScaledMask_input, ADE$_MultivalScaledMask_output> {
    nameInComfy: "ADE_MultivalScaledMask"
}
export interface ADE$_MultivalScaledMask_output {
    MULTIVAL: ComfyNodeOutput<'MULTIVAL', 0>,
}
export interface ADE$_MultivalScaledMask_input {
    /** default=0 min=undefined step=0.001 */
    min_float_val?: _FLOAT
    /** default=1 min=undefined step=0.001 */
    max_float_val?: _FLOAT
    mask: _MASK
    scaling?: Enum_ADE$_MultivalScaledMask_scaling
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_MultivalConvertToMask [Animate Diff 🎭🅐🅓_multival]
export interface ADE$_MultivalConvertToMask extends HasSingle_MASK, ComfyNode<ADE$_MultivalConvertToMask_input, ADE$_MultivalConvertToMask_output> {
    nameInComfy: "ADE_MultivalConvertToMask"
}
export interface ADE$_MultivalConvertToMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ADE$_MultivalConvertToMask_input {
    multival: _MULTIVAL
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_StandardStaticContextOptions [Animate Diff 🎭🅐🅓_context opts]
export interface ADE$_StandardStaticContextOptions extends HasSingle_CONTEXT_OPTIONS, ComfyNode<ADE$_StandardStaticContextOptions_input, ADE$_StandardStaticContextOptions_output> {
    nameInComfy: "ADE_StandardStaticContextOptions"
}
export interface ADE$_StandardStaticContextOptions_output {
    CONTEXT_OPTS: ComfyNodeOutput<'CONTEXT_OPTIONS', 0>,
}
export interface ADE$_StandardStaticContextOptions_input {
    /** default=16 min=128 max=128 */
    context_length?: _INT
    /** default=4 min=128 max=128 */
    context_overlap?: _INT
    fuse_method?: Enum_ADE$_StandardStaticContextOptions_fuse_method
    /** default=false */
    use_on_equal_length?: _BOOLEAN
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    prev_context?: _CONTEXT_OPTIONS
    view_opts?: _VIEW_OPTS
}

// ADE_StandardUniformContextOptions [Animate Diff 🎭🅐🅓_context opts]
export interface ADE$_StandardUniformContextOptions extends HasSingle_CONTEXT_OPTIONS, ComfyNode<ADE$_StandardUniformContextOptions_input, ADE$_StandardUniformContextOptions_output> {
    nameInComfy: "ADE_StandardUniformContextOptions"
}
export interface ADE$_StandardUniformContextOptions_output {
    CONTEXT_OPTS: ComfyNodeOutput<'CONTEXT_OPTIONS', 0>,
}
export interface ADE$_StandardUniformContextOptions_input {
    /** default=16 min=128 max=128 */
    context_length?: _INT
    /** default=1 min=32 max=32 */
    context_stride?: _INT
    /** default=4 min=128 max=128 */
    context_overlap?: _INT
    fuse_method?: Enum_ADE$_StandardUniformContextOptions_fuse_method
    /** default=false */
    use_on_equal_length?: _BOOLEAN
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    prev_context?: _CONTEXT_OPTIONS
    view_opts?: _VIEW_OPTS
}

// ADE_LoopedUniformContextOptions [Animate Diff 🎭🅐🅓_context opts]
export interface ADE$_LoopedUniformContextOptions extends HasSingle_CONTEXT_OPTIONS, ComfyNode<ADE$_LoopedUniformContextOptions_input, ADE$_LoopedUniformContextOptions_output> {
    nameInComfy: "ADE_LoopedUniformContextOptions"
}
export interface ADE$_LoopedUniformContextOptions_output {
    CONTEXT_OPTS: ComfyNodeOutput<'CONTEXT_OPTIONS', 0>,
}
export interface ADE$_LoopedUniformContextOptions_input {
    /** default=16 min=128 max=128 */
    context_length?: _INT
    /** default=1 min=32 max=32 */
    context_stride?: _INT
    /** default=4 min=128 max=128 */
    context_overlap?: _INT
    /** default=false */
    closed_loop?: _BOOLEAN
    fuse_method?: Enum_ADE$_StandardUniformContextOptions_fuse_method
    /** default=false */
    use_on_equal_length?: _BOOLEAN
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    prev_context?: _CONTEXT_OPTIONS
    view_opts?: _VIEW_OPTS
}

// ADE_ViewsOnlyContextOptions [Animate Diff 🎭🅐🅓_context opts]
export interface ADE$_ViewsOnlyContextOptions extends HasSingle_CONTEXT_OPTIONS, ComfyNode<ADE$_ViewsOnlyContextOptions_input, ADE$_ViewsOnlyContextOptions_output> {
    nameInComfy: "ADE_ViewsOnlyContextOptions"
}
export interface ADE$_ViewsOnlyContextOptions_output {
    CONTEXT_OPTS: ComfyNodeOutput<'CONTEXT_OPTIONS', 0>,
}
export interface ADE$_ViewsOnlyContextOptions_input {
    view_opts_req: _VIEW_OPTS
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    prev_context?: _CONTEXT_OPTIONS
}

// ADE_BatchedContextOptions [Animate Diff 🎭🅐🅓_context opts]
export interface ADE$_BatchedContextOptions extends HasSingle_CONTEXT_OPTIONS, ComfyNode<ADE$_BatchedContextOptions_input, ADE$_BatchedContextOptions_output> {
    nameInComfy: "ADE_BatchedContextOptions"
}
export interface ADE$_BatchedContextOptions_output {
    CONTEXT_OPTS: ComfyNodeOutput<'CONTEXT_OPTIONS', 0>,
}
export interface ADE$_BatchedContextOptions_input {
    /** default=16 min=128 max=128 */
    context_length?: _INT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    prev_context?: _CONTEXT_OPTIONS
}

// ADE_AnimateDiffUniformContextOptions []
export interface ADE$_AnimateDiffUniformContextOptions extends HasSingle_CONTEXT_OPTIONS, ComfyNode<ADE$_AnimateDiffUniformContextOptions_input, ADE$_AnimateDiffUniformContextOptions_output> {
    nameInComfy: "ADE_AnimateDiffUniformContextOptions"
}
export interface ADE$_AnimateDiffUniformContextOptions_output {
    CONTEXT_OPTS: ComfyNodeOutput<'CONTEXT_OPTIONS', 0>,
}
export interface ADE$_AnimateDiffUniformContextOptions_input {
    /** default=16 min=128 max=128 */
    context_length?: _INT
    /** default=1 min=32 max=32 */
    context_stride?: _INT
    /** default=4 min=128 max=128 */
    context_overlap?: _INT
    context_schedule: Enum_ADE$_AnimateDiffUniformContextOptions_context_schedule
    /** default=false */
    closed_loop?: _BOOLEAN
    /** default="flat" */
    fuse_method?: Enum_ADE$_StandardUniformContextOptions_fuse_method
    /** default=false */
    use_on_equal_length?: _BOOLEAN
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    prev_context?: _CONTEXT_OPTIONS
    view_opts?: _VIEW_OPTS
    /** */
    deprecation_warning?: _ADEWARN
}

// ADE_VisualizeContextOptionsK [Animate Diff 🎭🅐🅓_context opts_visualize]
export interface ADE$_VisualizeContextOptionsK extends HasSingle_IMAGE, ComfyNode<ADE$_VisualizeContextOptionsK_input, ADE$_VisualizeContextOptionsK_output> {
    nameInComfy: "ADE_VisualizeContextOptionsK"
}
export interface ADE$_VisualizeContextOptionsK_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ADE$_VisualizeContextOptionsK_input {
    model: _MODEL
    context_opts: _CONTEXT_OPTIONS
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=1440 min=16384 max=16384 */
    visual_width?: _INT
    /** default=32 min=9007199254740991 max=9007199254740991 */
    latents_length?: _INT
    /** default=20 min=9007199254740991 max=9007199254740991 */
    steps?: _INT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// ADE_VisualizeContextOptionsKAdv [Animate Diff 🎭🅐🅓_context opts_visualize]
export interface ADE$_VisualizeContextOptionsKAdv extends HasSingle_IMAGE, ComfyNode<ADE$_VisualizeContextOptionsKAdv_input, ADE$_VisualizeContextOptionsKAdv_output> {
    nameInComfy: "ADE_VisualizeContextOptionsKAdv"
}
export interface ADE$_VisualizeContextOptionsKAdv_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ADE$_VisualizeContextOptionsKAdv_input {
    model: _MODEL
    context_opts: _CONTEXT_OPTIONS
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=1440 min=16384 max=16384 */
    visual_width?: _INT
    /** default=32 min=9007199254740991 max=9007199254740991 */
    latents_length?: _INT
    /** default=20 min=9007199254740991 max=9007199254740991 */
    steps?: _INT
    /** default=0 min=9007199254740991 max=9007199254740991 */
    start_step?: _INT
    /** default=20 min=9007199254740991 max=9007199254740991 */
    end_step?: _INT
}

// ADE_VisualizeContextOptionsSCustom [Animate Diff 🎭🅐🅓_context opts_visualize]
export interface ADE$_VisualizeContextOptionsSCustom extends HasSingle_IMAGE, ComfyNode<ADE$_VisualizeContextOptionsSCustom_input, ADE$_VisualizeContextOptionsSCustom_output> {
    nameInComfy: "ADE_VisualizeContextOptionsSCustom"
}
export interface ADE$_VisualizeContextOptionsSCustom_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ADE$_VisualizeContextOptionsSCustom_input {
    model: _MODEL
    context_opts: _CONTEXT_OPTIONS
    sigmas: _SIGMAS
    /** default=1440 min=16384 max=16384 */
    visual_width?: _INT
    /** default=32 min=9007199254740991 max=9007199254740991 */
    latents_length?: _INT
}

// ADE_StandardStaticViewOptions [Animate Diff 🎭🅐🅓_context opts_view opts]
export interface ADE$_StandardStaticViewOptions extends HasSingle_VIEW_OPTS, ComfyNode<ADE$_StandardStaticViewOptions_input, ADE$_StandardStaticViewOptions_output> {
    nameInComfy: "ADE_StandardStaticViewOptions"
}
export interface ADE$_StandardStaticViewOptions_output {
    VIEW_OPTS: ComfyNodeOutput<'VIEW_OPTS', 0>,
}
export interface ADE$_StandardStaticViewOptions_input {
    /** default=16 min=128 max=128 */
    view_length?: _INT
    /** default=4 min=128 max=128 */
    view_overlap?: _INT
    fuse_method?: Enum_ADE$_StandardUniformContextOptions_fuse_method
}

// ADE_StandardUniformViewOptions [Animate Diff 🎭🅐🅓_context opts_view opts]
export interface ADE$_StandardUniformViewOptions extends HasSingle_VIEW_OPTS, ComfyNode<ADE$_StandardUniformViewOptions_input, ADE$_StandardUniformViewOptions_output> {
    nameInComfy: "ADE_StandardUniformViewOptions"
}
export interface ADE$_StandardUniformViewOptions_output {
    VIEW_OPTS: ComfyNodeOutput<'VIEW_OPTS', 0>,
}
export interface ADE$_StandardUniformViewOptions_input {
    /** default=16 min=128 max=128 */
    view_length?: _INT
    /** default=1 min=32 max=32 */
    view_stride?: _INT
    /** default=4 min=128 max=128 */
    view_overlap?: _INT
    fuse_method?: Enum_ADE$_StandardUniformContextOptions_fuse_method
}

// ADE_LoopedUniformViewOptions [Animate Diff 🎭🅐🅓_context opts_view opts]
export interface ADE$_LoopedUniformViewOptions extends HasSingle_VIEW_OPTS, ComfyNode<ADE$_LoopedUniformViewOptions_input, ADE$_LoopedUniformViewOptions_output> {
    nameInComfy: "ADE_LoopedUniformViewOptions"
}
export interface ADE$_LoopedUniformViewOptions_output {
    VIEW_OPTS: ComfyNodeOutput<'VIEW_OPTS', 0>,
}
export interface ADE$_LoopedUniformViewOptions_input {
    /** default=16 min=128 max=128 */
    view_length?: _INT
    /** default=1 min=32 max=32 */
    view_stride?: _INT
    /** default=4 min=128 max=128 */
    view_overlap?: _INT
    /** default=false */
    closed_loop?: _BOOLEAN
    fuse_method?: Enum_ADE$_StandardUniformContextOptions_fuse_method
    /** default=false */
    use_on_equal_length?: _BOOLEAN
}

// ADE_ContextExtras_Set [Animate Diff 🎭🅐🅓_context opts_context extras]
export interface ADE$_ContextExtras$_Set extends HasSingle_CONTEXT_OPTIONS, ComfyNode<ADE$_ContextExtras$_Set_input, ADE$_ContextExtras$_Set_output> {
    nameInComfy: "ADE_ContextExtras_Set"
}
export interface ADE$_ContextExtras$_Set_output {
    CONTEXT_OPTS: ComfyNodeOutput<'CONTEXT_OPTIONS', 0>,
}
export interface ADE$_ContextExtras$_Set_input {
    context_opts: _CONTEXT_OPTIONS
    context_extras: _CONTEXT_EXTRAS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_ContextRef [Animate Diff 🎭🅐🅓_context opts_context extras]
export interface ADE$_ContextExtras$_ContextRef extends HasSingle_CONTEXT_EXTRAS, ComfyNode<ADE$_ContextExtras$_ContextRef_input, ADE$_ContextExtras$_ContextRef_output> {
    nameInComfy: "ADE_ContextExtras_ContextRef"
}
export interface ADE$_ContextExtras$_ContextRef_output {
    CONTEXT_EXTRAS: ComfyNodeOutput<'CONTEXT_EXTRAS', 0>,
}
export interface ADE$_ContextExtras$_ContextRef_input {
    prev_extras?: _CONTEXT_EXTRAS
    strength_multival?: _MULTIVAL
    contextref_mode?: _CONTEXTREF_MODE
    contextref_tune?: _CONTEXTREF_TUNE
    contextref_kf?: _CONTEXTREF_KEYFRAME
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=0.25 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_ContextRef_ModeFirst [Animate Diff 🎭🅐🅓_context opts_context extras_contextref]
export interface ADE$_ContextExtras$_ContextRef$_ModeFirst extends HasSingle_CONTEXTREF_MODE, ComfyNode<ADE$_ContextExtras$_ContextRef$_ModeFirst_input, ADE$_ContextExtras$_ContextRef$_ModeFirst_output> {
    nameInComfy: "ADE_ContextExtras_ContextRef_ModeFirst"
}
export interface ADE$_ContextExtras$_ContextRef$_ModeFirst_output {
    CONTEXTREF_MODE: ComfyNodeOutput<'CONTEXTREF_MODE', 0>,
}
export interface ADE$_ContextExtras$_ContextRef$_ModeFirst_input {
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_ContextRef_ModeSliding [Animate Diff 🎭🅐🅓_context opts_context extras_contextref]
export interface ADE$_ContextExtras$_ContextRef$_ModeSliding extends HasSingle_CONTEXTREF_MODE, ComfyNode<ADE$_ContextExtras$_ContextRef$_ModeSliding_input, ADE$_ContextExtras$_ContextRef$_ModeSliding_output> {
    nameInComfy: "ADE_ContextExtras_ContextRef_ModeSliding"
}
export interface ADE$_ContextExtras$_ContextRef$_ModeSliding_output {
    CONTEXTREF_MODE: ComfyNodeOutput<'CONTEXTREF_MODE', 0>,
}
export interface ADE$_ContextExtras$_ContextRef$_ModeSliding_input {
    /** default=2 min=9007199254740991 max=9007199254740991 step=1 */
    sliding_width?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_ContextRef_ModeIndexes [Animate Diff 🎭🅐🅓_context opts_context extras_contextref]
export interface ADE$_ContextExtras$_ContextRef$_ModeIndexes extends HasSingle_CONTEXTREF_MODE, ComfyNode<ADE$_ContextExtras$_ContextRef$_ModeIndexes_input, ADE$_ContextExtras$_ContextRef$_ModeIndexes_output> {
    nameInComfy: "ADE_ContextExtras_ContextRef_ModeIndexes"
}
export interface ADE$_ContextExtras$_ContextRef$_ModeIndexes_output {
    CONTEXTREF_MODE: ComfyNodeOutput<'CONTEXTREF_MODE', 0>,
}
export interface ADE$_ContextExtras$_ContextRef$_ModeIndexes_input {
    /** default="" */
    switch_on_idxs?: _STRING
    /** default=true */
    always_include_0?: _BOOLEAN
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_ContextRef_TuneAttn [Animate Diff 🎭🅐🅓_context opts_context extras_contextref]
export interface ADE$_ContextExtras$_ContextRef$_TuneAttn extends HasSingle_CONTEXTREF_TUNE, ComfyNode<ADE$_ContextExtras$_ContextRef$_TuneAttn_input, ADE$_ContextExtras$_ContextRef$_TuneAttn_output> {
    nameInComfy: "ADE_ContextExtras_ContextRef_TuneAttn"
}
export interface ADE$_ContextExtras$_ContextRef$_TuneAttn_output {
    CONTEXTREF_TUNE: ComfyNodeOutput<'CONTEXTREF_TUNE', 0>,
}
export interface ADE$_ContextExtras$_ContextRef$_TuneAttn_input {
    /** default=1 min=1 max=1 step=0.01 */
    attn_style_fidelity?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    attn_ref_weight?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    attn_strength?: _FLOAT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_ContextRef_TuneAttnAdain [Animate Diff 🎭🅐🅓_context opts_context extras_contextref]
export interface ADE$_ContextExtras$_ContextRef$_TuneAttnAdain extends HasSingle_CONTEXTREF_TUNE, ComfyNode<ADE$_ContextExtras$_ContextRef$_TuneAttnAdain_input, ADE$_ContextExtras$_ContextRef$_TuneAttnAdain_output> {
    nameInComfy: "ADE_ContextExtras_ContextRef_TuneAttnAdain"
}
export interface ADE$_ContextExtras$_ContextRef$_TuneAttnAdain_output {
    CONTEXTREF_TUNE: ComfyNodeOutput<'CONTEXTREF_TUNE', 0>,
}
export interface ADE$_ContextExtras$_ContextRef$_TuneAttnAdain_input {
    /** default=1 min=1 max=1 step=0.01 */
    attn_style_fidelity?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    attn_ref_weight?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    attn_strength?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    adain_style_fidelity?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    adain_ref_weight?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    adain_strength?: _FLOAT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_ContextRef_Keyframe [Animate Diff 🎭🅐🅓_context opts_context extras_contextref]
export interface ADE$_ContextExtras$_ContextRef$_Keyframe extends HasSingle_CONTEXTREF_KEYFRAME, ComfyNode<ADE$_ContextExtras$_ContextRef$_Keyframe_input, ADE$_ContextExtras$_ContextRef$_Keyframe_output> {
    nameInComfy: "ADE_ContextExtras_ContextRef_Keyframe"
}
export interface ADE$_ContextExtras$_ContextRef$_Keyframe_output {
    CONTEXTREF_KF: ComfyNodeOutput<'CONTEXTREF_KEYFRAME', 0>,
}
export interface ADE$_ContextExtras$_ContextRef$_Keyframe_input {
    prev_kf?: _CONTEXTREF_KEYFRAME
    mult_multival?: _MULTIVAL
    mode_replace?: _CONTEXTREF_MODE
    tune_replace?: _CONTEXTREF_TUNE
    /** default=1 min=1 max=1 step=0.001 */
    mult?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    /** default=true */
    inherit_missing?: _BOOLEAN
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_ContextRef_KeyframeInterpolation [Animate Diff 🎭🅐🅓_context opts_context extras_contextref]
export interface ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation extends HasSingle_CONTEXTREF_KEYFRAME, ComfyNode<ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_input, ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_output> {
    nameInComfy: "ADE_ContextExtras_ContextRef_KeyframeInterpolation"
}
export interface ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_output {
    CONTEXTREF_KF: ComfyNodeOutput<'CONTEXTREF_KEYFRAME', 0>,
}
export interface ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_input {
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    mult_start?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    mult_end?: _FLOAT
    interpolation: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
    /** default=50 min=100 max=100 step=1 */
    intervals?: _INT
    /** default=true */
    inherit_missing?: _BOOLEAN
    /** default=false */
    print_keyframes?: _BOOLEAN
    prev_kf?: _CONTEXTREF_KEYFRAME
    mult_multival?: _MULTIVAL
    mode_replace?: _CONTEXTREF_MODE
    tune_replace?: _CONTEXTREF_TUNE
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_ContextRef_KeyframeFromList [Animate Diff 🎭🅐🅓_context opts_context extras_contextref]
export interface ADE$_ContextExtras$_ContextRef$_KeyframeFromList extends HasSingle_CONTEXTREF_KEYFRAME, ComfyNode<ADE$_ContextExtras$_ContextRef$_KeyframeFromList_input, ADE$_ContextExtras$_ContextRef$_KeyframeFromList_output> {
    nameInComfy: "ADE_ContextExtras_ContextRef_KeyframeFromList"
}
export interface ADE$_ContextExtras$_ContextRef$_KeyframeFromList_output {
    CONTEXTREF_KF: ComfyNodeOutput<'CONTEXTREF_KEYFRAME', 0>,
}
export interface ADE$_ContextExtras$_ContextRef$_KeyframeFromList_input {
    /** default=-1 min=undefined step=0.001 */
    mults_float?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=true */
    inherit_missing?: _BOOLEAN
    /** default=false */
    print_keyframes?: _BOOLEAN
    prev_kf?: _CONTEXTREF_KEYFRAME
    mult_multival?: _MULTIVAL
    mode_replace?: _CONTEXTREF_MODE
    tune_replace?: _CONTEXTREF_TUNE
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_NaiveReuse [Animate Diff 🎭🅐🅓_context opts_context extras]
export interface ADE$_ContextExtras$_NaiveReuse extends HasSingle_CONTEXT_EXTRAS, ComfyNode<ADE$_ContextExtras$_NaiveReuse_input, ADE$_ContextExtras$_NaiveReuse_output> {
    nameInComfy: "ADE_ContextExtras_NaiveReuse"
}
export interface ADE$_ContextExtras$_NaiveReuse_output {
    CONTEXT_EXTRAS: ComfyNodeOutput<'CONTEXT_EXTRAS', 0>,
}
export interface ADE$_ContextExtras$_NaiveReuse_input {
    prev_extras?: _CONTEXT_EXTRAS
    strength_multival?: _MULTIVAL
    naivereuse_kf?: _NAIVEREUSE_KEYFRAME
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=0.15 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=0.95 min=1 max=1 step=0.001 */
    weighted_mean?: _FLOAT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_NaiveReuse_Keyframe [Animate Diff 🎭🅐🅓_context opts_context extras_naivereuse]
export interface ADE$_ContextExtras$_NaiveReuse$_Keyframe extends HasSingle_NAIVEREUSE_KEYFRAME, ComfyNode<ADE$_ContextExtras$_NaiveReuse$_Keyframe_input, ADE$_ContextExtras$_NaiveReuse$_Keyframe_output> {
    nameInComfy: "ADE_ContextExtras_NaiveReuse_Keyframe"
}
export interface ADE$_ContextExtras$_NaiveReuse$_Keyframe_output {
    NAIVEREUSE_KF: ComfyNodeOutput<'NAIVEREUSE_KEYFRAME', 0>,
}
export interface ADE$_ContextExtras$_NaiveReuse$_Keyframe_input {
    prev_kf?: _NAIVEREUSE_KEYFRAME
    mult_multival?: _MULTIVAL
    /** default=1 min=1 max=1 step=0.001 */
    mult?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    /** default=true */
    inherit_missing?: _BOOLEAN
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_NaiveReuse_KeyframeInterpolation [Animate Diff 🎭🅐🅓_context opts_context extras_naivereuse]
export interface ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation extends HasSingle_NAIVEREUSE_KEYFRAME, ComfyNode<ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation_input, ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation_output> {
    nameInComfy: "ADE_ContextExtras_NaiveReuse_KeyframeInterpolation"
}
export interface ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation_output {
    NAIVEREUSE_KF: ComfyNodeOutput<'NAIVEREUSE_KEYFRAME', 0>,
}
export interface ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation_input {
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    mult_start?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    mult_end?: _FLOAT
    interpolation: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
    /** default=50 min=100 max=100 step=1 */
    intervals?: _INT
    /** default=true */
    inherit_missing?: _BOOLEAN
    /** default=false */
    print_keyframes?: _BOOLEAN
    prev_kf?: _NAIVEREUSE_KEYFRAME
    mult_multival?: _MULTIVAL
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ContextExtras_NaiveReuse_KeyframeFromList [Animate Diff 🎭🅐🅓_context opts_context extras_naivereuse]
export interface ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList extends HasSingle_NAIVEREUSE_KEYFRAME, ComfyNode<ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList_input, ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList_output> {
    nameInComfy: "ADE_ContextExtras_NaiveReuse_KeyframeFromList"
}
export interface ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList_output {
    NAIVEREUSE_KF: ComfyNodeOutput<'NAIVEREUSE_KEYFRAME', 0>,
}
export interface ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList_input {
    /** default=-1 min=undefined step=0.001 */
    mults_float?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=true */
    inherit_missing?: _BOOLEAN
    /** default=false */
    print_keyframes?: _BOOLEAN
    prev_kf?: _NAIVEREUSE_KEYFRAME
    mult_multival?: _MULTIVAL
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_IterationOptsDefault [Animate Diff 🎭🅐🅓_iteration opts]
export interface ADE$_IterationOptsDefault extends HasSingle_ITERATION_OPTS, ComfyNode<ADE$_IterationOptsDefault_input, ADE$_IterationOptsDefault_output> {
    nameInComfy: "ADE_IterationOptsDefault"
}
export interface ADE$_IterationOptsDefault_output {
    ITERATION_OPTS: ComfyNodeOutput<'ITERATION_OPTS', 0>,
}
export interface ADE$_IterationOptsDefault_input {
    /** default=1 min=undefined */
    iterations?: _INT
    /** default=0 min=9007199254740991 max=9007199254740991 */
    iter_batch_offset?: _INT
    /** default=0 min=9007199254740991 max=9007199254740991 */
    iter_seed_offset?: _INT
}

// ADE_IterationOptsFreeInit [Animate Diff 🎭🅐🅓_iteration opts]
export interface ADE$_IterationOptsFreeInit extends HasSingle_ITERATION_OPTS, ComfyNode<ADE$_IterationOptsFreeInit_input, ADE$_IterationOptsFreeInit_output> {
    nameInComfy: "ADE_IterationOptsFreeInit"
}
export interface ADE$_IterationOptsFreeInit_output {
    ITERATION_OPTS: ComfyNodeOutput<'ITERATION_OPTS', 0>,
}
export interface ADE$_IterationOptsFreeInit_input {
    /** default=2 min=undefined */
    iterations?: _INT
    filter: Enum_ADE$_IterationOptsFreeInit_filter
    /** default=0.25 min=1 max=1 step=0.001 */
    d_s?: _FLOAT
    /** default=0.25 min=1 max=1 step=0.001 */
    d_t?: _FLOAT
    /** default=4 min=100 max=100 */
    n_butterworth?: _INT
    /** default=999 min=999 max=999 */
    sigma_step?: _INT
    /** default=false */
    apply_to_1st_iter?: _BOOLEAN
    init_type: Enum_ADE$_IterationOptsFreeInit_init_type
    /** default=0 min=9007199254740991 max=9007199254740991 */
    iter_batch_offset?: _INT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    iter_seed_offset?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_RegisterLoraHook [Animate Diff 🎭🅐🅓_conditioning_register lora hooks]
export interface ADE$_RegisterLoraHook extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_LORA_HOOK, ComfyNode<ADE$_RegisterLoraHook_input, ADE$_RegisterLoraHook_output> {
    nameInComfy: "ADE_RegisterLoraHook"
}
export interface ADE$_RegisterLoraHook_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    LORA_HOOK: ComfyNodeOutput<'LORA_HOOK', 2>,
}
export interface ADE$_RegisterLoraHook_input {
    model: _MODEL
    clip: _CLIP
    lora_name: Enum_LoraLoader_lora_name
    /** default=1 min=20 max=20 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=20 max=20 step=0.01 */
    strength_clip?: _FLOAT
}

// ADE_RegisterLoraHookModelOnly [Animate Diff 🎭🅐🅓_conditioning_register lora hooks]
export interface ADE$_RegisterLoraHookModelOnly extends HasSingle_MODEL, HasSingle_LORA_HOOK, ComfyNode<ADE$_RegisterLoraHookModelOnly_input, ADE$_RegisterLoraHookModelOnly_output> {
    nameInComfy: "ADE_RegisterLoraHookModelOnly"
}
export interface ADE$_RegisterLoraHookModelOnly_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    LORA_HOOK: ComfyNodeOutput<'LORA_HOOK', 1>,
}
export interface ADE$_RegisterLoraHookModelOnly_input {
    model: _MODEL
    lora_name: Enum_LoraLoader_lora_name
    /** default=1 min=20 max=20 step=0.01 */
    strength_model?: _FLOAT
}

// ADE_RegisterModelAsLoraHook [Animate Diff 🎭🅐🅓_conditioning_register lora hooks]
export interface ADE$_RegisterModelAsLoraHook extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_LORA_HOOK, ComfyNode<ADE$_RegisterModelAsLoraHook_input, ADE$_RegisterModelAsLoraHook_output> {
    nameInComfy: "ADE_RegisterModelAsLoraHook"
}
export interface ADE$_RegisterModelAsLoraHook_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    LORA_HOOK: ComfyNodeOutput<'LORA_HOOK', 2>,
}
export interface ADE$_RegisterModelAsLoraHook_input {
    model: _MODEL
    clip: _CLIP
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** default=1 min=20 max=20 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=20 max=20 step=0.01 */
    strength_clip?: _FLOAT
}

// ADE_RegisterModelAsLoraHookModelOnly [Animate Diff 🎭🅐🅓_conditioning_register lora hooks]
export interface ADE$_RegisterModelAsLoraHookModelOnly extends HasSingle_MODEL, HasSingle_LORA_HOOK, ComfyNode<ADE$_RegisterModelAsLoraHookModelOnly_input, ADE$_RegisterModelAsLoraHookModelOnly_output> {
    nameInComfy: "ADE_RegisterModelAsLoraHookModelOnly"
}
export interface ADE$_RegisterModelAsLoraHookModelOnly_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    LORA_HOOK: ComfyNodeOutput<'LORA_HOOK', 1>,
}
export interface ADE$_RegisterModelAsLoraHookModelOnly_input {
    model: _MODEL
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** default=1 min=20 max=20 step=0.01 */
    strength_model?: _FLOAT
}

// ADE_CombineLoraHooks [Animate Diff 🎭🅐🅓_conditioning_combine lora hooks]
export interface ADE$_CombineLoraHooks extends HasSingle_LORA_HOOK, ComfyNode<ADE$_CombineLoraHooks_input, ADE$_CombineLoraHooks_output> {
    nameInComfy: "ADE_CombineLoraHooks"
}
export interface ADE$_CombineLoraHooks_output {
    LORA_HOOK: ComfyNodeOutput<'LORA_HOOK', 0>,
}
export interface ADE$_CombineLoraHooks_input {
    lora_hook_A?: _LORA_HOOK
    lora_hook_B?: _LORA_HOOK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CombineLoraHooksFour [Animate Diff 🎭🅐🅓_conditioning_combine lora hooks]
export interface ADE$_CombineLoraHooksFour extends HasSingle_LORA_HOOK, ComfyNode<ADE$_CombineLoraHooksFour_input, ADE$_CombineLoraHooksFour_output> {
    nameInComfy: "ADE_CombineLoraHooksFour"
}
export interface ADE$_CombineLoraHooksFour_output {
    LORA_HOOK: ComfyNodeOutput<'LORA_HOOK', 0>,
}
export interface ADE$_CombineLoraHooksFour_input {
    lora_hook_A?: _LORA_HOOK
    lora_hook_B?: _LORA_HOOK
    lora_hook_C?: _LORA_HOOK
    lora_hook_D?: _LORA_HOOK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CombineLoraHooksEight [Animate Diff 🎭🅐🅓_conditioning_combine lora hooks]
export interface ADE$_CombineLoraHooksEight extends HasSingle_LORA_HOOK, ComfyNode<ADE$_CombineLoraHooksEight_input, ADE$_CombineLoraHooksEight_output> {
    nameInComfy: "ADE_CombineLoraHooksEight"
}
export interface ADE$_CombineLoraHooksEight_output {
    LORA_HOOK: ComfyNodeOutput<'LORA_HOOK', 0>,
}
export interface ADE$_CombineLoraHooksEight_input {
    lora_hook_A?: _LORA_HOOK
    lora_hook_B?: _LORA_HOOK
    lora_hook_C?: _LORA_HOOK
    lora_hook_D?: _LORA_HOOK
    lora_hook_E?: _LORA_HOOK
    lora_hook_F?: _LORA_HOOK
    lora_hook_G?: _LORA_HOOK
    lora_hook_H?: _LORA_HOOK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_SetLoraHookKeyframe [Animate Diff 🎭🅐🅓_conditioning]
export interface ADE$_SetLoraHookKeyframe extends HasSingle_LORA_HOOK, ComfyNode<ADE$_SetLoraHookKeyframe_input, ADE$_SetLoraHookKeyframe_output> {
    nameInComfy: "ADE_SetLoraHookKeyframe"
}
export interface ADE$_SetLoraHookKeyframe_output {
    LORA_HOOK: ComfyNodeOutput<'LORA_HOOK', 0>,
}
export interface ADE$_SetLoraHookKeyframe_input {
    lora_hook: _LORA_HOOK
    hook_kf: _LORA_HOOK_KEYFRAMES
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AttachLoraHookToCLIP [Animate Diff 🎭🅐🅓_conditioning]
export interface ADE$_AttachLoraHookToCLIP extends HasSingle_CLIP, ComfyNode<ADE$_AttachLoraHookToCLIP_input, ADE$_AttachLoraHookToCLIP_output> {
    nameInComfy: "ADE_AttachLoraHookToCLIP"
}
export interface ADE$_AttachLoraHookToCLIP_output {
    hook_CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface ADE$_AttachLoraHookToCLIP_input {
    clip: _CLIP
    lora_hook: _LORA_HOOK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_LoraHookKeyframe [Animate Diff 🎭🅐🅓_conditioning_schedule lora hooks]
export interface ADE$_LoraHookKeyframe extends HasSingle_LORA_HOOK_KEYFRAMES, ComfyNode<ADE$_LoraHookKeyframe_input, ADE$_LoraHookKeyframe_output> {
    nameInComfy: "ADE_LoraHookKeyframe"
}
export interface ADE$_LoraHookKeyframe_output {
    HOOK_KF: ComfyNodeOutput<'LORA_HOOK_KEYFRAMES', 0>,
}
export interface ADE$_LoraHookKeyframe_input {
    /** default=1 min=20 max=20 step=0.01 */
    strength_model?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    prev_hook_kf?: _LORA_HOOK_KEYFRAMES
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_LoraHookKeyframeInterpolation [Animate Diff 🎭🅐🅓_conditioning_schedule lora hooks]
export interface ADE$_LoraHookKeyframeInterpolation extends HasSingle_LORA_HOOK_KEYFRAMES, ComfyNode<ADE$_LoraHookKeyframeInterpolation_input, ADE$_LoraHookKeyframeInterpolation_output> {
    nameInComfy: "ADE_LoraHookKeyframeInterpolation"
}
export interface ADE$_LoraHookKeyframeInterpolation_output {
    HOOK_KF: ComfyNodeOutput<'LORA_HOOK_KEYFRAMES', 0>,
}
export interface ADE$_LoraHookKeyframeInterpolation_input {
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=1 min=10 max=10 step=0.001 */
    strength_start?: _FLOAT
    /** default=1 min=10 max=10 step=0.001 */
    strength_end?: _FLOAT
    interpolation: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
    /** default=5 min=100 max=100 step=1 */
    intervals?: _INT
    /** default=false */
    print_keyframes?: _BOOLEAN
    prev_hook_kf?: _LORA_HOOK_KEYFRAMES
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_LoraHookKeyframeFromStrengthList [Animate Diff 🎭🅐🅓_conditioning_schedule lora hooks]
export interface ADE$_LoraHookKeyframeFromStrengthList extends HasSingle_LORA_HOOK_KEYFRAMES, ComfyNode<ADE$_LoraHookKeyframeFromStrengthList_input, ADE$_LoraHookKeyframeFromStrengthList_output> {
    nameInComfy: "ADE_LoraHookKeyframeFromStrengthList"
}
export interface ADE$_LoraHookKeyframeFromStrengthList_output {
    HOOK_KF: ComfyNodeOutput<'LORA_HOOK_KEYFRAMES', 0>,
}
export interface ADE$_LoraHookKeyframeFromStrengthList_input {
    /** default=-1 min=undefined step=0.001 */
    strengths_float?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=false */
    print_keyframes?: _BOOLEAN
    prev_hook_kf?: _LORA_HOOK_KEYFRAMES
}

// ADE_AttachLoraHookToConditioning [Animate Diff 🎭🅐🅓_conditioning_single cond ops]
export interface ADE$_AttachLoraHookToConditioning extends HasSingle_CONDITIONING, ComfyNode<ADE$_AttachLoraHookToConditioning_input, ADE$_AttachLoraHookToConditioning_output> {
    nameInComfy: "ADE_AttachLoraHookToConditioning"
}
export interface ADE$_AttachLoraHookToConditioning_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ADE$_AttachLoraHookToConditioning_input {
    conditioning: _CONDITIONING
    lora_hook: _LORA_HOOK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PairedConditioningSetMask [Animate Diff 🎭🅐🅓_conditioning]
export interface ADE$_PairedConditioningSetMask extends ComfyNode<ADE$_PairedConditioningSetMask_input, ADE$_PairedConditioningSetMask_output> {
    nameInComfy: "ADE_PairedConditioningSetMask"
}
export interface ADE$_PairedConditioningSetMask_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ADE$_PairedConditioningSetMask_input {
    positive_ADD: _CONDITIONING
    negative_ADD: _CONDITIONING
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
    opt_mask?: _MASK
    opt_lora_hook?: _LORA_HOOK
    opt_timesteps?: _TIMESTEPS_COND
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ConditioningSetMask [Animate Diff 🎭🅐🅓_conditioning_single cond ops]
export interface ADE$_ConditioningSetMask extends HasSingle_CONDITIONING, ComfyNode<ADE$_ConditioningSetMask_input, ADE$_ConditioningSetMask_output> {
    nameInComfy: "ADE_ConditioningSetMask"
}
export interface ADE$_ConditioningSetMask_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ADE$_ConditioningSetMask_input {
    cond_ADD: _CONDITIONING
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
    opt_mask?: _MASK
    opt_lora_hook?: _LORA_HOOK
    opt_timesteps?: _TIMESTEPS_COND
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PairedConditioningSetMaskAndCombine [Animate Diff 🎭🅐🅓_conditioning]
export interface ADE$_PairedConditioningSetMaskAndCombine extends ComfyNode<ADE$_PairedConditioningSetMaskAndCombine_input, ADE$_PairedConditioningSetMaskAndCombine_output> {
    nameInComfy: "ADE_PairedConditioningSetMaskAndCombine"
}
export interface ADE$_PairedConditioningSetMaskAndCombine_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ADE$_PairedConditioningSetMaskAndCombine_input {
    positive: _CONDITIONING
    negative: _CONDITIONING
    positive_ADD: _CONDITIONING
    negative_ADD: _CONDITIONING
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
    opt_mask?: _MASK
    opt_lora_hook?: _LORA_HOOK
    opt_timesteps?: _TIMESTEPS_COND
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ConditioningSetMaskAndCombine [Animate Diff 🎭🅐🅓_conditioning_single cond ops]
export interface ADE$_ConditioningSetMaskAndCombine extends HasSingle_CONDITIONING, ComfyNode<ADE$_ConditioningSetMaskAndCombine_input, ADE$_ConditioningSetMaskAndCombine_output> {
    nameInComfy: "ADE_ConditioningSetMaskAndCombine"
}
export interface ADE$_ConditioningSetMaskAndCombine_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ADE$_ConditioningSetMaskAndCombine_input {
    cond: _CONDITIONING
    cond_ADD: _CONDITIONING
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
    opt_mask?: _MASK
    opt_lora_hook?: _LORA_HOOK
    opt_timesteps?: _TIMESTEPS_COND
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PairedConditioningSetUnmaskedAndCombine [Animate Diff 🎭🅐🅓_conditioning]
export interface ADE$_PairedConditioningSetUnmaskedAndCombine extends ComfyNode<ADE$_PairedConditioningSetUnmaskedAndCombine_input, ADE$_PairedConditioningSetUnmaskedAndCombine_output> {
    nameInComfy: "ADE_PairedConditioningSetUnmaskedAndCombine"
}
export interface ADE$_PairedConditioningSetUnmaskedAndCombine_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ADE$_PairedConditioningSetUnmaskedAndCombine_input {
    positive: _CONDITIONING
    negative: _CONDITIONING
    positive_DEFAULT: _CONDITIONING
    negative_DEFAULT: _CONDITIONING
    opt_lora_hook?: _LORA_HOOK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ConditioningSetUnmaskedAndCombine [Animate Diff 🎭🅐🅓_conditioning_single cond ops]
export interface ADE$_ConditioningSetUnmaskedAndCombine extends HasSingle_CONDITIONING, ComfyNode<ADE$_ConditioningSetUnmaskedAndCombine_input, ADE$_ConditioningSetUnmaskedAndCombine_output> {
    nameInComfy: "ADE_ConditioningSetUnmaskedAndCombine"
}
export interface ADE$_ConditioningSetUnmaskedAndCombine_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ADE$_ConditioningSetUnmaskedAndCombine_input {
    cond: _CONDITIONING
    cond_DEFAULT: _CONDITIONING
    opt_lora_hook?: _LORA_HOOK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PairedConditioningCombine [Animate Diff 🎭🅐🅓_conditioning]
export interface ADE$_PairedConditioningCombine extends ComfyNode<ADE$_PairedConditioningCombine_input, ADE$_PairedConditioningCombine_output> {
    nameInComfy: "ADE_PairedConditioningCombine"
}
export interface ADE$_PairedConditioningCombine_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ADE$_PairedConditioningCombine_input {
    positive_A: _CONDITIONING
    negative_A: _CONDITIONING
    positive_B: _CONDITIONING
    negative_B: _CONDITIONING
}

// ADE_ConditioningCombine [Animate Diff 🎭🅐🅓_conditioning_single cond ops]
export interface ADE$_ConditioningCombine extends HasSingle_CONDITIONING, ComfyNode<ADE$_ConditioningCombine_input, ADE$_ConditioningCombine_output> {
    nameInComfy: "ADE_ConditioningCombine"
}
export interface ADE$_ConditioningCombine_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ADE$_ConditioningCombine_input {
    cond_A: _CONDITIONING
    cond_B: _CONDITIONING
}

// ADE_TimestepsConditioning [Animate Diff 🎭🅐🅓_conditioning]
export interface ADE$_TimestepsConditioning extends HasSingle_TIMESTEPS_COND, ComfyNode<ADE$_TimestepsConditioning_input, ADE$_TimestepsConditioning_output> {
    nameInComfy: "ADE_TimestepsConditioning"
}
export interface ADE$_TimestepsConditioning_output {
    TIMESTEPS_COND: ComfyNodeOutput<'TIMESTEPS_COND', 0>,
}
export interface ADE$_TimestepsConditioning_input {
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_NoiseLayerAdd [Animate Diff 🎭🅐🅓_noise layers]
export interface ADE$_NoiseLayerAdd extends HasSingle_NOISE_LAYERS, ComfyNode<ADE$_NoiseLayerAdd_input, ADE$_NoiseLayerAdd_output> {
    nameInComfy: "ADE_NoiseLayerAdd"
}
export interface ADE$_NoiseLayerAdd_output {
    NOISE_LAYERS: ComfyNodeOutput<'NOISE_LAYERS', 0>,
}
export interface ADE$_NoiseLayerAdd_input {
    /** default=0 min=9007199254740991 max=9007199254740991 */
    batch_offset?: _INT
    noise_type: Enum_ADE$_AnimateDiffSamplingSettings_noise_type
    seed_gen_override: Enum_ADE$_NoiseLayerAdd_seed_gen_override
    /** default=0 min=9007199254740991 max=9007199254740991 */
    seed_offset?: _INT
    /** default=0.5 min=10 max=10 step=0.001 */
    noise_weight?: _FLOAT
    prev_noise_layers?: _NOISE_LAYERS
    mask_optional?: _MASK
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed_override?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_NoiseLayerAddWeighted [Animate Diff 🎭🅐🅓_noise layers]
export interface ADE$_NoiseLayerAddWeighted extends HasSingle_NOISE_LAYERS, ComfyNode<ADE$_NoiseLayerAddWeighted_input, ADE$_NoiseLayerAddWeighted_output> {
    nameInComfy: "ADE_NoiseLayerAddWeighted"
}
export interface ADE$_NoiseLayerAddWeighted_output {
    NOISE_LAYERS: ComfyNodeOutput<'NOISE_LAYERS', 0>,
}
export interface ADE$_NoiseLayerAddWeighted_input {
    /** default=0 min=9007199254740991 max=9007199254740991 */
    batch_offset?: _INT
    noise_type: Enum_ADE$_AnimateDiffSamplingSettings_noise_type
    seed_gen_override: Enum_ADE$_NoiseLayerAdd_seed_gen_override
    /** default=0 min=9007199254740991 max=9007199254740991 */
    seed_offset?: _INT
    /** default=0.5 min=10 max=10 step=0.001 */
    noise_weight?: _FLOAT
    /** default=1 min=undefined step=0.001 */
    balance_multiplier?: _FLOAT
    prev_noise_layers?: _NOISE_LAYERS
    mask_optional?: _MASK
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed_override?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_NoiseLayerReplace [Animate Diff 🎭🅐🅓_noise layers]
export interface ADE$_NoiseLayerReplace extends HasSingle_NOISE_LAYERS, ComfyNode<ADE$_NoiseLayerReplace_input, ADE$_NoiseLayerReplace_output> {
    nameInComfy: "ADE_NoiseLayerReplace"
}
export interface ADE$_NoiseLayerReplace_output {
    NOISE_LAYERS: ComfyNodeOutput<'NOISE_LAYERS', 0>,
}
export interface ADE$_NoiseLayerReplace_input {
    /** default=0 min=9007199254740991 max=9007199254740991 */
    batch_offset?: _INT
    noise_type: Enum_ADE$_AnimateDiffSamplingSettings_noise_type
    seed_gen_override: Enum_ADE$_NoiseLayerAdd_seed_gen_override
    /** default=0 min=9007199254740991 max=9007199254740991 */
    seed_offset?: _INT
    prev_noise_layers?: _NOISE_LAYERS
    mask_optional?: _MASK
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed_override?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AnimateDiffSettings [Animate Diff 🎭🅐🅓_ad settings]
export interface ADE$_AnimateDiffSettings extends HasSingle_AD_SETTINGS, ComfyNode<ADE$_AnimateDiffSettings_input, ADE$_AnimateDiffSettings_output> {
    nameInComfy: "ADE_AnimateDiffSettings"
}
export interface ADE$_AnimateDiffSettings_output {
    AD_SETTINGS: ComfyNodeOutput<'AD_SETTINGS', 0>,
}
export interface ADE$_AnimateDiffSettings_input {
    pe_adjust?: _PE_ADJUST
    weight_adjust?: _WEIGHT_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AdjustPESweetspotStretch [Animate Diff 🎭🅐🅓_ad settings_pe adjust]
export interface ADE$_AdjustPESweetspotStretch extends HasSingle_PE_ADJUST, ComfyNode<ADE$_AdjustPESweetspotStretch_input, ADE$_AdjustPESweetspotStretch_output> {
    nameInComfy: "ADE_AdjustPESweetspotStretch"
}
export interface ADE$_AdjustPESweetspotStretch_output {
    PE_ADJUST: ComfyNodeOutput<'PE_ADJUST', 0>,
}
export interface ADE$_AdjustPESweetspotStretch_input {
    /** default=16 min=9007199254740991 max=9007199254740991 */
    sweetspot?: _INT
    /** default=16 min=9007199254740991 max=9007199254740991 */
    new_sweetspot?: _INT
    /** default=false */
    print_adjustment?: _BOOLEAN
    prev_pe_adjust?: _PE_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AdjustPEFullStretch [Animate Diff 🎭🅐🅓_ad settings_pe adjust]
export interface ADE$_AdjustPEFullStretch extends HasSingle_PE_ADJUST, ComfyNode<ADE$_AdjustPEFullStretch_input, ADE$_AdjustPEFullStretch_output> {
    nameInComfy: "ADE_AdjustPEFullStretch"
}
export interface ADE$_AdjustPEFullStretch_output {
    PE_ADJUST: ComfyNodeOutput<'PE_ADJUST', 0>,
}
export interface ADE$_AdjustPEFullStretch_input {
    /** default=0 min=9007199254740991 max=9007199254740991 */
    pe_stretch?: _INT
    /** default=false */
    print_adjustment?: _BOOLEAN
    prev_pe_adjust?: _PE_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AdjustPEManual [Animate Diff 🎭🅐🅓_ad settings_pe adjust]
export interface ADE$_AdjustPEManual extends HasSingle_PE_ADJUST, ComfyNode<ADE$_AdjustPEManual_input, ADE$_AdjustPEManual_output> {
    nameInComfy: "ADE_AdjustPEManual"
}
export interface ADE$_AdjustPEManual_output {
    PE_ADJUST: ComfyNodeOutput<'PE_ADJUST', 0>,
}
export interface ADE$_AdjustPEManual_input {
    /** default=0 min=undefined step=1 */
    cap_initial_pe_length?: _INT
    /** default=0 min=undefined step=1 */
    interpolate_pe_to_length?: _INT
    /** default=0 min=undefined step=1 */
    initial_pe_idx_offset?: _INT
    /** default=0 min=undefined step=1 */
    final_pe_idx_offset?: _INT
    /** default=false */
    print_adjustment?: _BOOLEAN
    prev_pe_adjust?: _PE_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AdjustWeightAllAdd [Animate Diff 🎭🅐🅓_ad settings_weight adjust]
export interface ADE$_AdjustWeightAllAdd extends HasSingle_WEIGHT_ADJUST, ComfyNode<ADE$_AdjustWeightAllAdd_input, ADE$_AdjustWeightAllAdd_output> {
    nameInComfy: "ADE_AdjustWeightAllAdd"
}
export interface ADE$_AdjustWeightAllAdd_output {
    WEIGHT_ADJUST: ComfyNodeOutput<'WEIGHT_ADJUST', 0>,
}
export interface ADE$_AdjustWeightAllAdd_input {
    /** default=0 min=2 max=2 step=0.000001 */
    all_ADD?: _FLOAT
    /** default=false */
    print_adjustment?: _BOOLEAN
    prev_weight_adjust?: _WEIGHT_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AdjustWeightAllMult [Animate Diff 🎭🅐🅓_ad settings_weight adjust]
export interface ADE$_AdjustWeightAllMult extends HasSingle_WEIGHT_ADJUST, ComfyNode<ADE$_AdjustWeightAllMult_input, ADE$_AdjustWeightAllMult_output> {
    nameInComfy: "ADE_AdjustWeightAllMult"
}
export interface ADE$_AdjustWeightAllMult_output {
    WEIGHT_ADJUST: ComfyNodeOutput<'WEIGHT_ADJUST', 0>,
}
export interface ADE$_AdjustWeightAllMult_input {
    /** default=1 min=2 max=2 step=0.000001 */
    all_MULT?: _FLOAT
    /** default=false */
    print_adjustment?: _BOOLEAN
    prev_weight_adjust?: _WEIGHT_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AdjustWeightIndivAdd [Animate Diff 🎭🅐🅓_ad settings_weight adjust]
export interface ADE$_AdjustWeightIndivAdd extends HasSingle_WEIGHT_ADJUST, ComfyNode<ADE$_AdjustWeightIndivAdd_input, ADE$_AdjustWeightIndivAdd_output> {
    nameInComfy: "ADE_AdjustWeightIndivAdd"
}
export interface ADE$_AdjustWeightIndivAdd_output {
    WEIGHT_ADJUST: ComfyNodeOutput<'WEIGHT_ADJUST', 0>,
}
export interface ADE$_AdjustWeightIndivAdd_input {
    /** default=0 min=2 max=2 step=0.000001 */
    pe_ADD?: _FLOAT
    /** default=0 min=2 max=2 step=0.000001 */
    attn_ADD?: _FLOAT
    /** default=0 min=2 max=2 step=0.000001 */
    other_ADD?: _FLOAT
    /** default=false */
    print_adjustment?: _BOOLEAN
    prev_weight_adjust?: _WEIGHT_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AdjustWeightIndivMult [Animate Diff 🎭🅐🅓_ad settings_weight adjust]
export interface ADE$_AdjustWeightIndivMult extends HasSingle_WEIGHT_ADJUST, ComfyNode<ADE$_AdjustWeightIndivMult_input, ADE$_AdjustWeightIndivMult_output> {
    nameInComfy: "ADE_AdjustWeightIndivMult"
}
export interface ADE$_AdjustWeightIndivMult_output {
    WEIGHT_ADJUST: ComfyNodeOutput<'WEIGHT_ADJUST', 0>,
}
export interface ADE$_AdjustWeightIndivMult_input {
    /** default=1 min=2 max=2 step=0.000001 */
    pe_MULT?: _FLOAT
    /** default=1 min=2 max=2 step=0.000001 */
    attn_MULT?: _FLOAT
    /** default=1 min=2 max=2 step=0.000001 */
    other_MULT?: _FLOAT
    /** default=false */
    print_adjustment?: _BOOLEAN
    prev_weight_adjust?: _WEIGHT_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AdjustWeightIndivAttnAdd [Animate Diff 🎭🅐🅓_ad settings_weight adjust]
export interface ADE$_AdjustWeightIndivAttnAdd extends HasSingle_WEIGHT_ADJUST, ComfyNode<ADE$_AdjustWeightIndivAttnAdd_input, ADE$_AdjustWeightIndivAttnAdd_output> {
    nameInComfy: "ADE_AdjustWeightIndivAttnAdd"
}
export interface ADE$_AdjustWeightIndivAttnAdd_output {
    WEIGHT_ADJUST: ComfyNodeOutput<'WEIGHT_ADJUST', 0>,
}
export interface ADE$_AdjustWeightIndivAttnAdd_input {
    /** default=0 min=2 max=2 step=0.000001 */
    pe_ADD?: _FLOAT
    /** default=0 min=2 max=2 step=0.000001 */
    attn_ADD?: _FLOAT
    /** default=0 min=2 max=2 step=0.000001 */
    attn_q_ADD?: _FLOAT
    /** default=0 min=2 max=2 step=0.000001 */
    attn_k_ADD?: _FLOAT
    /** default=0 min=2 max=2 step=0.000001 */
    attn_v_ADD?: _FLOAT
    /** default=0 min=2 max=2 step=0.000001 */
    attn_out_weight_ADD?: _FLOAT
    /** default=0 min=2 max=2 step=0.000001 */
    attn_out_bias_ADD?: _FLOAT
    /** default=0 min=2 max=2 step=0.000001 */
    other_ADD?: _FLOAT
    /** default=false */
    print_adjustment?: _BOOLEAN
    prev_weight_adjust?: _WEIGHT_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AdjustWeightIndivAttnMult [Animate Diff 🎭🅐🅓_ad settings_weight adjust]
export interface ADE$_AdjustWeightIndivAttnMult extends HasSingle_WEIGHT_ADJUST, ComfyNode<ADE$_AdjustWeightIndivAttnMult_input, ADE$_AdjustWeightIndivAttnMult_output> {
    nameInComfy: "ADE_AdjustWeightIndivAttnMult"
}
export interface ADE$_AdjustWeightIndivAttnMult_output {
    WEIGHT_ADJUST: ComfyNodeOutput<'WEIGHT_ADJUST', 0>,
}
export interface ADE$_AdjustWeightIndivAttnMult_input {
    /** default=1 min=2 max=2 step=0.000001 */
    pe_MULT?: _FLOAT
    /** default=1 min=2 max=2 step=0.000001 */
    attn_MULT?: _FLOAT
    /** default=1 min=2 max=2 step=0.000001 */
    attn_q_MULT?: _FLOAT
    /** default=1 min=2 max=2 step=0.000001 */
    attn_k_MULT?: _FLOAT
    /** default=1 min=2 max=2 step=0.000001 */
    attn_v_MULT?: _FLOAT
    /** default=1 min=2 max=2 step=0.000001 */
    attn_out_weight_MULT?: _FLOAT
    /** default=1 min=2 max=2 step=0.000001 */
    attn_out_bias_MULT?: _FLOAT
    /** default=1 min=2 max=2 step=0.000001 */
    other_MULT?: _FLOAT
    /** default=false */
    print_adjustment?: _BOOLEAN
    prev_weight_adjust?: _WEIGHT_ADJUST
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CustomCFGSimple [Animate Diff 🎭🅐🅓_sample settings_custom cfg]
export interface ADE$_CustomCFGSimple extends HasSingle_CUSTOM_CFG, ComfyNode<ADE$_CustomCFGSimple_input, ADE$_CustomCFGSimple_output> {
    nameInComfy: "ADE_CustomCFGSimple"
}
export interface ADE$_CustomCFGSimple_output {
    CUSTOM_CFG: ComfyNodeOutput<'CUSTOM_CFG', 0>,
}
export interface ADE$_CustomCFGSimple_input {
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    cfg_extras?: _CFG_EXTRAS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CustomCFG [Animate Diff 🎭🅐🅓_sample settings_custom cfg]
export interface ADE$_CustomCFG extends HasSingle_CUSTOM_CFG, ComfyNode<ADE$_CustomCFG_input, ADE$_CustomCFG_output> {
    nameInComfy: "ADE_CustomCFG"
}
export interface ADE$_CustomCFG_output {
    CUSTOM_CFG: ComfyNodeOutput<'CUSTOM_CFG', 0>,
}
export interface ADE$_CustomCFG_input {
    cfg_multival: _MULTIVAL
    cfg_extras?: _CFG_EXTRAS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CustomCFGKeyframeSimple [Animate Diff 🎭🅐🅓_sample settings_custom cfg]
export interface ADE$_CustomCFGKeyframeSimple extends HasSingle_CUSTOM_CFG, ComfyNode<ADE$_CustomCFGKeyframeSimple_input, ADE$_CustomCFGKeyframeSimple_output> {
    nameInComfy: "ADE_CustomCFGKeyframeSimple"
}
export interface ADE$_CustomCFGKeyframeSimple_output {
    CUSTOM_CFG: ComfyNodeOutput<'CUSTOM_CFG', 0>,
}
export interface ADE$_CustomCFGKeyframeSimple_input {
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    prev_custom_cfg?: _CUSTOM_CFG
    cfg_extras?: _CFG_EXTRAS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CustomCFGKeyframe [Animate Diff 🎭🅐🅓_sample settings_custom cfg]
export interface ADE$_CustomCFGKeyframe extends HasSingle_CUSTOM_CFG, ComfyNode<ADE$_CustomCFGKeyframe_input, ADE$_CustomCFGKeyframe_output> {
    nameInComfy: "ADE_CustomCFGKeyframe"
}
export interface ADE$_CustomCFGKeyframe_output {
    CUSTOM_CFG: ComfyNodeOutput<'CUSTOM_CFG', 0>,
}
export interface ADE$_CustomCFGKeyframe_input {
    cfg_multival: _MULTIVAL
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    prev_custom_cfg?: _CUSTOM_CFG
    cfg_extras?: _CFG_EXTRAS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CustomCFGKeyframeInterpolation [Animate Diff 🎭🅐🅓_sample settings_custom cfg]
export interface ADE$_CustomCFGKeyframeInterpolation extends HasSingle_CUSTOM_CFG, ComfyNode<ADE$_CustomCFGKeyframeInterpolation_input, ADE$_CustomCFGKeyframeInterpolation_output> {
    nameInComfy: "ADE_CustomCFGKeyframeInterpolation"
}
export interface ADE$_CustomCFGKeyframeInterpolation_output {
    CUSTOM_CFG: ComfyNodeOutput<'CUSTOM_CFG', 0>,
}
export interface ADE$_CustomCFGKeyframeInterpolation_input {
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=8 min=100 max=100 step=0.1 */
    cfg_start?: _FLOAT
    /** default=8 min=100 max=100 step=0.1 */
    cfg_end?: _FLOAT
    interpolation: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
    /** default=50 min=100 max=100 step=1 */
    intervals?: _INT
    /** default=false */
    print_keyframes?: _BOOLEAN
    prev_custom_cfg?: _CUSTOM_CFG
    cfg_extras?: _CFG_EXTRAS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CustomCFGKeyframeFromList [Animate Diff 🎭🅐🅓_sample settings_custom cfg]
export interface ADE$_CustomCFGKeyframeFromList extends HasSingle_CUSTOM_CFG, ComfyNode<ADE$_CustomCFGKeyframeFromList_input, ADE$_CustomCFGKeyframeFromList_output> {
    nameInComfy: "ADE_CustomCFGKeyframeFromList"
}
export interface ADE$_CustomCFGKeyframeFromList_output {
    CUSTOM_CFG: ComfyNodeOutput<'CUSTOM_CFG', 0>,
}
export interface ADE$_CustomCFGKeyframeFromList_input {
    /** default=-1 min=undefined step=0.001 */
    cfgs_float?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    /** default=false */
    print_keyframes?: _BOOLEAN
    prev_custom_cfg?: _CUSTOM_CFG
    cfg_extras?: _CFG_EXTRAS
}

// ADE_CFGExtrasPAGSimple [Animate Diff 🎭🅐🅓_sample settings_cfg extras]
export interface ADE$_CFGExtrasPAGSimple extends HasSingle_CFG_EXTRAS, ComfyNode<ADE$_CFGExtrasPAGSimple_input, ADE$_CFGExtrasPAGSimple_output> {
    nameInComfy: "ADE_CFGExtrasPAGSimple"
}
export interface ADE$_CFGExtrasPAGSimple_output {
    CFG_EXTRAS: ComfyNodeOutput<'CFG_EXTRAS', 0>,
}
export interface ADE$_CFGExtrasPAGSimple_input {
    /** default=3 min=100 max=100 step=0.1 */
    scale?: _FLOAT
    prev_extras?: _CFG_EXTRAS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CFGExtrasPAG [Animate Diff 🎭🅐🅓_sample settings_cfg extras]
export interface ADE$_CFGExtrasPAG extends HasSingle_CFG_EXTRAS, ComfyNode<ADE$_CFGExtrasPAG_input, ADE$_CFGExtrasPAG_output> {
    nameInComfy: "ADE_CFGExtrasPAG"
}
export interface ADE$_CFGExtrasPAG_output {
    CFG_EXTRAS: ComfyNodeOutput<'CFG_EXTRAS', 0>,
}
export interface ADE$_CFGExtrasPAG_input {
    scale_multival: _MULTIVAL
    prev_extras?: _CFG_EXTRAS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CFGExtrasRescaleCFGSimple [Animate Diff 🎭🅐🅓_sample settings_cfg extras]
export interface ADE$_CFGExtrasRescaleCFGSimple extends HasSingle_CFG_EXTRAS, ComfyNode<ADE$_CFGExtrasRescaleCFGSimple_input, ADE$_CFGExtrasRescaleCFGSimple_output> {
    nameInComfy: "ADE_CFGExtrasRescaleCFGSimple"
}
export interface ADE$_CFGExtrasRescaleCFGSimple_output {
    CFG_EXTRAS: ComfyNodeOutput<'CFG_EXTRAS', 0>,
}
export interface ADE$_CFGExtrasRescaleCFGSimple_input {
    /** default=0.7 min=1 max=1 step=0.01 */
    multiplier?: _FLOAT
    prev_extras?: _CFG_EXTRAS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CFGExtrasRescaleCFG [Animate Diff 🎭🅐🅓_sample settings_cfg extras]
export interface ADE$_CFGExtrasRescaleCFG extends HasSingle_CFG_EXTRAS, ComfyNode<ADE$_CFGExtrasRescaleCFG_input, ADE$_CFGExtrasRescaleCFG_output> {
    nameInComfy: "ADE_CFGExtrasRescaleCFG"
}
export interface ADE$_CFGExtrasRescaleCFG_output {
    CFG_EXTRAS: ComfyNodeOutput<'CFG_EXTRAS', 0>,
}
export interface ADE$_CFGExtrasRescaleCFG_input {
    mult_multival: _MULTIVAL
    prev_extras?: _CFG_EXTRAS
}

// ADE_SigmaSchedule [Animate Diff 🎭🅐🅓_sample settings_sigma schedule]
export interface ADE$_SigmaSchedule extends HasSingle_SIGMA_SCHEDULE, ComfyNode<ADE$_SigmaSchedule_input, ADE$_SigmaSchedule_output> {
    nameInComfy: "ADE_SigmaSchedule"
}
export interface ADE$_SigmaSchedule_output {
    SIGMA_SCHEDULE: ComfyNodeOutput<'SIGMA_SCHEDULE', 0>,
}
export interface ADE$_SigmaSchedule_input {
    beta_schedule: Enum_ADE$_SigmaSchedule_beta_schedule
}

// ADE_RawSigmaSchedule [Animate Diff 🎭🅐🅓_sample settings_sigma schedule]
export interface ADE$_RawSigmaSchedule extends HasSingle_SIGMA_SCHEDULE, ComfyNode<ADE$_RawSigmaSchedule_input, ADE$_RawSigmaSchedule_output> {
    nameInComfy: "ADE_RawSigmaSchedule"
}
export interface ADE$_RawSigmaSchedule_output {
    SIGMA_SCHEDULE: ComfyNodeOutput<'SIGMA_SCHEDULE', 0>,
}
export interface ADE$_RawSigmaSchedule_input {
    raw_beta_schedule: Enum_ADE$_RawSigmaSchedule_raw_beta_schedule
    /** default=0.00085 min=1 max=1 step=0.000001 */
    linear_start?: _FLOAT
    /** default=0.012 min=1 max=1 step=0.000001 */
    linear_end?: _FLOAT
    sampling: Enum_ADE$_RawSigmaSchedule_sampling
    /** default=50 min=1000 max=1000 */
    lcm_original_timesteps?: _INT
    /** default=false */
    lcm_zsnr?: _BOOLEAN
}

// ADE_SigmaScheduleWeightedAverage [Animate Diff 🎭🅐🅓_sample settings_sigma schedule]
export interface ADE$_SigmaScheduleWeightedAverage extends HasSingle_SIGMA_SCHEDULE, ComfyNode<ADE$_SigmaScheduleWeightedAverage_input, ADE$_SigmaScheduleWeightedAverage_output> {
    nameInComfy: "ADE_SigmaScheduleWeightedAverage"
}
export interface ADE$_SigmaScheduleWeightedAverage_output {
    SIGMA_SCHEDULE: ComfyNodeOutput<'SIGMA_SCHEDULE', 0>,
}
export interface ADE$_SigmaScheduleWeightedAverage_input {
    schedule_A: _SIGMA_SCHEDULE
    schedule_B: _SIGMA_SCHEDULE
    /** default=0.5 min=1 max=1 step=0.001 */
    weight_A?: _FLOAT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_SigmaScheduleWeightedAverageInterp [Animate Diff 🎭🅐🅓_sample settings_sigma schedule]
export interface ADE$_SigmaScheduleWeightedAverageInterp extends HasSingle_SIGMA_SCHEDULE, ComfyNode<ADE$_SigmaScheduleWeightedAverageInterp_input, ADE$_SigmaScheduleWeightedAverageInterp_output> {
    nameInComfy: "ADE_SigmaScheduleWeightedAverageInterp"
}
export interface ADE$_SigmaScheduleWeightedAverageInterp_output {
    SIGMA_SCHEDULE: ComfyNodeOutput<'SIGMA_SCHEDULE', 0>,
}
export interface ADE$_SigmaScheduleWeightedAverageInterp_input {
    schedule_A: _SIGMA_SCHEDULE
    schedule_B: _SIGMA_SCHEDULE
    /** default=0.5 min=1 max=1 step=0.001 */
    weight_A_Start?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.001 */
    weight_A_End?: _FLOAT
    interpolation: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_SigmaScheduleSplitAndCombine [Animate Diff 🎭🅐🅓_sample settings_sigma schedule]
export interface ADE$_SigmaScheduleSplitAndCombine extends HasSingle_SIGMA_SCHEDULE, ComfyNode<ADE$_SigmaScheduleSplitAndCombine_input, ADE$_SigmaScheduleSplitAndCombine_output> {
    nameInComfy: "ADE_SigmaScheduleSplitAndCombine"
}
export interface ADE$_SigmaScheduleSplitAndCombine_output {
    SIGMA_SCHEDULE: ComfyNodeOutput<'SIGMA_SCHEDULE', 0>,
}
export interface ADE$_SigmaScheduleSplitAndCombine_input {
    schedule_Start: _SIGMA_SCHEDULE
    schedule_End: _SIGMA_SCHEDULE
    /** default=0.5 min=1 max=1 step=0.001 */
    idx_split_percent?: _FLOAT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_SigmaScheduleToSigmas [Animate Diff 🎭🅐🅓_sample settings_sigma schedule]
export interface ADE$_SigmaScheduleToSigmas extends HasSingle_SIGMAS, ComfyNode<ADE$_SigmaScheduleToSigmas_input, ADE$_SigmaScheduleToSigmas_output> {
    nameInComfy: "ADE_SigmaScheduleToSigmas"
}
export interface ADE$_SigmaScheduleToSigmas_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface ADE$_SigmaScheduleToSigmas_input {
    sigma_schedule: _SIGMA_SCHEDULE
    scheduler: Enum_KSampler_scheduler
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_NoisedImageInjection [Animate Diff 🎭🅐🅓_sample settings_image inject]
export interface ADE$_NoisedImageInjection extends HasSingle_IMAGE_INJECT, ComfyNode<ADE$_NoisedImageInjection_input, ADE$_NoisedImageInjection_output> {
    nameInComfy: "ADE_NoisedImageInjection"
}
export interface ADE$_NoisedImageInjection_output {
    IMAGE_INJECT: ComfyNodeOutput<'IMAGE_INJECT', 0>,
}
export interface ADE$_NoisedImageInjection_input {
    image: _IMAGE
    vae: _VAE
    mask_opt?: _MASK
    /** default=false */
    invert_mask?: _BOOLEAN
    /** default=true */
    resize_image?: _BOOLEAN
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    img_inject_opts?: _IMAGE_INJECT_OPTIONS
    strength_multival?: _MULTIVAL
    prev_image_inject?: _IMAGE_INJECT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_NoisedImageInjectOptions [Animate Diff 🎭🅐🅓_sample settings_image inject]
export interface ADE$_NoisedImageInjectOptions extends HasSingle_IMAGE_INJECT_OPTIONS, ComfyNode<ADE$_NoisedImageInjectOptions_input, ADE$_NoisedImageInjectOptions_output> {
    nameInComfy: "ADE_NoisedImageInjectOptions"
}
export interface ADE$_NoisedImageInjectOptions_output {
    IMG_INJECT_OPTS: ComfyNodeOutput<'IMAGE_INJECT_OPTIONS', 0>,
}
export interface ADE$_NoisedImageInjectOptions_input {
    /** default=0 min=16384 max=16384 step=1 */
    composite_x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    composite_y?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PromptScheduling [Animate Diff 🎭🅐🅓_scheduling]
export interface ADE$_PromptScheduling extends HasSingle_CONDITIONING, ComfyNode<ADE$_PromptScheduling_input, ADE$_PromptScheduling_output> {
    nameInComfy: "ADE_PromptScheduling"
}
export interface ADE$_PromptScheduling_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ADE$_PromptScheduling_input {
    /** default="" */
    prompts?: _STRING
    clip: _CLIP
    /** default="" */
    prepend_text?: _STRING
    /** default="" */
    append_text?: _STRING
    values_replace?: _VALUES_REPLACE
    /** default=false */
    print_schedule?: _BOOLEAN
    /** default=0 min=9007199254740991 max=9007199254740991 step=1 */
    max_length?: _INT
    tensor_interp?: Enum_ADE$_PromptScheduling_tensor_interp
}

// ADE_PromptSchedulingLatents [Animate Diff 🎭🅐🅓_scheduling]
export interface ADE$_PromptSchedulingLatents extends HasSingle_CONDITIONING, HasSingle_LATENT, ComfyNode<ADE$_PromptSchedulingLatents_input, ADE$_PromptSchedulingLatents_output> {
    nameInComfy: "ADE_PromptSchedulingLatents"
}
export interface ADE$_PromptSchedulingLatents_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    LATENT: ComfyNodeOutput<'LATENT', 1>,
}
export interface ADE$_PromptSchedulingLatents_input {
    /** default="" */
    prompts?: _STRING
    clip: _CLIP
    latent: _LATENT
    /** default="" */
    prepend_text?: _STRING
    /** default="" */
    append_text?: _STRING
    values_replace?: _VALUES_REPLACE
    /** default=false */
    print_schedule?: _BOOLEAN
    tensor_interp?: Enum_ADE$_PromptScheduling_tensor_interp
}

// ADE_ValueScheduling [Animate Diff 🎭🅐🅓_scheduling]
export interface ADE$_ValueScheduling extends HasSingle_FLOAT, HasSingle_FLOATS, HasSingle_INT, HasSingle_INTS, ComfyNode<ADE$_ValueScheduling_input, ADE$_ValueScheduling_output> {
    nameInComfy: "ADE_ValueScheduling"
}
export interface ADE$_ValueScheduling_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    FLOATS: ComfyNodeOutput<'FLOATS', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
    INTS: ComfyNodeOutput<'INTS', 3>,
}
export interface ADE$_ValueScheduling_input {
    /** default="" */
    values?: _STRING
    /** default=false */
    print_schedule?: _BOOLEAN
    /** default=0 min=9007199254740991 max=9007199254740991 step=1 */
    max_length?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ValueSchedulingLatents [Animate Diff 🎭🅐🅓_scheduling]
export interface ADE$_ValueSchedulingLatents extends HasSingle_FLOAT, HasSingle_FLOATS, HasSingle_INT, HasSingle_INTS, ComfyNode<ADE$_ValueSchedulingLatents_input, ADE$_ValueSchedulingLatents_output> {
    nameInComfy: "ADE_ValueSchedulingLatents"
}
export interface ADE$_ValueSchedulingLatents_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    FLOATS: ComfyNodeOutput<'FLOATS', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
    INTS: ComfyNodeOutput<'INTS', 3>,
}
export interface ADE$_ValueSchedulingLatents_input {
    /** default="" */
    values?: _STRING
    latent: _LATENT
    /** default=false */
    print_schedule?: _BOOLEAN
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ValuesReplace [Animate Diff 🎭🅐🅓_scheduling]
export interface ADE$_ValuesReplace extends HasSingle_VALUES_REPLACE, ComfyNode<ADE$_ValuesReplace_input, ADE$_ValuesReplace_output> {
    nameInComfy: "ADE_ValuesReplace"
}
export interface ADE$_ValuesReplace_output {
    VALUES_REPLACE: ComfyNodeOutput<'VALUES_REPLACE', 0>,
}
export interface ADE$_ValuesReplace_input {
    /** default="" */
    value_key?: _STRING
    floats: _FLOATS
    prev_replace?: _VALUES_REPLACE
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_FloatToFloats [Animate Diff 🎭🅐🅓_scheduling]
export interface ADE$_FloatToFloats extends HasSingle_FLOATS, ComfyNode<ADE$_FloatToFloats_input, ADE$_FloatToFloats_output> {
    nameInComfy: "ADE_FloatToFloats"
}
export interface ADE$_FloatToFloats_output {
    FLOATS: ComfyNodeOutput<'FLOATS', 0>,
}
export interface ADE$_FloatToFloats_input {
    /** default=39 */
    FLOAT?: _FLOAT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ADBlockCombo [Animate Diff 🎭🅐🅓_per block]
export interface ADE$_ADBlockCombo extends HasSingle_AD_BLOCK, ComfyNode<ADE$_ADBlockCombo_input, ADE$_ADBlockCombo_output> {
    nameInComfy: "ADE_ADBlockCombo"
}
export interface ADE$_ADBlockCombo_output {
    AD_BLOCK: ComfyNodeOutput<'AD_BLOCK', 0>,
}
export interface ADE$_ADBlockCombo_input {
    effect?: _MULTIVAL
    scale?: _MULTIVAL
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ADBlockIndiv [Animate Diff 🎭🅐🅓_per block]
export interface ADE$_ADBlockIndiv extends HasSingle_AD_BLOCK, ComfyNode<ADE$_ADBlockIndiv_input, ADE$_ADBlockIndiv_output> {
    nameInComfy: "ADE_ADBlockIndiv"
}
export interface ADE$_ADBlockIndiv_output {
    AD_BLOCK: ComfyNodeOutput<'AD_BLOCK', 0>,
}
export interface ADE$_ADBlockIndiv_input {
    effect?: _MULTIVAL
    scale_0?: _MULTIVAL
    scale_1?: _MULTIVAL
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PerBlockHighLevel [Animate Diff 🎭🅐🅓_per block]
export interface ADE$_PerBlockHighLevel extends HasSingle_PER_BLOCK, ComfyNode<ADE$_PerBlockHighLevel_input, ADE$_PerBlockHighLevel_output> {
    nameInComfy: "ADE_PerBlockHighLevel"
}
export interface ADE$_PerBlockHighLevel_output {
    PER_BLOCK: ComfyNodeOutput<'PER_BLOCK', 0>,
}
export interface ADE$_PerBlockHighLevel_input {
    down?: _AD_BLOCK
    mid?: _AD_BLOCK
    up?: _AD_BLOCK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PerBlock_SD15_MidLevel [Animate Diff 🎭🅐🅓_per block]
export interface ADE$_PerBlock$_SD15$_MidLevel extends HasSingle_PER_BLOCK, ComfyNode<ADE$_PerBlock$_SD15$_MidLevel_input, ADE$_PerBlock$_SD15$_MidLevel_output> {
    nameInComfy: "ADE_PerBlock_SD15_MidLevel"
}
export interface ADE$_PerBlock$_SD15$_MidLevel_output {
    PER_BLOCK: ComfyNodeOutput<'PER_BLOCK', 0>,
}
export interface ADE$_PerBlock$_SD15$_MidLevel_input {
    down_0?: _AD_BLOCK
    down_1?: _AD_BLOCK
    down_2?: _AD_BLOCK
    down_3?: _AD_BLOCK
    mid?: _AD_BLOCK
    up_0?: _AD_BLOCK
    up_1?: _AD_BLOCK
    up_2?: _AD_BLOCK
    up_3?: _AD_BLOCK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PerBlock_SD15_LowLevel [Animate Diff 🎭🅐🅓_per block]
export interface ADE$_PerBlock$_SD15$_LowLevel extends HasSingle_PER_BLOCK, ComfyNode<ADE$_PerBlock$_SD15$_LowLevel_input, ADE$_PerBlock$_SD15$_LowLevel_output> {
    nameInComfy: "ADE_PerBlock_SD15_LowLevel"
}
export interface ADE$_PerBlock$_SD15$_LowLevel_output {
    PER_BLOCK: ComfyNodeOutput<'PER_BLOCK', 0>,
}
export interface ADE$_PerBlock$_SD15$_LowLevel_input {
    down_0__0?: _AD_BLOCK
    down_0__1?: _AD_BLOCK
    down_1__0?: _AD_BLOCK
    down_1__1?: _AD_BLOCK
    down_2__0?: _AD_BLOCK
    down_2__1?: _AD_BLOCK
    down_3__0?: _AD_BLOCK
    down_3__1?: _AD_BLOCK
    mid?: _AD_BLOCK
    up_0__0?: _AD_BLOCK
    up_0__1?: _AD_BLOCK
    up_0__2?: _AD_BLOCK
    up_1__0?: _AD_BLOCK
    up_1__1?: _AD_BLOCK
    up_1__2?: _AD_BLOCK
    up_2__0?: _AD_BLOCK
    up_2__1?: _AD_BLOCK
    up_2__2?: _AD_BLOCK
    up_3__0?: _AD_BLOCK
    up_3__1?: _AD_BLOCK
    up_3__2?: _AD_BLOCK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PerBlock_SD15_FromFloats [Animate Diff 🎭🅐🅓_per block]
export interface ADE$_PerBlock$_SD15$_FromFloats extends HasSingle_PER_BLOCK, ComfyNode<ADE$_PerBlock$_SD15$_FromFloats_input, ADE$_PerBlock$_SD15$_FromFloats_output> {
    nameInComfy: "ADE_PerBlock_SD15_FromFloats"
}
export interface ADE$_PerBlock$_SD15$_FromFloats_output {
    PER_BLOCK: ComfyNodeOutput<'PER_BLOCK', 0>,
}
export interface ADE$_PerBlock$_SD15$_FromFloats_input {
    effect_21_floats?: _FLOATS
    scale_21_floats?: _FLOATS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PerBlock_SDXL_MidLevel [Animate Diff 🎭🅐🅓_per block]
export interface ADE$_PerBlock$_SDXL$_MidLevel extends HasSingle_PER_BLOCK, ComfyNode<ADE$_PerBlock$_SDXL$_MidLevel_input, ADE$_PerBlock$_SDXL$_MidLevel_output> {
    nameInComfy: "ADE_PerBlock_SDXL_MidLevel"
}
export interface ADE$_PerBlock$_SDXL$_MidLevel_output {
    PER_BLOCK: ComfyNodeOutput<'PER_BLOCK', 0>,
}
export interface ADE$_PerBlock$_SDXL$_MidLevel_input {
    down_0?: _AD_BLOCK
    down_1?: _AD_BLOCK
    down_2?: _AD_BLOCK
    mid?: _AD_BLOCK
    up_0?: _AD_BLOCK
    up_1?: _AD_BLOCK
    up_2?: _AD_BLOCK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PerBlock_SDXL_LowLevel [Animate Diff 🎭🅐🅓_per block]
export interface ADE$_PerBlock$_SDXL$_LowLevel extends HasSingle_PER_BLOCK, ComfyNode<ADE$_PerBlock$_SDXL$_LowLevel_input, ADE$_PerBlock$_SDXL$_LowLevel_output> {
    nameInComfy: "ADE_PerBlock_SDXL_LowLevel"
}
export interface ADE$_PerBlock$_SDXL$_LowLevel_output {
    PER_BLOCK: ComfyNodeOutput<'PER_BLOCK', 0>,
}
export interface ADE$_PerBlock$_SDXL$_LowLevel_input {
    down_0__0?: _AD_BLOCK
    down_0__1?: _AD_BLOCK
    down_1__0?: _AD_BLOCK
    down_1__1?: _AD_BLOCK
    down_2__0?: _AD_BLOCK
    down_2__1?: _AD_BLOCK
    mid?: _AD_BLOCK
    up_0__0?: _AD_BLOCK
    up_0__1?: _AD_BLOCK
    up_0__2?: _AD_BLOCK
    up_1__0?: _AD_BLOCK
    up_1__1?: _AD_BLOCK
    up_1__2?: _AD_BLOCK
    up_2__0?: _AD_BLOCK
    up_2__1?: _AD_BLOCK
    up_2__2?: _AD_BLOCK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PerBlock_SDXL_FromFloats [Animate Diff 🎭🅐🅓_per block]
export interface ADE$_PerBlock$_SDXL$_FromFloats extends HasSingle_PER_BLOCK, ComfyNode<ADE$_PerBlock$_SDXL$_FromFloats_input, ADE$_PerBlock$_SDXL$_FromFloats_output> {
    nameInComfy: "ADE_PerBlock_SDXL_FromFloats"
}
export interface ADE$_PerBlock$_SDXL$_FromFloats_output {
    PER_BLOCK: ComfyNodeOutput<'PER_BLOCK', 0>,
}
export interface ADE$_PerBlock$_SDXL$_FromFloats_input {
    effect_16_floats?: _FLOATS
    scale_16_floats?: _FLOATS
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_AnimateDiffUnload [Animate Diff 🎭🅐🅓_extras]
export interface ADE$_AnimateDiffUnload extends HasSingle_MODEL, ComfyNode<ADE$_AnimateDiffUnload_input, ADE$_AnimateDiffUnload_output> {
    nameInComfy: "ADE_AnimateDiffUnload"
}
export interface ADE$_AnimateDiffUnload_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ADE$_AnimateDiffUnload_input {
    model: _MODEL
}

// ADE_EmptyLatentImageLarge [Animate Diff 🎭🅐🅓_extras]
export interface ADE$_EmptyLatentImageLarge extends HasSingle_LATENT, ComfyNode<ADE$_EmptyLatentImageLarge_input, ADE$_EmptyLatentImageLarge_output> {
    nameInComfy: "ADE_EmptyLatentImageLarge"
}
export interface ADE$_EmptyLatentImageLarge_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface ADE$_EmptyLatentImageLarge_input {
    /** default=512 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1 min=262144 max=262144 */
    batch_size?: _INT
}

// CheckpointLoaderSimpleWithNoiseSelect [Animate Diff 🎭🅐🅓_extras]
export interface CheckpointLoaderSimpleWithNoiseSelect extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<CheckpointLoaderSimpleWithNoiseSelect_input, CheckpointLoaderSimpleWithNoiseSelect_output> {
    nameInComfy: "CheckpointLoaderSimpleWithNoiseSelect"
}
export interface CheckpointLoaderSimpleWithNoiseSelect_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
}
export interface CheckpointLoaderSimpleWithNoiseSelect_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** default="use existing" */
    beta_schedule?: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
    /** default=false */
    use_custom_scale_factor?: _BOOLEAN
    /** default=0.18215 min=1 max=1 step=0.00001 */
    scale_factor?: _FLOAT
}

// ADE_PerturbedAttentionGuidanceMultival [Animate Diff 🎭🅐🅓_extras]
export interface ADE$_PerturbedAttentionGuidanceMultival extends HasSingle_MODEL, ComfyNode<ADE$_PerturbedAttentionGuidanceMultival_input, ADE$_PerturbedAttentionGuidanceMultival_output> {
    nameInComfy: "ADE_PerturbedAttentionGuidanceMultival"
}
export interface ADE$_PerturbedAttentionGuidanceMultival_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ADE$_PerturbedAttentionGuidanceMultival_input {
    model: _MODEL
    scale_multival: _MULTIVAL
}

// ADE_RescaleCFGMultival [Animate Diff 🎭🅐🅓_extras]
export interface ADE$_RescaleCFGMultival extends HasSingle_MODEL, ComfyNode<ADE$_RescaleCFGMultival_input, ADE$_RescaleCFGMultival_output> {
    nameInComfy: "ADE_RescaleCFGMultival"
}
export interface ADE$_RescaleCFGMultival_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ADE$_RescaleCFGMultival_input {
    model: _MODEL
    mult_multival: _MULTIVAL
}

// ADE_AnimateDiffLoaderGen1 [Animate Diff 🎭🅐🅓_① Gen1 nodes ①]
export interface ADE$_AnimateDiffLoaderGen1 extends HasSingle_MODEL, ComfyNode<ADE$_AnimateDiffLoaderGen1_input, ADE$_AnimateDiffLoaderGen1_output> {
    nameInComfy: "ADE_AnimateDiffLoaderGen1"
}
export interface ADE$_AnimateDiffLoaderGen1_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ADE$_AnimateDiffLoaderGen1_input {
    model: _MODEL
    model_name: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    /** default="autoselect" */
    beta_schedule?: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
    context_options?: _CONTEXT_OPTIONS
    motion_lora?: _MOTION_LORA
    ad_settings?: _AD_SETTINGS
    ad_keyframes?: _AD_KEYFRAMES
    sample_settings?: _SAMPLE_SETTINGS
    scale_multival?: _MULTIVAL
    effect_multival?: _MULTIVAL
    per_block?: _PER_BLOCK
}

// ADE_AnimateDiffLoaderWithContext [Animate Diff 🎭🅐🅓_① Gen1 nodes ①]
export interface ADE$_AnimateDiffLoaderWithContext extends HasSingle_MODEL, ComfyNode<ADE$_AnimateDiffLoaderWithContext_input, ADE$_AnimateDiffLoaderWithContext_output> {
    nameInComfy: "ADE_AnimateDiffLoaderWithContext"
}
export interface ADE$_AnimateDiffLoaderWithContext_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ADE$_AnimateDiffLoaderWithContext_input {
    model: _MODEL
    model_name: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    /** default="autoselect" */
    beta_schedule?: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
    context_options?: _CONTEXT_OPTIONS
    motion_lora?: _MOTION_LORA
    ad_settings?: _AD_SETTINGS
    sample_settings?: _SAMPLE_SETTINGS
    /** default=1 min=undefined step=0.001 */
    motion_scale?: _FLOAT
    /** default=true */
    apply_v2_models_properly?: _BOOLEAN
    ad_keyframes?: _AD_KEYFRAMES
}

// ADE_UseEvolvedSampling [Animate Diff 🎭🅐🅓_② Gen2 nodes ②]
export interface ADE$_UseEvolvedSampling extends HasSingle_MODEL, ComfyNode<ADE$_UseEvolvedSampling_input, ADE$_UseEvolvedSampling_output> {
    nameInComfy: "ADE_UseEvolvedSampling"
}
export interface ADE$_UseEvolvedSampling_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ADE$_UseEvolvedSampling_input {
    model: _MODEL
    /** default="autoselect" */
    beta_schedule?: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
    m_models?: _M_MODELS
    context_options?: _CONTEXT_OPTIONS
    sample_settings?: _SAMPLE_SETTINGS
}

// ADE_ApplyAnimateDiffModelSimple [Animate Diff 🎭🅐🅓_② Gen2 nodes ②]
export interface ADE$_ApplyAnimateDiffModelSimple extends HasSingle_M_MODELS, ComfyNode<ADE$_ApplyAnimateDiffModelSimple_input, ADE$_ApplyAnimateDiffModelSimple_output> {
    nameInComfy: "ADE_ApplyAnimateDiffModelSimple"
}
export interface ADE$_ApplyAnimateDiffModelSimple_output {
    M_MODELS: ComfyNodeOutput<'M_MODELS', 0>,
}
export interface ADE$_ApplyAnimateDiffModelSimple_input {
    motion_model: _MOTION_MODEL_ADE
    motion_lora?: _MOTION_LORA
    scale_multival?: _MULTIVAL
    effect_multival?: _MULTIVAL
    ad_keyframes?: _AD_KEYFRAMES
    per_block?: _PER_BLOCK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_ApplyAnimateDiffModel [Animate Diff 🎭🅐🅓_② Gen2 nodes ②]
export interface ADE$_ApplyAnimateDiffModel extends HasSingle_M_MODELS, ComfyNode<ADE$_ApplyAnimateDiffModel_input, ADE$_ApplyAnimateDiffModel_output> {
    nameInComfy: "ADE_ApplyAnimateDiffModel"
}
export interface ADE$_ApplyAnimateDiffModel_output {
    M_MODELS: ComfyNodeOutput<'M_MODELS', 0>,
}
export interface ADE$_ApplyAnimateDiffModel_input {
    motion_model: _MOTION_MODEL_ADE
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    motion_lora?: _MOTION_LORA
    scale_multival?: _MULTIVAL
    effect_multival?: _MULTIVAL
    ad_keyframes?: _AD_KEYFRAMES
    prev_m_models?: _M_MODELS
    per_block?: _PER_BLOCK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_LoadAnimateDiffModel [Animate Diff 🎭🅐🅓_② Gen2 nodes ②]
export interface ADE$_LoadAnimateDiffModel extends HasSingle_MOTION_MODEL_ADE, ComfyNode<ADE$_LoadAnimateDiffModel_input, ADE$_LoadAnimateDiffModel_output> {
    nameInComfy: "ADE_LoadAnimateDiffModel"
}
export interface ADE$_LoadAnimateDiffModel_output {
    MOTION_MODEL: ComfyNodeOutput<'MOTION_MODEL_ADE', 0>,
}
export interface ADE$_LoadAnimateDiffModel_input {
    model_name: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    ad_settings?: _AD_SETTINGS
}

// ADE_ApplyAnimateLCMI2VModel [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_AnimateLCM-I2V]
export interface ADE$_ApplyAnimateLCMI2VModel extends HasSingle_M_MODELS, ComfyNode<ADE$_ApplyAnimateLCMI2VModel_input, ADE$_ApplyAnimateLCMI2VModel_output> {
    nameInComfy: "ADE_ApplyAnimateLCMI2VModel"
}
export interface ADE$_ApplyAnimateLCMI2VModel_output {
    M_MODELS: ComfyNodeOutput<'M_MODELS', 0>,
}
export interface ADE$_ApplyAnimateLCMI2VModel_input {
    motion_model: _MOTION_MODEL_ADE
    ref_latent: _LATENT
    /** default=0 min=10 max=10 step=0.001 */
    ref_drift?: _FLOAT
    /** default=false */
    apply_ref_when_disabled?: _BOOLEAN
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    motion_lora?: _MOTION_LORA
    scale_multival?: _MULTIVAL
    effect_multival?: _MULTIVAL
    ad_keyframes?: _AD_KEYFRAMES
    prev_m_models?: _M_MODELS
    per_block?: _PER_BLOCK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_LoadAnimateLCMI2VModel [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_AnimateLCM-I2V]
export interface ADE$_LoadAnimateLCMI2VModel extends ComfyNode<ADE$_LoadAnimateLCMI2VModel_input, ADE$_LoadAnimateLCMI2VModel_output> {
    nameInComfy: "ADE_LoadAnimateLCMI2VModel"
}
export interface ADE$_LoadAnimateLCMI2VModel_output {
    MOTION_MODEL: ComfyNodeOutput<'MOTION_MODEL_ADE', 0>,
    encoder_only: ComfyNodeOutput<'MOTION_MODEL_ADE', 1>,
}
export interface ADE$_LoadAnimateLCMI2VModel_input {
    model_name: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    ad_settings?: _AD_SETTINGS
}

// ADE_UpscaleAndVAEEncode [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_AnimateLCM-I2V]
export interface ADE$_UpscaleAndVAEEncode extends HasSingle_LATENT, ComfyNode<ADE$_UpscaleAndVAEEncode_input, ADE$_UpscaleAndVAEEncode_output> {
    nameInComfy: "ADE_UpscaleAndVAEEncode"
}
export interface ADE$_UpscaleAndVAEEncode_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface ADE$_UpscaleAndVAEEncode_input {
    image: _IMAGE
    vae: _VAE
    latent_size: _LATENT
    scale_method: Enum_ImageScale_upscale_method
    /** default="center" */
    crop?: Enum_LatentUpscale_crop
}

// ADE_InjectI2VIntoAnimateDiffModel [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_AnimateLCM-I2V_🧪experimental]
export interface ADE$_InjectI2VIntoAnimateDiffModel extends HasSingle_MOTION_MODEL_ADE, ComfyNode<ADE$_InjectI2VIntoAnimateDiffModel_input, ADE$_InjectI2VIntoAnimateDiffModel_output> {
    nameInComfy: "ADE_InjectI2VIntoAnimateDiffModel"
}
export interface ADE$_InjectI2VIntoAnimateDiffModel_output {
    MOTION_MODEL: ComfyNodeOutput<'MOTION_MODEL_ADE', 0>,
}
export interface ADE$_InjectI2VIntoAnimateDiffModel_input {
    model_name: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    motion_model: _MOTION_MODEL_ADE
    ad_settings?: _AD_SETTINGS
    /** */
    deprecation_warning?: _ADEWARN
}

// ADE_ApplyAnimateDiffModelWithCameraCtrl [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl]
export interface ADE$_ApplyAnimateDiffModelWithCameraCtrl extends HasSingle_M_MODELS, ComfyNode<ADE$_ApplyAnimateDiffModelWithCameraCtrl_input, ADE$_ApplyAnimateDiffModelWithCameraCtrl_output> {
    nameInComfy: "ADE_ApplyAnimateDiffModelWithCameraCtrl"
}
export interface ADE$_ApplyAnimateDiffModelWithCameraCtrl_output {
    M_MODELS: ComfyNodeOutput<'M_MODELS', 0>,
}
export interface ADE$_ApplyAnimateDiffModelWithCameraCtrl_input {
    motion_model: _MOTION_MODEL_ADE
    cameractrl_poses: _CAMERACTRL_POSES
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    motion_lora?: _MOTION_LORA
    scale_multival?: _MULTIVAL
    effect_multival?: _MULTIVAL
    cameractrl_multival?: _MULTIVAL
    ad_keyframes?: _AD_KEYFRAMES
    prev_m_models?: _M_MODELS
    per_block?: _PER_BLOCK
}

// ADE_LoadAnimateDiffModelWithCameraCtrl [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl]
export interface ADE$_LoadAnimateDiffModelWithCameraCtrl extends HasSingle_MOTION_MODEL_ADE, ComfyNode<ADE$_LoadAnimateDiffModelWithCameraCtrl_input, ADE$_LoadAnimateDiffModelWithCameraCtrl_output> {
    nameInComfy: "ADE_LoadAnimateDiffModelWithCameraCtrl"
}
export interface ADE$_LoadAnimateDiffModelWithCameraCtrl_output {
    MOTION_MODEL: ComfyNodeOutput<'MOTION_MODEL_ADE', 0>,
}
export interface ADE$_LoadAnimateDiffModelWithCameraCtrl_input {
    model_name: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    camera_ctrl: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    ad_settings?: _AD_SETTINGS
}

// ADE_CameraCtrlAnimateDiffKeyframe [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl]
export interface ADE$_CameraCtrlAnimateDiffKeyframe extends HasSingle_AD_KEYFRAMES, ComfyNode<ADE$_CameraCtrlAnimateDiffKeyframe_input, ADE$_CameraCtrlAnimateDiffKeyframe_output> {
    nameInComfy: "ADE_CameraCtrlAnimateDiffKeyframe"
}
export interface ADE$_CameraCtrlAnimateDiffKeyframe_output {
    AD_KEYFRAMES: ComfyNodeOutput<'AD_KEYFRAMES', 0>,
}
export interface ADE$_CameraCtrlAnimateDiffKeyframe_input {
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    prev_ad_keyframes?: _AD_KEYFRAMES
    scale_multival?: _MULTIVAL
    effect_multival?: _MULTIVAL
    cameractrl_multival?: _MULTIVAL
    /** default=true */
    inherit_missing?: _BOOLEAN
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_LoadCameraPoses [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses]
export interface ADE$_LoadCameraPoses extends HasSingle_CAMERACTRL_POSES, ComfyNode<ADE$_LoadCameraPoses_input, ADE$_LoadCameraPoses_output> {
    nameInComfy: "ADE_LoadCameraPoses"
}
export interface ADE$_LoadCameraPoses_output {
    CAMERACTRL_POSES: ComfyNodeOutput<'CAMERACTRL_POSES', 0>,
}
export interface ADE$_LoadCameraPoses_input {
    pose_filename: Enum_ADE$_LoadCameraPoses_pose_filename
}

// ADE_LoadCameraPosesFromPath [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses]
export interface ADE$_LoadCameraPosesFromPath extends HasSingle_CAMERACTRL_POSES, ComfyNode<ADE$_LoadCameraPosesFromPath_input, ADE$_LoadCameraPosesFromPath_output> {
    nameInComfy: "ADE_LoadCameraPosesFromPath"
}
export interface ADE$_LoadCameraPosesFromPath_output {
    CAMERACTRL_POSES: ComfyNodeOutput<'CAMERACTRL_POSES', 0>,
}
export interface ADE$_LoadCameraPosesFromPath_input {
    /** default="X://path/to/pose_file.txt" */
    file_path?: _STRING
}

// ADE_CameraPoseBasic [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses]
export interface ADE$_CameraPoseBasic extends HasSingle_CAMERACTRL_POSES, ComfyNode<ADE$_CameraPoseBasic_input, ADE$_CameraPoseBasic_output> {
    nameInComfy: "ADE_CameraPoseBasic"
}
export interface ADE$_CameraPoseBasic_output {
    CAMERACTRL_POSES: ComfyNodeOutput<'CAMERACTRL_POSES', 0>,
}
export interface ADE$_CameraPoseBasic_input {
    motion_type: Enum_ADE$_CameraPoseBasic_motion_type
    /** default=1 min=100 max=100 step=0.01 */
    speed?: _FLOAT
    /** default=16 */
    frame_length?: _INT
    prev_poses?: _CAMERACTRL_POSES
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_CameraPoseCombo [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses]
export interface ADE$_CameraPoseCombo extends HasSingle_CAMERACTRL_POSES, ComfyNode<ADE$_CameraPoseCombo_input, ADE$_CameraPoseCombo_output> {
    nameInComfy: "ADE_CameraPoseCombo"
}
export interface ADE$_CameraPoseCombo_output {
    CAMERACTRL_POSES: ComfyNodeOutput<'CAMERACTRL_POSES', 0>,
}
export interface ADE$_CameraPoseCombo_input {
    motion_type1: Enum_ADE$_CameraPoseBasic_motion_type
    motion_type2: Enum_ADE$_CameraPoseBasic_motion_type
    motion_type3: Enum_ADE$_CameraPoseBasic_motion_type
    motion_type4: Enum_ADE$_CameraPoseBasic_motion_type
    motion_type5: Enum_ADE$_CameraPoseBasic_motion_type
    motion_type6: Enum_ADE$_CameraPoseBasic_motion_type
    /** default=1 min=100 max=100 step=0.01 */
    speed?: _FLOAT
    /** default=16 */
    frame_length?: _INT
    prev_poses?: _CAMERACTRL_POSES
}

// ADE_CameraPoseAdvanced [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses]
export interface ADE$_CameraPoseAdvanced extends HasSingle_CAMERACTRL_POSES, ComfyNode<ADE$_CameraPoseAdvanced_input, ADE$_CameraPoseAdvanced_output> {
    nameInComfy: "ADE_CameraPoseAdvanced"
}
export interface ADE$_CameraPoseAdvanced_output {
    CAMERACTRL_POSES: ComfyNodeOutput<'CAMERACTRL_POSES', 0>,
}
export interface ADE$_CameraPoseAdvanced_input {
    motion_type1: Enum_ADE$_CameraPoseBasic_motion_type
    /** default=1 min=10 max=10 step=0.01 */
    strength1?: _FLOAT
    motion_type2: Enum_ADE$_CameraPoseBasic_motion_type
    /** default=1 min=10 max=10 step=0.01 */
    strength2?: _FLOAT
    motion_type3: Enum_ADE$_CameraPoseBasic_motion_type
    /** default=1 min=10 max=10 step=0.01 */
    strength3?: _FLOAT
    motion_type4: Enum_ADE$_CameraPoseBasic_motion_type
    /** default=1 min=10 max=10 step=0.01 */
    strength4?: _FLOAT
    motion_type5: Enum_ADE$_CameraPoseBasic_motion_type
    /** default=1 min=10 max=10 step=0.01 */
    strength5?: _FLOAT
    motion_type6: Enum_ADE$_CameraPoseBasic_motion_type
    /** default=1 min=10 max=10 step=0.01 */
    strength6?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    speed?: _FLOAT
    /** default=16 */
    frame_length?: _INT
    prev_poses?: _CAMERACTRL_POSES
}

// ADE_CameraManualPoseAppend [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses]
export interface ADE$_CameraManualPoseAppend extends HasSingle_CAMERACTRL_POSES, ComfyNode<ADE$_CameraManualPoseAppend_input, ADE$_CameraManualPoseAppend_output> {
    nameInComfy: "ADE_CameraManualPoseAppend"
}
export interface ADE$_CameraManualPoseAppend_output {
    CAMERACTRL_POSES: ComfyNodeOutput<'CAMERACTRL_POSES', 0>,
}
export interface ADE$_CameraManualPoseAppend_input {
    poses_first: _CAMERACTRL_POSES
    poses_last: _CAMERACTRL_POSES
}

// ADE_ReplaceCameraParameters [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses]
export interface ADE$_ReplaceCameraParameters extends HasSingle_CAMERACTRL_POSES, ComfyNode<ADE$_ReplaceCameraParameters_input, ADE$_ReplaceCameraParameters_output> {
    nameInComfy: "ADE_ReplaceCameraParameters"
}
export interface ADE$_ReplaceCameraParameters_output {
    CAMERACTRL_POSES: ComfyNodeOutput<'CAMERACTRL_POSES', 0>,
}
export interface ADE$_ReplaceCameraParameters_input {
    poses: _CAMERACTRL_POSES
    /** default=0.474812461 min=1 max=1 step=1e-9 */
    fx?: _FLOAT
    /** default=0.844111024 min=1 max=1 step=1e-9 */
    fy?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    cx?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    cy?: _FLOAT
}

// ADE_ReplaceOriginalPoseAspectRatio [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_CameraCtrl_poses]
export interface ADE$_ReplaceOriginalPoseAspectRatio extends HasSingle_CAMERACTRL_POSES, ComfyNode<ADE$_ReplaceOriginalPoseAspectRatio_input, ADE$_ReplaceOriginalPoseAspectRatio_output> {
    nameInComfy: "ADE_ReplaceOriginalPoseAspectRatio"
}
export interface ADE$_ReplaceOriginalPoseAspectRatio_output {
    CAMERACTRL_POSES: ComfyNodeOutput<'CAMERACTRL_POSES', 0>,
}
export interface ADE$_ReplaceOriginalPoseAspectRatio_input {
    poses: _CAMERACTRL_POSES
    /** default=1280 min=9007199254740991 max=9007199254740991 */
    orig_pose_width?: _INT
    /** default=720 min=9007199254740991 max=9007199254740991 */
    orig_pose_height?: _INT
}

// ADE_ApplyAnimateDiffModelWithPIA [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA]
export interface ADE$_ApplyAnimateDiffModelWithPIA extends HasSingle_M_MODELS, ComfyNode<ADE$_ApplyAnimateDiffModelWithPIA_input, ADE$_ApplyAnimateDiffModelWithPIA_output> {
    nameInComfy: "ADE_ApplyAnimateDiffModelWithPIA"
}
export interface ADE$_ApplyAnimateDiffModelWithPIA_output {
    M_MODELS: ComfyNodeOutput<'M_MODELS', 0>,
}
export interface ADE$_ApplyAnimateDiffModelWithPIA_input {
    motion_model: _MOTION_MODEL_ADE
    image: _IMAGE
    vae: _VAE
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    pia_input?: _PIA_INPUT
    motion_lora?: _MOTION_LORA
    scale_multival?: _MULTIVAL
    effect_multival?: _MULTIVAL
    ad_keyframes?: _AD_KEYFRAMES
    prev_m_models?: _M_MODELS
    per_block?: _PER_BLOCK
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_InputPIA_Multival [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA]
export interface ADE$_InputPIA$_Multival extends HasSingle_PIA_INPUT, ComfyNode<ADE$_InputPIA$_Multival_input, ADE$_InputPIA$_Multival_output> {
    nameInComfy: "ADE_InputPIA_Multival"
}
export interface ADE$_InputPIA$_Multival_output {
    PIA_INPUT: ComfyNodeOutput<'PIA_INPUT', 0>,
}
export interface ADE$_InputPIA$_Multival_input {
    multival: _MULTIVAL
}

// ADE_InputPIA_PaperPresets [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA]
export interface ADE$_InputPIA$_PaperPresets extends HasSingle_PIA_INPUT, ComfyNode<ADE$_InputPIA$_PaperPresets_input, ADE$_InputPIA$_PaperPresets_output> {
    nameInComfy: "ADE_InputPIA_PaperPresets"
}
export interface ADE$_InputPIA$_PaperPresets_output {
    PIA_INPUT: ComfyNodeOutput<'PIA_INPUT', 0>,
}
export interface ADE$_InputPIA$_PaperPresets_input {
    preset: Enum_ADE$_InputPIA$_PaperPresets_preset
    /** default=0 min=9007199254740991 max=9007199254740991 step=1 */
    batch_index?: _INT
    mult_multival?: _MULTIVAL
    /** default=false */
    print_values?: _BOOLEAN
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_PIA_AnimateDiffKeyframe [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA]
export interface ADE$_PIA$_AnimateDiffKeyframe extends HasSingle_AD_KEYFRAMES, ComfyNode<ADE$_PIA$_AnimateDiffKeyframe_input, ADE$_PIA$_AnimateDiffKeyframe_output> {
    nameInComfy: "ADE_PIA_AnimateDiffKeyframe"
}
export interface ADE$_PIA$_AnimateDiffKeyframe_output {
    AD_KEYFRAMES: ComfyNodeOutput<'AD_KEYFRAMES', 0>,
}
export interface ADE$_PIA$_AnimateDiffKeyframe_input {
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    prev_ad_keyframes?: _AD_KEYFRAMES
    scale_multival?: _MULTIVAL
    effect_multival?: _MULTIVAL
    pia_input?: _PIA_INPUT
    /** default=true */
    inherit_missing?: _BOOLEAN
    /** default=1 min=9007199254740991 max=9007199254740991 */
    guarantee_steps?: _INT
    /** */
    autosize?: _ADEAUTOSIZE
}

// ADE_InjectPIAIntoAnimateDiffModel [Animate Diff 🎭🅐🅓_② Gen2 nodes ②_PIA_🧪experimental]
export interface ADE$_InjectPIAIntoAnimateDiffModel extends HasSingle_MOTION_MODEL_ADE, ComfyNode<ADE$_InjectPIAIntoAnimateDiffModel_input, ADE$_InjectPIAIntoAnimateDiffModel_output> {
    nameInComfy: "ADE_InjectPIAIntoAnimateDiffModel"
}
export interface ADE$_InjectPIAIntoAnimateDiffModel_output {
    MOTION_MODEL: ComfyNodeOutput<'MOTION_MODEL_ADE', 0>,
}
export interface ADE$_InjectPIAIntoAnimateDiffModel_input {
    model_name: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    motion_model: _MOTION_MODEL_ADE
    ad_settings?: _AD_SETTINGS
    /** */
    deprecation_warning?: _ADEWARN
}

// AnimateDiffLoaderV1 []
export interface AnimateDiffLoaderV1 extends HasSingle_MODEL, HasSingle_LATENT, ComfyNode<AnimateDiffLoaderV1_input, AnimateDiffLoaderV1_output> {
    nameInComfy: "AnimateDiffLoaderV1"
}
export interface AnimateDiffLoaderV1_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    LATENT: ComfyNodeOutput<'LATENT', 1>,
}
export interface AnimateDiffLoaderV1_input {
    model: _MODEL
    latents: _LATENT
    model_name: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    /** default=false */
    unlimited_area_hack?: _BOOLEAN
    beta_schedule: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
    /** */
    deprecation_warning?: _ADEWARN
}

// ADE_AnimateDiffLoaderV1Advanced []
export interface ADE$_AnimateDiffLoaderV1Advanced extends HasSingle_MODEL, HasSingle_LATENT, ComfyNode<ADE$_AnimateDiffLoaderV1Advanced_input, ADE$_AnimateDiffLoaderV1Advanced_output> {
    nameInComfy: "ADE_AnimateDiffLoaderV1Advanced"
}
export interface ADE$_AnimateDiffLoaderV1Advanced_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    LATENT: ComfyNodeOutput<'LATENT', 1>,
}
export interface ADE$_AnimateDiffLoaderV1Advanced_input {
    model: _MODEL
    latents: _LATENT
    model_name: Enum_ADE$_AnimateDiffLoaderGen1_model_name
    /** default=false */
    unlimited_area_hack?: _BOOLEAN
    /** default=16 min=1000 max=1000 */
    context_length?: _INT
    /** default=1 min=1000 max=1000 */
    context_stride?: _INT
    /** default=4 min=1000 max=1000 */
    context_overlap?: _INT
    context_schedule: Enum_ADE$_AnimateDiffUniformContextOptions_context_schedule
    /** default=false */
    closed_loop?: _BOOLEAN
    beta_schedule: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule
    /** */
    deprecation_warning?: _ADEWARN
}

// ADE_AnimateDiffCombine []
export interface ADE$_AnimateDiffCombine extends HasSingle_GIF, ComfyNode<ADE$_AnimateDiffCombine_input, ADE$_AnimateDiffCombine_output> {
    nameInComfy: "ADE_AnimateDiffCombine"
}
export interface ADE$_AnimateDiffCombine_output {
    GIF: ComfyNodeOutput<'GIF', 0>,
}
export interface ADE$_AnimateDiffCombine_input {
    images: _IMAGE
    /** default=8 min=24 max=24 step=1 */
    frame_rate?: _INT
    /** default=0 min=100 max=100 step=1 */
    loop_count?: _INT
    /** default="AnimateDiff" */
    filename_prefix?: _STRING
    format: Enum_ADE$_AnimateDiffCombine_format
    /** default=false */
    pingpong?: _BOOLEAN
    /** default=true */
    save_image?: _BOOLEAN
    /** */
    deprecation_warning?: _ADEWARN
}

// ADE_AnimateDiffModelSettings_Release []
export interface ADE$_AnimateDiffModelSettings$_Release extends HasSingle_AD_SETTINGS, ComfyNode<ADE$_AnimateDiffModelSettings$_Release_input, ADE$_AnimateDiffModelSettings$_Release_output> {
    nameInComfy: "ADE_AnimateDiffModelSettings_Release"
}
export interface ADE$_AnimateDiffModelSettings$_Release_output {
    AD_SETTINGS: ComfyNodeOutput<'AD_SETTINGS', 0>,
}
export interface ADE$_AnimateDiffModelSettings$_Release_input {
    /** default=1 min=undefined step=0.001 */
    min_motion_scale?: _FLOAT
    /** default=1 min=undefined step=0.001 */
    max_motion_scale?: _FLOAT
    mask_motion_scale?: _MASK
    /** */
    deprecation_warning?: _ADEWARN
}

// ADE_AnimateDiffModelSettingsSimple []
export interface ADE$_AnimateDiffModelSettingsSimple extends HasSingle_AD_SETTINGS, ComfyNode<ADE$_AnimateDiffModelSettingsSimple_input, ADE$_AnimateDiffModelSettingsSimple_output> {
    nameInComfy: "ADE_AnimateDiffModelSettingsSimple"
}
export interface ADE$_AnimateDiffModelSettingsSimple_output {
    AD_SETTINGS: ComfyNodeOutput<'AD_SETTINGS', 0>,
}
export interface ADE$_AnimateDiffModelSettingsSimple_input {
    /** default=0 min=undefined step=1 */
    motion_pe_stretch?: _INT
    mask_motion_scale?: _MASK
    /** default=1 min=undefined step=0.001 */
    min_motion_scale?: _FLOAT
    /** default=1 min=undefined step=0.001 */
    max_motion_scale?: _FLOAT
    /** */
    deprecation_warning?: _ADEWARN
}

// ADE_AnimateDiffModelSettings []
export interface ADE$_AnimateDiffModelSettings extends HasSingle_AD_SETTINGS, ComfyNode<ADE$_AnimateDiffModelSettings_input, ADE$_AnimateDiffModelSettings_output> {
    nameInComfy: "ADE_AnimateDiffModelSettings"
}
export interface ADE$_AnimateDiffModelSettings_output {
    AD_SETTINGS: ComfyNodeOutput<'AD_SETTINGS', 0>,
}
export interface ADE$_AnimateDiffModelSettings_input {
    /** default=1 min=10 max=10 step=0.0001 */
    pe_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.0001 */
    attn_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.0001 */
    other_strength?: _FLOAT
    /** default=0 min=undefined step=1 */
    motion_pe_stretch?: _INT
    /** default=0 min=undefined step=1 */
    cap_initial_pe_length?: _INT
    /** default=0 min=undefined step=1 */
    interpolate_pe_to_length?: _INT
    /** default=0 min=undefined step=1 */
    initial_pe_idx_offset?: _INT
    /** default=0 min=undefined step=1 */
    final_pe_idx_offset?: _INT
    mask_motion_scale?: _MASK
    /** default=1 min=undefined step=0.001 */
    min_motion_scale?: _FLOAT
    /** default=1 min=undefined step=0.001 */
    max_motion_scale?: _FLOAT
    /** */
    deprecation_warning?: _ADEWARN
}

// ADE_AnimateDiffModelSettingsAdvancedAttnStrengths []
export interface ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths extends HasSingle_AD_SETTINGS, ComfyNode<ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths_input, ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths_output> {
    nameInComfy: "ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"
}
export interface ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths_output {
    AD_SETTINGS: ComfyNodeOutput<'AD_SETTINGS', 0>,
}
export interface ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths_input {
    /** default=1 min=10 max=10 step=0.0001 */
    pe_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.0001 */
    attn_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.0001 */
    attn_q_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.0001 */
    attn_k_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.0001 */
    attn_v_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.0001 */
    attn_out_weight_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.0001 */
    attn_out_bias_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.0001 */
    other_strength?: _FLOAT
    /** default=0 min=undefined step=1 */
    motion_pe_stretch?: _INT
    /** default=0 min=undefined step=1 */
    cap_initial_pe_length?: _INT
    /** default=0 min=undefined step=1 */
    interpolate_pe_to_length?: _INT
    /** default=0 min=undefined step=1 */
    initial_pe_idx_offset?: _INT
    /** default=0 min=undefined step=1 */
    final_pe_idx_offset?: _INT
    mask_motion_scale?: _MASK
    /** default=1 min=undefined step=0.001 */
    min_motion_scale?: _FLOAT
    /** default=1 min=undefined step=0.001 */
    max_motion_scale?: _FLOAT
    /** */
    deprecation_warning?: _ADEWARN
}

// AV_CheckpointModelsToParametersPipe [Art Venture_Parameters]
export interface AV$_CheckpointModelsToParametersPipe extends HasSingle_PIPE, ComfyNode<AV$_CheckpointModelsToParametersPipe_input, AV$_CheckpointModelsToParametersPipe_output> {
    nameInComfy: "AV_CheckpointModelsToParametersPipe"
}
export interface AV$_CheckpointModelsToParametersPipe_output {
    PIPE: ComfyNodeOutput<'PIPE', 0>,
}
export interface AV$_CheckpointModelsToParametersPipe_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    pipe?: _PIPE
    secondary_ckpt_name?: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    vae_name?: Enum_AV$_CheckpointModelsToParametersPipe_vae_name
    upscaler_name?: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
    secondary_upscaler_name?: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
    lora_1_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    lora_2_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    lora_3_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
}

// AV_PromptsToParametersPipe [Art Venture_Parameters]
export interface AV$_PromptsToParametersPipe extends HasSingle_PIPE, ComfyNode<AV$_PromptsToParametersPipe_input, AV$_PromptsToParametersPipe_output> {
    nameInComfy: "AV_PromptsToParametersPipe"
}
export interface AV$_PromptsToParametersPipe_output {
    PIPE: ComfyNodeOutput<'PIPE', 0>,
}
export interface AV$_PromptsToParametersPipe_input {
    /** default="Positive" */
    positive?: _STRING
    /** default="Negative" */
    negative?: _STRING
    pipe?: _PIPE
    image?: _IMAGE
    mask?: _MASK
}

// AV_ParametersPipeToCheckpointModels [Art Venture_Parameters]
export interface AV$_ParametersPipeToCheckpointModels extends HasSingle_PIPE, HasSingle_VAE_NAME, ComfyNode<AV$_ParametersPipeToCheckpointModels_input, AV$_ParametersPipeToCheckpointModels_output> {
    nameInComfy: "AV_ParametersPipeToCheckpointModels"
}
export interface AV$_ParametersPipeToCheckpointModels_output {
    pipe: ComfyNodeOutput<'PIPE', 0>,
    ckpt_name: ComfyNodeOutput<'CHECKPOINT_NAME', 1>,
    secondary_ckpt_name: ComfyNodeOutput<'CHECKPOINT_NAME', 2>,
    vae_name: ComfyNodeOutput<'VAE_NAME', 3>,
    upscaler_name: ComfyNodeOutput<'UPSCALER_NAME', 4>,
    secondary_upscaler_name: ComfyNodeOutput<'UPSCALER_NAME', 5>,
    lora_1_name: ComfyNodeOutput<'LORA_NAME', 6>,
    lora_2_name: ComfyNodeOutput<'LORA_NAME', 7>,
    lora_3_name: ComfyNodeOutput<'LORA_NAME', 8>,
}
export interface AV$_ParametersPipeToCheckpointModels_input {
    pipe: _PIPE
}

// AV_ParametersPipeToPrompts [Art Venture_Parameters]
export interface AV$_ParametersPipeToPrompts extends HasSingle_PIPE, HasSingle_IMAGE, HasSingle_MASK, ComfyNode<AV$_ParametersPipeToPrompts_input, AV$_ParametersPipeToPrompts_output> {
    nameInComfy: "AV_ParametersPipeToPrompts"
}
export interface AV$_ParametersPipeToPrompts_output {
    pipe: ComfyNodeOutput<'PIPE', 0>,
    positive: ComfyNodeOutput<'STRING', 1>,
    negative: ComfyNodeOutput<'STRING', 2>,
    image: ComfyNodeOutput<'IMAGE', 3>,
    mask: ComfyNodeOutput<'MASK', 4>,
}
export interface AV$_ParametersPipeToPrompts_input {
    pipe: _PIPE
}

// AV_VAELoader [Art Venture_Loaders]
export interface AV$_VAELoader extends HasSingle_VAE, ComfyNode<AV$_VAELoader_input, AV$_VAELoader_output> {
    nameInComfy: "AV_VAELoader"
}
export interface AV$_VAELoader_output {
    VAE: ComfyNodeOutput<'VAE', 0>,
}
export interface AV$_VAELoader_input {
    vae_name: Enum_VAELoader_vae_name
    /** default="None" */
    vae_override?: _STRING
}

// AV_LoraLoader [Art Venture_Loaders]
export interface AV$_LoraLoader extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<AV$_LoraLoader_input, AV$_LoraLoader_output> {
    nameInComfy: "AV_LoraLoader"
}
export interface AV$_LoraLoader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
}
export interface AV$_LoraLoader_input {
    /** */
    model: _MODEL
    /** */
    clip: _CLIP
    /** */
    lora_name: Enum_LoraLoader_lora_name
    /** default=1 min=100 max=100 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    strength_clip?: _FLOAT
    /** default="None" */
    lora_override?: _STRING
    /** default=true */
    enabled?: _BOOLEAN
}

// AV_LoraListLoader [Art Venture_Loaders]
export interface AV$_LoraListLoader extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<AV$_LoraListLoader_input, AV$_LoraListLoader_output> {
    nameInComfy: "AV_LoraListLoader"
}
export interface AV$_LoraListLoader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
}
export interface AV$_LoraListLoader_input {
    model: _MODEL
    clip: _CLIP
    /** default="" */
    data?: _STRING
}

// AV_LoraListStacker [Art Venture_Loaders]
export interface AV$_LoraListStacker extends HasSingle_LORA_STACK, ComfyNode<AV$_LoraListStacker_input, AV$_LoraListStacker_output> {
    nameInComfy: "AV_LoraListStacker"
}
export interface AV$_LoraListStacker_output {
    LORA_STACK: ComfyNodeOutput<'LORA_STACK', 0>,
}
export interface AV$_LoraListStacker_input {
    /** default="" */
    data?: _STRING
    lora_stack?: _LORA_STACK
}

// AV_CheckpointMerge [Art Venture_Model Merging]
export interface AV$_CheckpointMerge extends HasSingle_MODEL, ComfyNode<AV$_CheckpointMerge_input, AV$_CheckpointMerge_output> {
    nameInComfy: "AV_CheckpointMerge"
}
export interface AV$_CheckpointMerge_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface AV$_CheckpointMerge_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    model1_weight?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    model2_weight?: _FLOAT
}

// AV_CheckpointSave [Art Venture_Model Merging]
export interface AV$_CheckpointSave extends ComfyNode<AV$_CheckpointSave_input, AV$_CheckpointSave_output> {
    nameInComfy: "AV_CheckpointSave"
}
export interface AV$_CheckpointSave_output {
}
export interface AV$_CheckpointSave_input {
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    /** default="checkpoints/ComfyUI" */
    filename_prefix?: _STRING
    /** default="float16" */
    dtype?: Enum_AV$_CheckpointSave_dtype
}

// LoadImageFromUrl [Art Venture_Image]
export interface LoadImageFromUrl extends HasSingle_IMAGE, HasSingle_MASK, HasSingle_BOOLEAN, ComfyNode<LoadImageFromUrl_input, LoadImageFromUrl_output> {
    nameInComfy: "LoadImageFromUrl"
}
export interface LoadImageFromUrl_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
    masks: ComfyNodeOutput<'MASK', 1>,
    has_image: ComfyNodeOutput<'BOOLEAN', 2>,
}
export interface LoadImageFromUrl_input {
    /** default="" */
    image?: _STRING
    /** default=false */
    keep_alpha_channel?: _BOOLEAN
    /** default=false */
    output_mode?: _BOOLEAN
    /** default="" */
    url?: _STRING
}

// LoadImageAsMaskFromUrl [Art Venture_Image]
export interface LoadImageAsMaskFromUrl extends HasSingle_MASK, ComfyNode<LoadImageAsMaskFromUrl_input, LoadImageAsMaskFromUrl_output> {
    nameInComfy: "LoadImageAsMaskFromUrl"
}
export interface LoadImageAsMaskFromUrl_output {
    masks: ComfyNodeOutput<'MASK', 0>,
}
export interface LoadImageAsMaskFromUrl_input {
    /** default="" */
    image?: _STRING
    channel: Enum_LoadImageMask_channel
    /** default=false */
    output_mode?: _BOOLEAN
}

// StringToInt [Art Venture_Utils]
export interface StringToInt extends HasSingle_INT, ComfyNode<StringToInt_input, StringToInt_output> {
    nameInComfy: "StringToInt"
}
export interface StringToInt_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface StringToInt_input {
    /** default="0" */
    string?: _STRING
}

// StringToNumber [Art Venture_Utils]
export interface StringToNumber extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<StringToNumber_input, StringToNumber_output> {
    nameInComfy: "StringToNumber"
}
export interface StringToNumber_output {
    INT: ComfyNodeOutput<'INT', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
}
export interface StringToNumber_input {
    /** default="0" */
    string?: _STRING
    /** default="round" */
    rounding?: Enum_StringToNumber_rounding
}

// BooleanPrimitive [Art Venture_Utils]
export interface BooleanPrimitive extends HasSingle_BOOLEAN, HasSingle_STRING, ComfyNode<BooleanPrimitive_input, BooleanPrimitive_output> {
    nameInComfy: "BooleanPrimitive"
}
export interface BooleanPrimitive_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
    STRING: ComfyNodeOutput<'STRING', 1>,
}
export interface BooleanPrimitive_input {
    /** default=false */
    value?: _BOOLEAN
    /** default=false */
    reverse?: _BOOLEAN
}

// ImageMuxer [Art Venture_Utils]
export interface ImageMuxer extends HasSingle_IMAGE, ComfyNode<ImageMuxer_input, ImageMuxer_output> {
    nameInComfy: "ImageMuxer"
}
export interface ImageMuxer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageMuxer_input {
    image_1: _IMAGE
    image_2: _IMAGE
    /** default=0 */
    input_selector?: _INT
    image_3?: _IMAGE
    image_4?: _IMAGE
}

// ImageScaleDown [Art Venture_Utils]
export interface ImageScaleDown extends HasSingle_IMAGE, ComfyNode<ImageScaleDown_input, ImageScaleDown_output> {
    nameInComfy: "ImageScaleDown"
}
export interface ImageScaleDown_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageScaleDown_input {
    images: _IMAGE
    /** default=512 min=8192 max=8192 step=1 */
    width?: _INT
    /** default=512 min=8192 max=8192 step=1 */
    height?: _INT
    crop: Enum_LatentUpscale_crop
}

// ImageScaleDownBy [Art Venture_Utils]
export interface ImageScaleDownBy extends HasSingle_IMAGE, ComfyNode<ImageScaleDownBy_input, ImageScaleDownBy_output> {
    nameInComfy: "ImageScaleDownBy"
}
export interface ImageScaleDownBy_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageScaleDownBy_input {
    images: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    scale_by?: _FLOAT
}

// ImageScaleDownToSize [Art Venture_Utils]
export interface ImageScaleDownToSize extends HasSingle_IMAGE, ComfyNode<ImageScaleDownToSize_input, ImageScaleDownToSize_output> {
    nameInComfy: "ImageScaleDownToSize"
}
export interface ImageScaleDownToSize_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageScaleDownToSize_input {
    images: _IMAGE
    /** default=512 min=8192 max=8192 step=1 */
    size?: _INT
    /** default=true */
    mode?: _BOOLEAN
}

// ImageScaleToMegapixels [Art Venture_Utils]
export interface ImageScaleToMegapixels extends HasSingle_IMAGE, ComfyNode<ImageScaleToMegapixels_input, ImageScaleToMegapixels_output> {
    nameInComfy: "ImageScaleToMegapixels"
}
export interface ImageScaleToMegapixels_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageScaleToMegapixels_input {
    images: _IMAGE
    /** default=1 min=100 max=100 step=0.05 */
    megapixels?: _FLOAT
    upscale_model_opt?: _UPSCALE_MODEL
}

// ImageAlphaComposite [Art Venture_Utils]
export interface ImageAlphaComposite extends HasSingle_IMAGE, ComfyNode<ImageAlphaComposite_input, ImageAlphaComposite_output> {
    nameInComfy: "ImageAlphaComposite"
}
export interface ImageAlphaComposite_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageAlphaComposite_input {
    image_1: _IMAGE
    image_2: _IMAGE
}

// ImageGaussianBlur [Art Venture_Utils]
export interface ImageGaussianBlur extends HasSingle_IMAGE, ComfyNode<ImageGaussianBlur_input, ImageGaussianBlur_output> {
    nameInComfy: "ImageGaussianBlur"
}
export interface ImageGaussianBlur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageGaussianBlur_input {
    images: _IMAGE
    /** default=1 min=100 max=100 */
    radius?: _INT
}

// ImageRepeat [Art Venture_Utils]
export interface ImageRepeat extends HasSingle_IMAGE, ComfyNode<ImageRepeat_input, ImageRepeat_output> {
    nameInComfy: "ImageRepeat"
}
export interface ImageRepeat_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageRepeat_input {
    images: _IMAGE
    /** default=1 min=1024 max=1024 */
    amount?: _INT
}

// ImageExtractChannel [Art Venture_Utils]
export interface ImageExtractChannel extends HasSingle_MASK, ComfyNode<ImageExtractChannel_input, ImageExtractChannel_output> {
    nameInComfy: "ImageExtractChannel"
}
export interface ImageExtractChannel_output {
    channel_data: ComfyNodeOutput<'MASK', 0>,
}
export interface ImageExtractChannel_input {
    images: _IMAGE
    channel: Enum_ImageExtractChannel_channel
}

// ImageApplyChannel [Art Venture_Utils]
export interface ImageApplyChannel extends HasSingle_IMAGE, ComfyNode<ImageApplyChannel_input, ImageApplyChannel_output> {
    nameInComfy: "ImageApplyChannel"
}
export interface ImageApplyChannel_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageApplyChannel_input {
    images: _IMAGE
    channel_data: _MASK
    channel: Enum_ImageExtractChannel_channel
}

// QRCodeGenerator [Art Venture_Utils]
export interface QRCodeGenerator extends HasSingle_IMAGE, ComfyNode<QRCodeGenerator_input, QRCodeGenerator_output> {
    nameInComfy: "QRCodeGenerator"
}
export interface QRCodeGenerator_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface QRCodeGenerator_input {
    /** */
    text: _STRING
    /** default=512 min=4096 max=4096 step=64 */
    size?: _INT
    /** default=1 min=40 max=40 step=1 */
    qr_version?: _INT
    /** default="H" */
    error_correction?: Enum_QRCodeGenerator_error_correction
    /** default=10 min=100 max=100 step=1 */
    box_size?: _INT
    /** default=4 min=100 max=100 step=1 */
    border?: _INT
}

// DependenciesEdit [Art Venture_Utils]
export interface DependenciesEdit extends HasSingle_DEPENDENCIES, ComfyNode<DependenciesEdit_input, DependenciesEdit_output> {
    nameInComfy: "DependenciesEdit"
}
export interface DependenciesEdit_output {
    DEPENDENCIES: ComfyNodeOutput<'DEPENDENCIES', 0>,
}
export interface DependenciesEdit_input {
    dependencies: _DEPENDENCIES
    ckpt_name?: Enum_DependenciesEdit_ckpt_name
    vae_name?: Enum_DependenciesEdit_vae_name
    clip?: _CLIP
    /** default=0 min=0 max=0 step=1 */
    clip_skip?: _INT
    /** default="Original" */
    positive?: _STRING
    /** default="Original" */
    negative?: _STRING
    lora_stack?: _LORA_STACK
    cnet_stack?: _CONTROL_NET_STACK
}

// AspectRatioSelector [Art Venture_Utils]
export interface AspectRatioSelector extends HasSingle_STRING, ComfyNode<AspectRatioSelector_input, AspectRatioSelector_output> {
    nameInComfy: "AspectRatioSelector"
}
export interface AspectRatioSelector_output {
    ratio: ComfyNodeOutput<'STRING', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface AspectRatioSelector_input {
    aspect_ratio: Enum_AspectRatioSelector_aspect_ratio
}

// SDXLAspectRatioSelector [Art Venture_Utils]
export interface SDXLAspectRatioSelector extends HasSingle_STRING, ComfyNode<SDXLAspectRatioSelector_input, SDXLAspectRatioSelector_output> {
    nameInComfy: "SDXLAspectRatioSelector"
}
export interface SDXLAspectRatioSelector_output {
    ratio: ComfyNodeOutput<'STRING', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface SDXLAspectRatioSelector_input {
    aspect_ratio: Enum_SDXLAspectRatioSelector_aspect_ratio
}

// SeedSelector [Art Venture_Utils]
export interface SeedSelector extends HasSingle_INT, ComfyNode<SeedSelector_input, SeedSelector_output> {
    nameInComfy: "SeedSelector"
}
export interface SeedSelector_output {
    seed: ComfyNodeOutput<'INT', 0>,
}
export interface SeedSelector_input {
    /** default=true */
    mode?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    fixed_seed?: _INT
}

// CheckpointNameSelector [Art Venture_Utils]
export interface CheckpointNameSelector extends HasSingle_Enum_CheckpointLoaderSimple_ckpt_name, HasSingle_STRING, ComfyNode<CheckpointNameSelector_input, CheckpointNameSelector_output> {
    nameInComfy: "CheckpointNameSelector"
}
export interface CheckpointNameSelector_output {
    ckpt_name: ComfyNodeOutput<'Enum_CheckpointLoaderSimple_ckpt_name', 0>,
    ckpt_name_str: ComfyNodeOutput<'STRING', 1>,
}
export interface CheckpointNameSelector_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
}

// LoadJsonFromUrl [Art Venture_Utils]
export interface LoadJsonFromUrl extends HasSingle_JSON, ComfyNode<LoadJsonFromUrl_input, LoadJsonFromUrl_output> {
    nameInComfy: "LoadJsonFromUrl"
}
export interface LoadJsonFromUrl_output {
    JSON: ComfyNodeOutput<'JSON', 0>,
}
export interface LoadJsonFromUrl_input {
    /** default="" */
    url?: _STRING
    /** default=false */
    print_to_console?: _BOOLEAN
}

// LoadJsonFromText [Art Venture_Utils]
export interface LoadJsonFromText extends HasSingle_JSON, ComfyNode<LoadJsonFromText_input, LoadJsonFromText_output> {
    nameInComfy: "LoadJsonFromText"
}
export interface LoadJsonFromText_output {
    JSON: ComfyNodeOutput<'JSON', 0>,
}
export interface LoadJsonFromText_input {
    /** */
    data: _STRING
}

// GetObjectFromJson [Art Venture_Utils]
export interface GetObjectFromJson extends HasSingle_JSON, ComfyNode<GetObjectFromJson_input, GetObjectFromJson_output> {
    nameInComfy: "GetObjectFromJson"
}
export interface GetObjectFromJson_output {
    JSON: ComfyNodeOutput<'JSON', 0>,
}
export interface GetObjectFromJson_input {
    json: _JSON
    /** default="" */
    key?: _STRING
}

// GetTextFromJson [Art Venture_Utils]
export interface GetTextFromJson extends HasSingle_STRING, ComfyNode<GetTextFromJson_input, GetTextFromJson_output> {
    nameInComfy: "GetTextFromJson"
}
export interface GetTextFromJson_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface GetTextFromJson_input {
    json: _JSON
    /** default="" */
    key?: _STRING
}

// GetFloatFromJson [Art Venture_Utils]
export interface GetFloatFromJson extends HasSingle_FLOAT, ComfyNode<GetFloatFromJson_input, GetFloatFromJson_output> {
    nameInComfy: "GetFloatFromJson"
}
export interface GetFloatFromJson_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface GetFloatFromJson_input {
    json: _JSON
    /** default="" */
    key?: _STRING
}

// GetIntFromJson [Art Venture_Utils]
export interface GetIntFromJson extends HasSingle_INT, ComfyNode<GetIntFromJson_input, GetIntFromJson_output> {
    nameInComfy: "GetIntFromJson"
}
export interface GetIntFromJson_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface GetIntFromJson_input {
    json: _JSON
    /** default="" */
    key?: _STRING
}

// GetBoolFromJson [Art Venture_Utils]
export interface GetBoolFromJson extends HasSingle_BOOLEAN, ComfyNode<GetBoolFromJson_input, GetBoolFromJson_output> {
    nameInComfy: "GetBoolFromJson"
}
export interface GetBoolFromJson_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface GetBoolFromJson_input {
    json: _JSON
    /** default="" */
    key?: _STRING
}

// RandomInt [Art Venture_Utils]
export interface RandomInt extends HasSingle_INT, HasSingle_STRING, ComfyNode<RandomInt_input, RandomInt_output> {
    nameInComfy: "RandomInt"
}
export interface RandomInt_output {
    INT: ComfyNodeOutput<'INT', 0>,
    STRING: ComfyNodeOutput<'STRING', 1>,
}
export interface RandomInt_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    min?: _INT
    /** default=100 min=18446744073709552000 max=18446744073709552000 */
    max?: _INT
}

// RandomFloat [Art Venture_Utils]
export interface RandomFloat extends HasSingle_FLOAT, HasSingle_STRING, ComfyNode<RandomFloat_input, RandomFloat_output> {
    nameInComfy: "RandomFloat"
}
export interface RandomFloat_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    STRING: ComfyNodeOutput<'STRING', 1>,
}
export interface RandomFloat_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    min?: _FLOAT
    /** default=1 min=18446744073709552000 max=18446744073709552000 */
    max?: _FLOAT
}

// NumberScaler [Art Venture_Utils]
export interface NumberScaler extends HasSingle_FLOAT, ComfyNode<NumberScaler_input, NumberScaler_output> {
    nameInComfy: "NumberScaler"
}
export interface NumberScaler_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface NumberScaler_input {
    /** default=1 min=18446744073709552000 max=18446744073709552000 */
    min?: _FLOAT
    /** default=10 min=18446744073709552000 max=18446744073709552000 */
    max?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    scale_to_min?: _FLOAT
    /** default=1 min=18446744073709552000 max=18446744073709552000 */
    scale_to_max?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    value?: _FLOAT
}

// MergeModels [Art Venture_Utils]
export interface MergeModels extends HasSingle_MODEL, ComfyNode<MergeModels_input, MergeModels_output> {
    nameInComfy: "MergeModels"
}
export interface MergeModels_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface MergeModels_input {
    model1: _MODEL
    model2: _MODEL
    /** default=1 min=1 max=1 step=0.01 */
    ratio?: _FLOAT
}

// TextRandomMultiline [Art Venture_Utils]
export interface TextRandomMultiline extends HasSingle_STRING, ComfyNode<TextRandomMultiline_input, TextRandomMultiline_output> {
    nameInComfy: "TextRandomMultiline"
}
export interface TextRandomMultiline_output {
    lines: ComfyNodeOutput<'STRING', 0>,
}
export interface TextRandomMultiline_input {
    /** */
    text: _STRING
    /** default=1 min=1024 max=1024 */
    amount?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// SDXLPromptStyler [utils]
export interface SDXLPromptStyler extends ComfyNode<SDXLPromptStyler_input, SDXLPromptStyler_output> {
    nameInComfy: "SDXLPromptStyler"
}
export interface SDXLPromptStyler_output {
    positive_prompt_text_g: ComfyNodeOutput<'STRING', 0>,
    negative_prompt_text_g: ComfyNodeOutput<'STRING', 1>,
}
export interface SDXLPromptStyler_input {
    /** default="" */
    text_positive?: _STRING
    /** default="" */
    text_negative?: _STRING
    style: Enum_SDXLPromptStyler_style
    /** default="No" */
    log_prompt?: Enum_SDXLPromptStyler_log_prompt
    /** */
    style_name?: _STRING
}

// BLIPLoader [Art Venture_Captioning]
export interface BLIPLoader extends HasSingle_BLIP_MODEL, ComfyNode<BLIPLoader_input, BLIPLoader_output> {
    nameInComfy: "BLIPLoader"
}
export interface BLIPLoader_output {
    BLIP_MODEL: ComfyNodeOutput<'BLIP_MODEL', 0>,
}
export interface BLIPLoader_input {
    model_name: Enum_BLIPLoader_model_name
}

// BLIPCaption [Art Venture_Captioning]
export interface BLIPCaption extends HasSingle_STRING, ComfyNode<BLIPCaption_input, BLIPCaption_output> {
    nameInComfy: "BLIPCaption"
}
export interface BLIPCaption_output {
    caption: ComfyNodeOutput<'STRING', 0>,
}
export interface BLIPCaption_input {
    image: _IMAGE
    /** default=24 min=200 max=200 step=1 */
    min_length?: _INT
    /** default=48 min=200 max=200 step=1 */
    max_length?: _INT
    device_mode?: Enum_BLIPCaption_device_mode
    /** default="" */
    prefix?: _STRING
    /** default="" */
    suffix?: _STRING
    /** default=true */
    enabled?: _BOOLEAN
    blip_model?: _BLIP_MODEL
}

// DownloadAndLoadBlip [Art Venture_Captioning]
export interface DownloadAndLoadBlip extends HasSingle_BLIP_MODEL, ComfyNode<DownloadAndLoadBlip_input, DownloadAndLoadBlip_output> {
    nameInComfy: "DownloadAndLoadBlip"
}
export interface DownloadAndLoadBlip_output {
    BLIP_MODEL: ComfyNodeOutput<'BLIP_MODEL', 0>,
}
export interface DownloadAndLoadBlip_input {
    model_name: Enum_DownloadAndLoadBlip_model_name
}

// DeepDanbooruCaption [Art Venture_Utils]
export interface DeepDanbooruCaption extends HasSingle_STRING, ComfyNode<DeepDanbooruCaption_input, DeepDanbooruCaption_output> {
    nameInComfy: "DeepDanbooruCaption"
}
export interface DeepDanbooruCaption_output {
    caption: ComfyNodeOutput<'STRING', 0>,
}
export interface DeepDanbooruCaption_input {
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
    /** default=true */
    sort_alpha?: _BOOLEAN
    /** default=true */
    use_spaces?: _BOOLEAN
    /** default=true */
    escape?: _BOOLEAN
    /** default="blacklist" */
    filter_tags?: _STRING
    device_mode?: Enum_BLIPCaption_device_mode
    /** default="" */
    prefix?: _STRING
    /** default="" */
    suffix?: _STRING
    /** default=true */
    enabled?: _BOOLEAN
}

// Fooocus_KSampler [Art Venture_Sampling]
export interface Fooocus$_KSampler extends HasSingle_LATENT, ComfyNode<Fooocus$_KSampler_input, Fooocus$_KSampler_output> {
    nameInComfy: "Fooocus_KSampler"
}
export interface Fooocus$_KSampler_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface Fooocus$_KSampler_input {
    /** */
    model: _MODEL
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    /** */
    sampler_name: Enum_KSampler_sampler_name
    /** */
    scheduler: Enum_KSampler_scheduler
    /** */
    positive: _CONDITIONING
    /** */
    negative: _CONDITIONING
    /** */
    latent_image: _LATENT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=2 min=100 max=100 step=0.01 */
    sharpness?: _FLOAT
}

// Fooocus_KSamplerAdvanced [Art Venture_Sampling]
export interface Fooocus$_KSamplerAdvanced extends HasSingle_LATENT, ComfyNode<Fooocus$_KSamplerAdvanced_input, Fooocus$_KSamplerAdvanced_output> {
    nameInComfy: "Fooocus_KSamplerAdvanced"
}
export interface Fooocus$_KSamplerAdvanced_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface Fooocus$_KSamplerAdvanced_input {
    model: _MODEL
    add_noise: Enum_KSamplerAdvanced_add_noise
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    return_with_leftover_noise: Enum_KSamplerAdvanced_add_noise
    /** default=2 min=100 max=100 step=0.01 */
    sharpness?: _FLOAT
}

// ColorBlend [Art Venture_Post Processing]
export interface ColorBlend extends HasSingle_IMAGE, ComfyNode<ColorBlend_input, ColorBlend_output> {
    nameInComfy: "ColorBlend"
}
export interface ColorBlend_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ColorBlend_input {
    bw_layer: _IMAGE
    color_layer: _IMAGE
}

// ColorCorrect [Art Venture_Post Processing]
export interface ColorCorrect extends HasSingle_IMAGE, ComfyNode<ColorCorrect_input, ColorCorrect_output> {
    nameInComfy: "ColorCorrect"
}
export interface ColorCorrect_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ColorCorrect_input {
    image: _IMAGE
    /** default=0 min=100 max=100 step=5 */
    temperature?: _FLOAT
    /** default=0 min=90 max=90 step=5 */
    hue?: _FLOAT
    /** default=0 min=100 max=100 step=5 */
    brightness?: _FLOAT
    /** default=0 min=100 max=100 step=5 */
    contrast?: _FLOAT
    /** default=0 min=100 max=100 step=5 */
    saturation?: _FLOAT
    /** default=1 min=2.2 max=2.2 step=0.1 */
    gamma?: _FLOAT
}

// AV_ControlNetLoader [Art Venture_Loaders]
export interface AV$_ControlNetLoader extends HasSingle_CONTROL_NET, ComfyNode<AV$_ControlNetLoader_input, AV$_ControlNetLoader_output> {
    nameInComfy: "AV_ControlNetLoader"
}
export interface AV$_ControlNetLoader_output {
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 0>,
}
export interface AV$_ControlNetLoader_input {
    control_net_name: Enum_ControlNetLoader_control_net_name
    /** default="None" */
    control_net_override?: _STRING
    timestep_keyframe?: _TIMESTEP_KEYFRAME
}

// AV_ControlNetEfficientLoader [Art Venture_Loaders]
export interface AV$_ControlNetEfficientLoader extends HasSingle_CONDITIONING, ComfyNode<AV$_ControlNetEfficientLoader_input, AV$_ControlNetEfficientLoader_output> {
    nameInComfy: "AV_ControlNetEfficientLoader"
}
export interface AV$_ControlNetEfficientLoader_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface AV$_ControlNetEfficientLoader_input {
    control_net_name: Enum_AV$_ControlNetEfficientLoader_control_net_name
    conditioning: _CONDITIONING
    image: _IMAGE
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    preprocessor: Enum_AV$_ControlNetEfficientLoader_preprocessor
    /** default="None" */
    control_net_override?: _STRING
    timestep_keyframe?: _TIMESTEP_KEYFRAME
    /** default=512 min=2048 max=2048 step=64 */
    resolution?: _INT
    /** default=true */
    enabled?: _BOOLEAN
}

// AV_ControlNetEfficientLoaderAdvanced [Art Venture_Loaders]
export interface AV$_ControlNetEfficientLoaderAdvanced extends ComfyNode<AV$_ControlNetEfficientLoaderAdvanced_input, AV$_ControlNetEfficientLoaderAdvanced_output> {
    nameInComfy: "AV_ControlNetEfficientLoaderAdvanced"
}
export interface AV$_ControlNetEfficientLoaderAdvanced_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface AV$_ControlNetEfficientLoaderAdvanced_input {
    control_net_name: Enum_AV$_ControlNetEfficientLoader_control_net_name
    positive: _CONDITIONING
    negative: _CONDITIONING
    image: _IMAGE
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    preprocessor: Enum_AV$_ControlNetEfficientLoader_preprocessor
    /** default="None" */
    control_net_override?: _STRING
    timestep_keyframe?: _TIMESTEP_KEYFRAME
    /** default=512 min=2048 max=2048 step=64 */
    resolution?: _INT
    /** default=true */
    enabled?: _BOOLEAN
}

// AV_ControlNetEfficientStacker [Art Venture_Loaders]
export interface AV$_ControlNetEfficientStacker extends HasSingle_CONTROL_NET_STACK, ComfyNode<AV$_ControlNetEfficientStacker_input, AV$_ControlNetEfficientStacker_output> {
    nameInComfy: "AV_ControlNetEfficientStacker"
}
export interface AV$_ControlNetEfficientStacker_output {
    CNET_STACK: ComfyNodeOutput<'CONTROL_NET_STACK', 0>,
}
export interface AV$_ControlNetEfficientStacker_input {
    control_net_name: Enum_AV$_ControlNetEfficientStacker_control_net_name
    image: _IMAGE
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    preprocessor: Enum_AV$_ControlNetEfficientLoader_preprocessor
    cnet_stack?: _CONTROL_NET_STACK
    /** default="None" */
    control_net_override?: _STRING
    timestep_keyframe?: _TIMESTEP_KEYFRAME
    /** default=512 min=2048 max=2048 step=64 */
    resolution?: _INT
    /** default=true */
    enabled?: _BOOLEAN
}

// AV_ControlNetEfficientStackerSimple [Art Venture_Loaders]
export interface AV$_ControlNetEfficientStackerSimple extends HasSingle_CONTROL_NET_STACK, ComfyNode<AV$_ControlNetEfficientStackerSimple_input, AV$_ControlNetEfficientStackerSimple_output> {
    nameInComfy: "AV_ControlNetEfficientStackerSimple"
}
export interface AV$_ControlNetEfficientStackerSimple_output {
    CNET_STACK: ComfyNodeOutput<'CONTROL_NET_STACK', 0>,
}
export interface AV$_ControlNetEfficientStackerSimple_input {
    control_net_name: Enum_AV$_ControlNetEfficientStacker_control_net_name
    image: _IMAGE
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    preprocessor: Enum_AV$_ControlNetEfficientLoader_preprocessor
    cnet_stack?: _CONTROL_NET_STACK
    /** default="None" */
    control_net_override?: _STRING
    timestep_keyframe?: _TIMESTEP_KEYFRAME
    /** default=512 min=2048 max=2048 step=64 */
    resolution?: _INT
    /** default=true */
    enabled?: _BOOLEAN
}

// AV_ControlNetPreprocessor [Art Venture_Loaders]
export interface AV$_ControlNetPreprocessor extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<AV$_ControlNetPreprocessor_input, AV$_ControlNetPreprocessor_output> {
    nameInComfy: "AV_ControlNetPreprocessor"
}
export interface AV$_ControlNetPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    CNET_NAME: ComfyNodeOutput<'STRING', 1>,
}
export interface AV$_ControlNetPreprocessor_input {
    image: _IMAGE
    preprocessor: Enum_AV$_ControlNetEfficientLoader_preprocessor
    sd_version: Enum_AV$_ControlNetPreprocessor_sd_version
    /** default=512 min=2048 max=2048 step=64 */
    resolution?: _INT
    /** default="None" */
    preprocessor_override?: _STRING
}

// AV_IPAdapter [Art Venture_IP Adapter]
export interface AV$_IPAdapter extends HasSingle_MODEL, HasSingle_IPADAPTER, HasSingle_CLIP_VISION, ComfyNode<AV$_IPAdapter_input, AV$_IPAdapter_output> {
    nameInComfy: "AV_IPAdapter"
}
export interface AV$_IPAdapter_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    pipeline: ComfyNodeOutput<'IPADAPTER', 1>,
    clip_vision: ComfyNodeOutput<'CLIP_VISION', 2>,
}
export interface AV$_IPAdapter_input {
    ip_adapter_name: Enum_AV$_IPAdapter_ip_adapter_name
    clip_name: Enum_AV$_IPAdapter_clip_name
    model: _MODEL
    image: _IMAGE
    /** default=1 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    ip_adapter_opt?: _IPADAPTER
    clip_vision_opt?: _CLIP_VISION
    attn_mask?: _MASK
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    weight_type?: Enum_AV$_IPAdapter_weight_type
    /** default=true */
    enabled?: _BOOLEAN
}

// AV_IPAdapterPipe [Art Venture_IP Adapter]
export interface AV$_IPAdapterPipe extends HasSingle_IPADAPTER, ComfyNode<AV$_IPAdapterPipe_input, AV$_IPAdapterPipe_output> {
    nameInComfy: "AV_IPAdapterPipe"
}
export interface AV$_IPAdapterPipe_output {
    pipeline: ComfyNodeOutput<'IPADAPTER', 0>,
}
export interface AV$_IPAdapterPipe_input {
    ip_adapter_name: Enum_AV$_IPAdapterPipe_ip_adapter_name
    clip_name: Enum_CLIPVisionLoader_clip_name
}

// ISNetLoader [Art Venture_Segmentation]
export interface ISNetLoader extends HasSingle_ISNET_MODEL, ComfyNode<ISNetLoader_input, ISNetLoader_output> {
    nameInComfy: "ISNetLoader"
}
export interface ISNetLoader_output {
    ISNET_MODEL: ComfyNodeOutput<'ISNET_MODEL', 0>,
}
export interface ISNetLoader_input {
    model_name: Enum_ISNetLoader_model_name
}

// ISNetSegment [Art Venture_Segmentation]
export interface ISNetSegment extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ISNetSegment_input, ISNetSegment_output> {
    nameInComfy: "ISNetSegment"
}
export interface ISNetSegment_output {
    segmented: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
}
export interface ISNetSegment_input {
    images: _IMAGE
    /** default=0.5 min=1 max=1 step=0.001 */
    threshold?: _FLOAT
    device_mode?: Enum_BLIPCaption_device_mode
    /** default=true */
    enabled?: _BOOLEAN
    isnet_model?: _ISNET_MODEL
}

// DownloadISNetModel [Art Venture_Segmentation]
export interface DownloadISNetModel extends HasSingle_ISNET_MODEL, ComfyNode<DownloadISNetModel_input, DownloadISNetModel_output> {
    nameInComfy: "DownloadISNetModel"
}
export interface DownloadISNetModel_output {
    ISNET_MODEL: ComfyNodeOutput<'ISNET_MODEL', 0>,
}
export interface DownloadISNetModel_input {
    model_name: Enum_DownloadISNetModel_model_name
}

// AV_SAMLoader [Art Venture_Segmentation]
export interface AV$_SAMLoader extends HasSingle_AV_SAM_MODEL, ComfyNode<AV$_SAMLoader_input, AV$_SAMLoader_output> {
    nameInComfy: "AV_SAMLoader"
}
export interface AV$_SAMLoader_output {
    sam_model: ComfyNodeOutput<'AV_SAM_MODEL', 0>,
}
export interface AV$_SAMLoader_input {
    model_name: Enum_AV$_SAMLoader_model_name
}

// GetSAMEmbedding [Art Venture_Segmentation]
export interface GetSAMEmbedding extends HasSingle_SAM_EMBEDDING, ComfyNode<GetSAMEmbedding_input, GetSAMEmbedding_output> {
    nameInComfy: "GetSAMEmbedding"
}
export interface GetSAMEmbedding_output {
    SAM_EMBEDDING: ComfyNodeOutput<'SAM_EMBEDDING', 0>,
}
export interface GetSAMEmbedding_input {
    sam_model: _AV_SAM_MODEL
    image: _IMAGE
    device_mode?: Enum_BLIPCaption_device_mode
}

// SAMEmbeddingToImage [Art Venture_Segmentation]
export interface SAMEmbeddingToImage extends HasSingle_IMAGE, ComfyNode<SAMEmbeddingToImage_input, SAMEmbeddingToImage_output> {
    nameInComfy: "SAMEmbeddingToImage"
}
export interface SAMEmbeddingToImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SAMEmbeddingToImage_input {
    embedding: _SAM_EMBEDDING
}

// LaMaInpaint [Art Venture_Inpainting]
export interface LaMaInpaint extends HasSingle_IMAGE, ComfyNode<LaMaInpaint_input, LaMaInpaint_output> {
    nameInComfy: "LaMaInpaint"
}
export interface LaMaInpaint_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface LaMaInpaint_input {
    image: _IMAGE
    mask: _MASK
    device_mode?: Enum_BLIPCaption_device_mode
}

// PrepareImageAndMaskForInpaint [Art Venture_Inpainting]
export interface PrepareImageAndMaskForInpaint extends HasSingle_MASK, HasSingle_CROP_REGION, ComfyNode<PrepareImageAndMaskForInpaint_input, PrepareImageAndMaskForInpaint_output> {
    nameInComfy: "PrepareImageAndMaskForInpaint"
}
export interface PrepareImageAndMaskForInpaint_output {
    inpaint_image: ComfyNodeOutput<'IMAGE', 0>,
    inpaint_mask: ComfyNodeOutput<'MASK', 1>,
    overlay_image: ComfyNodeOutput<'IMAGE', 2>,
    crop_region: ComfyNodeOutput<'CROP_REGION', 3>,
}
export interface PrepareImageAndMaskForInpaint_input {
    image: _IMAGE
    mask: _MASK
    /** default=4 min=64 max=64 */
    mask_blur?: _INT
    /** default=false */
    inpaint_masked?: _BOOLEAN
    /** default=32 min=256 max=256 */
    mask_padding?: _INT
    /** default=0 min=2048 max=2048 */
    width?: _INT
    /** default=0 min=2048 max=2048 */
    height?: _INT
}

// OverlayInpaintedLatent [Art Venture_Inpainting]
export interface OverlayInpaintedLatent extends HasSingle_LATENT, ComfyNode<OverlayInpaintedLatent_input, OverlayInpaintedLatent_output> {
    nameInComfy: "OverlayInpaintedLatent"
}
export interface OverlayInpaintedLatent_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface OverlayInpaintedLatent_input {
    original: _LATENT
    inpainted: _LATENT
    mask: _MASK
}

// OverlayInpaintedImage [Art Venture_Inpainting]
export interface OverlayInpaintedImage extends HasSingle_IMAGE, ComfyNode<OverlayInpaintedImage_input, OverlayInpaintedImage_output> {
    nameInComfy: "OverlayInpaintedImage"
}
export interface OverlayInpaintedImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface OverlayInpaintedImage_input {
    inpainted: _IMAGE
    overlay_image: _IMAGE
    crop_region: _CROP_REGION
}

// AV_FaceDetailer [ArtVenture_Detailer]
export interface AV$_FaceDetailer extends HasSingle_MASK, HasSingle_DETAILER_PIPE, ComfyNode<AV$_FaceDetailer_input, AV$_FaceDetailer_output> {
    nameInComfy: "AV_FaceDetailer"
}
export interface AV$_FaceDetailer_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    cropped_refined: ComfyNodeOutput<'IMAGE', 1>,
    cropped_enhanced_alpha: ComfyNodeOutput<'IMAGE', 2>,
    mask: ComfyNodeOutput<'MASK', 3>,
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 4>,
    cnet_images: ComfyNodeOutput<'IMAGE', 5>,
}
export interface AV$_FaceDetailer_input {
    image: _IMAGE
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=true */
    noise_mask?: _BOOLEAN
    /** default=true */
    force_inpaint?: _BOOLEAN
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_threshold?: _FLOAT
    /** default=10 min=512 max=512 step=1 */
    bbox_dilation?: _INT
    /** default=3 min=10 max=10 step=0.1 */
    bbox_crop_factor?: _FLOAT
    sam_detection_hint: Enum_AV$_FaceDetailer_sam_detection_hint
    /** default=0 min=512 max=512 step=1 */
    sam_dilation?: _INT
    /** default=0.93 min=1 max=1 step=0.01 */
    sam_threshold?: _FLOAT
    /** default=0 min=1000 max=1000 step=1 */
    sam_bbox_expansion?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    sam_mask_hint_threshold?: _FLOAT
    sam_mask_hint_use_negative: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    bbox_detector: _BBOX_DETECTOR
    /** */
    wildcard: _STRING
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    sam_model_opt?: _SAM_MODEL
    segm_detector_opt?: _SEGM_DETECTOR
    detailer_hook?: _DETAILER_HOOK
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
    /** default=true */
    enabled?: _BOOLEAN
}

// AV_FaceDetailerPipe [ArtVenture_Detailer]
export interface AV$_FaceDetailerPipe extends HasSingle_MASK, HasSingle_DETAILER_PIPE, ComfyNode<AV$_FaceDetailerPipe_input, AV$_FaceDetailerPipe_output> {
    nameInComfy: "AV_FaceDetailerPipe"
}
export interface AV$_FaceDetailerPipe_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    cropped_refined: ComfyNodeOutput<'IMAGE', 1>,
    cropped_enhanced_alpha: ComfyNodeOutput<'IMAGE', 2>,
    mask: ComfyNodeOutput<'MASK', 3>,
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 4>,
    cnet_images: ComfyNodeOutput<'IMAGE', 5>,
}
export interface AV$_FaceDetailerPipe_input {
    image: _IMAGE
    detailer_pipe: _DETAILER_PIPE
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=true */
    noise_mask?: _BOOLEAN
    /** default=true */
    force_inpaint?: _BOOLEAN
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_threshold?: _FLOAT
    /** default=10 min=512 max=512 step=1 */
    bbox_dilation?: _INT
    /** default=3 min=10 max=10 step=0.1 */
    bbox_crop_factor?: _FLOAT
    sam_detection_hint: Enum_AV$_FaceDetailer_sam_detection_hint
    /** default=0 min=512 max=512 step=1 */
    sam_dilation?: _INT
    /** default=0.93 min=1 max=1 step=0.01 */
    sam_threshold?: _FLOAT
    /** default=0 min=1000 max=1000 step=1 */
    sam_bbox_expansion?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    sam_mask_hint_threshold?: _FLOAT
    sam_mask_hint_use_negative: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=0.2 min=1 max=1 */
    refiner_ratio?: _FLOAT
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
    /** default=true */
    enabled?: _BOOLEAN
}

// AV_OpenAIApi [ArtVenture_LLM]
export interface AV$_OpenAIApi extends HasSingle_LLM_API, ComfyNode<AV$_OpenAIApi_input, AV$_OpenAIApi_output> {
    nameInComfy: "AV_OpenAIApi"
}
export interface AV$_OpenAIApi_output {
    LLM_API: ComfyNodeOutput<'LLM_API', 0>,
}
export interface AV$_OpenAIApi_input {
    /** */
    openai_api_key: _STRING
    /** default="https://api.openai.com/v1" */
    endpoint?: _STRING
}

// AV_ClaudeApi [ArtVenture_LLM]
export interface AV$_ClaudeApi extends HasSingle_LLM_API, ComfyNode<AV$_ClaudeApi_input, AV$_ClaudeApi_output> {
    nameInComfy: "AV_ClaudeApi"
}
export interface AV$_ClaudeApi_output {
    llm_api: ComfyNodeOutput<'LLM_API', 0>,
}
export interface AV$_ClaudeApi_input {
    /** */
    claude_api_key: _STRING
    /** default="https://api.anthropic.com/v1" */
    endpoint?: _STRING
    /** default="2023-06-01" */
    version?: Enum_AV$_ClaudeApi_version
}

// AV_AwsBedrockClaudeApi [ArtVenture_LLM]
export interface AV$_AwsBedrockClaudeApi extends HasSingle_LLM_API, ComfyNode<AV$_AwsBedrockClaudeApi_input, AV$_AwsBedrockClaudeApi_output> {
    nameInComfy: "AV_AwsBedrockClaudeApi"
}
export interface AV$_AwsBedrockClaudeApi_output {
    llm_api: ComfyNodeOutput<'LLM_API', 0>,
}
export interface AV$_AwsBedrockClaudeApi_input {
    /** */
    aws_access_key_id: _STRING
    /** */
    aws_secret_access_key: _STRING
    /** */
    aws_session_token: _STRING
    /** default="us-east-1" */
    region?: Enum_AV$_AwsBedrockClaudeApi_region
    /** default="bedrock-2023-05-31" */
    version?: Enum_AV$_AwsBedrockClaudeApi_version
}

// AV_AwsBedrockMistralApi [ArtVenture_LLM]
export interface AV$_AwsBedrockMistralApi extends HasSingle_LLM_API, ComfyNode<AV$_AwsBedrockMistralApi_input, AV$_AwsBedrockMistralApi_output> {
    nameInComfy: "AV_AwsBedrockMistralApi"
}
export interface AV$_AwsBedrockMistralApi_output {
    llm_api: ComfyNodeOutput<'LLM_API', 0>,
}
export interface AV$_AwsBedrockMistralApi_input {
    /** */
    aws_access_key_id: _STRING
    /** */
    aws_secret_access_key: _STRING
    /** */
    aws_session_token: _STRING
    /** default="us-east-1" */
    region?: Enum_AV$_AwsBedrockClaudeApi_region
}

// AV_LLMApiConfig [ArtVenture_LLM]
export interface AV$_LLMApiConfig extends HasSingle_LLM_CONFIG, ComfyNode<AV$_LLMApiConfig_input, AV$_LLMApiConfig_output> {
    nameInComfy: "AV_LLMApiConfig"
}
export interface AV$_LLMApiConfig_output {
    llm_config: ComfyNodeOutput<'LLM_CONFIG', 0>,
}
export interface AV$_LLMApiConfig_input {
    /** default="gpt-4-turbo" */
    model?: Enum_AV$_LLMApiConfig_model
    /** default=1024 */
    max_token?: _INT
    /** default=0 min=1 max=1 step=0.001 */
    temperature?: _FLOAT
}

// AV_LLMMessage [ArtVenture_LLM]
export interface AV$_LLMMessage extends HasSingle_LLM_MESSAGE, ComfyNode<AV$_LLMMessage_input, AV$_LLMMessage_output> {
    nameInComfy: "AV_LLMMessage"
}
export interface AV$_LLMMessage_output {
    messages: ComfyNodeOutput<'LLM_MESSAGE', 0>,
}
export interface AV$_LLMMessage_input {
    role: Enum_AV$_LLMMessage_role
    /** */
    text: _STRING
    image?: _IMAGE
    messages?: _LLM_MESSAGE
}

// AV_LLMChat [ArtVenture_LLM]
export interface AV$_LLMChat extends HasSingle_STRING, ComfyNode<AV$_LLMChat_input, AV$_LLMChat_output> {
    nameInComfy: "AV_LLMChat"
}
export interface AV$_LLMChat_output {
    response: ComfyNodeOutput<'STRING', 0>,
}
export interface AV$_LLMChat_input {
    messages: _LLM_MESSAGE
    api: _LLM_API
    config: _LLM_CONFIG
    /** default=0 min=9007199254740991 max=9007199254740991 */
    seed?: _INT
}

// AV_LLMCompletion [ArtVenture_LLM]
export interface AV$_LLMCompletion extends HasSingle_STRING, ComfyNode<AV$_LLMCompletion_input, AV$_LLMCompletion_output> {
    nameInComfy: "AV_LLMCompletion"
}
export interface AV$_LLMCompletion_output {
    response: ComfyNodeOutput<'STRING', 0>,
}
export interface AV$_LLMCompletion_input {
    /** */
    prompt: _STRING
    api: _LLM_API
    config: _LLM_CONFIG
    /** default=0 min=9007199254740991 max=9007199254740991 */
    seed?: _INT
}

// BRIA_RMBG_ModelLoader_Zho [🧹BRIA RMBG]
export interface BRIA$_RMBG$_ModelLoader$_Zho extends HasSingle_RMBGMODEL, ComfyNode<BRIA$_RMBG$_ModelLoader$_Zho_input, BRIA$_RMBG$_ModelLoader$_Zho_output> {
    nameInComfy: "BRIA_RMBG_ModelLoader_Zho"
}
export interface BRIA$_RMBG$_ModelLoader$_Zho_output {
    rmbgmodel: ComfyNodeOutput<'RMBGMODEL', 0>,
}
export interface BRIA$_RMBG$_ModelLoader$_Zho_input {
}

// BRIA_RMBG_Zho [🧹BRIA RMBG]
export interface BRIA$_RMBG$_Zho extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<BRIA$_RMBG$_Zho_input, BRIA$_RMBG$_Zho_output> {
    nameInComfy: "BRIA_RMBG_Zho"
}
export interface BRIA$_RMBG$_Zho_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
}
export interface BRIA$_RMBG$_Zho_input {
    rmbgmodel: _RMBGMODEL
    image: _IMAGE
}

// LoraLoader|pysssss [loaders]
export interface LoraLoader$8pysssss extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<LoraLoader$8pysssss_input, LoraLoader$8pysssss_output> {
    nameInComfy: "LoraLoader|pysssss"
}
export interface LoraLoader$8pysssss_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    STRING: ComfyNodeOutput<'STRING', 2>,
}
export interface LoraLoader$8pysssss_input {
    /** */
    model: _MODEL
    /** */
    clip: _CLIP
    /** */
    lora_name: Enum_LoraLoader_lora_name
    /** default=1 min=100 max=100 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    strength_clip?: _FLOAT
    prompt?: _HIDDEN
}

// CheckpointLoader|pysssss [loaders]
export interface CheckpointLoader$8pysssss extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_STRING, ComfyNode<CheckpointLoader$8pysssss_input, CheckpointLoader$8pysssss_output> {
    nameInComfy: "CheckpointLoader|pysssss"
}
export interface CheckpointLoader$8pysssss_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    STRING: ComfyNodeOutput<'STRING', 3>,
}
export interface CheckpointLoader$8pysssss_input {
    /** */
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    prompt?: _HIDDEN
}

// ConstrainImage|pysssss [image]
export interface ConstrainImage$8pysssss extends HasSingle_IMAGE, ComfyNode<ConstrainImage$8pysssss_input, ConstrainImage$8pysssss_output> {
    nameInComfy: "ConstrainImage|pysssss"
}
export interface ConstrainImage$8pysssss_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ConstrainImage$8pysssss_input {
    images: _IMAGE
    /** default=1024 min=undefined */
    max_width?: _INT
    /** default=1024 min=undefined */
    max_height?: _INT
    /** default=0 min=undefined */
    min_width?: _INT
    /** default=0 min=undefined */
    min_height?: _INT
    /** default="no" */
    crop_if_required?: Enum_ConstrainImage$8pysssss_crop_if_required
}

// ConstrainImageforVideo|pysssss [image]
export interface ConstrainImageforVideo$8pysssss extends HasSingle_IMAGE, ComfyNode<ConstrainImageforVideo$8pysssss_input, ConstrainImageforVideo$8pysssss_output> {
    nameInComfy: "ConstrainImageforVideo|pysssss"
}
export interface ConstrainImageforVideo$8pysssss_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ConstrainImageforVideo$8pysssss_input {
    images: _IMAGE
    /** default=1024 min=undefined */
    max_width?: _INT
    /** default=1024 min=undefined */
    max_height?: _INT
    /** default=0 min=undefined */
    min_width?: _INT
    /** default=0 min=undefined */
    min_height?: _INT
    /** default="no" */
    crop_if_required?: Enum_ConstrainImage$8pysssss_crop_if_required
}

// MathExpression|pysssss [utils]
export interface MathExpression$8pysssss extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<MathExpression$8pysssss_input, MathExpression$8pysssss_output> {
    nameInComfy: "MathExpression|pysssss"
}
export interface MathExpression$8pysssss_output {
    INT: ComfyNodeOutput<'INT', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
}
export interface MathExpression$8pysssss_input {
    /** */
    expression: _STRING
    a?: _$Star
    b?: _$Star
    c?: _$Star
}

// PlaySound|pysssss [utils]
export interface PlaySound$8pysssss extends HasSingle_$Star, ComfyNode<PlaySound$8pysssss_input, PlaySound$8pysssss_output> {
    nameInComfy: "PlaySound|pysssss"
}
export interface PlaySound$8pysssss_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface PlaySound$8pysssss_input {
    /** */
    any: _$Star
    /** */
    mode: Enum_PlaySound$8pysssss_mode
    /** default=0.5 min=1 max=1 step=0.1 */
    volume?: _FLOAT
    /** default="notify.mp3" */
    file?: _STRING
}

// Repeater|pysssss [utils]
export interface Repeater$8pysssss extends HasSingle_$Star, ComfyNode<Repeater$8pysssss_input, Repeater$8pysssss_output> {
    nameInComfy: "Repeater|pysssss"
}
export interface Repeater$8pysssss_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface Repeater$8pysssss_input {
    /** */
    source: _$Star
    /** default=2 min=5000 max=5000 */
    repeats?: _INT
    /** */
    output: Enum_Repeater$8pysssss_output
    /** */
    node_mode: Enum_Repeater$8pysssss_node_mode
}

// ReroutePrimitive|pysssss [__hidden__]
export interface ReroutePrimitive$8pysssss extends HasSingle_$Star, ComfyNode<ReroutePrimitive$8pysssss_input, ReroutePrimitive$8pysssss_output> {
    nameInComfy: "ReroutePrimitive|pysssss"
}
export interface ReroutePrimitive$8pysssss_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface ReroutePrimitive$8pysssss_input {
    value: _$Star
}

// ShowText|pysssss [utils]
export interface ShowText$8pysssss extends HasSingle_STRING, ComfyNode<ShowText$8pysssss_input, ShowText$8pysssss_output> {
    nameInComfy: "ShowText|pysssss"
}
export interface ShowText$8pysssss_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ShowText$8pysssss_input {
    /** */
    text: _STRING
}

// StringFunction|pysssss [utils]
export interface StringFunction$8pysssss extends HasSingle_STRING, ComfyNode<StringFunction$8pysssss_input, StringFunction$8pysssss_output> {
    nameInComfy: "StringFunction|pysssss"
}
export interface StringFunction$8pysssss_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface StringFunction$8pysssss_input {
    /** */
    action: Enum_StringFunction$8pysssss_action
    /** */
    tidy_tags: Enum_ConstrainImage$8pysssss_crop_if_required
    /** */
    text_a?: _STRING
    /** */
    text_b?: _STRING
    /** */
    text_c?: _STRING
}

// SystemNotification|pysssss [utils]
export interface SystemNotification$8pysssss extends HasSingle_$Star, ComfyNode<SystemNotification$8pysssss_input, SystemNotification$8pysssss_output> {
    nameInComfy: "SystemNotification|pysssss"
}
export interface SystemNotification$8pysssss_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface SystemNotification$8pysssss_input {
    /** default="Your notification has triggered." */
    message?: _STRING
    /** */
    any: _$Star
    /** */
    mode: Enum_PlaySound$8pysssss_mode
}

// LoadText|pysssss [utils]
export interface LoadText$8pysssss extends HasSingle_STRING, ComfyNode<LoadText$8pysssss_input, LoadText$8pysssss_output> {
    nameInComfy: "LoadText|pysssss"
}
export interface LoadText$8pysssss_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface LoadText$8pysssss_input {
    /** */
    root_dir: Enum_LoadText$8pysssss_root_dir
    /** */
    file: Enum_LoadText$8pysssss_file
}

// SaveText|pysssss [utils]
export interface SaveText$8pysssss extends HasSingle_STRING, ComfyNode<SaveText$8pysssss_input, SaveText$8pysssss_output> {
    nameInComfy: "SaveText|pysssss"
}
export interface SaveText$8pysssss_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface SaveText$8pysssss_input {
    /** */
    root_dir: Enum_LoadText$8pysssss_root_dir
    /** default="file.txt" */
    file?: _STRING
    /** */
    append: Enum_SaveText$8pysssss_append
    /** default=true */
    insert?: _BOOLEAN
    /** */
    text: _STRING
}

// DPRandomGenerator [Dynamic Prompts]
export interface DPRandomGenerator extends HasSingle_STRING, ComfyNode<DPRandomGenerator_input, DPRandomGenerator_output> {
    nameInComfy: "DPRandomGenerator"
}
export interface DPRandomGenerator_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface DPRandomGenerator_input {
    /** */
    text: _STRING
    /** default=0 */
    seed?: _INT
    /** default="No" */
    autorefresh?: Enum_SDXLPromptStyler_log_prompt
}

// DPCombinatorialGenerator [Dynamic Prompts]
export interface DPCombinatorialGenerator extends HasSingle_STRING, ComfyNode<DPCombinatorialGenerator_input, DPCombinatorialGenerator_output> {
    nameInComfy: "DPCombinatorialGenerator"
}
export interface DPCombinatorialGenerator_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface DPCombinatorialGenerator_input {
    /** */
    text: _STRING
    /** default=0 */
    seed?: _INT
    /** default="No" */
    autorefresh?: Enum_SDXLPromptStyler_log_prompt
}

// DPFeelingLucky [Dynamic Prompts]
export interface DPFeelingLucky extends HasSingle_STRING, ComfyNode<DPFeelingLucky_input, DPFeelingLucky_output> {
    nameInComfy: "DPFeelingLucky"
}
export interface DPFeelingLucky_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface DPFeelingLucky_input {
    /** */
    text: _STRING
    /** default=0 */
    seed?: _INT
    /** default="No" */
    autorefresh?: Enum_SDXLPromptStyler_log_prompt
}

// DPJinja [Dynamic Prompts]
export interface DPJinja extends HasSingle_STRING, ComfyNode<DPJinja_input, DPJinja_output> {
    nameInComfy: "DPJinja"
}
export interface DPJinja_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface DPJinja_input {
    /** */
    text: _STRING
    autorefresh: Enum_SDXLPromptStyler_log_prompt
}

// DPMagicPrompt [Dynamic Prompts]
export interface DPMagicPrompt extends HasSingle_STRING, ComfyNode<DPMagicPrompt_input, DPMagicPrompt_output> {
    nameInComfy: "DPMagicPrompt"
}
export interface DPMagicPrompt_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface DPMagicPrompt_input {
    /** */
    text: _STRING
    /** default=0 */
    seed?: _INT
    /** default="No" */
    autorefresh?: Enum_SDXLPromptStyler_log_prompt
}

// DPOutput [utils]
export interface DPOutput extends ComfyNode<DPOutput_input, DPOutput_output> {
    nameInComfy: "DPOutput"
}
export interface DPOutput_output {
}
export interface DPOutput_input {
    /** */
    text: _STRING
}

// SAMLoader [ImpactPack]
export interface SAMLoader extends HasSingle_SAM_MODEL, ComfyNode<SAMLoader_input, SAMLoader_output> {
    nameInComfy: "SAMLoader"
}
export interface SAMLoader_output {
    SAM_MODEL: ComfyNodeOutput<'SAM_MODEL', 0>,
}
export interface SAMLoader_input {
    /** */
    model_name: Enum_SAMLoader_model_name
    /** */
    device_mode: Enum_BLIPCaption_device_mode
}

// CLIPSegDetectorProvider [ImpactPack_Util]
export interface CLIPSegDetectorProvider extends HasSingle_BBOX_DETECTOR, ComfyNode<CLIPSegDetectorProvider_input, CLIPSegDetectorProvider_output> {
    nameInComfy: "CLIPSegDetectorProvider"
}
export interface CLIPSegDetectorProvider_output {
    BBOX_DETECTOR: ComfyNodeOutput<'BBOX_DETECTOR', 0>,
}
export interface CLIPSegDetectorProvider_input {
    /** */
    text: _STRING
    /** default=7 min=15 max=15 step=0.1 */
    blur?: _FLOAT
    /** default=0.4 min=1 max=1 step=0.05 */
    threshold?: _FLOAT
    /** default=4 min=10 max=10 step=1 */
    dilation_factor?: _INT
}

// ONNXDetectorProvider [ImpactPack]
export interface ONNXDetectorProvider extends HasSingle_BBOX_DETECTOR, ComfyNode<ONNXDetectorProvider_input, ONNXDetectorProvider_output> {
    nameInComfy: "ONNXDetectorProvider"
}
export interface ONNXDetectorProvider_output {
    BBOX_DETECTOR: ComfyNodeOutput<'BBOX_DETECTOR', 0>,
}
export interface ONNXDetectorProvider_input {
    model_name: Enum_ImageSegmentationCustom_model
}

// BitwiseAndMaskForEach [ImpactPack_Operation]
export interface BitwiseAndMaskForEach extends HasSingle_SEGS, ComfyNode<BitwiseAndMaskForEach_input, BitwiseAndMaskForEach_output> {
    nameInComfy: "BitwiseAndMaskForEach"
}
export interface BitwiseAndMaskForEach_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface BitwiseAndMaskForEach_input {
    base_segs: _SEGS
    mask_segs: _SEGS
}

// SubtractMaskForEach [ImpactPack_Operation]
export interface SubtractMaskForEach extends HasSingle_SEGS, ComfyNode<SubtractMaskForEach_input, SubtractMaskForEach_output> {
    nameInComfy: "SubtractMaskForEach"
}
export interface SubtractMaskForEach_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface SubtractMaskForEach_input {
    base_segs: _SEGS
    mask_segs: _SEGS
}

// DetailerForEach [ImpactPack_Detailer]
export interface DetailerForEach extends HasSingle_IMAGE, ComfyNode<DetailerForEach_input, DetailerForEach_output> {
    nameInComfy: "DetailerForEach"
}
export interface DetailerForEach_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DetailerForEach_input {
    image: _IMAGE
    segs: _SEGS
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=true */
    noise_mask?: _BOOLEAN
    /** default=true */
    force_inpaint?: _BOOLEAN
    /** */
    wildcard: _STRING
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    detailer_hook?: _DETAILER_HOOK
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// DetailerForEachDebug [ImpactPack_Detailer]
export interface DetailerForEachDebug extends ComfyNode<DetailerForEachDebug_input, DetailerForEachDebug_output> {
    nameInComfy: "DetailerForEachDebug"
}
export interface DetailerForEachDebug_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    cropped: ComfyNodeOutput<'IMAGE', 1>,
    cropped_refined: ComfyNodeOutput<'IMAGE', 2>,
    cropped_refined_alpha: ComfyNodeOutput<'IMAGE', 3>,
    cnet_images: ComfyNodeOutput<'IMAGE', 4>,
}
export interface DetailerForEachDebug_input {
    image: _IMAGE
    segs: _SEGS
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=true */
    noise_mask?: _BOOLEAN
    /** default=true */
    force_inpaint?: _BOOLEAN
    /** */
    wildcard: _STRING
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    detailer_hook?: _DETAILER_HOOK
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// DetailerForEachPipe [ImpactPack_Detailer]
export interface DetailerForEachPipe extends HasSingle_SEGS, HasSingle_BASIC_PIPE, ComfyNode<DetailerForEachPipe_input, DetailerForEachPipe_output> {
    nameInComfy: "DetailerForEachPipe"
}
export interface DetailerForEachPipe_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    segs: ComfyNodeOutput<'SEGS', 1>,
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 2>,
    cnet_images: ComfyNodeOutput<'IMAGE', 3>,
}
export interface DetailerForEachPipe_input {
    image: _IMAGE
    segs: _SEGS
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=true */
    noise_mask?: _BOOLEAN
    /** default=true */
    force_inpaint?: _BOOLEAN
    basic_pipe: _BASIC_PIPE
    /** */
    wildcard: _STRING
    /** default=0.2 min=1 max=1 */
    refiner_ratio?: _FLOAT
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    detailer_hook?: _DETAILER_HOOK
    refiner_basic_pipe_opt?: _BASIC_PIPE
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// DetailerForEachDebugPipe [ImpactPack_Detailer]
export interface DetailerForEachDebugPipe extends HasSingle_SEGS, HasSingle_BASIC_PIPE, ComfyNode<DetailerForEachDebugPipe_input, DetailerForEachDebugPipe_output> {
    nameInComfy: "DetailerForEachDebugPipe"
}
export interface DetailerForEachDebugPipe_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    segs: ComfyNodeOutput<'SEGS', 1>,
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 2>,
    cropped: ComfyNodeOutput<'IMAGE', 3>,
    cropped_refined: ComfyNodeOutput<'IMAGE', 4>,
    cropped_refined_alpha: ComfyNodeOutput<'IMAGE', 5>,
    cnet_images: ComfyNodeOutput<'IMAGE', 6>,
}
export interface DetailerForEachDebugPipe_input {
    image: _IMAGE
    segs: _SEGS
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=true */
    noise_mask?: _BOOLEAN
    /** default=true */
    force_inpaint?: _BOOLEAN
    basic_pipe: _BASIC_PIPE
    /** */
    wildcard: _STRING
    /** default=0.2 min=1 max=1 */
    refiner_ratio?: _FLOAT
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    detailer_hook?: _DETAILER_HOOK
    refiner_basic_pipe_opt?: _BASIC_PIPE
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// DetailerForEachPipeForAnimateDiff [ImpactPack_Detailer]
export interface DetailerForEachPipeForAnimateDiff extends HasSingle_SEGS, HasSingle_BASIC_PIPE, ComfyNode<DetailerForEachPipeForAnimateDiff_input, DetailerForEachPipeForAnimateDiff_output> {
    nameInComfy: "DetailerForEachPipeForAnimateDiff"
}
export interface DetailerForEachPipeForAnimateDiff_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    segs: ComfyNodeOutput<'SEGS', 1>,
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 2>,
    cnet_images: ComfyNodeOutput<'IMAGE', 3>,
}
export interface DetailerForEachPipeForAnimateDiff_input {
    image_frames: _IMAGE
    segs: _SEGS
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    basic_pipe: _BASIC_PIPE
    /** default=0.2 min=1 max=1 */
    refiner_ratio?: _FLOAT
    detailer_hook?: _DETAILER_HOOK
    refiner_basic_pipe_opt?: _BASIC_PIPE
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// SAMDetectorCombined [ImpactPack_Detector]
export interface SAMDetectorCombined extends HasSingle_MASK, ComfyNode<SAMDetectorCombined_input, SAMDetectorCombined_output> {
    nameInComfy: "SAMDetectorCombined"
}
export interface SAMDetectorCombined_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface SAMDetectorCombined_input {
    /** */
    sam_model: _SAM_MODEL
    /** */
    segs: _SEGS
    /** */
    image: _IMAGE
    /** */
    detection_hint: Enum_AV$_FaceDetailer_sam_detection_hint
    /** default=0 min=512 max=512 step=1 */
    dilation?: _INT
    /** default=0.93 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
    /** default=0 min=1000 max=1000 step=1 */
    bbox_expansion?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    mask_hint_threshold?: _FLOAT
    /** */
    mask_hint_use_negative: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
}

// SAMDetectorSegmented [ImpactPack_Detector]
export interface SAMDetectorSegmented extends ComfyNode<SAMDetectorSegmented_input, SAMDetectorSegmented_output> {
    nameInComfy: "SAMDetectorSegmented"
}
export interface SAMDetectorSegmented_output {
    combined_mask: ComfyNodeOutput<'MASK', 0>,
    batch_masks: ComfyNodeOutput<'MASK', 1>,
}
export interface SAMDetectorSegmented_input {
    /** */
    sam_model: _SAM_MODEL
    /** */
    segs: _SEGS
    /** */
    image: _IMAGE
    /** */
    detection_hint: Enum_AV$_FaceDetailer_sam_detection_hint
    /** default=0 min=512 max=512 step=1 */
    dilation?: _INT
    /** default=0.93 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
    /** default=0 min=1000 max=1000 step=1 */
    bbox_expansion?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    mask_hint_threshold?: _FLOAT
    /** */
    mask_hint_use_negative: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
}

// FaceDetailer [ImpactPack_Simple]
export interface FaceDetailer extends HasSingle_MASK, HasSingle_DETAILER_PIPE, ComfyNode<FaceDetailer_input, FaceDetailer_output> {
    nameInComfy: "FaceDetailer"
}
export interface FaceDetailer_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    cropped_refined: ComfyNodeOutput<'IMAGE', 1>,
    cropped_enhanced_alpha: ComfyNodeOutput<'IMAGE', 2>,
    mask: ComfyNodeOutput<'MASK', 3>,
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 4>,
    cnet_images: ComfyNodeOutput<'IMAGE', 5>,
}
export interface FaceDetailer_input {
    image: _IMAGE
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=true */
    noise_mask?: _BOOLEAN
    /** default=true */
    force_inpaint?: _BOOLEAN
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_threshold?: _FLOAT
    /** default=10 min=512 max=512 step=1 */
    bbox_dilation?: _INT
    /** default=3 min=10 max=10 step=0.1 */
    bbox_crop_factor?: _FLOAT
    sam_detection_hint: Enum_AV$_FaceDetailer_sam_detection_hint
    /** default=0 min=512 max=512 step=1 */
    sam_dilation?: _INT
    /** default=0.93 min=1 max=1 step=0.01 */
    sam_threshold?: _FLOAT
    /** default=0 min=1000 max=1000 step=1 */
    sam_bbox_expansion?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    sam_mask_hint_threshold?: _FLOAT
    sam_mask_hint_use_negative: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    bbox_detector: _BBOX_DETECTOR
    /** */
    wildcard: _STRING
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    sam_model_opt?: _SAM_MODEL
    segm_detector_opt?: _SEGM_DETECTOR
    detailer_hook?: _DETAILER_HOOK
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// FaceDetailerPipe [ImpactPack_Simple]
export interface FaceDetailerPipe extends HasSingle_MASK, HasSingle_DETAILER_PIPE, ComfyNode<FaceDetailerPipe_input, FaceDetailerPipe_output> {
    nameInComfy: "FaceDetailerPipe"
}
export interface FaceDetailerPipe_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    cropped_refined: ComfyNodeOutput<'IMAGE', 1>,
    cropped_enhanced_alpha: ComfyNodeOutput<'IMAGE', 2>,
    mask: ComfyNodeOutput<'MASK', 3>,
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 4>,
    cnet_images: ComfyNodeOutput<'IMAGE', 5>,
}
export interface FaceDetailerPipe_input {
    image: _IMAGE
    detailer_pipe: _DETAILER_PIPE
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=true */
    noise_mask?: _BOOLEAN
    /** default=true */
    force_inpaint?: _BOOLEAN
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_threshold?: _FLOAT
    /** default=10 min=512 max=512 step=1 */
    bbox_dilation?: _INT
    /** default=3 min=10 max=10 step=0.1 */
    bbox_crop_factor?: _FLOAT
    sam_detection_hint: Enum_AV$_FaceDetailer_sam_detection_hint
    /** default=0 min=512 max=512 step=1 */
    sam_dilation?: _INT
    /** default=0.93 min=1 max=1 step=0.01 */
    sam_threshold?: _FLOAT
    /** default=0 min=1000 max=1000 step=1 */
    sam_bbox_expansion?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    sam_mask_hint_threshold?: _FLOAT
    sam_mask_hint_use_negative: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=0.2 min=1 max=1 */
    refiner_ratio?: _FLOAT
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// MaskDetailerPipe [ImpactPack_Detailer]
export interface MaskDetailerPipe extends ComfyNode<MaskDetailerPipe_input, MaskDetailerPipe_output> {
    nameInComfy: "MaskDetailerPipe"
}
export interface MaskDetailerPipe_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    cropped_refined: ComfyNodeOutput<'IMAGE', 1>,
    cropped_enhanced_alpha: ComfyNodeOutput<'IMAGE', 2>,
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 3>,
    refiner_basic_pipe_opt: ComfyNodeOutput<'BASIC_PIPE', 4>,
}
export interface MaskDetailerPipe_input {
    image: _IMAGE
    mask: _MASK
    basic_pipe: _BASIC_PIPE
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=1024 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=true */
    mask_mode?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=3 min=10 max=10 step=0.1 */
    crop_factor?: _FLOAT
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=0.2 min=1 max=1 */
    refiner_ratio?: _FLOAT
    /** default=1 min=100 max=100 */
    batch_size?: _INT
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    refiner_basic_pipe_opt?: _BASIC_PIPE
    detailer_hook?: _DETAILER_HOOK
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    /** default=false */
    bbox_fill?: _BOOLEAN
    /** default=true */
    contour_fill?: _BOOLEAN
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// ToDetailerPipe [ImpactPack_Pipe]
export interface ToDetailerPipe extends HasSingle_DETAILER_PIPE, ComfyNode<ToDetailerPipe_input, ToDetailerPipe_output> {
    nameInComfy: "ToDetailerPipe"
}
export interface ToDetailerPipe_output {
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 0>,
}
export interface ToDetailerPipe_input {
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    positive: _CONDITIONING
    negative: _CONDITIONING
    bbox_detector: _BBOX_DETECTOR
    /** */
    wildcard: _STRING
    "Select to add LoRA": Enum_ToDetailerPipe_Select$_to$_add$_LoRA
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
    sam_model_opt?: _SAM_MODEL
    segm_detector_opt?: _SEGM_DETECTOR
    detailer_hook?: _DETAILER_HOOK
}

// ToDetailerPipeSDXL [ImpactPack_Pipe]
export interface ToDetailerPipeSDXL extends HasSingle_DETAILER_PIPE, ComfyNode<ToDetailerPipeSDXL_input, ToDetailerPipeSDXL_output> {
    nameInComfy: "ToDetailerPipeSDXL"
}
export interface ToDetailerPipeSDXL_output {
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 0>,
}
export interface ToDetailerPipeSDXL_input {
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    positive: _CONDITIONING
    negative: _CONDITIONING
    refiner_model: _MODEL
    refiner_clip: _CLIP
    refiner_positive: _CONDITIONING
    refiner_negative: _CONDITIONING
    bbox_detector: _BBOX_DETECTOR
    /** */
    wildcard: _STRING
    "Select to add LoRA": Enum_ToDetailerPipe_Select$_to$_add$_LoRA
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
    sam_model_opt?: _SAM_MODEL
    segm_detector_opt?: _SEGM_DETECTOR
    detailer_hook?: _DETAILER_HOOK
}

// FromDetailerPipe [ImpactPack_Pipe]
export interface FromDetailerPipe extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_BBOX_DETECTOR, HasSingle_SAM_MODEL, HasSingle_SEGM_DETECTOR, HasSingle_DETAILER_HOOK, ComfyNode<FromDetailerPipe_input, FromDetailerPipe_output> {
    nameInComfy: "FromDetailerPipe"
}
export interface FromDetailerPipe_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    clip: ComfyNodeOutput<'CLIP', 1>,
    vae: ComfyNodeOutput<'VAE', 2>,
    positive: ComfyNodeOutput<'CONDITIONING', 3>,
    negative: ComfyNodeOutput<'CONDITIONING', 4>,
    bbox_detector: ComfyNodeOutput<'BBOX_DETECTOR', 5>,
    sam_model_opt: ComfyNodeOutput<'SAM_MODEL', 6>,
    segm_detector_opt: ComfyNodeOutput<'SEGM_DETECTOR', 7>,
    detailer_hook: ComfyNodeOutput<'DETAILER_HOOK', 8>,
}
export interface FromDetailerPipe_input {
    detailer_pipe: _DETAILER_PIPE
}

// FromDetailerPipe_v2 [ImpactPack_Pipe]
export interface FromDetailerPipe$_v2 extends HasSingle_DETAILER_PIPE, HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_BBOX_DETECTOR, HasSingle_SAM_MODEL, HasSingle_SEGM_DETECTOR, HasSingle_DETAILER_HOOK, ComfyNode<FromDetailerPipe$_v2_input, FromDetailerPipe$_v2_output> {
    nameInComfy: "FromDetailerPipe_v2"
}
export interface FromDetailerPipe$_v2_output {
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    clip: ComfyNodeOutput<'CLIP', 2>,
    vae: ComfyNodeOutput<'VAE', 3>,
    positive: ComfyNodeOutput<'CONDITIONING', 4>,
    negative: ComfyNodeOutput<'CONDITIONING', 5>,
    bbox_detector: ComfyNodeOutput<'BBOX_DETECTOR', 6>,
    sam_model_opt: ComfyNodeOutput<'SAM_MODEL', 7>,
    segm_detector_opt: ComfyNodeOutput<'SEGM_DETECTOR', 8>,
    detailer_hook: ComfyNodeOutput<'DETAILER_HOOK', 9>,
}
export interface FromDetailerPipe$_v2_input {
    detailer_pipe: _DETAILER_PIPE
}

// FromDetailerPipeSDXL [ImpactPack_Pipe]
export interface FromDetailerPipeSDXL extends HasSingle_DETAILER_PIPE, HasSingle_VAE, HasSingle_BBOX_DETECTOR, HasSingle_SAM_MODEL, HasSingle_SEGM_DETECTOR, HasSingle_DETAILER_HOOK, ComfyNode<FromDetailerPipeSDXL_input, FromDetailerPipeSDXL_output> {
    nameInComfy: "FromDetailerPipeSDXL"
}
export interface FromDetailerPipeSDXL_output {
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    clip: ComfyNodeOutput<'CLIP', 2>,
    vae: ComfyNodeOutput<'VAE', 3>,
    positive: ComfyNodeOutput<'CONDITIONING', 4>,
    negative: ComfyNodeOutput<'CONDITIONING', 5>,
    bbox_detector: ComfyNodeOutput<'BBOX_DETECTOR', 6>,
    sam_model_opt: ComfyNodeOutput<'SAM_MODEL', 7>,
    segm_detector_opt: ComfyNodeOutput<'SEGM_DETECTOR', 8>,
    detailer_hook: ComfyNodeOutput<'DETAILER_HOOK', 9>,
    refiner_model: ComfyNodeOutput<'MODEL', 10>,
    refiner_clip: ComfyNodeOutput<'CLIP', 11>,
    refiner_positive: ComfyNodeOutput<'CONDITIONING', 12>,
    refiner_negative: ComfyNodeOutput<'CONDITIONING', 13>,
}
export interface FromDetailerPipeSDXL_input {
    detailer_pipe: _DETAILER_PIPE
}

// AnyPipeToBasic [ImpactPack_Pipe]
export interface AnyPipeToBasic extends HasSingle_BASIC_PIPE, ComfyNode<AnyPipeToBasic_input, AnyPipeToBasic_output> {
    nameInComfy: "AnyPipeToBasic"
}
export interface AnyPipeToBasic_output {
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface AnyPipeToBasic_input {
    any_pipe: _$Star
}

// ToBasicPipe [ImpactPack_Pipe]
export interface ToBasicPipe extends HasSingle_BASIC_PIPE, ComfyNode<ToBasicPipe_input, ToBasicPipe_output> {
    nameInComfy: "ToBasicPipe"
}
export interface ToBasicPipe_output {
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface ToBasicPipe_input {
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    positive: _CONDITIONING
    negative: _CONDITIONING
}

// FromBasicPipe [ImpactPack_Pipe]
export interface FromBasicPipe extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<FromBasicPipe_input, FromBasicPipe_output> {
    nameInComfy: "FromBasicPipe"
}
export interface FromBasicPipe_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    clip: ComfyNodeOutput<'CLIP', 1>,
    vae: ComfyNodeOutput<'VAE', 2>,
    positive: ComfyNodeOutput<'CONDITIONING', 3>,
    negative: ComfyNodeOutput<'CONDITIONING', 4>,
}
export interface FromBasicPipe_input {
    basic_pipe: _BASIC_PIPE
}

// FromBasicPipe_v2 [ImpactPack_Pipe]
export interface FromBasicPipe$_v2 extends HasSingle_BASIC_PIPE, HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<FromBasicPipe$_v2_input, FromBasicPipe$_v2_output> {
    nameInComfy: "FromBasicPipe_v2"
}
export interface FromBasicPipe$_v2_output {
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    clip: ComfyNodeOutput<'CLIP', 2>,
    vae: ComfyNodeOutput<'VAE', 3>,
    positive: ComfyNodeOutput<'CONDITIONING', 4>,
    negative: ComfyNodeOutput<'CONDITIONING', 5>,
}
export interface FromBasicPipe$_v2_input {
    basic_pipe: _BASIC_PIPE
}

// BasicPipeToDetailerPipe [ImpactPack_Pipe]
export interface BasicPipeToDetailerPipe extends HasSingle_DETAILER_PIPE, ComfyNode<BasicPipeToDetailerPipe_input, BasicPipeToDetailerPipe_output> {
    nameInComfy: "BasicPipeToDetailerPipe"
}
export interface BasicPipeToDetailerPipe_output {
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 0>,
}
export interface BasicPipeToDetailerPipe_input {
    basic_pipe: _BASIC_PIPE
    bbox_detector: _BBOX_DETECTOR
    /** */
    wildcard: _STRING
    "Select to add LoRA": Enum_ToDetailerPipe_Select$_to$_add$_LoRA
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
    sam_model_opt?: _SAM_MODEL
    segm_detector_opt?: _SEGM_DETECTOR
    detailer_hook?: _DETAILER_HOOK
}

// BasicPipeToDetailerPipeSDXL [ImpactPack_Pipe]
export interface BasicPipeToDetailerPipeSDXL extends HasSingle_DETAILER_PIPE, ComfyNode<BasicPipeToDetailerPipeSDXL_input, BasicPipeToDetailerPipeSDXL_output> {
    nameInComfy: "BasicPipeToDetailerPipeSDXL"
}
export interface BasicPipeToDetailerPipeSDXL_output {
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 0>,
}
export interface BasicPipeToDetailerPipeSDXL_input {
    base_basic_pipe: _BASIC_PIPE
    refiner_basic_pipe: _BASIC_PIPE
    bbox_detector: _BBOX_DETECTOR
    /** */
    wildcard: _STRING
    "Select to add LoRA": Enum_ToDetailerPipe_Select$_to$_add$_LoRA
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
    sam_model_opt?: _SAM_MODEL
    segm_detector_opt?: _SEGM_DETECTOR
    detailer_hook?: _DETAILER_HOOK
}

// DetailerPipeToBasicPipe [ImpactPack_Pipe]
export interface DetailerPipeToBasicPipe extends ComfyNode<DetailerPipeToBasicPipe_input, DetailerPipeToBasicPipe_output> {
    nameInComfy: "DetailerPipeToBasicPipe"
}
export interface DetailerPipeToBasicPipe_output {
    base_basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 0>,
    refiner_basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 1>,
}
export interface DetailerPipeToBasicPipe_input {
    detailer_pipe: _DETAILER_PIPE
}

// EditBasicPipe [ImpactPack_Pipe]
export interface EditBasicPipe extends HasSingle_BASIC_PIPE, ComfyNode<EditBasicPipe_input, EditBasicPipe_output> {
    nameInComfy: "EditBasicPipe"
}
export interface EditBasicPipe_output {
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface EditBasicPipe_input {
    basic_pipe: _BASIC_PIPE
    model?: _MODEL
    clip?: _CLIP
    vae?: _VAE
    positive?: _CONDITIONING
    negative?: _CONDITIONING
}

// EditDetailerPipe [ImpactPack_Pipe]
export interface EditDetailerPipe extends HasSingle_DETAILER_PIPE, ComfyNode<EditDetailerPipe_input, EditDetailerPipe_output> {
    nameInComfy: "EditDetailerPipe"
}
export interface EditDetailerPipe_output {
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 0>,
}
export interface EditDetailerPipe_input {
    detailer_pipe: _DETAILER_PIPE
    /** */
    wildcard: _STRING
    "Select to add LoRA": Enum_ToDetailerPipe_Select$_to$_add$_LoRA
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
    model?: _MODEL
    clip?: _CLIP
    vae?: _VAE
    positive?: _CONDITIONING
    negative?: _CONDITIONING
    bbox_detector?: _BBOX_DETECTOR
    sam_model?: _SAM_MODEL
    segm_detector?: _SEGM_DETECTOR
    detailer_hook?: _DETAILER_HOOK
}

// EditDetailerPipeSDXL [ImpactPack_Pipe]
export interface EditDetailerPipeSDXL extends HasSingle_DETAILER_PIPE, ComfyNode<EditDetailerPipeSDXL_input, EditDetailerPipeSDXL_output> {
    nameInComfy: "EditDetailerPipeSDXL"
}
export interface EditDetailerPipeSDXL_output {
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 0>,
}
export interface EditDetailerPipeSDXL_input {
    detailer_pipe: _DETAILER_PIPE
    /** */
    wildcard: _STRING
    "Select to add LoRA": Enum_ToDetailerPipe_Select$_to$_add$_LoRA
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
    model?: _MODEL
    clip?: _CLIP
    vae?: _VAE
    positive?: _CONDITIONING
    negative?: _CONDITIONING
    refiner_model?: _MODEL
    refiner_clip?: _CLIP
    refiner_positive?: _CONDITIONING
    refiner_negative?: _CONDITIONING
    bbox_detector?: _BBOX_DETECTOR
    sam_model?: _SAM_MODEL
    segm_detector?: _SEGM_DETECTOR
    detailer_hook?: _DETAILER_HOOK
}

// LatentPixelScale [ImpactPack_Upscale]
export interface LatentPixelScale extends HasSingle_LATENT, HasSingle_IMAGE, ComfyNode<LatentPixelScale_input, LatentPixelScale_output> {
    nameInComfy: "LatentPixelScale"
}
export interface LatentPixelScale_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    IMAGE: ComfyNodeOutput<'IMAGE', 1>,
}
export interface LatentPixelScale_input {
    samples: _LATENT
    scale_method: Enum_LatentPixelScale_scale_method
    /** default=1.5 min=10000 max=10000 step=0.1 */
    scale_factor?: _FLOAT
    vae: _VAE
    /** default=false */
    use_tiled_vae?: _BOOLEAN
    upscale_model_opt?: _UPSCALE_MODEL
}

// PixelKSampleUpscalerProvider [ImpactPack_Upscale]
export interface PixelKSampleUpscalerProvider extends HasSingle_UPSCALER, ComfyNode<PixelKSampleUpscalerProvider_input, PixelKSampleUpscalerProvider_output> {
    nameInComfy: "PixelKSampleUpscalerProvider"
}
export interface PixelKSampleUpscalerProvider_output {
    UPSCALER: ComfyNodeOutput<'UPSCALER', 0>,
}
export interface PixelKSampleUpscalerProvider_input {
    scale_method: Enum_LatentPixelScale_scale_method
    model: _MODEL
    vae: _VAE
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=false */
    use_tiled_vae?: _BOOLEAN
    /** default=512 min=4096 max=4096 step=64 */
    tile_size?: _INT
    upscale_model_opt?: _UPSCALE_MODEL
    pk_hook_opt?: _PK_HOOK
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// PixelKSampleUpscalerProviderPipe [ImpactPack_Upscale]
export interface PixelKSampleUpscalerProviderPipe extends HasSingle_UPSCALER, ComfyNode<PixelKSampleUpscalerProviderPipe_input, PixelKSampleUpscalerProviderPipe_output> {
    nameInComfy: "PixelKSampleUpscalerProviderPipe"
}
export interface PixelKSampleUpscalerProviderPipe_output {
    UPSCALER: ComfyNodeOutput<'UPSCALER', 0>,
}
export interface PixelKSampleUpscalerProviderPipe_input {
    scale_method: Enum_LatentPixelScale_scale_method
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=false */
    use_tiled_vae?: _BOOLEAN
    basic_pipe: _BASIC_PIPE
    /** default=512 min=4096 max=4096 step=64 */
    tile_size?: _INT
    upscale_model_opt?: _UPSCALE_MODEL
    pk_hook_opt?: _PK_HOOK
    scheduler_func_opt?: _SCHEDULER_FUNC
    tile_cnet_opt?: _CONTROL_NET
    /** default=1 min=1 max=1 step=0.01 */
    tile_cnet_strength?: _FLOAT
}

// IterativeLatentUpscale [ImpactPack_Upscale]
export interface IterativeLatentUpscale extends HasSingle_LATENT, HasSingle_VAE, ComfyNode<IterativeLatentUpscale_input, IterativeLatentUpscale_output> {
    nameInComfy: "IterativeLatentUpscale"
}
export interface IterativeLatentUpscale_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
    vae: ComfyNodeOutput<'VAE', 1>,
}
export interface IterativeLatentUpscale_input {
    samples: _LATENT
    /** default=1.5 min=10000 max=10000 step=0.1 */
    upscale_factor?: _FLOAT
    /** default=3 min=10000 max=10000 step=1 */
    steps?: _INT
    /** default="" */
    temp_prefix?: _STRING
    upscaler: _UPSCALER
    /** default="simple" */
    step_mode?: Enum_IterativeLatentUpscale_step_mode
}

// IterativeImageUpscale [ImpactPack_Upscale]
export interface IterativeImageUpscale extends HasSingle_IMAGE, ComfyNode<IterativeImageUpscale_input, IterativeImageUpscale_output> {
    nameInComfy: "IterativeImageUpscale"
}
export interface IterativeImageUpscale_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface IterativeImageUpscale_input {
    pixels: _IMAGE
    /** default=1.5 min=10000 max=10000 step=0.1 */
    upscale_factor?: _FLOAT
    /** default=3 min=10000 max=10000 step=1 */
    steps?: _INT
    /** default="" */
    temp_prefix?: _STRING
    upscaler: _UPSCALER
    vae: _VAE
    /** default="simple" */
    step_mode?: Enum_IterativeLatentUpscale_step_mode
}

// PixelTiledKSampleUpscalerProvider [ImpactPack_Upscale]
export interface PixelTiledKSampleUpscalerProvider extends HasSingle_UPSCALER, ComfyNode<PixelTiledKSampleUpscalerProvider_input, PixelTiledKSampleUpscalerProvider_output> {
    nameInComfy: "PixelTiledKSampleUpscalerProvider"
}
export interface PixelTiledKSampleUpscalerProvider_output {
    UPSCALER: ComfyNodeOutput<'UPSCALER', 0>,
}
export interface PixelTiledKSampleUpscalerProvider_input {
    scale_method: Enum_LatentPixelScale_scale_method
    model: _MODEL
    vae: _VAE
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    tile_width?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    tile_height?: _INT
    tiling_strategy: Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy
    upscale_model_opt?: _UPSCALE_MODEL
    pk_hook_opt?: _PK_HOOK
    tile_cnet_opt?: _CONTROL_NET
    /** default=1 min=1 max=1 step=0.01 */
    tile_cnet_strength?: _FLOAT
}

// PixelTiledKSampleUpscalerProviderPipe [ImpactPack_Upscale]
export interface PixelTiledKSampleUpscalerProviderPipe extends HasSingle_UPSCALER, ComfyNode<PixelTiledKSampleUpscalerProviderPipe_input, PixelTiledKSampleUpscalerProviderPipe_output> {
    nameInComfy: "PixelTiledKSampleUpscalerProviderPipe"
}
export interface PixelTiledKSampleUpscalerProviderPipe_output {
    UPSCALER: ComfyNodeOutput<'UPSCALER', 0>,
}
export interface PixelTiledKSampleUpscalerProviderPipe_input {
    scale_method: Enum_LatentPixelScale_scale_method
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    tile_width?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    tile_height?: _INT
    tiling_strategy: Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy
    basic_pipe: _BASIC_PIPE
    upscale_model_opt?: _UPSCALE_MODEL
    pk_hook_opt?: _PK_HOOK
    tile_cnet_opt?: _CONTROL_NET
    /** default=1 min=1 max=1 step=0.01 */
    tile_cnet_strength?: _FLOAT
}

// TwoSamplersForMaskUpscalerProvider [ImpactPack_Upscale]
export interface TwoSamplersForMaskUpscalerProvider extends HasSingle_UPSCALER, ComfyNode<TwoSamplersForMaskUpscalerProvider_input, TwoSamplersForMaskUpscalerProvider_output> {
    nameInComfy: "TwoSamplersForMaskUpscalerProvider"
}
export interface TwoSamplersForMaskUpscalerProvider_output {
    UPSCALER: ComfyNodeOutput<'UPSCALER', 0>,
}
export interface TwoSamplersForMaskUpscalerProvider_input {
    scale_method: Enum_LatentPixelScale_scale_method
    full_sample_schedule: Enum_TwoSamplersForMaskUpscalerProvider_full_sample_schedule
    /** default=false */
    use_tiled_vae?: _BOOLEAN
    base_sampler: _KSAMPLER
    mask_sampler: _KSAMPLER
    mask: _MASK
    vae: _VAE
    /** default=512 min=4096 max=4096 step=64 */
    tile_size?: _INT
    full_sampler_opt?: _KSAMPLER
    upscale_model_opt?: _UPSCALE_MODEL
    pk_hook_base_opt?: _PK_HOOK
    pk_hook_mask_opt?: _PK_HOOK
    pk_hook_full_opt?: _PK_HOOK
}

// TwoSamplersForMaskUpscalerProviderPipe [ImpactPack_Upscale]
export interface TwoSamplersForMaskUpscalerProviderPipe extends HasSingle_UPSCALER, ComfyNode<TwoSamplersForMaskUpscalerProviderPipe_input, TwoSamplersForMaskUpscalerProviderPipe_output> {
    nameInComfy: "TwoSamplersForMaskUpscalerProviderPipe"
}
export interface TwoSamplersForMaskUpscalerProviderPipe_output {
    UPSCALER: ComfyNodeOutput<'UPSCALER', 0>,
}
export interface TwoSamplersForMaskUpscalerProviderPipe_input {
    scale_method: Enum_LatentPixelScale_scale_method
    full_sample_schedule: Enum_TwoSamplersForMaskUpscalerProvider_full_sample_schedule
    /** default=false */
    use_tiled_vae?: _BOOLEAN
    base_sampler: _KSAMPLER
    mask_sampler: _KSAMPLER
    mask: _MASK
    basic_pipe: _BASIC_PIPE
    /** default=512 min=4096 max=4096 step=64 */
    tile_size?: _INT
    full_sampler_opt?: _KSAMPLER
    upscale_model_opt?: _UPSCALE_MODEL
    pk_hook_base_opt?: _PK_HOOK
    pk_hook_mask_opt?: _PK_HOOK
    pk_hook_full_opt?: _PK_HOOK
}

// PixelKSampleHookCombine [ImpactPack_Upscale]
export interface PixelKSampleHookCombine extends HasSingle_PK_HOOK, ComfyNode<PixelKSampleHookCombine_input, PixelKSampleHookCombine_output> {
    nameInComfy: "PixelKSampleHookCombine"
}
export interface PixelKSampleHookCombine_output {
    PK_HOOK: ComfyNodeOutput<'PK_HOOK', 0>,
}
export interface PixelKSampleHookCombine_input {
    hook1: _PK_HOOK
    hook2: _PK_HOOK
}

// DenoiseScheduleHookProvider [ImpactPack_Upscale]
export interface DenoiseScheduleHookProvider extends HasSingle_PK_HOOK, ComfyNode<DenoiseScheduleHookProvider_input, DenoiseScheduleHookProvider_output> {
    nameInComfy: "DenoiseScheduleHookProvider"
}
export interface DenoiseScheduleHookProvider_output {
    PK_HOOK: ComfyNodeOutput<'PK_HOOK', 0>,
}
export interface DenoiseScheduleHookProvider_input {
    schedule_for_iteration: Enum_DenoiseScheduleHookProvider_schedule_for_iteration
    /** default=0.2 min=1 max=1 step=0.01 */
    target_denoise?: _FLOAT
}

// StepsScheduleHookProvider [ImpactPack_Upscale]
export interface StepsScheduleHookProvider extends HasSingle_PK_HOOK, ComfyNode<StepsScheduleHookProvider_input, StepsScheduleHookProvider_output> {
    nameInComfy: "StepsScheduleHookProvider"
}
export interface StepsScheduleHookProvider_output {
    PK_HOOK: ComfyNodeOutput<'PK_HOOK', 0>,
}
export interface StepsScheduleHookProvider_input {
    schedule_for_iteration: Enum_DenoiseScheduleHookProvider_schedule_for_iteration
    /** default=20 min=10000 max=10000 */
    target_steps?: _INT
}

// CfgScheduleHookProvider [ImpactPack_Upscale]
export interface CfgScheduleHookProvider extends HasSingle_PK_HOOK, ComfyNode<CfgScheduleHookProvider_input, CfgScheduleHookProvider_output> {
    nameInComfy: "CfgScheduleHookProvider"
}
export interface CfgScheduleHookProvider_output {
    PK_HOOK: ComfyNodeOutput<'PK_HOOK', 0>,
}
export interface CfgScheduleHookProvider_input {
    schedule_for_iteration: Enum_DenoiseScheduleHookProvider_schedule_for_iteration
    /** default=3 min=100 max=100 */
    target_cfg?: _FLOAT
}

// NoiseInjectionHookProvider [ImpactPack_Upscale]
export interface NoiseInjectionHookProvider extends HasSingle_PK_HOOK, ComfyNode<NoiseInjectionHookProvider_input, NoiseInjectionHookProvider_output> {
    nameInComfy: "NoiseInjectionHookProvider"
}
export interface NoiseInjectionHookProvider_output {
    PK_HOOK: ComfyNodeOutput<'PK_HOOK', 0>,
}
export interface NoiseInjectionHookProvider_input {
    schedule_for_iteration: Enum_DenoiseScheduleHookProvider_schedule_for_iteration
    source: Enum_NoiseInjectionHookProvider_source
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=1 min=200 max=200 step=0.01 */
    start_strength?: _FLOAT
    /** default=1 min=200 max=200 step=0.01 */
    end_strength?: _FLOAT
}

// UnsamplerHookProvider [ImpactPack_Upscale]
export interface UnsamplerHookProvider extends HasSingle_PK_HOOK, ComfyNode<UnsamplerHookProvider_input, UnsamplerHookProvider_output> {
    nameInComfy: "UnsamplerHookProvider"
}
export interface UnsamplerHookProvider_output {
    PK_HOOK: ComfyNodeOutput<'PK_HOOK', 0>,
}
export interface UnsamplerHookProvider_input {
    model: _MODEL
    /** default=25 min=10000 max=10000 */
    steps?: _INT
    /** default=21 min=10000 max=10000 */
    start_end_at_step?: _INT
    /** default=24 min=10000 max=10000 */
    end_end_at_step?: _INT
    /** default=1 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    normalize: Enum_KSamplerAdvanced_add_noise
    positive: _CONDITIONING
    negative: _CONDITIONING
    schedule_for_iteration: Enum_DenoiseScheduleHookProvider_schedule_for_iteration
}

// CoreMLDetailerHookProvider [ImpactPack_Detailer]
export interface CoreMLDetailerHookProvider extends HasSingle_DETAILER_HOOK, ComfyNode<CoreMLDetailerHookProvider_input, CoreMLDetailerHookProvider_output> {
    nameInComfy: "CoreMLDetailerHookProvider"
}
export interface CoreMLDetailerHookProvider_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
}
export interface CoreMLDetailerHookProvider_input {
    mode: Enum_CoreMLDetailerHookProvider_mode
}

// PreviewDetailerHookProvider [ImpactPack_Util]
export interface PreviewDetailerHookProvider extends HasSingle_DETAILER_HOOK, HasSingle_UPSCALER_HOOK, ComfyNode<PreviewDetailerHookProvider_input, PreviewDetailerHookProvider_output> {
    nameInComfy: "PreviewDetailerHookProvider"
}
export interface PreviewDetailerHookProvider_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
    UPSCALER_HOOK: ComfyNodeOutput<'UPSCALER_HOOK', 1>,
}
export interface PreviewDetailerHookProvider_input {
    /** default=95 min=100 max=100 */
    quality?: _INT
}

// DetailerHookCombine [ImpactPack_Upscale]
export interface DetailerHookCombine extends HasSingle_DETAILER_HOOK, ComfyNode<DetailerHookCombine_input, DetailerHookCombine_output> {
    nameInComfy: "DetailerHookCombine"
}
export interface DetailerHookCombine_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
}
export interface DetailerHookCombine_input {
    hook1: _DETAILER_HOOK
    hook2: _DETAILER_HOOK
}

// NoiseInjectionDetailerHookProvider [ImpactPack_Detailer]
export interface NoiseInjectionDetailerHookProvider extends HasSingle_DETAILER_HOOK, ComfyNode<NoiseInjectionDetailerHookProvider_input, NoiseInjectionDetailerHookProvider_output> {
    nameInComfy: "NoiseInjectionDetailerHookProvider"
}
export interface NoiseInjectionDetailerHookProvider_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
}
export interface NoiseInjectionDetailerHookProvider_input {
    schedule_for_cycle: Enum_NoiseInjectionDetailerHookProvider_schedule_for_cycle
    source: Enum_NoiseInjectionHookProvider_source
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=2 min=200 max=200 step=0.01 */
    start_strength?: _FLOAT
    /** default=1 min=200 max=200 step=0.01 */
    end_strength?: _FLOAT
}

// UnsamplerDetailerHookProvider [ImpactPack_Detailer]
export interface UnsamplerDetailerHookProvider extends HasSingle_DETAILER_HOOK, ComfyNode<UnsamplerDetailerHookProvider_input, UnsamplerDetailerHookProvider_output> {
    nameInComfy: "UnsamplerDetailerHookProvider"
}
export interface UnsamplerDetailerHookProvider_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
}
export interface UnsamplerDetailerHookProvider_input {
    model: _MODEL
    /** default=25 min=10000 max=10000 */
    steps?: _INT
    /** default=21 min=10000 max=10000 */
    start_end_at_step?: _INT
    /** default=24 min=10000 max=10000 */
    end_end_at_step?: _INT
    /** default=1 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    normalize: Enum_KSamplerAdvanced_add_noise
    positive: _CONDITIONING
    negative: _CONDITIONING
    schedule_for_cycle: Enum_NoiseInjectionDetailerHookProvider_schedule_for_cycle
}

// DenoiseSchedulerDetailerHookProvider [ImpactPack_Detailer]
export interface DenoiseSchedulerDetailerHookProvider extends HasSingle_DETAILER_HOOK, ComfyNode<DenoiseSchedulerDetailerHookProvider_input, DenoiseSchedulerDetailerHookProvider_output> {
    nameInComfy: "DenoiseSchedulerDetailerHookProvider"
}
export interface DenoiseSchedulerDetailerHookProvider_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
}
export interface DenoiseSchedulerDetailerHookProvider_input {
    schedule_for_cycle: Enum_DenoiseScheduleHookProvider_schedule_for_iteration
    /** default=0.3 min=1 max=1 step=0.01 */
    target_denoise?: _FLOAT
}

// SEGSOrderedFilterDetailerHookProvider [ImpactPack_Util]
export interface SEGSOrderedFilterDetailerHookProvider extends HasSingle_DETAILER_HOOK, ComfyNode<SEGSOrderedFilterDetailerHookProvider_input, SEGSOrderedFilterDetailerHookProvider_output> {
    nameInComfy: "SEGSOrderedFilterDetailerHookProvider"
}
export interface SEGSOrderedFilterDetailerHookProvider_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
}
export interface SEGSOrderedFilterDetailerHookProvider_input {
    target: Enum_SEGSOrderedFilterDetailerHookProvider_target
    /** default=true */
    order?: _BOOLEAN
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    take_start?: _INT
    /** default=1 min=9223372036854776000 max=9223372036854776000 step=1 */
    take_count?: _INT
}

// SEGSRangeFilterDetailerHookProvider [ImpactPack_Util]
export interface SEGSRangeFilterDetailerHookProvider extends HasSingle_DETAILER_HOOK, ComfyNode<SEGSRangeFilterDetailerHookProvider_input, SEGSRangeFilterDetailerHookProvider_output> {
    nameInComfy: "SEGSRangeFilterDetailerHookProvider"
}
export interface SEGSRangeFilterDetailerHookProvider_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
}
export interface SEGSRangeFilterDetailerHookProvider_input {
    target: Enum_SEGSRangeFilterDetailerHookProvider_target
    /** default=true */
    mode?: _BOOLEAN
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    min_value?: _INT
    /** default=67108864 min=9223372036854776000 max=9223372036854776000 step=1 */
    max_value?: _INT
}

// SEGSLabelFilterDetailerHookProvider [ImpactPack_Util]
export interface SEGSLabelFilterDetailerHookProvider extends HasSingle_DETAILER_HOOK, ComfyNode<SEGSLabelFilterDetailerHookProvider_input, SEGSLabelFilterDetailerHookProvider_output> {
    nameInComfy: "SEGSLabelFilterDetailerHookProvider"
}
export interface SEGSLabelFilterDetailerHookProvider_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
}
export interface SEGSLabelFilterDetailerHookProvider_input {
    segs: _SEGS
    preset: Enum_SEGSLabelFilterDetailerHookProvider_preset
    /** */
    labels: _STRING
}

// VariationNoiseDetailerHookProvider [ImpactPack_Detailer]
export interface VariationNoiseDetailerHookProvider extends HasSingle_DETAILER_HOOK, ComfyNode<VariationNoiseDetailerHookProvider_input, VariationNoiseDetailerHookProvider_output> {
    nameInComfy: "VariationNoiseDetailerHookProvider"
}
export interface VariationNoiseDetailerHookProvider_output {
    DETAILER_HOOK: ComfyNodeOutput<'DETAILER_HOOK', 0>,
}
export interface VariationNoiseDetailerHookProvider_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    strength?: _FLOAT
}

// BitwiseAndMask [ImpactPack_Operation]
export interface BitwiseAndMask extends HasSingle_MASK, ComfyNode<BitwiseAndMask_input, BitwiseAndMask_output> {
    nameInComfy: "BitwiseAndMask"
}
export interface BitwiseAndMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface BitwiseAndMask_input {
    mask1: _MASK
    mask2: _MASK
}

// SubtractMask [ImpactPack_Operation]
export interface SubtractMask extends HasSingle_MASK, ComfyNode<SubtractMask_input, SubtractMask_output> {
    nameInComfy: "SubtractMask"
}
export interface SubtractMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface SubtractMask_input {
    mask1: _MASK
    mask2: _MASK
}

// AddMask [ImpactPack_Operation]
export interface AddMask extends HasSingle_MASK, ComfyNode<AddMask_input, AddMask_output> {
    nameInComfy: "AddMask"
}
export interface AddMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface AddMask_input {
    mask1: _MASK
    mask2: _MASK
}

// ImpactSegsAndMask [ImpactPack_Operation]
export interface ImpactSegsAndMask extends HasSingle_SEGS, ComfyNode<ImpactSegsAndMask_input, ImpactSegsAndMask_output> {
    nameInComfy: "ImpactSegsAndMask"
}
export interface ImpactSegsAndMask_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactSegsAndMask_input {
    segs: _SEGS
    mask: _MASK
}

// ImpactSegsAndMaskForEach [ImpactPack_Operation]
export interface ImpactSegsAndMaskForEach extends HasSingle_SEGS, ComfyNode<ImpactSegsAndMaskForEach_input, ImpactSegsAndMaskForEach_output> {
    nameInComfy: "ImpactSegsAndMaskForEach"
}
export interface ImpactSegsAndMaskForEach_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactSegsAndMaskForEach_input {
    segs: _SEGS
    masks: _MASK
}

// EmptySegs [ImpactPack_Util]
export interface EmptySegs extends HasSingle_SEGS, ComfyNode<EmptySegs_input, EmptySegs_output> {
    nameInComfy: "EmptySegs"
}
export interface EmptySegs_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface EmptySegs_input {
}

// ImpactFlattenMask [ImpactPack_Operation]
export interface ImpactFlattenMask extends HasSingle_MASK, ComfyNode<ImpactFlattenMask_input, ImpactFlattenMask_output> {
    nameInComfy: "ImpactFlattenMask"
}
export interface ImpactFlattenMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ImpactFlattenMask_input {
    masks: _MASK
}

// MediaPipeFaceMeshToSEGS [ImpactPack_Operation]
export interface MediaPipeFaceMeshToSEGS extends HasSingle_SEGS, ComfyNode<MediaPipeFaceMeshToSEGS_input, MediaPipeFaceMeshToSEGS_output> {
    nameInComfy: "MediaPipeFaceMeshToSEGS"
}
export interface MediaPipeFaceMeshToSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface MediaPipeFaceMeshToSEGS_input {
    image: _IMAGE
    /** default=3 min=100 max=100 step=0.1 */
    crop_factor?: _FLOAT
    /** default=false */
    bbox_fill?: _BOOLEAN
    /** default=50 min=16384 max=16384 step=1 */
    crop_min_size?: _INT
    /** default=1 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=0 min=512 max=512 step=1 */
    dilation?: _INT
    /** default=true */
    face?: _BOOLEAN
    /** default=false */
    mouth?: _BOOLEAN
    /** default=false */
    left_eyebrow?: _BOOLEAN
    /** default=false */
    left_eye?: _BOOLEAN
    /** default=false */
    left_pupil?: _BOOLEAN
    /** default=false */
    right_eyebrow?: _BOOLEAN
    /** default=false */
    right_eye?: _BOOLEAN
    /** default=false */
    right_pupil?: _BOOLEAN
}

// MaskToSEGS [ImpactPack_Operation]
export interface MaskToSEGS extends HasSingle_SEGS, ComfyNode<MaskToSEGS_input, MaskToSEGS_output> {
    nameInComfy: "MaskToSEGS"
}
export interface MaskToSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface MaskToSEGS_input {
    mask: _MASK
    /** default=false */
    combined?: _BOOLEAN
    /** default=3 min=100 max=100 step=0.1 */
    crop_factor?: _FLOAT
    /** default=false */
    bbox_fill?: _BOOLEAN
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=false */
    contour_fill?: _BOOLEAN
}

// MaskToSEGS_for_AnimateDiff [ImpactPack_Operation]
export interface MaskToSEGS$_for$_AnimateDiff extends HasSingle_SEGS, ComfyNode<MaskToSEGS$_for$_AnimateDiff_input, MaskToSEGS$_for$_AnimateDiff_output> {
    nameInComfy: "MaskToSEGS_for_AnimateDiff"
}
export interface MaskToSEGS$_for$_AnimateDiff_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface MaskToSEGS$_for$_AnimateDiff_input {
    mask: _MASK
    /** default=false */
    combined?: _BOOLEAN
    /** default=3 min=100 max=100 step=0.1 */
    crop_factor?: _FLOAT
    /** default=false */
    bbox_fill?: _BOOLEAN
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=false */
    contour_fill?: _BOOLEAN
}

// ToBinaryMask [ImpactPack_Operation]
export interface ToBinaryMask extends HasSingle_MASK, ComfyNode<ToBinaryMask_input, ToBinaryMask_output> {
    nameInComfy: "ToBinaryMask"
}
export interface ToBinaryMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ToBinaryMask_input {
    mask: _MASK
    /** default=20 min=255 max=255 */
    threshold?: _INT
}

// MasksToMaskList [ImpactPack_Operation]
export interface MasksToMaskList extends HasSingle_MASK, ComfyNode<MasksToMaskList_input, MasksToMaskList_output> {
    nameInComfy: "MasksToMaskList"
}
export interface MasksToMaskList_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MasksToMaskList_input {
    masks: _MASK
}

// MaskListToMaskBatch [ImpactPack_Operation]
export interface MaskListToMaskBatch extends HasSingle_MASK, ComfyNode<MaskListToMaskBatch_input, MaskListToMaskBatch_output> {
    nameInComfy: "MaskListToMaskBatch"
}
export interface MaskListToMaskBatch_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskListToMaskBatch_input {
    mask: _MASK
}

// ImageListToImageBatch [ImpactPack_Operation]
export interface ImageListToImageBatch extends HasSingle_IMAGE, ComfyNode<ImageListToImageBatch_input, ImageListToImageBatch_output> {
    nameInComfy: "ImageListToImageBatch"
}
export interface ImageListToImageBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageListToImageBatch_input {
    images: _IMAGE
}

// SetDefaultImageForSEGS [ImpactPack_Util]
export interface SetDefaultImageForSEGS extends HasSingle_SEGS, ComfyNode<SetDefaultImageForSEGS_input, SetDefaultImageForSEGS_output> {
    nameInComfy: "SetDefaultImageForSEGS"
}
export interface SetDefaultImageForSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface SetDefaultImageForSEGS_input {
    segs: _SEGS
    image: _IMAGE
    /** default=true */
    override?: _BOOLEAN
}

// RemoveImageFromSEGS [ImpactPack_Util]
export interface RemoveImageFromSEGS extends HasSingle_SEGS, ComfyNode<RemoveImageFromSEGS_input, RemoveImageFromSEGS_output> {
    nameInComfy: "RemoveImageFromSEGS"
}
export interface RemoveImageFromSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface RemoveImageFromSEGS_input {
    segs: _SEGS
}

// BboxDetectorSEGS [ImpactPack_Detector]
export interface BboxDetectorSEGS extends HasSingle_SEGS, ComfyNode<BboxDetectorSEGS_input, BboxDetectorSEGS_output> {
    nameInComfy: "BboxDetectorSEGS"
}
export interface BboxDetectorSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface BboxDetectorSEGS_input {
    bbox_detector: _BBOX_DETECTOR
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
    /** default=10 min=512 max=512 step=1 */
    dilation?: _INT
    /** default=3 min=100 max=100 step=0.1 */
    crop_factor?: _FLOAT
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default="all" */
    labels?: _STRING
    detailer_hook?: _DETAILER_HOOK
}

// SegmDetectorSEGS [ImpactPack_Detector]
export interface SegmDetectorSEGS extends HasSingle_SEGS, ComfyNode<SegmDetectorSEGS_input, SegmDetectorSEGS_output> {
    nameInComfy: "SegmDetectorSEGS"
}
export interface SegmDetectorSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface SegmDetectorSEGS_input {
    segm_detector: _SEGM_DETECTOR
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
    /** default=10 min=512 max=512 step=1 */
    dilation?: _INT
    /** default=3 min=100 max=100 step=0.1 */
    crop_factor?: _FLOAT
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default="all" */
    labels?: _STRING
    detailer_hook?: _DETAILER_HOOK
}

// ONNXDetectorSEGS [ImpactPack_Detector]
export interface ONNXDetectorSEGS extends HasSingle_SEGS, ComfyNode<ONNXDetectorSEGS_input, ONNXDetectorSEGS_output> {
    nameInComfy: "ONNXDetectorSEGS"
}
export interface ONNXDetectorSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ONNXDetectorSEGS_input {
    bbox_detector: _BBOX_DETECTOR
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
    /** default=10 min=512 max=512 step=1 */
    dilation?: _INT
    /** default=3 min=100 max=100 step=0.1 */
    crop_factor?: _FLOAT
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default="all" */
    labels?: _STRING
    detailer_hook?: _DETAILER_HOOK
}

// ImpactSimpleDetectorSEGS_for_AD [ImpactPack_Detector]
export interface ImpactSimpleDetectorSEGS$_for$_AD extends HasSingle_SEGS, ComfyNode<ImpactSimpleDetectorSEGS$_for$_AD_input, ImpactSimpleDetectorSEGS$_for$_AD_output> {
    nameInComfy: "ImpactSimpleDetectorSEGS_for_AD"
}
export interface ImpactSimpleDetectorSEGS$_for$_AD_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactSimpleDetectorSEGS$_for$_AD_input {
    bbox_detector: _BBOX_DETECTOR
    image_frames: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_threshold?: _FLOAT
    /** default=0 min=255 max=255 step=1 */
    bbox_dilation?: _INT
    /** default=3 min=100 max=100 step=0.1 */
    crop_factor?: _FLOAT
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=0.5 min=1 max=1 step=0.01 */
    sub_threshold?: _FLOAT
    /** default=0 min=255 max=255 step=1 */
    sub_dilation?: _INT
    /** default=0 min=1000 max=1000 step=1 */
    sub_bbox_expansion?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    sam_mask_hint_threshold?: _FLOAT
    masking_mode?: Enum_ImpactSimpleDetectorSEGS$_for$_AD_masking_mode
    segs_pivot?: Enum_ImpactSimpleDetectorSEGS$_for$_AD_segs_pivot
    /** */
    sam_model_opt?: _SAM_MODEL
    segm_detector_opt?: _SEGM_DETECTOR
}

// ImpactSimpleDetectorSEGS [ImpactPack_Detector]
export interface ImpactSimpleDetectorSEGS extends HasSingle_SEGS, ComfyNode<ImpactSimpleDetectorSEGS_input, ImpactSimpleDetectorSEGS_output> {
    nameInComfy: "ImpactSimpleDetectorSEGS"
}
export interface ImpactSimpleDetectorSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactSimpleDetectorSEGS_input {
    bbox_detector: _BBOX_DETECTOR
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_threshold?: _FLOAT
    /** default=0 min=512 max=512 step=1 */
    bbox_dilation?: _INT
    /** default=3 min=100 max=100 step=0.1 */
    crop_factor?: _FLOAT
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=0.5 min=1 max=1 step=0.01 */
    sub_threshold?: _FLOAT
    /** default=0 min=512 max=512 step=1 */
    sub_dilation?: _INT
    /** default=0 min=1000 max=1000 step=1 */
    sub_bbox_expansion?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    sam_mask_hint_threshold?: _FLOAT
    /** default=0 min=512 max=512 step=1 */
    post_dilation?: _INT
    /** */
    sam_model_opt?: _SAM_MODEL
    segm_detector_opt?: _SEGM_DETECTOR
}

// ImpactSimpleDetectorSEGSPipe [ImpactPack_Detector]
export interface ImpactSimpleDetectorSEGSPipe extends HasSingle_SEGS, ComfyNode<ImpactSimpleDetectorSEGSPipe_input, ImpactSimpleDetectorSEGSPipe_output> {
    nameInComfy: "ImpactSimpleDetectorSEGSPipe"
}
export interface ImpactSimpleDetectorSEGSPipe_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactSimpleDetectorSEGSPipe_input {
    detailer_pipe: _DETAILER_PIPE
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_threshold?: _FLOAT
    /** default=0 min=512 max=512 step=1 */
    bbox_dilation?: _INT
    /** default=3 min=100 max=100 step=0.1 */
    crop_factor?: _FLOAT
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=0.5 min=1 max=1 step=0.01 */
    sub_threshold?: _FLOAT
    /** default=0 min=512 max=512 step=1 */
    sub_dilation?: _INT
    /** default=0 min=1000 max=1000 step=1 */
    sub_bbox_expansion?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    sam_mask_hint_threshold?: _FLOAT
    /** default=0 min=512 max=512 step=1 */
    post_dilation?: _INT
}

// ImpactControlNetApplySEGS [ImpactPack_Util]
export interface ImpactControlNetApplySEGS extends HasSingle_SEGS, ComfyNode<ImpactControlNetApplySEGS_input, ImpactControlNetApplySEGS_output> {
    nameInComfy: "ImpactControlNetApplySEGS"
}
export interface ImpactControlNetApplySEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactControlNetApplySEGS_input {
    segs: _SEGS
    control_net: _CONTROL_NET
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    segs_preprocessor?: _SEGS_PREPROCESSOR
    control_image?: _IMAGE
}

// ImpactControlNetApplyAdvancedSEGS [ImpactPack_Util]
export interface ImpactControlNetApplyAdvancedSEGS extends HasSingle_SEGS, ComfyNode<ImpactControlNetApplyAdvancedSEGS_input, ImpactControlNetApplyAdvancedSEGS_output> {
    nameInComfy: "ImpactControlNetApplyAdvancedSEGS"
}
export interface ImpactControlNetApplyAdvancedSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactControlNetApplyAdvancedSEGS_input {
    segs: _SEGS
    control_net: _CONTROL_NET
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent?: _FLOAT
    segs_preprocessor?: _SEGS_PREPROCESSOR
    control_image?: _IMAGE
    vae?: _VAE
}

// ImpactControlNetClearSEGS [ImpactPack_Util]
export interface ImpactControlNetClearSEGS extends HasSingle_SEGS, ComfyNode<ImpactControlNetClearSEGS_input, ImpactControlNetClearSEGS_output> {
    nameInComfy: "ImpactControlNetClearSEGS"
}
export interface ImpactControlNetClearSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactControlNetClearSEGS_input {
    segs: _SEGS
}

// ImpactIPAdapterApplySEGS [ImpactPack_Util]
export interface ImpactIPAdapterApplySEGS extends HasSingle_SEGS, ComfyNode<ImpactIPAdapterApplySEGS_input, ImpactIPAdapterApplySEGS_output> {
    nameInComfy: "ImpactIPAdapterApplySEGS"
}
export interface ImpactIPAdapterApplySEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactIPAdapterApplySEGS_input {
    segs: _SEGS
    ipadapter_pipe: _IPADAPTER_PIPE
    /** default=0.7 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    /** default=0.4 min=1 max=1 step=0.01 */
    noise?: _FLOAT
    /** default="channel penalty" */
    weight_type?: Enum_ImpactIPAdapterApplySEGS_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=0.9 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    /** default=false */
    unfold_batch?: _BOOLEAN
    /** default=false */
    faceid_v2?: _BOOLEAN
    /** default=1 min=3 max=3 step=0.05 */
    weight_v2?: _FLOAT
    /** default=1.2 min=100 max=100 step=0.1 */
    context_crop_factor?: _FLOAT
    reference_image: _IMAGE
    combine_embeds?: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    neg_image?: _IMAGE
}

// ImpactDecomposeSEGS [ImpactPack_Util]
export interface ImpactDecomposeSEGS extends HasSingle_SEGS_HEADER, HasSingle_SEG_ELT, ComfyNode<ImpactDecomposeSEGS_input, ImpactDecomposeSEGS_output> {
    nameInComfy: "ImpactDecomposeSEGS"
}
export interface ImpactDecomposeSEGS_output {
    SEGS_HEADER: ComfyNodeOutput<'SEGS_HEADER', 0>,
    SEG_ELT: ComfyNodeOutput<'SEG_ELT', 1>,
}
export interface ImpactDecomposeSEGS_input {
    segs: _SEGS
}

// ImpactAssembleSEGS [ImpactPack_Util]
export interface ImpactAssembleSEGS extends HasSingle_SEGS, ComfyNode<ImpactAssembleSEGS_input, ImpactAssembleSEGS_output> {
    nameInComfy: "ImpactAssembleSEGS"
}
export interface ImpactAssembleSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactAssembleSEGS_input {
    seg_header: _SEGS_HEADER
    seg_elt: _SEG_ELT
}

// ImpactFrom_SEG_ELT [ImpactPack_Util]
export interface ImpactFrom$_SEG$_ELT extends HasSingle_SEG_ELT, HasSingle_IMAGE, HasSingle_MASK, HasSingle_SEG_ELT_crop_region, HasSingle_SEG_ELT_bbox, HasSingle_SEG_ELT_control_net_wrapper, HasSingle_FLOAT, HasSingle_STRING, ComfyNode<ImpactFrom$_SEG$_ELT_input, ImpactFrom$_SEG$_ELT_output> {
    nameInComfy: "ImpactFrom_SEG_ELT"
}
export interface ImpactFrom$_SEG$_ELT_output {
    seg_elt: ComfyNodeOutput<'SEG_ELT', 0>,
    cropped_image: ComfyNodeOutput<'IMAGE', 1>,
    cropped_mask: ComfyNodeOutput<'MASK', 2>,
    crop_region: ComfyNodeOutput<'SEG_ELT_crop_region', 3>,
    bbox: ComfyNodeOutput<'SEG_ELT_bbox', 4>,
    control_net_wrapper: ComfyNodeOutput<'SEG_ELT_control_net_wrapper', 5>,
    confidence: ComfyNodeOutput<'FLOAT', 6>,
    label: ComfyNodeOutput<'STRING', 7>,
}
export interface ImpactFrom$_SEG$_ELT_input {
    seg_elt: _SEG_ELT
}

// ImpactEdit_SEG_ELT [ImpactPack_Util]
export interface ImpactEdit$_SEG$_ELT extends HasSingle_SEG_ELT, ComfyNode<ImpactEdit$_SEG$_ELT_input, ImpactEdit$_SEG$_ELT_output> {
    nameInComfy: "ImpactEdit_SEG_ELT"
}
export interface ImpactEdit$_SEG$_ELT_output {
    SEG_ELT: ComfyNodeOutput<'SEG_ELT', 0>,
}
export interface ImpactEdit$_SEG$_ELT_input {
    seg_elt: _SEG_ELT
    cropped_image_opt?: _IMAGE
    cropped_mask_opt?: _MASK
    crop_region_opt?: _SEG_ELT_crop_region
    bbox_opt?: _SEG_ELT_bbox
    control_net_wrapper_opt?: _SEG_ELT_control_net_wrapper
    /** min=1 max=1 step=0.1 */
    confidence_opt?: _FLOAT
    /** */
    label_opt?: _STRING
}

// ImpactDilate_Mask_SEG_ELT [ImpactPack_Util]
export interface ImpactDilate$_Mask$_SEG$_ELT extends HasSingle_SEG_ELT, ComfyNode<ImpactDilate$_Mask$_SEG$_ELT_input, ImpactDilate$_Mask$_SEG$_ELT_output> {
    nameInComfy: "ImpactDilate_Mask_SEG_ELT"
}
export interface ImpactDilate$_Mask$_SEG$_ELT_output {
    SEG_ELT: ComfyNodeOutput<'SEG_ELT', 0>,
}
export interface ImpactDilate$_Mask$_SEG$_ELT_input {
    seg_elt: _SEG_ELT
    /** default=10 min=512 max=512 step=1 */
    dilation?: _INT
}

// ImpactDilateMask [ImpactPack_Util]
export interface ImpactDilateMask extends HasSingle_MASK, ComfyNode<ImpactDilateMask_input, ImpactDilateMask_output> {
    nameInComfy: "ImpactDilateMask"
}
export interface ImpactDilateMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ImpactDilateMask_input {
    mask: _MASK
    /** default=10 min=512 max=512 step=1 */
    dilation?: _INT
}

// ImpactGaussianBlurMask [ImpactPack_Util]
export interface ImpactGaussianBlurMask extends HasSingle_MASK, ComfyNode<ImpactGaussianBlurMask_input, ImpactGaussianBlurMask_output> {
    nameInComfy: "ImpactGaussianBlurMask"
}
export interface ImpactGaussianBlurMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ImpactGaussianBlurMask_input {
    mask: _MASK
    /** default=10 min=100 max=100 step=1 */
    kernel_size?: _INT
    /** default=10 min=100 max=100 step=0.1 */
    sigma?: _FLOAT
}

// ImpactDilateMaskInSEGS [ImpactPack_Util]
export interface ImpactDilateMaskInSEGS extends HasSingle_SEGS, ComfyNode<ImpactDilateMaskInSEGS_input, ImpactDilateMaskInSEGS_output> {
    nameInComfy: "ImpactDilateMaskInSEGS"
}
export interface ImpactDilateMaskInSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactDilateMaskInSEGS_input {
    segs: _SEGS
    /** default=10 min=512 max=512 step=1 */
    dilation?: _INT
}

// ImpactGaussianBlurMaskInSEGS [ImpactPack_Util]
export interface ImpactGaussianBlurMaskInSEGS extends HasSingle_SEGS, ComfyNode<ImpactGaussianBlurMaskInSEGS_input, ImpactGaussianBlurMaskInSEGS_output> {
    nameInComfy: "ImpactGaussianBlurMaskInSEGS"
}
export interface ImpactGaussianBlurMaskInSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactGaussianBlurMaskInSEGS_input {
    segs: _SEGS
    /** default=10 min=100 max=100 step=1 */
    kernel_size?: _INT
    /** default=10 min=100 max=100 step=0.1 */
    sigma?: _FLOAT
}

// ImpactScaleBy_BBOX_SEG_ELT [ImpactPack_Util]
export interface ImpactScaleBy$_BBOX$_SEG$_ELT extends HasSingle_SEG_ELT, ComfyNode<ImpactScaleBy$_BBOX$_SEG$_ELT_input, ImpactScaleBy$_BBOX$_SEG$_ELT_output> {
    nameInComfy: "ImpactScaleBy_BBOX_SEG_ELT"
}
export interface ImpactScaleBy$_BBOX$_SEG$_ELT_output {
    SEG_ELT: ComfyNodeOutput<'SEG_ELT', 0>,
}
export interface ImpactScaleBy$_BBOX$_SEG$_ELT_input {
    seg: _SEG_ELT
    /** default=1 min=8 max=8 step=0.01 */
    scale_by?: _FLOAT
}

// ImpactFrom_SEG_ELT_bbox [ImpactPack_Util]
export interface ImpactFrom$_SEG$_ELT$_bbox extends ComfyNode<ImpactFrom$_SEG$_ELT$_bbox_input, ImpactFrom$_SEG$_ELT$_bbox_output> {
    nameInComfy: "ImpactFrom_SEG_ELT_bbox"
}
export interface ImpactFrom$_SEG$_ELT$_bbox_output {
    left: ComfyNodeOutput<'INT', 0>,
    top: ComfyNodeOutput<'INT', 1>,
    right: ComfyNodeOutput<'INT', 2>,
    bottom: ComfyNodeOutput<'INT', 3>,
}
export interface ImpactFrom$_SEG$_ELT$_bbox_input {
    bbox: _SEG_ELT_bbox
}

// ImpactFrom_SEG_ELT_crop_region [ImpactPack_Util]
export interface ImpactFrom$_SEG$_ELT$_crop$_region extends ComfyNode<ImpactFrom$_SEG$_ELT$_crop$_region_input, ImpactFrom$_SEG$_ELT$_crop$_region_output> {
    nameInComfy: "ImpactFrom_SEG_ELT_crop_region"
}
export interface ImpactFrom$_SEG$_ELT$_crop$_region_output {
    left: ComfyNodeOutput<'INT', 0>,
    top: ComfyNodeOutput<'INT', 1>,
    right: ComfyNodeOutput<'INT', 2>,
    bottom: ComfyNodeOutput<'INT', 3>,
}
export interface ImpactFrom$_SEG$_ELT$_crop$_region_input {
    crop_region: _SEG_ELT_crop_region
}

// ImpactCount_Elts_in_SEGS [ImpactPack_Util]
export interface ImpactCount$_Elts$_in$_SEGS extends HasSingle_INT, ComfyNode<ImpactCount$_Elts$_in$_SEGS_input, ImpactCount$_Elts$_in$_SEGS_output> {
    nameInComfy: "ImpactCount_Elts_in_SEGS"
}
export interface ImpactCount$_Elts$_in$_SEGS_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface ImpactCount$_Elts$_in$_SEGS_input {
    segs: _SEGS
}

// BboxDetectorCombined_v2 [ImpactPack_Detector]
export interface BboxDetectorCombined$_v2 extends HasSingle_MASK, ComfyNode<BboxDetectorCombined$_v2_input, BboxDetectorCombined$_v2_output> {
    nameInComfy: "BboxDetectorCombined_v2"
}
export interface BboxDetectorCombined$_v2_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface BboxDetectorCombined$_v2_input {
    bbox_detector: _BBOX_DETECTOR
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
    /** default=4 min=512 max=512 step=1 */
    dilation?: _INT
}

// SegmDetectorCombined_v2 [ImpactPack_Detector]
export interface SegmDetectorCombined$_v2 extends HasSingle_MASK, ComfyNode<SegmDetectorCombined$_v2_input, SegmDetectorCombined$_v2_output> {
    nameInComfy: "SegmDetectorCombined_v2"
}
export interface SegmDetectorCombined$_v2_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface SegmDetectorCombined$_v2_input {
    segm_detector: _SEGM_DETECTOR
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
    /** default=0 min=512 max=512 step=1 */
    dilation?: _INT
}

// SegsToCombinedMask [ImpactPack_Operation]
export interface SegsToCombinedMask extends HasSingle_MASK, ComfyNode<SegsToCombinedMask_input, SegsToCombinedMask_output> {
    nameInComfy: "SegsToCombinedMask"
}
export interface SegsToCombinedMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface SegsToCombinedMask_input {
    segs: _SEGS
}

// KSamplerProvider [ImpactPack_Sampler]
export interface KSamplerProvider extends HasSingle_KSAMPLER, ComfyNode<KSamplerProvider_input, KSamplerProvider_output> {
    nameInComfy: "KSamplerProvider"
}
export interface KSamplerProvider_output {
    KSAMPLER: ComfyNodeOutput<'KSAMPLER', 0>,
}
export interface KSamplerProvider_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    /** */
    sampler_name: Enum_KSampler_sampler_name
    /** */
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** */
    basic_pipe: _BASIC_PIPE
    /** */
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// TwoSamplersForMask [ImpactPack_Sampler]
export interface TwoSamplersForMask extends HasSingle_LATENT, ComfyNode<TwoSamplersForMask_input, TwoSamplersForMask_output> {
    nameInComfy: "TwoSamplersForMask"
}
export interface TwoSamplersForMask_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface TwoSamplersForMask_input {
    /** */
    latent_image: _LATENT
    /** */
    base_sampler: _KSAMPLER
    /** */
    mask_sampler: _KSAMPLER
    /** */
    mask: _MASK
}

// TiledKSamplerProvider [ImpactPack_Sampler]
export interface TiledKSamplerProvider extends HasSingle_KSAMPLER, ComfyNode<TiledKSamplerProvider_input, TiledKSamplerProvider_output> {
    nameInComfy: "TiledKSamplerProvider"
}
export interface TiledKSamplerProvider_output {
    KSAMPLER: ComfyNodeOutput<'KSAMPLER', 0>,
}
export interface TiledKSamplerProvider_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    /** */
    sampler_name: Enum_KSampler_sampler_name
    /** */
    scheduler: Enum_KSampler_scheduler
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    tile_width?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    tile_height?: _INT
    /** */
    tiling_strategy: Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy
    /** */
    basic_pipe: _BASIC_PIPE
}

// KSamplerAdvancedProvider [ImpactPack_Sampler]
export interface KSamplerAdvancedProvider extends HasSingle_KSAMPLER_ADVANCED, ComfyNode<KSamplerAdvancedProvider_input, KSamplerAdvancedProvider_output> {
    nameInComfy: "KSamplerAdvancedProvider"
}
export interface KSamplerAdvancedProvider_output {
    KSAMPLER_ADVANCED: ComfyNodeOutput<'KSAMPLER_ADVANCED', 0>,
}
export interface KSamplerAdvancedProvider_input {
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    /** */
    sampler_name: Enum_KSampler_sampler_name
    /** */
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=1 min=10 max=10 step=0.01 */
    sigma_factor?: _FLOAT
    /** */
    basic_pipe: _BASIC_PIPE
    /** */
    sampler_opt?: _SAMPLER
    /** */
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// TwoAdvancedSamplersForMask [ImpactPack_Sampler]
export interface TwoAdvancedSamplersForMask extends HasSingle_LATENT, ComfyNode<TwoAdvancedSamplersForMask_input, TwoAdvancedSamplersForMask_output> {
    nameInComfy: "TwoAdvancedSamplersForMask"
}
export interface TwoAdvancedSamplersForMask_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface TwoAdvancedSamplersForMask_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** */
    samples: _LATENT
    /** */
    base_sampler: _KSAMPLER_ADVANCED
    /** */
    mask_sampler: _KSAMPLER_ADVANCED
    /** */
    mask: _MASK
    /** default=10 min=10000 max=10000 */
    overlap_factor?: _INT
}

// ImpactNegativeConditioningPlaceholder [ImpactPack_sampling]
export interface ImpactNegativeConditioningPlaceholder extends HasSingle_CONDITIONING, ComfyNode<ImpactNegativeConditioningPlaceholder_input, ImpactNegativeConditioningPlaceholder_output> {
    nameInComfy: "ImpactNegativeConditioningPlaceholder"
}
export interface ImpactNegativeConditioningPlaceholder_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ImpactNegativeConditioningPlaceholder_input {
}

// PreviewBridge [ImpactPack_Util]
export interface PreviewBridge extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<PreviewBridge_input, PreviewBridge_output> {
    nameInComfy: "PreviewBridge"
}
export interface PreviewBridge_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface PreviewBridge_input {
    images: _IMAGE
    /** default="" */
    image?: _STRING
    /** default=false */
    block?: _BOOLEAN
    /** */
    restore_mask?: Enum_PreviewBridge_restore_mask
}

// PreviewBridgeLatent [ImpactPack_Util]
export interface PreviewBridgeLatent extends HasSingle_LATENT, HasSingle_MASK, ComfyNode<PreviewBridgeLatent_input, PreviewBridgeLatent_output> {
    nameInComfy: "PreviewBridgeLatent"
}
export interface PreviewBridgeLatent_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface PreviewBridgeLatent_input {
    latent: _LATENT
    /** default="" */
    image?: _STRING
    preview_method: Enum_PreviewBridgeLatent_preview_method
    vae_opt?: _VAE
    /** default=false */
    block?: _BOOLEAN
    /** */
    restore_mask?: Enum_PreviewBridge_restore_mask
}

// ImageSender [ImpactPack_Util]
export interface ImageSender extends ComfyNode<ImageSender_input, ImageSender_output> {
    nameInComfy: "ImageSender"
}
export interface ImageSender_output {
}
export interface ImageSender_input {
    images: _IMAGE
    /** default="ImgSender" */
    filename_prefix?: _STRING
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    link_id?: _INT
}

// ImageReceiver [ImpactPack_Util]
export interface ImageReceiver extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ImageReceiver_input, ImageReceiver_output> {
    nameInComfy: "ImageReceiver"
}
export interface ImageReceiver_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface ImageReceiver_input {
    image: Enum_LoadImage_image
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    link_id?: _INT
    /** default=false */
    save_to_workflow?: _BOOLEAN
    /** */
    image_data: _STRING
    /** default=false */
    trigger_always?: _BOOLEAN
}

// LatentSender [ImpactPack_Util]
export interface LatentSender extends ComfyNode<LatentSender_input, LatentSender_output> {
    nameInComfy: "LatentSender"
}
export interface LatentSender_output {
}
export interface LatentSender_input {
    samples: _LATENT
    /** default="latents/LatentSender" */
    filename_prefix?: _STRING
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    link_id?: _INT
    preview_method: Enum_LatentSender_preview_method
}

// LatentReceiver [ImpactPack_Util]
export interface LatentReceiver extends HasSingle_LATENT, ComfyNode<LatentReceiver_input, LatentReceiver_output> {
    nameInComfy: "LatentReceiver"
}
export interface LatentReceiver_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentReceiver_input {
    latent: Enum_LatentReceiver_latent
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    link_id?: _INT
    /** default=false */
    trigger_always?: _BOOLEAN
}

// ImageMaskSwitch [ImpactPack_Util]
export interface ImageMaskSwitch extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ImageMaskSwitch_input, ImageMaskSwitch_output> {
    nameInComfy: "ImageMaskSwitch"
}
export interface ImageMaskSwitch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface ImageMaskSwitch_input {
    /** default=1 min=4 max=4 step=1 */
    select?: _INT
    images1: _IMAGE
    mask1_opt?: _MASK
    images2_opt?: _IMAGE
    mask2_opt?: _MASK
    images3_opt?: _IMAGE
    mask3_opt?: _MASK
    images4_opt?: _IMAGE
    mask4_opt?: _MASK
}

// LatentSwitch [ImpactPack_Util]
export interface LatentSwitch extends HasSingle_$Star, HasSingle_STRING, HasSingle_INT, ComfyNode<LatentSwitch_input, LatentSwitch_output> {
    nameInComfy: "LatentSwitch"
}
export interface LatentSwitch_output {
    selected_value: ComfyNodeOutput<'$Star', 0>,
    selected_label: ComfyNodeOutput<'STRING', 1>,
    selected_index: ComfyNodeOutput<'INT', 2>,
}
export interface LatentSwitch_input {
    /** default=1 min=999999 max=999999 step=1 */
    select?: _INT
    /** default=false */
    sel_mode?: _BOOLEAN
    /** */
    input1?: _$Star
}

// SEGSSwitch [ImpactPack_Util]
export interface SEGSSwitch extends HasSingle_$Star, HasSingle_STRING, HasSingle_INT, ComfyNode<SEGSSwitch_input, SEGSSwitch_output> {
    nameInComfy: "SEGSSwitch"
}
export interface SEGSSwitch_output {
    selected_value: ComfyNodeOutput<'$Star', 0>,
    selected_label: ComfyNodeOutput<'STRING', 1>,
    selected_index: ComfyNodeOutput<'INT', 2>,
}
export interface SEGSSwitch_input {
    /** default=1 min=999999 max=999999 step=1 */
    select?: _INT
    /** default=false */
    sel_mode?: _BOOLEAN
    /** */
    input1?: _$Star
}

// ImpactSwitch [ImpactPack_Util]
export interface ImpactSwitch extends HasSingle_$Star, HasSingle_STRING, HasSingle_INT, ComfyNode<ImpactSwitch_input, ImpactSwitch_output> {
    nameInComfy: "ImpactSwitch"
}
export interface ImpactSwitch_output {
    selected_value: ComfyNodeOutput<'$Star', 0>,
    selected_label: ComfyNodeOutput<'STRING', 1>,
    selected_index: ComfyNodeOutput<'INT', 2>,
}
export interface ImpactSwitch_input {
    /** default=1 min=999999 max=999999 step=1 */
    select?: _INT
    /** default=false */
    sel_mode?: _BOOLEAN
    /** */
    input1?: _$Star
}

// ImpactInversedSwitch [ImpactPack_Util]
export interface ImpactInversedSwitch extends HasSingle_$Star, ComfyNode<ImpactInversedSwitch_input, ImpactInversedSwitch_output> {
    nameInComfy: "ImpactInversedSwitch"
}
export interface ImpactInversedSwitch_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactInversedSwitch_input {
    /** default=1 min=999999 max=999999 step=1 */
    select?: _INT
    /** */
    input: _$Star
    /** default=false */
    sel_mode?: _BOOLEAN
}

// ImpactWildcardProcessor [ImpactPack_Prompt]
export interface ImpactWildcardProcessor extends HasSingle_STRING, ComfyNode<ImpactWildcardProcessor_input, ImpactWildcardProcessor_output> {
    nameInComfy: "ImpactWildcardProcessor"
}
export interface ImpactWildcardProcessor_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ImpactWildcardProcessor_input {
    /** */
    wildcard_text: _STRING
    /** */
    populated_text: _STRING
    /** default=true */
    mode?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
}

// ImpactWildcardEncode [ImpactPack_Prompt]
export interface ImpactWildcardEncode extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_CONDITIONING, HasSingle_STRING, ComfyNode<ImpactWildcardEncode_input, ImpactWildcardEncode_output> {
    nameInComfy: "ImpactWildcardEncode"
}
export interface ImpactWildcardEncode_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    clip: ComfyNodeOutput<'CLIP', 1>,
    conditioning: ComfyNodeOutput<'CONDITIONING', 2>,
    populated_text: ComfyNodeOutput<'STRING', 3>,
}
export interface ImpactWildcardEncode_input {
    model: _MODEL
    clip: _CLIP
    /** */
    wildcard_text: _STRING
    /** */
    populated_text: _STRING
    /** default=true */
    mode?: _BOOLEAN
    "Select to add LoRA": Enum_ToDetailerPipe_Select$_to$_add$_LoRA
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// SEGSUpscaler [ImpactPack_Upscale]
export interface SEGSUpscaler extends HasSingle_IMAGE, ComfyNode<SEGSUpscaler_input, SEGSUpscaler_output> {
    nameInComfy: "SEGSUpscaler"
}
export interface SEGSUpscaler_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SEGSUpscaler_input {
    image: _IMAGE
    segs: _SEGS
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    /** default=2 min=100 max=100 step=0.01 */
    rescale_factor?: _FLOAT
    resampling_method: Enum_SEGSUpscaler_resampling_method
    supersample: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=8 min=1024 max=1024 step=8 */
    rounding_modulus?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    upscale_model_opt?: _UPSCALE_MODEL
    upscaler_hook_opt?: _UPSCALER_HOOK
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// SEGSUpscalerPipe [ImpactPack_Upscale]
export interface SEGSUpscalerPipe extends HasSingle_IMAGE, ComfyNode<SEGSUpscalerPipe_input, SEGSUpscalerPipe_output> {
    nameInComfy: "SEGSUpscalerPipe"
}
export interface SEGSUpscalerPipe_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SEGSUpscalerPipe_input {
    image: _IMAGE
    segs: _SEGS
    basic_pipe: _BASIC_PIPE
    /** default=2 min=100 max=100 step=0.01 */
    rescale_factor?: _FLOAT
    resampling_method: Enum_SEGSUpscaler_resampling_method
    supersample: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=8 min=1024 max=1024 step=8 */
    rounding_modulus?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    upscale_model_opt?: _UPSCALE_MODEL
    upscaler_hook_opt?: _UPSCALER_HOOK
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// SEGSDetailer [ImpactPack_Detailer]
export interface SEGSDetailer extends HasSingle_SEGS, HasSingle_IMAGE, ComfyNode<SEGSDetailer_input, SEGSDetailer_output> {
    nameInComfy: "SEGSDetailer"
}
export interface SEGSDetailer_output {
    segs: ComfyNodeOutput<'SEGS', 0>,
    cnet_images: ComfyNodeOutput<'IMAGE', 1>,
}
export interface SEGSDetailer_input {
    image: _IMAGE
    segs: _SEGS
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=768 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=true */
    noise_mask?: _BOOLEAN
    /** default=true */
    force_inpaint?: _BOOLEAN
    basic_pipe: _BASIC_PIPE
    /** default=0.2 min=1 max=1 */
    refiner_ratio?: _FLOAT
    /** default=1 min=100 max=100 */
    batch_size?: _INT
    /** default=1 min=10 max=10 step=1 */
    cycle?: _INT
    refiner_basic_pipe_opt?: _BASIC_PIPE
    /** default=false */
    inpaint_model?: _BOOLEAN
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// SEGSPaste [ImpactPack_Detailer]
export interface SEGSPaste extends HasSingle_IMAGE, ComfyNode<SEGSPaste_input, SEGSPaste_output> {
    nameInComfy: "SEGSPaste"
}
export interface SEGSPaste_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SEGSPaste_input {
    image: _IMAGE
    segs: _SEGS
    /** default=5 min=100 max=100 step=1 */
    feather?: _INT
    /** default=255 min=255 max=255 step=1 */
    alpha?: _INT
    ref_image_opt?: _IMAGE
}

// SEGSPreview [ImpactPack_Util]
export interface SEGSPreview extends HasSingle_IMAGE, ComfyNode<SEGSPreview_input, SEGSPreview_output> {
    nameInComfy: "SEGSPreview"
}
export interface SEGSPreview_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SEGSPreview_input {
    segs: _SEGS
    /** default=true */
    alpha_mode?: _BOOLEAN
    /** default=0.2 min=1 max=1 step=0.01 */
    min_alpha?: _FLOAT
    fallback_image_opt?: _IMAGE
}

// SEGSPreviewCNet [ImpactPack_Util]
export interface SEGSPreviewCNet extends HasSingle_IMAGE, ComfyNode<SEGSPreviewCNet_input, SEGSPreviewCNet_output> {
    nameInComfy: "SEGSPreviewCNet"
}
export interface SEGSPreviewCNet_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SEGSPreviewCNet_input {
    segs: _SEGS
}

// SEGSToImageList [ImpactPack_Util]
export interface SEGSToImageList extends HasSingle_IMAGE, ComfyNode<SEGSToImageList_input, SEGSToImageList_output> {
    nameInComfy: "SEGSToImageList"
}
export interface SEGSToImageList_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SEGSToImageList_input {
    segs: _SEGS
    fallback_image_opt?: _IMAGE
}

// ImpactSEGSToMaskList [ImpactPack_Util]
export interface ImpactSEGSToMaskList extends HasSingle_MASK, ComfyNode<ImpactSEGSToMaskList_input, ImpactSEGSToMaskList_output> {
    nameInComfy: "ImpactSEGSToMaskList"
}
export interface ImpactSEGSToMaskList_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ImpactSEGSToMaskList_input {
    segs: _SEGS
}

// ImpactSEGSToMaskBatch [ImpactPack_Util]
export interface ImpactSEGSToMaskBatch extends HasSingle_MASK, ComfyNode<ImpactSEGSToMaskBatch_input, ImpactSEGSToMaskBatch_output> {
    nameInComfy: "ImpactSEGSToMaskBatch"
}
export interface ImpactSEGSToMaskBatch_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ImpactSEGSToMaskBatch_input {
    segs: _SEGS
}

// ImpactSEGSConcat [ImpactPack_Util]
export interface ImpactSEGSConcat extends HasSingle_SEGS, ComfyNode<ImpactSEGSConcat_input, ImpactSEGSConcat_output> {
    nameInComfy: "ImpactSEGSConcat"
}
export interface ImpactSEGSConcat_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactSEGSConcat_input {
    segs1: _SEGS
}

// ImpactSEGSPicker [ImpactPack_Util]
export interface ImpactSEGSPicker extends HasSingle_SEGS, ComfyNode<ImpactSEGSPicker_input, ImpactSEGSPicker_output> {
    nameInComfy: "ImpactSEGSPicker"
}
export interface ImpactSEGSPicker_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactSEGSPicker_input {
    /** */
    picks: _STRING
    segs: _SEGS
    fallback_image_opt?: _IMAGE
}

// ImpactMakeTileSEGS [ImpactPack___for_testing]
export interface ImpactMakeTileSEGS extends HasSingle_SEGS, ComfyNode<ImpactMakeTileSEGS_input, ImpactMakeTileSEGS_output> {
    nameInComfy: "ImpactMakeTileSEGS"
}
export interface ImpactMakeTileSEGS_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactMakeTileSEGS_input {
    images: _IMAGE
    /** default=512 min=4096 max=4096 step=8 */
    bbox_size?: _INT
    /** default=3 min=10 max=10 step=0.01 */
    crop_factor?: _FLOAT
    /** default=5 min=512 max=512 step=1 */
    min_overlap?: _INT
    /** default=20 min=255 max=255 step=1 */
    filter_segs_dilation?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    mask_irregularity?: _FLOAT
    irregular_mask_mode: Enum_ImpactMakeTileSEGS_irregular_mask_mode
    filter_in_segs_opt?: _SEGS
    filter_out_segs_opt?: _SEGS
}

// ImpactSEGSMerge [ImpactPack_Util]
export interface ImpactSEGSMerge extends HasSingle_SEGS, ComfyNode<ImpactSEGSMerge_input, ImpactSEGSMerge_output> {
    nameInComfy: "ImpactSEGSMerge"
}
export interface ImpactSEGSMerge_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactSEGSMerge_input {
    segs: _SEGS
}

// SEGSDetailerForAnimateDiff [ImpactPack_Detailer]
export interface SEGSDetailerForAnimateDiff extends HasSingle_SEGS, HasSingle_IMAGE, ComfyNode<SEGSDetailerForAnimateDiff_input, SEGSDetailerForAnimateDiff_output> {
    nameInComfy: "SEGSDetailerForAnimateDiff"
}
export interface SEGSDetailerForAnimateDiff_output {
    segs: ComfyNodeOutput<'SEGS', 0>,
    cnet_images: ComfyNodeOutput<'IMAGE', 1>,
}
export interface SEGSDetailerForAnimateDiff_input {
    image_frames: _IMAGE
    segs: _SEGS
    /** default=512 min=16384 max=16384 step=8 */
    guide_size?: _FLOAT
    /** default=true */
    guide_size_for?: _BOOLEAN
    /** default=768 min=16384 max=16384 step=8 */
    max_size?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    basic_pipe: _BASIC_PIPE
    /** default=0.2 min=1 max=1 */
    refiner_ratio?: _FLOAT
    refiner_basic_pipe_opt?: _BASIC_PIPE
    /** default=20 min=100 max=100 step=1 */
    noise_mask_feather?: _INT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// ImpactKSamplerBasicPipe [ImpactPack_sampling]
export interface ImpactKSamplerBasicPipe extends HasSingle_BASIC_PIPE, HasSingle_LATENT, HasSingle_VAE, ComfyNode<ImpactKSamplerBasicPipe_input, ImpactKSamplerBasicPipe_output> {
    nameInComfy: "ImpactKSamplerBasicPipe"
}
export interface ImpactKSamplerBasicPipe_output {
    BASIC_PIPE: ComfyNodeOutput<'BASIC_PIPE', 0>,
    LATENT: ComfyNodeOutput<'LATENT', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
}
export interface ImpactKSamplerBasicPipe_input {
    /** */
    basic_pipe: _BASIC_PIPE
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    /** */
    sampler_name: Enum_KSampler_sampler_name
    /** */
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** */
    latent_image: _LATENT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** */
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// ImpactKSamplerAdvancedBasicPipe [ImpactPack_sampling]
export interface ImpactKSamplerAdvancedBasicPipe extends HasSingle_BASIC_PIPE, HasSingle_LATENT, HasSingle_VAE, ComfyNode<ImpactKSamplerAdvancedBasicPipe_input, ImpactKSamplerAdvancedBasicPipe_output> {
    nameInComfy: "ImpactKSamplerAdvancedBasicPipe"
}
export interface ImpactKSamplerAdvancedBasicPipe_output {
    BASIC_PIPE: ComfyNodeOutput<'BASIC_PIPE', 0>,
    LATENT: ComfyNodeOutput<'LATENT', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
}
export interface ImpactKSamplerAdvancedBasicPipe_input {
    /** */
    basic_pipe: _BASIC_PIPE
    /** default=true */
    add_noise?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    /** */
    sampler_name: Enum_KSampler_sampler_name
    /** */
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** */
    latent_image: _LATENT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    /** default=false */
    return_with_leftover_noise?: _BOOLEAN
    /** */
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// ReencodeLatent [ImpactPack_Util]
export interface ReencodeLatent extends HasSingle_LATENT, ComfyNode<ReencodeLatent_input, ReencodeLatent_output> {
    nameInComfy: "ReencodeLatent"
}
export interface ReencodeLatent_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface ReencodeLatent_input {
    samples: _LATENT
    tile_mode: Enum_ReencodeLatent_tile_mode
    input_vae: _VAE
    output_vae: _VAE
    /** default=512 min=4096 max=4096 step=64 */
    tile_size?: _INT
}

// ReencodeLatentPipe [ImpactPack_Util]
export interface ReencodeLatentPipe extends HasSingle_LATENT, ComfyNode<ReencodeLatentPipe_input, ReencodeLatentPipe_output> {
    nameInComfy: "ReencodeLatentPipe"
}
export interface ReencodeLatentPipe_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface ReencodeLatentPipe_input {
    samples: _LATENT
    tile_mode: Enum_ReencodeLatent_tile_mode
    input_basic_pipe: _BASIC_PIPE
    output_basic_pipe: _BASIC_PIPE
}

// ImpactImageBatchToImageList [ImpactPack_Util]
export interface ImpactImageBatchToImageList extends HasSingle_IMAGE, ComfyNode<ImpactImageBatchToImageList_input, ImpactImageBatchToImageList_output> {
    nameInComfy: "ImpactImageBatchToImageList"
}
export interface ImpactImageBatchToImageList_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImpactImageBatchToImageList_input {
    image: _IMAGE
}

// ImpactMakeImageList [ImpactPack_Util]
export interface ImpactMakeImageList extends HasSingle_IMAGE, ComfyNode<ImpactMakeImageList_input, ImpactMakeImageList_output> {
    nameInComfy: "ImpactMakeImageList"
}
export interface ImpactMakeImageList_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImpactMakeImageList_input {
    image1: _IMAGE
}

// ImpactMakeImageBatch [ImpactPack_Util]
export interface ImpactMakeImageBatch extends HasSingle_IMAGE, ComfyNode<ImpactMakeImageBatch_input, ImpactMakeImageBatch_output> {
    nameInComfy: "ImpactMakeImageBatch"
}
export interface ImpactMakeImageBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImpactMakeImageBatch_input {
    image1: _IMAGE
}

// ImpactMakeAnyList [ImpactPack_Util]
export interface ImpactMakeAnyList extends HasSingle_$Star, ComfyNode<ImpactMakeAnyList_input, ImpactMakeAnyList_output> {
    nameInComfy: "ImpactMakeAnyList"
}
export interface ImpactMakeAnyList_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactMakeAnyList_input {
    value1?: _$Star
}

// ImpactMakeMaskList [ImpactPack_Util]
export interface ImpactMakeMaskList extends HasSingle_MASK, ComfyNode<ImpactMakeMaskList_input, ImpactMakeMaskList_output> {
    nameInComfy: "ImpactMakeMaskList"
}
export interface ImpactMakeMaskList_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ImpactMakeMaskList_input {
    mask1: _MASK
}

// ImpactMakeMaskBatch [ImpactPack_Util]
export interface ImpactMakeMaskBatch extends HasSingle_MASK, ComfyNode<ImpactMakeMaskBatch_input, ImpactMakeMaskBatch_output> {
    nameInComfy: "ImpactMakeMaskBatch"
}
export interface ImpactMakeMaskBatch_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ImpactMakeMaskBatch_input {
    mask1: _MASK
}

// RegionalSampler [ImpactPack_Regional]
export interface RegionalSampler extends HasSingle_LATENT, ComfyNode<RegionalSampler_input, RegionalSampler_output> {
    nameInComfy: "RegionalSampler"
}
export interface RegionalSampler_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface RegionalSampler_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed_2nd?: _INT
    /** */
    seed_2nd_mode: Enum_RegionalSampler_seed_2nd_mode
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=2 min=10000 max=10000 */
    base_only_steps?: _INT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** */
    samples: _LATENT
    /** */
    base_sampler: _KSAMPLER_ADVANCED
    /** */
    regional_prompts: _REGIONAL_PROMPTS
    /** default=10 min=10000 max=10000 */
    overlap_factor?: _INT
    /** default=true */
    restore_latent?: _BOOLEAN
    /** default="ratio between" */
    additional_mode?: Enum_RegionalSampler_additional_mode
    /** */
    additional_sampler: Enum_RegionalSampler_additional_sampler
    /** default=0.3 min=1 max=1 step=0.01 */
    additional_sigma_ratio?: _FLOAT
}

// RegionalSamplerAdvanced [ImpactPack_Regional]
export interface RegionalSamplerAdvanced extends HasSingle_LATENT, ComfyNode<RegionalSamplerAdvanced_input, RegionalSamplerAdvanced_output> {
    nameInComfy: "RegionalSamplerAdvanced"
}
export interface RegionalSamplerAdvanced_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface RegionalSamplerAdvanced_input {
    /** default=true */
    add_noise?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    /** default=10 min=10000 max=10000 */
    overlap_factor?: _INT
    /** default=true */
    restore_latent?: _BOOLEAN
    /** default=false */
    return_with_leftover_noise?: _BOOLEAN
    /** */
    latent_image: _LATENT
    /** */
    base_sampler: _KSAMPLER_ADVANCED
    /** */
    regional_prompts: _REGIONAL_PROMPTS
    /** default="ratio between" */
    additional_mode?: Enum_RegionalSampler_additional_mode
    /** */
    additional_sampler: Enum_RegionalSampler_additional_sampler
    /** default=0.3 min=1 max=1 step=0.01 */
    additional_sigma_ratio?: _FLOAT
}

// CombineRegionalPrompts [ImpactPack_Regional]
export interface CombineRegionalPrompts extends HasSingle_REGIONAL_PROMPTS, ComfyNode<CombineRegionalPrompts_input, CombineRegionalPrompts_output> {
    nameInComfy: "CombineRegionalPrompts"
}
export interface CombineRegionalPrompts_output {
    REGIONAL_PROMPTS: ComfyNodeOutput<'REGIONAL_PROMPTS', 0>,
}
export interface CombineRegionalPrompts_input {
    /** */
    regional_prompts1: _REGIONAL_PROMPTS
}

// RegionalPrompt [ImpactPack_Regional]
export interface RegionalPrompt extends HasSingle_REGIONAL_PROMPTS, ComfyNode<RegionalPrompt_input, RegionalPrompt_output> {
    nameInComfy: "RegionalPrompt"
}
export interface RegionalPrompt_output {
    REGIONAL_PROMPTS: ComfyNodeOutput<'REGIONAL_PROMPTS', 0>,
}
export interface RegionalPrompt_input {
    /** */
    mask: _MASK
    /** */
    advanced_sampler: _KSAMPLER_ADVANCED
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    variation_strength?: _FLOAT
    /** */
    variation_method?: Enum_RegionalPrompt_variation_method
}

// ImpactCombineConditionings [ImpactPack_Util]
export interface ImpactCombineConditionings extends HasSingle_CONDITIONING, ComfyNode<ImpactCombineConditionings_input, ImpactCombineConditionings_output> {
    nameInComfy: "ImpactCombineConditionings"
}
export interface ImpactCombineConditionings_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ImpactCombineConditionings_input {
    /** */
    conditioning1: _CONDITIONING
}

// ImpactConcatConditionings [ImpactPack_Util]
export interface ImpactConcatConditionings extends HasSingle_CONDITIONING, ComfyNode<ImpactConcatConditionings_input, ImpactConcatConditionings_output> {
    nameInComfy: "ImpactConcatConditionings"
}
export interface ImpactConcatConditionings_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ImpactConcatConditionings_input {
    /** */
    conditioning1: _CONDITIONING
}

// ImpactSEGSLabelAssign [ImpactPack_Util]
export interface ImpactSEGSLabelAssign extends HasSingle_SEGS, ComfyNode<ImpactSEGSLabelAssign_input, ImpactSEGSLabelAssign_output> {
    nameInComfy: "ImpactSEGSLabelAssign"
}
export interface ImpactSEGSLabelAssign_output {
    SEGS: ComfyNodeOutput<'SEGS', 0>,
}
export interface ImpactSEGSLabelAssign_input {
    segs: _SEGS
    /** */
    labels: _STRING
}

// ImpactSEGSLabelFilter [ImpactPack_Util]
export interface ImpactSEGSLabelFilter extends ComfyNode<ImpactSEGSLabelFilter_input, ImpactSEGSLabelFilter_output> {
    nameInComfy: "ImpactSEGSLabelFilter"
}
export interface ImpactSEGSLabelFilter_output {
    filtered_SEGS: ComfyNodeOutput<'SEGS', 0>,
    remained_SEGS: ComfyNodeOutput<'SEGS', 1>,
}
export interface ImpactSEGSLabelFilter_input {
    segs: _SEGS
    preset: Enum_SEGSLabelFilterDetailerHookProvider_preset
    /** */
    labels: _STRING
}

// ImpactSEGSRangeFilter [ImpactPack_Util]
export interface ImpactSEGSRangeFilter extends ComfyNode<ImpactSEGSRangeFilter_input, ImpactSEGSRangeFilter_output> {
    nameInComfy: "ImpactSEGSRangeFilter"
}
export interface ImpactSEGSRangeFilter_output {
    filtered_SEGS: ComfyNodeOutput<'SEGS', 0>,
    remained_SEGS: ComfyNodeOutput<'SEGS', 1>,
}
export interface ImpactSEGSRangeFilter_input {
    segs: _SEGS
    target: Enum_ImpactSEGSRangeFilter_target
    /** default=true */
    mode?: _BOOLEAN
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    min_value?: _INT
    /** default=67108864 min=9223372036854776000 max=9223372036854776000 step=1 */
    max_value?: _INT
}

// ImpactSEGSOrderedFilter [ImpactPack_Util]
export interface ImpactSEGSOrderedFilter extends ComfyNode<ImpactSEGSOrderedFilter_input, ImpactSEGSOrderedFilter_output> {
    nameInComfy: "ImpactSEGSOrderedFilter"
}
export interface ImpactSEGSOrderedFilter_output {
    filtered_SEGS: ComfyNodeOutput<'SEGS', 0>,
    remained_SEGS: ComfyNodeOutput<'SEGS', 1>,
}
export interface ImpactSEGSOrderedFilter_input {
    segs: _SEGS
    target: Enum_ImpactSEGSOrderedFilter_target
    /** default=true */
    order?: _BOOLEAN
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    take_start?: _INT
    /** default=1 min=9223372036854776000 max=9223372036854776000 step=1 */
    take_count?: _INT
}

// ImpactCompare [ImpactPack_Logic]
export interface ImpactCompare extends HasSingle_BOOLEAN, ComfyNode<ImpactCompare_input, ImpactCompare_output> {
    nameInComfy: "ImpactCompare"
}
export interface ImpactCompare_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface ImpactCompare_input {
    cmp: Enum_ImpactCompare_cmp
    a: _$Star
    b: _$Star
}

// ImpactConditionalBranch [ImpactPack_Logic]
export interface ImpactConditionalBranch extends HasSingle_$Star, ComfyNode<ImpactConditionalBranch_input, ImpactConditionalBranch_output> {
    nameInComfy: "ImpactConditionalBranch"
}
export interface ImpactConditionalBranch_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactConditionalBranch_input {
    cond: _BOOLEAN
    /** */
    tt_value: _$Star
    /** */
    ff_value: _$Star
}

// ImpactConditionalBranchSelMode [ImpactPack_Logic]
export interface ImpactConditionalBranchSelMode extends HasSingle_$Star, ComfyNode<ImpactConditionalBranchSelMode_input, ImpactConditionalBranchSelMode_output> {
    nameInComfy: "ImpactConditionalBranchSelMode"
}
export interface ImpactConditionalBranchSelMode_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactConditionalBranchSelMode_input {
    cond: _BOOLEAN
    tt_value?: _$Star
    ff_value?: _$Star
}

// ImpactIfNone [ImpactPack_Logic]
export interface ImpactIfNone extends HasSingle_$Star, HasSingle_BOOLEAN, ComfyNode<ImpactIfNone_input, ImpactIfNone_output> {
    nameInComfy: "ImpactIfNone"
}
export interface ImpactIfNone_output {
    signal_opt: ComfyNodeOutput<'$Star', 0>,
    bool: ComfyNodeOutput<'BOOLEAN', 1>,
}
export interface ImpactIfNone_input {
    signal?: _$Star
    any_input?: _$Star
}

// ImpactConvertDataType [ImpactPack_Logic]
export interface ImpactConvertDataType extends HasSingle_STRING, HasSingle_FLOAT, HasSingle_INT, HasSingle_BOOLEAN, ComfyNode<ImpactConvertDataType_input, ImpactConvertDataType_output> {
    nameInComfy: "ImpactConvertDataType"
}
export interface ImpactConvertDataType_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 3>,
}
export interface ImpactConvertDataType_input {
    value: _$Star
}

// ImpactLogicalOperators [ImpactPack_Logic]
export interface ImpactLogicalOperators extends HasSingle_BOOLEAN, ComfyNode<ImpactLogicalOperators_input, ImpactLogicalOperators_output> {
    nameInComfy: "ImpactLogicalOperators"
}
export interface ImpactLogicalOperators_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface ImpactLogicalOperators_input {
    operator: Enum_ImpactLogicalOperators_operator
    /** */
    bool_a: _BOOLEAN
    /** */
    bool_b: _BOOLEAN
}

// ImpactInt [ImpactPack_Logic]
export interface ImpactInt extends HasSingle_INT, ComfyNode<ImpactInt_input, ImpactInt_output> {
    nameInComfy: "ImpactInt"
}
export interface ImpactInt_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface ImpactInt_input {
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    value?: _INT
}

// ImpactFloat [ImpactPack_Logic]
export interface ImpactFloat extends HasSingle_FLOAT, ComfyNode<ImpactFloat_input, ImpactFloat_output> {
    nameInComfy: "ImpactFloat"
}
export interface ImpactFloat_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface ImpactFloat_input {
    /** default=1 min=3.402823466e+38 max=3.402823466e+38 */
    value?: _FLOAT
}

// ImpactBoolean [ImpactPack_Logic]
export interface ImpactBoolean extends HasSingle_BOOLEAN, ComfyNode<ImpactBoolean_input, ImpactBoolean_output> {
    nameInComfy: "ImpactBoolean"
}
export interface ImpactBoolean_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface ImpactBoolean_input {
    /** default=false */
    value?: _BOOLEAN
}

// ImpactValueSender [ImpactPack_Logic]
export interface ImpactValueSender extends HasSingle_$Star, ComfyNode<ImpactValueSender_input, ImpactValueSender_output> {
    nameInComfy: "ImpactValueSender"
}
export interface ImpactValueSender_output {
    signal: ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactValueSender_input {
    value: _$Star
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    link_id?: _INT
    signal_opt?: _$Star
}

// ImpactValueReceiver [ImpactPack_Logic]
export interface ImpactValueReceiver extends HasSingle_$Star, ComfyNode<ImpactValueReceiver_input, ImpactValueReceiver_output> {
    nameInComfy: "ImpactValueReceiver"
}
export interface ImpactValueReceiver_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactValueReceiver_input {
    typ: Enum_ImpactValueReceiver_typ
    /** default="" */
    value?: _STRING
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    link_id?: _INT
}

// ImpactImageInfo [ImpactPack_Logic__for_test]
export interface ImpactImageInfo extends ComfyNode<ImpactImageInfo_input, ImpactImageInfo_output> {
    nameInComfy: "ImpactImageInfo"
}
export interface ImpactImageInfo_output {
    batch: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    width: ComfyNodeOutput<'INT', 2>,
    channel: ComfyNodeOutput<'INT', 3>,
}
export interface ImpactImageInfo_input {
    value: _IMAGE
}

// ImpactLatentInfo [ImpactPack_Logic__for_test]
export interface ImpactLatentInfo extends ComfyNode<ImpactLatentInfo_input, ImpactLatentInfo_output> {
    nameInComfy: "ImpactLatentInfo"
}
export interface ImpactLatentInfo_output {
    batch: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    width: ComfyNodeOutput<'INT', 2>,
    channel: ComfyNodeOutput<'INT', 3>,
}
export interface ImpactLatentInfo_input {
    value: _LATENT
}

// ImpactMinMax [ImpactPack_Logic__for_test]
export interface ImpactMinMax extends HasSingle_INT, ComfyNode<ImpactMinMax_input, ImpactMinMax_output> {
    nameInComfy: "ImpactMinMax"
}
export interface ImpactMinMax_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface ImpactMinMax_input {
    /** default=true */
    mode?: _BOOLEAN
    a: _$Star
    b: _$Star
}

// ImpactNeg [ImpactPack_Logic]
export interface ImpactNeg extends HasSingle_BOOLEAN, ComfyNode<ImpactNeg_input, ImpactNeg_output> {
    nameInComfy: "ImpactNeg"
}
export interface ImpactNeg_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface ImpactNeg_input {
    /** */
    value: _BOOLEAN
}

// ImpactConditionalStopIteration [ImpactPack_Logic]
export interface ImpactConditionalStopIteration extends ComfyNode<ImpactConditionalStopIteration_input, ImpactConditionalStopIteration_output> {
    nameInComfy: "ImpactConditionalStopIteration"
}
export interface ImpactConditionalStopIteration_output {
}
export interface ImpactConditionalStopIteration_input {
    /** */
    cond: _BOOLEAN
}

// ImpactStringSelector [ImpactPack_Util]
export interface ImpactStringSelector extends HasSingle_STRING, ComfyNode<ImpactStringSelector_input, ImpactStringSelector_output> {
    nameInComfy: "ImpactStringSelector"
}
export interface ImpactStringSelector_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ImpactStringSelector_input {
    /** */
    strings: _STRING
    /** default=false */
    multiline?: _BOOLEAN
    /** default=0 min=9223372036854776000 max=9223372036854776000 step=1 */
    select?: _INT
}

// StringListToString [ImpactPack_Util]
export interface StringListToString extends HasSingle_STRING, ComfyNode<StringListToString_input, StringListToString_output> {
    nameInComfy: "StringListToString"
}
export interface StringListToString_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface StringListToString_input {
    /** default="\\n" */
    join_with?: _STRING
    /** */
    string_list: _STRING
}

// WildcardPromptFromString [ImpactPack_Util]
export interface WildcardPromptFromString extends ComfyNode<WildcardPromptFromString_input, WildcardPromptFromString_output> {
    nameInComfy: "WildcardPromptFromString"
}
export interface WildcardPromptFromString_output {
    wildcard: ComfyNodeOutput<'STRING', 0>,
    segs_labels: ComfyNodeOutput<'STRING', 1>,
}
export interface WildcardPromptFromString_input {
    /** */
    string: _STRING
    /** default="\\n" */
    delimiter?: _STRING
    /** */
    prefix_all: _STRING
    /** */
    postfix_all: _STRING
    /** */
    restrict_to_tags: _STRING
    /** */
    exclude_tags: _STRING
}

// ImpactExecutionOrderController [ImpactPack_Util]
export interface ImpactExecutionOrderController extends ComfyNode<ImpactExecutionOrderController_input, ImpactExecutionOrderController_output> {
    nameInComfy: "ImpactExecutionOrderController"
}
export interface ImpactExecutionOrderController_output {
    signal: ComfyNodeOutput<'$Star', 0>,
    value: ComfyNodeOutput<'$Star', 1>,
}
export interface ImpactExecutionOrderController_input {
    signal: _$Star
    value: _$Star
}

// RemoveNoiseMask [ImpactPack_Util]
export interface RemoveNoiseMask extends HasSingle_LATENT, ComfyNode<RemoveNoiseMask_input, RemoveNoiseMask_output> {
    nameInComfy: "RemoveNoiseMask"
}
export interface RemoveNoiseMask_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface RemoveNoiseMask_input {
    samples: _LATENT
}

// ImpactLogger [ImpactPack_Debug]
export interface ImpactLogger extends ComfyNode<ImpactLogger_input, ImpactLogger_output> {
    nameInComfy: "ImpactLogger"
}
export interface ImpactLogger_output {
}
export interface ImpactLogger_input {
    data: _$Star
    /** */
    text: _STRING
}

// ImpactDummyInput [ImpactPack_Debug]
export interface ImpactDummyInput extends HasSingle_$Star, ComfyNode<ImpactDummyInput_input, ImpactDummyInput_output> {
    nameInComfy: "ImpactDummyInput"
}
export interface ImpactDummyInput_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactDummyInput_input {
}

// ImpactQueueTrigger [ImpactPack_Logic__for_test]
export interface ImpactQueueTrigger extends HasSingle_$Star, ComfyNode<ImpactQueueTrigger_input, ImpactQueueTrigger_output> {
    nameInComfy: "ImpactQueueTrigger"
}
export interface ImpactQueueTrigger_output {
    signal_opt: ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactQueueTrigger_input {
    signal: _$Star
    /** default=true */
    mode?: _BOOLEAN
}

// ImpactQueueTriggerCountdown [ImpactPack_Logic__for_test]
export interface ImpactQueueTriggerCountdown extends HasSingle_$Star, ComfyNode<ImpactQueueTriggerCountdown_input, ImpactQueueTriggerCountdown_output> {
    nameInComfy: "ImpactQueueTriggerCountdown"
}
export interface ImpactQueueTriggerCountdown_output {
    signal_opt: ComfyNodeOutput<'$Star', 0>,
    count: ComfyNodeOutput<'INT', 1>,
    total: ComfyNodeOutput<'INT', 2>,
}
export interface ImpactQueueTriggerCountdown_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    count?: _INT
    /** default=10 min=18446744073709552000 max=18446744073709552000 */
    total?: _INT
    /** default=true */
    mode?: _BOOLEAN
    signal?: _$Star
}

// ImpactSetWidgetValue [ImpactPack_Logic__for_test]
export interface ImpactSetWidgetValue extends HasSingle_$Star, ComfyNode<ImpactSetWidgetValue_input, ImpactSetWidgetValue_output> {
    nameInComfy: "ImpactSetWidgetValue"
}
export interface ImpactSetWidgetValue_output {
    signal_opt: ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactSetWidgetValue_input {
    signal: _$Star
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    node_id?: _INT
    /** */
    widget_name: _STRING
    /** */
    boolean_value?: _BOOLEAN
    /** */
    int_value?: _INT
    /** */
    float_value?: _FLOAT
    /** */
    string_value?: _STRING
}

// ImpactNodeSetMuteState [ImpactPack_Logic__for_test]
export interface ImpactNodeSetMuteState extends HasSingle_$Star, ComfyNode<ImpactNodeSetMuteState_input, ImpactNodeSetMuteState_output> {
    nameInComfy: "ImpactNodeSetMuteState"
}
export interface ImpactNodeSetMuteState_output {
    signal_opt: ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactNodeSetMuteState_input {
    signal: _$Star
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    node_id?: _INT
    /** default=true */
    set_state?: _BOOLEAN
}

// ImpactControlBridge [ImpactPack_Logic]
export interface ImpactControlBridge extends HasSingle_$Star, ComfyNode<ImpactControlBridge_input, ImpactControlBridge_output> {
    nameInComfy: "ImpactControlBridge"
}
export interface ImpactControlBridge_output {
    value: ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactControlBridge_input {
    value: _$Star
    /** default=true */
    mode?: _BOOLEAN
    behavior: Enum_ImpactControlBridge_behavior
}

// ImpactIsNotEmptySEGS [ImpactPack_Logic]
export interface ImpactIsNotEmptySEGS extends HasSingle_BOOLEAN, ComfyNode<ImpactIsNotEmptySEGS_input, ImpactIsNotEmptySEGS_output> {
    nameInComfy: "ImpactIsNotEmptySEGS"
}
export interface ImpactIsNotEmptySEGS_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface ImpactIsNotEmptySEGS_input {
    segs: _SEGS
}

// ImpactSleep [ImpactPack_Logic__for_test]
export interface ImpactSleep extends HasSingle_$Star, ComfyNode<ImpactSleep_input, ImpactSleep_output> {
    nameInComfy: "ImpactSleep"
}
export interface ImpactSleep_output {
    signal_opt: ComfyNodeOutput<'$Star', 0>,
}
export interface ImpactSleep_input {
    signal: _$Star
    /** default=0.5 min=3600 max=3600 */
    seconds?: _FLOAT
}

// ImpactRemoteBoolean [ImpactPack_Logic__for_test]
export interface ImpactRemoteBoolean extends ComfyNode<ImpactRemoteBoolean_input, ImpactRemoteBoolean_output> {
    nameInComfy: "ImpactRemoteBoolean"
}
export interface ImpactRemoteBoolean_output {
}
export interface ImpactRemoteBoolean_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    node_id?: _INT
    /** */
    widget_name: _STRING
    /** default=true */
    value?: _BOOLEAN
}

// ImpactRemoteInt [ImpactPack_Logic__for_test]
export interface ImpactRemoteInt extends ComfyNode<ImpactRemoteInt_input, ImpactRemoteInt_output> {
    nameInComfy: "ImpactRemoteInt"
}
export interface ImpactRemoteInt_output {
}
export interface ImpactRemoteInt_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    node_id?: _INT
    /** */
    widget_name: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    value?: _INT
}

// ImpactHFTransformersClassifierProvider [ImpactPack_HuggingFace]
export interface ImpactHFTransformersClassifierProvider extends HasSingle_TRANSFORMERS_CLASSIFIER, ComfyNode<ImpactHFTransformersClassifierProvider_input, ImpactHFTransformersClassifierProvider_output> {
    nameInComfy: "ImpactHFTransformersClassifierProvider"
}
export interface ImpactHFTransformersClassifierProvider_output {
    TRANSFORMERS_CLASSIFIER: ComfyNodeOutput<'TRANSFORMERS_CLASSIFIER', 0>,
}
export interface ImpactHFTransformersClassifierProvider_input {
    preset_repo_id: Enum_ImpactHFTransformersClassifierProvider_preset_repo_id
    /** */
    manual_repo_id: _STRING
    device_mode: Enum_BLIPCaption_device_mode
}

// ImpactSEGSClassify [ImpactPack_HuggingFace]
export interface ImpactSEGSClassify extends HasSingle_STRING, ComfyNode<ImpactSEGSClassify_input, ImpactSEGSClassify_output> {
    nameInComfy: "ImpactSEGSClassify"
}
export interface ImpactSEGSClassify_output {
    filtered_SEGS: ComfyNodeOutput<'SEGS', 0>,
    remained_SEGS: ComfyNodeOutput<'SEGS', 1>,
    detected_labels: ComfyNodeOutput<'STRING', 2>,
}
export interface ImpactSEGSClassify_input {
    classifier: _TRANSFORMERS_CLASSIFIER
    segs: _SEGS
    preset_expr: Enum_ImpactSEGSClassify_preset_expr
    /** */
    manual_expr: _STRING
    ref_image_opt?: _IMAGE
}

// ImpactSchedulerAdapter [ImpactPack_Util]
export interface ImpactSchedulerAdapter extends HasSingle_Enum_AV$_FaceDetailer_scheduler, ComfyNode<ImpactSchedulerAdapter_input, ImpactSchedulerAdapter_output> {
    nameInComfy: "ImpactSchedulerAdapter"
}
export interface ImpactSchedulerAdapter_output {
    scheduler: ComfyNodeOutput<'Enum_AV$_FaceDetailer_scheduler', 0>,
}
export interface ImpactSchedulerAdapter_input {
    /** */
    scheduler: Enum_KSampler_scheduler
    extra_scheduler: Enum_ImpactSchedulerAdapter_extra_scheduler
}

// GITSSchedulerFuncProvider [ImpactPack_sampling]
export interface GITSSchedulerFuncProvider extends HasSingle_SCHEDULER_FUNC, ComfyNode<GITSSchedulerFuncProvider_input, GITSSchedulerFuncProvider_output> {
    nameInComfy: "GITSSchedulerFuncProvider"
}
export interface GITSSchedulerFuncProvider_output {
    SCHEDULER_FUNC: ComfyNodeOutput<'SCHEDULER_FUNC', 0>,
}
export interface GITSSchedulerFuncProvider_input {
    /** default=1.2 min=1.5 max=1.5 step=0.05 */
    coeff?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// UltralyticsDetectorProvider [ImpactPack]
export interface UltralyticsDetectorProvider extends HasSingle_BBOX_DETECTOR, HasSingle_SEGM_DETECTOR, ComfyNode<UltralyticsDetectorProvider_input, UltralyticsDetectorProvider_output> {
    nameInComfy: "UltralyticsDetectorProvider"
}
export interface UltralyticsDetectorProvider_output {
    BBOX_DETECTOR: ComfyNodeOutput<'BBOX_DETECTOR', 0>,
    SEGM_DETECTOR: ComfyNodeOutput<'SEGM_DETECTOR', 1>,
}
export interface UltralyticsDetectorProvider_input {
    model_name: Enum_UltralyticsDetectorProvider_model_name
}

// INPAINT_LoadFooocusInpaint [inpaint]
export interface INPAINT$_LoadFooocusInpaint extends HasSingle_INPAINT_PATCH, ComfyNode<INPAINT$_LoadFooocusInpaint_input, INPAINT$_LoadFooocusInpaint_output> {
    nameInComfy: "INPAINT_LoadFooocusInpaint"
}
export interface INPAINT$_LoadFooocusInpaint_output {
    INPAINT_PATCH: ComfyNodeOutput<'INPAINT_PATCH', 0>,
}
export interface INPAINT$_LoadFooocusInpaint_input {
    head: Enum_INPAINT$_LoadFooocusInpaint_head
    patch: Enum_INPAINT$_LoadFooocusInpaint_patch
}

// INPAINT_ApplyFooocusInpaint [inpaint]
export interface INPAINT$_ApplyFooocusInpaint extends HasSingle_MODEL, ComfyNode<INPAINT$_ApplyFooocusInpaint_input, INPAINT$_ApplyFooocusInpaint_output> {
    nameInComfy: "INPAINT_ApplyFooocusInpaint"
}
export interface INPAINT$_ApplyFooocusInpaint_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface INPAINT$_ApplyFooocusInpaint_input {
    model: _MODEL
    patch: _INPAINT_PATCH
    latent: _LATENT
}

// INPAINT_VAEEncodeInpaintConditioning [inpaint]
export interface INPAINT$_VAEEncodeInpaintConditioning extends ComfyNode<INPAINT$_VAEEncodeInpaintConditioning_input, INPAINT$_VAEEncodeInpaintConditioning_output> {
    nameInComfy: "INPAINT_VAEEncodeInpaintConditioning"
}
export interface INPAINT$_VAEEncodeInpaintConditioning_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent_inpaint: ComfyNodeOutput<'LATENT', 2>,
    latent_samples: ComfyNodeOutput<'LATENT', 3>,
}
export interface INPAINT$_VAEEncodeInpaintConditioning_input {
    positive: _CONDITIONING
    negative: _CONDITIONING
    vae: _VAE
    pixels: _IMAGE
    mask: _MASK
}

// INPAINT_MaskedFill [inpaint]
export interface INPAINT$_MaskedFill extends HasSingle_IMAGE, ComfyNode<INPAINT$_MaskedFill_input, INPAINT$_MaskedFill_output> {
    nameInComfy: "INPAINT_MaskedFill"
}
export interface INPAINT$_MaskedFill_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface INPAINT$_MaskedFill_input {
    image: _IMAGE
    mask: _MASK
    fill: Enum_INPAINT$_MaskedFill_fill
    /** default=0 min=8191 max=8191 step=1 */
    falloff?: _INT
}

// INPAINT_MaskedBlur [inpaint]
export interface INPAINT$_MaskedBlur extends HasSingle_IMAGE, ComfyNode<INPAINT$_MaskedBlur_input, INPAINT$_MaskedBlur_output> {
    nameInComfy: "INPAINT_MaskedBlur"
}
export interface INPAINT$_MaskedBlur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface INPAINT$_MaskedBlur_input {
    image: _IMAGE
    mask: _MASK
    /** default=255 min=8191 max=8191 step=1 */
    blur?: _INT
    /** default=0 min=8191 max=8191 step=1 */
    falloff?: _INT
}

// INPAINT_LoadInpaintModel [inpaint]
export interface INPAINT$_LoadInpaintModel extends HasSingle_INPAINT_MODEL, ComfyNode<INPAINT$_LoadInpaintModel_input, INPAINT$_LoadInpaintModel_output> {
    nameInComfy: "INPAINT_LoadInpaintModel"
}
export interface INPAINT$_LoadInpaintModel_output {
    INPAINT_MODEL: ComfyNodeOutput<'INPAINT_MODEL', 0>,
}
export interface INPAINT$_LoadInpaintModel_input {
    model_name: Enum_INPAINT$_LoadInpaintModel_model_name
}

// INPAINT_InpaintWithModel [inpaint]
export interface INPAINT$_InpaintWithModel extends HasSingle_IMAGE, ComfyNode<INPAINT$_InpaintWithModel_input, INPAINT$_InpaintWithModel_output> {
    nameInComfy: "INPAINT_InpaintWithModel"
}
export interface INPAINT$_InpaintWithModel_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface INPAINT$_InpaintWithModel_input {
    inpaint_model: _INPAINT_MODEL
    image: _IMAGE
    mask: _MASK
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    optional_upscale_model?: _UPSCALE_MODEL
}

// INPAINT_ExpandMask [inpaint]
export interface INPAINT$_ExpandMask extends HasSingle_MASK, ComfyNode<INPAINT$_ExpandMask_input, INPAINT$_ExpandMask_output> {
    nameInComfy: "INPAINT_ExpandMask"
}
export interface INPAINT$_ExpandMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface INPAINT$_ExpandMask_input {
    mask: _MASK
    /** default=16 min=8096 max=8096 step=1 */
    grow?: _INT
    /** default=7 min=8096 max=8096 step=1 */
    blur?: _INT
}

// INPAINT_DenoiseToCompositingMask [inpaint]
export interface INPAINT$_DenoiseToCompositingMask extends HasSingle_MASK, ComfyNode<INPAINT$_DenoiseToCompositingMask_input, INPAINT$_DenoiseToCompositingMask_output> {
    nameInComfy: "INPAINT_DenoiseToCompositingMask"
}
export interface INPAINT$_DenoiseToCompositingMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface INPAINT$_DenoiseToCompositingMask_input {
    mask: _MASK
    /** default=0.1 min=1 max=1 step=0.01 */
    offset?: _FLOAT
    /** default=0.2 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
}

// XY Input: Lora Block Weight //Inspire [InspirePack_LoraBlockWeight]
export interface XY_Input$4_Lora_Block_Weight_$3$3Inspire extends ComfyNode<XY_Input$4_Lora_Block_Weight_$3$3Inspire_input, XY_Input$4_Lora_Block_Weight_$3$3Inspire_output> {
    nameInComfy: "XY Input: Lora Block Weight //Inspire"
}
export interface XY_Input$4_Lora_Block_Weight_$3$3Inspire_output {
    "X$_$1vectors$2": ComfyNodeOutput<'XY', 0>,
    "Y$_$1effect_compares$2": ComfyNodeOutput<'XY', 1>,
}
export interface XY_Input$4_Lora_Block_Weight_$3$3Inspire_input {
    category_filter: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter
    lora_name: Enum_LoraLoader_lora_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength_clip?: _FLOAT
    /** default=false */
    inverse?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=1 min=10 max=10 step=0.01 */
    A?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    B?: _FLOAT
    preset: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_preset
    /** default="SD-NONE/SD-ALL\nSD-ALL/SD-ALL\nSD-INS/SD-ALL\nSD-IND/SD-ALL\nSD-INALL/SD-ALL\nSD-MIDD/SD-ALL\nSD-MIDD0.2/SD-ALL\nSD-MIDD0.8/SD-ALL\nSD-MOUT/SD-ALL\nSD-OUTD/SD-ALL\nSD-OUTS/SD-ALL\nSD-OUTALL/SD-ALL" */
    block_vectors?: _STRING
    heatmap_palette: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_heatmap_palette
    /** default=0.8 min=1 max=1 step=0.01 */
    heatmap_alpha?: _FLOAT
    /** default=1.5 min=10 max=10 step=0.01 */
    heatmap_strength?: _FLOAT
    xyplot_mode: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_xyplot_mode
}

// LoraLoaderBlockWeight //Inspire [InspirePack_LoraBlockWeight]
export interface LoraLoaderBlockWeight_$3$3Inspire extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<LoraLoaderBlockWeight_$3$3Inspire_input, LoraLoaderBlockWeight_$3$3Inspire_output> {
    nameInComfy: "LoraLoaderBlockWeight //Inspire"
}
export interface LoraLoaderBlockWeight_$3$3Inspire_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    clip: ComfyNodeOutput<'CLIP', 1>,
    populated_vector: ComfyNodeOutput<'STRING', 2>,
}
export interface LoraLoaderBlockWeight_$3$3Inspire_input {
    model: _MODEL
    clip: _CLIP
    category_filter: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter
    lora_name: Enum_LoraLoader_lora_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength_clip?: _FLOAT
    /** default=false */
    inverse?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=4 min=10 max=10 step=0.01 */
    A?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    B?: _FLOAT
    preset: Enum_LoraLoaderBlockWeight_$3$3Inspire_preset
    /** default="1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1" */
    block_vector?: _STRING
    /** default=false */
    bypass?: _BOOLEAN
}

// LoraBlockInfo //Inspire [InspirePack_LoraBlockWeight]
export interface LoraBlockInfo_$3$3Inspire extends ComfyNode<LoraBlockInfo_$3$3Inspire_input, LoraBlockInfo_$3$3Inspire_output> {
    nameInComfy: "LoraBlockInfo //Inspire"
}
export interface LoraBlockInfo_$3$3Inspire_output {
}
export interface LoraBlockInfo_$3$3Inspire_input {
    model: _MODEL
    clip: _CLIP
    lora_name: Enum_LoraLoader_lora_name
    /** */
    block_info: _STRING
}

// MakeLBW //Inspire [InspirePack_LoraBlockWeight]
export interface MakeLBW_$3$3Inspire extends HasSingle_LBW_MODEL, HasSingle_STRING, ComfyNode<MakeLBW_$3$3Inspire_input, MakeLBW_$3$3Inspire_output> {
    nameInComfy: "MakeLBW //Inspire"
}
export interface MakeLBW_$3$3Inspire_output {
    lbw_model: ComfyNodeOutput<'LBW_MODEL', 0>,
    populated_vector: ComfyNodeOutput<'STRING', 1>,
}
export interface MakeLBW_$3$3Inspire_input {
    model: _MODEL
    clip: _CLIP
    category_filter: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter
    lora_name: Enum_LoraLoader_lora_name
    /** default=false */
    inverse?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=4 min=10 max=10 step=0.01 */
    A?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    B?: _FLOAT
    preset: Enum_LoraLoaderBlockWeight_$3$3Inspire_preset
    /** default="1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1" */
    block_vector?: _STRING
    /** default=false */
    bypass?: _BOOLEAN
}

// ApplyLBW //Inspire [InspirePack_LoraBlockWeight]
export interface ApplyLBW_$3$3Inspire extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<ApplyLBW_$3$3Inspire_input, ApplyLBW_$3$3Inspire_output> {
    nameInComfy: "ApplyLBW //Inspire"
}
export interface ApplyLBW_$3$3Inspire_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
}
export interface ApplyLBW_$3$3Inspire_input {
    model: _MODEL
    clip: _CLIP
    /** default=1 min=10 max=10 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength_clip?: _FLOAT
    lbw_model: _LBW_MODEL
}

// SaveLBW //Inspire [InspirePack_LoraBlockWeight]
export interface SaveLBW_$3$3Inspire extends ComfyNode<SaveLBW_$3$3Inspire_input, SaveLBW_$3$3Inspire_output> {
    nameInComfy: "SaveLBW //Inspire"
}
export interface SaveLBW_$3$3Inspire_output {
}
export interface SaveLBW_$3$3Inspire_input {
    lbw_model: _LBW_MODEL
    /** default="ComfyUI" */
    filename_prefix?: _STRING
}

// LoadLBW //Inspire [InspirePack_LoraBlockWeight]
export interface LoadLBW_$3$3Inspire extends HasSingle_LBW_MODEL, ComfyNode<LoadLBW_$3$3Inspire_input, LoadLBW_$3$3Inspire_output> {
    nameInComfy: "LoadLBW //Inspire"
}
export interface LoadLBW_$3$3Inspire_output {
    LBW_MODEL: ComfyNodeOutput<'LBW_MODEL', 0>,
}
export interface LoadLBW_$3$3Inspire_input {
    lbw_model: Enum_LoadLBW_$3$3Inspire_lbw_model
}

// OpenPose_Preprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "OpenPose_Preprocessor_Provider_for_SEGS //Inspire"
}
export interface OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=true */
    detect_hand?: _BOOLEAN
    /** default=true */
    detect_body?: _BOOLEAN
    /** default=true */
    detect_face?: _BOOLEAN
    /** default=1 min=100 max=100 step=0.1 */
    resolution_upscale_by?: _FLOAT
}

// DWPreprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "DWPreprocessor_Provider_for_SEGS //Inspire"
}
export interface DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=true */
    detect_hand?: _BOOLEAN
    /** default=true */
    detect_body?: _BOOLEAN
    /** default=true */
    detect_face?: _BOOLEAN
    /** default=1 min=100 max=100 step=0.1 */
    resolution_upscale_by?: _FLOAT
    /** default="yolox_l.onnx" */
    bbox_detector?: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector
    /** default="dw-ll_ucoco_384_bs5.torchscript.pt" */
    pose_estimator?: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_pose_estimator
}

// MiDaS_DepthMap_Preprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "MiDaS_DepthMap_Preprocessor_Provider_for_SEGS //Inspire"
}
export interface MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=6.283185307179586 min=15.707963267948966 max=15.707963267948966 step=0.05 */
    a?: _FLOAT
    /** default=0.1 min=1 max=1 step=0.05 */
    bg_threshold?: _FLOAT
}

// LeRes_DepthMap_Preprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "LeRes_DepthMap_Preprocessor_Provider_for_SEGS //Inspire"
}
export interface LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=0 min=100 max=100 step=0.1 */
    rm_nearest?: _FLOAT
    /** default=0 min=100 max=100 step=0.1 */
    rm_background?: _FLOAT
    /** default=false */
    boost?: _BOOLEAN
}

// Canny_Preprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "Canny_Preprocessor_Provider_for_SEGS //Inspire"
}
export interface Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=0.4 min=0.99 max=0.99 step=0.01 */
    low_threshold?: _FLOAT
    /** default=0.8 min=0.99 max=0.99 step=0.01 */
    high_threshold?: _FLOAT
}

// MediaPipe_FaceMesh_Preprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "MediaPipe_FaceMesh_Preprocessor_Provider_for_SEGS //Inspire"
}
export interface MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=10 min=50 max=50 step=1 */
    max_faces?: _INT
    /** default=0.5 min=1 max=1 step=0.01 */
    min_confidence?: _FLOAT
    /** default=1 min=100 max=100 step=0.1 */
    resolution_upscale_by?: _FLOAT
}

// HEDPreprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "HEDPreprocessor_Provider_for_SEGS //Inspire"
}
export interface HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=true */
    safe?: _BOOLEAN
}

// FakeScribblePreprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "FakeScribblePreprocessor_Provider_for_SEGS //Inspire"
}
export interface FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=true */
    safe?: _BOOLEAN
}

// AnimeLineArt_Preprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "AnimeLineArt_Preprocessor_Provider_for_SEGS //Inspire"
}
export interface AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
}

// Manga2Anime_LineArt_Preprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "Manga2Anime_LineArt_Preprocessor_Provider_for_SEGS //Inspire"
}
export interface Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
}

// LineArt_Preprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "LineArt_Preprocessor_Provider_for_SEGS //Inspire"
}
export interface LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=false */
    coarse?: _BOOLEAN
}

// Color_Preprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "Color_Preprocessor_Provider_for_SEGS //Inspire"
}
export interface Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
}

// InpaintPreprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "InpaintPreprocessor_Provider_for_SEGS //Inspire"
}
export interface InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=false */
    black_pixel_for_xinsir_cn?: _BOOLEAN
}

// TilePreprocessor_Provider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input, TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "TilePreprocessor_Provider_for_SEGS //Inspire"
}
export interface TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire_input {
    /** default=3 min=10 max=10 step=1 */
    pyrUp_iters?: _INT
}

// MeshGraphormerDepthMapPreprocessorProvider_for_SEGS //Inspire [InspirePack_SEGS_ControlNet]
export interface MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire extends HasSingle_SEGS_PREPROCESSOR, ComfyNode<MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire_input, MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire_output> {
    nameInComfy: "MeshGraphormerDepthMapPreprocessorProvider_for_SEGS //Inspire"
}
export interface MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire_output {
    SEGS_PREPROCESSOR: ComfyNodeOutput<'SEGS_PREPROCESSOR', 0>,
}
export interface MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire_input {
}

// MediaPipeFaceMeshDetectorProvider //Inspire [InspirePack_Detector]
export interface MediaPipeFaceMeshDetectorProvider_$3$3Inspire extends HasSingle_BBOX_DETECTOR, HasSingle_SEGM_DETECTOR, ComfyNode<MediaPipeFaceMeshDetectorProvider_$3$3Inspire_input, MediaPipeFaceMeshDetectorProvider_$3$3Inspire_output> {
    nameInComfy: "MediaPipeFaceMeshDetectorProvider //Inspire"
}
export interface MediaPipeFaceMeshDetectorProvider_$3$3Inspire_output {
    BBOX_DETECTOR: ComfyNodeOutput<'BBOX_DETECTOR', 0>,
    SEGM_DETECTOR: ComfyNodeOutput<'SEGM_DETECTOR', 1>,
}
export interface MediaPipeFaceMeshDetectorProvider_$3$3Inspire_input {
    /** default=10 min=50 max=50 step=1 */
    max_faces?: _INT
    /** default=true */
    face?: _BOOLEAN
    /** default=false */
    mouth?: _BOOLEAN
    /** default=false */
    left_eyebrow?: _BOOLEAN
    /** default=false */
    left_eye?: _BOOLEAN
    /** default=false */
    left_pupil?: _BOOLEAN
    /** default=false */
    right_eyebrow?: _BOOLEAN
    /** default=false */
    right_eye?: _BOOLEAN
    /** default=false */
    right_pupil?: _BOOLEAN
}

// KSampler //Inspire [InspirePack_a1111_compat]
export interface KSampler_$3$3Inspire extends HasSingle_LATENT, ComfyNode<KSampler_$3$3Inspire_input, KSampler_$3$3Inspire_output> {
    nameInComfy: "KSampler //Inspire"
}
export interface KSampler_$3$3Inspire_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface KSampler_$3$3Inspire_input {
    model: _MODEL
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    batch_seed_mode: Enum_KSampler_$3$3Inspire_batch_seed_mode
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    variation_strength?: _FLOAT
    variation_method?: Enum_RegionalPrompt_variation_method
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// KSamplerAdvanced //Inspire [InspirePack_a1111_compat]
export interface KSamplerAdvanced_$3$3Inspire extends HasSingle_LATENT, ComfyNode<KSamplerAdvanced_$3$3Inspire_input, KSamplerAdvanced_$3$3Inspire_output> {
    nameInComfy: "KSamplerAdvanced //Inspire"
}
export interface KSamplerAdvanced_$3$3Inspire_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface KSamplerAdvanced_$3$3Inspire_input {
    model: _MODEL
    /** default=true */
    add_noise?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.5 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    /** default=false */
    return_with_leftover_noise?: _BOOLEAN
    batch_seed_mode: Enum_KSampler_$3$3Inspire_batch_seed_mode
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    variation_strength?: _FLOAT
    variation_method?: Enum_RegionalPrompt_variation_method
    noise_opt?: _NOISE
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// KSamplerPipe //Inspire [InspirePack_a1111_compat]
export interface KSamplerPipe_$3$3Inspire extends HasSingle_LATENT, HasSingle_VAE, ComfyNode<KSamplerPipe_$3$3Inspire_input, KSamplerPipe_$3$3Inspire_output> {
    nameInComfy: "KSamplerPipe //Inspire"
}
export interface KSamplerPipe_$3$3Inspire_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    VAE: ComfyNodeOutput<'VAE', 1>,
}
export interface KSamplerPipe_$3$3Inspire_input {
    basic_pipe: _BASIC_PIPE
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    latent_image: _LATENT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    batch_seed_mode: Enum_KSampler_$3$3Inspire_batch_seed_mode
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    variation_strength?: _FLOAT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// KSamplerAdvancedPipe //Inspire [InspirePack_a1111_compat]
export interface KSamplerAdvancedPipe_$3$3Inspire extends HasSingle_LATENT, HasSingle_VAE, ComfyNode<KSamplerAdvancedPipe_$3$3Inspire_input, KSamplerAdvancedPipe_$3$3Inspire_output> {
    nameInComfy: "KSamplerAdvancedPipe //Inspire"
}
export interface KSamplerAdvancedPipe_$3$3Inspire_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    VAE: ComfyNodeOutput<'VAE', 1>,
}
export interface KSamplerAdvancedPipe_$3$3Inspire_input {
    basic_pipe: _BASIC_PIPE
    /** default=true */
    add_noise?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.5 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    latent_image: _LATENT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    /** default=false */
    return_with_leftover_noise?: _BOOLEAN
    batch_seed_mode: Enum_KSampler_$3$3Inspire_batch_seed_mode
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    variation_strength?: _FLOAT
    noise_opt?: _NOISE
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// RandomNoise //Inspire [InspirePack_a1111_compat]
export interface RandomNoise_$3$3Inspire extends HasSingle_NOISE, ComfyNode<RandomNoise_$3$3Inspire_input, RandomNoise_$3$3Inspire_output> {
    nameInComfy: "RandomNoise //Inspire"
}
export interface RandomNoise_$3$3Inspire_output {
    NOISE: ComfyNodeOutput<'NOISE', 0>,
}
export interface RandomNoise_$3$3Inspire_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    batch_seed_mode: Enum_KSampler_$3$3Inspire_batch_seed_mode
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    variation_strength?: _FLOAT
    variation_method?: Enum_RegionalPrompt_variation_method
}

// HyperTile //Inspire [InspirePack___for_testing]
export interface HyperTile_$3$3Inspire extends HasSingle_MODEL, ComfyNode<HyperTile_$3$3Inspire_input, HyperTile_$3$3Inspire_output> {
    nameInComfy: "HyperTile //Inspire"
}
export interface HyperTile_$3$3Inspire_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface HyperTile_$3$3Inspire_input {
    model: _MODEL
    /** default=256 min=2048 max=2048 */
    tile_size?: _INT
    /** default=2 min=128 max=128 */
    swap_size?: _INT
    /** default=0 min=10 max=10 */
    max_depth?: _INT
    /** default=false */
    scale_depth?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// LoadPromptsFromDir //Inspire [InspirePack_Prompt]
export interface LoadPromptsFromDir_$3$3Inspire extends HasSingle_ZIPPED_PROMPT, ComfyNode<LoadPromptsFromDir_$3$3Inspire_input, LoadPromptsFromDir_$3$3Inspire_output> {
    nameInComfy: "LoadPromptsFromDir //Inspire"
}
export interface LoadPromptsFromDir_$3$3Inspire_output {
    ZIPPED_PROMPT: ComfyNodeOutput<'ZIPPED_PROMPT', 0>,
}
export interface LoadPromptsFromDir_$3$3Inspire_input {
    prompt_dir: Enum_LoadPromptsFromDir_$3$3Inspire_prompt_dir
    /** default=false */
    reload?: _BOOLEAN
}

// LoadPromptsFromFile //Inspire [InspirePack_Prompt]
export interface LoadPromptsFromFile_$3$3Inspire extends HasSingle_ZIPPED_PROMPT, ComfyNode<LoadPromptsFromFile_$3$3Inspire_input, LoadPromptsFromFile_$3$3Inspire_output> {
    nameInComfy: "LoadPromptsFromFile //Inspire"
}
export interface LoadPromptsFromFile_$3$3Inspire_output {
    ZIPPED_PROMPT: ComfyNodeOutput<'ZIPPED_PROMPT', 0>,
}
export interface LoadPromptsFromFile_$3$3Inspire_input {
    prompt_file: Enum_LoadPromptsFromFile_$3$3Inspire_prompt_file
    /** */
    text_data_opt?: _STRING
    /** default=false */
    reload?: _BOOLEAN
}

// LoadSinglePromptFromFile //Inspire [InspirePack_Prompt]
export interface LoadSinglePromptFromFile_$3$3Inspire extends HasSingle_ZIPPED_PROMPT, ComfyNode<LoadSinglePromptFromFile_$3$3Inspire_input, LoadSinglePromptFromFile_$3$3Inspire_output> {
    nameInComfy: "LoadSinglePromptFromFile //Inspire"
}
export interface LoadSinglePromptFromFile_$3$3Inspire_output {
    ZIPPED_PROMPT: ComfyNodeOutput<'ZIPPED_PROMPT', 0>,
}
export interface LoadSinglePromptFromFile_$3$3Inspire_input {
    prompt_file: Enum_LoadPromptsFromFile_$3$3Inspire_prompt_file
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    index?: _INT
    /** */
    text_data_opt?: _STRING
}

// UnzipPrompt //Inspire [InspirePack_Prompt]
export interface UnzipPrompt_$3$3Inspire extends ComfyNode<UnzipPrompt_$3$3Inspire_input, UnzipPrompt_$3$3Inspire_output> {
    nameInComfy: "UnzipPrompt //Inspire"
}
export interface UnzipPrompt_$3$3Inspire_output {
    positive: ComfyNodeOutput<'STRING', 0>,
    negative: ComfyNodeOutput<'STRING', 1>,
    name: ComfyNodeOutput<'STRING', 2>,
}
export interface UnzipPrompt_$3$3Inspire_input {
    zipped_prompt: _ZIPPED_PROMPT
}

// ZipPrompt //Inspire [InspirePack_Prompt]
export interface ZipPrompt_$3$3Inspire extends HasSingle_ZIPPED_PROMPT, ComfyNode<ZipPrompt_$3$3Inspire_input, ZipPrompt_$3$3Inspire_output> {
    nameInComfy: "ZipPrompt //Inspire"
}
export interface ZipPrompt_$3$3Inspire_output {
    ZIPPED_PROMPT: ComfyNodeOutput<'ZIPPED_PROMPT', 0>,
}
export interface ZipPrompt_$3$3Inspire_input {
    /** */
    positive: _STRING
    /** */
    negative: _STRING
    /** */
    name_opt?: _STRING
}

// PromptExtractor //Inspire [InspirePack_Prompt]
export interface PromptExtractor_$3$3Inspire extends ComfyNode<PromptExtractor_$3$3Inspire_input, PromptExtractor_$3$3Inspire_output> {
    nameInComfy: "PromptExtractor //Inspire"
}
export interface PromptExtractor_$3$3Inspire_output {
    positive: ComfyNodeOutput<'STRING', 0>,
    negative: ComfyNodeOutput<'STRING', 1>,
}
export interface PromptExtractor_$3$3Inspire_input {
    /** */
    image: Enum_LoadImage_image
    /** */
    positive_id: _STRING
    /** */
    negative_id: _STRING
    /** */
    info: _STRING
}

// GlobalSeed //Inspire [InspirePack_Prompt]
export interface GlobalSeed_$3$3Inspire extends ComfyNode<GlobalSeed_$3$3Inspire_input, GlobalSeed_$3$3Inspire_output> {
    nameInComfy: "GlobalSeed //Inspire"
}
export interface GlobalSeed_$3$3Inspire_output {
}
export interface GlobalSeed_$3$3Inspire_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    value?: _INT
    /** default=true */
    mode?: _BOOLEAN
    action: Enum_GlobalSeed_$3$3Inspire_action
    /** default="" */
    last_seed?: _STRING
}

// GlobalSampler //Inspire [InspirePack_Prompt]
export interface GlobalSampler_$3$3Inspire extends ComfyNode<GlobalSampler_$3$3Inspire_input, GlobalSampler_$3$3Inspire_output> {
    nameInComfy: "GlobalSampler //Inspire"
}
export interface GlobalSampler_$3$3Inspire_output {
}
export interface GlobalSampler_$3$3Inspire_input {
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
}

// BindImageListPromptList //Inspire [InspirePack_Prompt]
export interface BindImageListPromptList_$3$3Inspire extends HasSingle_IMAGE, ComfyNode<BindImageListPromptList_$3$3Inspire_input, BindImageListPromptList_$3$3Inspire_output> {
    nameInComfy: "BindImageListPromptList //Inspire"
}
export interface BindImageListPromptList_$3$3Inspire_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    positive: ComfyNodeOutput<'STRING', 1>,
    negative: ComfyNodeOutput<'STRING', 2>,
    prompt_label: ComfyNodeOutput<'STRING', 3>,
}
export interface BindImageListPromptList_$3$3Inspire_input {
    images: _IMAGE
    zipped_prompts: _ZIPPED_PROMPT
    /** */
    default_positive: _STRING
    /** */
    default_negative: _STRING
}

// WildcardEncode //Inspire [InspirePack_Prompt]
export interface WildcardEncode_$3$3Inspire extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_CONDITIONING, HasSingle_STRING, ComfyNode<WildcardEncode_$3$3Inspire_input, WildcardEncode_$3$3Inspire_output> {
    nameInComfy: "WildcardEncode //Inspire"
}
export interface WildcardEncode_$3$3Inspire_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    clip: ComfyNodeOutput<'CLIP', 1>,
    conditioning: ComfyNodeOutput<'CONDITIONING', 2>,
    populated_text: ComfyNodeOutput<'STRING', 3>,
}
export interface WildcardEncode_$3$3Inspire_input {
    model: _MODEL
    clip: _CLIP
    token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    /** default="comfy++" */
    weight_interpretation?: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** */
    wildcard_text: _STRING
    /** */
    populated_text: _STRING
    /** default=true */
    mode?: _BOOLEAN
    "Select to add LoRA": Enum_ToDetailerPipe_Select$_to$_add$_LoRA
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// PromptBuilder //Inspire [InspirePack_Prompt]
export interface PromptBuilder_$3$3Inspire extends HasSingle_STRING, ComfyNode<PromptBuilder_$3$3Inspire_input, PromptBuilder_$3$3Inspire_output> {
    nameInComfy: "PromptBuilder //Inspire"
}
export interface PromptBuilder_$3$3Inspire_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface PromptBuilder_$3$3Inspire_input {
    category: Enum_PromptBuilder_$3$3Inspire_category
    preset: Enum_PromptBuilder_$3$3Inspire_preset
    /** */
    text: _STRING
}

// SeedExplorer //Inspire [InspirePack_Prompt]
export interface SeedExplorer_$3$3Inspire extends HasSingle_NOISE, ComfyNode<SeedExplorer_$3$3Inspire_input, SeedExplorer_$3$3Inspire_output> {
    nameInComfy: "SeedExplorer //Inspire"
}
export interface SeedExplorer_$3$3Inspire_output {
    NOISE: ComfyNodeOutput<'NOISE', 0>,
}
export interface SeedExplorer_$3$3Inspire_input {
    latent: _LATENT
    /** */
    seed_prompt: _STRING
    /** default=true */
    enable_additional?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    additional_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    additional_strength?: _FLOAT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    initial_batch_seed_mode: Enum_SeedExplorer_$3$3Inspire_initial_batch_seed_mode
    variation_method?: Enum_RegionalPrompt_variation_method
    model?: _model
}

// ListCounter //Inspire [InspirePack_Util]
export interface ListCounter_$3$3Inspire extends HasSingle_INT, ComfyNode<ListCounter_$3$3Inspire_input, ListCounter_$3$3Inspire_output> {
    nameInComfy: "ListCounter //Inspire"
}
export interface ListCounter_$3$3Inspire_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface ListCounter_$3$3Inspire_input {
    signal: _$Star
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    base_value?: _INT
}

// CLIPTextEncodeWithWeight //Inspire [InspirePack_Util]
export interface CLIPTextEncodeWithWeight_$3$3Inspire extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncodeWithWeight_$3$3Inspire_input, CLIPTextEncodeWithWeight_$3$3Inspire_output> {
    nameInComfy: "CLIPTextEncodeWithWeight //Inspire"
}
export interface CLIPTextEncodeWithWeight_$3$3Inspire_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPTextEncodeWithWeight_$3$3Inspire_input {
    /** */
    text: _STRING
    clip: _CLIP
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    /** default=0 min=10 max=10 step=0.01 */
    add_weight?: _FLOAT
}

// RandomGeneratorForList //Inspire [InspirePack_Util]
export interface RandomGeneratorForList_$3$3Inspire extends HasSingle_$Star, HasSingle_INT, ComfyNode<RandomGeneratorForList_$3$3Inspire_input, RandomGeneratorForList_$3$3Inspire_output> {
    nameInComfy: "RandomGeneratorForList //Inspire"
}
export interface RandomGeneratorForList_$3$3Inspire_output {
    signal: ComfyNodeOutput<'$Star', 0>,
    random_value: ComfyNodeOutput<'INT', 1>,
}
export interface RandomGeneratorForList_$3$3Inspire_input {
    signal: _$Star
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// MakeBasicPipe //Inspire [InspirePack_Prompt]
export interface MakeBasicPipe_$3$3Inspire extends HasSingle_BASIC_PIPE, HasSingle_STRING, ComfyNode<MakeBasicPipe_$3$3Inspire_input, MakeBasicPipe_$3$3Inspire_output> {
    nameInComfy: "MakeBasicPipe //Inspire"
}
export interface MakeBasicPipe_$3$3Inspire_output {
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 0>,
    cache_key: ComfyNodeOutput<'STRING', 1>,
}
export interface MakeBasicPipe_$3$3Inspire_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** */
    ckpt_key_opt: _STRING
    /** */
    positive_wildcard_text: _STRING
    /** */
    negative_wildcard_text: _STRING
    /** default=true */
    "Add selection to"?: _BOOLEAN
    "Select to add LoRA": Enum_ToDetailerPipe_Select$_to$_add$_LoRA
    "Select to add Wildcard": Enum_ToDetailerPipe_Select$_to$_add$_Wildcard
    /** default=true */
    wildcard_mode?: _BOOLEAN
    /** */
    positive_populated_text: _STRING
    /** */
    negative_populated_text: _STRING
    token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    /** default="comfy++" */
    weight_interpretation?: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default=-2 min=-1 max=-1 step=1 */
    stop_at_clip_layer?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    vae_opt?: _VAE
}

// RemoveControlNet //Inspire [InspirePack_Util]
export interface RemoveControlNet_$3$3Inspire extends HasSingle_CONDITIONING, ComfyNode<RemoveControlNet_$3$3Inspire_input, RemoveControlNet_$3$3Inspire_output> {
    nameInComfy: "RemoveControlNet //Inspire"
}
export interface RemoveControlNet_$3$3Inspire_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface RemoveControlNet_$3$3Inspire_input {
    conditioning: _CONDITIONING
}

// RemoveControlNetFromRegionalPrompts //Inspire [InspirePack_Util]
export interface RemoveControlNetFromRegionalPrompts_$3$3Inspire extends HasSingle_REGIONAL_PROMPTS, ComfyNode<RemoveControlNetFromRegionalPrompts_$3$3Inspire_input, RemoveControlNetFromRegionalPrompts_$3$3Inspire_output> {
    nameInComfy: "RemoveControlNetFromRegionalPrompts //Inspire"
}
export interface RemoveControlNetFromRegionalPrompts_$3$3Inspire_output {
    REGIONAL_PROMPTS: ComfyNodeOutput<'REGIONAL_PROMPTS', 0>,
}
export interface RemoveControlNetFromRegionalPrompts_$3$3Inspire_input {
    regional_prompts: _REGIONAL_PROMPTS
}

// CompositeNoise //Inspire [InspirePack_Prompt]
export interface CompositeNoise_$3$3Inspire extends HasSingle_NOISE, ComfyNode<CompositeNoise_$3$3Inspire_input, CompositeNoise_$3$3Inspire_output> {
    nameInComfy: "CompositeNoise //Inspire"
}
export interface CompositeNoise_$3$3Inspire_output {
    NOISE: ComfyNodeOutput<'NOISE', 0>,
}
export interface CompositeNoise_$3$3Inspire_input {
    destination: _NOISE
    source: _NOISE
    mode: Enum_CompositeNoise_$3$3Inspire_mode
    /** default=0 min=16384 max=16384 step=8 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    y?: _INT
}

// LoadImagesFromDir //Inspire [image]
export interface LoadImagesFromDir_$3$3Inspire extends HasSingle_IMAGE, HasSingle_MASK, HasSingle_INT, ComfyNode<LoadImagesFromDir_$3$3Inspire_input, LoadImagesFromDir_$3$3Inspire_output> {
    nameInComfy: "LoadImagesFromDir //Inspire"
}
export interface LoadImagesFromDir_$3$3Inspire_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
}
export interface LoadImagesFromDir_$3$3Inspire_input {
    /** default="" */
    directory?: _STRING
    /** default=0 min=undefined step=1 */
    image_load_cap?: _INT
    /** default=0 min=undefined step=1 */
    start_index?: _INT
    /** default=false */
    load_always?: _BOOLEAN
}

// LoadImageListFromDir //Inspire [image]
export interface LoadImageListFromDir_$3$3Inspire extends HasSingle_IMAGE, HasSingle_MASK, HasSingle_STRING, ComfyNode<LoadImageListFromDir_$3$3Inspire_input, LoadImageListFromDir_$3$3Inspire_output> {
    nameInComfy: "LoadImageListFromDir //Inspire"
}
export interface LoadImageListFromDir_$3$3Inspire_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
    "FILE$_PATH": ComfyNodeOutput<'STRING', 2>,
}
export interface LoadImageListFromDir_$3$3Inspire_input {
    /** default="" */
    directory?: _STRING
    /** default=0 min=undefined step=1 */
    image_load_cap?: _INT
    /** default=0 min=undefined step=1 */
    start_index?: _INT
    /** default=false */
    load_always?: _BOOLEAN
}

// LoadImage //Inspire [InspirePack_image]
export interface LoadImage_$3$3Inspire extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<LoadImage_$3$3Inspire_input, LoadImage_$3$3Inspire_output> {
    nameInComfy: "LoadImage //Inspire"
}
export interface LoadImage_$3$3Inspire_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface LoadImage_$3$3Inspire_input {
    /** */
    image: Enum_LoadImage_$3$3Inspire_image
    /** */
    image_data: _STRING
}

// ChangeImageBatchSize //Inspire [InspirePack_Util]
export interface ChangeImageBatchSize_$3$3Inspire extends HasSingle_IMAGE, ComfyNode<ChangeImageBatchSize_$3$3Inspire_input, ChangeImageBatchSize_$3$3Inspire_output> {
    nameInComfy: "ChangeImageBatchSize //Inspire"
}
export interface ChangeImageBatchSize_$3$3Inspire_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ChangeImageBatchSize_$3$3Inspire_input {
    image: _IMAGE
    /** default=1 min=4096 max=4096 step=1 */
    batch_size?: _INT
    mode: Enum_DenoiseScheduleHookProvider_schedule_for_iteration
}

// ChangeLatentBatchSize //Inspire [InspirePack_Util]
export interface ChangeLatentBatchSize_$3$3Inspire extends HasSingle_LATENT, ComfyNode<ChangeLatentBatchSize_$3$3Inspire_input, ChangeLatentBatchSize_$3$3Inspire_output> {
    nameInComfy: "ChangeLatentBatchSize //Inspire"
}
export interface ChangeLatentBatchSize_$3$3Inspire_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface ChangeLatentBatchSize_$3$3Inspire_input {
    latent: _LATENT
    /** default=1 min=4096 max=4096 step=1 */
    batch_size?: _INT
    mode: Enum_DenoiseScheduleHookProvider_schedule_for_iteration
}

// ImageBatchSplitter //Inspire [InspirePack_Util]
export interface ImageBatchSplitter_$3$3Inspire extends HasSingle_IMAGE, ComfyNode<ImageBatchSplitter_$3$3Inspire_input, ImageBatchSplitter_$3$3Inspire_output> {
    nameInComfy: "ImageBatchSplitter //Inspire"
}
export interface ImageBatchSplitter_$3$3Inspire_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchSplitter_$3$3Inspire_input {
    images: _IMAGE
    /** default=4 min=50 max=50 step=1 */
    split_count?: _INT
}

// LatentBatchSplitter //Inspire [InspirePack_Util]
export interface LatentBatchSplitter_$3$3Inspire extends HasSingle_LATENT, ComfyNode<LatentBatchSplitter_$3$3Inspire_input, LatentBatchSplitter_$3$3Inspire_output> {
    nameInComfy: "LatentBatchSplitter //Inspire"
}
export interface LatentBatchSplitter_$3$3Inspire_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentBatchSplitter_$3$3Inspire_input {
    latent: _LATENT
    /** default=4 min=50 max=50 step=1 */
    split_count?: _INT
}

// ColorMapToMasks //Inspire [InspirePack_Util]
export interface ColorMapToMasks_$3$3Inspire extends HasSingle_MASK, ComfyNode<ColorMapToMasks_$3$3Inspire_input, ColorMapToMasks_$3$3Inspire_output> {
    nameInComfy: "ColorMapToMasks //Inspire"
}
export interface ColorMapToMasks_$3$3Inspire_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ColorMapToMasks_$3$3Inspire_input {
    color_map: _IMAGE
    /** default=500 min=18446744073709552000 max=18446744073709552000 step=1 */
    min_pixels?: _INT
    /** default=5 min=1000 max=1000 step=1 */
    max_count?: _INT
}

// SelectNthMask //Inspire [InspirePack_Util]
export interface SelectNthMask_$3$3Inspire extends HasSingle_MASK, ComfyNode<SelectNthMask_$3$3Inspire_input, SelectNthMask_$3$3Inspire_output> {
    nameInComfy: "SelectNthMask //Inspire"
}
export interface SelectNthMask_$3$3Inspire_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface SelectNthMask_$3$3Inspire_input {
    masks: _MASK
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    idx?: _INT
}

// RegionalPromptSimple //Inspire [InspirePack_Regional]
export interface RegionalPromptSimple_$3$3Inspire extends HasSingle_REGIONAL_PROMPTS, ComfyNode<RegionalPromptSimple_$3$3Inspire_input, RegionalPromptSimple_$3$3Inspire_output> {
    nameInComfy: "RegionalPromptSimple //Inspire"
}
export interface RegionalPromptSimple_$3$3Inspire_output {
    REGIONAL_PROMPTS: ComfyNodeOutput<'REGIONAL_PROMPTS', 0>,
}
export interface RegionalPromptSimple_$3$3Inspire_input {
    basic_pipe: _BASIC_PIPE
    mask: _MASK
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** */
    wildcard_prompt: _STRING
    /** default=false */
    controlnet_in_pipe?: _BOOLEAN
    /** default=1 min=10 max=10 step=0.01 */
    sigma_factor?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    variation_strength?: _FLOAT
    variation_method?: Enum_RegionalPrompt_variation_method
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// RegionalPromptColorMask //Inspire [InspirePack_Regional]
export interface RegionalPromptColorMask_$3$3Inspire extends HasSingle_REGIONAL_PROMPTS, HasSingle_MASK, ComfyNode<RegionalPromptColorMask_$3$3Inspire_input, RegionalPromptColorMask_$3$3Inspire_output> {
    nameInComfy: "RegionalPromptColorMask //Inspire"
}
export interface RegionalPromptColorMask_$3$3Inspire_output {
    REGIONAL_PROMPTS: ComfyNodeOutput<'REGIONAL_PROMPTS', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface RegionalPromptColorMask_$3$3Inspire_input {
    basic_pipe: _BASIC_PIPE
    color_mask: _IMAGE
    /** default="#FFFFFF" */
    mask_color?: _STRING
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    /** */
    wildcard_prompt: _STRING
    /** default=false */
    controlnet_in_pipe?: _BOOLEAN
    /** default=1 min=10 max=10 step=0.01 */
    sigma_factor?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    variation_strength?: _FLOAT
    variation_method?: Enum_RegionalPrompt_variation_method
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// RegionalConditioningSimple //Inspire [InspirePack_Regional]
export interface RegionalConditioningSimple_$3$3Inspire extends HasSingle_CONDITIONING, ComfyNode<RegionalConditioningSimple_$3$3Inspire_input, RegionalConditioningSimple_$3$3Inspire_output> {
    nameInComfy: "RegionalConditioningSimple //Inspire"
}
export interface RegionalConditioningSimple_$3$3Inspire_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface RegionalConditioningSimple_$3$3Inspire_input {
    clip: _CLIP
    mask: _MASK
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
    /** */
    prompt: _STRING
}

// RegionalConditioningColorMask //Inspire [InspirePack_Regional]
export interface RegionalConditioningColorMask_$3$3Inspire extends HasSingle_CONDITIONING, HasSingle_MASK, ComfyNode<RegionalConditioningColorMask_$3$3Inspire_input, RegionalConditioningColorMask_$3$3Inspire_output> {
    nameInComfy: "RegionalConditioningColorMask //Inspire"
}
export interface RegionalConditioningColorMask_$3$3Inspire_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface RegionalConditioningColorMask_$3$3Inspire_input {
    clip: _CLIP
    color_mask: _IMAGE
    /** default="#FFFFFF" */
    mask_color?: _STRING
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
    /** */
    prompt: _STRING
    /** default=0 min=512 max=512 step=1 */
    dilation?: _INT
}

// RegionalIPAdapterMask //Inspire [InspirePack_Regional]
export interface RegionalIPAdapterMask_$3$3Inspire extends HasSingle_REGIONAL_IPADAPTER, ComfyNode<RegionalIPAdapterMask_$3$3Inspire_input, RegionalIPAdapterMask_$3$3Inspire_output> {
    nameInComfy: "RegionalIPAdapterMask //Inspire"
}
export interface RegionalIPAdapterMask_$3$3Inspire_output {
    REGIONAL_IPADAPTER: ComfyNodeOutput<'REGIONAL_IPADAPTER', 0>,
}
export interface RegionalIPAdapterMask_$3$3Inspire_input {
    mask: _MASK
    image: _IMAGE
    /** default=0.7 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    noise?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    /** default=false */
    unfold_batch?: _BOOLEAN
    /** default=false */
    faceid_v2?: _BOOLEAN
    /** default=1 min=3 max=3 step=0.05 */
    weight_v2?: _FLOAT
    combine_embeds?: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    neg_image?: _IMAGE
}

// RegionalIPAdapterColorMask //Inspire [InspirePack_Regional]
export interface RegionalIPAdapterColorMask_$3$3Inspire extends HasSingle_REGIONAL_IPADAPTER, HasSingle_MASK, ComfyNode<RegionalIPAdapterColorMask_$3$3Inspire_input, RegionalIPAdapterColorMask_$3$3Inspire_output> {
    nameInComfy: "RegionalIPAdapterColorMask //Inspire"
}
export interface RegionalIPAdapterColorMask_$3$3Inspire_output {
    REGIONAL_IPADAPTER: ComfyNodeOutput<'REGIONAL_IPADAPTER', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface RegionalIPAdapterColorMask_$3$3Inspire_input {
    color_mask: _IMAGE
    /** default="#FFFFFF" */
    mask_color?: _STRING
    image: _IMAGE
    /** default=0.7 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    noise?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    /** default=false */
    unfold_batch?: _BOOLEAN
    /** default=false */
    faceid_v2?: _BOOLEAN
    /** default=1 min=3 max=3 step=0.05 */
    weight_v2?: _FLOAT
    combine_embeds?: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    neg_image?: _IMAGE
}

// RegionalIPAdapterEncodedMask //Inspire [InspirePack_Regional]
export interface RegionalIPAdapterEncodedMask_$3$3Inspire extends HasSingle_REGIONAL_IPADAPTER, ComfyNode<RegionalIPAdapterEncodedMask_$3$3Inspire_input, RegionalIPAdapterEncodedMask_$3$3Inspire_output> {
    nameInComfy: "RegionalIPAdapterEncodedMask //Inspire"
}
export interface RegionalIPAdapterEncodedMask_$3$3Inspire_output {
    REGIONAL_IPADAPTER: ComfyNodeOutput<'REGIONAL_IPADAPTER', 0>,
}
export interface RegionalIPAdapterEncodedMask_$3$3Inspire_input {
    mask: _MASK
    embeds: _EMBEDS
    /** default=0.7 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    /** default=false */
    unfold_batch?: _BOOLEAN
    neg_embeds?: _EMBEDS
}

// RegionalIPAdapterEncodedColorMask //Inspire [InspirePack_Regional]
export interface RegionalIPAdapterEncodedColorMask_$3$3Inspire extends HasSingle_REGIONAL_IPADAPTER, HasSingle_MASK, ComfyNode<RegionalIPAdapterEncodedColorMask_$3$3Inspire_input, RegionalIPAdapterEncodedColorMask_$3$3Inspire_output> {
    nameInComfy: "RegionalIPAdapterEncodedColorMask //Inspire"
}
export interface RegionalIPAdapterEncodedColorMask_$3$3Inspire_output {
    REGIONAL_IPADAPTER: ComfyNodeOutput<'REGIONAL_IPADAPTER', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface RegionalIPAdapterEncodedColorMask_$3$3Inspire_input {
    color_mask: _IMAGE
    /** default="#FFFFFF" */
    mask_color?: _STRING
    embeds: _EMBEDS
    /** default=0.7 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    /** default=false */
    unfold_batch?: _BOOLEAN
    neg_embeds?: _EMBEDS
}

// RegionalSeedExplorerMask //Inspire [InspirePack_Regional]
export interface RegionalSeedExplorerMask_$3$3Inspire extends HasSingle_NOISE, ComfyNode<RegionalSeedExplorerMask_$3$3Inspire_input, RegionalSeedExplorerMask_$3$3Inspire_output> {
    nameInComfy: "RegionalSeedExplorerMask //Inspire"
}
export interface RegionalSeedExplorerMask_$3$3Inspire_output {
    NOISE: ComfyNodeOutput<'NOISE', 0>,
}
export interface RegionalSeedExplorerMask_$3$3Inspire_input {
    mask: _MASK
    noise: _NOISE
    /** */
    seed_prompt: _STRING
    /** default=true */
    enable_additional?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    additional_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    additional_strength?: _FLOAT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    variation_method?: Enum_RegionalPrompt_variation_method
}

// RegionalSeedExplorerColorMask //Inspire [InspirePack_Regional]
export interface RegionalSeedExplorerColorMask_$3$3Inspire extends HasSingle_NOISE, HasSingle_MASK, ComfyNode<RegionalSeedExplorerColorMask_$3$3Inspire_input, RegionalSeedExplorerColorMask_$3$3Inspire_output> {
    nameInComfy: "RegionalSeedExplorerColorMask //Inspire"
}
export interface RegionalSeedExplorerColorMask_$3$3Inspire_output {
    NOISE: ComfyNodeOutput<'NOISE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface RegionalSeedExplorerColorMask_$3$3Inspire_input {
    color_mask: _IMAGE
    /** default="#FFFFFF" */
    mask_color?: _STRING
    noise: _NOISE
    /** */
    seed_prompt: _STRING
    /** default=true */
    enable_additional?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    additional_seed?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    additional_strength?: _FLOAT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    variation_method?: Enum_RegionalPrompt_variation_method
}

// ToIPAdapterPipe //Inspire [InspirePack_Util]
export interface ToIPAdapterPipe_$3$3Inspire extends HasSingle_IPADAPTER_PIPE, ComfyNode<ToIPAdapterPipe_$3$3Inspire_input, ToIPAdapterPipe_$3$3Inspire_output> {
    nameInComfy: "ToIPAdapterPipe //Inspire"
}
export interface ToIPAdapterPipe_$3$3Inspire_output {
    IPADAPTER_PIPE: ComfyNodeOutput<'IPADAPTER_PIPE', 0>,
}
export interface ToIPAdapterPipe_$3$3Inspire_input {
    ipadapter: _IPADAPTER
    model: _MODEL
    clip_vision?: _CLIP_VISION
    insightface?: _INSIGHTFACE
}

// FromIPAdapterPipe //Inspire [InspirePack_Util]
export interface FromIPAdapterPipe_$3$3Inspire extends HasSingle_IPADAPTER, HasSingle_MODEL, HasSingle_CLIP_VISION, HasSingle_INSIGHTFACE, ComfyNode<FromIPAdapterPipe_$3$3Inspire_input, FromIPAdapterPipe_$3$3Inspire_output> {
    nameInComfy: "FromIPAdapterPipe //Inspire"
}
export interface FromIPAdapterPipe_$3$3Inspire_output {
    ipadapter: ComfyNodeOutput<'IPADAPTER', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    clip_vision: ComfyNodeOutput<'CLIP_VISION', 2>,
    insight_face: ComfyNodeOutput<'INSIGHTFACE', 3>,
}
export interface FromIPAdapterPipe_$3$3Inspire_input {
    ipadapter_pipe: _IPADAPTER_PIPE
}

// ApplyRegionalIPAdapters //Inspire [InspirePack_Regional]
export interface ApplyRegionalIPAdapters_$3$3Inspire extends HasSingle_MODEL, ComfyNode<ApplyRegionalIPAdapters_$3$3Inspire_input, ApplyRegionalIPAdapters_$3$3Inspire_output> {
    nameInComfy: "ApplyRegionalIPAdapters //Inspire"
}
export interface ApplyRegionalIPAdapters_$3$3Inspire_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ApplyRegionalIPAdapters_$3$3Inspire_input {
    ipadapter_pipe: _IPADAPTER_PIPE
    regional_ipadapter1: _REGIONAL_IPADAPTER
}

// RegionalCFG //Inspire [InspirePack_Regional]
export interface RegionalCFG_$3$3Inspire extends HasSingle_MODEL, ComfyNode<RegionalCFG_$3$3Inspire_input, RegionalCFG_$3$3Inspire_output> {
    nameInComfy: "RegionalCFG //Inspire"
}
export interface RegionalCFG_$3$3Inspire_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface RegionalCFG_$3$3Inspire_input {
    model: _MODEL
    mask: _MASK
}

// ColorMaskToDepthMask //Inspire [InspirePack_Regional]
export interface ColorMaskToDepthMask_$3$3Inspire extends HasSingle_MASK, ComfyNode<ColorMaskToDepthMask_$3$3Inspire_input, ColorMaskToDepthMask_$3$3Inspire_output> {
    nameInComfy: "ColorMaskToDepthMask //Inspire"
}
export interface ColorMaskToDepthMask_$3$3Inspire_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ColorMaskToDepthMask_$3$3Inspire_input {
    color_mask: _IMAGE
    /** default="#FF0000:1.0\n#000000:1.0" */
    spec?: _STRING
    /** default=0 min=1 max=1 */
    base_value?: _FLOAT
    /** default=0 min=512 max=512 step=1 */
    dilation?: _INT
    flatten_method: Enum_ColorMaskToDepthMask_$3$3Inspire_flatten_method
}

// KSamplerProgress //Inspire [InspirePack_analysis]
export interface KSamplerProgress_$3$3Inspire extends ComfyNode<KSamplerProgress_$3$3Inspire_input, KSamplerProgress_$3$3Inspire_output> {
    nameInComfy: "KSamplerProgress //Inspire"
}
export interface KSamplerProgress_$3$3Inspire_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
    progress_latent: ComfyNodeOutput<'LATENT', 1>,
}
export interface KSamplerProgress_$3$3Inspire_input {
    model: _MODEL
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    /** default=1 min=10000 max=10000 */
    interval?: _INT
    /** default=true */
    omit_start_latent?: _BOOLEAN
    /** default=false */
    omit_final_latent?: _BOOLEAN
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// KSamplerAdvancedProgress //Inspire [InspirePack_analysis]
export interface KSamplerAdvancedProgress_$3$3Inspire extends ComfyNode<KSamplerAdvancedProgress_$3$3Inspire_input, KSamplerAdvancedProgress_$3$3Inspire_output> {
    nameInComfy: "KSamplerAdvancedProgress //Inspire"
}
export interface KSamplerAdvancedProgress_$3$3Inspire_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
    progress_latent: ComfyNodeOutput<'LATENT', 1>,
}
export interface KSamplerAdvancedProgress_$3$3Inspire_input {
    model: _MODEL
    /** default=true */
    add_noise?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.5 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_AV$_FaceDetailer_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    noise_mode: Enum_KSampler_$3$3Inspire_noise_mode
    /** default=false */
    return_with_leftover_noise?: _BOOLEAN
    /** default=1 min=10000 max=10000 */
    interval?: _INT
    /** default=false */
    omit_start_latent?: _BOOLEAN
    /** default=false */
    omit_final_latent?: _BOOLEAN
    prev_progress_latent_opt?: _LATENT
    scheduler_func_opt?: _SCHEDULER_FUNC
}

// ScheduledCFGGuider //Inspire [sampling_custom_sampling_guiders]
export interface ScheduledCFGGuider_$3$3Inspire extends HasSingle_GUIDER, HasSingle_SIGMAS, ComfyNode<ScheduledCFGGuider_$3$3Inspire_input, ScheduledCFGGuider_$3$3Inspire_output> {
    nameInComfy: "ScheduledCFGGuider //Inspire"
}
export interface ScheduledCFGGuider_$3$3Inspire_output {
    GUIDER: ComfyNodeOutput<'GUIDER', 0>,
    SIGMAS: ComfyNodeOutput<'SIGMAS', 1>,
}
export interface ScheduledCFGGuider_$3$3Inspire_input {
    model: _MODEL
    positive: _CONDITIONING
    negative: _CONDITIONING
    sigmas: _SIGMAS
    /** default=6.5 min=100 max=100 step=0.1 */
    from_cfg?: _FLOAT
    /** default=1 min=100 max=100 step=0.1 */
    to_cfg?: _FLOAT
    /** default="log" */
    schedule?: Enum_ScheduledCFGGuider_$3$3Inspire_schedule
}

// ScheduledPerpNegCFGGuider //Inspire [sampling_custom_sampling_guiders]
export interface ScheduledPerpNegCFGGuider_$3$3Inspire extends HasSingle_GUIDER, HasSingle_SIGMAS, ComfyNode<ScheduledPerpNegCFGGuider_$3$3Inspire_input, ScheduledPerpNegCFGGuider_$3$3Inspire_output> {
    nameInComfy: "ScheduledPerpNegCFGGuider //Inspire"
}
export interface ScheduledPerpNegCFGGuider_$3$3Inspire_output {
    GUIDER: ComfyNodeOutput<'GUIDER', 0>,
    SIGMAS: ComfyNodeOutput<'SIGMAS', 1>,
}
export interface ScheduledPerpNegCFGGuider_$3$3Inspire_input {
    model: _MODEL
    positive: _CONDITIONING
    negative: _CONDITIONING
    empty_conditioning: _CONDITIONING
    /** default=1 min=100 max=100 step=0.01 */
    neg_scale?: _FLOAT
    sigmas: _SIGMAS
    /** default=6.5 min=100 max=100 step=0.1 */
    from_cfg?: _FLOAT
    /** default=1 min=100 max=100 step=0.1 */
    to_cfg?: _FLOAT
    /** default="log" */
    schedule?: Enum_ScheduledCFGGuider_$3$3Inspire_schedule
}

// CacheBackendData //Inspire [InspirePack_Backend]
export interface CacheBackendData_$3$3Inspire extends HasSingle_$Star, ComfyNode<CacheBackendData_$3$3Inspire_input, CacheBackendData_$3$3Inspire_output> {
    nameInComfy: "CacheBackendData //Inspire"
}
export interface CacheBackendData_$3$3Inspire_output {
    "data$_opt": ComfyNodeOutput<'$Star', 0>,
}
export interface CacheBackendData_$3$3Inspire_input {
    /** */
    key: _STRING
    /** */
    tag: _STRING
    data: _$Star
}

// CacheBackendDataNumberKey //Inspire [InspirePack_Backend]
export interface CacheBackendDataNumberKey_$3$3Inspire extends HasSingle_$Star, ComfyNode<CacheBackendDataNumberKey_$3$3Inspire_input, CacheBackendDataNumberKey_$3$3Inspire_output> {
    nameInComfy: "CacheBackendDataNumberKey //Inspire"
}
export interface CacheBackendDataNumberKey_$3$3Inspire_output {
    "data$_opt": ComfyNodeOutput<'$Star', 0>,
}
export interface CacheBackendDataNumberKey_$3$3Inspire_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    key?: _INT
    /** */
    tag: _STRING
    data: _$Star
}

// CacheBackendDataList //Inspire [InspirePack_Backend]
export interface CacheBackendDataList_$3$3Inspire extends HasSingle_$Star, ComfyNode<CacheBackendDataList_$3$3Inspire_input, CacheBackendDataList_$3$3Inspire_output> {
    nameInComfy: "CacheBackendDataList //Inspire"
}
export interface CacheBackendDataList_$3$3Inspire_output {
    "data$_opt": ComfyNodeOutput<'$Star', 0>,
}
export interface CacheBackendDataList_$3$3Inspire_input {
    /** */
    key: _STRING
    /** */
    tag: _STRING
    data: _$Star
}

// CacheBackendDataNumberKeyList //Inspire [InspirePack_Backend]
export interface CacheBackendDataNumberKeyList_$3$3Inspire extends HasSingle_$Star, ComfyNode<CacheBackendDataNumberKeyList_$3$3Inspire_input, CacheBackendDataNumberKeyList_$3$3Inspire_output> {
    nameInComfy: "CacheBackendDataNumberKeyList //Inspire"
}
export interface CacheBackendDataNumberKeyList_$3$3Inspire_output {
    "data$_opt": ComfyNodeOutput<'$Star', 0>,
}
export interface CacheBackendDataNumberKeyList_$3$3Inspire_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    key?: _INT
    /** */
    tag: _STRING
    data: _$Star
}

// RetrieveBackendData //Inspire [InspirePack_Backend]
export interface RetrieveBackendData_$3$3Inspire extends HasSingle_$Star, ComfyNode<RetrieveBackendData_$3$3Inspire_input, RetrieveBackendData_$3$3Inspire_output> {
    nameInComfy: "RetrieveBackendData //Inspire"
}
export interface RetrieveBackendData_$3$3Inspire_output {
    data: ComfyNodeOutput<'$Star', 0>,
}
export interface RetrieveBackendData_$3$3Inspire_input {
    /** */
    key: _STRING
}

// RetrieveBackendDataNumberKey //Inspire [InspirePack_Backend]
export interface RetrieveBackendDataNumberKey_$3$3Inspire extends HasSingle_$Star, ComfyNode<RetrieveBackendDataNumberKey_$3$3Inspire_input, RetrieveBackendDataNumberKey_$3$3Inspire_output> {
    nameInComfy: "RetrieveBackendDataNumberKey //Inspire"
}
export interface RetrieveBackendDataNumberKey_$3$3Inspire_output {
    data: ComfyNodeOutput<'$Star', 0>,
}
export interface RetrieveBackendDataNumberKey_$3$3Inspire_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    key?: _INT
}

// RemoveBackendData //Inspire [InspirePack_Backend]
export interface RemoveBackendData_$3$3Inspire extends HasSingle_$Star, ComfyNode<RemoveBackendData_$3$3Inspire_input, RemoveBackendData_$3$3Inspire_output> {
    nameInComfy: "RemoveBackendData //Inspire"
}
export interface RemoveBackendData_$3$3Inspire_output {
    signal: ComfyNodeOutput<'$Star', 0>,
}
export interface RemoveBackendData_$3$3Inspire_input {
    /** */
    key: _STRING
    signal_opt?: _$Star
}

// RemoveBackendDataNumberKey //Inspire [InspirePack_Backend]
export interface RemoveBackendDataNumberKey_$3$3Inspire extends HasSingle_$Star, ComfyNode<RemoveBackendDataNumberKey_$3$3Inspire_input, RemoveBackendDataNumberKey_$3$3Inspire_output> {
    nameInComfy: "RemoveBackendDataNumberKey //Inspire"
}
export interface RemoveBackendDataNumberKey_$3$3Inspire_output {
    signal: ComfyNodeOutput<'$Star', 0>,
}
export interface RemoveBackendDataNumberKey_$3$3Inspire_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    key?: _INT
    signal_opt?: _$Star
}

// ShowCachedInfo //Inspire [InspirePack_Backend]
export interface ShowCachedInfo_$3$3Inspire extends ComfyNode<ShowCachedInfo_$3$3Inspire_input, ShowCachedInfo_$3$3Inspire_output> {
    nameInComfy: "ShowCachedInfo //Inspire"
}
export interface ShowCachedInfo_$3$3Inspire_output {
}
export interface ShowCachedInfo_$3$3Inspire_input {
    /** default="" */
    cache_info?: _STRING
    /** default="" */
    key?: _STRING
}

// CheckpointLoaderSimpleShared //Inspire [InspirePack_Backend]
export interface CheckpointLoaderSimpleShared_$3$3Inspire extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_STRING, ComfyNode<CheckpointLoaderSimpleShared_$3$3Inspire_input, CheckpointLoaderSimpleShared_$3$3Inspire_output> {
    nameInComfy: "CheckpointLoaderSimpleShared //Inspire"
}
export interface CheckpointLoaderSimpleShared_$3$3Inspire_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    clip: ComfyNodeOutput<'CLIP', 1>,
    vae: ComfyNodeOutput<'VAE', 2>,
    "cache$_key": ComfyNodeOutput<'STRING', 3>,
}
export interface CheckpointLoaderSimpleShared_$3$3Inspire_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** */
    key_opt: _STRING
    mode?: Enum_CheckpointLoaderSimpleShared_$3$3Inspire_mode
}

// StableCascade_CheckpointLoader //Inspire [InspirePack_Backend]
export interface StableCascade$_CheckpointLoader_$3$3Inspire extends HasSingle_CLIP_VISION, HasSingle_CLIP, ComfyNode<StableCascade$_CheckpointLoader_$3$3Inspire_input, StableCascade$_CheckpointLoader_$3$3Inspire_output> {
    nameInComfy: "StableCascade_CheckpointLoader //Inspire"
}
export interface StableCascade$_CheckpointLoader_$3$3Inspire_output {
    b_model: ComfyNodeOutput<'MODEL', 0>,
    b_vae: ComfyNodeOutput<'VAE', 1>,
    c_model: ComfyNodeOutput<'MODEL', 2>,
    c_vae: ComfyNodeOutput<'VAE', 3>,
    c_clip_vision: ComfyNodeOutput<'CLIP_VISION', 4>,
    clip: ComfyNodeOutput<'CLIP', 5>,
    key_b: ComfyNodeOutput<'STRING', 6>,
    key_c: ComfyNodeOutput<'STRING', 7>,
}
export interface StableCascade$_CheckpointLoader_$3$3Inspire_input {
    /** default="AOM3A1_orangemixs.safetensors" */
    stage_b?: Enum_CheckpointLoaderSimple_ckpt_name
    /** */
    key_opt_b: _STRING
    /** default="AOM3A1_orangemixs.safetensors" */
    stage_c?: Enum_CheckpointLoaderSimple_ckpt_name
    /** */
    key_opt_c: _STRING
    /** default="none" */
    cache_mode?: Enum_StableCascade$_CheckpointLoader_$3$3Inspire_cache_mode
}

// FloatRange //Inspire [InspirePack_Util]
export interface FloatRange_$3$3Inspire extends HasSingle_FLOAT, ComfyNode<FloatRange_$3$3Inspire_input, FloatRange_$3$3Inspire_output> {
    nameInComfy: "FloatRange //Inspire"
}
export interface FloatRange_$3$3Inspire_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface FloatRange_$3$3Inspire_input {
    /** default=0 min=100 max=100 step=1e-9 */
    start?: _FLOAT
    /** default=1 min=100 max=100 step=1e-9 */
    stop?: _FLOAT
    /** default=0.01 min=100 max=100 step=1e-9 */
    step?: _FLOAT
    /** default=100 min=4096 max=4096 step=1 */
    limit?: _INT
    /** default=true */
    ensure_end?: _BOOLEAN
}

// ConcatConditioningsWithMultiplier //Inspire [InspirePack___for_testing]
export interface ConcatConditioningsWithMultiplier_$3$3Inspire extends HasSingle_CONDITIONING, ComfyNode<ConcatConditioningsWithMultiplier_$3$3Inspire_input, ConcatConditioningsWithMultiplier_$3$3Inspire_output> {
    nameInComfy: "ConcatConditioningsWithMultiplier //Inspire"
}
export interface ConcatConditioningsWithMultiplier_$3$3Inspire_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConcatConditioningsWithMultiplier_$3$3Inspire_input {
    conditioning1: _CONDITIONING
    /** default=1 min=10 max=10 step=0.01 */
    multiplier1?: _FLOAT
}

// ConditioningUpscale //Inspire [InspirePack_conditioning]
export interface ConditioningUpscale_$3$3Inspire extends HasSingle_CONDITIONING, ComfyNode<ConditioningUpscale_$3$3Inspire_input, ConditioningUpscale_$3$3Inspire_output> {
    nameInComfy: "ConditioningUpscale //Inspire"
}
export interface ConditioningUpscale_$3$3Inspire_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningUpscale_$3$3Inspire_input {
    conditioning: _CONDITIONING
    /** default=2 min=100 max=100 step=0.5 */
    scalar?: _INT
}

// ConditioningStretch //Inspire [InspirePack_conditioning]
export interface ConditioningStretch_$3$3Inspire extends HasSingle_CONDITIONING, ComfyNode<ConditioningStretch_$3$3Inspire_input, ConditioningStretch_$3$3Inspire_output> {
    nameInComfy: "ConditioningStretch //Inspire"
}
export interface ConditioningStretch_$3$3Inspire_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningStretch_$3$3Inspire_input {
    conditioning: _CONDITIONING
    /** default=512 min=16384 max=16384 step=64 */
    resolutionX?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolutionY?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    newWidth?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    newHeight?: _INT
}

// IPAdapterModelHelper //Inspire [InspirePack_models]
export interface IPAdapterModelHelper_$3$3Inspire extends HasSingle_IPADAPTER_PIPE, HasSingle_IPADAPTER, HasSingle_CLIP_VISION, HasSingle_INSIGHTFACE, HasSingle_MODEL, HasSingle_CLIP, ComfyNode<IPAdapterModelHelper_$3$3Inspire_input, IPAdapterModelHelper_$3$3Inspire_output> {
    nameInComfy: "IPAdapterModelHelper //Inspire"
}
export interface IPAdapterModelHelper_$3$3Inspire_output {
    IPADAPTER_PIPE: ComfyNodeOutput<'IPADAPTER_PIPE', 0>,
    IPADAPTER: ComfyNodeOutput<'IPADAPTER', 1>,
    CLIP_VISION: ComfyNodeOutput<'CLIP_VISION', 2>,
    INSIGHTFACE: ComfyNodeOutput<'INSIGHTFACE', 3>,
    MODEL: ComfyNodeOutput<'MODEL', 4>,
    CLIP: ComfyNodeOutput<'CLIP', 5>,
    insightface_cache_key: ComfyNodeOutput<'STRING', 6>,
    clip_vision_cache_key: ComfyNodeOutput<'STRING', 7>,
}
export interface IPAdapterModelHelper_$3$3Inspire_input {
    model: _MODEL
    preset: Enum_IPAdapterModelHelper_$3$3Inspire_preset
    /** default=1 min=20 max=20 step=0.01 */
    lora_strength_model?: _FLOAT
    /** default=1 min=20 max=20 step=0.01 */
    lora_strength_clip?: _FLOAT
    insightface_provider: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_provider
    /** default="insightface only" */
    cache_mode?: Enum_IPAdapterModelHelper_$3$3Inspire_cache_mode
    clip?: _CLIP
    insightface_model_name?: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_model_name
}

// RGB_HexToHSV //Inspire [InspirePack_Util]
export interface RGB$_HexToHSV_$3$3Inspire extends ComfyNode<RGB$_HexToHSV_$3$3Inspire_input, RGB$_HexToHSV_$3$3Inspire_output> {
    nameInComfy: "RGB_HexToHSV //Inspire"
}
export interface RGB$_HexToHSV_$3$3Inspire_output {
    hue: ComfyNodeOutput<'FLOAT', 0>,
    saturation: ComfyNodeOutput<'FLOAT', 1>,
    value: ComfyNodeOutput<'FLOAT', 2>,
}
export interface RGB$_HexToHSV_$3$3Inspire_input {
    /** */
    rgb_hex: _STRING
}

// BOOLConstant [KJNodes_constants]
export interface BOOLConstant extends HasSingle_BOOLEAN, ComfyNode<BOOLConstant_input, BOOLConstant_output> {
    nameInComfy: "BOOLConstant"
}
export interface BOOLConstant_output {
    value: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface BOOLConstant_input {
    /** default=true */
    value?: _BOOLEAN
}

// INTConstant [KJNodes_constants]
export interface INTConstant extends HasSingle_INT, ComfyNode<INTConstant_input, INTConstant_output> {
    nameInComfy: "INTConstant"
}
export interface INTConstant_output {
    value: ComfyNodeOutput<'INT', 0>,
}
export interface INTConstant_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    value?: _INT
}

// FloatConstant [KJNodes_constants]
export interface FloatConstant extends HasSingle_FLOAT, ComfyNode<FloatConstant_input, FloatConstant_output> {
    nameInComfy: "FloatConstant"
}
export interface FloatConstant_output {
    value: ComfyNodeOutput<'FLOAT', 0>,
}
export interface FloatConstant_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.001 */
    value?: _FLOAT
}

// StringConstant [KJNodes_constants]
export interface StringConstant extends HasSingle_STRING, ComfyNode<StringConstant_input, StringConstant_output> {
    nameInComfy: "StringConstant"
}
export interface StringConstant_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface StringConstant_input {
    /** default="" */
    string?: _STRING
}

// StringConstantMultiline [KJNodes_constants]
export interface StringConstantMultiline extends HasSingle_STRING, ComfyNode<StringConstantMultiline_input, StringConstantMultiline_output> {
    nameInComfy: "StringConstantMultiline"
}
export interface StringConstantMultiline_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface StringConstantMultiline_input {
    /** default="" */
    string?: _STRING
    /** default=true */
    strip_newlines?: _BOOLEAN
}

// ConditioningMultiCombine [KJNodes_masking_conditioning]
export interface ConditioningMultiCombine extends HasSingle_CONDITIONING, HasSingle_INT, ComfyNode<ConditioningMultiCombine_input, ConditioningMultiCombine_output> {
    nameInComfy: "ConditioningMultiCombine"
}
export interface ConditioningMultiCombine_output {
    combined: ComfyNodeOutput<'CONDITIONING', 0>,
    inputcount: ComfyNodeOutput<'INT', 1>,
}
export interface ConditioningMultiCombine_input {
    /** default=2 min=20 max=20 step=1 */
    inputcount?: _INT
    /** default="combine" */
    operation?: Enum_ConditioningMultiCombine_operation
    conditioning_1: _CONDITIONING
    conditioning_2: _CONDITIONING
}

// ConditioningSetMaskAndCombine [KJNodes_masking_conditioning]
export interface ConditioningSetMaskAndCombine extends ComfyNode<ConditioningSetMaskAndCombine_input, ConditioningSetMaskAndCombine_output> {
    nameInComfy: "ConditioningSetMaskAndCombine"
}
export interface ConditioningSetMaskAndCombine_output {
    combined_positive: ComfyNodeOutput<'CONDITIONING', 0>,
    combined_negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ConditioningSetMaskAndCombine_input {
    positive_1: _CONDITIONING
    negative_1: _CONDITIONING
    positive_2: _CONDITIONING
    negative_2: _CONDITIONING
    mask_1: _MASK
    mask_2: _MASK
    /** default=1 min=10 max=10 step=0.01 */
    mask_1_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_2_strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
}

// ConditioningSetMaskAndCombine3 [KJNodes_masking_conditioning]
export interface ConditioningSetMaskAndCombine3 extends ComfyNode<ConditioningSetMaskAndCombine3_input, ConditioningSetMaskAndCombine3_output> {
    nameInComfy: "ConditioningSetMaskAndCombine3"
}
export interface ConditioningSetMaskAndCombine3_output {
    combined_positive: ComfyNodeOutput<'CONDITIONING', 0>,
    combined_negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ConditioningSetMaskAndCombine3_input {
    positive_1: _CONDITIONING
    negative_1: _CONDITIONING
    positive_2: _CONDITIONING
    negative_2: _CONDITIONING
    positive_3: _CONDITIONING
    negative_3: _CONDITIONING
    mask_1: _MASK
    mask_2: _MASK
    mask_3: _MASK
    /** default=1 min=10 max=10 step=0.01 */
    mask_1_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_2_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_3_strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
}

// ConditioningSetMaskAndCombine4 [KJNodes_masking_conditioning]
export interface ConditioningSetMaskAndCombine4 extends ComfyNode<ConditioningSetMaskAndCombine4_input, ConditioningSetMaskAndCombine4_output> {
    nameInComfy: "ConditioningSetMaskAndCombine4"
}
export interface ConditioningSetMaskAndCombine4_output {
    combined_positive: ComfyNodeOutput<'CONDITIONING', 0>,
    combined_negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ConditioningSetMaskAndCombine4_input {
    positive_1: _CONDITIONING
    negative_1: _CONDITIONING
    positive_2: _CONDITIONING
    negative_2: _CONDITIONING
    positive_3: _CONDITIONING
    negative_3: _CONDITIONING
    positive_4: _CONDITIONING
    negative_4: _CONDITIONING
    mask_1: _MASK
    mask_2: _MASK
    mask_3: _MASK
    mask_4: _MASK
    /** default=1 min=10 max=10 step=0.01 */
    mask_1_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_2_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_3_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_4_strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
}

// ConditioningSetMaskAndCombine5 [KJNodes_masking_conditioning]
export interface ConditioningSetMaskAndCombine5 extends ComfyNode<ConditioningSetMaskAndCombine5_input, ConditioningSetMaskAndCombine5_output> {
    nameInComfy: "ConditioningSetMaskAndCombine5"
}
export interface ConditioningSetMaskAndCombine5_output {
    combined_positive: ComfyNodeOutput<'CONDITIONING', 0>,
    combined_negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface ConditioningSetMaskAndCombine5_input {
    positive_1: _CONDITIONING
    negative_1: _CONDITIONING
    positive_2: _CONDITIONING
    negative_2: _CONDITIONING
    positive_3: _CONDITIONING
    negative_3: _CONDITIONING
    positive_4: _CONDITIONING
    negative_4: _CONDITIONING
    positive_5: _CONDITIONING
    negative_5: _CONDITIONING
    mask_1: _MASK
    mask_2: _MASK
    mask_3: _MASK
    mask_4: _MASK
    mask_5: _MASK
    /** default=1 min=10 max=10 step=0.01 */
    mask_1_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_2_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_3_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_4_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    mask_5_strength?: _FLOAT
    set_cond_area: Enum_ConditioningSetMask_set_cond_area
}

// CondPassThrough [KJNodes_misc]
export interface CondPassThrough extends ComfyNode<CondPassThrough_input, CondPassThrough_output> {
    nameInComfy: "CondPassThrough"
}
export interface CondPassThrough_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface CondPassThrough_input {
    positive?: _CONDITIONING
    negative?: _CONDITIONING
}

// DownloadAndLoadCLIPSeg [KJNodes_masking]
export interface DownloadAndLoadCLIPSeg extends HasSingle_CLIPSEGMODEL, ComfyNode<DownloadAndLoadCLIPSeg_input, DownloadAndLoadCLIPSeg_output> {
    nameInComfy: "DownloadAndLoadCLIPSeg"
}
export interface DownloadAndLoadCLIPSeg_output {
    clipseg_model: ComfyNodeOutput<'CLIPSEGMODEL', 0>,
}
export interface DownloadAndLoadCLIPSeg_input {
    model: Enum_DownloadAndLoadCLIPSeg_model
}

// BatchCLIPSeg [KJNodes_masking]
export interface BatchCLIPSeg extends HasSingle_MASK, HasSingle_IMAGE, ComfyNode<BatchCLIPSeg_input, BatchCLIPSeg_output> {
    nameInComfy: "BatchCLIPSeg"
}
export interface BatchCLIPSeg_output {
    Mask: ComfyNodeOutput<'MASK', 0>,
    Image: ComfyNodeOutput<'IMAGE', 1>,
}
export interface BatchCLIPSeg_input {
    images: _IMAGE
    /** */
    text: _STRING
    /** default=0.5 min=10 max=10 step=0.001 */
    threshold?: _FLOAT
    /** default=true */
    binary_mask?: _BOOLEAN
    /** default=false */
    combine_mask?: _BOOLEAN
    /** default=true */
    use_cuda?: _BOOLEAN
    /** default=0 min=100 max=100 step=0.1 */
    blur_sigma?: _FLOAT
    opt_model?: _CLIPSEGMODEL
    /** */
    prev_mask?: _MASK
    /** default=0.5 min=1 max=1 step=0.01 */
    image_bg_level?: _FLOAT
    /** default=false */
    invert?: _BOOLEAN
}

// ColorToMask [KJNodes_masking]
export interface ColorToMask extends HasSingle_MASK, ComfyNode<ColorToMask_input, ColorToMask_output> {
    nameInComfy: "ColorToMask"
}
export interface ColorToMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ColorToMask_input {
    images: _IMAGE
    /** default=false */
    invert?: _BOOLEAN
    /** default=0 min=255 max=255 step=1 */
    red?: _INT
    /** default=0 min=255 max=255 step=1 */
    green?: _INT
    /** default=0 min=255 max=255 step=1 */
    blue?: _INT
    /** default=10 min=255 max=255 step=1 */
    threshold?: _INT
    /** default=16 min=4096 max=4096 step=1 */
    per_batch?: _INT
}

// CreateGradientMask [KJNodes_masking_generate]
export interface CreateGradientMask extends HasSingle_MASK, ComfyNode<CreateGradientMask_input, CreateGradientMask_output> {
    nameInComfy: "CreateGradientMask"
}
export interface CreateGradientMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface CreateGradientMask_input {
    /** default=false */
    invert?: _BOOLEAN
    /** default=0 min=255 max=255 step=1 */
    frames?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    height?: _INT
}

// CreateTextMask [KJNodes_text]
export interface CreateTextMask extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<CreateTextMask_input, CreateTextMask_output> {
    nameInComfy: "CreateTextMask"
}
export interface CreateTextMask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface CreateTextMask_input {
    /** default=false */
    invert?: _BOOLEAN
    /** default=1 min=4096 max=4096 step=1 */
    frames?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    text_x?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    text_y?: _INT
    /** default=32 min=4096 max=4096 step=1 */
    font_size?: _INT
    /** default="white" */
    font_color?: _STRING
    /** default="HELLO!" */
    text?: _STRING
    font: Enum_CreateTextMask_font
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=0 min=359 max=359 step=1 */
    start_rotation?: _INT
    /** default=0 min=359 max=359 step=1 */
    end_rotation?: _INT
}

// CreateAudioMask [KJNodes_deprecated]
export interface CreateAudioMask extends HasSingle_IMAGE, ComfyNode<CreateAudioMask_input, CreateAudioMask_output> {
    nameInComfy: "CreateAudioMask"
}
export interface CreateAudioMask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CreateAudioMask_input {
    /** default=false */
    invert?: _BOOLEAN
    /** default=16 min=255 max=255 step=1 */
    frames?: _INT
    /** default=0.5 min=2 max=2 step=0.01 */
    scale?: _FLOAT
    /** default="audio.wav" */
    audio_path?: _STRING
    /** default=256 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    height?: _INT
}

// CreateFadeMask [KJNodes_deprecated]
export interface CreateFadeMask extends HasSingle_MASK, ComfyNode<CreateFadeMask_input, CreateFadeMask_output> {
    nameInComfy: "CreateFadeMask"
}
export interface CreateFadeMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface CreateFadeMask_input {
    /** default=false */
    invert?: _BOOLEAN
    /** default=2 min=255 max=255 step=1 */
    frames?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    height?: _INT
    interpolation: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
    /** default=1 min=1 max=1 step=0.01 */
    start_level?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    midpoint_level?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    end_level?: _FLOAT
    /** default=0 min=4096 max=4096 step=1 */
    midpoint_frame?: _INT
}

// CreateFadeMaskAdvanced [KJNodes_masking_generate]
export interface CreateFadeMaskAdvanced extends HasSingle_MASK, ComfyNode<CreateFadeMaskAdvanced_input, CreateFadeMaskAdvanced_output> {
    nameInComfy: "CreateFadeMaskAdvanced"
}
export interface CreateFadeMaskAdvanced_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface CreateFadeMaskAdvanced_input {
    /** default="0:(0.0),\n7:(1.0),\n15:(0.0)\n" */
    points_string?: _STRING
    /** default=false */
    invert?: _BOOLEAN
    /** default=16 min=255 max=255 step=1 */
    frames?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    interpolation: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
}

// CreateFluidMask [KJNodes_masking_generate]
export interface CreateFluidMask extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<CreateFluidMask_input, CreateFluidMask_output> {
    nameInComfy: "CreateFluidMask"
}
export interface CreateFluidMask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface CreateFluidMask_input {
    /** default=false */
    invert?: _BOOLEAN
    /** default=1 min=4096 max=4096 step=1 */
    frames?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=3 min=255 max=255 step=1 */
    inflow_count?: _INT
    /** default=1 min=255 max=255 step=1 */
    inflow_velocity?: _INT
    /** default=8 min=255 max=255 step=1 */
    inflow_radius?: _INT
    /** default=50 min=255 max=255 step=1 */
    inflow_padding?: _INT
    /** default=60 min=255 max=255 step=1 */
    inflow_duration?: _INT
}

// CreateShapeMask [KJNodes_masking_generate]
export interface CreateShapeMask extends ComfyNode<CreateShapeMask_input, CreateShapeMask_output> {
    nameInComfy: "CreateShapeMask"
}
export interface CreateShapeMask_output {
    mask: ComfyNodeOutput<'MASK', 0>,
    mask_inverted: ComfyNodeOutput<'MASK', 1>,
}
export interface CreateShapeMask_input {
    /** default="circle" */
    shape?: Enum_CreateShapeMask_shape
    /** default=1 min=4096 max=4096 step=1 */
    frames?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    location_x?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    location_y?: _INT
    /** default=0 min=512 max=512 step=1 */
    grow?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    frame_width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    frame_height?: _INT
    /** default=128 min=4096 max=4096 step=1 */
    shape_width?: _INT
    /** default=128 min=4096 max=4096 step=1 */
    shape_height?: _INT
}

// CreateVoronoiMask [KJNodes_masking_generate]
export interface CreateVoronoiMask extends ComfyNode<CreateVoronoiMask_input, CreateVoronoiMask_output> {
    nameInComfy: "CreateVoronoiMask"
}
export interface CreateVoronoiMask_output {
    mask: ComfyNodeOutput<'MASK', 0>,
    mask_inverted: ComfyNodeOutput<'MASK', 1>,
}
export interface CreateVoronoiMask_input {
    /** default=16 min=4096 max=4096 step=1 */
    frames?: _INT
    /** default=15 min=4096 max=4096 step=1 */
    num_points?: _INT
    /** default=4 min=4096 max=4096 step=1 */
    line_width?: _INT
    /** default=0.5 min=1 max=1 step=0.01 */
    speed?: _FLOAT
    /** default=512 min=4096 max=4096 step=1 */
    frame_width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    frame_height?: _INT
}

// CreateMagicMask [KJNodes_masking_generate]
export interface CreateMagicMask extends ComfyNode<CreateMagicMask_input, CreateMagicMask_output> {
    nameInComfy: "CreateMagicMask"
}
export interface CreateMagicMask_output {
    mask: ComfyNodeOutput<'MASK', 0>,
    mask_inverted: ComfyNodeOutput<'MASK', 1>,
}
export interface CreateMagicMask_input {
    /** default=16 min=4096 max=4096 step=1 */
    frames?: _INT
    /** default=12 min=500 max=500 step=1 */
    depth?: _INT
    /** default=1.5 min=100 max=100 step=0.01 */
    distortion?: _FLOAT
    /** default=123 min=99999999 max=99999999 step=1 */
    seed?: _INT
    /** default=1 min=20 max=20 step=1 */
    transitions?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    frame_width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    frame_height?: _INT
}

// GetMaskSizeAndCount [KJNodes_masking]
export interface GetMaskSizeAndCount extends HasSingle_MASK, ComfyNode<GetMaskSizeAndCount_input, GetMaskSizeAndCount_output> {
    nameInComfy: "GetMaskSizeAndCount"
}
export interface GetMaskSizeAndCount_output {
    mask: ComfyNodeOutput<'MASK', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
    count: ComfyNodeOutput<'INT', 3>,
}
export interface GetMaskSizeAndCount_input {
    mask: _MASK
}

// GrowMaskWithBlur [KJNodes_masking]
export interface GrowMaskWithBlur extends ComfyNode<GrowMaskWithBlur_input, GrowMaskWithBlur_output> {
    nameInComfy: "GrowMaskWithBlur"
}
export interface GrowMaskWithBlur_output {
    mask: ComfyNodeOutput<'MASK', 0>,
    mask_inverted: ComfyNodeOutput<'MASK', 1>,
}
export interface GrowMaskWithBlur_input {
    mask: _MASK
    /** default=0 min=16384 max=16384 step=1 */
    expand?: _INT
    /** default=0 min=100 max=100 step=0.1 */
    incremental_expandrate?: _FLOAT
    /** default=true */
    tapered_corners?: _BOOLEAN
    /** default=false */
    flip_input?: _BOOLEAN
    /** default=0 min=100 max=100 step=0.1 */
    blur_radius?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    lerp_alpha?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    decay_factor?: _FLOAT
    /** default=false */
    fill_holes?: _BOOLEAN
}

// MaskBatchMulti [KJNodes_masking]
export interface MaskBatchMulti extends HasSingle_MASK, ComfyNode<MaskBatchMulti_input, MaskBatchMulti_output> {
    nameInComfy: "MaskBatchMulti"
}
export interface MaskBatchMulti_output {
    masks: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskBatchMulti_input {
    /** default=2 min=1000 max=1000 step=1 */
    inputcount?: _INT
    mask_1: _MASK
    mask_2: _MASK
}

// OffsetMask [KJNodes_masking]
export interface OffsetMask extends HasSingle_MASK, ComfyNode<OffsetMask_input, OffsetMask_output> {
    nameInComfy: "OffsetMask"
}
export interface OffsetMask_output {
    mask: ComfyNodeOutput<'MASK', 0>,
}
export interface OffsetMask_input {
    mask: _MASK
    /** default=0 min=16384 max=16384 step=1 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    y?: _INT
    /** default=0 min=360 max=360 step=1 */
    angle?: _INT
    /** default=1 min=1000 max=1000 step=1 */
    duplication_factor?: _INT
    /** default=false */
    roll?: _BOOLEAN
    /** default=false */
    incremental?: _BOOLEAN
    /** default="empty" */
    padding_mode?: Enum_OffsetMask_padding_mode
}

// RemapMaskRange [KJNodes_masking]
export interface RemapMaskRange extends HasSingle_MASK, ComfyNode<RemapMaskRange_input, RemapMaskRange_output> {
    nameInComfy: "RemapMaskRange"
}
export interface RemapMaskRange_output {
    mask: ComfyNodeOutput<'MASK', 0>,
}
export interface RemapMaskRange_input {
    mask: _MASK
    /** default=0 min=1 max=1 step=0.01 */
    min?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    max?: _FLOAT
}

// ResizeMask [KJNodes_masking]
export interface ResizeMask extends HasSingle_MASK, ComfyNode<ResizeMask_input, ResizeMask_output> {
    nameInComfy: "ResizeMask"
}
export interface ResizeMask_output {
    mask: ComfyNodeOutput<'MASK', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface ResizeMask_input {
    mask: _MASK
    /** default=512 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=false */
    keep_proportions?: _BOOLEAN
}

// RoundMask [KJNodes_masking]
export interface RoundMask extends HasSingle_MASK, ComfyNode<RoundMask_input, RoundMask_output> {
    nameInComfy: "RoundMask"
}
export interface RoundMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface RoundMask_input {
    mask: _MASK
}

// AddLabel [KJNodes_text]
export interface AddLabel extends HasSingle_IMAGE, ComfyNode<AddLabel_input, AddLabel_output> {
    nameInComfy: "AddLabel"
}
export interface AddLabel_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface AddLabel_input {
    image: _IMAGE
    /** default=10 min=4096 max=4096 step=1 */
    text_x?: _INT
    /** default=2 min=4096 max=4096 step=1 */
    text_y?: _INT
    /** default=48 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=32 min=4096 max=4096 step=1 */
    font_size?: _INT
    /** default="white" */
    font_color?: _STRING
    /** default="black" */
    label_color?: _STRING
    font: Enum_CreateTextMask_font
    /** default="Text" */
    text?: _STRING
    /** default="up" */
    direction?: Enum_AddLabel_direction
    /** default="" */
    caption?: _STRING
}

// ColorMatch [KJNodes_image]
export interface ColorMatch extends HasSingle_IMAGE, ComfyNode<ColorMatch_input, ColorMatch_output> {
    nameInComfy: "ColorMatch"
}
export interface ColorMatch_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ColorMatch_input {
    image_ref: _IMAGE
    image_target: _IMAGE
    /** default="mkl" */
    method?: Enum_ColorMatch_method
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
}

// CrossFadeImages [KJNodes_image]
export interface CrossFadeImages extends HasSingle_IMAGE, ComfyNode<CrossFadeImages_input, CrossFadeImages_output> {
    nameInComfy: "CrossFadeImages"
}
export interface CrossFadeImages_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CrossFadeImages_input {
    images_1: _IMAGE
    images_2: _IMAGE
    interpolation: Enum_CrossFadeImages_interpolation
    /** default=1 min=4096 max=4096 step=1 */
    transition_start_index?: _INT
    /** default=1 min=4096 max=4096 step=1 */
    transitioning_frames?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    start_level?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    end_level?: _FLOAT
}

// CrossFadeImagesMulti [KJNodes_image]
export interface CrossFadeImagesMulti extends HasSingle_IMAGE, ComfyNode<CrossFadeImagesMulti_input, CrossFadeImagesMulti_output> {
    nameInComfy: "CrossFadeImagesMulti"
}
export interface CrossFadeImagesMulti_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CrossFadeImagesMulti_input {
    /** default=2 min=1000 max=1000 step=1 */
    inputcount?: _INT
    image_1: _IMAGE
    image_2: _IMAGE
    interpolation: Enum_CrossFadeImages_interpolation
    /** default=1 min=4096 max=4096 step=1 */
    transitioning_frames?: _INT
}

// GetImagesFromBatchIndexed [KJNodes_image]
export interface GetImagesFromBatchIndexed extends HasSingle_IMAGE, ComfyNode<GetImagesFromBatchIndexed_input, GetImagesFromBatchIndexed_output> {
    nameInComfy: "GetImagesFromBatchIndexed"
}
export interface GetImagesFromBatchIndexed_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface GetImagesFromBatchIndexed_input {
    images: _IMAGE
    /** default="0, 1, 2" */
    indexes?: _STRING
}

// GetImageRangeFromBatch [KJNodes_image]
export interface GetImageRangeFromBatch extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<GetImageRangeFromBatch_input, GetImageRangeFromBatch_output> {
    nameInComfy: "GetImageRangeFromBatch"
}
export interface GetImageRangeFromBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface GetImageRangeFromBatch_input {
    /** default=0 min=4096 max=4096 step=1 */
    start_index?: _INT
    /** default=1 min=4096 max=4096 step=1 */
    num_frames?: _INT
    images?: _IMAGE
    masks?: _MASK
}

// GetImageSizeAndCount [KJNodes_image]
export interface GetImageSizeAndCount extends HasSingle_IMAGE, ComfyNode<GetImageSizeAndCount_input, GetImageSizeAndCount_output> {
    nameInComfy: "GetImageSizeAndCount"
}
export interface GetImageSizeAndCount_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
    count: ComfyNodeOutput<'INT', 3>,
}
export interface GetImageSizeAndCount_input {
    image: _IMAGE
}

// FastPreview [KJNodes_experimental]
export interface FastPreview extends ComfyNode<FastPreview_input, FastPreview_output> {
    nameInComfy: "FastPreview"
}
export interface FastPreview_output {
}
export interface FastPreview_input {
    image: _IMAGE
    /** default="JPEG" */
    format?: Enum_FastPreview_format
    /** default=75 min=100 max=100 step=1 */
    quality?: _INT
}

// ImageAndMaskPreview [KJNodes]
export interface ImageAndMaskPreview extends HasSingle_IMAGE, ComfyNode<ImageAndMaskPreview_input, ImageAndMaskPreview_output> {
    nameInComfy: "ImageAndMaskPreview"
}
export interface ImageAndMaskPreview_output {
    composite: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageAndMaskPreview_input {
    /** default=1 min=1 max=1 step=0.01 */
    mask_opacity?: _FLOAT
    /** default="255, 255, 255" */
    mask_color?: _STRING
    /** default=false */
    pass_through?: _BOOLEAN
    image?: _IMAGE
    mask?: _MASK
}

// ImageAddMulti [KJNodes_image]
export interface ImageAddMulti extends HasSingle_IMAGE, ComfyNode<ImageAddMulti_input, ImageAddMulti_output> {
    nameInComfy: "ImageAddMulti"
}
export interface ImageAddMulti_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageAddMulti_input {
    /** default=2 min=1000 max=1000 step=1 */
    inputcount?: _INT
    image_1: _IMAGE
    image_2: _IMAGE
    /** default="add" */
    blending?: Enum_ImageAddMulti_blending
    /** default=0.5 min=1 max=1 step=0.01 */
    blend_amount?: _FLOAT
}

// ImageBatchMulti [KJNodes_image]
export interface ImageBatchMulti extends HasSingle_IMAGE, ComfyNode<ImageBatchMulti_input, ImageBatchMulti_output> {
    nameInComfy: "ImageBatchMulti"
}
export interface ImageBatchMulti_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchMulti_input {
    /** default=2 min=1000 max=1000 step=1 */
    inputcount?: _INT
    image_1: _IMAGE
    image_2: _IMAGE
}

// ImageBatchRepeatInterleaving [KJNodes_image]
export interface ImageBatchRepeatInterleaving extends HasSingle_IMAGE, ComfyNode<ImageBatchRepeatInterleaving_input, ImageBatchRepeatInterleaving_output> {
    nameInComfy: "ImageBatchRepeatInterleaving"
}
export interface ImageBatchRepeatInterleaving_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchRepeatInterleaving_input {
    images: _IMAGE
    /** default=1 min=4096 max=4096 */
    repeats?: _INT
}

// ImageBatchTestPattern [KJNodes_text]
export interface ImageBatchTestPattern extends HasSingle_IMAGE, ComfyNode<ImageBatchTestPattern_input, ImageBatchTestPattern_output> {
    nameInComfy: "ImageBatchTestPattern"
}
export interface ImageBatchTestPattern_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchTestPattern_input {
    /** default=1 min=255 max=255 step=1 */
    batch_size?: _INT
    /** default=0 min=255 max=255 step=1 */
    start_from?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    text_x?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    text_y?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    font: Enum_CreateTextMask_font
    /** default=255 min=4096 max=4096 step=1 */
    font_size?: _INT
}

// ImageConcanate [KJNodes_image]
export interface ImageConcanate extends HasSingle_IMAGE, ComfyNode<ImageConcanate_input, ImageConcanate_output> {
    nameInComfy: "ImageConcanate"
}
export interface ImageConcanate_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageConcanate_input {
    image1: _IMAGE
    image2: _IMAGE
    /** default="right" */
    direction?: Enum_ImageConcanate_direction
    /** default=true */
    match_image_size?: _BOOLEAN
}

// ImageConcatFromBatch [KJNodes_image]
export interface ImageConcatFromBatch extends HasSingle_IMAGE, ComfyNode<ImageConcatFromBatch_input, ImageConcatFromBatch_output> {
    nameInComfy: "ImageConcatFromBatch"
}
export interface ImageConcatFromBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageConcatFromBatch_input {
    images: _IMAGE
    /** default=3 min=255 max=255 step=1 */
    num_columns?: _INT
    /** default=false */
    match_image_size?: _BOOLEAN
    /** default=4096 */
    max_resolution?: _INT
}

// ImageConcatMulti [KJNodes_image]
export interface ImageConcatMulti extends HasSingle_IMAGE, ComfyNode<ImageConcatMulti_input, ImageConcatMulti_output> {
    nameInComfy: "ImageConcatMulti"
}
export interface ImageConcatMulti_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageConcatMulti_input {
    /** default=2 min=1000 max=1000 step=1 */
    inputcount?: _INT
    image_1: _IMAGE
    image_2: _IMAGE
    /** default="right" */
    direction?: Enum_ImageConcanate_direction
    /** default=false */
    match_image_size?: _BOOLEAN
}

// ImageCropByMaskAndResize [KJNodes_image]
export interface ImageCropByMaskAndResize extends HasSingle_IMAGE, HasSingle_MASK, HasSingle_BBOX, ComfyNode<ImageCropByMaskAndResize_input, ImageCropByMaskAndResize_output> {
    nameInComfy: "ImageCropByMaskAndResize"
}
export interface ImageCropByMaskAndResize_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
    masks: ComfyNodeOutput<'MASK', 1>,
    bbox: ComfyNodeOutput<'BBOX', 2>,
}
export interface ImageCropByMaskAndResize_input {
    image: _IMAGE
    mask: _MASK
    /** default=512 min=16384 max=16384 step=8 */
    base_resolution?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    padding?: _INT
}

// ImageUncropByMask [KJNodes_image]
export interface ImageUncropByMask extends HasSingle_IMAGE, ComfyNode<ImageUncropByMask_input, ImageUncropByMask_output> {
    nameInComfy: "ImageUncropByMask"
}
export interface ImageUncropByMask_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageUncropByMask_input {
    destination: _IMAGE
    source: _IMAGE
    mask: _MASK
    bbox: _BBOX
}

// ImageGrabPIL [KJNodes_experimental]
export interface ImageGrabPIL extends HasSingle_IMAGE, ComfyNode<ImageGrabPIL_input, ImageGrabPIL_output> {
    nameInComfy: "ImageGrabPIL"
}
export interface ImageGrabPIL_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageGrabPIL_input {
    /** default=0 min=4096 max=4096 step=1 */
    x?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    y?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=1 min=255 max=255 step=1 */
    num_frames?: _INT
    /** default=0.1 min=10 max=10 step=0.01 */
    delay?: _FLOAT
}

// ImageGridComposite2x2 [KJNodes_image]
export interface ImageGridComposite2x2 extends HasSingle_IMAGE, ComfyNode<ImageGridComposite2x2_input, ImageGridComposite2x2_output> {
    nameInComfy: "ImageGridComposite2x2"
}
export interface ImageGridComposite2x2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageGridComposite2x2_input {
    image1: _IMAGE
    image2: _IMAGE
    image3: _IMAGE
    image4: _IMAGE
}

// ImageGridComposite3x3 [KJNodes_image]
export interface ImageGridComposite3x3 extends HasSingle_IMAGE, ComfyNode<ImageGridComposite3x3_input, ImageGridComposite3x3_output> {
    nameInComfy: "ImageGridComposite3x3"
}
export interface ImageGridComposite3x3_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageGridComposite3x3_input {
    image1: _IMAGE
    image2: _IMAGE
    image3: _IMAGE
    image4: _IMAGE
    image5: _IMAGE
    image6: _IMAGE
    image7: _IMAGE
    image8: _IMAGE
    image9: _IMAGE
}

// ImageGridtoBatch [KJNodes_image]
export interface ImageGridtoBatch extends HasSingle_IMAGE, ComfyNode<ImageGridtoBatch_input, ImageGridtoBatch_output> {
    nameInComfy: "ImageGridtoBatch"
}
export interface ImageGridtoBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageGridtoBatch_input {
    image: _IMAGE
    /** default=3 min=8 max=8 */
    columns?: _INT
    /** default=0 min=8 max=8 */
    rows?: _INT
}

// ImageNormalize_Neg1_To_1 [KJNodes_image]
export interface ImageNormalize$_Neg1$_To$_1 extends HasSingle_IMAGE, ComfyNode<ImageNormalize$_Neg1$_To$_1_input, ImageNormalize$_Neg1$_To$_1_output> {
    nameInComfy: "ImageNormalize_Neg1_To_1"
}
export interface ImageNormalize$_Neg1$_To$_1_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageNormalize$_Neg1$_To$_1_input {
    images: _IMAGE
}

// ImagePass [KJNodes_image]
export interface ImagePass extends HasSingle_IMAGE, ComfyNode<ImagePass_input, ImagePass_output> {
    nameInComfy: "ImagePass"
}
export interface ImagePass_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImagePass_input {
    image?: _IMAGE
}

// ImagePadForOutpaintMasked [image]
export interface ImagePadForOutpaintMasked extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ImagePadForOutpaintMasked_input, ImagePadForOutpaintMasked_output> {
    nameInComfy: "ImagePadForOutpaintMasked"
}
export interface ImagePadForOutpaintMasked_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface ImagePadForOutpaintMasked_input {
    image: _IMAGE
    /** default=0 min=16384 max=16384 step=8 */
    left?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    top?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    right?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    bottom?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    feathering?: _INT
    mask?: _MASK
}

// ImagePadForOutpaintTargetSize [image]
export interface ImagePadForOutpaintTargetSize extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ImagePadForOutpaintTargetSize_input, ImagePadForOutpaintTargetSize_output> {
    nameInComfy: "ImagePadForOutpaintTargetSize"
}
export interface ImagePadForOutpaintTargetSize_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface ImagePadForOutpaintTargetSize_input {
    image: _IMAGE
    /** default=0 min=16384 max=16384 step=8 */
    target_width?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    target_height?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    feathering?: _INT
    upscale_method: Enum_ImageScale_upscale_method
    mask?: _MASK
}

// ImageResizeKJ [KJNodes_image]
export interface ImageResizeKJ extends HasSingle_IMAGE, ComfyNode<ImageResizeKJ_input, ImageResizeKJ_output> {
    nameInComfy: "ImageResizeKJ"
}
export interface ImageResizeKJ_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface ImageResizeKJ_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    height?: _INT
    upscale_method: Enum_ImageScale_upscale_method
    /** default=false */
    keep_proportion?: _BOOLEAN
    /** default=2 min=512 max=512 step=1 */
    divisible_by?: _INT
    /** */
    width_input?: _INT
    /** */
    height_input?: _INT
    get_image_size?: _IMAGE
    crop?: Enum_LatentUpscale_crop
}

// ImageUpscaleWithModelBatched [KJNodes_image]
export interface ImageUpscaleWithModelBatched extends HasSingle_IMAGE, ComfyNode<ImageUpscaleWithModelBatched_input, ImageUpscaleWithModelBatched_output> {
    nameInComfy: "ImageUpscaleWithModelBatched"
}
export interface ImageUpscaleWithModelBatched_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageUpscaleWithModelBatched_input {
    upscale_model: _UPSCALE_MODEL
    images: _IMAGE
    /** default=16 min=4096 max=4096 step=1 */
    per_batch?: _INT
}

// InsertImagesToBatchIndexed [KJNodes_image]
export interface InsertImagesToBatchIndexed extends HasSingle_IMAGE, ComfyNode<InsertImagesToBatchIndexed_input, InsertImagesToBatchIndexed_output> {
    nameInComfy: "InsertImagesToBatchIndexed"
}
export interface InsertImagesToBatchIndexed_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface InsertImagesToBatchIndexed_input {
    original_images: _IMAGE
    images_to_insert: _IMAGE
    /** default="0, 1, 2" */
    indexes?: _STRING
}

// LoadAndResizeImage [KJNodes_image]
export interface LoadAndResizeImage extends HasSingle_IMAGE, HasSingle_MASK, HasSingle_STRING, ComfyNode<LoadAndResizeImage_input, LoadAndResizeImage_output> {
    nameInComfy: "LoadAndResizeImage"
}
export interface LoadAndResizeImage_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
    width: ComfyNodeOutput<'INT', 2>,
    height: ComfyNodeOutput<'INT', 3>,
    image_path: ComfyNodeOutput<'STRING', 4>,
}
export interface LoadAndResizeImage_input {
    /** */
    image: Enum_LoadImage_image
    /** default=false */
    resize?: _BOOLEAN
    /** default=512 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1 min=4096 max=4096 step=1 */
    repeat?: _INT
    /** default=false */
    keep_proportion?: _BOOLEAN
    /** default=2 min=512 max=512 step=1 */
    divisible_by?: _INT
    /** */
    mask_channel: Enum_LoadImageMask_channel
    /** default="" */
    background_color?: _STRING
}

// LoadImagesFromFolderKJ [image]
export interface LoadImagesFromFolderKJ extends HasSingle_IMAGE, HasSingle_MASK, HasSingle_INT, HasSingle_STRING, ComfyNode<LoadImagesFromFolderKJ_input, LoadImagesFromFolderKJ_output> {
    nameInComfy: "LoadImagesFromFolderKJ"
}
export interface LoadImagesFromFolderKJ_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
    count: ComfyNodeOutput<'INT', 2>,
    image_path: ComfyNodeOutput<'STRING', 3>,
}
export interface LoadImagesFromFolderKJ_input {
    /** default="" */
    folder?: _STRING
    /** default=0 min=undefined step=1 */
    image_load_cap?: _INT
    /** default=0 min=undefined step=1 */
    start_index?: _INT
}

// MergeImageChannels [KJNodes_image]
export interface MergeImageChannels extends HasSingle_IMAGE, ComfyNode<MergeImageChannels_input, MergeImageChannels_output> {
    nameInComfy: "MergeImageChannels"
}
export interface MergeImageChannels_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MergeImageChannels_input {
    red: _IMAGE
    green: _IMAGE
    blue: _IMAGE
    /** */
    alpha?: _MASK
}

// PreviewAnimation [KJNodes_image]
export interface PreviewAnimation extends ComfyNode<PreviewAnimation_input, PreviewAnimation_output> {
    nameInComfy: "PreviewAnimation"
}
export interface PreviewAnimation_output {
}
export interface PreviewAnimation_input {
    /** default=8 min=1000 max=1000 step=0.01 */
    fps?: _FLOAT
    images?: _IMAGE
    masks?: _MASK
}

// RemapImageRange [KJNodes_image]
export interface RemapImageRange extends HasSingle_IMAGE, ComfyNode<RemapImageRange_input, RemapImageRange_output> {
    nameInComfy: "RemapImageRange"
}
export interface RemapImageRange_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface RemapImageRange_input {
    image: _IMAGE
    /** default=0 min=1 max=1 step=0.01 */
    min?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    max?: _FLOAT
    /** default=true */
    clamp?: _BOOLEAN
}

// ReverseImageBatch [KJNodes_image]
export interface ReverseImageBatch extends HasSingle_IMAGE, ComfyNode<ReverseImageBatch_input, ReverseImageBatch_output> {
    nameInComfy: "ReverseImageBatch"
}
export interface ReverseImageBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ReverseImageBatch_input {
    images: _IMAGE
}

// ReplaceImagesInBatch [KJNodes_image]
export interface ReplaceImagesInBatch extends HasSingle_IMAGE, ComfyNode<ReplaceImagesInBatch_input, ReplaceImagesInBatch_output> {
    nameInComfy: "ReplaceImagesInBatch"
}
export interface ReplaceImagesInBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ReplaceImagesInBatch_input {
    original_images: _IMAGE
    replacement_images: _IMAGE
    /** default=1 min=4096 max=4096 step=1 */
    start_index?: _INT
}

// SaveImageWithAlpha [KJNodes_image]
export interface SaveImageWithAlpha extends ComfyNode<SaveImageWithAlpha_input, SaveImageWithAlpha_output> {
    nameInComfy: "SaveImageWithAlpha"
}
export interface SaveImageWithAlpha_output {
}
export interface SaveImageWithAlpha_input {
    images: _IMAGE
    mask: _MASK
    /** default="ComfyUI" */
    filename_prefix?: _STRING
}

// SaveImageKJ [image]
export interface SaveImageKJ extends HasSingle_STRING, ComfyNode<SaveImageKJ_input, SaveImageKJ_output> {
    nameInComfy: "SaveImageKJ"
}
export interface SaveImageKJ_output {
    filename: ComfyNodeOutput<'STRING', 0>,
}
export interface SaveImageKJ_input {
    /** */
    images: _IMAGE
    /** default="ComfyUI" */
    filename_prefix?: _STRING
    /** default="output" */
    output_folder?: _STRING
    /** default=".txt" */
    caption_file_extension?: _STRING
    /** */
    caption?: _STRING
}

// ShuffleImageBatch [KJNodes_image]
export interface ShuffleImageBatch extends HasSingle_IMAGE, ComfyNode<ShuffleImageBatch_input, ShuffleImageBatch_output> {
    nameInComfy: "ShuffleImageBatch"
}
export interface ShuffleImageBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ShuffleImageBatch_input {
    images: _IMAGE
    /** default=123 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
}

// SplitImageChannels [KJNodes_image]
export interface SplitImageChannels extends HasSingle_MASK, ComfyNode<SplitImageChannels_input, SplitImageChannels_output> {
    nameInComfy: "SplitImageChannels"
}
export interface SplitImageChannels_output {
    red: ComfyNodeOutput<'IMAGE', 0>,
    green: ComfyNodeOutput<'IMAGE', 1>,
    blue: ComfyNodeOutput<'IMAGE', 2>,
    mask: ComfyNodeOutput<'MASK', 3>,
}
export interface SplitImageChannels_input {
    image: _IMAGE
}

// TransitionImagesMulti [KJNodes_image]
export interface TransitionImagesMulti extends HasSingle_IMAGE, ComfyNode<TransitionImagesMulti_input, TransitionImagesMulti_output> {
    nameInComfy: "TransitionImagesMulti"
}
export interface TransitionImagesMulti_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface TransitionImagesMulti_input {
    /** default=2 min=1000 max=1000 step=1 */
    inputcount?: _INT
    image_1: _IMAGE
    image_2: _IMAGE
    interpolation: Enum_CrossFadeImages_interpolation
    transition_type: Enum_TransitionImagesMulti_transition_type
    /** default=1 min=4096 max=4096 step=1 */
    transitioning_frames?: _INT
    /** default=0 min=100 max=100 step=0.1 */
    blur_radius?: _FLOAT
    /** default=false */
    reverse?: _BOOLEAN
    /** default="CPU" */
    device?: Enum_NoiseInjectionHookProvider_source
}

// TransitionImagesInBatch [KJNodes_image]
export interface TransitionImagesInBatch extends HasSingle_IMAGE, ComfyNode<TransitionImagesInBatch_input, TransitionImagesInBatch_output> {
    nameInComfy: "TransitionImagesInBatch"
}
export interface TransitionImagesInBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface TransitionImagesInBatch_input {
    images: _IMAGE
    interpolation: Enum_CrossFadeImages_interpolation
    transition_type: Enum_TransitionImagesMulti_transition_type
    /** default=1 min=4096 max=4096 step=1 */
    transitioning_frames?: _INT
    /** default=0 min=100 max=100 step=0.1 */
    blur_radius?: _FLOAT
    /** default=false */
    reverse?: _BOOLEAN
    /** default="CPU" */
    device?: Enum_NoiseInjectionHookProvider_source
}

// BatchCropFromMask [KJNodes_masking]
export interface BatchCropFromMask extends HasSingle_BBOX, ComfyNode<BatchCropFromMask_input, BatchCropFromMask_output> {
    nameInComfy: "BatchCropFromMask"
}
export interface BatchCropFromMask_output {
    original_images: ComfyNodeOutput<'IMAGE', 0>,
    cropped_images: ComfyNodeOutput<'IMAGE', 1>,
    bboxes: ComfyNodeOutput<'BBOX', 2>,
    width: ComfyNodeOutput<'INT', 3>,
    height: ComfyNodeOutput<'INT', 4>,
}
export interface BatchCropFromMask_input {
    original_images: _IMAGE
    masks: _MASK
    /** default=1 min=10 max=10 step=0.001 */
    crop_size_mult?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_smooth_alpha?: _FLOAT
}

// BatchCropFromMaskAdvanced [KJNodes_masking]
export interface BatchCropFromMaskAdvanced extends ComfyNode<BatchCropFromMaskAdvanced_input, BatchCropFromMaskAdvanced_output> {
    nameInComfy: "BatchCropFromMaskAdvanced"
}
export interface BatchCropFromMaskAdvanced_output {
    original_images: ComfyNodeOutput<'IMAGE', 0>,
    cropped_images: ComfyNodeOutput<'IMAGE', 1>,
    cropped_masks: ComfyNodeOutput<'MASK', 2>,
    combined_crop_image: ComfyNodeOutput<'IMAGE', 3>,
    combined_crop_masks: ComfyNodeOutput<'MASK', 4>,
    bboxes: ComfyNodeOutput<'BBOX', 5>,
    combined_bounding_box: ComfyNodeOutput<'BBOX', 6>,
    bbox_width: ComfyNodeOutput<'INT', 7>,
    bbox_height: ComfyNodeOutput<'INT', 8>,
}
export interface BatchCropFromMaskAdvanced_input {
    original_images: _IMAGE
    masks: _MASK
    /** default=1 min=10 max=10 step=0.01 */
    crop_size_mult?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_smooth_alpha?: _FLOAT
}

// FilterZeroMasksAndCorrespondingImages [KJNodes_masking]
export interface FilterZeroMasksAndCorrespondingImages extends HasSingle_MASK, HasSingle_INDEXES, ComfyNode<FilterZeroMasksAndCorrespondingImages_input, FilterZeroMasksAndCorrespondingImages_output> {
    nameInComfy: "FilterZeroMasksAndCorrespondingImages"
}
export interface FilterZeroMasksAndCorrespondingImages_output {
    non_zero_masks_out: ComfyNodeOutput<'MASK', 0>,
    non_zero_mask_images_out: ComfyNodeOutput<'IMAGE', 1>,
    zero_mask_images_out: ComfyNodeOutput<'IMAGE', 2>,
    zero_mask_images_out_indexes: ComfyNodeOutput<'INDEXES', 3>,
}
export interface FilterZeroMasksAndCorrespondingImages_input {
    masks: _MASK
    original_images?: _IMAGE
}

// InsertImageBatchByIndexes [KJNodes_image]
export interface InsertImageBatchByIndexes extends HasSingle_IMAGE, ComfyNode<InsertImageBatchByIndexes_input, InsertImageBatchByIndexes_output> {
    nameInComfy: "InsertImageBatchByIndexes"
}
export interface InsertImageBatchByIndexes_output {
    images_after_insert: ComfyNodeOutput<'IMAGE', 0>,
}
export interface InsertImageBatchByIndexes_input {
    images: _IMAGE
    images_to_insert: _IMAGE
    insert_indexes: _INDEXES
}

// BatchUncrop [KJNodes_masking]
export interface BatchUncrop extends HasSingle_IMAGE, ComfyNode<BatchUncrop_input, BatchUncrop_output> {
    nameInComfy: "BatchUncrop"
}
export interface BatchUncrop_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface BatchUncrop_input {
    original_images: _IMAGE
    cropped_images: _IMAGE
    bboxes: _BBOX
    /** default=0.25 min=1 max=1 step=0.01 */
    border_blending?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    crop_rescale?: _FLOAT
    /** default=true */
    border_top?: _BOOLEAN
    /** default=true */
    border_bottom?: _BOOLEAN
    /** default=true */
    border_left?: _BOOLEAN
    /** default=true */
    border_right?: _BOOLEAN
}

// BatchUncropAdvanced [KJNodes_masking]
export interface BatchUncropAdvanced extends HasSingle_IMAGE, ComfyNode<BatchUncropAdvanced_input, BatchUncropAdvanced_output> {
    nameInComfy: "BatchUncropAdvanced"
}
export interface BatchUncropAdvanced_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface BatchUncropAdvanced_input {
    original_images: _IMAGE
    cropped_images: _IMAGE
    cropped_masks: _MASK
    combined_crop_mask: _MASK
    bboxes: _BBOX
    /** default=0.25 min=1 max=1 step=0.01 */
    border_blending?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    crop_rescale?: _FLOAT
    /** default=false */
    use_combined_mask?: _BOOLEAN
    /** default=true */
    use_square_mask?: _BOOLEAN
    /** */
    combined_bounding_box?: _BBOX
}

// SplitBboxes [KJNodes_masking]
export interface SplitBboxes extends ComfyNode<SplitBboxes_input, SplitBboxes_output> {
    nameInComfy: "SplitBboxes"
}
export interface SplitBboxes_output {
    bboxes_a: ComfyNodeOutput<'BBOX', 0>,
    bboxes_b: ComfyNodeOutput<'BBOX', 1>,
}
export interface SplitBboxes_input {
    bboxes: _BBOX
    /** default=0 min=99999999 max=99999999 step=1 */
    index?: _INT
}

// BboxToInt [KJNodes_masking]
export interface BboxToInt extends ComfyNode<BboxToInt_input, BboxToInt_output> {
    nameInComfy: "BboxToInt"
}
export interface BboxToInt_output {
    x_min: ComfyNodeOutput<'INT', 0>,
    y_min: ComfyNodeOutput<'INT', 1>,
    width: ComfyNodeOutput<'INT', 2>,
    height: ComfyNodeOutput<'INT', 3>,
    center_x: ComfyNodeOutput<'INT', 4>,
    center_y: ComfyNodeOutput<'INT', 5>,
}
export interface BboxToInt_input {
    bboxes: _BBOX
    /** default=0 min=99999999 max=99999999 step=1 */
    index?: _INT
}

// BboxVisualize [KJNodes_masking]
export interface BboxVisualize extends HasSingle_IMAGE, ComfyNode<BboxVisualize_input, BboxVisualize_output> {
    nameInComfy: "BboxVisualize"
}
export interface BboxVisualize_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface BboxVisualize_input {
    images: _IMAGE
    bboxes: _BBOX
    /** default=1 min=10 max=10 step=1 */
    line_width?: _INT
}

// GenerateNoise [KJNodes_noise]
export interface GenerateNoise extends HasSingle_LATENT, ComfyNode<GenerateNoise_input, GenerateNoise_output> {
    nameInComfy: "GenerateNoise"
}
export interface GenerateNoise_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface GenerateNoise_input {
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
    /** default=123 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
    /** default=1 min=4096 max=4096 step=0.01 */
    multiplier?: _FLOAT
    /** default=false */
    constant_batch_noise?: _BOOLEAN
    /** default=false */
    normalize?: _BOOLEAN
    model?: _MODEL
    sigmas?: _SIGMAS
    latent_channels?: Enum_GenerateNoise_latent_channels
}

// FlipSigmasAdjusted [KJNodes_noise]
export interface FlipSigmasAdjusted extends HasSingle_SIGMAS, HasSingle_STRING, ComfyNode<FlipSigmasAdjusted_input, FlipSigmasAdjusted_output> {
    nameInComfy: "FlipSigmasAdjusted"
}
export interface FlipSigmasAdjusted_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
    sigmas_string: ComfyNodeOutput<'STRING', 1>,
}
export interface FlipSigmasAdjusted_input {
    sigmas: _SIGMAS
    /** default=false */
    divide_by_last_sigma?: _BOOLEAN
    /** default=1 min=255 max=255 step=0.01 */
    divide_by?: _FLOAT
    /** default=1 min=100 max=100 step=1 */
    offset_by?: _INT
}

// InjectNoiseToLatent [KJNodes_noise]
export interface InjectNoiseToLatent extends HasSingle_LATENT, ComfyNode<InjectNoiseToLatent_input, InjectNoiseToLatent_output> {
    nameInComfy: "InjectNoiseToLatent"
}
export interface InjectNoiseToLatent_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface InjectNoiseToLatent_input {
    latents: _LATENT
    /** default=0.1 min=200 max=200 step=0.0001 */
    strength?: _FLOAT
    noise: _LATENT
    /** default=false */
    normalize?: _BOOLEAN
    /** default=false */
    average?: _BOOLEAN
    mask?: _MASK
    /** default=0 min=1000 max=1000 step=0.001 */
    mix_randn_amount?: _FLOAT
    /** default=123 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
}

// CustomSigmas [KJNodes_noise]
export interface CustomSigmas extends HasSingle_SIGMAS, ComfyNode<CustomSigmas_input, CustomSigmas_output> {
    nameInComfy: "CustomSigmas"
}
export interface CustomSigmas_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface CustomSigmas_input {
    /** default="14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029" */
    sigmas_string?: _STRING
    /** default=10 min=255 max=255 step=1 */
    interpolate_to_steps?: _INT
}

// WidgetToString [KJNodes_text]
export interface WidgetToString extends HasSingle_STRING, ComfyNode<WidgetToString_input, WidgetToString_output> {
    nameInComfy: "WidgetToString"
}
export interface WidgetToString_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface WidgetToString_input {
    /** default=0 */
    id?: _INT
    /** */
    widget_name: _STRING
    /** default=false */
    return_all?: _BOOLEAN
    /** */
    any_input?: _$Star
    /** */
    node_title?: _STRING
}

// DummyOut [KJNodes_misc]
export interface DummyOut extends HasSingle_$Star, ComfyNode<DummyOut_input, DummyOut_output> {
    nameInComfy: "DummyOut"
}
export interface DummyOut_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface DummyOut_input {
    /** */
    any_input: _$Star
}

// GetLatentsFromBatchIndexed [KJNodes]
export interface GetLatentsFromBatchIndexed extends HasSingle_LATENT, ComfyNode<GetLatentsFromBatchIndexed_input, GetLatentsFromBatchIndexed_output> {
    nameInComfy: "GetLatentsFromBatchIndexed"
}
export interface GetLatentsFromBatchIndexed_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface GetLatentsFromBatchIndexed_input {
    latents: _LATENT
    /** default="0, 1, 2" */
    indexes?: _STRING
}

// ScaleBatchPromptSchedule [KJNodes]
export interface ScaleBatchPromptSchedule extends HasSingle_STRING, ComfyNode<ScaleBatchPromptSchedule_input, ScaleBatchPromptSchedule_output> {
    nameInComfy: "ScaleBatchPromptSchedule"
}
export interface ScaleBatchPromptSchedule_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ScaleBatchPromptSchedule_input {
    /** default="0:(0.0),\n7:(1.0),\n15:(0.0)\n" */
    input_str?: _STRING
    /** default=1 min=4096 max=4096 step=1 */
    old_frame_count?: _INT
    /** default=1 min=4096 max=4096 step=1 */
    new_frame_count?: _INT
}

// CameraPoseVisualizer [KJNodes_misc]
export interface CameraPoseVisualizer extends HasSingle_IMAGE, ComfyNode<CameraPoseVisualizer_input, CameraPoseVisualizer_output> {
    nameInComfy: "CameraPoseVisualizer"
}
export interface CameraPoseVisualizer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CameraPoseVisualizer_input {
    /** default="" */
    pose_file_path?: _STRING
    /** default=0.2 min=100 max=100 step=0.01 */
    base_xval?: _FLOAT
    /** default=0.3 min=100 max=100 step=0.01 */
    zval?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    scale?: _FLOAT
    /** default=false */
    use_exact_fx?: _BOOLEAN
    /** default=true */
    relative_c2w?: _BOOLEAN
    /** default=false */
    use_viewer?: _BOOLEAN
    /** */
    cameractrl_poses?: _CAMERACTRL_POSES
}

// AppendStringsToList [KJNodes_constants]
export interface AppendStringsToList extends HasSingle_STRING, ComfyNode<AppendStringsToList_input, AppendStringsToList_output> {
    nameInComfy: "AppendStringsToList"
}
export interface AppendStringsToList_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface AppendStringsToList_input {
    /** default="" */
    string1?: _STRING
    /** default="" */
    string2?: _STRING
}

// JoinStrings [KJNodes_constants]
export interface JoinStrings extends HasSingle_STRING, ComfyNode<JoinStrings_input, JoinStrings_output> {
    nameInComfy: "JoinStrings"
}
export interface JoinStrings_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface JoinStrings_input {
    /** default="" */
    string1?: _STRING
    /** default="" */
    string2?: _STRING
    /** default=" " */
    delimiter?: _STRING
}

// JoinStringMulti [KJNodes]
export interface JoinStringMulti extends HasSingle_STRING, ComfyNode<JoinStringMulti_input, JoinStringMulti_output> {
    nameInComfy: "JoinStringMulti"
}
export interface JoinStringMulti_output {
    string: ComfyNodeOutput<'STRING', 0>,
}
export interface JoinStringMulti_input {
    /** default=2 min=1000 max=1000 step=1 */
    inputcount?: _INT
    /** default="" */
    string_1?: _STRING
    /** default="" */
    string_2?: _STRING
    /** default=" " */
    delimiter?: _STRING
    /** default=false */
    return_list?: _BOOLEAN
}

// SomethingToString [KJNodes_text]
export interface SomethingToString extends HasSingle_STRING, ComfyNode<SomethingToString_input, SomethingToString_output> {
    nameInComfy: "SomethingToString"
}
export interface SomethingToString_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface SomethingToString_input {
    /** */
    input: _$Star
    /** default="" */
    prefix?: _STRING
    /** default="" */
    suffix?: _STRING
}

// Sleep [KJNodes_misc]
export interface Sleep extends HasSingle_$Star, ComfyNode<Sleep_input, Sleep_output> {
    nameInComfy: "Sleep"
}
export interface Sleep_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface Sleep_input {
    /** */
    input: _$Star
    /** default=0 min=1439 max=1439 */
    minutes?: _INT
    /** default=0 min=59.99 max=59.99 step=0.01 */
    seconds?: _FLOAT
}

// VRAM_Debug [KJNodes_misc]
export interface VRAM$_Debug extends HasSingle_$Star, HasSingle_IMAGE, HasSingle_MODEL, ComfyNode<VRAM$_Debug_input, VRAM$_Debug_output> {
    nameInComfy: "VRAM_Debug"
}
export interface VRAM$_Debug_output {
    any_output: ComfyNodeOutput<'$Star', 0>,
    image_pass: ComfyNodeOutput<'IMAGE', 1>,
    model_pass: ComfyNodeOutput<'MODEL', 2>,
    freemem_before: ComfyNodeOutput<'INT', 3>,
    freemem_after: ComfyNodeOutput<'INT', 4>,
}
export interface VRAM$_Debug_input {
    /** default=true */
    empty_cache?: _BOOLEAN
    /** default=true */
    gc_collect?: _BOOLEAN
    /** default=false */
    unload_all_models?: _BOOLEAN
    /** */
    any_input?: _$Star
    image_pass?: _IMAGE
    model_pass?: _MODEL
}

// EmptyLatentImagePresets [KJNodes]
export interface EmptyLatentImagePresets extends HasSingle_LATENT, ComfyNode<EmptyLatentImagePresets_input, EmptyLatentImagePresets_output> {
    nameInComfy: "EmptyLatentImagePresets"
}
export interface EmptyLatentImagePresets_output {
    Latent: ComfyNodeOutput<'LATENT', 0>,
    Width: ComfyNodeOutput<'INT', 1>,
    Height: ComfyNodeOutput<'INT', 2>,
}
export interface EmptyLatentImagePresets_input {
    /** default="512 x 512 (1:1)" */
    dimensions?: Enum_EmptyLatentImagePresets_dimensions
    /** default=false */
    invert?: _BOOLEAN
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// EmptyLatentImageCustomPresets [KJNodes]
export interface EmptyLatentImageCustomPresets extends HasSingle_LATENT, ComfyNode<EmptyLatentImageCustomPresets_input, EmptyLatentImageCustomPresets_output> {
    nameInComfy: "EmptyLatentImageCustomPresets"
}
export interface EmptyLatentImageCustomPresets_output {
    Latent: ComfyNodeOutput<'LATENT', 0>,
    Width: ComfyNodeOutput<'INT', 1>,
    Height: ComfyNodeOutput<'INT', 2>,
}
export interface EmptyLatentImageCustomPresets_input {
    dimensions: Enum_EmptyLatentImageCustomPresets_dimensions
    /** default=false */
    invert?: _BOOLEAN
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// ModelPassThrough [KJNodes_misc]
export interface ModelPassThrough extends HasSingle_MODEL, ComfyNode<ModelPassThrough_input, ModelPassThrough_output> {
    nameInComfy: "ModelPassThrough"
}
export interface ModelPassThrough_output {
    model: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelPassThrough_input {
    model?: _MODEL
}

// ModelSaveKJ [advanced_model_merging]
export interface ModelSaveKJ extends ComfyNode<ModelSaveKJ_input, ModelSaveKJ_output> {
    nameInComfy: "ModelSaveKJ"
}
export interface ModelSaveKJ_output {
}
export interface ModelSaveKJ_input {
    model: _MODEL
    /** default="diffusion_models/ComfyUI" */
    filename_prefix?: _STRING
    /** default="model.diffusion_model." */
    model_key_prefix?: _STRING
}

// SetShakkerLabsUnionControlNetType [conditioning_controlnet]
export interface SetShakkerLabsUnionControlNetType extends HasSingle_CONTROL_NET, ComfyNode<SetShakkerLabsUnionControlNetType_input, SetShakkerLabsUnionControlNetType_output> {
    nameInComfy: "SetShakkerLabsUnionControlNetType"
}
export interface SetShakkerLabsUnionControlNetType_output {
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 0>,
}
export interface SetShakkerLabsUnionControlNetType_input {
    control_net: _CONTROL_NET
    type: Enum_SetShakkerLabsUnionControlNetType_type
}

// NormalizedAmplitudeToMask [KJNodes_audio]
export interface NormalizedAmplitudeToMask extends HasSingle_MASK, ComfyNode<NormalizedAmplitudeToMask_input, NormalizedAmplitudeToMask_output> {
    nameInComfy: "NormalizedAmplitudeToMask"
}
export interface NormalizedAmplitudeToMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface NormalizedAmplitudeToMask_input {
    normalized_amp: _NORMALIZED_AMPLITUDE
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=0 min=255 max=255 step=1 */
    frame_offset?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    location_x?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    location_y?: _INT
    /** default=128 min=4096 max=4096 step=1 */
    size?: _INT
    /** default="none" */
    shape?: Enum_NormalizedAmplitudeToMask_shape
    /** default="amplitude" */
    color?: Enum_NormalizedAmplitudeToMask_color
}

// NormalizedAmplitudeToFloatList [KJNodes_audio]
export interface NormalizedAmplitudeToFloatList extends HasSingle_FLOAT, ComfyNode<NormalizedAmplitudeToFloatList_input, NormalizedAmplitudeToFloatList_output> {
    nameInComfy: "NormalizedAmplitudeToFloatList"
}
export interface NormalizedAmplitudeToFloatList_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface NormalizedAmplitudeToFloatList_input {
    normalized_amp: _NORMALIZED_AMPLITUDE
}

// OffsetMaskByNormalizedAmplitude [KJNodes_audio]
export interface OffsetMaskByNormalizedAmplitude extends HasSingle_MASK, ComfyNode<OffsetMaskByNormalizedAmplitude_input, OffsetMaskByNormalizedAmplitude_output> {
    nameInComfy: "OffsetMaskByNormalizedAmplitude"
}
export interface OffsetMaskByNormalizedAmplitude_output {
    mask: ComfyNodeOutput<'MASK', 0>,
}
export interface OffsetMaskByNormalizedAmplitude_input {
    normalized_amp: _NORMALIZED_AMPLITUDE
    mask: _MASK
    /** default=0 min=16384 max=16384 step=1 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    y?: _INT
    /** default=false */
    rotate?: _BOOLEAN
    /** default=0 min=1 max=1 step=0.001 */
    angle_multiplier?: _FLOAT
}

// ImageTransformByNormalizedAmplitude [KJNodes_audio]
export interface ImageTransformByNormalizedAmplitude extends HasSingle_IMAGE, ComfyNode<ImageTransformByNormalizedAmplitude_input, ImageTransformByNormalizedAmplitude_output> {
    nameInComfy: "ImageTransformByNormalizedAmplitude"
}
export interface ImageTransformByNormalizedAmplitude_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageTransformByNormalizedAmplitude_input {
    normalized_amp: _NORMALIZED_AMPLITUDE
    /** default=0 min=1 max=1 step=0.001 */
    zoom_scale?: _FLOAT
    /** default=0 min=16384 max=16384 step=1 */
    x_offset?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    y_offset?: _INT
    /** default=false */
    cumulative?: _BOOLEAN
    image: _IMAGE
}

// SplineEditor [KJNodes_weights]
export interface SplineEditor extends HasSingle_MASK, HasSingle_FLOAT, HasSingle_INT, ComfyNode<SplineEditor_input, SplineEditor_output> {
    nameInComfy: "SplineEditor"
}
export interface SplineEditor_output {
    mask: ComfyNodeOutput<'MASK', 0>,
    coord_str: ComfyNodeOutput<'STRING', 1>,
    float: ComfyNodeOutput<'FLOAT', 2>,
    count: ComfyNodeOutput<'INT', 3>,
    normalized_str: ComfyNodeOutput<'STRING', 4>,
}
export interface SplineEditor_input {
    /** */
    points_store: _STRING
    /** */
    coordinates: _STRING
    /** default=512 min=4096 max=4096 step=8 */
    mask_width?: _INT
    /** default=512 min=4096 max=4096 step=8 */
    mask_height?: _INT
    /** default=16 min=1000 max=1000 step=1 */
    points_to_sample?: _INT
    /** default="time" */
    sampling_method?: Enum_SplineEditor_sampling_method
    /** default="cardinal" */
    interpolation?: Enum_SplineEditor_interpolation
    /** default=0.5 min=1 max=1 step=0.01 */
    tension?: _FLOAT
    /** default=1 min=4096 max=4096 step=1 */
    repeat_output?: _INT
    /** default="list" */
    float_output_type?: Enum_SplineEditor_float_output_type
    /** default=0 min=10000 max=10000 step=0.01 */
    min_value?: _FLOAT
    /** default=1 min=10000 max=10000 step=0.01 */
    max_value?: _FLOAT
    bg_image?: _IMAGE
}

// CreateShapeImageOnPath [KJNodes_image]
export interface CreateShapeImageOnPath extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<CreateShapeImageOnPath_input, CreateShapeImageOnPath_output> {
    nameInComfy: "CreateShapeImageOnPath"
}
export interface CreateShapeImageOnPath_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
}
export interface CreateShapeImageOnPath_input {
    /** default="circle" */
    shape?: Enum_CreateShapeMask_shape
    /** */
    coordinates: _STRING
    /** default=512 min=4096 max=4096 step=1 */
    frame_width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    frame_height?: _INT
    /** default=128 min=4096 max=4096 step=1 */
    shape_width?: _INT
    /** default=128 min=4096 max=4096 step=1 */
    shape_height?: _INT
    /** default="white" */
    shape_color?: _STRING
    /** default="black" */
    bg_color?: _STRING
    /** default=0 min=100 max=100 step=0.1 */
    blur_radius?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    intensity?: _FLOAT
    /** default=[1] */
    size_multiplier?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    trailing?: _FLOAT
}

// CreateShapeMaskOnPath [KJNodes_masking_generate]
export interface CreateShapeMaskOnPath extends ComfyNode<CreateShapeMaskOnPath_input, CreateShapeMaskOnPath_output> {
    nameInComfy: "CreateShapeMaskOnPath"
}
export interface CreateShapeMaskOnPath_output {
    mask: ComfyNodeOutput<'MASK', 0>,
    mask_inverted: ComfyNodeOutput<'MASK', 1>,
}
export interface CreateShapeMaskOnPath_input {
    /** default="circle" */
    shape?: Enum_CreateShapeMask_shape
    /** */
    coordinates: _STRING
    /** default=512 min=4096 max=4096 step=1 */
    frame_width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    frame_height?: _INT
    /** default=128 min=4096 max=4096 step=1 */
    shape_width?: _INT
    /** default=128 min=4096 max=4096 step=1 */
    shape_height?: _INT
    /** default=[1] */
    size_multiplier?: _FLOAT
}

// CreateTextOnPath [KJNodes_masking_generate]
export interface CreateTextOnPath extends HasSingle_IMAGE, ComfyNode<CreateTextOnPath_input, CreateTextOnPath_output> {
    nameInComfy: "CreateTextOnPath"
}
export interface CreateTextOnPath_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
    mask_inverted: ComfyNodeOutput<'MASK', 2>,
}
export interface CreateTextOnPath_input {
    /** */
    coordinates: _STRING
    /** default="text" */
    text?: _STRING
    /** default=512 min=4096 max=4096 step=1 */
    frame_width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    frame_height?: _INT
    font: Enum_CreateTextMask_font
    /** default=42 */
    font_size?: _INT
    /** default="center" */
    alignment?: Enum_ImageTextMultiline_align
    /** default="white" */
    text_color?: _STRING
    /** default=[1] */
    size_multiplier?: _FLOAT
}

// CreateGradientFromCoords [KJNodes_image]
export interface CreateGradientFromCoords extends HasSingle_IMAGE, ComfyNode<CreateGradientFromCoords_input, CreateGradientFromCoords_output> {
    nameInComfy: "CreateGradientFromCoords"
}
export interface CreateGradientFromCoords_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CreateGradientFromCoords_input {
    /** */
    coordinates: _STRING
    /** default=512 min=4096 max=4096 step=1 */
    frame_width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    frame_height?: _INT
    /** default="white" */
    start_color?: _STRING
    /** default="black" */
    end_color?: _STRING
    /** default=1 min=100 max=100 step=0.01 */
    multiplier?: _FLOAT
}

// GradientToFloat [KJNodes_image]
export interface GradientToFloat extends ComfyNode<GradientToFloat_input, GradientToFloat_output> {
    nameInComfy: "GradientToFloat"
}
export interface GradientToFloat_output {
    float_x: ComfyNodeOutput<'FLOAT', 0>,
    float_y: ComfyNodeOutput<'FLOAT', 1>,
}
export interface GradientToFloat_input {
    image: _IMAGE
    /** default=10 min=10000 max=10000 step=1 */
    steps?: _INT
}

// WeightScheduleExtend [KJNodes_weights]
export interface WeightScheduleExtend extends HasSingle_FLOAT, ComfyNode<WeightScheduleExtend_input, WeightScheduleExtend_output> {
    nameInComfy: "WeightScheduleExtend"
}
export interface WeightScheduleExtend_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface WeightScheduleExtend_input {
    /** default=0 */
    input_values_1?: _FLOAT
    /** default=0 */
    input_values_2?: _FLOAT
    /** default="match_input" */
    output_type?: Enum_WeightScheduleExtend_output_type
}

// MaskOrImageToWeight [KJNodes_weights]
export interface MaskOrImageToWeight extends HasSingle_FLOAT, HasSingle_STRING, ComfyNode<MaskOrImageToWeight_input, MaskOrImageToWeight_output> {
    nameInComfy: "MaskOrImageToWeight"
}
export interface MaskOrImageToWeight_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    STRING: ComfyNodeOutput<'STRING', 1>,
}
export interface MaskOrImageToWeight_input {
    /** default="list" */
    output_type?: Enum_MaskOrImageToWeight_output_type
    images?: _IMAGE
    masks?: _MASK
}

// WeightScheduleConvert [KJNodes_weights]
export interface WeightScheduleConvert extends HasSingle_FLOAT, HasSingle_STRING, HasSingle_INT, ComfyNode<WeightScheduleConvert_input, WeightScheduleConvert_output> {
    nameInComfy: "WeightScheduleConvert"
}
export interface WeightScheduleConvert_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    STRING: ComfyNodeOutput<'STRING', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
}
export interface WeightScheduleConvert_input {
    /** default=0 */
    input_values?: _FLOAT
    /** default="list" */
    output_type?: Enum_WeightScheduleExtend_output_type
    /** default=false */
    invert?: _BOOLEAN
    /** default=1 min=255 max=255 step=1 */
    repeat?: _INT
    /** default=0 */
    remap_to_frames?: _INT
    /** */
    interpolation_curve?: _FLOAT
    /** default=false */
    remap_values?: _BOOLEAN
    /** default=0 min=100000 max=100000 step=0.01 */
    remap_min?: _FLOAT
    /** default=1 min=100000 max=100000 step=0.01 */
    remap_max?: _FLOAT
}

// FloatToMask [KJNodes_masking_generate]
export interface FloatToMask extends HasSingle_MASK, ComfyNode<FloatToMask_input, FloatToMask_output> {
    nameInComfy: "FloatToMask"
}
export interface FloatToMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface FloatToMask_input {
    /** default=0 */
    input_values?: _FLOAT
    /** default=100 min=undefined */
    width?: _INT
    /** default=100 min=undefined */
    height?: _INT
}

// FloatToSigmas [KJNodes_noise]
export interface FloatToSigmas extends HasSingle_SIGMAS, ComfyNode<FloatToSigmas_input, FloatToSigmas_output> {
    nameInComfy: "FloatToSigmas"
}
export interface FloatToSigmas_output {
    SIGMAS: ComfyNodeOutput<'SIGMAS', 0>,
}
export interface FloatToSigmas_input {
    /** default=0 */
    float_list?: _FLOAT
}

// PlotCoordinates [KJNodes_experimental]
export interface PlotCoordinates extends HasSingle_IMAGE, ComfyNode<PlotCoordinates_input, PlotCoordinates_output> {
    nameInComfy: "PlotCoordinates"
}
export interface PlotCoordinates_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
    bbox_width: ComfyNodeOutput<'INT', 3>,
    bbox_height: ComfyNodeOutput<'INT', 4>,
}
export interface PlotCoordinates_input {
    /** */
    coordinates: _STRING
    /** default="title" */
    text?: _STRING
    /** default=512 min=4096 max=4096 step=8 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=8 */
    height?: _INT
    /** default=128 min=4096 max=4096 step=8 */
    bbox_width?: _INT
    /** default=128 min=4096 max=4096 step=8 */
    bbox_height?: _INT
    /** default=[1] */
    size_multiplier?: _FLOAT
}

// InterpolateCoords [KJNodes_experimental]
export interface InterpolateCoords extends HasSingle_STRING, ComfyNode<InterpolateCoords_input, InterpolateCoords_output> {
    nameInComfy: "InterpolateCoords"
}
export interface InterpolateCoords_output {
    coordinates: ComfyNodeOutput<'STRING', 0>,
}
export interface InterpolateCoords_input {
    /** */
    coordinates: _STRING
    /** */
    interpolation_curve: _FLOAT
}

// PointsEditor [KJNodes_experimental]
export interface PointsEditor extends HasSingle_BBOX, HasSingle_MASK, HasSingle_IMAGE, ComfyNode<PointsEditor_input, PointsEditor_output> {
    nameInComfy: "PointsEditor"
}
export interface PointsEditor_output {
    positive_coords: ComfyNodeOutput<'STRING', 0>,
    negative_coords: ComfyNodeOutput<'STRING', 1>,
    bbox: ComfyNodeOutput<'BBOX', 2>,
    bbox_mask: ComfyNodeOutput<'MASK', 3>,
    cropped_image: ComfyNodeOutput<'IMAGE', 4>,
}
export interface PointsEditor_input {
    /** */
    points_store: _STRING
    /** */
    coordinates: _STRING
    /** */
    neg_coordinates: _STRING
    /** */
    bbox_store: _STRING
    /** */
    bboxes: _STRING
    bbox_format: Enum_PointsEditor_bbox_format
    /** default=512 min=4096 max=4096 step=8 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=8 */
    height?: _INT
    /** default=false */
    normalize?: _BOOLEAN
    bg_image?: _IMAGE
}

// StabilityAPI_SD3 [KJNodes_experimental]
export interface StabilityAPI$_SD3 extends HasSingle_IMAGE, ComfyNode<StabilityAPI$_SD3_input, StabilityAPI$_SD3_output> {
    nameInComfy: "StabilityAPI_SD3"
}
export interface StabilityAPI$_SD3_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface StabilityAPI$_SD3_input {
    /** */
    prompt: _STRING
    /** */
    n_prompt: _STRING
    /** default=123 min=4294967294 max=4294967294 step=1 */
    seed?: _INT
    /** default="sd3" */
    model?: Enum_StabilityAPI$_SD3_model
    /** default="1:1" */
    aspect_ratio?: Enum_StabilityAPI$_SD3_aspect_ratio
    /** default="jpeg" */
    output_format?: Enum_StabilityAPI$_SD3_output_format
    /** */
    api_key?: _STRING
    image?: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    img2img_strength?: _FLOAT
    /** default=true */
    disable_metadata?: _BOOLEAN
}

// SoundReactive [KJNodes_audio]
export interface SoundReactive extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<SoundReactive_input, SoundReactive_output> {
    nameInComfy: "SoundReactive"
}
export interface SoundReactive_output {
    sound_level: ComfyNodeOutput<'FLOAT', 0>,
    sound_level_int: ComfyNodeOutput<'INT', 1>,
}
export interface SoundReactive_input {
    /** default=1 min=99999 max=99999 step=0.01 */
    sound_level?: _FLOAT
    /** default=150 min=9999 max=9999 step=1 */
    start_range_hz?: _INT
    /** default=2000 min=9999 max=9999 step=1 */
    end_range_hz?: _INT
    /** default=1 min=99999 max=99999 step=0.01 */
    multiplier?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    smoothing_factor?: _FLOAT
    /** default=false */
    normalize?: _BOOLEAN
}

// StableZero123_BatchSchedule [KJNodes_experimental]
export interface StableZero123$_BatchSchedule extends HasSingle_LATENT, ComfyNode<StableZero123$_BatchSchedule_input, StableZero123$_BatchSchedule_output> {
    nameInComfy: "StableZero123_BatchSchedule"
}
export interface StableZero123$_BatchSchedule_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent: ComfyNodeOutput<'LATENT', 2>,
}
export interface StableZero123$_BatchSchedule_input {
    clip_vision: _CLIP_VISION
    init_image: _IMAGE
    vae: _VAE
    /** default=256 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=256 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
    interpolation: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
    /** default="0:(0.0),\n7:(1.0),\n15:(0.0)\n" */
    azimuth_points_string?: _STRING
    /** default="0:(0.0),\n7:(0.0),\n15:(0.0)\n" */
    elevation_points_string?: _STRING
}

// SV3D_BatchSchedule [KJNodes_experimental]
export interface SV3D$_BatchSchedule extends HasSingle_LATENT, ComfyNode<SV3D$_BatchSchedule_input, SV3D$_BatchSchedule_output> {
    nameInComfy: "SV3D_BatchSchedule"
}
export interface SV3D$_BatchSchedule_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    latent: ComfyNodeOutput<'LATENT', 2>,
}
export interface SV3D$_BatchSchedule_input {
    clip_vision: _CLIP_VISION
    init_image: _IMAGE
    vae: _VAE
    /** default=576 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=576 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=21 min=4096 max=4096 */
    batch_size?: _INT
    interpolation: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation
    /** default="0:(0.0),\n9:(180.0),\n20:(360.0)\n" */
    azimuth_points_string?: _STRING
    /** default="0:(0.0),\n9:(0.0),\n20:(0.0)\n" */
    elevation_points_string?: _STRING
}

// LoadResAdapterNormalization [KJNodes_experimental]
export interface LoadResAdapterNormalization extends HasSingle_MODEL, ComfyNode<LoadResAdapterNormalization_input, LoadResAdapterNormalization_output> {
    nameInComfy: "LoadResAdapterNormalization"
}
export interface LoadResAdapterNormalization_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface LoadResAdapterNormalization_input {
    model: _MODEL
    resadapter_path: Enum_CheckpointLoaderSimple_ckpt_name
}

// Superprompt [KJNodes_text]
export interface Superprompt extends HasSingle_STRING, ComfyNode<Superprompt_input, Superprompt_output> {
    nameInComfy: "Superprompt"
}
export interface Superprompt_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Superprompt_input {
    /** default="Expand the following prompt to add more detail" */
    instruction_prompt?: _STRING
    /** default="" */
    prompt?: _STRING
    /** default=128 min=4096 max=4096 step=1 */
    max_new_tokens?: _INT
}

// GLIGENTextBoxApplyBatchCoords [KJNodes_experimental]
export interface GLIGENTextBoxApplyBatchCoords extends HasSingle_CONDITIONING, HasSingle_IMAGE, ComfyNode<GLIGENTextBoxApplyBatchCoords_input, GLIGENTextBoxApplyBatchCoords_output> {
    nameInComfy: "GLIGENTextBoxApplyBatchCoords"
}
export interface GLIGENTextBoxApplyBatchCoords_output {
    conditioning: ComfyNodeOutput<'CONDITIONING', 0>,
    coord_preview: ComfyNodeOutput<'IMAGE', 1>,
}
export interface GLIGENTextBoxApplyBatchCoords_input {
    conditioning_to: _CONDITIONING
    latents: _LATENT
    clip: _CLIP
    gligen_textbox_model: _GLIGEN
    /** */
    coordinates: _STRING
    /** */
    text: _STRING
    /** default=128 min=4096 max=4096 step=8 */
    width?: _INT
    /** default=128 min=4096 max=4096 step=8 */
    height?: _INT
    /** default=[1] */
    size_multiplier?: _FLOAT
}

// Intrinsic_lora_sampling [KJNodes]
export interface Intrinsic$_lora$_sampling extends HasSingle_IMAGE, HasSingle_LATENT, ComfyNode<Intrinsic$_lora$_sampling_input, Intrinsic$_lora$_sampling_output> {
    nameInComfy: "Intrinsic_lora_sampling"
}
export interface Intrinsic$_lora$_sampling_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    LATENT: ComfyNodeOutput<'LATENT', 1>,
}
export interface Intrinsic$_lora$_sampling_input {
    model: _MODEL
    lora_name: Enum_Intrinsic$_lora$_sampling_lora_name
    /** default="depth map" */
    task?: Enum_Intrinsic$_lora$_sampling_task
    /** default="" */
    text?: _STRING
    clip: _CLIP
    vae: _VAE
    /** default=16 min=4096 max=4096 step=1 */
    per_batch?: _INT
    image?: _IMAGE
    optional_latent?: _LATENT
}

// CheckpointPerturbWeights [KJNodes_experimental]
export interface CheckpointPerturbWeights extends HasSingle_MODEL, ComfyNode<CheckpointPerturbWeights_input, CheckpointPerturbWeights_output> {
    nameInComfy: "CheckpointPerturbWeights"
}
export interface CheckpointPerturbWeights_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface CheckpointPerturbWeights_input {
    model: _MODEL
    /** default=0.02 min=10 max=10 step=0.001 */
    joint_blocks?: _FLOAT
    /** default=0.02 min=10 max=10 step=0.001 */
    final_layer?: _FLOAT
    /** default=0.02 min=10 max=10 step=0.001 */
    rest_of_the_blocks?: _FLOAT
    /** default=123 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
}

// Screencap_mss [KJNodes_experimental]
export interface Screencap$_mss extends HasSingle_IMAGE, ComfyNode<Screencap$_mss_input, Screencap$_mss_output> {
    nameInComfy: "Screencap_mss"
}
export interface Screencap$_mss_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Screencap$_mss_input {
    /** default=0 min=10000 max=10000 step=1 */
    x?: _INT
    /** default=0 min=10000 max=10000 step=1 */
    y?: _INT
    /** default=512 min=10000 max=10000 step=1 */
    width?: _INT
    /** default=512 min=10000 max=10000 step=1 */
    height?: _INT
    /** default=1 min=255 max=255 step=1 */
    num_frames?: _INT
    /** default=0.1 min=10 max=10 step=0.01 */
    delay?: _FLOAT
}

// WebcamCaptureCV2 [KJNodes_experimental]
export interface WebcamCaptureCV2 extends HasSingle_IMAGE, ComfyNode<WebcamCaptureCV2_input, WebcamCaptureCV2_output> {
    nameInComfy: "WebcamCaptureCV2"
}
export interface WebcamCaptureCV2_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface WebcamCaptureCV2_input {
    /** default=0 min=4096 max=4096 step=1 */
    x?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    y?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=0 min=255 max=255 step=1 */
    cam_index?: _INT
    /** default=false */
    release?: _BOOLEAN
}

// DifferentialDiffusionAdvanced [_for_testing]
export interface DifferentialDiffusionAdvanced extends HasSingle_MODEL, HasSingle_LATENT, ComfyNode<DifferentialDiffusionAdvanced_input, DifferentialDiffusionAdvanced_output> {
    nameInComfy: "DifferentialDiffusionAdvanced"
}
export interface DifferentialDiffusionAdvanced_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    LATENT: ComfyNodeOutput<'LATENT', 1>,
}
export interface DifferentialDiffusionAdvanced_input {
    model: _MODEL
    samples: _LATENT
    mask: _MASK
    /** default=1 min=10 max=10 step=0.001 */
    multiplier?: _FLOAT
}

// FluxBlockLoraLoader [KJNodes_experimental]
export interface FluxBlockLoraLoader extends HasSingle_MODEL, HasSingle_STRING, ComfyNode<FluxBlockLoraLoader_input, FluxBlockLoraLoader_output> {
    nameInComfy: "FluxBlockLoraLoader"
}
export interface FluxBlockLoraLoader_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    rank: ComfyNodeOutput<'STRING', 1>,
}
export interface FluxBlockLoraLoader_input {
    /** */
    model: _MODEL
    /** default=1 min=100 max=100 step=0.01 */
    strength_model?: _FLOAT
    /** */
    lora_name?: Enum_LoraLoader_lora_name
    /** */
    opt_lora_path?: _STRING
    blocks?: _SELECTEDBLOCKS
}

// FluxBlockLoraSelect [KJNodes_experimental]
export interface FluxBlockLoraSelect extends HasSingle_SELECTEDBLOCKS, ComfyNode<FluxBlockLoraSelect_input, FluxBlockLoraSelect_output> {
    nameInComfy: "FluxBlockLoraSelect"
}
export interface FluxBlockLoraSelect_output {
    blocks: ComfyNodeOutput<'SELECTEDBLOCKS', 0>,
}
export interface FluxBlockLoraSelect_input {
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.0."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.1."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.2."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.3."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.4."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.5."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.6."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.7."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.8."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.9."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.10."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.11."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.12."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.13."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.14."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.15."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.16."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.17."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "double_blocks.18."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.0."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.1."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.2."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.3."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.4."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.5."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.6."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.7."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.8."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.9."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.10."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.11."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.12."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.13."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.14."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.15."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.16."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.17."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.18."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.19."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.20."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.21."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.22."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.23."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.24."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.25."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.26."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.27."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.28."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.29."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.30."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.31."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.32."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.33."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.34."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.35."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.36."?: _FLOAT
    /** default=0 min=1000 max=1000 step=0.01 */
    "single_blocks.37."?: _FLOAT
}

// CustomControlNetWeightsFluxFromList [KJNodes_controlnet]
export interface CustomControlNetWeightsFluxFromList extends HasSingle_CONTROL_NET_WEIGHTS, HasSingle_TIMESTEP_KEYFRAME, ComfyNode<CustomControlNetWeightsFluxFromList_input, CustomControlNetWeightsFluxFromList_output> {
    nameInComfy: "CustomControlNetWeightsFluxFromList"
}
export interface CustomControlNetWeightsFluxFromList_output {
    CN_WEIGHTS: ComfyNodeOutput<'CONTROL_NET_WEIGHTS', 0>,
    TK_SHORTCUT: ComfyNodeOutput<'TIMESTEP_KEYFRAME', 1>,
}
export interface CustomControlNetWeightsFluxFromList_input {
    /** */
    list_of_floats: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    uncond_multiplier?: _FLOAT
    cn_extras?: _CN_WEIGHTS_EXTRAS
    /** */
    autosize?: _ACNAUTOSIZE
}

// CheckpointLoaderKJ [KJNodes_experimental]
export interface CheckpointLoaderKJ extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<CheckpointLoaderKJ_input, CheckpointLoaderKJ_output> {
    nameInComfy: "CheckpointLoaderKJ"
}
export interface CheckpointLoaderKJ_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
}
export interface CheckpointLoaderKJ_input {
    /** */
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** default=true */
    patch_cublaslinear?: _BOOLEAN
    /** default=false */
    sage_attention?: _BOOLEAN
}

// TorchCompileModelFluxAdvanced [KJNodes_experimental]
export interface TorchCompileModelFluxAdvanced extends HasSingle_MODEL, ComfyNode<TorchCompileModelFluxAdvanced_input, TorchCompileModelFluxAdvanced_output> {
    nameInComfy: "TorchCompileModelFluxAdvanced"
}
export interface TorchCompileModelFluxAdvanced_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface TorchCompileModelFluxAdvanced_input {
    model: _MODEL
    backend: Enum_TorchCompileModel_backend
    /** default=false */
    fullgraph?: _BOOLEAN
    /** default="default" */
    mode?: Enum_TorchCompileModelFluxAdvanced_mode
    /** default="0-18" */
    double_blocks?: _STRING
    /** default="0-37" */
    single_blocks?: _STRING
}

// TorchCompileVAE [KJNodes_experimental]
export interface TorchCompileVAE extends HasSingle_VAE, ComfyNode<TorchCompileVAE_input, TorchCompileVAE_output> {
    nameInComfy: "TorchCompileVAE"
}
export interface TorchCompileVAE_output {
    VAE: ComfyNodeOutput<'VAE', 0>,
}
export interface TorchCompileVAE_input {
    vae: _VAE
    backend: Enum_TorchCompileModel_backend
    /** default=false */
    fullgraph?: _BOOLEAN
    /** default="default" */
    mode?: Enum_TorchCompileModelFluxAdvanced_mode
    /** default=true */
    compile_encoder?: _BOOLEAN
    /** default=true */
    compile_decoder?: _BOOLEAN
}

// TorchCompileControlNet [KJNodes_experimental]
export interface TorchCompileControlNet extends HasSingle_CONTROL_NET, ComfyNode<TorchCompileControlNet_input, TorchCompileControlNet_output> {
    nameInComfy: "TorchCompileControlNet"
}
export interface TorchCompileControlNet_output {
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 0>,
}
export interface TorchCompileControlNet_input {
    controlnet: _CONTROL_NET
    backend: Enum_TorchCompileModel_backend
    /** default=false */
    fullgraph?: _BOOLEAN
    /** default="default" */
    mode?: Enum_TorchCompileModelFluxAdvanced_mode
}

// CreateInstanceDiffusionTracking [KJNodes_InstanceDiffusion]
export interface CreateInstanceDiffusionTracking extends HasSingle_TRACKING, HasSingle_STRING, ComfyNode<CreateInstanceDiffusionTracking_input, CreateInstanceDiffusionTracking_output> {
    nameInComfy: "CreateInstanceDiffusionTracking"
}
export interface CreateInstanceDiffusionTracking_output {
    tracking: ComfyNodeOutput<'TRACKING', 0>,
    prompt: ComfyNodeOutput<'STRING', 1>,
    width: ComfyNodeOutput<'INT', 2>,
    height: ComfyNodeOutput<'INT', 3>,
    bbox_width: ComfyNodeOutput<'INT', 4>,
    bbox_height: ComfyNodeOutput<'INT', 5>,
}
export interface CreateInstanceDiffusionTracking_input {
    /** */
    coordinates: _STRING
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    bbox_width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    bbox_height?: _INT
    /** default="class_name" */
    class_name?: _STRING
    /** default=0 min=255 max=255 step=1 */
    class_id?: _INT
    /** default="prompt" */
    prompt?: _STRING
    /** default=[1] */
    size_multiplier?: _FLOAT
    /** default=true */
    fit_in_frame?: _BOOLEAN
}

// AppendInstanceDiffusionTracking [KJNodes_InstanceDiffusion]
export interface AppendInstanceDiffusionTracking extends HasSingle_TRACKING, HasSingle_STRING, ComfyNode<AppendInstanceDiffusionTracking_input, AppendInstanceDiffusionTracking_output> {
    nameInComfy: "AppendInstanceDiffusionTracking"
}
export interface AppendInstanceDiffusionTracking_output {
    tracking: ComfyNodeOutput<'TRACKING', 0>,
    prompt: ComfyNodeOutput<'STRING', 1>,
}
export interface AppendInstanceDiffusionTracking_input {
    /** */
    tracking_1: _TRACKING
    /** */
    tracking_2: _TRACKING
    /** default="" */
    prompt_1?: _STRING
    /** default="" */
    prompt_2?: _STRING
}

// DrawInstanceDiffusionTracking [KJNodes_InstanceDiffusion]
export interface DrawInstanceDiffusionTracking extends HasSingle_IMAGE, ComfyNode<DrawInstanceDiffusionTracking_input, DrawInstanceDiffusionTracking_output> {
    nameInComfy: "DrawInstanceDiffusionTracking"
}
export interface DrawInstanceDiffusionTracking_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DrawInstanceDiffusionTracking_input {
    image: _IMAGE
    /** */
    tracking: _TRACKING
    /** default=2 min=10 max=10 step=1 */
    box_line_width?: _INT
    /** default=true */
    draw_text?: _BOOLEAN
    font: Enum_CreateTextMask_font
    /** default=20 */
    font_size?: _INT
}

// Compare-🔬 [Logic]
export interface Compare$7$$D83D$$DD2C extends HasSingle_BOOLEAN, ComfyNode<Compare$7$$D83D$$DD2C_input, Compare$7$$D83D$$DD2C_output> {
    nameInComfy: "Compare-🔬"
}
export interface Compare$7$$D83D$$DD2C_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface Compare$7$$D83D$$DD2C_input {
    /** default=0 */
    a?: _$Star
    /** default=0 */
    b?: _$Star
    /** default="a == b" */
    comparison?: Enum_Compare$7$$D83D$$DD2C_comparison
}

// Int-🔬 [Logic]
export interface Int$7$$D83D$$DD2C extends HasSingle_INT, ComfyNode<Int$7$$D83D$$DD2C_input, Int$7$$D83D$$DD2C_output> {
    nameInComfy: "Int-🔬"
}
export interface Int$7$$D83D$$DD2C_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface Int$7$$D83D$$DD2C_input {
    /** default=0 */
    value?: _INT
}

// Float-🔬 [Logic]
export interface Float$7$$D83D$$DD2C extends HasSingle_FLOAT, ComfyNode<Float$7$$D83D$$DD2C_input, Float$7$$D83D$$DD2C_output> {
    nameInComfy: "Float-🔬"
}
export interface Float$7$$D83D$$DD2C_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface Float$7$$D83D$$DD2C_input {
    /** default=0 step=0.01 */
    value?: _FLOAT
}

// Bool-🔬 [Logic]
export interface Bool$7$$D83D$$DD2C extends HasSingle_BOOLEAN, ComfyNode<Bool$7$$D83D$$DD2C_input, Bool$7$$D83D$$DD2C_output> {
    nameInComfy: "Bool-🔬"
}
export interface Bool$7$$D83D$$DD2C_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface Bool$7$$D83D$$DD2C_input {
    /** default=false */
    value?: _BOOLEAN
}

// String-🔬 [Logic]
export interface String$7$$D83D$$DD2C extends HasSingle_STRING, ComfyNode<String$7$$D83D$$DD2C_input, String$7$$D83D$$DD2C_output> {
    nameInComfy: "String-🔬"
}
export interface String$7$$D83D$$DD2C_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface String$7$$D83D$$DD2C_input {
    /** default="" */
    value?: _STRING
}

// If ANY return A else B-🔬 [Logic]
export interface If_ANY_return_A_else_B$7$$D83D$$DD2C extends HasSingle_$Star, ComfyNode<If_ANY_return_A_else_B$7$$D83D$$DD2C_input, If_ANY_return_A_else_B$7$$D83D$$DD2C_output> {
    nameInComfy: "If ANY return A else B-🔬"
}
export interface If_ANY_return_A_else_B$7$$D83D$$DD2C_output {
    "$$3F": ComfyNodeOutput<'$Star', 0>,
}
export interface If_ANY_return_A_else_B$7$$D83D$$DD2C_input {
    ANY: _$Star
    IF_TRUE: _$Star
    IF_FALSE: _$Star
}

// DebugPrint-🔬 [Logic]
export interface DebugPrint$7$$D83D$$DD2C extends ComfyNode<DebugPrint$7$$D83D$$DD2C_input, DebugPrint$7$$D83D$$DD2C_output> {
    nameInComfy: "DebugPrint-🔬"
}
export interface DebugPrint$7$$D83D$$DD2C_output {
}
export interface DebugPrint$7$$D83D$$DD2C_input {
    ANY: _$$7B$$7D
}

// MarigoldModelLoader [Marigold]
export interface MarigoldModelLoader extends HasSingle_MARIGOLDMODEL, ComfyNode<MarigoldModelLoader_input, MarigoldModelLoader_output> {
    nameInComfy: "MarigoldModelLoader"
}
export interface MarigoldModelLoader_output {
    marigold_model: ComfyNodeOutput<'MARIGOLDMODEL', 0>,
}
export interface MarigoldModelLoader_input {
    /** default="marigold-lcm-v1-0" */
    model?: Enum_MarigoldModelLoader_model
}

// MarigoldDepthEstimation_v2 [Marigold]
export interface MarigoldDepthEstimation$_v2 extends HasSingle_IMAGE, ComfyNode<MarigoldDepthEstimation$_v2_input, MarigoldDepthEstimation$_v2_output> {
    nameInComfy: "MarigoldDepthEstimation_v2"
}
export interface MarigoldDepthEstimation$_v2_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MarigoldDepthEstimation$_v2_input {
    marigold_model: _MARIGOLDMODEL
    image: _IMAGE
    /** default=123 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
    /** default=4 min=4096 max=4096 step=1 */
    denoise_steps?: _INT
    /** default=3 min=4096 max=4096 step=1 */
    ensemble_size?: _INT
    /** default=768 min=4096 max=4096 step=8 */
    processing_resolution?: _INT
    /** default="LCMScheduler" */
    scheduler?: Enum_MarigoldDepthEstimation$_v2_scheduler
    /** default=false */
    use_taesd_vae?: _BOOLEAN
    /** default=false */
    keep_model_loaded?: _BOOLEAN
}

// MarigoldDepthEstimation_v2_video [Marigold]
export interface MarigoldDepthEstimation$_v2$_video extends HasSingle_IMAGE, ComfyNode<MarigoldDepthEstimation$_v2$_video_input, MarigoldDepthEstimation$_v2$_video_output> {
    nameInComfy: "MarigoldDepthEstimation_v2_video"
}
export interface MarigoldDepthEstimation$_v2$_video_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MarigoldDepthEstimation$_v2$_video_input {
    marigold_model: _MARIGOLDMODEL
    images: _IMAGE
    /** default=123 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
    /** default=4 min=4096 max=4096 step=1 */
    denoise_steps?: _INT
    /** default=768 min=4096 max=4096 step=8 */
    processing_resolution?: _INT
    /** default="LCMScheduler" */
    scheduler?: Enum_MarigoldDepthEstimation$_v2_scheduler
    /** default=0.1 min=1 max=1 step=0.01 */
    blend_factor?: _FLOAT
    /** default=true */
    use_taesd_vae?: _BOOLEAN
    /** default=false */
    keep_model_loaded?: _BOOLEAN
}

// MarigoldDepthEstimation [Marigold]
export interface MarigoldDepthEstimation extends HasSingle_IMAGE, ComfyNode<MarigoldDepthEstimation_input, MarigoldDepthEstimation_output> {
    nameInComfy: "MarigoldDepthEstimation"
}
export interface MarigoldDepthEstimation_output {
    ensembled_image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MarigoldDepthEstimation_input {
    image: _IMAGE
    /** default=123 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
    /** default=10 min=4096 max=4096 step=1 */
    denoise_steps?: _INT
    /** default=10 min=4096 max=4096 step=1 */
    n_repeat?: _INT
    /** default=0.02 min=4096 max=4096 step=0.001 */
    regularizer_strength?: _FLOAT
    /** default="median" */
    reduction_method?: Enum_MarigoldDepthEstimation_reduction_method
    /** default=5 min=4096 max=4096 step=1 */
    max_iter?: _INT
    /** default=0.001 min=0.1 max=0.1 step=0.000001 */
    tol?: _FLOAT
    /** default=true */
    invert?: _BOOLEAN
    /** default=true */
    keep_model_loaded?: _BOOLEAN
    /** default=2 min=4096 max=4096 step=1 */
    n_repeat_batch_size?: _INT
    /** default=true */
    use_fp16?: _BOOLEAN
    /** default="DDIMScheduler" */
    scheduler?: Enum_MarigoldDepthEstimation_scheduler
    /** default=true */
    normalize?: _BOOLEAN
    /** default="Marigold" */
    model?: Enum_MarigoldDepthEstimation_model
}

// MarigoldDepthEstimationVideo [Marigold]
export interface MarigoldDepthEstimationVideo extends HasSingle_IMAGE, ComfyNode<MarigoldDepthEstimationVideo_input, MarigoldDepthEstimationVideo_output> {
    nameInComfy: "MarigoldDepthEstimationVideo"
}
export interface MarigoldDepthEstimationVideo_output {
    ensembled_image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MarigoldDepthEstimationVideo_input {
    image: _IMAGE
    /** default=123 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
    /** default=4 min=4096 max=4096 step=1 */
    first_frame_denoise_steps?: _INT
    /** default=1 min=4096 max=4096 step=1 */
    first_frame_n_repeat?: _INT
    /** default=1 min=4096 max=4096 step=1 */
    n_repeat_batch_size?: _INT
    /** default=true */
    invert?: _BOOLEAN
    /** default=true */
    keep_model_loaded?: _BOOLEAN
    /** default="DEISMultistepScheduler" */
    scheduler?: Enum_MarigoldDepthEstimation_scheduler
    /** default=true */
    normalize?: _BOOLEAN
    /** default=4 min=4096 max=4096 step=1 */
    denoise_steps?: _INT
    /** default=true */
    flow_warping?: _BOOLEAN
    /** default=0.3 min=1 max=1 step=0.05 */
    flow_depth_mix?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    noise_ratio?: _FLOAT
    /** default="fp16" */
    dtype?: Enum_MarigoldDepthEstimationVideo_dtype
    /** default="Marigold" */
    model?: Enum_MarigoldDepthEstimation_model
}

// ColorizeDepthmap [Marigold]
export interface ColorizeDepthmap extends HasSingle_IMAGE, ComfyNode<ColorizeDepthmap_input, ColorizeDepthmap_output> {
    nameInComfy: "ColorizeDepthmap"
}
export interface ColorizeDepthmap_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ColorizeDepthmap_input {
    image: _IMAGE
    /** default="Spectral" */
    colorize_method?: Enum_ColorizeDepthmap_colorize_method
}

// SaveImageOpenEXR [Marigold]
export interface SaveImageOpenEXR extends HasSingle_STRING, ComfyNode<SaveImageOpenEXR_input, SaveImageOpenEXR_output> {
    nameInComfy: "SaveImageOpenEXR"
}
export interface SaveImageOpenEXR_output {
    file_url: ComfyNodeOutput<'STRING', 0>,
}
export interface SaveImageOpenEXR_input {
    images: _IMAGE
    /** default="ComfyUI_EXR" */
    filename_prefix?: _STRING
}

// RemapDepth [Marigold]
export interface RemapDepth extends HasSingle_IMAGE, ComfyNode<RemapDepth_input, RemapDepth_output> {
    nameInComfy: "RemapDepth"
}
export interface RemapDepth_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface RemapDepth_input {
    image: _IMAGE
    /** default=0 min=1 max=1 step=0.01 */
    min?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    max?: _FLOAT
    /** default=true */
    clamp?: _BOOLEAN
}

// AppInfo [♾️Mixlab]
export interface AppInfo extends ComfyNode<AppInfo_input, AppInfo_output> {
    nameInComfy: "AppInfo"
}
export interface AppInfo_output {
}
export interface AppInfo_input {
    /** default="Mixlab-App" */
    name?: _STRING
    /** default="1\n2\n3" */
    input_ids?: _STRING
    /** default="5\n9" */
    output_ids?: _STRING
    image?: _IMAGE
    /** default="" */
    description?: _STRING
    /** default=1 min=10000 max=10000 step=1 */
    version?: _INT
    /** default="" */
    share_prefix?: _STRING
    /** default="https://" */
    link?: _STRING
    /** default="" */
    category?: _STRING
    auto_save?: Enum_KSamplerAdvanced_add_noise
    /** default=false */
    idle_animation?: _BOOLEAN
}

// TESTNODE_ [♾️Mixlab_Test]
export interface TESTNODE$_ extends HasSingle_$Star, ComfyNode<TESTNODE$__input, TESTNODE$__output> {
    nameInComfy: "TESTNODE_"
}
export interface TESTNODE$__output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface TESTNODE$__input {
    ANY: _$Star
}

// TESTNODE_TOKEN [♾️Mixlab_Test]
export interface TESTNODE$_TOKEN extends HasSingle_STRING, ComfyNode<TESTNODE$_TOKEN_input, TESTNODE$_TOKEN_output> {
    nameInComfy: "TESTNODE_TOKEN"
}
export interface TESTNODE$_TOKEN_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface TESTNODE$_TOKEN_input {
    /** */
    text: _STRING
    clip: _CLIP
}

// RandomPrompt [♾️Mixlab_Prompt]
export interface RandomPrompt extends HasSingle_STRING, ComfyNode<RandomPrompt_input, RandomPrompt_output> {
    nameInComfy: "RandomPrompt"
}
export interface RandomPrompt_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface RandomPrompt_input {
    /** default=9 min=1000 max=1000 */
    max_count?: _INT
    /** default="Swing\nSlide\nClimbing frame\nSandbox\nSee-saw\nMerry-go-round\nJungle gym\nTrampoline\nMonkey bars\nRocking horse\nPlayhouse\nHopscotch\nBalance beam\nSpring rider\nWater play area\nBall pit\nTunnel\nZip line\nBasketball hoop\nBicycle rack\nSpinner\nClimbing wall\nRope ladder\nTetherball\nFlying fox\nSwinging bridge\nSpiral slide\nWater sprinkler\nPedal go-kart\nMiniature golf course" */
    mutable_prompt?: _STRING
    /** default="sticker, Cartoon, ``" */
    immutable_prompt?: _STRING
    random_sample: Enum_KSamplerAdvanced_add_noise
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _$Star
}

// EmbeddingPrompt [♾️Mixlab_Prompt]
export interface EmbeddingPrompt extends HasSingle_STRING, ComfyNode<EmbeddingPrompt_input, EmbeddingPrompt_output> {
    nameInComfy: "EmbeddingPrompt"
}
export interface EmbeddingPrompt_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface EmbeddingPrompt_input {
    embedding: Enum_EmbeddingPrompt_embedding
    /** default=1 min=2 max=2 step=0.01 */
    weight?: _FLOAT
}

// PromptSlide [♾️Mixlab_Prompt]
export interface PromptSlide extends HasSingle_STRING, ComfyNode<PromptSlide_input, PromptSlide_output> {
    nameInComfy: "PromptSlide"
}
export interface PromptSlide_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
}
export interface PromptSlide_input {
    /** default="" */
    prompt_keyword?: _STRING
    /** default=1 min=3 max=3 step=0.01 */
    weight?: _FLOAT
}

// GLIGENTextBoxApply_Advanced [♾️Mixlab_Prompt]
export interface GLIGENTextBoxApply$_Advanced extends HasSingle_CONDITIONING, HasSingle_STRING, ComfyNode<GLIGENTextBoxApply$_Advanced_input, GLIGENTextBoxApply$_Advanced_output> {
    nameInComfy: "GLIGENTextBoxApply_Advanced"
}
export interface GLIGENTextBoxApply$_Advanced_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    label: ComfyNodeOutput<'STRING', 1>,
}
export interface GLIGENTextBoxApply$_Advanced_input {
    conditioning: _CONDITIONING
    clip: _CLIP
    gligen_textbox_model: _GLIGEN
    grids: __GRID
    /** default="" */
    labels?: _STRING
    /** default=-1 min=300 max=300 step=1 */
    index?: _INT
    /** default=8 min=300 max=300 step=1 */
    max_size?: _INT
    random_shuffle: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _$Star
}

// PromptSimplification [♾️Mixlab_Prompt]
export interface PromptSimplification extends HasSingle_STRING, ComfyNode<PromptSimplification_input, PromptSimplification_output> {
    nameInComfy: "PromptSimplification"
}
export interface PromptSimplification_output {
    prompts: ComfyNodeOutput<'STRING', 0>,
}
export interface PromptSimplification_input {
    /** default="" */
    prompt?: _STRING
    /** default=5 min=100 max=100 step=1 */
    length?: _INT
}

// GridInput [♾️Mixlab_Input]
export interface GridInput extends HasSingle__GRID, HasSingle_STRING, HasSingle_IMAGE, ComfyNode<GridInput_input, GridInput_output> {
    nameInComfy: "GridInput"
}
export interface GridInput_output {
    grids: ComfyNodeOutput<'_GRID', 0>,
    labels: ComfyNodeOutput<'STRING', 1>,
    image: ComfyNodeOutput<'IMAGE', 2>,
}
export interface GridInput_input {
    /** default="" */
    grids?: _STRING
    /** default=24 min=5000 max=5000 step=1 */
    padding?: _INT
    /** */
    width?: _INT
    /** */
    height?: _INT
}

// ImagesPrompt_ [♾️Mixlab_Input]
export interface ImagesPrompt$_ extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<ImagesPrompt$__input, ImagesPrompt$__output> {
    nameInComfy: "ImagesPrompt_"
}
export interface ImagesPrompt$__output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    text: ComfyNodeOutput<'STRING', 1>,
}
export interface ImagesPrompt$__input {
    /** default="" */
    image_base64?: _STRING
    /** default="" */
    text?: _STRING
}

// KeyInput [♾️Mixlab_Input]
export interface KeyInput extends HasSingle_STRING, ComfyNode<KeyInput_input, KeyInput_output> {
    nameInComfy: "KeyInput"
}
export interface KeyInput_output {
    key: ComfyNodeOutput<'STRING', 0>,
}
export interface KeyInput_input {
    key: _KEY
}

// FloatSlider [♾️Mixlab_Input]
export interface FloatSlider extends HasSingle_FLOAT, ComfyNode<FloatSlider_input, FloatSlider_output> {
    nameInComfy: "FloatSlider"
}
export interface FloatSlider_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface FloatSlider_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.001 */
    number?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.001 */
    min_value?: _FLOAT
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=0.001 */
    max_value?: _FLOAT
    /** default=0.001 min=18446744073709552000 max=18446744073709552000 step=0.001 */
    step?: _FLOAT
}

// IntNumber [♾️Mixlab_Input]
export interface IntNumber extends HasSingle_INT, ComfyNode<IntNumber_input, IntNumber_output> {
    nameInComfy: "IntNumber"
}
export interface IntNumber_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface IntNumber_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    number?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    min_value?: _INT
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=1 */
    max_value?: _INT
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=1 */
    step?: _INT
}

// TextInput_ [♾️Mixlab_Input]
export interface TextInput$_ extends HasSingle_STRING, ComfyNode<TextInput$__input, TextInput$__output> {
    nameInComfy: "TextInput_"
}
export interface TextInput$__output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface TextInput$__input {
    /** default="" */
    text?: _STRING
}

// Font [♾️Mixlab_Input]
export interface Font extends HasSingle_STRING, ComfyNode<Font_input, Font_output> {
    nameInComfy: "Font"
}
export interface Font_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Font_input {
    font: Enum_Font_font
}

// LimitNumber [♾️Mixlab_Input]
export interface LimitNumber extends HasSingle_$Star, ComfyNode<LimitNumber_input, LimitNumber_output> {
    nameInComfy: "LimitNumber"
}
export interface LimitNumber_output {
    number: ComfyNodeOutput<'$Star', 0>,
}
export interface LimitNumber_input {
    number: _$Star
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    min_value?: _INT
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=1 */
    max_value?: _INT
}

// PromptImage [♾️Mixlab_Output]
export interface PromptImage extends HasSingle_STRING, ComfyNode<PromptImage_input, PromptImage_output> {
    nameInComfy: "PromptImage"
}
export interface PromptImage_output {
    json_str: ComfyNodeOutput<'STRING', 0>,
}
export interface PromptImage_input {
    /** default="" */
    prompts?: _STRING
    /** */
    images?: _IMAGE
    save_to_image: Enum_KSamplerAdvanced_add_noise
}

// SaveImageToLocal [♾️Mixlab_Output]
export interface SaveImageToLocal extends ComfyNode<SaveImageToLocal_input, SaveImageToLocal_output> {
    nameInComfy: "SaveImageToLocal"
}
export interface SaveImageToLocal_output {
}
export interface SaveImageToLocal_input {
    images: _IMAGE
    /** default="" */
    file_path?: _STRING
}

// SaveImageAndMetadata_ [♾️Mixlab_Output]
export interface SaveImageAndMetadata$_ extends ComfyNode<SaveImageAndMetadata$__input, SaveImageAndMetadata$__output> {
    nameInComfy: "SaveImageAndMetadata_"
}
export interface SaveImageAndMetadata$__output {
}
export interface SaveImageAndMetadata$__input {
    images: _IMAGE
    /** default="Mixlab" */
    filename_prefix?: _STRING
    metadata: Enum_KSamplerAdvanced_add_noise
}

// ComparingTwoFrames_ [♾️Mixlab_Output]
export interface ComparingTwoFrames$_ extends ComfyNode<ComparingTwoFrames$__input, ComparingTwoFrames$__output> {
    nameInComfy: "ComparingTwoFrames_"
}
export interface ComparingTwoFrames$__output {
}
export interface ComparingTwoFrames$__input {
    before_image: _IMAGE
    after_image: _IMAGE
}

// CreateJsonNode [♾️Mixlab_Output]
export interface CreateJsonNode extends HasSingle_STRING, ComfyNode<CreateJsonNode_input, CreateJsonNode_output> {
    nameInComfy: "CreateJsonNode"
}
export interface CreateJsonNode_output {
    json_str: ComfyNodeOutput<'STRING', 0>,
}
export interface CreateJsonNode_input {
    /** default="data" */
    key?: _STRING
    value: _$Star
    /** default=true */
    save?: _BOOLEAN
    /** */
    json_str?: _STRING
}

// MirroredImage [♾️Mixlab_Image]
export interface MirroredImage extends HasSingle_IMAGE, ComfyNode<MirroredImage_input, MirroredImage_output> {
    nameInComfy: "MirroredImage"
}
export interface MirroredImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MirroredImage_input {
    image: _IMAGE
}

// NoiseImage [♾️Mixlab_Image]
export interface NoiseImage extends HasSingle_IMAGE, ComfyNode<NoiseImage_input, NoiseImage_output> {
    nameInComfy: "NoiseImage"
}
export interface NoiseImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface NoiseImage_input {
    /** default=512 min=8192 max=8192 step=1 */
    width?: _INT
    /** default=512 min=8192 max=8192 step=1 */
    height?: _INT
    /** default=128 min=8192 max=8192 step=1 */
    noise_level?: _INT
    /** default="#FFFFFF" */
    color_hex?: _STRING
}

// GradientImage [♾️Mixlab_Image]
export interface GradientImage extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<GradientImage_input, GradientImage_output> {
    nameInComfy: "GradientImage"
}
export interface GradientImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface GradientImage_input {
    /** default=512 min=8192 max=8192 step=1 */
    width?: _INT
    /** default=512 min=8192 max=8192 step=1 */
    height?: _INT
    /** default="#FFFFFF" */
    start_color_hex?: _STRING
    /** default="#000000" */
    end_color_hex?: _STRING
}

// TransparentImage [♾️Mixlab_Image]
export interface TransparentImage extends HasSingle_STRING, HasSingle_IMAGE, HasSingle_RGBA, ComfyNode<TransparentImage_input, TransparentImage_output> {
    nameInComfy: "TransparentImage"
}
export interface TransparentImage_output {
    file_path: ComfyNodeOutput<'STRING', 0>,
    IMAGE: ComfyNodeOutput<'IMAGE', 1>,
    RGBA: ComfyNodeOutput<'RGBA', 2>,
}
export interface TransparentImage_input {
    images: _IMAGE
    masks: _MASK
    invert: Enum_ConstrainImage$8pysssss_crop_if_required
    save: Enum_ConstrainImage$8pysssss_crop_if_required
    /** default="Mixlab_save" */
    filename_prefix?: _STRING
}

// ResizeImageMixlab [♾️Mixlab_Image]
export interface ResizeImageMixlab extends HasSingle_STRING, HasSingle_MASK, ComfyNode<ResizeImageMixlab_input, ResizeImageMixlab_output> {
    nameInComfy: "ResizeImageMixlab"
}
export interface ResizeImageMixlab_output {
    "image$_list": ComfyNodeOutput<'IMAGE', 0>,
    average_image: ComfyNodeOutput<'IMAGE', 1>,
    average_hex: ComfyNodeOutput<'STRING', 2>,
    mask: ComfyNodeOutput<'MASK', 3>,
}
export interface ResizeImageMixlab_input {
    /** default=512 min=8192 max=8192 step=1 */
    width?: _INT
    /** default=512 min=8192 max=8192 step=1 */
    height?: _INT
    scale_option: Enum_ResizeImageMixlab_scale_option
    image?: _IMAGE
    average_color?: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
    /** default="#FFFFFF" */
    fill_color?: _STRING
    mask?: _MASK
}

// LoadImagesFromPath [♾️Mixlab_Image]
export interface LoadImagesFromPath extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<LoadImagesFromPath_input, LoadImagesFromPath_output> {
    nameInComfy: "LoadImagesFromPath"
}
export interface LoadImagesFromPath_output {
    "image$_list": ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
    prompt_for_FloatingVideo: ComfyNodeOutput<'STRING', 2>,
    filepaths: ComfyNodeOutput<'STRING', 3>,
}
export interface LoadImagesFromPath_input {
    /** default="" */
    file_path?: _STRING
    white_bg?: Enum_KSamplerAdvanced_add_noise
    sort_by?: Enum_LoadImagesFromPath_sort_by
    /** default=0 min=2048 max=2048 step=1 */
    index_variable?: _INT
    watcher?: Enum_KSamplerAdvanced_add_noise
    result?: _WATCHER
    prompt?: _PROMPT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _$Star
}

// LoadImagesFromURL [♾️Mixlab_Image]
export interface LoadImagesFromURL extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<LoadImagesFromURL_input, LoadImagesFromURL_output> {
    nameInComfy: "LoadImagesFromURL"
}
export interface LoadImagesFromURL_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
    masks: ComfyNodeOutput<'MASK', 1>,
}
export interface LoadImagesFromURL_input {
    /** default="https://" */
    url?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _$Star
}

// LoadImagesToBatch [♾️Mixlab_Image]
export interface LoadImagesToBatch extends HasSingle_IMAGE, ComfyNode<LoadImagesToBatch_input, LoadImagesToBatch_output> {
    nameInComfy: "LoadImagesToBatch"
}
export interface LoadImagesToBatch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface LoadImagesToBatch_input {
    images: _IMAGEBASE64
}

// TextImage [♾️Mixlab_Image]
export interface TextImage extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<TextImage_input, TextImage_output> {
    nameInComfy: "TextImage"
}
export interface TextImage_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
}
export interface TextImage_input {
    /** default="龍馬精神迎新歲" */
    text?: _STRING
    font: Enum_TextImage_font
    /** default=100 min=10000000 max=10000000 step=1 */
    font_size?: _INT
    /** default=12 min=2000000000 max=2000000000 step=1 */
    spacing?: _INT
    /** default=12 min=2000000000 max=2000000000 step=1 */
    line_spacing?: _INT
    /** default=8 min=2000000000 max=2000000000 step=1 */
    padding?: _INT
    /** default="#000000" */
    text_color?: _STRING
    /** default=true */
    vertical?: _BOOLEAN
    /** default=false */
    stroke?: _BOOLEAN
    /** default=44 min=2000000000 max=2000000000 step=1 */
    max_characters_per_line?: _INT
    /** default=0 min=2000000000 max=2000000000 step=1 */
    fixed_width?: _INT
}

// EnhanceImage [♾️Mixlab_Image]
export interface EnhanceImage extends HasSingle_IMAGE, ComfyNode<EnhanceImage_input, EnhanceImage_output> {
    nameInComfy: "EnhanceImage"
}
export interface EnhanceImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface EnhanceImage_input {
    image: _IMAGE
    /** default=0.5 min=10 max=10 step=0.01 */
    contrast?: _FLOAT
}

// SvgImage [♾️Mixlab_Image]
export interface SvgImage extends HasSingle_IMAGE, HasSingle_LAYER, ComfyNode<SvgImage_input, SvgImage_output> {
    nameInComfy: "SvgImage"
}
export interface SvgImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    layers: ComfyNodeOutput<'LAYER', 1>,
}
export interface SvgImage_input {
    upload: _SVG
}

// ImageListToBatch_ [♾️Mixlab_Image]
export interface ImageListToBatch$_ extends HasSingle_IMAGE, ComfyNode<ImageListToBatch$__input, ImageListToBatch$__output> {
    nameInComfy: "ImageListToBatch_"
}
export interface ImageListToBatch$__output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageListToBatch$__input {
    images: _IMAGE
}

// ImageBatchToList_ [♾️Mixlab_Image]
export interface ImageBatchToList$_ extends HasSingle_IMAGE, ComfyNode<ImageBatchToList$__input, ImageBatchToList$__output> {
    nameInComfy: "ImageBatchToList_"
}
export interface ImageBatchToList$__output {
    image_list: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchToList$__input {
    image_batch: _IMAGE
}

// ImageCropByAlpha [♾️Mixlab_Image]
export interface ImageCropByAlpha extends HasSingle_IMAGE, ComfyNode<ImageCropByAlpha_input, ImageCropByAlpha_output> {
    nameInComfy: "ImageCropByAlpha"
}
export interface ImageCropByAlpha_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
    AREA_MASK: ComfyNodeOutput<'MASK', 2>,
    x: ComfyNodeOutput<'INT', 3>,
    y: ComfyNodeOutput<'INT', 4>,
    width: ComfyNodeOutput<'INT', 5>,
    height: ComfyNodeOutput<'INT', 6>,
}
export interface ImageCropByAlpha_input {
    image: _IMAGE
    RGBA: _RGBA
}

// GetImageSize_ [♾️Mixlab_Image]
export interface GetImageSize$_ extends ComfyNode<GetImageSize$__input, GetImageSize$__output> {
    nameInComfy: "GetImageSize_"
}
export interface GetImageSize$__output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    min_width: ComfyNodeOutput<'INT', 2>,
    min_height: ComfyNodeOutput<'INT', 3>,
}
export interface GetImageSize$__input {
    image: _IMAGE
    /** default=512 min=2048 max=2048 step=8 */
    min_width?: _INT
}

// 3DImage [♾️Mixlab_3D]
export interface _3DImage extends HasSingle_MASK, ComfyNode<_3DImage_input, _3DImage_output> {
    nameInComfy: "3DImage"
}
export interface _3DImage_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
    BG_IMAGE: ComfyNodeOutput<'IMAGE', 2>,
    MATERIAL: ComfyNodeOutput<'IMAGE', 3>,
}
export interface _3DImage_input {
    upload: _THREED
    material?: _IMAGE
}

// DepthViewer [♾️Mixlab_3D]
export interface DepthViewer extends HasSingle_IMAGE, ComfyNode<DepthViewer_input, DepthViewer_output> {
    nameInComfy: "DepthViewer"
}
export interface DepthViewer_output {
    frames: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DepthViewer_input {
    image: _IMAGE
    depth_map: _IMAGE
    frames?: _IMAGEBASE64
}

// ImageColorTransfer [♾️Mixlab_Color]
export interface ImageColorTransfer extends HasSingle_IMAGE, ComfyNode<ImageColorTransfer_input, ImageColorTransfer_output> {
    nameInComfy: "ImageColorTransfer"
}
export interface ImageColorTransfer_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageColorTransfer_input {
    source: _IMAGE
    target: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    weight?: _FLOAT
}

// Color [♾️Mixlab_Color]
export interface Color extends HasSingle_STRING, HasSingle_FLOAT, ComfyNode<Color_input, Color_output> {
    nameInComfy: "Color"
}
export interface Color_output {
    hex: ComfyNodeOutput<'STRING', 0>,
    r: ComfyNodeOutput<'INT', 1>,
    g: ComfyNodeOutput<'INT', 2>,
    b: ComfyNodeOutput<'INT', 3>,
    a: ComfyNodeOutput<'FLOAT', 4>,
}
export interface Color_input {
    color: _TCOLOR
}

// ShowLayer [♾️Mixlab_Layer]
export interface ShowLayer extends ComfyNode<ShowLayer_input, ShowLayer_output> {
    nameInComfy: "ShowLayer"
}
export interface ShowLayer_output {
}
export interface ShowLayer_input {
    edit: _EDIT
    /** default=0 min=8192 max=8192 step=1 */
    x?: _INT
    /** default=0 min=8192 max=8192 step=1 */
    y?: _INT
    /** default=512 min=8192 max=8192 step=1 */
    width?: _INT
    /** default=512 min=8192 max=8192 step=1 */
    height?: _INT
    /** default=0 min=100 max=100 step=1 */
    z_index?: _INT
    scale_option: Enum_ShowLayer_scale_option
    /** */
    layers?: _LAYER
}

// NewLayer [♾️Mixlab_Layer]
export interface NewLayer extends HasSingle_LAYER, ComfyNode<NewLayer_input, NewLayer_output> {
    nameInComfy: "NewLayer"
}
export interface NewLayer_output {
    layers: ComfyNodeOutput<'LAYER', 0>,
}
export interface NewLayer_input {
    /** default=0 min=8192 max=8192 step=1 */
    x?: _INT
    /** default=0 min=8192 max=8192 step=1 */
    y?: _INT
    /** default=512 min=8192 max=8192 step=1 */
    width?: _INT
    /** default=512 min=8192 max=8192 step=1 */
    height?: _INT
    /** default=0 min=100 max=100 step=1 */
    z_index?: _INT
    scale_option: Enum_ShowLayer_scale_option
    image: _$Star
    /** */
    mask?: _MASK
    /** */
    layers?: _LAYER
    /** */
    canvas?: _IMAGE
}

// MergeLayers [♾️Mixlab_Layer]
export interface MergeLayers extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<MergeLayers_input, MergeLayers_output> {
    nameInComfy: "MergeLayers"
}
export interface MergeLayers_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface MergeLayers_input {
    layers: _LAYER
    images: _IMAGE
    /** default=false */
    is_multiply_blend?: _BOOLEAN
}

// CompositeImages_ [♾️Mixlab_Layer]
export interface CompositeImages$_ extends HasSingle_IMAGE, ComfyNode<CompositeImages$__input, CompositeImages$__output> {
    nameInComfy: "CompositeImages_"
}
export interface CompositeImages$__output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CompositeImages$__input {
    foreground: _$Star
    mask: _MASK
    background: _IMAGE
    /** default=false */
    is_multiply_blend?: _BOOLEAN
    position?: Enum_CompositeImages$__position
    /** default=0.35 min=1 max=1 step=0.01 */
    scale?: _FLOAT
}

// SplitImage [♾️Mixlab_Layer]
export interface SplitImage extends HasSingle_MASK, ComfyNode<SplitImage_input, SplitImage_output> {
    nameInComfy: "SplitImage"
}
export interface SplitImage_output {
    grids: ComfyNodeOutput<'_GRID', 0>,
    grid: ComfyNodeOutput<'_GRID', 1>,
    mask: ComfyNodeOutput<'MASK', 2>,
}
export interface SplitImage_input {
    image: _IMAGE
    /** default=4 min=500 max=500 step=1 */
    num?: _INT
    /** default=4 min=500 max=500 step=1 */
    seed?: _INT
}

// CenterImage [♾️Mixlab_Layer]
export interface CenterImage extends HasSingle__GRID, HasSingle_MASK, ComfyNode<CenterImage_input, CenterImage_output> {
    nameInComfy: "CenterImage"
}
export interface CenterImage_output {
    grid: ComfyNodeOutput<'_GRID', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
}
export interface CenterImage_input {
    canvas: _IMAGE
    /** default=24 min=5000 max=5000 step=1 */
    left?: _INT
    /** default=24 min=5000 max=5000 step=1 */
    top?: _INT
    /** default=24 min=5000 max=5000 step=1 */
    right?: _INT
    /** default=24 min=5000 max=5000 step=1 */
    bottom?: _INT
}

// GridOutput [♾️Mixlab_Layer]
export interface GridOutput extends HasSingle_MASK, ComfyNode<GridOutput_input, GridOutput_output> {
    nameInComfy: "GridOutput"
}
export interface GridOutput_output {
    x: ComfyNodeOutput<'INT', 0>,
    y: ComfyNodeOutput<'INT', 1>,
    width: ComfyNodeOutput<'INT', 2>,
    height: ComfyNodeOutput<'INT', 3>,
    mask: ComfyNodeOutput<'MASK', 4>,
}
export interface GridOutput_input {
    grid: __GRID
    bg_image?: _IMAGE
}

// GridDisplayAndSave [♾️Mixlab_Layer]
export interface GridDisplayAndSave extends ComfyNode<GridDisplayAndSave_input, GridDisplayAndSave_output> {
    nameInComfy: "GridDisplayAndSave"
}
export interface GridDisplayAndSave_output {
}
export interface GridDisplayAndSave_input {
    /** default="" */
    labels?: _STRING
    grids: __GRID
    image: _IMAGE
    /** default="mixlab/grids" */
    filename_prefix?: _STRING
}

// SplitLongMask [♾️Mixlab_Mask]
export interface SplitLongMask extends HasSingle_MASK, ComfyNode<SplitLongMask_input, SplitLongMask_output> {
    nameInComfy: "SplitLongMask"
}
export interface SplitLongMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface SplitLongMask_input {
    long_mask: _MASK
    /** default=1 min=1024 max=1024 step=1 */
    count?: _INT
}

// FeatheredMask [♾️Mixlab_Mask]
export interface FeatheredMask extends HasSingle_MASK, ComfyNode<FeatheredMask_input, FeatheredMask_output> {
    nameInComfy: "FeatheredMask"
}
export interface FeatheredMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface FeatheredMask_input {
    mask: _MASK
    /** default=1 min=150 max=150 step=1 */
    start_offset?: _INT
    /** default=0.1 min=1 max=1 step=0.1 */
    feathering_weight?: _FLOAT
}

// SmoothMask [♾️Mixlab_Mask]
export interface SmoothMask extends HasSingle_MASK, ComfyNode<SmoothMask_input, SmoothMask_output> {
    nameInComfy: "SmoothMask"
}
export interface SmoothMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface SmoothMask_input {
    mask: _MASK
    /** default=1 min=150 max=150 step=1 */
    smoothness?: _INT
}

// FaceToMask [♾️Mixlab_Mask]
export interface FaceToMask extends HasSingle_MASK, ComfyNode<FaceToMask_input, FaceToMask_output> {
    nameInComfy: "FaceToMask"
}
export interface FaceToMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface FaceToMask_input {
    image: _IMAGE
}

// AreaToMask [♾️Mixlab_Mask]
export interface AreaToMask extends HasSingle_MASK, ComfyNode<AreaToMask_input, AreaToMask_output> {
    nameInComfy: "AreaToMask"
}
export interface AreaToMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface AreaToMask_input {
    RGBA: _RGBA
}

// OutlineMask [♾️Mixlab_Mask]
export interface OutlineMask extends HasSingle_MASK, ComfyNode<OutlineMask_input, OutlineMask_output> {
    nameInComfy: "OutlineMask"
}
export interface OutlineMask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface OutlineMask_input {
    mask: _MASK
    /** default=10 min=16384 max=16384 step=1 */
    outline_width?: _INT
    /** default=true */
    tapered_corners?: _BOOLEAN
}

// MaskListMerge_ [♾️Mixlab_Mask]
export interface MaskListMerge$_ extends HasSingle_MASK, ComfyNode<MaskListMerge$__input, MaskListMerge$__output> {
    nameInComfy: "MaskListMerge_"
}
export interface MaskListMerge$__output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskListMerge$__input {
    masks: _MASK
}

// PreviewMask_ [♾️Mixlab_Mask]
export interface PreviewMask$_ extends ComfyNode<PreviewMask$__input, PreviewMask$__output> {
    nameInComfy: "PreviewMask_"
}
export interface PreviewMask$__output {
}
export interface PreviewMask$__input {
    mask: _MASK
}

// ScreenShare [♾️Mixlab_Screen]
export interface ScreenShare extends HasSingle_IMAGE, HasSingle_STRING, HasSingle_FLOAT, HasSingle_INT, ComfyNode<ScreenShare_input, ScreenShare_output> {
    nameInComfy: "ScreenShare"
}
export interface ScreenShare_output {
    "current$_frame$_$1image$2": ComfyNodeOutput<'IMAGE', 0>,
    prompt: ComfyNodeOutput<'STRING', 1>,
    "denoise$_$1float$2": ComfyNodeOutput<'FLOAT', 2>,
    "seed$_$1int$2": ComfyNodeOutput<'INT', 3>,
}
export interface ScreenShare_input {
    image_base64: _CHEESE
    /** default=500 min=18446744073709552000 max=18446744073709552000 step=50 */
    refresh_rate?: _INT
    prompt?: _PROMPT
    slide?: _SLIDE
    seed?: _SEED
}

// FloatingVideo [♾️Mixlab_Screen]
export interface FloatingVideo extends ComfyNode<FloatingVideo_input, FloatingVideo_output> {
    nameInComfy: "FloatingVideo"
}
export interface FloatingVideo_output {
}
export interface FloatingVideo_input {
    image: _IMAGE
}

// SpeechRecognition [♾️Mixlab_Audio]
export interface SpeechRecognition extends HasSingle_STRING, ComfyNode<SpeechRecognition_input, SpeechRecognition_output> {
    nameInComfy: "SpeechRecognition"
}
export interface SpeechRecognition_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
}
export interface SpeechRecognition_input {
    upload: _AUDIOINPUTMIX
    /** default=0 min=2048 max=2048 step=1 */
    start_by?: _INT
}

// SpeechSynthesis [♾️Mixlab_Audio]
export interface SpeechSynthesis extends HasSingle_STRING, ComfyNode<SpeechSynthesis_input, SpeechSynthesis_output> {
    nameInComfy: "SpeechSynthesis"
}
export interface SpeechSynthesis_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface SpeechSynthesis_input {
    /** */
    text: _STRING
}

// AudioPlay [♾️Mixlab_Audio]
export interface AudioPlay extends ComfyNode<AudioPlay_input, AudioPlay_output> {
    nameInComfy: "AudioPlay"
}
export interface AudioPlay_output {
}
export interface AudioPlay_input {
    audio: _AUDIO
}

// AnalyzeAudio [♾️Mixlab_Audio]
export interface AnalyzeAudio extends HasSingle_$Star, ComfyNode<AnalyzeAudio_input, AnalyzeAudio_output> {
    nameInComfy: "AnalyzeAudio"
}
export interface AnalyzeAudio_output {
    result: ComfyNodeOutput<'$Star', 0>,
}
export interface AnalyzeAudio_input {
    json: _$Star
}

// TextToNumber [♾️Mixlab_Text]
export interface TextToNumber extends HasSingle_INT, ComfyNode<TextToNumber_input, TextToNumber_output> {
    nameInComfy: "TextToNumber"
}
export interface TextToNumber_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface TextToNumber_input {
    /** default="1" */
    text?: _STRING
    random_number: Enum_KSamplerAdvanced_add_noise
    /** default=10 min=10000000000 max=10000000000 step=1 */
    max_num?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _$Star
}

// JoinWithDelimiter [♾️Mixlab_Text]
export interface JoinWithDelimiter extends HasSingle_STRING, ComfyNode<JoinWithDelimiter_input, JoinWithDelimiter_output> {
    nameInComfy: "JoinWithDelimiter"
}
export interface JoinWithDelimiter_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface JoinWithDelimiter_input {
    text_list: _$Star
    delimiter: Enum_JoinWithDelimiter_delimiter
}

// MultiplicationNode [♾️Mixlab_Utils]
export interface MultiplicationNode extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<MultiplicationNode_input, MultiplicationNode_output> {
    nameInComfy: "MultiplicationNode"
}
export interface MultiplicationNode_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface MultiplicationNode_input {
    numberA: _$Star
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    multiply_by?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    add_by?: _FLOAT
}

// DynamicDelayProcessor [♾️Mixlab_Utils]
export interface DynamicDelayProcessor extends HasSingle_$Star, ComfyNode<DynamicDelayProcessor_input, DynamicDelayProcessor_output> {
    nameInComfy: "DynamicDelayProcessor"
}
export interface DynamicDelayProcessor_output {
    output: ComfyNodeOutput<'$Star', 0>,
}
export interface DynamicDelayProcessor_input {
    /** default=1 min=1000000 max=1000000 */
    delay_seconds?: _INT
    any_input?: _$Star
    /** */
    delay_by_text?: _STRING
    /** default=1.5 min=1000 max=1000 */
    words_per_seconds?: _FLOAT
    replace_output?: Enum_KSamplerAdvanced_add_noise
    /** default=-1 min=1000000 max=1000000 */
    replace_value?: _INT
}

// SwitchByIndex [♾️Mixlab_Utils]
export interface SwitchByIndex extends HasSingle_$Star, HasSingle_INT, ComfyNode<SwitchByIndex_input, SwitchByIndex_output> {
    nameInComfy: "SwitchByIndex"
}
export interface SwitchByIndex_output {
    list: ComfyNodeOutput<'$Star', 0>,
    count: ComfyNodeOutput<'INT', 1>,
}
export interface SwitchByIndex_input {
    /** default=-1 min=1000 max=1000 step=1 */
    index?: _INT
    flat: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
    A?: _$Star
    B?: _$Star
}

// ListSplit_ [♾️Mixlab_Utils]
export interface ListSplit$_ extends HasSingle_$Star, ComfyNode<ListSplit$__input, ListSplit$__output> {
    nameInComfy: "ListSplit_"
}
export interface ListSplit$__output {
    B: ComfyNodeOutput<'$Star', 0>,
}
export interface ListSplit$__input {
    /** default=10 min=undefined step=1 */
    chunk_size?: _INT
    /** default=0 min=undefined step=1 */
    transition_size?: _INT
    /** default=-1 min=undefined step=1 */
    index?: _INT
    A?: _$Star
}

// Seed_ [♾️Mixlab_Experiment]
export interface Seed$_ extends HasSingle_INT, ComfyNode<Seed$__input, Seed$__output> {
    nameInComfy: "Seed_"
}
export interface Seed$__output {
    seed: ComfyNodeOutput<'INT', 0>,
}
export interface Seed$__input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// CkptNames_ [♾️Mixlab_Experiment]
export interface CkptNames$_ extends HasSingle_$Star, ComfyNode<CkptNames$__input, CkptNames$__output> {
    nameInComfy: "CkptNames_"
}
export interface CkptNames$__output {
    ckpt_names: ComfyNodeOutput<'$Star', 0>,
}
export interface CkptNames$__input {
    /** default="AOM3A1_orangemixs.safetensors\nAOM3A3_orangemixs.safetensors\nDeliberate-inpainting.safetensors\nFLUX1\\flux1-dev-fp8.safetensors\nSevenof9V3.safetensors\nalbedobaseXL_v13.safetensors\nalbedobaseXL_v21.safetensors\nangel1_36224.safetensors\nanything-v3-fp16-pruned.safetensors\nautismmixSDXL_autismmixConfetti.safetensors\ncartoonArcadiaSDXLSD1_xenoArcadiaCX.safetensors\ncopaxTimelessxlSDXL1_v8.safetensors\ndeliberate_v2.safetensors\ndndMapGenerator_v3.safetensors\nillustriousXL_v01.safetensors\nlyriel_v15.safetensors\nmistoonAnime_v10.safetensors\nmistoonAnime_v10Inpainting.safetensors\nnoobaiXLNAIXL_earlyAccessVersion.safetensors\nnoobaiXLNAIXL_vPredTestVersion.safetensors\nponyDiffusionV6XL_v6StartWithThisOne.safetensors\nrealisticVisionV20_v20.safetensors\nrealisticVisionV51_v51VAE.safetensors\nrevAnimated_v121.safetensors\nrevAnimated_v121Inp-inpainting.safetensors\nrevAnimated_v122.safetensors\nsd_xl_base_1.0.safetensors\nsd_xl_refiner_1.0.safetensors\nsdxlMergeheaven_betaM15.safetensors\ntoonyou_beta1.safetensors\ntoonyou_beta6.safetensors\nupscale\\x4-upscaler-ema.safetensors\nv1-5-pruned-emaonly.ckpt\nv1-5-pruned-emaonly.safetensors\nv2-1_512-ema-pruned.safetensors\nv2-1_768-ema-pruned.safetensors\nwd-1-5-beta2-fp16.safetensors\nzero123\\stable_zero123.ckpt" */
    ckpt_names?: _STRING
}

// SamplerNames_ [♾️Mixlab_Experiment]
export interface SamplerNames$_ extends HasSingle_$Star, ComfyNode<SamplerNames$__input, SamplerNames$__output> {
    nameInComfy: "SamplerNames_"
}
export interface SamplerNames$__output {
    sampler_names: ComfyNodeOutput<'$Star', 0>,
}
export interface SamplerNames$__input {
    /** default="euler\neuler_cfg_pp\neuler_ancestral\neuler_ancestral_cfg_pp\nheun\nheunpp2\ndpm_2\ndpm_2_ancestral\nlms\ndpm_fast\ndpm_adaptive\ndpmpp_2s_ancestral\ndpmpp_2s_ancestral_cfg_pp\ndpmpp_sde\ndpmpp_sde_gpu\ndpmpp_2m\ndpmpp_2m_cfg_pp\ndpmpp_2m_sde\ndpmpp_2m_sde_gpu\ndpmpp_3m_sde\ndpmpp_3m_sde_gpu\nddpm\nlcm\nipndm\nipndm_v\ndeis\nddim\nuni_pc\nuni_pc_bh2" */
    sampler_names?: _STRING
}

// LoraNames_ [♾️Mixlab_Experiment]
export interface LoraNames$_ extends HasSingle_$Star, HasSingle_STRING, ComfyNode<LoraNames$__input, LoraNames$__output> {
    nameInComfy: "LoraNames_"
}
export interface LoraNames$__output {
    lora_names: ComfyNodeOutput<'$Star', 0>,
    prompt: ComfyNodeOutput<'STRING', 1>,
}
export interface LoraNames$__input {
    /** default="LogoRedmondV2-Logo-LogoRedmAF.safetensors\nSpreadAssMS.safetensors\nip-adapter-faceid-plusv2_sd15_lora.safetensors\nip-adapter-faceid_sd15_lora.safetensors\nipadapter\\ip-adapter-faceid-plusv2_sd15_lora.safetensors\nipadapter\\ip-adapter-faceid_sd15_lora.safetensors\nlcm\\SD1.5\\pytorch_lora_weights.safetensors\nlcm\\pytorch_lora_weights.safetensors\npixel-art-xl-v1.1.safetensors\npixelgirl.safetensors\nsamsung_line_art.safetensors\nsd15\\Character Design.safetensors\nsd15\\Isometric Cutaway.safetensors\nsd15\\Stained Glass Portrait.safetensors\nsd15\\animemix_16.safetensors\nsd15\\animemix_v3_offset.safetensors\nsd15\\chars\\dark_magician_girl.safetensors\nsd15\\chars\\yorha_noDOT_2_type_b.safetensors\nsd15\\colors\\LowRa.safetensors\nsd15\\colors\\theovercomer8sContrastFix_sd15.safetensors\nsd15\\colors\\theovercomer8sContrastFix_sd21768.safetensors\nsd15\\styles\\ConstructionyardAIV3.safetensors\nsd15\\styles\\StonepunkAI-000011.safetensors\nsd15\\styles\\ToonYou_Style.safetensors\nsd15\\styles\\baroqueAI.safetensors\nsd15\\styles\\pixel_f2.safetensors\nsd15\\test\\Moxin_10.safetensors\nsd15\\test\\animeLineartMangaLike_v30MangaLike.safetensors\nsd15\\utils\\charTurnBetaLora.safetensors\nsleepygimp.safetensors\nxl\\Flat style-000014.safetensors\nxl\\moebzxl.safetensors\nxl\\pxll.safetensors\nxl\\sdxl-baton-v02-e93.safetensors\nxl\\watson_lora_v2_128.safetensors\nz-arthur\\AmateurPornStyle-v1.safetensors" */
    lora_names?: _STRING
}

// ApplyVisualStylePrompting_ [♾️Mixlab_Style]
export interface ApplyVisualStylePrompting$_ extends HasSingle_MODEL, HasSingle_LATENT, ComfyNode<ApplyVisualStylePrompting$__input, ApplyVisualStylePrompting$__output> {
    nameInComfy: "ApplyVisualStylePrompting_"
}
export interface ApplyVisualStylePrompting$__output {
    model: ComfyNodeOutput<'MODEL', 0>,
    positive: ComfyNodeOutput<'CONDITIONING', 1>,
    negative: ComfyNodeOutput<'CONDITIONING', 2>,
    latents: ComfyNodeOutput<'LATENT', 3>,
}
export interface ApplyVisualStylePrompting$__input {
    reference_image: _IMAGE
    /** */
    reference_image_text: _STRING
    model: _MODEL
    clip: _CLIP
    vae: _VAE
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=true */
    enabled?: _BOOLEAN
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=1 min=4096 max=4096 step=2 */
    batch_size?: _INT
}

// StyleAlignedReferenceSampler_ [♾️Mixlab_Style]
export interface StyleAlignedReferenceSampler$_ extends ComfyNode<StyleAlignedReferenceSampler$__input, StyleAlignedReferenceSampler$__output> {
    nameInComfy: "StyleAlignedReferenceSampler_"
}
export interface StyleAlignedReferenceSampler$__output {
    output: ComfyNodeOutput<'LATENT', 0>,
    denoised_output: ComfyNodeOutput<'LATENT', 1>,
}
export interface StyleAlignedReferenceSampler$__input {
    ref_latents: _STEP_LATENTS
    /** */
    reference_image_text: _STRING
    model: _MODEL
    clip: _CLIP
    positive: _CONDITIONING
    negative: _CONDITIONING
    share_norm: Enum_StyleAlignedReferenceSampler$__share_norm
    share_attn: Enum_StyleAlignedReferenceSampler$__share_attn
    /** default=1 min=2 max=2 step=0.01 */
    scale?: _FLOAT
    /** default=2 min=8 max=8 step=1 */
    batch_size?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    scheduler: Enum_KSampler_scheduler
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// StyleAlignedSampleReferenceLatents_ [♾️Mixlab_Style]
export interface StyleAlignedSampleReferenceLatents$_ extends HasSingle_STEP_LATENTS, HasSingle_LATENT, ComfyNode<StyleAlignedSampleReferenceLatents$__input, StyleAlignedSampleReferenceLatents$__output> {
    nameInComfy: "StyleAlignedSampleReferenceLatents_"
}
export interface StyleAlignedSampleReferenceLatents$__output {
    ref_latents: ComfyNodeOutput<'STEP_LATENTS', 0>,
    noised_output: ComfyNodeOutput<'LATENT', 1>,
}
export interface StyleAlignedSampleReferenceLatents$__input {
    reference_image: _IMAGE
    positive: _CONDITIONING
    negative: _CONDITIONING
    model: _MODEL
    vae: _VAE
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    scheduler: _INVALID_null
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// StyleAlignedBatchAlign_ [♾️Mixlab_Style]
export interface StyleAlignedBatchAlign$_ extends HasSingle_MODEL, ComfyNode<StyleAlignedBatchAlign$__input, StyleAlignedBatchAlign$__output> {
    nameInComfy: "StyleAlignedBatchAlign_"
}
export interface StyleAlignedBatchAlign$__output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface StyleAlignedBatchAlign$__input {
    model: _MODEL
    share_norm: Enum_StyleAlignedReferenceSampler$__share_norm
    share_attn: Enum_StyleAlignedReferenceSampler$__share_attn
    /** default=1 min=1 max=1 step=0.1 */
    scale?: _FLOAT
}

// MaskListReplace_ [♾️Mixlab_Video]
export interface MaskListReplace$_ extends HasSingle_MASK, ComfyNode<MaskListReplace$__input, MaskListReplace$__output> {
    nameInComfy: "MaskListReplace_"
}
export interface MaskListReplace$__output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskListReplace$__input {
    masks: _MASK
    mask_replace: _MASK
    /** default=0 min=undefined step=1 */
    start_index?: _INT
    /** default=0 min=undefined step=1 */
    end_index?: _INT
    /** default=false */
    invert?: _BOOLEAN
}

// IncrementingListNode_ [♾️Mixlab_Video]
export interface IncrementingListNode$_ extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<IncrementingListNode$__input, IncrementingListNode$__output> {
    nameInComfy: "IncrementingListNode_"
}
export interface IncrementingListNode$__output {
    int_list: ComfyNodeOutput<'INT', 0>,
    float_list: ComfyNodeOutput<'FLOAT', 1>,
}
export interface IncrementingListNode$__input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    min_value?: _FLOAT
    /** default=10 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    max_value?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    step?: _FLOAT
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=1 */
    count?: _INT
    /** default=-1 min=1000000 max=1000000 */
    seed?: _INT
}

// P5Input [♾️Mixlab_Input]
export interface P5Input extends HasSingle_IMAGE, ComfyNode<P5Input_input, P5Input_output> {
    nameInComfy: "P5Input"
}
export interface P5Input_output {
    frames: ComfyNodeOutput<'IMAGE', 0>,
}
export interface P5Input_input {
    frames: _IMAGEBASE64
}

// ChatGPTOpenAI [♾️Mixlab_GPT]
export interface ChatGPTOpenAI extends ComfyNode<ChatGPTOpenAI_input, ChatGPTOpenAI_output> {
    nameInComfy: "ChatGPTOpenAI"
}
export interface ChatGPTOpenAI_output {
    text: ComfyNodeOutput<'STRING', 0>,
    messages: ComfyNodeOutput<'STRING', 1>,
    session_history: ComfyNodeOutput<'STRING', 2>,
}
export interface ChatGPTOpenAI_input {
    /** */
    prompt: _STRING
    /** default="You are ChatGPT, a large language model trained by OpenAI. Answer as concisely as possible." */
    system_content?: _STRING
    /** default="gpt-3.5-turbo" */
    model?: Enum_ChatGPTOpenAI_model
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
    /** default=1 min=30 max=30 step=1 */
    context_size?: _INT
    /** default="openai" */
    api_url?: Enum_ChatGPTOpenAI_api_url
    /** */
    api_key?: _STRING
    /** */
    custom_model_name?: _STRING
    /** */
    custom_api_url?: _STRING
}

// SiliconflowLLM [♾️Mixlab_GPT]
export interface SiliconflowLLM extends ComfyNode<SiliconflowLLM_input, SiliconflowLLM_output> {
    nameInComfy: "SiliconflowLLM"
}
export interface SiliconflowLLM_output {
    text: ComfyNodeOutput<'STRING', 0>,
    messages: ComfyNodeOutput<'STRING', 1>,
    session_history: ComfyNodeOutput<'STRING', 2>,
}
export interface SiliconflowLLM_input {
    /** */
    api_key: _STRING
    /** */
    prompt: _STRING
    /** default="You are ChatGPT, a large language model trained by OpenAI. Answer as concisely as possible." */
    system_content?: _STRING
    /** default="Qwen/Qwen2.5-7B-Instruct" */
    model?: Enum_SiliconflowLLM_model
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
    /** default=1 min=30 max=30 step=1 */
    context_size?: _INT
    /** default=512 min=200000 max=200000 step=1 */
    max_tokens?: _INT
    /** */
    custom_model_name?: _STRING
}

// SiliconflowTextToImageNode [♾️Mixlab_Image]
export interface SiliconflowTextToImageNode extends HasSingle_IMAGE, ComfyNode<SiliconflowTextToImageNode_input, SiliconflowTextToImageNode_output> {
    nameInComfy: "SiliconflowTextToImageNode"
}
export interface SiliconflowTextToImageNode_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SiliconflowTextToImageNode_input {
    /** */
    api_key: _STRING
    /** */
    prompt: _STRING
    /** default=512 min=4096 max=4096 step=8 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=8 */
    height?: _INT
    /** default="black-forest-labs/FLUX.1-schnell" */
    model?: Enum_SiliconflowTextToImageNode_model
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
    /** */
    custom_model_name?: _STRING
}

// ShowTextForGPT [♾️Mixlab_Text]
export interface ShowTextForGPT extends HasSingle_STRING, ComfyNode<ShowTextForGPT_input, ShowTextForGPT_output> {
    nameInComfy: "ShowTextForGPT"
}
export interface ShowTextForGPT_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ShowTextForGPT_input {
    /** */
    text: _STRING
    /** default="" */
    output_dir?: _STRING
}

// CharacterInText [♾️Mixlab_Text]
export interface CharacterInText extends HasSingle_INT, ComfyNode<CharacterInText_input, CharacterInText_output> {
    nameInComfy: "CharacterInText"
}
export interface CharacterInText_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface CharacterInText_input {
    /** */
    text: _STRING
    /** */
    character: _STRING
    /** default=1 min=1024 max=1024 step=1 */
    start_index?: _INT
}

// TextSplitByDelimiter [♾️Mixlab_Text]
export interface TextSplitByDelimiter extends HasSingle_STRING, ComfyNode<TextSplitByDelimiter_input, TextSplitByDelimiter_output> {
    nameInComfy: "TextSplitByDelimiter"
}
export interface TextSplitByDelimiter_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface TextSplitByDelimiter_input {
    /** */
    text: _STRING
    /** default="," */
    delimiter?: _STRING
    /** default=0 min=1000 max=1000 step=1 */
    start_index?: _INT
    /** default=0 min=10 max=10 step=1 */
    skip_every?: _INT
    /** default=10 min=1000 max=1000 step=1 */
    max_count?: _INT
}

// JsonRepair [♾️Mixlab_GPT]
export interface JsonRepair extends ComfyNode<JsonRepair_input, JsonRepair_output> {
    nameInComfy: "JsonRepair"
}
export interface JsonRepair_output {
    json_string: ComfyNodeOutput<'STRING', 0>,
    value: ComfyNodeOutput<'STRING', 1>,
}
export interface JsonRepair_input {
    /** */
    json_string: _STRING
    /** default="" */
    key?: _STRING
    /** */
    json_string2?: _STRING
}

// SimulateDevDesignDiscussions [♾️Mixlab_GPT]
export interface SimulateDevDesignDiscussions extends HasSingle_STRING, ComfyNode<SimulateDevDesignDiscussions_input, SimulateDevDesignDiscussions_output> {
    nameInComfy: "SimulateDevDesignDiscussions"
}
export interface SimulateDevDesignDiscussions_output {
    text: ComfyNodeOutput<'STRING', 0>,
}
export interface SimulateDevDesignDiscussions_input {
    /** */
    subject: _STRING
    /** default="gpt-4o" */
    model?: Enum_SimulateDevDesignDiscussions_model
    /** default="openai" */
    api_url?: Enum_ChatGPTOpenAI_api_url
    /** */
    api_key?: _STRING
    /** */
    custom_model_name?: _STRING
    /** */
    custom_api_url?: _STRING
}

// EditMask [♾️Mixlab_Mask]
export interface EditMask extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<EditMask_input, EditMask_output> {
    nameInComfy: "EditMask"
}
export interface EditMask_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
}
export interface EditMask_input {
    image: _IMAGE
    image_update?: _IMAGE_FILE
}

// LaMaInpainting [♾️Mixlab_Image]
export interface LaMaInpainting extends HasSingle_IMAGE, ComfyNode<LaMaInpainting_input, LaMaInpainting_output> {
    nameInComfy: "LaMaInpainting"
}
export interface LaMaInpainting_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface LaMaInpainting_input {
    image: _IMAGE
    mask: _MASK
}

// ClipInterrogator [♾️Mixlab_Prompt]
export interface ClipInterrogator extends ComfyNode<ClipInterrogator_input, ClipInterrogator_output> {
    nameInComfy: "ClipInterrogator"
}
export interface ClipInterrogator_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
    random_samples: ComfyNodeOutput<'STRING', 1>,
}
export interface ClipInterrogator_input {
    image: _IMAGE
    prompt_mode: Enum_ClipInterrogator_prompt_mode
    image_analysis: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
}

// PromptGenerate_Mix [♾️Mixlab_Prompt]
export interface PromptGenerate$_Mix extends HasSingle_STRING, ComfyNode<PromptGenerate$_Mix_input, PromptGenerate$_Mix_output> {
    nameInComfy: "PromptGenerate_Mix"
}
export interface PromptGenerate$_Mix_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
}
export interface PromptGenerate$_Mix_input {
    /** default="" */
    text?: _STRING
    multiple?: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
    /** default=100 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// ChinesePrompt_Mix [♾️Mixlab_Prompt]
export interface ChinesePrompt$_Mix extends HasSingle_STRING, ComfyNode<ChinesePrompt$_Mix_input, ChinesePrompt$_Mix_output> {
    nameInComfy: "ChinesePrompt_Mix"
}
export interface ChinesePrompt$_Mix_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
}
export interface ChinesePrompt$_Mix_input {
    /** default="" */
    text?: _STRING
    /** default="off" */
    generation?: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle
    /** default=100 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// RembgNode_Mix [♾️Mixlab_Mask]
export interface RembgNode$_Mix extends HasSingle_MASK, HasSingle_IMAGE, HasSingle_RGBA, ComfyNode<RembgNode$_Mix_input, RembgNode$_Mix_output> {
    nameInComfy: "RembgNode_Mix"
}
export interface RembgNode$_Mix_output {
    masks: ComfyNodeOutput<'MASK', 0>,
    images: ComfyNodeOutput<'IMAGE', 1>,
    RGBAs: ComfyNodeOutput<'RGBA', 2>,
}
export interface RembgNode$_Mix_input {
    image: _IMAGE
    model_name: Enum_RembgNode$_Mix_model_name
}

// VAEEncodeForInpaint_Frames [♾️Mixlab_Video]
export interface VAEEncodeForInpaint$_Frames extends HasSingle_LATENT, ComfyNode<VAEEncodeForInpaint$_Frames_input, VAEEncodeForInpaint$_Frames_output> {
    nameInComfy: "VAEEncodeForInpaint_Frames"
}
export interface VAEEncodeForInpaint$_Frames_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface VAEEncodeForInpaint$_Frames_input {
    vae: _VAE
    images: _IMAGE
    masks: _MASK
    /** default=6 min=64 max=64 step=1 */
    grow_mask_by?: _INT
}

// ImageListReplace_ [♾️Mixlab_Video]
export interface ImageListReplace$_ extends ComfyNode<ImageListReplace$__input, ImageListReplace$__output> {
    nameInComfy: "ImageListReplace_"
}
export interface ImageListReplace$__output {
    images: ComfyNodeOutput<'IMAGE', 0>,
    select_images: ComfyNodeOutput<'IMAGE', 1>,
}
export interface ImageListReplace$__input {
    images: _IMAGE
    /** default=0 min=undefined step=1 */
    start_index?: _INT
    /** default=0 min=undefined step=1 */
    end_index?: _INT
    /** default=false */
    invert?: _BOOLEAN
    image_replace?: _IMAGE
    images_replace?: _IMAGE
}

// LoadVideoAndSegment_ [♾️Mixlab_Video]
export interface LoadVideoAndSegment$_ extends HasSingle_SCENE_VIDEO, ComfyNode<LoadVideoAndSegment$__input, LoadVideoAndSegment$__output> {
    nameInComfy: "LoadVideoAndSegment_"
}
export interface LoadVideoAndSegment$__output {
    scenes_video: ComfyNodeOutput<'SCENE_VIDEO', 0>,
    scenes_count: ComfyNodeOutput<'INT', 1>,
    frame_count: ComfyNodeOutput<'INT', 2>,
    fps: ComfyNodeOutput<'INT', 3>,
}
export interface LoadVideoAndSegment$__input {
    /** */
    video: Enum_LoadVideoAndSegment$__video
    /** default=10 min=undefined step=1 */
    video_segment_frames?: _INT
    /** default=0 min=undefined step=1 */
    transition_frames?: _INT
}

// VideoCombine_Adv [♾️Mixlab_Video]
export interface VideoCombine$_Adv extends HasSingle_SCENE_VIDEO, ComfyNode<VideoCombine$_Adv_input, VideoCombine$_Adv_output> {
    nameInComfy: "VideoCombine_Adv"
}
export interface VideoCombine$_Adv_output {
    scenes_video: ComfyNodeOutput<'SCENE_VIDEO', 0>,
}
export interface VideoCombine$_Adv_input {
    image_batch: _IMAGE
    /** default=8 min=undefined step=1 */
    frame_rate?: _INT
    /** default=0 min=100 max=100 step=1 */
    loop_count?: _INT
    /** default="Comfyui" */
    filename_prefix?: _STRING
    format: Enum_VideoCombine$_Adv_format
    /** default=false */
    pingpong?: _BOOLEAN
    /** default=true */
    save_image?: _BOOLEAN
    /** default=false */
    metadata?: _BOOLEAN
}

// LoadAndCombinedAudio_ [♾️Mixlab_Audio]
export interface LoadAndCombinedAudio$_ extends HasSingle_STRING, HasSingle_AUDIO, ComfyNode<LoadAndCombinedAudio$__input, LoadAndCombinedAudio$__output> {
    nameInComfy: "LoadAndCombinedAudio_"
}
export interface LoadAndCombinedAudio$__output {
    audio_file_path: ComfyNodeOutput<'STRING', 0>,
    audio: ComfyNodeOutput<'AUDIO', 1>,
}
export interface LoadAndCombinedAudio$__input {
    audios: _AUDIOBASE64
    /** default=0 min=10000000 max=10000000 step=0.01 */
    start_time?: _FLOAT
    /** default=10 min=10000000 max=10000000 step=0.01 */
    duration?: _FLOAT
}

// CombineAudioVideo [♾️Mixlab_Video]
export interface CombineAudioVideo extends HasSingle_SCENE_VIDEO, ComfyNode<CombineAudioVideo_input, CombineAudioVideo_output> {
    nameInComfy: "CombineAudioVideo"
}
export interface CombineAudioVideo_output {
    SCENE_VIDEO: ComfyNodeOutput<'SCENE_VIDEO', 0>,
}
export interface CombineAudioVideo_input {
    video: _SCENE_VIDEO
    audio: _AUDIO
}

// ScenesNode_ [♾️Mixlab_Video]
export interface ScenesNode$_ extends HasSingle_IMAGE, HasSingle_INT, ComfyNode<ScenesNode$__input, ScenesNode$__output> {
    nameInComfy: "ScenesNode_"
}
export interface ScenesNode$__output {
    "video$_frames$_$1batch$2": ComfyNodeOutput<'IMAGE', 0>,
    count: ComfyNodeOutput<'INT', 1>,
}
export interface ScenesNode$__input {
    scenes_video: _SCENE_VIDEO
    /** default=0 min=undefined step=1 */
    index?: _INT
}

// GenerateFramesByCount [♾️Mixlab_Video]
export interface GenerateFramesByCount extends HasSingle_IMAGE, ComfyNode<GenerateFramesByCount_input, GenerateFramesByCount_output> {
    nameInComfy: "GenerateFramesByCount"
}
export interface GenerateFramesByCount_output {
    frames: ComfyNodeOutput<'IMAGE', 0>,
}
export interface GenerateFramesByCount_input {
    frames: _IMAGE
    /** default=72 min=undefined step=1 */
    frame_count?: _INT
    /** default=true */
    revert?: _BOOLEAN
}

// LoadTripoSRModel_ [♾️Mixlab_3D_TripoSR]
export interface LoadTripoSRModel$_ extends HasSingle_TRIPOSR_MODEL, ComfyNode<LoadTripoSRModel$__input, LoadTripoSRModel$__output> {
    nameInComfy: "LoadTripoSRModel_"
}
export interface LoadTripoSRModel$__output {
    TRIPOSR_MODEL: ComfyNodeOutput<'TRIPOSR_MODEL', 0>,
}
export interface LoadTripoSRModel$__input {
    /** default=8192 min=10000 max=10000 */
    chunk_size?: _INT
}

// TripoSRSampler_ [♾️Mixlab_3D_TripoSR]
export interface TripoSRSampler$_ extends HasSingle_MESH, ComfyNode<TripoSRSampler$__input, TripoSRSampler$__output> {
    nameInComfy: "TripoSRSampler_"
}
export interface TripoSRSampler$__output {
    MESH: ComfyNodeOutput<'MESH', 0>,
}
export interface TripoSRSampler$__input {
    model: _TRIPOSR_MODEL
    image: _IMAGE
    /** default=256 min=12288 max=12288 */
    resolution?: _INT
    /** default=25 min=undefined step=0.01 */
    threshold?: _FLOAT
    device: Enum_TripoSRSampler$__device
    mask?: _MASK
}

// SaveTripoSRMesh [♾️Mixlab_3D_TripoSR]
export interface SaveTripoSRMesh extends ComfyNode<SaveTripoSRMesh_input, SaveTripoSRMesh_output> {
    nameInComfy: "SaveTripoSRMesh"
}
export interface SaveTripoSRMesh_output {
}
export interface SaveTripoSRMesh_input {
    mesh: _MESH
    /** default="TripoSR_" */
    filename_prefix?: _STRING
}

// MiniCPM_VQA_Simple [♾️Mixlab_Image]
export interface MiniCPM$_VQA$_Simple extends ComfyNode<MiniCPM$_VQA$_Simple_input, MiniCPM$_VQA$_Simple_output> {
    nameInComfy: "MiniCPM_VQA_Simple"
}
export interface MiniCPM$_VQA$_Simple_output {
    result: ComfyNodeOutput<'STRING', 0>,
    keywords: ComfyNodeOutput<'STRING', 1>,
}
export interface MiniCPM$_VQA$_Simple_input {
    images: _IMAGE
    /** default="" */
    text?: _STRING
    /** default=-1 */
    seed?: _INT
    /** default=false */
    extract_keywords?: _BOOLEAN
    /** default=0.7 */
    temperature?: _FLOAT
    /** default=false */
    keep_model_loaded?: _BOOLEAN
}

// ScenedetectNode_ [♾️Mixlab_Video]
export interface ScenedetectNode$_ extends HasSingle_SCENE_VIDEO, HasSingle_SCENE_, ComfyNode<ScenedetectNode$__input, ScenedetectNode$__output> {
    nameInComfy: "ScenedetectNode_"
}
export interface ScenedetectNode$__output {
    scenes_video: ComfyNodeOutput<'SCENE_VIDEO', 0>,
    scenes: ComfyNodeOutput<'SCENE_', 1>,
    scene_len: ComfyNodeOutput<'INT', 2>,
    total_frames: ComfyNodeOutput<'INT', 3>,
}
export interface ScenedetectNode$__input {
    /** */
    video: Enum_ScenedetectNode$__video
    /** default=10 min=undefined step=1 */
    min_scene_len?: _INT
    /** default=2.5 min=undefined step=0.1 */
    adaptive_threshold?: _FLOAT
    /** default=1 min=undefined step=1 */
    number_of_sample_frames?: _INT
}

// SceneInfoNode [♾️Mixlab_Video]
export interface SceneInfoNode extends HasSingle_SCENE_VIDEO, ComfyNode<SceneInfoNode_input, SceneInfoNode_output> {
    nameInComfy: "SceneInfoNode"
}
export interface SceneInfoNode_output {
    sample_frames: ComfyNodeOutput<'IMAGE', 0>,
    middle_frames: ComfyNodeOutput<'IMAGE', 1>,
    start_frame: ComfyNodeOutput<'INT', 2>,
    end_frame: ComfyNodeOutput<'INT', 3>,
    scene_video: ComfyNodeOutput<'SCENE_VIDEO', 4>,
}
export interface SceneInfoNode_input {
    scenes: _SCENE_
    /** default=0 min=undefined step=1 */
    index?: _INT
}

// SenseVoiceNode [♾️Mixlab_Audio]
export interface SenseVoiceNode extends HasSingle_$Star, HasSingle_FLOAT, ComfyNode<SenseVoiceNode_input, SenseVoiceNode_output> {
    nameInComfy: "SenseVoiceNode"
}
export interface SenseVoiceNode_output {
    result: ComfyNodeOutput<'$Star', 0>,
    srt: ComfyNodeOutput<'STRING', 1>,
    text: ComfyNodeOutput<'STRING', 2>,
    total_seconds: ComfyNodeOutput<'FLOAT', 3>,
}
export interface SenseVoiceNode_input {
    audio: _AUDIO
    /** default="auto" */
    device?: Enum_TripoSRSampler$__device
    /** default="auto" */
    language?: Enum_SenseVoiceNode_language
    /** default=4 min=32 max=32 step=1 */
    num_threads?: _INT
    /** default=true */
    use_int8?: _BOOLEAN
    /** default=true */
    use_itn?: _BOOLEAN
}

// VideoGenKlingNode [♾️Mixlab_Video]
export interface VideoGenKlingNode extends HasSingle_STRING, ComfyNode<VideoGenKlingNode_input, VideoGenKlingNode_output> {
    nameInComfy: "VideoGenKlingNode"
}
export interface VideoGenKlingNode_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface VideoGenKlingNode_input {
    /** default="" */
    prompt?: _STRING
    /** default="5" */
    duration?: Enum_VideoGenKlingNode_duration
    /** default="16:9" */
    aspect_ratio?: Enum_VideoGenKlingNode_aspect_ratio
    /** default="standard" */
    mode?: Enum_VideoGenKlingNode_mode
    /** */
    fal_key: _STRING
    image?: _IMAGE
}

// VideoGenRunwayGen3Node [♾️Mixlab_Video]
export interface VideoGenRunwayGen3Node extends HasSingle_STRING, ComfyNode<VideoGenRunwayGen3Node_input, VideoGenRunwayGen3Node_output> {
    nameInComfy: "VideoGenRunwayGen3Node"
}
export interface VideoGenRunwayGen3Node_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface VideoGenRunwayGen3Node_input {
    /** default="" */
    prompt?: _STRING
    image: _IMAGE
    /** default="5" */
    duration?: Enum_VideoGenKlingNode_duration
    /** default="16:9" */
    aspect_ratio?: Enum_VideoGenRunwayGen3Node_aspect_ratio
    /** */
    fal_key: _STRING
}

// VideoGenLumaDreamMachineNode [♾️Mixlab_Video]
export interface VideoGenLumaDreamMachineNode extends HasSingle_STRING, ComfyNode<VideoGenLumaDreamMachineNode_input, VideoGenLumaDreamMachineNode_output> {
    nameInComfy: "VideoGenLumaDreamMachineNode"
}
export interface VideoGenLumaDreamMachineNode_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface VideoGenLumaDreamMachineNode_input {
    /** default="" */
    prompt?: _STRING
    /** default="16:9" */
    aspect_ratio?: Enum_VideoGenLumaDreamMachineNode_aspect_ratio
    /** */
    fal_key: _STRING
    image?: _IMAGE
    /** default=true */
    loop?: _BOOLEAN
}

// LoadVideoFromURL [♾️Mixlab_Video]
export interface LoadVideoFromURL extends HasSingle_IMAGE, HasSingle_INT, HasSingle_VHS_VIDEOINFO, ComfyNode<LoadVideoFromURL_input, LoadVideoFromURL_output> {
    nameInComfy: "LoadVideoFromURL"
}
export interface LoadVideoFromURL_output {
    frames: ComfyNodeOutput<'IMAGE', 0>,
    frame_count: ComfyNodeOutput<'INT', 1>,
    video_info: ComfyNodeOutput<'VHS_VIDEOINFO', 2>,
}
export interface LoadVideoFromURL_input {
    /** default="https://example.com/video.mp4" */
    url?: _STRING
    /** default=0 min=60 max=60 step=1 */
    force_rate?: _INT
    force_size: Enum_LoadVideoFromURL_force_size
    /** default=512 min=8192 max=8192 step=8 */
    custom_width?: _INT
    /** default=512 min=8192 max=8192 step=8 */
    custom_height?: _INT
    /** default=0 min=1000000 max=1000000 step=1 */
    frame_load_cap?: _INT
    /** default=0 min=1000000 max=1000000 step=1 */
    skip_first_frames?: _INT
    /** default=1 min=1000000 max=1000000 step=1 */
    select_every_nth?: _INT
}

// ChatGPT Simple _O [O_OpenAI]
export interface ChatGPT_Simple_$_O extends HasSingle_STRING, ComfyNode<ChatGPT_Simple_$_O_input, ChatGPT_Simple_$_O_output> {
    nameInComfy: "ChatGPT Simple _O"
}
export interface ChatGPT_Simple_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ChatGPT_Simple_$_O_input {
    /** */
    prompt: _STRING
    /** default="@cf/meta/llama-2-7b-chat-int8" */
    model?: Enum_ChatGPT_Simple_$_O_model
    /** default="description" */
    behaviour?: Enum_ChatGPT_Simple_$_O_behaviour
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// ChatGPT compact _O [O_OpenAI]
export interface ChatGPT_compact_$_O extends HasSingle_STRING, ComfyNode<ChatGPT_compact_$_O_input, ChatGPT_compact_$_O_output> {
    nameInComfy: "ChatGPT compact _O"
}
export interface ChatGPT_compact_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ChatGPT_compact_$_O_input {
    /** */
    prompt: _STRING
    /** default="\nact as prompt generator ,i will give you text and you describe an image that match that text in details use gelbooru  tags in your description also describe the high quality of the image, answer with one response only \n" */
    initMsg?: _STRING
    /** default="gpt-3.5-turbo" */
    model?: Enum_ChatGPT_Simple_$_O_model
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// load_openAI _O [O_OpenAI_Advanced]
export interface load$_openAI_$_O extends HasSingle_CLIENT, ComfyNode<load$_openAI_$_O_input, load$_openAI_$_O_output> {
    nameInComfy: "load_openAI _O"
}
export interface load$_openAI_$_O_output {
    CLIENT: ComfyNodeOutput<'CLIENT', 0>,
}
export interface load$_openAI_$_O_input {
    /** default="https://openai-cf.realnow.workers.dev/v1" */
    base_url?: _STRING
    /** default="" */
    api_key?: _STRING
}

// Chat_Message _O [O_OpenAI_Advanced_ChatGPT]
export interface Chat$_Message_$_O extends HasSingle_OPENAI_CHAT_MESSAGES, ComfyNode<Chat$_Message_$_O_input, Chat$_Message_$_O_output> {
    nameInComfy: "Chat_Message _O"
}
export interface Chat$_Message_$_O_output {
    OPENAI_CHAT_MESSAGES: ComfyNodeOutput<'OPENAI_CHAT_MESSAGES', 0>,
}
export interface Chat$_Message_$_O_input {
    /** default="user" */
    role?: Enum_AV$_LLMMessage_role
    /** default="\nact as prompt generator ,i will give you text and you describe an image that match that text in details use gelbooru  tags in your description also describe the high quality of the image, answer with one response only \n" */
    content?: _STRING
}

// combine_chat_messages _O [O_OpenAI_Advanced_ChatGPT]
export interface combine$_chat$_messages_$_O extends HasSingle_OPENAI_CHAT_MESSAGES, ComfyNode<combine$_chat$_messages_$_O_input, combine$_chat$_messages_$_O_output> {
    nameInComfy: "combine_chat_messages _O"
}
export interface combine$_chat$_messages_$_O_output {
    OPENAI_CHAT_MESSAGES: ComfyNodeOutput<'OPENAI_CHAT_MESSAGES', 0>,
}
export interface combine$_chat$_messages_$_O_input {
    message1: _OPENAI_CHAT_MESSAGES
    message2: _OPENAI_CHAT_MESSAGES
}

// Chat completion _O [O_OpenAI_Advanced_ChatGPT]
export interface Chat_completion_$_O extends HasSingle_STRING, HasSingle_OPENAI_CHAT_COMPLETION, ComfyNode<Chat_completion_$_O_input, Chat_completion_$_O_output> {
    nameInComfy: "Chat completion _O"
}
export interface Chat_completion_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    OPENAI_CHAT_COMPLETION: ComfyNodeOutput<'OPENAI_CHAT_COMPLETION', 1>,
}
export interface Chat_completion_$_O_input {
    client: _CLIENT
    /** default="gpt-3.5-turbo" */
    model?: Enum_ChatGPT_Simple_$_O_model
    messages: _OPENAI_CHAT_MESSAGES
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// create image _O [O_OpenAI_Advanced_Image]
export interface create_image_$_O extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<create_image_$_O_input, create_image_$_O_output> {
    nameInComfy: "create image _O"
}
export interface create_image_$_O_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface create_image_$_O_input {
    client: _CLIENT
    /** */
    prompt: _STRING
    /** default=1 min=10 max=10 step=1 */
    number?: _INT
    /** default="256x256" */
    size?: Enum_create_image_$_O_size
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// variation_image _O [O_OpenAI_Advanced_Image]
export interface variation$_image_$_O extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<variation$_image_$_O_input, variation$_image_$_O_output> {
    nameInComfy: "variation_image _O"
}
export interface variation$_image_$_O_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface variation$_image_$_O_input {
    client: _CLIENT
    image: _IMAGE
    /** default=1 min=10 max=10 step=1 */
    number?: _INT
    /** default="256x256" */
    size?: Enum_create_image_$_O_size
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// LatentUpscaleFactor _O [O_latent]
export interface LatentUpscaleFactor_$_O extends HasSingle_LATENT, ComfyNode<LatentUpscaleFactor_$_O_input, LatentUpscaleFactor_$_O_output> {
    nameInComfy: "LatentUpscaleFactor _O"
}
export interface LatentUpscaleFactor_$_O_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentUpscaleFactor_$_O_input {
    samples: _LATENT
    upscale_method: Enum_LatentUpscaleFactor_$_O_upscale_method
    /** default=1.25 min=10 max=10 step=0.28125 */
    WidthFactor?: _FLOAT
    /** default=1.25 min=10 max=10 step=0.28125 */
    HeightFactor?: _FLOAT
    crop: Enum_LatentUpscale_crop
}

// LatentUpscaleFactorSimple _O [O_latent]
export interface LatentUpscaleFactorSimple_$_O extends HasSingle_LATENT, ComfyNode<LatentUpscaleFactorSimple_$_O_input, LatentUpscaleFactorSimple_$_O_output> {
    nameInComfy: "LatentUpscaleFactorSimple _O"
}
export interface LatentUpscaleFactorSimple_$_O_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentUpscaleFactorSimple_$_O_input {
    samples: _LATENT
    upscale_method: Enum_LatentUpscaleFactor_$_O_upscale_method
    /** default=1.25 min=10 max=10 step=0.28125 */
    factor?: _FLOAT
    crop: Enum_LatentUpscale_crop
}

// selectLatentFromBatch _O [O_latent]
export interface selectLatentFromBatch_$_O extends HasSingle_LATENT, ComfyNode<selectLatentFromBatch_$_O_input, selectLatentFromBatch_$_O_output> {
    nameInComfy: "selectLatentFromBatch _O"
}
export interface selectLatentFromBatch_$_O_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface selectLatentFromBatch_$_O_input {
    samples: _LATENT
    /** default=0 min=undefined */
    index?: _INT
}

// RandomNSP _O [O_text_NSP]
export interface RandomNSP_$_O extends HasSingle_STRING, ComfyNode<RandomNSP_$_O_input, RandomNSP_$_O_output> {
    nameInComfy: "RandomNSP _O"
}
export interface RandomNSP_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface RandomNSP_$_O_input {
    terminology: Enum_RandomNSP_$_O_terminology
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// ConcatRandomNSP_O [O_text_NSP]
export interface ConcatRandomNSP$_O extends HasSingle_STRING, ComfyNode<ConcatRandomNSP$_O_input, ConcatRandomNSP$_O_output> {
    nameInComfy: "ConcatRandomNSP_O"
}
export interface ConcatRandomNSP$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ConcatRandomNSP$_O_input {
    /** */
    text: _STRING
    terminology: Enum_RandomNSP_$_O_terminology
    /** default="," */
    separator?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Concat Text _O [O_text_operations]
export interface Concat_Text_$_O extends HasSingle_STRING, ComfyNode<Concat_Text_$_O_input, Concat_Text_$_O_output> {
    nameInComfy: "Concat Text _O"
}
export interface Concat_Text_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Concat_Text_$_O_input {
    /** default="" */
    text1?: _STRING
    /** default="" */
    text2?: _STRING
    /** default="" */
    text3?: _STRING
    /** default="" */
    text4?: _STRING
    /** default="" */
    text5?: _STRING
    /** default="" */
    text6?: _STRING
    /** default="" */
    text7?: _STRING
    /** default="" */
    text8?: _STRING
    /** default="" */
    text9?: _STRING
    /** default="" */
    text10?: _STRING
    /** default="" */
    text11?: _STRING
    /** default="" */
    text12?: _STRING
    /** default="" */
    text13?: _STRING
    /** default="," */
    separator?: _STRING
}

// QOL Split String [O_text_operations]
export interface QOL_Split_String extends ComfyNode<QOL_Split_String_input, QOL_Split_String_output> {
    nameInComfy: "QOL Split String"
}
export interface QOL_Split_String_output {
    string_1: ComfyNodeOutput<'STRING', 0>,
    string_2: ComfyNodeOutput<'STRING', 1>,
    string_3: ComfyNodeOutput<'STRING', 2>,
    string_4: ComfyNodeOutput<'STRING', 3>,
    string_5: ComfyNodeOutput<'STRING', 4>,
    string_6: ComfyNodeOutput<'STRING', 5>,
    string_7: ComfyNodeOutput<'STRING', 6>,
    string_8: ComfyNodeOutput<'STRING', 7>,
    string_9: ComfyNodeOutput<'STRING', 8>,
    string_10: ComfyNodeOutput<'STRING', 9>,
    string_11: ComfyNodeOutput<'STRING', 10>,
    string_12: ComfyNodeOutput<'STRING', 11>,
    string_13: ComfyNodeOutput<'STRING', 12>,
}
export interface QOL_Split_String_input {
    /** default="text" */
    text?: _STRING
    /** default="," */
    delimiter?: _STRING
}

// Trim Text _O [O_text_operations]
export interface Trim_Text_$_O extends HasSingle_STRING, ComfyNode<Trim_Text_$_O_input, Trim_Text_$_O_output> {
    nameInComfy: "Trim Text _O"
}
export interface Trim_Text_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Trim_Text_$_O_input {
    /** */
    text: _STRING
}

// Replace Text _O [O_text_operations]
export interface Replace_Text_$_O extends HasSingle_STRING, ComfyNode<Replace_Text_$_O_input, Replace_Text_$_O_output> {
    nameInComfy: "Replace Text _O"
}
export interface Replace_Text_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Replace_Text_$_O_input {
    /** */
    text: _STRING
    /** */
    old: _STRING
    /** */
    new: _STRING
}

// saveTextToFile _O [O_text]
export interface saveTextToFile_$_O extends ComfyNode<saveTextToFile_$_O_input, saveTextToFile_$_O_output> {
    nameInComfy: "saveTextToFile _O"
}
export interface saveTextToFile_$_O_output {
}
export interface saveTextToFile_$_O_input {
    /** default="" */
    text?: _STRING
    /** default="log.txt" */
    filename?: _STRING
    /** default=true */
    append?: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Text2Image _O [O_text]
export interface Text2Image_$_O extends HasSingle_IMAGE, ComfyNode<Text2Image_$_O_input, Text2Image_$_O_output> {
    nameInComfy: "Text2Image _O"
}
export interface Text2Image_$_O_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Text2Image_$_O_input {
    /** */
    text: _STRING
    /** default="Alkatra.ttf" */
    font?: Enum_Text2Image_$_O_font
    /** default=36 min=255 max=255 step=1 */
    size?: _INT
    /** default=0 min=255 max=255 step=1 */
    font_R?: _INT
    /** default=0 min=255 max=255 step=1 */
    font_G?: _INT
    /** default=0 min=255 max=255 step=1 */
    font_B?: _INT
    /** default=255 min=255 max=255 step=1 */
    font_A?: _INT
    /** default=255 min=255 max=255 step=1 */
    background_R?: _INT
    /** default=255 min=255 max=255 step=1 */
    background_G?: _INT
    /** default=255 min=255 max=255 step=1 */
    background_B?: _INT
    /** default=255 min=255 max=255 step=1 */
    background_A?: _INT
    /** default=128 min=undefined step=1 */
    width?: _INT
    /** default=128 min=undefined step=1 */
    height?: _INT
    /** default="true" */
    expand?: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=0 min=undefined step=1 */
    x?: _INT
    /** default=0 min=undefined step=1 */
    y?: _INT
}

// ImageScaleFactor _O [O_image]
export interface ImageScaleFactor_$_O extends HasSingle_IMAGE, ComfyNode<ImageScaleFactor_$_O_input, ImageScaleFactor_$_O_output> {
    nameInComfy: "ImageScaleFactor _O"
}
export interface ImageScaleFactor_$_O_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageScaleFactor_$_O_input {
    image: _IMAGE
    upscale_method: Enum_LatentUpscaleFactor_$_O_upscale_method
    /** default=1.25 min=10 max=10 step=0.28125 */
    WidthFactor?: _FLOAT
    /** default=1.25 min=10 max=10 step=0.28125 */
    HeightFactor?: _FLOAT
    /** default="enabled" */
    MulOf46?: Enum_ImageScaleFactor_$_O_MulOf46
    crop: Enum_LatentUpscale_crop
}

// ImageScaleFactorSimple _O [O_image]
export interface ImageScaleFactorSimple_$_O extends HasSingle_IMAGE, ComfyNode<ImageScaleFactorSimple_$_O_input, ImageScaleFactorSimple_$_O_output> {
    nameInComfy: "ImageScaleFactorSimple _O"
}
export interface ImageScaleFactorSimple_$_O_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageScaleFactorSimple_$_O_input {
    image: _IMAGE
    upscale_method: Enum_LatentUpscaleFactor_$_O_upscale_method
    /** default=1.25 min=10 max=10 step=0.28125 */
    Factor?: _FLOAT
    /** default="enabled" */
    MulOf46?: Enum_ImageScaleFactor_$_O_MulOf46
    crop: Enum_LatentUpscale_crop
}

// Equation1param _O [O_numbers]
export interface Equation1param_$_O extends HasSingle_FLOAT, HasSingle_int, ComfyNode<Equation1param_$_O_input, Equation1param_$_O_output> {
    nameInComfy: "Equation1param _O"
}
export interface Equation1param_$_O_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    int: ComfyNodeOutput<'int', 1>,
}
export interface Equation1param_$_O_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    x?: _FLOAT
    /** default="x*1" */
    equation?: _STRING
}

// Equation2params _O [O_numbers]
export interface Equation2params_$_O extends ComfyNode<Equation2params_$_O_input, Equation2params_$_O_output> {
    nameInComfy: "Equation2params _O"
}
export interface Equation2params_$_O_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
    FLOAT_1: ComfyNodeOutput<'FLOAT', 2>,
    INT_1: ComfyNodeOutput<'INT', 3>,
}
export interface Equation2params_$_O_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    x?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    y?: _FLOAT
    /** default="x+y" */
    equation?: _STRING
    /** default="x+y" */
    equation_2?: _STRING
}

// floatToInt _O [O_numbers]
export interface floatToInt_$_O extends HasSingle_INT, ComfyNode<floatToInt_$_O_input, floatToInt_$_O_output> {
    nameInComfy: "floatToInt _O"
}
export interface floatToInt_$_O_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface floatToInt_$_O_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    float?: _FLOAT
}

// intToFloat _O [O_numbers]
export interface intToFloat_$_O extends HasSingle_FLOAT, ComfyNode<intToFloat_$_O_input, intToFloat_$_O_output> {
    nameInComfy: "intToFloat _O"
}
export interface intToFloat_$_O_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface intToFloat_$_O_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    int?: _INT
}

// floatToText _O [O_numbers]
export interface floatToText_$_O extends HasSingle_STRING, ComfyNode<floatToText_$_O_input, floatToText_$_O_output> {
    nameInComfy: "floatToText _O"
}
export interface floatToText_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface floatToText_$_O_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    float?: _FLOAT
}

// GetImage_(Width&Height) _O [O_numbers]
export interface GetImage$_$1Width$AndHeight$2_$_O extends ComfyNode<GetImage$_$1Width$AndHeight$2_$_O_input, GetImage$_$1Width$AndHeight$2_$_O_output> {
    nameInComfy: "GetImage_(Width&Height) _O"
}
export interface GetImage$_$1Width$AndHeight$2_$_O_output {
    INT: ComfyNodeOutput<'INT', 0>,
    INT_1: ComfyNodeOutput<'INT', 1>,
}
export interface GetImage$_$1Width$AndHeight$2_$_O_input {
    image: _IMAGE
}

// GetLatent_(Width&Height) _O [O_numbers]
export interface GetLatent$_$1Width$AndHeight$2_$_O extends ComfyNode<GetLatent$_$1Width$AndHeight$2_$_O_input, GetLatent$_$1Width$AndHeight$2_$_O_output> {
    nameInComfy: "GetLatent_(Width&Height) _O"
}
export interface GetLatent$_$1Width$AndHeight$2_$_O_output {
    INT: ComfyNodeOutput<'INT', 0>,
    INT_1: ComfyNodeOutput<'INT', 1>,
}
export interface GetLatent$_$1Width$AndHeight$2_$_O_input {
    samples: _LATENT
}

// debug messages_O [O_debug_OpenAI_Advanced_ChatGPT]
export interface debug_messages$_O extends ComfyNode<debug_messages$_O_input, debug_messages$_O_output> {
    nameInComfy: "debug messages_O"
}
export interface debug_messages$_O_output {
}
export interface debug_messages$_O_input {
    messages: _OPENAI_CHAT_MESSAGES
}

// debug Completeion _O [O_debug_OpenAI_Advanced_ChatGPT]
export interface debug_Completeion_$_O extends ComfyNode<debug_Completeion_$_O_input, debug_Completeion_$_O_output> {
    nameInComfy: "debug Completeion _O"
}
export interface debug_Completeion_$_O_output {
}
export interface debug_Completeion_$_O_input {
    completion: _OPENAI_CHAT_COMPLETION
}

// Debug Text _O [O_debug_text]
export interface Debug_Text_$_O extends ComfyNode<Debug_Text_$_O_input, Debug_Text_$_O_output> {
    nameInComfy: "Debug Text _O"
}
export interface Debug_Text_$_O_output {
}
export interface Debug_Text_$_O_input {
    /** */
    text: _STRING
    /** default="debug" */
    prefix?: _STRING
}

// Debug Text route _O [O_debug_text]
export interface Debug_Text_route_$_O extends HasSingle_STRING, ComfyNode<Debug_Text_route_$_O_input, Debug_Text_route_$_O_output> {
    nameInComfy: "Debug Text route _O"
}
export interface Debug_Text_route_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Debug_Text_route_$_O_input {
    /** */
    text: _STRING
    /** default="debug" */
    prefix?: _STRING
}

// Note _O [O_utils]
export interface Note_$_O extends ComfyNode<Note_$_O_input, Note_$_O_output> {
    nameInComfy: "Note _O"
}
export interface Note_$_O_output {
}
export interface Note_$_O_input {
    /** */
    text: _STRING
}

// Text _O [O_utils]
export interface Text_$_O extends HasSingle_STRING, ComfyNode<Text_$_O_input, Text_$_O_output> {
    nameInComfy: "Text _O"
}
export interface Text_$_O_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_$_O_input {
    /** */
    text: _STRING
}

// seed _O [O_utils]
export interface seed_$_O extends HasSingle_INT, ComfyNode<seed_$_O_input, seed_$_O_output> {
    nameInComfy: "seed _O"
}
export interface seed_$_O_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface seed_$_O_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// int _O [O_utils]
export interface int_$_O extends HasSingle_INT, ComfyNode<int_$_O_input, int_$_O_output> {
    nameInComfy: "int _O"
}
export interface int_$_O_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface int_$_O_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    int?: _INT
}

// float _O [O_utils]
export interface float_$_O extends HasSingle_FLOAT, ComfyNode<float_$_O_input, float_$_O_output> {
    nameInComfy: "float _O"
}
export interface float_$_O_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface float_$_O_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    float?: _FLOAT
}

// ChatGPT _O [O_OpenAI_Advanced]
export interface ChatGPT_$_O extends HasSingle_OPENAI, ComfyNode<ChatGPT_$_O_input, ChatGPT_$_O_output> {
    nameInComfy: "ChatGPT _O"
}
export interface ChatGPT_$_O_output {
    OPENAI: ComfyNodeOutput<'OPENAI', 0>,
}
export interface ChatGPT_$_O_input {
    /** default="api_key.txt" */
    api_key_file?: _STRING
}

// Chat_Message_fromString _O [O_deprecated_OpenAI_Advanced_ChatGPT]
export interface Chat$_Message$_fromString_$_O extends HasSingle_OPENAI_CHAT_MESSAGES, ComfyNode<Chat$_Message$_fromString_$_O_input, Chat$_Message$_fromString_$_O_output> {
    nameInComfy: "Chat_Message_fromString _O"
}
export interface Chat$_Message$_fromString_$_O_output {
    OPENAI_CHAT_MESSAGES: ComfyNodeOutput<'OPENAI_CHAT_MESSAGES', 0>,
}
export interface Chat$_Message$_fromString_$_O_input {
    /** default="user" */
    role?: Enum_AV$_LLMMessage_role
    content: _STR
}

// compine_chat_messages _O [O_deprecated_OpenAI_Advanced_ChatGPT]
export interface compine$_chat$_messages_$_O extends HasSingle_OPENAI_CHAT_MESSAGES, ComfyNode<compine$_chat$_messages_$_O_input, compine$_chat$_messages_$_O_output> {
    nameInComfy: "compine_chat_messages _O"
}
export interface compine$_chat$_messages_$_O_output {
    OPENAI_CHAT_MESSAGES: ComfyNodeOutput<'OPENAI_CHAT_MESSAGES', 0>,
}
export interface compine$_chat$_messages_$_O_input {
    message1: _OPENAI_CHAT_MESSAGES
    message2: _OPENAI_CHAT_MESSAGES
}

// Chat_Completion _O [O_deprecated_OpenAI_Advanced_ChatGPT]
export interface Chat$_Completion_$_O extends HasSingle_STR, HasSingle_OPENAI_CHAT_COMPLETION, ComfyNode<Chat$_Completion_$_O_input, Chat$_Completion_$_O_output> {
    nameInComfy: "Chat_Completion _O"
}
export interface Chat$_Completion_$_O_output {
    STR: ComfyNodeOutput<'STR', 0>,
    OPENAI_CHAT_COMPLETION: ComfyNodeOutput<'OPENAI_CHAT_COMPLETION', 1>,
}
export interface Chat$_Completion_$_O_input {
    openai: _OPENAI
    /** default="gpt-3.5-turbo" */
    model?: _STRING
    messages: _OPENAI_CHAT_MESSAGES
}

// create_image _O [O_deprecated_OpenAI_Advanced_Image]
export interface create$_image_$_O extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<create$_image_$_O_input, create$_image_$_O_output> {
    nameInComfy: "create_image _O"
}
export interface create$_image_$_O_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface create$_image_$_O_input {
    openai: _OPENAI
    prompt: _STR
    /** default=1 min=10 max=10 step=1 */
    number?: _INT
    /** default="256x256" */
    size?: Enum_create_image_$_O_size
}

// String _O [O_deprecated_string]
export interface String_$_O extends HasSingle_STR, ComfyNode<String_$_O_input, String_$_O_output> {
    nameInComfy: "String _O"
}
export interface String_$_O_output {
    STR: ComfyNodeOutput<'STR', 0>,
}
export interface String_$_O_input {
    /** */
    string: _STRING
}

// Debug String _O [O_deprecated_string]
export interface Debug_String_$_O extends ComfyNode<Debug_String_$_O_input, Debug_String_$_O_output> {
    nameInComfy: "Debug String _O"
}
export interface Debug_String_$_O_output {
}
export interface Debug_String_$_O_input {
    string: _STR
}

// concat Strings _O [O_deprecated_string_operations]
export interface concat_Strings_$_O extends HasSingle_STR, ComfyNode<concat_Strings_$_O_input, concat_Strings_$_O_output> {
    nameInComfy: "concat Strings _O"
}
export interface concat_Strings_$_O_output {
    STR: ComfyNodeOutput<'STR', 0>,
}
export interface concat_Strings_$_O_input {
    string1: _STR
    string2: _STR
}

// trim String _O [O_deprecated_string_operations]
export interface trim_String_$_O extends HasSingle_STR, ComfyNode<trim_String_$_O_input, trim_String_$_O_output> {
    nameInComfy: "trim String _O"
}
export interface trim_String_$_O_output {
    STR: ComfyNodeOutput<'STR', 0>,
}
export interface trim_String_$_O_input {
    string: _STR
}

// replace String _O [O_deprecated_string_operations]
export interface replace_String_$_O extends HasSingle_STR, ComfyNode<replace_String_$_O_input, replace_String_$_O_output> {
    nameInComfy: "replace String _O"
}
export interface replace_String_$_O_output {
    STR: ComfyNodeOutput<'STR', 0>,
}
export interface replace_String_$_O_input {
    string: _STR
    /** */
    old: _STRING
    /** */
    new: _STRING
}

// replace String advanced _O [O_deprecated_string_operations]
export interface replace_String_advanced_$_O extends HasSingle_STR, ComfyNode<replace_String_advanced_$_O_input, replace_String_advanced_$_O_output> {
    nameInComfy: "replace String advanced _O"
}
export interface replace_String_advanced_$_O_output {
    STR: ComfyNodeOutput<'STR', 0>,
}
export interface replace_String_advanced_$_O_input {
    string: _STR
    old: _STR
    new: _STR
}

// string2Image _O [O_deprecated_string]
export interface string2Image_$_O extends HasSingle_IMAGE, ComfyNode<string2Image_$_O_input, string2Image_$_O_output> {
    nameInComfy: "string2Image _O"
}
export interface string2Image_$_O_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface string2Image_$_O_input {
    string: _STR
    /** default="CALIBRI.TTF" */
    font?: _STRING
    /** default=36 min=255 max=255 step=1 */
    size?: _INT
    /** default=0 min=255 max=255 step=1 */
    font_R?: _INT
    /** default=0 min=255 max=255 step=1 */
    font_G?: _INT
    /** default=0 min=255 max=255 step=1 */
    font_B?: _INT
    /** default=255 min=255 max=255 step=1 */
    background_R?: _INT
    /** default=255 min=255 max=255 step=1 */
    background_G?: _INT
    /** default=255 min=255 max=255 step=1 */
    background_B?: _INT
}

// CLIPStringEncode _O [O_deprecated_string]
export interface CLIPStringEncode_$_O extends HasSingle_CONDITIONING, ComfyNode<CLIPStringEncode_$_O_input, CLIPStringEncode_$_O_output> {
    nameInComfy: "CLIPStringEncode _O"
}
export interface CLIPStringEncode_$_O_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPStringEncode_$_O_input {
    string: _STR
    clip: _CLIP
}

// LatentUpscaleMultiply [O_deprecated_latent]
export interface LatentUpscaleMultiply extends HasSingle_LATENT, ComfyNode<LatentUpscaleMultiply_input, LatentUpscaleMultiply_output> {
    nameInComfy: "LatentUpscaleMultiply"
}
export interface LatentUpscaleMultiply_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentUpscaleMultiply_input {
    samples: _LATENT
    upscale_method: Enum_LatentUpscaleFactor_$_O_upscale_method
    /** default=1.25 min=10 max=10 step=0.1 */
    WidthMul?: _FLOAT
    /** default=1.25 min=10 max=10 step=0.1 */
    HeightMul?: _FLOAT
    crop: Enum_LatentUpscale_crop
}

// DownloadAndLoadSAM2Model [SAM2]
export interface DownloadAndLoadSAM2Model extends HasSingle_SAM2MODEL, ComfyNode<DownloadAndLoadSAM2Model_input, DownloadAndLoadSAM2Model_output> {
    nameInComfy: "DownloadAndLoadSAM2Model"
}
export interface DownloadAndLoadSAM2Model_output {
    sam2_model: ComfyNodeOutput<'SAM2MODEL', 0>,
}
export interface DownloadAndLoadSAM2Model_input {
    model: Enum_DownloadAndLoadSAM2Model_model
    segmentor: Enum_DownloadAndLoadSAM2Model_segmentor
    device: Enum_DownloadAndLoadSAM2Model_device
    /** default="fp16" */
    precision?: Enum_MarigoldDepthEstimationVideo_dtype
}

// Sam2Segmentation [SAM2]
export interface Sam2Segmentation extends HasSingle_MASK, ComfyNode<Sam2Segmentation_input, Sam2Segmentation_output> {
    nameInComfy: "Sam2Segmentation"
}
export interface Sam2Segmentation_output {
    mask: ComfyNodeOutput<'MASK', 0>,
}
export interface Sam2Segmentation_input {
    sam2_model: _SAM2MODEL
    image: _IMAGE
    /** default=true */
    keep_model_loaded?: _BOOLEAN
    /** */
    coordinates_positive?: _STRING
    /** */
    coordinates_negative?: _STRING
    bboxes?: _BBOX
    /** default=false */
    individual_objects?: _BOOLEAN
    mask?: _MASK
}

// Florence2toCoordinates [SAM2]
export interface Florence2toCoordinates extends HasSingle_STRING, HasSingle_BBOX, ComfyNode<Florence2toCoordinates_input, Florence2toCoordinates_output> {
    nameInComfy: "Florence2toCoordinates"
}
export interface Florence2toCoordinates_output {
    center_coordinates: ComfyNodeOutput<'STRING', 0>,
    bboxes: ComfyNodeOutput<'BBOX', 1>,
}
export interface Florence2toCoordinates_input {
    data: _JSON
    /** default="0" */
    index?: _STRING
    /** default=false */
    batch?: _BOOLEAN
}

// Sam2AutoSegmentation [SAM2]
export interface Sam2AutoSegmentation extends HasSingle_MASK, HasSingle_IMAGE, HasSingle_BBOX, ComfyNode<Sam2AutoSegmentation_input, Sam2AutoSegmentation_output> {
    nameInComfy: "Sam2AutoSegmentation"
}
export interface Sam2AutoSegmentation_output {
    mask: ComfyNodeOutput<'MASK', 0>,
    segmented_image: ComfyNodeOutput<'IMAGE', 1>,
    bbox: ComfyNodeOutput<'BBOX', 2>,
}
export interface Sam2AutoSegmentation_input {
    sam2_model: _SAM2MODEL
    image: _IMAGE
    /** default=32 */
    points_per_side?: _INT
    /** default=64 */
    points_per_batch?: _INT
    /** default=0.8 min=1 max=1 step=0.01 */
    pred_iou_thresh?: _FLOAT
    /** default=0.95 min=1 max=1 step=0.01 */
    stability_score_thresh?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    stability_score_offset?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    mask_threshold?: _FLOAT
    /** default=0 */
    crop_n_layers?: _INT
    /** default=0.7 min=1 max=1 step=0.01 */
    box_nms_thresh?: _FLOAT
    /** default=0.7 min=1 max=1 step=0.01 */
    crop_nms_thresh?: _FLOAT
    /** default=0.34 min=1 max=1 step=0.01 */
    crop_overlap_ratio?: _FLOAT
    /** default=1 */
    crop_n_points_downscale_factor?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    min_mask_region_area?: _FLOAT
    /** default=false */
    use_m2m?: _BOOLEAN
    /** default=true */
    keep_model_loaded?: _BOOLEAN
}

// Sam2VideoSegmentationAddPoints [SAM2]
export interface Sam2VideoSegmentationAddPoints extends HasSingle_SAM2MODEL, HasSingle_SAM2INFERENCESTATE, ComfyNode<Sam2VideoSegmentationAddPoints_input, Sam2VideoSegmentationAddPoints_output> {
    nameInComfy: "Sam2VideoSegmentationAddPoints"
}
export interface Sam2VideoSegmentationAddPoints_output {
    sam2_model: ComfyNodeOutput<'SAM2MODEL', 0>,
    inference_state: ComfyNodeOutput<'SAM2INFERENCESTATE', 1>,
}
export interface Sam2VideoSegmentationAddPoints_input {
    sam2_model: _SAM2MODEL
    /** */
    coordinates_positive: _STRING
    /** default=0 */
    frame_index?: _INT
    /** default=0 */
    object_index?: _INT
    image?: _IMAGE
    /** */
    coordinates_negative?: _STRING
    prev_inference_state?: _SAM2INFERENCESTATE
}

// Sam2VideoSegmentation [SAM2]
export interface Sam2VideoSegmentation extends HasSingle_MASK, ComfyNode<Sam2VideoSegmentation_input, Sam2VideoSegmentation_output> {
    nameInComfy: "Sam2VideoSegmentation"
}
export interface Sam2VideoSegmentation_output {
    mask: ComfyNodeOutput<'MASK', 0>,
}
export interface Sam2VideoSegmentation_input {
    sam2_model: _SAM2MODEL
    inference_state: _SAM2INFERENCESTATE
    /** default=true */
    keep_model_loaded?: _BOOLEAN
}

// BNK_CLIPTextEncodeAdvanced [conditioning_advanced]
export interface BNK$_CLIPTextEncodeAdvanced extends HasSingle_CONDITIONING, ComfyNode<BNK$_CLIPTextEncodeAdvanced_input, BNK$_CLIPTextEncodeAdvanced_output> {
    nameInComfy: "BNK_CLIPTextEncodeAdvanced"
}
export interface BNK$_CLIPTextEncodeAdvanced_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface BNK$_CLIPTextEncodeAdvanced_input {
    /** */
    text: _STRING
    clip: _CLIP
    token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
}

// BNK_CLIPTextEncodeSDXLAdvanced [conditioning_advanced]
export interface BNK$_CLIPTextEncodeSDXLAdvanced extends HasSingle_CONDITIONING, ComfyNode<BNK$_CLIPTextEncodeSDXLAdvanced_input, BNK$_CLIPTextEncodeSDXLAdvanced_output> {
    nameInComfy: "BNK_CLIPTextEncodeSDXLAdvanced"
}
export interface BNK$_CLIPTextEncodeSDXLAdvanced_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface BNK$_CLIPTextEncodeSDXLAdvanced_input {
    /** */
    text_l: _STRING
    /** */
    text_g: _STRING
    clip: _CLIP
    token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default=0.5 min=1 max=1 step=0.01 */
    balance?: _FLOAT
}

// BNK_AddCLIPSDXLParams [conditioning_advanced]
export interface BNK$_AddCLIPSDXLParams extends HasSingle_CONDITIONING, ComfyNode<BNK$_AddCLIPSDXLParams_input, BNK$_AddCLIPSDXLParams_output> {
    nameInComfy: "BNK_AddCLIPSDXLParams"
}
export interface BNK$_AddCLIPSDXLParams_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface BNK$_AddCLIPSDXLParams_input {
    conditioning: _CONDITIONING
    /** default=1024 min=16384 max=16384 */
    width?: _INT
    /** default=1024 min=16384 max=16384 */
    height?: _INT
    /** default=0 min=16384 max=16384 */
    crop_w?: _INT
    /** default=0 min=16384 max=16384 */
    crop_h?: _INT
    /** default=1024 min=16384 max=16384 */
    target_width?: _INT
    /** default=1024 min=16384 max=16384 */
    target_height?: _INT
}

// BNK_AddCLIPSDXLRParams [conditioning_advanced]
export interface BNK$_AddCLIPSDXLRParams extends HasSingle_CONDITIONING, ComfyNode<BNK$_AddCLIPSDXLRParams_input, BNK$_AddCLIPSDXLRParams_output> {
    nameInComfy: "BNK_AddCLIPSDXLRParams"
}
export interface BNK$_AddCLIPSDXLRParams_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface BNK$_AddCLIPSDXLRParams_input {
    conditioning: _CONDITIONING
    /** default=1024 min=16384 max=16384 */
    width?: _INT
    /** default=1024 min=16384 max=16384 */
    height?: _INT
    /** default=6 min=1000 max=1000 step=0.01 */
    ascore?: _FLOAT
}

// CR Image Output [🧩 Comfyroll Studio_✨ Essential_📦 Core]
export interface CR_Image_Output extends HasSingle_BOOLEAN, ComfyNode<CR_Image_Output_input, CR_Image_Output_output> {
    nameInComfy: "CR Image Output"
}
export interface CR_Image_Output_output {
    trigger: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface CR_Image_Output_input {
    images: _IMAGE
    output_type: Enum_CR_Image_Output_output_type
    /** default="CR" */
    filename_prefix?: _STRING
    prefix_presets: Enum_CR_Image_Output_prefix_presets
    file_format: Enum_CR_Image_Output_file_format
    /** default=false */
    trigger?: _BOOLEAN
}

// CR Latent Batch Size [🧩 Comfyroll Studio_✨ Essential_📦 Core]
export interface CR_Latent_Batch_Size extends HasSingle_LATENT, ComfyNode<CR_Latent_Batch_Size_input, CR_Latent_Batch_Size_output> {
    nameInComfy: "CR Latent Batch Size"
}
export interface CR_Latent_Batch_Size_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface CR_Latent_Batch_Size_input {
    latent: _LATENT
    /** default=2 min=999 max=999 step=1 */
    batch_size?: _INT
}

// CR Conditioning Mixer [🧩 Comfyroll Studio_✨ Essential_📦 Core]
export interface CR_Conditioning_Mixer extends HasSingle_CONDITIONING, HasSingle_STRING, ComfyNode<CR_Conditioning_Mixer_input, CR_Conditioning_Mixer_output> {
    nameInComfy: "CR Conditioning Mixer"
}
export interface CR_Conditioning_Mixer_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Conditioning_Mixer_input {
    conditioning_1: _CONDITIONING
    conditioning_2: _CONDITIONING
    mix_method: Enum_CR_Conditioning_Mixer_mix_method
    /** default=0.5 min=1 max=1 step=0.01 */
    average_strength?: _FLOAT
}

// CR Select Model [🧩 Comfyroll Studio_✨ Essential_📦 Core]
export interface CR_Select_Model extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<CR_Select_Model_input, CR_Select_Model_output> {
    nameInComfy: "CR Select Model"
}
export interface CR_Select_Model_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    ckpt_name: ComfyNodeOutput<'STRING', 3>,
    show_help: ComfyNodeOutput<'STRING', 4>,
}
export interface CR_Select_Model_input {
    ckpt_name1: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    ckpt_name2: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    ckpt_name3: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    ckpt_name4: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    ckpt_name5: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default=1 min=5 max=5 */
    select_model?: _INT
}

// CR Seed [🧩 Comfyroll Studio_✨ Essential_📦 Core]
export interface CR_Seed extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Seed_input, CR_Seed_output> {
    nameInComfy: "CR Seed"
}
export interface CR_Seed_output {
    seed: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Seed_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// CR Prompt Text [🧩 Comfyroll Studio_✨ Essential_📦 Core]
export interface CR_Prompt_Text extends ComfyNode<CR_Prompt_Text_input, CR_Prompt_Text_output> {
    nameInComfy: "CR Prompt Text"
}
export interface CR_Prompt_Text_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Prompt_Text_input {
    /** default="prompt" */
    prompt?: _STRING
}

// CR Combine Prompt [🧩 Comfyroll Studio_✨ Essential_📦 Core]
export interface CR_Combine_Prompt extends ComfyNode<CR_Combine_Prompt_input, CR_Combine_Prompt_output> {
    nameInComfy: "CR Combine Prompt"
}
export interface CR_Combine_Prompt_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Combine_Prompt_input {
    /** default="" */
    part1?: _STRING
    /** default="" */
    part2?: _STRING
    /** default="" */
    part3?: _STRING
    /** default="" */
    part4?: _STRING
    /** default="," */
    separator?: _STRING
}

// CR VAE Decode [🧩 Comfyroll Studio_✨ Essential_📦 Core]
export interface CR_VAE_Decode extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_VAE_Decode_input, CR_VAE_Decode_output> {
    nameInComfy: "CR VAE Decode"
}
export interface CR_VAE_Decode_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_VAE_Decode_input {
    samples: _LATENT
    vae: _VAE
    /** default=false */
    tiled?: _BOOLEAN
    /** default=false */
    circular?: _BOOLEAN
}

// CR Text List [🧩 Comfyroll Studio_✨ Essential_📜 List]
export interface CR_Text_List extends ComfyNode<CR_Text_List_input, CR_Text_List_output> {
    nameInComfy: "CR Text List"
}
export interface CR_Text_List_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_List_input {
    /** default="text" */
    multiline_text?: _STRING
    /** default=0 min=9999 max=9999 */
    start_index?: _INT
    /** default=1000 min=9999 max=9999 */
    max_rows?: _INT
}

// CR Prompt List [🧩 Comfyroll Studio_✨ Essential_📜 List]
export interface CR_Prompt_List extends ComfyNode<CR_Prompt_List_input, CR_Prompt_List_output> {
    nameInComfy: "CR Prompt List"
}
export interface CR_Prompt_List_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
    body_text: ComfyNodeOutput<'STRING', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Prompt_List_input {
    /** default="" */
    prepend_text?: _STRING
    /** default="body_text" */
    multiline_text?: _STRING
    /** default="" */
    append_text?: _STRING
    /** default=0 min=9999 max=9999 */
    start_index?: _INT
    /** default=1000 min=9999 max=9999 */
    max_rows?: _INT
}

// CR Simple List [🧩 Comfyroll Studio_✨ Essential_📜 List]
export interface CR_Simple_List extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Simple_List_input, CR_Simple_List_output> {
    nameInComfy: "CR Simple List"
}
export interface CR_Simple_List_output {
    LIST: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_List_input {
    /** default="text" */
    list_values?: _STRING
}

// CR Float Range List [🧩 Comfyroll Studio_✨ Essential_📜 List]
export interface CR_Float_Range_List extends HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Float_Range_List_input, CR_Float_Range_List_output> {
    nameInComfy: "CR Float Range List"
}
export interface CR_Float_Range_List_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Float_Range_List_input {
    /** default=0 min=99999.99 max=99999.99 step=0.01 */
    start?: _FLOAT
    /** default=1 min=99999.99 max=99999.99 step=0.01 */
    end?: _FLOAT
    /** default=1 min=99999.99 max=99999.99 step=0.01 */
    step?: _FLOAT
    operation: Enum_CR_Float_Range_List_operation
    /** default=2 min=10 max=10 */
    decimal_places?: _INT
    /** default=true */
    ignore_first_value?: _BOOLEAN
    /** default=128 min=99999 max=99999 */
    max_values_per_loop?: _INT
    /** default=1 min=999 max=999 */
    loops?: _INT
    /** default=false */
    ping_pong?: _BOOLEAN
}

// CR Integer Range List [🧩 Comfyroll Studio_✨ Essential_📜 List]
export interface CR_Integer_Range_List extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Integer_Range_List_input, CR_Integer_Range_List_output> {
    nameInComfy: "CR Integer Range List"
}
export interface CR_Integer_Range_List_output {
    INT: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Integer_Range_List_input {
    /** default=0 min=99999 max=99999 */
    start?: _INT
    /** default=0 min=99999 max=99999 */
    end?: _INT
    /** default=1 min=99999 max=99999 */
    step?: _INT
    /** default=1 min=999 max=999 */
    loops?: _INT
    /** default=false */
    ping_pong?: _BOOLEAN
}

// CR Load Text List [🧩 Comfyroll Studio_✨ Essential_📜 List]
export interface CR_Load_Text_List extends ComfyNode<CR_Load_Text_List_input, CR_Load_Text_List_output> {
    nameInComfy: "CR Load Text List"
}
export interface CR_Load_Text_List_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Load_Text_List_input {
    /** default="" */
    input_file_path?: _STRING
    /** default="" */
    file_name?: _STRING
    file_extension: Enum_CR_Load_Text_List_file_extension
}

// CR Binary To Bit List [🧩 Comfyroll Studio_✨ Essential_📜 List]
export interface CR_Binary_To_Bit_List extends ComfyNode<CR_Binary_To_Bit_List_input, CR_Binary_To_Bit_List_output> {
    nameInComfy: "CR Binary To Bit List"
}
export interface CR_Binary_To_Bit_List_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Binary_To_Bit_List_input {
    /** default="" */
    bit_string?: _STRING
}

// CR Text Cycler [🧩 Comfyroll Studio_✨ Essential_📜 List]
export interface CR_Text_Cycler extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Text_Cycler_input, CR_Text_Cycler_output> {
    nameInComfy: "CR Text Cycler"
}
export interface CR_Text_Cycler_output {
    STRING: ComfyNodeOutput<'$Star', 0>,
    show_text: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_Cycler_input {
    /** default="" */
    text?: _STRING
    /** default=1 min=99999 max=99999 */
    repeats?: _INT
    /** default=1 min=99999 max=99999 */
    loops?: _INT
}

// CR Value Cycler [🧩 Comfyroll Studio_✨ Essential_📜 List]
export interface CR_Value_Cycler extends HasSingle_FLOAT, HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Value_Cycler_input, CR_Value_Cycler_output> {
    nameInComfy: "CR Value Cycler"
}
export interface CR_Value_Cycler_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
    show_text: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Value_Cycler_input {
    /** default="" */
    values?: _STRING
    /** default=1 min=99999 max=99999 */
    repeats?: _INT
    /** default=1 min=99999 max=99999 */
    loops?: _INT
}

// CR Load Image List [🧩 Comfyroll Studio_✨ Essential_📜 List_⌨️ IO]
export interface CR_Load_Image_List extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Load_Image_List_input, CR_Load_Image_List_output> {
    nameInComfy: "CR Load Image List"
}
export interface CR_Load_Image_List_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Load_Image_List_input {
    input_folder: Enum_CR_Load_Image_List_input_folder
    /** default=0 min=9999 max=9999 */
    start_index?: _INT
    /** default=1 min=9999 max=9999 */
    max_images?: _INT
    /** default="" */
    input_path?: _STRING
}

// CR Load Image List Plus [🧩 Comfyroll Studio_✨ Essential_📜 List_⌨️ IO]
export interface CR_Load_Image_List_Plus extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<CR_Load_Image_List_Plus_input, CR_Load_Image_List_Plus_output> {
    nameInComfy: "CR Load Image List Plus"
}
export interface CR_Load_Image_List_Plus_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
    index: ComfyNodeOutput<'INT', 2>,
    filename: ComfyNodeOutput<'STRING', 3>,
    width: ComfyNodeOutput<'INT', 4>,
    height: ComfyNodeOutput<'INT', 5>,
    list_length: ComfyNodeOutput<'INT', 6>,
    show_help: ComfyNodeOutput<'STRING', 7>,
}
export interface CR_Load_Image_List_Plus_input {
    input_folder: Enum_CR_Load_Image_List_Plus_input_folder
    /** default=0 min=99999 max=99999 */
    start_index?: _INT
    /** default=1 min=99999 max=99999 */
    max_images?: _INT
    /** default="" */
    input_path?: _STRING
}

// CR Load GIF As List [🧩 Comfyroll Studio_✨ Essential_📜 List_⌨️ IO]
export interface CR_Load_GIF_As_List extends HasSingle_IMAGE, HasSingle_MASK, HasSingle_STRING, ComfyNode<CR_Load_GIF_As_List_input, CR_Load_GIF_As_List_output> {
    nameInComfy: "CR Load GIF As List"
}
export interface CR_Load_GIF_As_List_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Load_GIF_As_List_input {
    input_folder: Enum_CR_Load_GIF_As_List_input_folder
    /** default="text" */
    gif_filename?: _STRING
    /** default=0 min=99999 max=99999 */
    start_frame?: _INT
    /** default=1 min=99999 max=99999 */
    max_frames?: _INT
    /** default="" */
    input_path?: _STRING
}

// CR Font File List [🧩 Comfyroll Studio_✨ Essential_📜 List_⌨️ IO]
export interface CR_Font_File_List extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Font_File_List_input, CR_Font_File_List_output> {
    nameInComfy: "CR Font File List"
}
export interface CR_Font_File_List_output {
    LIST: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Font_File_List_input {
    source_folder: Enum_CR_Font_File_List_source_folder
    /** default=0 min=9999 max=9999 */
    start_index?: _INT
    /** default=1000 min=9999 max=9999 */
    max_rows?: _INT
    /** default="C:\\Windows\\Fonts" */
    folder_path?: _STRING
}

// CR Batch Images From List [🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils]
export interface CR_Batch_Images_From_List extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Batch_Images_From_List_input, CR_Batch_Images_From_List_output> {
    nameInComfy: "CR Batch Images From List"
}
export interface CR_Batch_Images_From_List_output {
    image_batch: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Batch_Images_From_List_input {
    image_list: _IMAGE
}

// CR Intertwine Lists [🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils]
export interface CR_Intertwine_Lists extends ComfyNode<CR_Intertwine_Lists_input, CR_Intertwine_Lists_output> {
    nameInComfy: "CR Intertwine Lists"
}
export interface CR_Intertwine_Lists_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Intertwine_Lists_input {
    /** default="" */
    list1?: _STRING
    /** default="" */
    list2?: _STRING
}

// CR Repeater [🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils]
export interface CR_Repeater extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Repeater_input, CR_Repeater_output> {
    nameInComfy: "CR Repeater"
}
export interface CR_Repeater_output {
    list: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Repeater_input {
    input_data: _$Star
    /** default=1 min=99999 max=99999 */
    repeats?: _INT
}

// CR XY Product [🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils]
export interface CR_XY_Product extends HasSingle_STRING, ComfyNode<CR_XY_Product_input, CR_XY_Product_output> {
    nameInComfy: "CR XY Product"
}
export interface CR_XY_Product_output {
    x_values: ComfyNodeOutput<'$Star', 0>,
    y_values: ComfyNodeOutput<'$Star', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_XY_Product_input {
    /** */
    text_x: _STRING
    /** */
    text_y: _STRING
}

// CR Text List To String [🧩 Comfyroll Studio_✨ Essential_📜 List_🛠️ Utils]
export interface CR_Text_List_To_String extends ComfyNode<CR_Text_List_To_String_input, CR_Text_List_To_String_output> {
    nameInComfy: "CR Text List To String"
}
export interface CR_Text_List_To_String_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_List_To_String_input {
    /** */
    text_list: _STRING
}

// CR SD1.5 Aspect Ratio [🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio]
export interface CR_SD1$55_Aspect_Ratio extends HasSingle_FLOAT, HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR_SD1$55_Aspect_Ratio_input, CR_SD1$55_Aspect_Ratio_output> {
    nameInComfy: "CR SD1.5 Aspect Ratio"
}
export interface CR_SD1$55_Aspect_Ratio_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    upscale_factor: ComfyNodeOutput<'FLOAT', 2>,
    batch_size: ComfyNodeOutput<'INT', 3>,
    empty_latent: ComfyNodeOutput<'LATENT', 4>,
    show_help: ComfyNodeOutput<'STRING', 5>,
}
export interface CR_SD1$55_Aspect_Ratio_input {
    /** default=512 min=8192 max=8192 */
    width?: _INT
    /** default=512 min=8192 max=8192 */
    height?: _INT
    aspect_ratio: Enum_CR_SD1$55_Aspect_Ratio_aspect_ratio
    swap_dimensions: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=100 max=100 step=0.1 */
    upscale_factor?: _FLOAT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// CR SDXL Aspect Ratio [🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio]
export interface CR_SDXL_Aspect_Ratio extends HasSingle_FLOAT, HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR_SDXL_Aspect_Ratio_input, CR_SDXL_Aspect_Ratio_output> {
    nameInComfy: "CR SDXL Aspect Ratio"
}
export interface CR_SDXL_Aspect_Ratio_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    upscale_factor: ComfyNodeOutput<'FLOAT', 2>,
    batch_size: ComfyNodeOutput<'INT', 3>,
    empty_latent: ComfyNodeOutput<'LATENT', 4>,
    show_help: ComfyNodeOutput<'STRING', 5>,
}
export interface CR_SDXL_Aspect_Ratio_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    aspect_ratio: Enum_CR_SDXL_Aspect_Ratio_aspect_ratio
    swap_dimensions: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=100 max=100 step=0.1 */
    upscale_factor?: _FLOAT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// CR Aspect Ratio [🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio]
export interface CR_Aspect_Ratio extends HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR_Aspect_Ratio_input, CR_Aspect_Ratio_output> {
    nameInComfy: "CR Aspect Ratio"
}
export interface CR_Aspect_Ratio_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    upscale_factor: ComfyNodeOutput<'FLOAT', 2>,
    prescale_factor: ComfyNodeOutput<'FLOAT', 3>,
    batch_size: ComfyNodeOutput<'INT', 4>,
    empty_latent: ComfyNodeOutput<'LATENT', 5>,
    show_help: ComfyNodeOutput<'STRING', 6>,
}
export interface CR_Aspect_Ratio_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    aspect_ratio: Enum_CR_Aspect_Ratio_aspect_ratio
    swap_dimensions: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=100 max=100 step=0.1 */
    upscale_factor?: _FLOAT
    /** default=1 min=100 max=100 step=0.1 */
    prescale_factor?: _FLOAT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// CR Aspect Ratio Banners [🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio]
export interface CR_Aspect_Ratio_Banners extends HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR_Aspect_Ratio_Banners_input, CR_Aspect_Ratio_Banners_output> {
    nameInComfy: "CR Aspect Ratio Banners"
}
export interface CR_Aspect_Ratio_Banners_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    upscale_factor: ComfyNodeOutput<'FLOAT', 2>,
    prescale_factor: ComfyNodeOutput<'FLOAT', 3>,
    batch_size: ComfyNodeOutput<'INT', 4>,
    empty_latent: ComfyNodeOutput<'LATENT', 5>,
    show_help: ComfyNodeOutput<'STRING', 6>,
}
export interface CR_Aspect_Ratio_Banners_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    aspect_ratio: Enum_CR_Aspect_Ratio_Banners_aspect_ratio
    swap_dimensions: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=100 max=100 step=0.1 */
    upscale_factor?: _FLOAT
    /** default=1 min=100 max=100 step=0.1 */
    prescale_factor?: _FLOAT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// CR Aspect Ratio Social Media [🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio]
export interface CR_Aspect_Ratio_Social_Media extends HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR_Aspect_Ratio_Social_Media_input, CR_Aspect_Ratio_Social_Media_output> {
    nameInComfy: "CR Aspect Ratio Social Media"
}
export interface CR_Aspect_Ratio_Social_Media_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    upscale_factor: ComfyNodeOutput<'FLOAT', 2>,
    prescale_factor: ComfyNodeOutput<'FLOAT', 3>,
    batch_size: ComfyNodeOutput<'INT', 4>,
    empty_latent: ComfyNodeOutput<'LATENT', 5>,
    show_help: ComfyNodeOutput<'STRING', 6>,
}
export interface CR_Aspect_Ratio_Social_Media_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    aspect_ratio: Enum_CR_Aspect_Ratio_Social_Media_aspect_ratio
    swap_dimensions: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=100 max=100 step=0.1 */
    upscale_factor?: _FLOAT
    /** default=1 min=100 max=100 step=0.1 */
    prescale_factor?: _FLOAT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// CR_Aspect Ratio For Print [🧩 Comfyroll Studio_✨ Essential_🔳 Aspect Ratio]
export interface CR$_Aspect_Ratio_For_Print extends HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR$_Aspect_Ratio_For_Print_input, CR$_Aspect_Ratio_For_Print_output> {
    nameInComfy: "CR_Aspect Ratio For Print"
}
export interface CR$_Aspect_Ratio_For_Print_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    upscale_factor: ComfyNodeOutput<'FLOAT', 2>,
    prescale_factor: ComfyNodeOutput<'FLOAT', 3>,
    batch_size: ComfyNodeOutput<'INT', 4>,
    empty_latent: ComfyNodeOutput<'LATENT', 5>,
    show_help: ComfyNodeOutput<'STRING', 6>,
}
export interface CR$_Aspect_Ratio_For_Print_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    aspect_ratio: Enum_CR$_Aspect_Ratio_For_Print_aspect_ratio
    swap_dimensions: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=100 max=100 step=0.1 */
    upscale_factor?: _FLOAT
    /** default=1 min=100 max=100 step=0.1 */
    prescale_factor?: _FLOAT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// CR Image Size [🧩 Comfyroll Studio_✨ Essential_💀 Legacy]
export interface CR_Image_Size extends HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Image_Size_input, CR_Image_Size_output> {
    nameInComfy: "CR Image Size"
}
export interface CR_Image_Size_output {
    Width: ComfyNodeOutput<'INT', 0>,
    Height: ComfyNodeOutput<'INT', 1>,
    upscale_factor: ComfyNodeOutput<'FLOAT', 2>,
    show_help: ComfyNodeOutput<'STRING', 3>,
}
export interface CR_Image_Size_input {
    /** default=512 min=2048 max=2048 */
    width?: _INT
    /** default=512 min=2048 max=2048 */
    height?: _INT
    /** default=1 min=2000 max=2000 */
    upscale_factor?: _FLOAT
}

// CR Aspect Ratio SDXL [🧩 Comfyroll Studio_✨ Essential_💀 Legacy]
export interface CR_Aspect_Ratio_SDXL extends HasSingle_STRING, ComfyNode<CR_Aspect_Ratio_SDXL_input, CR_Aspect_Ratio_SDXL_output> {
    nameInComfy: "CR Aspect Ratio SDXL"
}
export interface CR_Aspect_Ratio_SDXL_output {
    INT: ComfyNodeOutput<'INT', 0>,
    INT_1: ComfyNodeOutput<'INT', 1>,
    FLOAT: ComfyNodeOutput<'FLOAT', 2>,
    FLOAT_1: ComfyNodeOutput<'FLOAT', 3>,
    INT_2: ComfyNodeOutput<'INT', 4>,
    show_help: ComfyNodeOutput<'STRING', 5>,
}
export interface CR_Aspect_Ratio_SDXL_input {
    /** default=1024 min=2048 max=2048 */
    width?: _INT
    /** default=1024 min=2048 max=2048 */
    height?: _INT
    aspect_ratio: Enum_CR_SDXL_Aspect_Ratio_aspect_ratio
    swap_dimensions: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=2000 max=2000 */
    upscale_factor1?: _FLOAT
    /** default=1 min=2000 max=2000 */
    upscale_factor2?: _FLOAT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// CR SDXL Prompt Mixer [🧩 Comfyroll Studio_✨ Essential_💀 Legacy]
export interface CR_SDXL_Prompt_Mixer extends ComfyNode<CR_SDXL_Prompt_Mixer_input, CR_SDXL_Prompt_Mixer_output> {
    nameInComfy: "CR SDXL Prompt Mixer"
}
export interface CR_SDXL_Prompt_Mixer_output {
    pos_g: ComfyNodeOutput<'STRING', 0>,
    pos_l: ComfyNodeOutput<'STRING', 1>,
    pos_r: ComfyNodeOutput<'STRING', 2>,
    neg_g: ComfyNodeOutput<'STRING', 3>,
    neg_l: ComfyNodeOutput<'STRING', 4>,
    neg_r: ComfyNodeOutput<'STRING', 5>,
}
export interface CR_SDXL_Prompt_Mixer_input {
    /** default="BASE_POSITIVE" */
    prompt_positive?: _STRING
    /** default="BASE_NEGATIVE" */
    prompt_negative?: _STRING
    /** default="REFINER_POSTIVE" */
    style_positive?: _STRING
    /** default="REFINER_NEGATIVE" */
    style_negative?: _STRING
    preset?: Enum_CR_SDXL_Prompt_Mixer_preset
}

// CR Seed to Int [🧩 Comfyroll Studio_✨ Essential_💀 Legacy]
export interface CR_Seed_to_Int extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Seed_to_Int_input, CR_Seed_to_Int_output> {
    nameInComfy: "CR Seed to Int"
}
export interface CR_Seed_to_Int_output {
    INT: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Seed_to_Int_input {
    seed: _SEED
}

// CR Apply ControlNet [🧩 Comfyroll Studio_✨ Essential_🕹️ ControlNet]
export interface CR_Apply_ControlNet extends HasSingle_CONDITIONING, HasSingle_STRING, ComfyNode<CR_Apply_ControlNet_input, CR_Apply_ControlNet_output> {
    nameInComfy: "CR Apply ControlNet"
}
export interface CR_Apply_ControlNet_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Apply_ControlNet_input {
    conditioning: _CONDITIONING
    control_net: _CONTROL_NET
    image: _IMAGE
    switch: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
}

// CR Multi-ControlNet Stack [🧩 Comfyroll Studio_✨ Essential_🕹️ ControlNet]
export interface CR_Multi$7ControlNet_Stack extends HasSingle_CONTROL_NET_STACK, HasSingle_STRING, ComfyNode<CR_Multi$7ControlNet_Stack_input, CR_Multi$7ControlNet_Stack_output> {
    nameInComfy: "CR Multi-ControlNet Stack"
}
export interface CR_Multi$7ControlNet_Stack_output {
    CONTROLNET_STACK: ComfyNodeOutput<'CONTROL_NET_STACK', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Multi$7ControlNet_Stack_input {
    switch_1?: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    controlnet_1?: Enum_AV$_ControlNetEfficientLoader_control_net_name
    /** default=1 min=10 max=10 step=0.01 */
    controlnet_strength_1?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent_1?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent_1?: _FLOAT
    switch_2?: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    controlnet_2?: Enum_AV$_ControlNetEfficientLoader_control_net_name
    /** default=1 min=10 max=10 step=0.01 */
    controlnet_strength_2?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent_2?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent_2?: _FLOAT
    switch_3?: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    controlnet_3?: Enum_AV$_ControlNetEfficientLoader_control_net_name
    /** default=1 min=10 max=10 step=0.01 */
    controlnet_strength_3?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_percent_3?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_percent_3?: _FLOAT
    image_1?: _IMAGE
    image_2?: _IMAGE
    image_3?: _IMAGE
    controlnet_stack?: _CONTROL_NET_STACK
}

// CR Apply Multi-ControlNet [🧩 Comfyroll Studio_✨ Essential_🕹️ ControlNet]
export interface CR_Apply_Multi$7ControlNet extends HasSingle_STRING, ComfyNode<CR_Apply_Multi$7ControlNet_input, CR_Apply_Multi$7ControlNet_output> {
    nameInComfy: "CR Apply Multi-ControlNet"
}
export interface CR_Apply_Multi$7ControlNet_output {
    base_pos: ComfyNodeOutput<'CONDITIONING', 0>,
    base_neg: ComfyNodeOutput<'CONDITIONING', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Apply_Multi$7ControlNet_input {
    base_positive: _CONDITIONING
    base_negative: _CONDITIONING
    switch: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    controlnet_stack: _CONTROL_NET_STACK
}

// CR Load LoRA [🧩 Comfyroll Studio_✨ Essential_💊 LoRA]
export interface CR_Load_LoRA extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<CR_Load_LoRA_input, CR_Load_LoRA_output> {
    nameInComfy: "CR Load LoRA"
}
export interface CR_Load_LoRA_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Load_LoRA_input {
    model: _MODEL
    clip: _CLIP
    switch: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength_clip?: _FLOAT
}

// CR LoRA Stack [🧩 Comfyroll Studio_✨ Essential_💊 LoRA]
export interface CR_LoRA_Stack extends HasSingle_LORA_STACK, HasSingle_STRING, ComfyNode<CR_LoRA_Stack_input, CR_LoRA_Stack_output> {
    nameInComfy: "CR LoRA Stack"
}
export interface CR_LoRA_Stack_output {
    LORA_STACK: ComfyNodeOutput<'LORA_STACK', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_LoRA_Stack_input {
    switch_1: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    lora_name_1: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    model_weight_1?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_weight_1?: _FLOAT
    switch_2: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    lora_name_2: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    model_weight_2?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_weight_2?: _FLOAT
    switch_3: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    lora_name_3: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    model_weight_3?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_weight_3?: _FLOAT
    lora_stack?: _LORA_STACK
}

// CR Random LoRA Stack [🧩 Comfyroll Studio_✨ Essential_💊 LoRA]
export interface CR_Random_LoRA_Stack extends HasSingle_LORA_STACK, ComfyNode<CR_Random_LoRA_Stack_input, CR_Random_LoRA_Stack_output> {
    nameInComfy: "CR Random LoRA Stack"
}
export interface CR_Random_LoRA_Stack_output {
    LORA_STACK: ComfyNodeOutput<'LORA_STACK', 0>,
}
export interface CR_Random_LoRA_Stack_input {
    exclusive_mode: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=1000 max=1000 */
    stride?: _INT
    force_randomize_after_stride: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    lora_name_1: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    switch_1: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=1 max=1 step=0.01 */
    chance_1?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    model_weight_1?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_weight_1?: _FLOAT
    lora_name_2: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    switch_2: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=1 max=1 step=0.01 */
    chance_2?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    model_weight_2?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_weight_2?: _FLOAT
    lora_name_3: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    switch_3: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=1 min=1 max=1 step=0.01 */
    chance_3?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    model_weight_3?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_weight_3?: _FLOAT
    lora_stack?: _LORA_STACK
}

// CR Random Weight LoRA [🧩 Comfyroll Studio_✨ Essential_💊 LoRA]
export interface CR_Random_Weight_LoRA extends HasSingle_LORA_STACK, ComfyNode<CR_Random_Weight_LoRA_input, CR_Random_Weight_LoRA_output> {
    nameInComfy: "CR Random Weight LoRA"
}
export interface CR_Random_Weight_LoRA_output {
    LORA_STACK: ComfyNodeOutput<'LORA_STACK', 0>,
}
export interface CR_Random_Weight_LoRA_input {
    /** default=1 min=1000 max=1000 */
    stride?: _INT
    force_randomize_after_stride: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    switch: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    /** default=0 min=10 max=10 step=0.01 */
    weight_min?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    weight_max?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_weight?: _FLOAT
    lora_stack?: _LORA_STACK
}

// CR Apply LoRA Stack [🧩 Comfyroll Studio_✨ Essential_💊 LoRA]
export interface CR_Apply_LoRA_Stack extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<CR_Apply_LoRA_Stack_input, CR_Apply_LoRA_Stack_output> {
    nameInComfy: "CR Apply LoRA Stack"
}
export interface CR_Apply_LoRA_Stack_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Apply_LoRA_Stack_input {
    model: _MODEL
    clip: _CLIP
    lora_stack: _LORA_STACK
}

// CR Apply Model Merge [🧩 Comfyroll Studio_✨ Essential_⛏️ Model Merge]
export interface CR_Apply_Model_Merge extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<CR_Apply_Model_Merge_input, CR_Apply_Model_Merge_output> {
    nameInComfy: "CR Apply Model Merge"
}
export interface CR_Apply_Model_Merge_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    model_mix_info: ComfyNodeOutput<'STRING', 2>,
    show_help: ComfyNodeOutput<'STRING', 3>,
}
export interface CR_Apply_Model_Merge_input {
    model_stack: _MODEL_STACK
    merge_method: Enum_CR_Apply_Model_Merge_merge_method
    normalise_ratios: Enum_SDXLPromptStyler_log_prompt
    /** default=1 min=1 max=1 step=0.01 */
    weight_factor?: _FLOAT
}

// CR Model Merge Stack [🧩 Comfyroll Studio_✨ Essential_⛏️ Model Merge]
export interface CR_Model_Merge_Stack extends HasSingle_MODEL_STACK, HasSingle_STRING, ComfyNode<CR_Model_Merge_Stack_input, CR_Model_Merge_Stack_output> {
    nameInComfy: "CR Model Merge Stack"
}
export interface CR_Model_Merge_Stack_output {
    MODEL_STACK: ComfyNodeOutput<'MODEL_STACK', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Model_Merge_Stack_input {
    switch_1: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    ckpt_name1: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default=1 min=100 max=100 step=0.01 */
    model_ratio1?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    clip_ratio1?: _FLOAT
    switch_2: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    ckpt_name2: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default=1 min=100 max=100 step=0.01 */
    model_ratio2?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    clip_ratio2?: _FLOAT
    switch_3: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    ckpt_name3: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default=1 min=100 max=100 step=0.01 */
    model_ratio3?: _FLOAT
    /** default=1 min=100 max=100 step=0.01 */
    clip_ratio3?: _FLOAT
    model_stack?: _MODEL_STACK
}

// CR Data Bus In [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🚌 Bus]
export interface CR_Data_Bus_In extends HasSingle_PIPE_LINE, HasSingle_STRING, ComfyNode<CR_Data_Bus_In_input, CR_Data_Bus_In_output> {
    nameInComfy: "CR Data Bus In"
}
export interface CR_Data_Bus_In_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Data_Bus_In_input {
    pipe?: _$Star
    any1?: _$Star
    any2?: _$Star
    any3?: _$Star
    any4?: _$Star
}

// CR Data Bus Out [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🚌 Bus]
export interface CR_Data_Bus_Out extends HasSingle_PIPE_LINE, HasSingle_STRING, ComfyNode<CR_Data_Bus_Out_input, CR_Data_Bus_Out_output> {
    nameInComfy: "CR Data Bus Out"
}
export interface CR_Data_Bus_Out_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    any1: ComfyNodeOutput<'$Star', 1>,
    any2: ComfyNodeOutput<'$Star', 2>,
    any3: ComfyNodeOutput<'$Star', 3>,
    any4: ComfyNodeOutput<'$Star', 4>,
    show_help: ComfyNodeOutput<'STRING', 5>,
}
export interface CR_Data_Bus_Out_input {
    pipe: _PIPE_LINE
}

// CR 8 Channel In [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🚌 Bus]
export interface CR_8_Channel_In extends HasSingle_PIPE_LINE, HasSingle_STRING, ComfyNode<CR_8_Channel_In_input, CR_8_Channel_In_output> {
    nameInComfy: "CR 8 Channel In"
}
export interface CR_8_Channel_In_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_8_Channel_In_input {
    pipe?: _$Star
    ch1?: _$Star
    ch2?: _$Star
    ch3?: _$Star
    ch4?: _$Star
    ch5?: _$Star
    ch6?: _$Star
    ch7?: _$Star
    ch8?: _$Star
}

// CR 8 Channel Out [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🚌 Bus]
export interface CR_8_Channel_Out extends HasSingle_PIPE_LINE, HasSingle_STRING, ComfyNode<CR_8_Channel_Out_input, CR_8_Channel_Out_output> {
    nameInComfy: "CR 8 Channel Out"
}
export interface CR_8_Channel_Out_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    ch1: ComfyNodeOutput<'$Star', 1>,
    ch2: ComfyNodeOutput<'$Star', 2>,
    ch3: ComfyNodeOutput<'$Star', 3>,
    ch4: ComfyNodeOutput<'$Star', 4>,
    ch5: ComfyNodeOutput<'$Star', 5>,
    ch6: ComfyNodeOutput<'$Star', 6>,
    ch7: ComfyNodeOutput<'$Star', 7>,
    ch8: ComfyNodeOutput<'$Star', 8>,
    show_help: ComfyNodeOutput<'STRING', 9>,
}
export interface CR_8_Channel_Out_input {
    pipe: _PIPE_LINE
}

// CR Module Pipe Loader [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_✈️ Module]
export interface CR_Module_Pipe_Loader extends HasSingle_PIPE_LINE, HasSingle_STRING, ComfyNode<CR_Module_Pipe_Loader_input, CR_Module_Pipe_Loader_output> {
    nameInComfy: "CR Module Pipe Loader"
}
export interface CR_Module_Pipe_Loader_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Module_Pipe_Loader_input {
    model?: _MODEL
    pos?: _CONDITIONING
    neg?: _CONDITIONING
    latent?: _LATENT
    vae?: _VAE
    clip?: _CLIP
    controlnet?: _CONTROL_NET
    image?: _IMAGE
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// CR Module Input [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_✈️ Module]
export interface CR_Module_Input extends HasSingle_PIPE_LINE, HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_CONTROL_NET, HasSingle_IMAGE, HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Module_Input_input, CR_Module_Input_output> {
    nameInComfy: "CR Module Input"
}
export interface CR_Module_Input_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    pos: ComfyNodeOutput<'CONDITIONING', 2>,
    neg: ComfyNodeOutput<'CONDITIONING', 3>,
    latent: ComfyNodeOutput<'LATENT', 4>,
    vae: ComfyNodeOutput<'VAE', 5>,
    clip: ComfyNodeOutput<'CLIP', 6>,
    controlnet: ComfyNodeOutput<'CONTROL_NET', 7>,
    image: ComfyNodeOutput<'IMAGE', 8>,
    seed: ComfyNodeOutput<'INT', 9>,
    show_help: ComfyNodeOutput<'STRING', 10>,
}
export interface CR_Module_Input_input {
    pipe: _PIPE_LINE
}

// CR Module Output [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_✈️ Module]
export interface CR_Module_Output extends HasSingle_PIPE_LINE, HasSingle_STRING, ComfyNode<CR_Module_Output_input, CR_Module_Output_output> {
    nameInComfy: "CR Module Output"
}
export interface CR_Module_Output_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Module_Output_input {
    pipe: _PIPE_LINE
    model?: _MODEL
    pos?: _CONDITIONING
    neg?: _CONDITIONING
    latent?: _LATENT
    vae?: _VAE
    clip?: _CLIP
    controlnet?: _CONTROL_NET
    image?: _IMAGE
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// CR Image Pipe In [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🛩️ Image]
export interface CR_Image_Pipe_In extends HasSingle_PIPE_LINE, HasSingle_STRING, ComfyNode<CR_Image_Pipe_In_input, CR_Image_Pipe_In_output> {
    nameInComfy: "CR Image Pipe In"
}
export interface CR_Image_Pipe_In_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Image_Pipe_In_input {
    image?: _IMAGE
    /** default=512 min=2048 max=2048 */
    width?: _INT
    /** default=512 min=2048 max=2048 */
    height?: _INT
    /** default=1 min=2000 max=2000 */
    upscale_factor?: _FLOAT
}

// CR Image Pipe Edit [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🛩️ Image]
export interface CR_Image_Pipe_Edit extends HasSingle_PIPE_LINE, HasSingle_STRING, ComfyNode<CR_Image_Pipe_Edit_input, CR_Image_Pipe_Edit_output> {
    nameInComfy: "CR Image Pipe Edit"
}
export interface CR_Image_Pipe_Edit_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Image_Pipe_Edit_input {
    pipe: _PIPE_LINE
    image?: _IMAGE
    /** default=512 min=2048 max=2048 */
    width?: _INT
    /** default=512 min=2048 max=2048 */
    height?: _INT
    /** default=1 min=2000 max=2000 */
    upscale_factor?: _FLOAT
}

// CR Image Pipe Out [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe_🛩️ Image]
export interface CR_Image_Pipe_Out extends HasSingle_PIPE_LINE, HasSingle_IMAGE, HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Image_Pipe_Out_input, CR_Image_Pipe_Out_output> {
    nameInComfy: "CR Image Pipe Out"
}
export interface CR_Image_Pipe_Out_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    image: ComfyNodeOutput<'IMAGE', 1>,
    width: ComfyNodeOutput<'INT', 2>,
    height: ComfyNodeOutput<'INT', 3>,
    upscale_factor: ComfyNodeOutput<'FLOAT', 4>,
    show_help: ComfyNodeOutput<'STRING', 5>,
}
export interface CR_Image_Pipe_Out_input {
    pipe: _PIPE_LINE
}

// CR Pipe Switch [🧩 Comfyroll Studio_✨ Essential_🎷 Pipe]
export interface CR_Pipe_Switch extends HasSingle_PIPE_LINE, HasSingle_STRING, ComfyNode<CR_Pipe_Switch_input, CR_Pipe_Switch_output> {
    nameInComfy: "CR Pipe Switch"
}
export interface CR_Pipe_Switch_output {
    PIPE_LINE: ComfyNodeOutput<'PIPE_LINE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Pipe_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    pipe1: _PIPE_LINE
    pipe2: _PIPE_LINE
}

// CR SDXL Prompt Mix Presets [🧩 Comfyroll Studio_✨ Essential_🌟 SDXL]
export interface CR_SDXL_Prompt_Mix_Presets extends ComfyNode<CR_SDXL_Prompt_Mix_Presets_input, CR_SDXL_Prompt_Mix_Presets_output> {
    nameInComfy: "CR SDXL Prompt Mix Presets"
}
export interface CR_SDXL_Prompt_Mix_Presets_output {
    pos_g: ComfyNodeOutput<'STRING', 0>,
    pos_l: ComfyNodeOutput<'STRING', 1>,
    pos_r: ComfyNodeOutput<'STRING', 2>,
    neg_g: ComfyNodeOutput<'STRING', 3>,
    neg_l: ComfyNodeOutput<'STRING', 4>,
    neg_r: ComfyNodeOutput<'STRING', 5>,
    show_help: ComfyNodeOutput<'STRING', 6>,
}
export interface CR_SDXL_Prompt_Mix_Presets_input {
    /** default="prompt_pos" */
    prompt_positive?: _STRING
    /** default="prompt_neg" */
    prompt_negative?: _STRING
    /** default="style_pos" */
    style_positive?: _STRING
    /** default="style_neg" */
    style_negative?: _STRING
    preset?: Enum_CR_SDXL_Prompt_Mix_Presets_preset
}

// CR SDXL Style Text [🧩 Comfyroll Studio_✨ Essential_🌟 SDXL]
export interface CR_SDXL_Style_Text extends ComfyNode<CR_SDXL_Style_Text_input, CR_SDXL_Style_Text_output> {
    nameInComfy: "CR SDXL Style Text"
}
export interface CR_SDXL_Style_Text_output {
    positive_prompt_text_l: ComfyNodeOutput<'STRING', 0>,
    negative_prompt_text_l: ComfyNodeOutput<'STRING', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_SDXL_Style_Text_input {
    /** default="POS_STYLE" */
    positive_style?: _STRING
    /** default="NEG_STYLE" */
    negative_style?: _STRING
}

// CR SDXL Base Prompt Encoder [🧩 Comfyroll Studio_✨ Essential_🌟 SDXL]
export interface CR_SDXL_Base_Prompt_Encoder extends HasSingle_STRING, ComfyNode<CR_SDXL_Base_Prompt_Encoder_input, CR_SDXL_Base_Prompt_Encoder_output> {
    nameInComfy: "CR SDXL Base Prompt Encoder"
}
export interface CR_SDXL_Base_Prompt_Encoder_output {
    base_positive: ComfyNodeOutput<'CONDITIONING', 0>,
    base_negative: ComfyNodeOutput<'CONDITIONING', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_SDXL_Base_Prompt_Encoder_input {
    base_clip: _CLIP
    /** default="POS_G" */
    pos_g?: _STRING
    /** default="POS_L" */
    pos_l?: _STRING
    /** default="NEG_G" */
    neg_g?: _STRING
    /** default="NEG_L" */
    neg_l?: _STRING
    preset: Enum_CR_SDXL_Base_Prompt_Encoder_preset
    /** default=4096 min=16384 max=16384 step=64 */
    base_width?: _INT
    /** default=4096 min=16384 max=16384 step=64 */
    base_height?: _INT
    /** default=0 min=16384 max=16384 step=64 */
    crop_w?: _INT
    /** default=0 min=16384 max=16384 step=64 */
    crop_h?: _INT
    /** default=4096 min=16384 max=16384 step=64 */
    target_width?: _INT
    /** default=4096 min=16384 max=16384 step=64 */
    target_height?: _INT
}

// CR Multi Upscale Stack [🧩 Comfyroll Studio_✨ Essential_🔍 Upscale]
export interface CR_Multi_Upscale_Stack extends HasSingle_UPSCALE_STACK, HasSingle_STRING, ComfyNode<CR_Multi_Upscale_Stack_input, CR_Multi_Upscale_Stack_output> {
    nameInComfy: "CR Multi Upscale Stack"
}
export interface CR_Multi_Upscale_Stack_output {
    UPSCALE_STACK: ComfyNodeOutput<'UPSCALE_STACK', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Multi_Upscale_Stack_input {
    switch_1: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    upscale_model_1: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
    /** default=2 min=16 max=16 step=0.01 */
    rescale_factor_1?: _FLOAT
    switch_2: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    upscale_model_2: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
    /** default=2 min=16 max=16 step=0.01 */
    rescale_factor_2?: _FLOAT
    switch_3: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    upscale_model_3: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
    /** default=2 min=16 max=16 step=0.01 */
    rescale_factor_3?: _FLOAT
    upscale_stack?: _UPSCALE_STACK
}

// CR Upscale Image [🧩 Comfyroll Studio_✨ Essential_🔍 Upscale]
export interface CR_Upscale_Image extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Upscale_Image_input, CR_Upscale_Image_output> {
    nameInComfy: "CR Upscale Image"
}
export interface CR_Upscale_Image_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Upscale_Image_input {
    image: _IMAGE
    upscale_model: Enum_UpscaleModelLoader_model_name
    mode: Enum_CR_Upscale_Image_mode
    /** default=2 min=16 max=16 step=0.01 */
    rescale_factor?: _FLOAT
    /** default=1024 min=48000 max=48000 step=1 */
    resize_width?: _INT
    resampling_method: Enum_SEGSUpscaler_resampling_method
    supersample: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=8 min=1024 max=1024 step=8 */
    rounding_modulus?: _INT
}

// CR Apply Multi Upscale [🧩 Comfyroll Studio_✨ Essential_🔍 Upscale]
export interface CR_Apply_Multi_Upscale extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Apply_Multi_Upscale_input, CR_Apply_Multi_Upscale_output> {
    nameInComfy: "CR Apply Multi Upscale"
}
export interface CR_Apply_Multi_Upscale_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Apply_Multi_Upscale_input {
    image: _IMAGE
    resampling_method: Enum_SEGSUpscaler_resampling_method
    supersample: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=8 min=1024 max=1024 step=8 */
    rounding_modulus?: _INT
    upscale_stack: _UPSCALE_STACK
}

// CR XY List [🧩 Comfyroll Studio_✨ Essential_📉 XY Grid]
export interface CR_XY_List extends HasSingle_BOOLEAN, ComfyNode<CR_XY_List_input, CR_XY_List_output> {
    nameInComfy: "CR XY List"
}
export interface CR_XY_List_output {
    X: ComfyNodeOutput<'STRING', 0>,
    Y: ComfyNodeOutput<'STRING', 1>,
    x_annotation: ComfyNodeOutput<'STRING', 2>,
    y_annotation: ComfyNodeOutput<'STRING', 3>,
    trigger: ComfyNodeOutput<'BOOLEAN', 4>,
    show_help: ComfyNodeOutput<'STRING', 5>,
}
export interface CR_XY_List_input {
    /** default=0 min=9999 max=9999 step=1 */
    index?: _INT
    /** default="x" */
    list1?: _STRING
    /** default="" */
    x_prepend?: _STRING
    /** default="" */
    x_append?: _STRING
    /** default="" */
    x_annotation_prepend?: _STRING
    /** default="y" */
    list2?: _STRING
    /** default="" */
    y_prepend?: _STRING
    /** default="" */
    y_append?: _STRING
    /** default="" */
    y_annotation_prepend?: _STRING
}

// CR XY Interpolate [🧩 Comfyroll Studio_✨ Essential_📉 XY Grid]
export interface CR_XY_Interpolate extends HasSingle_BOOLEAN, ComfyNode<CR_XY_Interpolate_input, CR_XY_Interpolate_output> {
    nameInComfy: "CR XY Interpolate"
}
export interface CR_XY_Interpolate_output {
    X: ComfyNodeOutput<'FLOAT', 0>,
    Y: ComfyNodeOutput<'FLOAT', 1>,
    x_annotation: ComfyNodeOutput<'STRING', 2>,
    y_annotation: ComfyNodeOutput<'STRING', 3>,
    trigger: ComfyNodeOutput<'BOOLEAN', 4>,
    show_help: ComfyNodeOutput<'STRING', 5>,
}
export interface CR_XY_Interpolate_input {
    /** default=5 min=9999 max=9999 step=1 */
    x_columns?: _INT
    /** default=0 min=9999 max=9999 step=0.01 */
    x_start_value?: _FLOAT
    /** default=1 min=9999 max=9999 step=0.01 */
    x_step?: _FLOAT
    /** default="" */
    x_annotation_prepend?: _STRING
    /** default=5 min=9999 max=9999 step=1 */
    y_rows?: _INT
    /** default=0 min=9999 max=9999 step=0.01 */
    y_start_value?: _FLOAT
    /** default=1 min=9999 max=9999 step=0.01 */
    y_step?: _FLOAT
    /** default="" */
    y_annotation_prepend?: _STRING
    /** default=0 min=9999 max=9999 step=1 */
    index?: _INT
    gradient_profile: Enum_CR_XY_Interpolate_gradient_profile
}

// CR XY From Folder [🧩 Comfyroll Studio_✨ Essential_📉 XY Grid]
export interface CR_XY_From_Folder extends HasSingle_IMAGE, HasSingle_BOOLEAN, HasSingle_STRING, ComfyNode<CR_XY_From_Folder_input, CR_XY_From_Folder_output> {
    nameInComfy: "CR XY From Folder"
}
export interface CR_XY_From_Folder_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    trigger: ComfyNodeOutput<'BOOLEAN', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_XY_From_Folder_input {
    image_folder: Enum_CR_XY_From_Folder_image_folder
    /** default=1 min=10000 max=10000 */
    start_index?: _INT
    /** default=1 min=10000 max=10000 */
    end_index?: _INT
    /** default=1 min=10000 max=10000 */
    max_columns?: _INT
    /** */
    x_annotation: _STRING
    /** */
    y_annotation: _STRING
    /** default=50 min=undefined */
    font_size?: _INT
    /** default=0 min=undefined */
    gap?: _INT
    /** default=false */
    trigger?: _BOOLEAN
}

// CR XY Save Grid Image [🧩 Comfyroll Studio_✨ Essential_📉 XY Grid]
export interface CR_XY_Save_Grid_Image extends ComfyNode<CR_XY_Save_Grid_Image_input, CR_XY_Save_Grid_Image_output> {
    nameInComfy: "CR XY Save Grid Image"
}
export interface CR_XY_Save_Grid_Image_output {
}
export interface CR_XY_Save_Grid_Image_input {
    mode: Enum_CR_XY_Save_Grid_Image_mode
    output_folder: Enum_CR_XY_From_Folder_image_folder
    image: _IMAGE
    /** default="CR" */
    filename_prefix?: _STRING
    file_format: Enum_CR_Image_Output_file_format
    /** default="" */
    output_path?: _STRING
    /** default=false */
    trigger?: _BOOLEAN
}

// CR XY Index [🧩 Comfyroll Studio_✨ Essential_📉 XY Grid]
export interface CR_XY_Index extends HasSingle_STRING, ComfyNode<CR_XY_Index_input, CR_XY_Index_output> {
    nameInComfy: "CR XY Index"
}
export interface CR_XY_Index_output {
    x: ComfyNodeOutput<'INT', 0>,
    y: ComfyNodeOutput<'INT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_XY_Index_input {
    /** default=5 min=9999 max=9999 step=1 */
    x_columns?: _INT
    /** default=5 min=9999 max=9999 step=1 */
    y_rows?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    index?: _INT
}

// CR Halftone Grid [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Halftone_Grid extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Halftone_Grid_input, CR_Halftone_Grid_output> {
    nameInComfy: "CR Halftone Grid"
}
export interface CR_Halftone_Grid_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Halftone_Grid_input {
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    dot_style: Enum_CR_Halftone_Grid_dot_style
    reverse_dot_style: Enum_SDXLPromptStyler_log_prompt
    /** default=50 min=200 max=200 step=1 */
    dot_frequency?: _INT
    background_color: Enum_CR_Halftone_Grid_background_color
    /** default=0.5 min=1 max=1 step=0.01 */
    x_pos?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    y_pos?: _FLOAT
    /** default="#000000" */
    bg_color_hex?: _STRING
}

// CR Color Bars [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Color_Bars extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Color_Bars_input, CR_Color_Bars_output> {
    nameInComfy: "CR Color Bars"
}
export interface CR_Color_Bars_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Color_Bars_input {
    mode: Enum_CR_Color_Bars_mode
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    color_1: Enum_CR_Halftone_Grid_background_color
    color_2: Enum_CR_Halftone_Grid_background_color
    orientation: Enum_CR_Color_Bars_orientation
    /** default=5 min=200 max=200 step=1 */
    bar_frequency?: _INT
    /** default=0 min=20 max=20 step=0.05 */
    offset?: _FLOAT
    /** default="#000000" */
    color1_hex?: _STRING
    /** default="#000000" */
    color2_hex?: _STRING
}

// CR Style Bars [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Style_Bars extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Style_Bars_input, CR_Style_Bars_output> {
    nameInComfy: "CR Style Bars"
}
export interface CR_Style_Bars_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Style_Bars_input {
    mode: Enum_CR_Style_Bars_mode
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    bar_style: Enum_CR_Halftone_Grid_dot_style
    orientation: Enum_CR_Style_Bars_orientation
    /** default=5 min=200 max=200 step=1 */
    bar_frequency?: _INT
}

// CR Checker Pattern [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Checker_Pattern extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Checker_Pattern_input, CR_Checker_Pattern_output> {
    nameInComfy: "CR Checker Pattern"
}
export interface CR_Checker_Pattern_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Checker_Pattern_input {
    mode: Enum_CR_Checker_Pattern_mode
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    color_1: Enum_CR_Halftone_Grid_background_color
    color_2: Enum_CR_Halftone_Grid_background_color
    /** default=8 min=200 max=200 step=1 */
    grid_frequency?: _INT
    /** default=2 min=200 max=200 step=1 */
    step?: _INT
    /** default="#000000" */
    color1_hex?: _STRING
    /** default="#000000" */
    color2_hex?: _STRING
}

// CR Polygons [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Polygons extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Polygons_input, CR_Polygons_output> {
    nameInComfy: "CR Polygons"
}
export interface CR_Polygons_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Polygons_input {
    mode: Enum_CR_Polygons_mode
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    /** default=5 min=512 max=512 */
    rows?: _INT
    /** default=5 min=512 max=512 */
    columns?: _INT
    face_color: Enum_CR_Halftone_Grid_background_color
    background_color: Enum_CR_Halftone_Grid_background_color
    line_color: Enum_CR_Halftone_Grid_background_color
    /** default=2 min=512 max=512 */
    line_width?: _INT
    /** default="#000000" */
    face_color_hex?: _STRING
    /** default="#000000" */
    bg_color_hex?: _STRING
    /** default="#000000" */
    line_color_hex?: _STRING
}

// CR Color Gradient [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Color_Gradient extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Color_Gradient_input, CR_Color_Gradient_output> {
    nameInComfy: "CR Color Gradient"
}
export interface CR_Color_Gradient_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Color_Gradient_input {
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    start_color: Enum_CR_Halftone_Grid_background_color
    end_color: Enum_CR_Halftone_Grid_background_color
    /** default=1 min=2 max=2 step=0.05 */
    gradient_distance?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.05 */
    linear_transition?: _FLOAT
    orientation: Enum_CR_Style_Bars_orientation
    /** default="#000000" */
    start_color_hex?: _STRING
    /** default="#000000" */
    end_color_hex?: _STRING
}

// CR Radial Gradient [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Radial_Gradient extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Radial_Gradient_input, CR_Radial_Gradient_output> {
    nameInComfy: "CR Radial Gradient"
}
export interface CR_Radial_Gradient_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_Help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Radial_Gradient_input {
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    start_color: Enum_CR_Halftone_Grid_background_color
    end_color: Enum_CR_Halftone_Grid_background_color
    /** default=1 min=2 max=2 step=0.05 */
    gradient_distance?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.05 */
    radial_center_x?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.05 */
    radial_center_y?: _FLOAT
    /** default="#000000" */
    start_color_hex?: _STRING
    /** default="#000000" */
    end_color_hex?: _STRING
}

// CR Starburst Lines [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Starburst_Lines extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Starburst_Lines_input, CR_Starburst_Lines_output> {
    nameInComfy: "CR Starburst Lines"
}
export interface CR_Starburst_Lines_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Starburst_Lines_input {
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    /** default=6 min=500 max=500 */
    num_lines?: _INT
    /** default=5 min=100 max=100 step=0.1 */
    line_length?: _FLOAT
    /** default=5 min=512 max=512 */
    line_width?: _INT
    line_color: Enum_CR_Halftone_Grid_background_color
    background_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=1024 max=1024 */
    center_x?: _INT
    /** default=0 min=1024 max=1024 */
    center_y?: _INT
    /** default=0 min=720 max=720 */
    rotation?: _FLOAT
    /** default="#000000" */
    line_color_hex?: _STRING
    /** default="#000000" */
    bg_color_hex?: _STRING
}

// CR Starburst Colors [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Starburst_Colors extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Starburst_Colors_input, CR_Starburst_Colors_output> {
    nameInComfy: "CR Starburst Colors"
}
export interface CR_Starburst_Colors_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Starburst_Colors_input {
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    /** default=6 min=512 max=512 */
    num_triangles?: _INT
    color_1: Enum_CR_Halftone_Grid_background_color
    color_2: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=512 max=512 */
    center_x?: _INT
    /** default=0 min=512 max=512 */
    center_y?: _INT
    /** default=0 min=720 max=720 */
    rotation?: _FLOAT
    /** default=2 min=2 max=2 step=0.01 */
    bbox_factor?: _FLOAT
    /** default="#000000" */
    color1_hex?: _STRING
    /** default="#000000" */
    color2_hex?: _STRING
}

// CR Simple Binary Pattern [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Simple_Binary_Pattern extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Simple_Binary_Pattern_input, CR_Simple_Binary_Pattern_output> {
    nameInComfy: "CR Simple Binary Pattern"
}
export interface CR_Simple_Binary_Pattern_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Binary_Pattern_input {
    /** default="10101" */
    binary_pattern?: _STRING
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
}

// CR Binary Pattern [🧩 Comfyroll Studio_👾 Graphics_🌈 Pattern]
export interface CR_Binary_Pattern extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Binary_Pattern_input, CR_Binary_Pattern_output> {
    nameInComfy: "CR Binary Pattern"
}
export interface CR_Binary_Pattern_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Binary_Pattern_input {
    /** default="10101" */
    binary_pattern?: _STRING
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    background_color: Enum_CR_Halftone_Grid_background_color
    color_0: Enum_CR_Halftone_Grid_background_color
    color_1: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=1024 max=1024 */
    outline_thickness?: _INT
    outline_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=1024 max=1024 */
    jitter_distance?: _INT
    /** default=0.5 min=1 max=1 step=0.05 */
    bias?: _FLOAT
    /** default="#000000" */
    bg_color_hex?: _STRING
    /** default="#000000" */
    color0_hex?: _STRING
    /** default="#000000" */
    color1_hex?: _STRING
    /** default="#000000" */
    outline_color_hex?: _STRING
}

// CR Draw Shape [🧩 Comfyroll Studio_👾 Graphics_🟣 Shape]
export interface CR_Draw_Shape extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Draw_Shape_input, CR_Draw_Shape_output> {
    nameInComfy: "CR Draw Shape"
}
export interface CR_Draw_Shape_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Draw_Shape_input {
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    shape: Enum_CR_Draw_Shape_shape
    shape_color: Enum_CR_Halftone_Grid_background_color
    back_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=2048 max=2048 */
    x_offset?: _INT
    /** default=0 min=2048 max=2048 */
    y_offset?: _INT
    /** default=1 min=10 max=10 step=0.05 */
    zoom?: _FLOAT
    /** default=0 min=3600 max=3600 step=0.1 */
    rotation?: _FLOAT
    /** default="#000000" */
    shape_color_hex?: _STRING
    /** default="#000000" */
    bg_color_hex?: _STRING
}

// CR Draw Pie [🧩 Comfyroll Studio_👾 Graphics_🟣 Shape]
export interface CR_Draw_Pie extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Draw_Pie_input, CR_Draw_Pie_output> {
    nameInComfy: "CR Draw Pie"
}
export interface CR_Draw_Pie_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Draw_Pie_input {
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    /** default=30 min=9999 max=9999 step=0.1 */
    pie_start?: _FLOAT
    /** default=330 min=9999 max=9999 step=0.1 */
    pie_stop?: _FLOAT
    shape_color: Enum_CR_Halftone_Grid_background_color
    back_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=2048 max=2048 */
    x_offset?: _INT
    /** default=0 min=2048 max=2048 */
    y_offset?: _INT
    /** default=1 min=10 max=10 step=0.05 */
    zoom?: _FLOAT
    /** default=0 min=3600 max=3600 step=0.1 */
    rotation?: _FLOAT
    /** default="#000000" */
    shape_color_hex?: _STRING
    /** default="#000000" */
    bg_color_hex?: _STRING
}

// CR Random Shape Pattern [🧩 Comfyroll Studio_👾 Graphics_🟣 Shape]
export interface CR_Random_Shape_Pattern extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Random_Shape_Pattern_input, CR_Random_Shape_Pattern_output> {
    nameInComfy: "CR Random Shape Pattern"
}
export interface CR_Random_Shape_Pattern_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Random_Shape_Pattern_input {
    /** default=512 min=4096 max=4096 */
    width?: _INT
    /** default=512 min=4096 max=4096 */
    height?: _INT
    /** default=5 min=128 max=128 */
    num_rows?: _INT
    /** default=5 min=128 max=128 */
    num_cols?: _INT
    color1: Enum_CR_Halftone_Grid_background_color
    color2: Enum_CR_Halftone_Grid_background_color
    /** default="#000000" */
    color1_hex?: _STRING
    /** default="#000000" */
    color2_hex?: _STRING
}

// CR Overlay Text [🧩 Comfyroll Studio_👾 Graphics_🔤 Text]
export interface CR_Overlay_Text extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Overlay_Text_input, CR_Overlay_Text_output> {
    nameInComfy: "CR Overlay Text"
}
export interface CR_Overlay_Text_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Overlay_Text_input {
    image: _IMAGE
    /** default="text" */
    text?: _STRING
    font_name: Enum_CR_Overlay_Text_font_name
    /** default=50 min=1024 max=1024 */
    font_size?: _INT
    font_color: Enum_CR_Halftone_Grid_background_color
    align: Enum_CR_Overlay_Text_align
    justify: Enum_ImageTextMultiline_align
    /** default=0 min=1024 max=1024 */
    margins?: _INT
    /** default=0 min=1024 max=1024 */
    line_spacing?: _INT
    /** default=0 min=4096 max=4096 */
    position_x?: _INT
    /** default=0 min=4096 max=4096 */
    position_y?: _INT
    /** default=0 min=360 max=360 step=0.1 */
    rotation_angle?: _FLOAT
    rotation_options: Enum_CR_Overlay_Text_rotation_options
    /** default="#000000" */
    font_color_hex?: _STRING
}

// CR Draw Text [🧩 Comfyroll Studio_👾 Graphics_🔤 Text]
export interface CR_Draw_Text extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Draw_Text_input, CR_Draw_Text_output> {
    nameInComfy: "CR Draw Text"
}
export interface CR_Draw_Text_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Draw_Text_input {
    /** default=512 min=2048 max=2048 */
    image_width?: _INT
    /** default=512 min=2048 max=2048 */
    image_height?: _INT
    /** default="text" */
    text?: _STRING
    font_name: Enum_CR_Overlay_Text_font_name
    /** default=50 min=1024 max=1024 */
    font_size?: _INT
    font_color: Enum_CR_Halftone_Grid_background_color
    background_color: Enum_CR_Halftone_Grid_background_color
    align: Enum_CR_Overlay_Text_align
    justify: Enum_ImageTextMultiline_align
    /** default=0 min=1024 max=1024 */
    margins?: _INT
    /** default=0 min=1024 max=1024 */
    line_spacing?: _INT
    /** default=0 min=4096 max=4096 */
    position_x?: _INT
    /** default=0 min=4096 max=4096 */
    position_y?: _INT
    /** default=0 min=360 max=360 step=0.1 */
    rotation_angle?: _FLOAT
    rotation_options: Enum_CR_Overlay_Text_rotation_options
    /** default="#000000" */
    font_color_hex?: _STRING
    /** default="#000000" */
    bg_color_hex?: _STRING
}

// CR Mask Text [🧩 Comfyroll Studio_👾 Graphics_🔤 Text]
export interface CR_Mask_Text extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Mask_Text_input, CR_Mask_Text_output> {
    nameInComfy: "CR Mask Text"
}
export interface CR_Mask_Text_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Mask_Text_input {
    image: _IMAGE
    /** default="text" */
    text?: _STRING
    font_name: Enum_CR_Overlay_Text_font_name
    /** default=50 min=1024 max=1024 */
    font_size?: _INT
    background_color: Enum_CR_Halftone_Grid_background_color
    align: Enum_CR_Overlay_Text_align
    justify: Enum_ImageTextMultiline_align
    /** default=0 min=1024 max=1024 */
    margins?: _INT
    /** default=0 min=1024 max=1024 */
    line_spacing?: _INT
    /** default=0 min=4096 max=4096 */
    position_x?: _INT
    /** default=0 min=4096 max=4096 */
    position_y?: _INT
    /** default=0 min=360 max=360 step=0.1 */
    rotation_angle?: _FLOAT
    rotation_options: Enum_CR_Overlay_Text_rotation_options
    /** default="#000000" */
    bg_color_hex?: _STRING
}

// CR Composite Text [🧩 Comfyroll Studio_👾 Graphics_🔤 Text]
export interface CR_Composite_Text extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Composite_Text_input, CR_Composite_Text_output> {
    nameInComfy: "CR Composite Text"
}
export interface CR_Composite_Text_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Composite_Text_input {
    image_text: _IMAGE
    image_background: _IMAGE
    /** default="text" */
    text?: _STRING
    font_name: Enum_CR_Overlay_Text_font_name
    /** default=50 min=1024 max=1024 */
    font_size?: _INT
    align: Enum_CR_Overlay_Text_align
    justify: Enum_ImageTextMultiline_align
    /** default=0 min=1024 max=1024 */
    margins?: _INT
    /** default=0 min=1024 max=1024 */
    line_spacing?: _INT
    /** default=0 min=4096 max=4096 */
    position_x?: _INT
    /** default=0 min=4096 max=4096 */
    position_y?: _INT
    /** default=0 min=360 max=360 step=0.1 */
    rotation_angle?: _FLOAT
    rotation_options: Enum_CR_Overlay_Text_rotation_options
}

// CR Simple Text Watermark [🧩 Comfyroll Studio_👾 Graphics_🔤 Text]
export interface CR_Simple_Text_Watermark extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Simple_Text_Watermark_input, CR_Simple_Text_Watermark_output> {
    nameInComfy: "CR Simple Text Watermark"
}
export interface CR_Simple_Text_Watermark_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Text_Watermark_input {
    image: _IMAGE
    /** default="@ your name" */
    text?: _STRING
    align: Enum_CR_Simple_Text_Watermark_align
    /** default=0.3 min=1 max=1 step=0.01 */
    opacity?: _FLOAT
    font_name: Enum_CR_Overlay_Text_font_name
    /** default=50 min=1024 max=1024 */
    font_size?: _INT
    font_color: Enum_CR_Halftone_Grid_background_color
    /** default=20 min=1024 max=1024 */
    x_margin?: _INT
    /** default=20 min=1024 max=1024 */
    y_margin?: _INT
    /** default="#000000" */
    font_color_hex?: _STRING
}

// CR Select Font [🧩 Comfyroll Studio_👾 Graphics_🔤 Text]
export interface CR_Select_Font extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Select_Font_input, CR_Select_Font_output> {
    nameInComfy: "CR Select Font"
}
export interface CR_Select_Font_output {
    font_name: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Select_Font_input {
    font_name: Enum_CR_Select_Font_font_name
}

// CR Halftone Filter [🧩 Comfyroll Studio_👾 Graphics_🎨 Filter]
export interface CR_Halftone_Filter extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Halftone_Filter_input, CR_Halftone_Filter_output> {
    nameInComfy: "CR Halftone Filter"
}
export interface CR_Halftone_Filter_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Halftone_Filter_input {
    image: _IMAGE
    /** default=5 min=30 max=30 step=1 */
    dot_size?: _INT
    /** default="ellipse" */
    dot_shape?: Enum_CR_Halftone_Filter_dot_shape
    /** default="normal" */
    resolution?: Enum_CR_Halftone_Filter_resolution
    /** default=75 min=360 max=360 step=1 */
    angle_c?: _INT
    /** default=45 min=360 max=360 step=1 */
    angle_m?: _INT
    /** default=15 min=360 max=360 step=1 */
    angle_y?: _INT
    /** default=0 min=360 max=360 step=1 */
    angle_k?: _INT
    /** default=true */
    greyscale?: _BOOLEAN
    /** default=true */
    antialias?: _BOOLEAN
    /** default=2 min=4 max=4 step=1 */
    antialias_scale?: _INT
    /** default=false */
    border_blending?: _BOOLEAN
}

// CR Color Tint [🧩 Comfyroll Studio_👾 Graphics_🎨 Filter]
export interface CR_Color_Tint extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Color_Tint_input, CR_Color_Tint_output> {
    nameInComfy: "CR Color Tint"
}
export interface CR_Color_Tint_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Color_Tint_input {
    image: _IMAGE
    /** default=1 min=1 max=1 step=0.1 */
    strength?: _FLOAT
    mode: Enum_CR_Color_Tint_mode
    /** default="#000000" */
    tint_color_hex?: _STRING
}

// CR Vignette Filter [🧩 Comfyroll Studio_👾 Graphics_🎨 Filter]
export interface CR_Vignette_Filter extends HasSingle_IMAGE, HasSingle_MASK, HasSingle_STRING, ComfyNode<CR_Vignette_Filter_input, CR_Vignette_Filter_output> {
    nameInComfy: "CR Vignette Filter"
}
export interface CR_Vignette_Filter_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Vignette_Filter_input {
    image: _IMAGE
    vignette_shape: Enum_CR_Vignette_Filter_vignette_shape
    /** default=100 min=1024 max=1024 */
    feather_amount?: _INT
    /** default=0 min=2048 max=2048 */
    x_offset?: _INT
    /** default=0 min=2048 max=2048 */
    y_offset?: _INT
    /** default=1 min=10 max=10 step=0.1 */
    zoom?: _FLOAT
    reverse: Enum_ConstrainImage$8pysssss_crop_if_required
}

// CR Page Layout [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Page_Layout extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Page_Layout_input, CR_Page_Layout_output> {
    nameInComfy: "CR Page Layout"
}
export interface CR_Page_Layout_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Page_Layout_input {
    layout_options: Enum_CR_Page_Layout_layout_options
    image_panel: _IMAGE
    /** default=0 min=1024 max=1024 */
    header_height?: _INT
    /** default="text" */
    header_text?: _STRING
    header_align: Enum_ImageTextMultiline_align
    /** default=0 min=1024 max=1024 */
    footer_height?: _INT
    /** default="text" */
    footer_text?: _STRING
    footer_align: Enum_ImageTextMultiline_align
    font_name: Enum_CR_Overlay_Text_font_name
    font_color: Enum_CR_Halftone_Grid_background_color
    /** default=150 min=1024 max=1024 */
    header_font_size?: _INT
    /** default=50 min=1024 max=1024 */
    footer_font_size?: _INT
    /** default=0 min=1024 max=1024 */
    border_thickness?: _INT
    border_color: Enum_CR_Halftone_Grid_background_color
    background_color: Enum_CR_Halftone_Grid_background_color
    /** default="#000000" */
    font_color_hex?: _STRING
    /** default="#000000" */
    border_color_hex?: _STRING
    /** default="#000000" */
    bg_color_hex?: _STRING
}

// CR Image Panel [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Image_Panel extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Image_Panel_input, CR_Image_Panel_output> {
    nameInComfy: "CR Image Panel"
}
export interface CR_Image_Panel_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Image_Panel_input {
    image_1: _IMAGE
    /** default=0 min=1024 max=1024 */
    border_thickness?: _INT
    border_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=1024 max=1024 */
    outline_thickness?: _INT
    outline_color: Enum_CR_Image_Panel_outline_color
    layout_direction: Enum_CR_Style_Bars_orientation
    image_2?: _IMAGE
    image_3?: _IMAGE
    image_4?: _IMAGE
    /** default="#000000" */
    border_color_hex?: _STRING
}

// CR Image Grid Panel [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Image_Grid_Panel extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Image_Grid_Panel_input, CR_Image_Grid_Panel_output> {
    nameInComfy: "CR Image Grid Panel"
}
export interface CR_Image_Grid_Panel_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Image_Grid_Panel_input {
    images: _IMAGE
    /** default=0 min=1024 max=1024 */
    border_thickness?: _INT
    border_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=1024 max=1024 */
    outline_thickness?: _INT
    outline_color: Enum_CR_Image_Panel_outline_color
    /** default=5 min=256 max=256 */
    max_columns?: _INT
    /** default="#000000" */
    border_color_hex?: _STRING
}

// CR Image Border [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Image_Border extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Image_Border_input, CR_Image_Border_output> {
    nameInComfy: "CR Image Border"
}
export interface CR_Image_Border_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Image_Border_input {
    image: _IMAGE
    /** default=0 min=4096 max=4096 */
    top_thickness?: _INT
    /** default=0 min=4096 max=4096 */
    bottom_thickness?: _INT
    /** default=0 min=4096 max=4096 */
    left_thickness?: _INT
    /** default=0 min=4096 max=4096 */
    right_thickness?: _INT
    border_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=1024 max=1024 */
    outline_thickness?: _INT
    outline_color: Enum_CR_Image_Panel_outline_color
    /** default="#000000" */
    border_color_hex?: _STRING
}

// CR Feathered Border [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Feathered_Border extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Feathered_Border_input, CR_Feathered_Border_output> {
    nameInComfy: "CR Feathered Border"
}
export interface CR_Feathered_Border_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Feathered_Border_input {
    image: _IMAGE
    /** default=0 min=4096 max=4096 */
    top_thickness?: _INT
    /** default=0 min=4096 max=4096 */
    bottom_thickness?: _INT
    /** default=0 min=4096 max=4096 */
    left_thickness?: _INT
    /** default=0 min=4096 max=4096 */
    right_thickness?: _INT
    border_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=1024 max=1024 */
    feather_amount?: _INT
    /** default="#000000" */
    border_color_hex?: _STRING
}

// CR Simple Text Panel [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Simple_Text_Panel extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Simple_Text_Panel_input, CR_Simple_Text_Panel_output> {
    nameInComfy: "CR Simple Text Panel"
}
export interface CR_Simple_Text_Panel_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Text_Panel_input {
    /** default=512 min=4096 max=4096 */
    panel_width?: _INT
    /** default=512 min=4096 max=4096 */
    panel_height?: _INT
    /** default="text" */
    text?: _STRING
    font_name: Enum_CR_Overlay_Text_font_name
    font_color: Enum_CR_Halftone_Grid_background_color
    /** default=100 min=1024 max=1024 */
    font_size?: _INT
    /** default=0 min=50 max=50 */
    font_outline_thickness?: _INT
    font_outline_color: Enum_CR_Halftone_Grid_background_color
    background_color: Enum_CR_Halftone_Grid_background_color
    align: Enum_CR_Overlay_Text_align
    justify: Enum_ImageTextMultiline_align
    /** default="#000000" */
    font_color_hex?: _STRING
    /** default="#000000" */
    bg_color_hex?: _STRING
}

// CR Color Panel [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Color_Panel extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Color_Panel_input, CR_Color_Panel_output> {
    nameInComfy: "CR Color Panel"
}
export interface CR_Color_Panel_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Color_Panel_input {
    /** default=512 min=4096 max=4096 */
    panel_width?: _INT
    /** default=512 min=4096 max=4096 */
    panel_height?: _INT
    fill_color: Enum_CR_Halftone_Grid_background_color
    /** default="#000000" */
    fill_color_hex?: _STRING
}

// CR Overlay Transparent Image [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Overlay_Transparent_Image extends HasSingle_IMAGE, ComfyNode<CR_Overlay_Transparent_Image_input, CR_Overlay_Transparent_Image_output> {
    nameInComfy: "CR Overlay Transparent Image"
}
export interface CR_Overlay_Transparent_Image_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CR_Overlay_Transparent_Image_input {
    back_image: _IMAGE
    overlay_image: _IMAGE
    /** default=0 min=1 max=1 step=0.1 */
    transparency?: _FLOAT
    /** default=0 min=4096 max=4096 */
    offset_x?: _INT
    /** default=0 min=4096 max=4096 */
    offset_y?: _INT
    /** default=0 min=360 max=360 step=0.1 */
    rotation_angle?: _FLOAT
    /** default=1 min=100 max=100 step=0.001 */
    overlay_scale_factor?: _FLOAT
}

// CR Half Drop Panel [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Half_Drop_Panel extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Half_Drop_Panel_input, CR_Half_Drop_Panel_output> {
    nameInComfy: "CR Half Drop Panel"
}
export interface CR_Half_Drop_Panel_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Half_Drop_Panel_input {
    image: _IMAGE
    pattern: Enum_CR_Half_Drop_Panel_pattern
    /** default=0.5 min=1 max=1 step=0.01 */
    drop_percentage?: _FLOAT
}

// CR Diamond Panel [🧩 Comfyroll Studio_👾 Graphics_🌁 Layout]
export interface CR_Diamond_Panel extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Diamond_Panel_input, CR_Diamond_Panel_output> {
    nameInComfy: "CR Diamond Panel"
}
export interface CR_Diamond_Panel_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Diamond_Panel_input {
    image: _IMAGE
    pattern: Enum_CR_Diamond_Panel_pattern
}

// CR Simple Meme Template [🧩 Comfyroll Studio_👾 Graphics_📱 Template]
export interface CR_Simple_Meme_Template extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Simple_Meme_Template_input, CR_Simple_Meme_Template_output> {
    nameInComfy: "CR Simple Meme Template"
}
export interface CR_Simple_Meme_Template_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Meme_Template_input {
    image: _IMAGE
    preset: Enum_CR_Simple_Meme_Template_preset
    /** default="text_top" */
    text_top?: _STRING
    /** default="text_bottom" */
    text_bottom?: _STRING
    font_name: Enum_CR_Overlay_Text_font_name
    /** default=150 min=2048 max=2048 */
    max_font_size?: _INT
    font_color: Enum_CR_Halftone_Grid_background_color
    font_outline: Enum_CR_Simple_Meme_Template_font_outline
    bar_color: Enum_CR_Halftone_Grid_background_color
    bar_options: Enum_CR_Simple_Meme_Template_bar_options
    /** default="#000000" */
    font_color_hex?: _STRING
    /** default="#000000" */
    bar_color_hex?: _STRING
}

// CR Simple Banner [🧩 Comfyroll Studio_👾 Graphics_📱 Template]
export interface CR_Simple_Banner extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Simple_Banner_input, CR_Simple_Banner_output> {
    nameInComfy: "CR Simple Banner"
}
export interface CR_Simple_Banner_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Banner_input {
    image: _IMAGE
    /** default="text" */
    banner_text?: _STRING
    font_name: Enum_CR_Overlay_Text_font_name
    /** default=150 min=2048 max=2048 */
    max_font_size?: _INT
    font_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=500 max=500 */
    outline_thickness?: _INT
    outline_color: Enum_CR_Halftone_Grid_background_color
    /** default=0 min=500 max=500 */
    margin_size?: _INT
    /** default="#000000" */
    font_color_hex?: _STRING
    /** default="#000000" */
    outline_color_hex?: _STRING
}

// CR Comic Panel Templates [🧩 Comfyroll Studio_👾 Graphics_📱 Template]
export interface CR_Comic_Panel_Templates extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Comic_Panel_Templates_input, CR_Comic_Panel_Templates_output> {
    nameInComfy: "CR Comic Panel Templates"
}
export interface CR_Comic_Panel_Templates_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Comic_Panel_Templates_input {
    /** default=512 min=4096 max=4096 */
    page_width?: _INT
    /** default=512 min=4096 max=4096 */
    page_height?: _INT
    template: Enum_CR_Comic_Panel_Templates_template
    reading_direction: Enum_CR_Comic_Panel_Templates_reading_direction
    /** default=5 min=1024 max=1024 */
    border_thickness?: _INT
    /** default=2 min=1024 max=1024 */
    outline_thickness?: _INT
    outline_color: Enum_CR_Halftone_Grid_background_color
    panel_color: Enum_CR_Halftone_Grid_background_color
    background_color: Enum_CR_Halftone_Grid_background_color
    images?: _IMAGE
    /** default="H123" */
    custom_panel_layout?: _STRING
    /** default="#000000" */
    outline_color_hex?: _STRING
    /** default="#000000" */
    panel_color_hex?: _STRING
    /** default="#000000" */
    bg_color_hex?: _STRING
}

// CR Simple Image Compare [🧩 Comfyroll Studio_👾 Graphics_📱 Template]
export interface CR_Simple_Image_Compare extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Simple_Image_Compare_input, CR_Simple_Image_Compare_output> {
    nameInComfy: "CR Simple Image Compare"
}
export interface CR_Simple_Image_Compare_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Image_Compare_input {
    /** default="text" */
    text1?: _STRING
    /** default="text" */
    text2?: _STRING
    /** default=100 min=1024 max=1024 */
    footer_height?: _INT
    font_name: Enum_CR_Overlay_Text_font_name
    /** default=50 min=1024 max=1024 */
    font_size?: _INT
    mode: Enum_CR_Simple_Image_Compare_mode
    /** default=20 min=1024 max=1024 */
    border_thickness?: _INT
    image1?: _IMAGE
    image2?: _IMAGE
}

// CR Thumbnail Preview [🧩 Comfyroll Studio_👾 Graphics_📱 Template]
export interface CR_Thumbnail_Preview extends HasSingle_STRING, ComfyNode<CR_Thumbnail_Preview_input, CR_Thumbnail_Preview_output> {
    nameInComfy: "CR Thumbnail Preview"
}
export interface CR_Thumbnail_Preview_output {
    show_help: ComfyNodeOutput<'STRING', 0>,
}
export interface CR_Thumbnail_Preview_input {
    image: _IMAGE
    /** default=0.25 min=1 max=1 step=0.01 */
    rescale_factor?: _FLOAT
    /** default=5 min=256 max=256 */
    max_columns?: _INT
}

// CR Seamless Checker [🧩 Comfyroll Studio_👾 Graphics_📱 Template]
export interface CR_Seamless_Checker extends HasSingle_STRING, ComfyNode<CR_Seamless_Checker_input, CR_Seamless_Checker_output> {
    nameInComfy: "CR Seamless Checker"
}
export interface CR_Seamless_Checker_output {
    show_help: ComfyNodeOutput<'STRING', 0>,
}
export interface CR_Seamless_Checker_input {
    image: _IMAGE
    /** default=0.25 min=1 max=1 step=0.01 */
    rescale_factor?: _FLOAT
    grid_options: Enum_CR_Seamless_Checker_grid_options
}

// CR Image Input Switch [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_Image_Input_Switch extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Image_Input_Switch_input, CR_Image_Input_Switch_output> {
    nameInComfy: "CR Image Input Switch"
}
export interface CR_Image_Input_Switch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Image_Input_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    image1?: _IMAGE
    image2?: _IMAGE
}

// CR Image Input Switch (4 way) [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_Image_Input_Switch_$14_way$2 extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Image_Input_Switch_$14_way$2_input, CR_Image_Input_Switch_$14_way$2_output> {
    nameInComfy: "CR Image Input Switch (4 way)"
}
export interface CR_Image_Input_Switch_$14_way$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Image_Input_Switch_$14_way$2_input {
    /** default=1 min=4 max=4 */
    Input?: _INT
    image1?: _IMAGE
    image2?: _IMAGE
    image3?: _IMAGE
    image4?: _IMAGE
}

// CR Latent Input Switch [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_Latent_Input_Switch extends HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR_Latent_Input_Switch_input, CR_Latent_Input_Switch_output> {
    nameInComfy: "CR Latent Input Switch"
}
export interface CR_Latent_Input_Switch_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Latent_Input_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    latent1?: _LATENT
    latent2?: _LATENT
}

// CR Conditioning Input Switch [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_Conditioning_Input_Switch extends HasSingle_CONDITIONING, HasSingle_STRING, ComfyNode<CR_Conditioning_Input_Switch_input, CR_Conditioning_Input_Switch_output> {
    nameInComfy: "CR Conditioning Input Switch"
}
export interface CR_Conditioning_Input_Switch_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Conditioning_Input_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    conditioning1?: _CONDITIONING
    conditioning2?: _CONDITIONING
}

// CR Clip Input Switch [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_Clip_Input_Switch extends HasSingle_CLIP, HasSingle_STRING, ComfyNode<CR_Clip_Input_Switch_input, CR_Clip_Input_Switch_output> {
    nameInComfy: "CR Clip Input Switch"
}
export interface CR_Clip_Input_Switch_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Clip_Input_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    clip1?: _CLIP
    clip2?: _CLIP
}

// CR Model Input Switch [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_Model_Input_Switch extends HasSingle_MODEL, HasSingle_STRING, ComfyNode<CR_Model_Input_Switch_input, CR_Model_Input_Switch_output> {
    nameInComfy: "CR Model Input Switch"
}
export interface CR_Model_Input_Switch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Model_Input_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    model1?: _MODEL
    model2?: _MODEL
}

// CR ControlNet Input Switch [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_ControlNet_Input_Switch extends HasSingle_CONTROL_NET, HasSingle_STRING, ComfyNode<CR_ControlNet_Input_Switch_input, CR_ControlNet_Input_Switch_output> {
    nameInComfy: "CR ControlNet Input Switch"
}
export interface CR_ControlNet_Input_Switch_output {
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_ControlNet_Input_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    control_net1?: _CONTROL_NET
    control_net2?: _CONTROL_NET
}

// CR VAE Input Switch [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_VAE_Input_Switch extends HasSingle_VAE, HasSingle_STRING, ComfyNode<CR_VAE_Input_Switch_input, CR_VAE_Input_Switch_output> {
    nameInComfy: "CR VAE Input Switch"
}
export interface CR_VAE_Input_Switch_output {
    VAE: ComfyNodeOutput<'VAE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_VAE_Input_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    /** */
    VAE1?: _VAE
    /** */
    VAE2?: _VAE
}

// CR Text Input Switch [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_Text_Input_Switch extends ComfyNode<CR_Text_Input_Switch_input, CR_Text_Input_Switch_output> {
    nameInComfy: "CR Text Input Switch"
}
export interface CR_Text_Input_Switch_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_Input_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    /** */
    text1?: _STRING
    /** */
    text2?: _STRING
}

// CR Text Input Switch (4 way) [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_Text_Input_Switch_$14_way$2 extends ComfyNode<CR_Text_Input_Switch_$14_way$2_input, CR_Text_Input_Switch_$14_way$2_output> {
    nameInComfy: "CR Text Input Switch (4 way)"
}
export interface CR_Text_Input_Switch_$14_way$2_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_Input_Switch_$14_way$2_input {
    /** default=1 min=4 max=4 */
    Input?: _INT
    /** */
    text1?: _STRING
    /** */
    text2?: _STRING
    /** */
    text3?: _STRING
    /** */
    text4?: _STRING
}

// CR Switch Model and CLIP [🧩 Comfyroll Studio_🛠️ Utils_🔀 Logic]
export interface CR_Switch_Model_and_CLIP extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<CR_Switch_Model_and_CLIP_input, CR_Switch_Model_and_CLIP_output> {
    nameInComfy: "CR Switch Model and CLIP"
}
export interface CR_Switch_Model_and_CLIP_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Switch_Model_and_CLIP_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    model1: _MODEL
    clip1: _CLIP
    model2: _MODEL
    clip2: _CLIP
}

// CR Batch Process Switch [🧩 Comfyroll Studio_🛠️ Utils_🔂 Process]
export interface CR_Batch_Process_Switch extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Batch_Process_Switch_input, CR_Batch_Process_Switch_output> {
    nameInComfy: "CR Batch Process Switch"
}
export interface CR_Batch_Process_Switch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Batch_Process_Switch_input {
    Input: Enum_CR_Batch_Process_Switch_Input
    image?: _IMAGE
    image_batch?: _IMAGE
}

// CR Img2Img Process Switch [🧩 Comfyroll Studio_🛠️ Utils_🔂 Process]
export interface CR_Img2Img_Process_Switch extends HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR_Img2Img_Process_Switch_input, CR_Img2Img_Process_Switch_output> {
    nameInComfy: "CR Img2Img Process Switch"
}
export interface CR_Img2Img_Process_Switch_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Img2Img_Process_Switch_input {
    Input: Enum_CR_Img2Img_Process_Switch_Input
    txt2img?: _LATENT
    img2img?: _LATENT
}

// CR Hires Fix Process Switch [🧩 Comfyroll Studio_🛠️ Utils_🔂 Process]
export interface CR_Hires_Fix_Process_Switch extends HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR_Hires_Fix_Process_Switch_input, CR_Hires_Fix_Process_Switch_output> {
    nameInComfy: "CR Hires Fix Process Switch"
}
export interface CR_Hires_Fix_Process_Switch_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    STRING: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Hires_Fix_Process_Switch_input {
    Input: Enum_CR_Hires_Fix_Process_Switch_Input
    latent_upscale?: _LATENT
    image_upscale?: _LATENT
}

// CR Index [🧩 Comfyroll Studio_🛠️ Utils_🔢 Index]
export interface CR_Index extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Index_input, CR_Index_output> {
    nameInComfy: "CR Index"
}
export interface CR_Index_output {
    INT: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Index_input {
    /** default=1 min=10000 max=10000 */
    index?: _INT
    print_to_console: Enum_SDXLPromptStyler_log_prompt
}

// CR Index Increment [🧩 Comfyroll Studio_🛠️ Utils_🔢 Index]
export interface CR_Index_Increment extends HasSingle_STRING, ComfyNode<CR_Index_Increment_input, CR_Index_Increment_output> {
    nameInComfy: "CR Index Increment"
}
export interface CR_Index_Increment_output {
    index: ComfyNodeOutput<'INT', 0>,
    interval: ComfyNodeOutput<'INT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Index_Increment_input {
    /** default=1 min=10000 max=10000 */
    index?: _INT
    /** default=1 min=10000 max=10000 */
    interval?: _INT
}

// CR Index Multiply [🧩 Comfyroll Studio_🛠️ Utils_🔢 Index]
export interface CR_Index_Multiply extends HasSingle_STRING, ComfyNode<CR_Index_Multiply_input, CR_Index_Multiply_output> {
    nameInComfy: "CR Index Multiply"
}
export interface CR_Index_Multiply_output {
    index: ComfyNodeOutput<'INT', 0>,
    factor: ComfyNodeOutput<'INT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Index_Multiply_input {
    /** default=1 min=10000 max=10000 */
    index?: _INT
    /** default=1 min=10000 max=10000 */
    factor?: _INT
}

// CR Index Reset [🧩 Comfyroll Studio_🛠️ Utils_🔢 Index]
export interface CR_Index_Reset extends HasSingle_STRING, ComfyNode<CR_Index_Reset_input, CR_Index_Reset_output> {
    nameInComfy: "CR Index Reset"
}
export interface CR_Index_Reset_output {
    index: ComfyNodeOutput<'INT', 0>,
    reset_to: ComfyNodeOutput<'INT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Index_Reset_input {
    /** default=1 min=10000 max=10000 */
    index?: _INT
    /** default=1 min=10000 max=10000 */
    reset_to?: _INT
}

// CR Trigger [🧩 Comfyroll Studio_🛠️ Utils_🔢 Index]
export interface CR_Trigger extends HasSingle_INT, HasSingle_BOOLEAN, HasSingle_STRING, ComfyNode<CR_Trigger_input, CR_Trigger_output> {
    nameInComfy: "CR Trigger"
}
export interface CR_Trigger_output {
    index: ComfyNodeOutput<'INT', 0>,
    trigger: ComfyNodeOutput<'BOOLEAN', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Trigger_input {
    /** default=0 min=9999 max=9999 step=1 */
    index?: _INT
    /** default=1 min=10000 max=10000 */
    trigger_value?: _INT
}

// CR String To Number [🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion]
export interface CR_String_To_Number extends HasSingle_INT, HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_String_To_Number_input, CR_String_To_Number_output> {
    nameInComfy: "CR String To Number"
}
export interface CR_String_To_Number_output {
    INT: ComfyNodeOutput<'INT', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_String_To_Number_input {
    /** default="text" */
    text?: _STRING
    round_integer: Enum_CR_String_To_Number_round_integer
}

// CR String To Combo [🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion]
export interface CR_String_To_Combo extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_String_To_Combo_input, CR_String_To_Combo_output> {
    nameInComfy: "CR String To Combo"
}
export interface CR_String_To_Combo_output {
    any: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_String_To_Combo_input {
    /** default="" */
    text?: _STRING
}

// CR Float To String [🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion]
export interface CR_Float_To_String extends ComfyNode<CR_Float_To_String_input, CR_Float_To_String_output> {
    nameInComfy: "CR Float To String"
}
export interface CR_Float_To_String_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Float_To_String_input {
    /** default=0 min=1000000 max=1000000 */
    float_?: _FLOAT
}

// CR Float To Integer [🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion]
export interface CR_Float_To_Integer extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Float_To_Integer_input, CR_Float_To_Integer_output> {
    nameInComfy: "CR Float To Integer"
}
export interface CR_Float_To_Integer_output {
    INT: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Float_To_Integer_input {
    /** default=0 */
    _float?: _FLOAT
}

// CR Integer To String [🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion]
export interface CR_Integer_To_String extends ComfyNode<CR_Integer_To_String_input, CR_Integer_To_String_output> {
    nameInComfy: "CR Integer To String"
}
export interface CR_Integer_To_String_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Integer_To_String_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    int_?: _INT
}

// CR String To Boolean [🧩 Comfyroll Studio_🛠️ Utils_🔧 Conversion]
export interface CR_String_To_Boolean extends HasSingle_BOOLEAN, HasSingle_STRING, ComfyNode<CR_String_To_Boolean_input, CR_String_To_Boolean_output> {
    nameInComfy: "CR String To Boolean"
}
export interface CR_String_To_Boolean_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_String_To_Boolean_input {
    /** default="" */
    text?: _STRING
}

// CR Random Hex Color [🧩 Comfyroll Studio_🛠️ Utils_🎲 Random]
export interface CR_Random_Hex_Color extends ComfyNode<CR_Random_Hex_Color_input, CR_Random_Hex_Color_output> {
    nameInComfy: "CR Random Hex Color"
}
export interface CR_Random_Hex_Color_output {
    hex_color1: ComfyNodeOutput<'STRING', 0>,
    hex_color2: ComfyNodeOutput<'STRING', 1>,
    hex_color3: ComfyNodeOutput<'STRING', 2>,
    hex_color4: ComfyNodeOutput<'STRING', 3>,
    show_help: ComfyNodeOutput<'STRING', 4>,
}
export interface CR_Random_Hex_Color_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// CR Random RGB [🧩 Comfyroll Studio_🛠️ Utils_🎲 Random]
export interface CR_Random_RGB extends ComfyNode<CR_Random_RGB_input, CR_Random_RGB_output> {
    nameInComfy: "CR Random RGB"
}
export interface CR_Random_RGB_output {
    rgb_1: ComfyNodeOutput<'STRING', 0>,
    rgb_2: ComfyNodeOutput<'STRING', 1>,
    rgb_3: ComfyNodeOutput<'STRING', 2>,
    rgb_4: ComfyNodeOutput<'STRING', 3>,
    show_help: ComfyNodeOutput<'STRING', 4>,
}
export interface CR_Random_RGB_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// CR Random Multiline Values [🧩 Comfyroll Studio_🛠️ Utils_🎲 Random]
export interface CR_Random_Multiline_Values extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Random_Multiline_Values_input, CR_Random_Multiline_Values_output> {
    nameInComfy: "CR Random Multiline Values"
}
export interface CR_Random_Multiline_Values_output {
    multiline_text: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Random_Multiline_Values_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    value_type: Enum_CR_Random_Multiline_Values_value_type
    /** default=5 min=2048 max=2048 */
    rows?: _INT
    /** default=5 min=1024 max=1024 */
    string_length?: _INT
    /** default="123ABC" */
    custom_values?: _STRING
    /** default="" */
    prepend_text?: _STRING
}

// CR Random Multiline Colors [🧩 Comfyroll Studio_🛠️ Utils_🎲 Random]
export interface CR_Random_Multiline_Colors extends ComfyNode<CR_Random_Multiline_Colors_input, CR_Random_Multiline_Colors_output> {
    nameInComfy: "CR Random Multiline Colors"
}
export interface CR_Random_Multiline_Colors_output {
    multiline_text: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Random_Multiline_Colors_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    value_type: Enum_CR_Random_Multiline_Colors_value_type
    /** default=5 min=2048 max=2048 */
    rows?: _INT
}

// CR Random RGB Gradient [🧩 Comfyroll Studio_🛠️ Utils_🎲 Random]
export interface CR_Random_RGB_Gradient extends ComfyNode<CR_Random_RGB_Gradient_input, CR_Random_RGB_Gradient_output> {
    nameInComfy: "CR Random RGB Gradient"
}
export interface CR_Random_RGB_Gradient_output {
    multiline_text: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Random_RGB_Gradient_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=5 min=2048 max=2048 */
    rows?: _INT
}

// CR Random Panel Codes [🧩 Comfyroll Studio_🛠️ Utils_🎲 Random]
export interface CR_Random_Panel_Codes extends ComfyNode<CR_Random_Panel_Codes_input, CR_Random_Panel_Codes_output> {
    nameInComfy: "CR Random Panel Codes"
}
export interface CR_Random_Panel_Codes_output {
    multiline_text: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Random_Panel_Codes_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=5 min=2048 max=2048 */
    rows?: _INT
    /** default=5 min=1024 max=1024 */
    string_length?: _INT
    /** default="123" */
    values?: _STRING
}

// CR Text [🧩 Comfyroll Studio_🛠️ Utils_🔤 Text]
export interface CR_Text extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Text_input, CR_Text_output> {
    nameInComfy: "CR Text"
}
export interface CR_Text_output {
    text: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_input {
    /** default="" */
    text?: _STRING
}

// CR Multiline Text [🧩 Comfyroll Studio_🛠️ Utils_🔤 Text]
export interface CR_Multiline_Text extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Multiline_Text_input, CR_Multiline_Text_output> {
    nameInComfy: "CR Multiline Text"
}
export interface CR_Multiline_Text_output {
    multiline_text: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Multiline_Text_input {
    /** default="" */
    text?: _STRING
    /** default=false */
    convert_from_csv?: _BOOLEAN
    /** default="'" */
    csv_quote_char?: _STRING
    /** default=false */
    remove_chars?: _BOOLEAN
    /** default="" */
    chars_to_remove?: _STRING
    /** default=false */
    split_string?: _BOOLEAN
}

// CR Split String [🧩 Comfyroll Studio_🛠️ Utils_🔤 Text]
export interface CR_Split_String extends HasSingle_STRING, ComfyNode<CR_Split_String_input, CR_Split_String_output> {
    nameInComfy: "CR Split String"
}
export interface CR_Split_String_output {
    string_1: ComfyNodeOutput<'$Star', 0>,
    string_2: ComfyNodeOutput<'$Star', 1>,
    string_3: ComfyNodeOutput<'$Star', 2>,
    string_4: ComfyNodeOutput<'$Star', 3>,
    show_help: ComfyNodeOutput<'STRING', 4>,
}
export interface CR_Split_String_input {
    /** default="text" */
    text?: _STRING
    /** default="," */
    delimiter?: _STRING
}

// CR Text Concatenate [🧩 Comfyroll Studio_🛠️ Utils_🔤 Text]
export interface CR_Text_Concatenate extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Text_Concatenate_input, CR_Text_Concatenate_output> {
    nameInComfy: "CR Text Concatenate"
}
export interface CR_Text_Concatenate_output {
    STRING: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_Concatenate_input {
    /** default="" */
    text1?: _STRING
    /** default="" */
    text2?: _STRING
    /** default="" */
    separator?: _STRING
}

// CR Text Replace [🧩 Comfyroll Studio_🛠️ Utils_🔤 Text]
export interface CR_Text_Replace extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Text_Replace_input, CR_Text_Replace_output> {
    nameInComfy: "CR Text Replace"
}
export interface CR_Text_Replace_output {
    STRING: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_Replace_input {
    /** default="" */
    text?: _STRING
    /** default="" */
    find1?: _STRING
    /** default="" */
    replace1?: _STRING
    /** default="" */
    find2?: _STRING
    /** default="" */
    replace2?: _STRING
    /** default="" */
    find3?: _STRING
    /** default="" */
    replace3?: _STRING
}

// CR Text Length [🧩 Comfyroll Studio_🛠️ Utils_🔤 Text]
export interface CR_Text_Length extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Text_Length_input, CR_Text_Length_output> {
    nameInComfy: "CR Text Length"
}
export interface CR_Text_Length_output {
    INT: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_Length_input {
    /** default="" */
    text?: _STRING
}

// CR Text Operation [🧩 Comfyroll Studio_🛠️ Utils_🔤 Text]
export interface CR_Text_Operation extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Text_Operation_input, CR_Text_Operation_output> {
    nameInComfy: "CR Text Operation"
}
export interface CR_Text_Operation_output {
    STRING: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_Operation_input {
    /** default="" */
    text?: _STRING
    operation: Enum_CR_Text_Operation_operation
}

// CR Text Blacklist [🧩 Comfyroll Studio_🛠️ Utils_🔤 Text]
export interface CR_Text_Blacklist extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Text_Blacklist_input, CR_Text_Blacklist_output> {
    nameInComfy: "CR Text Blacklist"
}
export interface CR_Text_Blacklist_output {
    STRING: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_Blacklist_input {
    /** default="" */
    text?: _STRING
    /** default="" */
    blacklist_words?: _STRING
    /** default="" */
    replacement_text?: _STRING
}

// CR Save Text To File [🧩 Comfyroll Studio_🛠️ Utils_🔤 Text]
export interface CR_Save_Text_To_File extends HasSingle_STRING, ComfyNode<CR_Save_Text_To_File_input, CR_Save_Text_To_File_output> {
    nameInComfy: "CR Save Text To File"
}
export interface CR_Save_Text_To_File_output {
    show_help: ComfyNodeOutput<'STRING', 0>,
}
export interface CR_Save_Text_To_File_input {
    /** default="" */
    multiline_text?: _STRING
    /** default="" */
    output_file_path?: _STRING
    /** default="" */
    file_name?: _STRING
    file_extension: Enum_CR_Load_Text_List_file_extension
}

// CR Set Value On Boolean [🧩 Comfyroll Studio_🛠️ Utils_🔀 Conditional]
export interface CR_Set_Value_On_Boolean extends HasSingle_INT, HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Set_Value_On_Boolean_input, CR_Set_Value_On_Boolean_output> {
    nameInComfy: "CR Set Value On Boolean"
}
export interface CR_Set_Value_On_Boolean_output {
    INT: ComfyNodeOutput<'INT', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Set_Value_On_Boolean_input {
    /** default=true */
    boolean?: _BOOLEAN
    /** default=1 min=18446744073709552000 max=18446744073709552000 */
    value_if_true?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    value_if_false?: _FLOAT
}

// CR Set Value On Binary [🧩 Comfyroll Studio_🛠️ Utils_🔀 Conditional]
export interface CR_Set_Value_On_Binary extends HasSingle_INT, HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Set_Value_On_Binary_input, CR_Set_Value_On_Binary_output> {
    nameInComfy: "CR Set Value On Binary"
}
export interface CR_Set_Value_On_Binary_output {
    INT: ComfyNodeOutput<'INT', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Set_Value_On_Binary_input {
    /** default=1 min=1 max=1 */
    binary?: _INT
    /** default=1 min=18446744073709552000 max=18446744073709552000 */
    value_if_1?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    value_if_0?: _FLOAT
}

// CR Set Value on String [🧩 Comfyroll Studio_🛠️ Utils_🔀 Conditional]
export interface CR_Set_Value_on_String extends HasSingle_$Star, HasSingle_BOOLEAN, HasSingle_STRING, ComfyNode<CR_Set_Value_on_String_input, CR_Set_Value_on_String_output> {
    nameInComfy: "CR Set Value on String"
}
export interface CR_Set_Value_on_String_output {
    STRING: ComfyNodeOutput<'$Star', 0>,
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Set_Value_on_String_input {
    /** default="" */
    text?: _STRING
    /** default="" */
    test_string?: _STRING
    /** default="" */
    value_if_true?: _STRING
    /** default="" */
    value_if_false?: _STRING
}

// CR Set Switch From String [🧩 Comfyroll Studio_🛠️ Utils_🔀 Conditional]
export interface CR_Set_Switch_From_String extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Set_Switch_From_String_input, CR_Set_Switch_From_String_output> {
    nameInComfy: "CR Set Switch From String"
}
export interface CR_Set_Switch_From_String_output {
    switch: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Set_Switch_From_String_input {
    /** default="" */
    text?: _STRING
    /** default="" */
    switch_1?: _STRING
    /** default="" */
    switch_2?: _STRING
    /** default="" */
    switch_3?: _STRING
    /** default="" */
    switch_4?: _STRING
}

// CR Value [🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other]
export interface CR_Value extends HasSingle_FLOAT, HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Value_input, CR_Value_output> {
    nameInComfy: "CR Value"
}
export interface CR_Value_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Value_input {
    /** default=1 */
    value?: _FLOAT
}

// CR Integer Multiple [🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other]
export interface CR_Integer_Multiple extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Integer_Multiple_input, CR_Integer_Multiple_output> {
    nameInComfy: "CR Integer Multiple"
}
export interface CR_Integer_Multiple_output {
    INT: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Integer_Multiple_input {
    /** default=1 min=18446744073709552000 max=18446744073709552000 */
    integer?: _INT
    /** default=8 min=18446744073709552000 max=18446744073709552000 */
    multiple?: _FLOAT
}

// CR Clamp Value [🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other]
export interface CR_Clamp_Value extends HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Clamp_Value_input, CR_Clamp_Value_output> {
    nameInComfy: "CR Clamp Value"
}
export interface CR_Clamp_Value_output {
    a: ComfyNodeOutput<'FLOAT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Clamp_Value_input {
    /** default=1 min=18446744073709552000 max=18446744073709552000 */
    a?: _FLOAT
    /** default=1 min=18446744073709552000 max=18446744073709552000 */
    range_min?: _FLOAT
    /** default=1 min=18446744073709552000 max=18446744073709552000 */
    range_max?: _FLOAT
}

// CR Math Operation [🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other]
export interface CR_Math_Operation extends HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Math_Operation_input, CR_Math_Operation_output> {
    nameInComfy: "CR Math Operation"
}
export interface CR_Math_Operation_output {
    a: ComfyNodeOutput<'FLOAT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Math_Operation_input {
    /** default=1 */
    a?: _FLOAT
    operation: Enum_CR_Math_Operation_operation
    /** default=2 min=10 max=10 */
    decimal_places?: _INT
}

// CR Get Parameter From Prompt [🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other]
export interface CR_Get_Parameter_From_Prompt extends HasSingle_$Star, HasSingle_FLOAT, HasSingle_BOOLEAN, ComfyNode<CR_Get_Parameter_From_Prompt_input, CR_Get_Parameter_From_Prompt_output> {
    nameInComfy: "CR Get Parameter From Prompt"
}
export interface CR_Get_Parameter_From_Prompt_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
    text: ComfyNodeOutput<'$Star', 1>,
    float: ComfyNodeOutput<'FLOAT', 2>,
    boolean: ComfyNodeOutput<'BOOLEAN', 3>,
    show_help: ComfyNodeOutput<'STRING', 4>,
}
export interface CR_Get_Parameter_From_Prompt_input {
    /** default="prompt" */
    prompt?: _STRING
    /** default="!findme" */
    search_string?: _STRING
}

// CR Select Resize Method [🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other]
export interface CR_Select_Resize_Method extends HasSingle_$Star, HasSingle_STRING, ComfyNode<CR_Select_Resize_Method_input, CR_Select_Resize_Method_output> {
    nameInComfy: "CR Select Resize Method"
}
export interface CR_Select_Resize_Method_output {
    method: ComfyNodeOutput<'$Star', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Select_Resize_Method_input {
    method: Enum_CR_Select_Resize_Method_method
}

// CR Select ISO Size [🧩 Comfyroll Studio_🛠️ Utils_⚙️ Other]
export interface CR_Select_ISO_Size extends HasSingle_STRING, ComfyNode<CR_Select_ISO_Size_input, CR_Select_ISO_Size_output> {
    nameInComfy: "CR Select ISO Size"
}
export interface CR_Select_ISO_Size_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Select_ISO_Size_input {
    iso_size: Enum_CR_Select_ISO_Size_iso_size
}

// CR Simple Schedule [🧩 Comfyroll Studio_🎥 Animation_📋 Schedule]
export interface CR_Simple_Schedule extends HasSingle_SCHEDULE, HasSingle_STRING, ComfyNode<CR_Simple_Schedule_input, CR_Simple_Schedule_output> {
    nameInComfy: "CR Simple Schedule"
}
export interface CR_Simple_Schedule_output {
    SCHEDULE: ComfyNodeOutput<'SCHEDULE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Schedule_input {
    /** default="frame_number, item_alias, [attr_value1, attr_value2]" */
    schedule?: _STRING
    schedule_type: Enum_CR_Simple_Schedule_schedule_type
    /** default="" */
    schedule_alias?: _STRING
    schedule_format: Enum_CR_Simple_Schedule_schedule_format
}

// CR Central Schedule [🧩 Comfyroll Studio_🎥 Animation_📋 Schedule]
export interface CR_Central_Schedule extends HasSingle_SCHEDULE, HasSingle_STRING, ComfyNode<CR_Central_Schedule_input, CR_Central_Schedule_output> {
    nameInComfy: "CR Central Schedule"
}
export interface CR_Central_Schedule_output {
    SCHEDULE: ComfyNodeOutput<'SCHEDULE', 0>,
    show_text: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Central_Schedule_input {
    /** default="schedule" */
    schedule_1?: _STRING
    schedule_type1: Enum_CR_Simple_Schedule_schedule_type
    /** default="" */
    schedule_alias1?: _STRING
    /** default="schedule" */
    schedule_2?: _STRING
    schedule_type2: Enum_CR_Simple_Schedule_schedule_type
    /** default="" */
    schedule_alias2?: _STRING
    /** default="schedule" */
    schedule_3?: _STRING
    schedule_type3: Enum_CR_Simple_Schedule_schedule_type
    /** default="" */
    schedule_alias3?: _STRING
    schedule_format: Enum_CR_Simple_Schedule_schedule_format
    schedule?: _SCHEDULE
}

// CR Combine Schedules [🧩 Comfyroll Studio_🎥 Animation_📋 Schedule]
export interface CR_Combine_Schedules extends HasSingle_SCHEDULE, HasSingle_STRING, ComfyNode<CR_Combine_Schedules_input, CR_Combine_Schedules_output> {
    nameInComfy: "CR Combine Schedules"
}
export interface CR_Combine_Schedules_output {
    SCHEDULE: ComfyNodeOutput<'SCHEDULE', 0>,
    show_text: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Combine_Schedules_input {
    schedule_1?: _SCHEDULE
    schedule_2?: _SCHEDULE
    schedule_3?: _SCHEDULE
    schedule_4?: _SCHEDULE
}

// CR Output Schedule To File [🧩 Comfyroll Studio_🎥 Animation_📋 Schedule]
export interface CR_Output_Schedule_To_File extends ComfyNode<CR_Output_Schedule_To_File_input, CR_Output_Schedule_To_File_output> {
    nameInComfy: "CR Output Schedule To File"
}
export interface CR_Output_Schedule_To_File_output {
}
export interface CR_Output_Schedule_To_File_input {
    /** default="" */
    output_file_path?: _STRING
    /** default="" */
    file_name?: _STRING
    file_extension: Enum_CR_Load_Text_List_file_extension
    schedule: _SCHEDULE
}

// CR Load Schedule From File [🧩 Comfyroll Studio_🎥 Animation_📋 Schedule]
export interface CR_Load_Schedule_From_File extends HasSingle_SCHEDULE, HasSingle_STRING, ComfyNode<CR_Load_Schedule_From_File_input, CR_Load_Schedule_From_File_output> {
    nameInComfy: "CR Load Schedule From File"
}
export interface CR_Load_Schedule_From_File_output {
    SCHEDULE: ComfyNodeOutput<'SCHEDULE', 0>,
    show_text: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Load_Schedule_From_File_input {
    /** default="" */
    input_file_path?: _STRING
    /** default="" */
    file_name?: _STRING
    file_extension: Enum_CR_Load_Text_List_file_extension
}

// CR Schedule Input Switch [🧩 Comfyroll Studio_🎥 Animation_📋 Schedule]
export interface CR_Schedule_Input_Switch extends HasSingle_SCHEDULE, HasSingle_STRING, ComfyNode<CR_Schedule_Input_Switch_input, CR_Schedule_Input_Switch_output> {
    nameInComfy: "CR Schedule Input Switch"
}
export interface CR_Schedule_Input_Switch_output {
    SCHEDULE: ComfyNodeOutput<'SCHEDULE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Schedule_Input_Switch_input {
    /** default=1 min=2 max=2 */
    Input?: _INT
    schedule1: _SCHEDULE
    schedule2: _SCHEDULE
}

// CR Bit Schedule [🧩 Comfyroll Studio_🎥 Animation_📋 Schedule]
export interface CR_Bit_Schedule extends ComfyNode<CR_Bit_Schedule_input, CR_Bit_Schedule_output> {
    nameInComfy: "CR Bit Schedule"
}
export interface CR_Bit_Schedule_output {
    SCHEDULE: ComfyNodeOutput<'STRING', 0>,
    show_text: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Bit_Schedule_input {
    /** default="" */
    binary_string?: _STRING
    /** default=1 min=99999 max=99999 */
    interval?: _INT
    /** default=1 min=99999 max=99999 */
    loops?: _INT
}

// CR Simple Value Scheduler [🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers]
export interface CR_Simple_Value_Scheduler extends HasSingle_INT, HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Simple_Value_Scheduler_input, CR_Simple_Value_Scheduler_output> {
    nameInComfy: "CR Simple Value Scheduler"
}
export interface CR_Simple_Value_Scheduler_output {
    INT: ComfyNodeOutput<'INT', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Simple_Value_Scheduler_input {
    /** default="frame_number, value" */
    schedule?: _STRING
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// CR Simple Text Scheduler [🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers]
export interface CR_Simple_Text_Scheduler extends ComfyNode<CR_Simple_Text_Scheduler_input, CR_Simple_Text_Scheduler_output> {
    nameInComfy: "CR Simple Text Scheduler"
}
export interface CR_Simple_Text_Scheduler_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Text_Scheduler_input {
    /** default="frame_number, text" */
    schedule?: _STRING
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// CR Value Scheduler [🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers]
export interface CR_Value_Scheduler extends HasSingle_INT, HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Value_Scheduler_input, CR_Value_Scheduler_output> {
    nameInComfy: "CR Value Scheduler"
}
export interface CR_Value_Scheduler_output {
    INT: ComfyNodeOutput<'INT', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Value_Scheduler_input {
    mode: Enum_CR_Value_Scheduler_mode
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    /** default="" */
    schedule_alias?: _STRING
    /** default=1 min=9999 max=9999 step=0.01 */
    default_value?: _FLOAT
    schedule_format: Enum_CR_Simple_Schedule_schedule_format
    schedule?: _SCHEDULE
}

// CR Text Scheduler [🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers]
export interface CR_Text_Scheduler extends ComfyNode<CR_Text_Scheduler_input, CR_Text_Scheduler_output> {
    nameInComfy: "CR Text Scheduler"
}
export interface CR_Text_Scheduler_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_Scheduler_input {
    mode: Enum_CR_Text_Scheduler_mode
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    /** default="" */
    schedule_alias?: _STRING
    /** default="default text" */
    default_text?: _STRING
    schedule_format: Enum_CR_Simple_Schedule_schedule_format
    schedule?: _SCHEDULE
}

// CR Load Scheduled Models [🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers]
export interface CR_Load_Scheduled_Models extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_STRING, ComfyNode<CR_Load_Scheduled_Models_input, CR_Load_Scheduled_Models_output> {
    nameInComfy: "CR Load Scheduled Models"
}
export interface CR_Load_Scheduled_Models_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    show_help: ComfyNodeOutput<'STRING', 3>,
}
export interface CR_Load_Scheduled_Models_input {
    mode: Enum_CR_Load_Scheduled_Models_mode
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    /** default="" */
    schedule_alias?: _STRING
    default_model: Enum_CheckpointLoaderSimple_ckpt_name
    schedule_format: Enum_CR_Simple_Schedule_schedule_format
    model_list?: _MODEL_LIST
    schedule?: _SCHEDULE
}

// CR Load Scheduled LoRAs [🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers]
export interface CR_Load_Scheduled_LoRAs extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<CR_Load_Scheduled_LoRAs_input, CR_Load_Scheduled_LoRAs_output> {
    nameInComfy: "CR Load Scheduled LoRAs"
}
export interface CR_Load_Scheduled_LoRAs_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Load_Scheduled_LoRAs_input {
    mode: Enum_CR_Load_Scheduled_LoRAs_mode
    model: _MODEL
    clip: _CLIP
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    /** default="" */
    schedule_alias?: _STRING
    default_lora: Enum_LoraLoader_lora_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength_clip?: _FLOAT
    schedule_format: Enum_CR_Simple_Schedule_schedule_format
    lora_list?: _LORA_LIST
    schedule?: _SCHEDULE
}

// CR Prompt Scheduler [🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers]
export interface CR_Prompt_Scheduler extends HasSingle_FLOAT, ComfyNode<CR_Prompt_Scheduler_input, CR_Prompt_Scheduler_output> {
    nameInComfy: "CR Prompt Scheduler"
}
export interface CR_Prompt_Scheduler_output {
    current_prompt: ComfyNodeOutput<'STRING', 0>,
    next_prompt: ComfyNodeOutput<'STRING', 1>,
    weight: ComfyNodeOutput<'FLOAT', 2>,
    show_help: ComfyNodeOutput<'STRING', 3>,
}
export interface CR_Prompt_Scheduler_input {
    mode: Enum_CR_Prompt_Scheduler_mode
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    /** default="default prompt" */
    default_prompt?: _STRING
    schedule_format: Enum_CR_Simple_Schedule_schedule_format
    interpolate_prompt: Enum_SDXLPromptStyler_log_prompt
    schedule?: _SCHEDULE
    /** */
    schedule_alias?: _STRING
    /** default="keyframe list" */
    keyframe_list?: _STRING
    /** default="prepend text" */
    prepend_text?: _STRING
    /** default="append text" */
    append_text?: _STRING
}

// CR Simple Prompt Scheduler [🧩 Comfyroll Studio_🎥 Animation_📑 Schedulers]
export interface CR_Simple_Prompt_Scheduler extends HasSingle_FLOAT, ComfyNode<CR_Simple_Prompt_Scheduler_input, CR_Simple_Prompt_Scheduler_output> {
    nameInComfy: "CR Simple Prompt Scheduler"
}
export interface CR_Simple_Prompt_Scheduler_output {
    current_prompt: ComfyNodeOutput<'STRING', 0>,
    next_prompt: ComfyNodeOutput<'STRING', 1>,
    weight: ComfyNodeOutput<'FLOAT', 2>,
    show_help: ComfyNodeOutput<'STRING', 3>,
}
export interface CR_Simple_Prompt_Scheduler_input {
    /** default="frame_number, text" */
    keyframe_list?: _STRING
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    keyframe_format: Enum_CR_Simple_Schedule_schedule_format
}

// CR Keyframe List [🧩 Comfyroll Studio_🎥 Animation_📝 Prompt]
export interface CR_Keyframe_List extends ComfyNode<CR_Keyframe_List_input, CR_Keyframe_List_output> {
    nameInComfy: "CR Keyframe List"
}
export interface CR_Keyframe_List_output {
    keyframe_list: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Keyframe_List_input {
    /** default="keyframes" */
    keyframe_list?: _STRING
    keyframe_format: Enum_CR_Simple_Schedule_schedule_format
}

// CR Encode Scheduled Prompts [🧩 Comfyroll Studio_🎥 Animation_📝 Prompt]
export interface CR_Encode_Scheduled_Prompts extends HasSingle_CONDITIONING, HasSingle_STRING, ComfyNode<CR_Encode_Scheduled_Prompts_input, CR_Encode_Scheduled_Prompts_output> {
    nameInComfy: "CR Encode Scheduled Prompts"
}
export interface CR_Encode_Scheduled_Prompts_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Encode_Scheduled_Prompts_input {
    clip: _CLIP
    /** */
    current_prompt: _STRING
    /** */
    next_prompt: _STRING
    /** default=0 min=9999 max=9999 step=0.01 */
    weight?: _FLOAT
}

// CR Gradient Float [🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate]
export interface CR_Gradient_Float extends HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Gradient_Float_input, CR_Gradient_Float_output> {
    nameInComfy: "CR Gradient Float"
}
export interface CR_Gradient_Float_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Gradient_Float_input {
    /** default=1 min=9999 max=9999 step=0.01 */
    start_value?: _FLOAT
    /** default=1 min=9999 max=9999 step=0.01 */
    end_value?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    start_frame?: _INT
    /** default=1 min=9999 max=9999 step=1 */
    frame_duration?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    gradient_profile: Enum_CR_XY_Interpolate_gradient_profile
}

// CR Gradient Integer [🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate]
export interface CR_Gradient_Integer extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Gradient_Integer_input, CR_Gradient_Integer_output> {
    nameInComfy: "CR Gradient Integer"
}
export interface CR_Gradient_Integer_output {
    INT: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Gradient_Integer_input {
    /** default=1 min=9999 max=9999 step=1 */
    start_value?: _INT
    /** default=1 min=9999 max=9999 step=1 */
    end_value?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    start_frame?: _INT
    /** default=1 min=9999 max=9999 step=1 */
    frame_duration?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    gradient_profile: Enum_CR_XY_Interpolate_gradient_profile
}

// CR Increment Float [🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate]
export interface CR_Increment_Float extends HasSingle_FLOAT, HasSingle_STRING, ComfyNode<CR_Increment_Float_input, CR_Increment_Float_output> {
    nameInComfy: "CR Increment Float"
}
export interface CR_Increment_Float_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Increment_Float_input {
    /** default=1 min=9999 max=9999 step=0.001 */
    start_value?: _FLOAT
    /** default=0.1 min=9999 max=9999 step=0.001 */
    step?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    start_frame?: _INT
    /** default=1 min=9999 max=9999 step=1 */
    frame_duration?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// CR Increment Integer [🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate]
export interface CR_Increment_Integer extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Increment_Integer_input, CR_Increment_Integer_output> {
    nameInComfy: "CR Increment Integer"
}
export interface CR_Increment_Integer_output {
    INT: ComfyNodeOutput<'INT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Increment_Integer_input {
    /** default=1 min=9999 max=9999 step=1 */
    start_value?: _INT
    /** default=1 min=9999 max=9999 step=1 */
    step?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    start_frame?: _INT
    /** default=1 min=9999 max=9999 step=1 */
    frame_duration?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// CR Interpolate Latents [🧩 Comfyroll Studio_🎥 Animation_🔢 Interpolate]
export interface CR_Interpolate_Latents extends HasSingle_LATENT, HasSingle_STRING, ComfyNode<CR_Interpolate_Latents_input, CR_Interpolate_Latents_output> {
    nameInComfy: "CR Interpolate Latents"
}
export interface CR_Interpolate_Latents_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Interpolate_Latents_input {
    latent1: _LATENT
    latent2: _LATENT
    /** default=0.5 min=1 max=1 step=0.01 */
    weight?: _FLOAT
    method: Enum_CR_Interpolate_Latents_method
}

// CR Debatch Frames [🧩 Comfyroll Studio_🎥 Animation_🛠️ Utils]
export interface CR_Debatch_Frames extends HasSingle_IMAGE, ComfyNode<CR_Debatch_Frames_input, CR_Debatch_Frames_output> {
    nameInComfy: "CR Debatch Frames"
}
export interface CR_Debatch_Frames_output {
    debatched_frames: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CR_Debatch_Frames_input {
    frames: _IMAGE
}

// CR Current Frame [🧩 Comfyroll Studio_🎥 Animation_🛠️ Utils]
export interface CR_Current_Frame extends HasSingle_INT, ComfyNode<CR_Current_Frame_input, CR_Current_Frame_output> {
    nameInComfy: "CR Current Frame"
}
export interface CR_Current_Frame_output {
    index: ComfyNodeOutput<'INT', 0>,
}
export interface CR_Current_Frame_input {
    /** default=1 min=10000 max=10000 */
    index?: _INT
    print_to_console: Enum_SDXLPromptStyler_log_prompt
}

// CR Load Animation Frames [🧩 Comfyroll Studio_🎥 Animation_⌨️ IO]
export interface CR_Load_Animation_Frames extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Load_Animation_Frames_input, CR_Load_Animation_Frames_output> {
    nameInComfy: "CR Load Animation Frames"
}
export interface CR_Load_Animation_Frames_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Load_Animation_Frames_input {
    image_sequence_folder: Enum_CR_Load_Animation_Frames_image_sequence_folder
    /** default=1 min=10000 max=10000 */
    start_index?: _INT
    /** default=1 min=10000 max=10000 */
    max_frames?: _INT
}

// CR Load Flow Frames [🧩 Comfyroll Studio_🎥 Animation_⌨️ IO]
export interface CR_Load_Flow_Frames extends HasSingle_INT, HasSingle_STRING, ComfyNode<CR_Load_Flow_Frames_input, CR_Load_Flow_Frames_output> {
    nameInComfy: "CR Load Flow Frames"
}
export interface CR_Load_Flow_Frames_output {
    current_image: ComfyNodeOutput<'IMAGE', 0>,
    previous_image: ComfyNodeOutput<'IMAGE', 1>,
    current_frame: ComfyNodeOutput<'INT', 2>,
    show_help: ComfyNodeOutput<'STRING', 3>,
}
export interface CR_Load_Flow_Frames_input {
    input_folder: Enum_CR_Load_Flow_Frames_input_folder
    sort_by: Enum_CR_Load_Flow_Frames_sort_by
    /** default=0 min=10000 max=10000 */
    current_frame?: _INT
    /** default=0 min=10000 max=10000 */
    skip_start_frames?: _INT
    /** default="" */
    input_path?: _STRING
    /** default="*.png" */
    file_pattern?: _STRING
}

// CR Output Flow Frames [🧩 Comfyroll Studio_🎥 Animation_⌨️ IO]
export interface CR_Output_Flow_Frames extends ComfyNode<CR_Output_Flow_Frames_input, CR_Output_Flow_Frames_output> {
    nameInComfy: "CR Output Flow Frames"
}
export interface CR_Output_Flow_Frames_output {
}
export interface CR_Output_Flow_Frames_input {
    output_folder: Enum_CR_XY_From_Folder_image_folder
    current_image: _IMAGE
    /** default="CR" */
    filename_prefix?: _STRING
    /** default=0 min=9999999 max=9999999 */
    current_frame?: _INT
    interpolated_img?: _IMAGE
    /** default="" */
    output_path?: _STRING
}

// CR Prompt List Keyframes [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Prompt_List_Keyframes extends ComfyNode<CR_Prompt_List_Keyframes_input, CR_Prompt_List_Keyframes_output> {
    nameInComfy: "CR Prompt List Keyframes"
}
export interface CR_Prompt_List_Keyframes_output {
    keyframe_list: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Prompt_List_Keyframes_input {
    prompt_list: _PROMPT_LIST
    keyframe_format: Enum_CR_Prompt_List_Keyframes_keyframe_format
}

// CR Simple Prompt List [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Simple_Prompt_List extends HasSingle_SIMPLE_PROMPT_LIST, HasSingle_STRING, ComfyNode<CR_Simple_Prompt_List_input, CR_Simple_Prompt_List_output> {
    nameInComfy: "CR Simple Prompt List"
}
export interface CR_Simple_Prompt_List_output {
    SIMPLE_PROMPT_LIST: ComfyNodeOutput<'SIMPLE_PROMPT_LIST', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Prompt_List_input {
    /** default="prompt" */
    prompt_1?: _STRING
    /** default="prompt" */
    prompt_2?: _STRING
    /** default="prompt" */
    prompt_3?: _STRING
    /** default="prompt" */
    prompt_4?: _STRING
    /** default="prompt" */
    prompt_5?: _STRING
    simple_prompt_list?: _SIMPLE_PROMPT_LIST
}

// CR Simple Prompt List Keyframes [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Simple_Prompt_List_Keyframes extends ComfyNode<CR_Simple_Prompt_List_Keyframes_input, CR_Simple_Prompt_List_Keyframes_output> {
    nameInComfy: "CR Simple Prompt List Keyframes"
}
export interface CR_Simple_Prompt_List_Keyframes_output {
    keyframe_list: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Simple_Prompt_List_Keyframes_input {
    simple_prompt_list: _SIMPLE_PROMPT_LIST
    /** default=30 min=999 max=999 step=1 */
    keyframe_interval?: _INT
    /** default=1 min=1000 max=1000 */
    loops?: _INT
    transition_type: Enum_CR_Simple_Prompt_List_Keyframes_transition_type
    transition_speed: Enum_CR_Simple_Prompt_List_Keyframes_transition_type
    transition_profile: Enum_CR_Simple_Prompt_List_Keyframes_transition_type
    keyframe_format: Enum_CR_Prompt_List_Keyframes_keyframe_format
}

// CR Cycle Models [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Cycle_Models extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_STRING, ComfyNode<CR_Cycle_Models_input, CR_Cycle_Models_output> {
    nameInComfy: "CR Cycle Models"
}
export interface CR_Cycle_Models_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    show_help: ComfyNodeOutput<'STRING', 3>,
}
export interface CR_Cycle_Models_input {
    mode: Enum_CR_Cycle_Models_mode
    model: _MODEL
    clip: _CLIP
    model_list: _MODEL_LIST
    /** default=30 min=999 max=999 step=1 */
    frame_interval?: _INT
    /** default=1 min=1000 max=1000 */
    loops?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// CR Cycle LoRAs [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Cycle_LoRAs extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<CR_Cycle_LoRAs_input, CR_Cycle_LoRAs_output> {
    nameInComfy: "CR Cycle LoRAs"
}
export interface CR_Cycle_LoRAs_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    show_help: ComfyNodeOutput<'STRING', 2>,
}
export interface CR_Cycle_LoRAs_input {
    mode: Enum_CR_Cycle_Models_mode
    model: _MODEL
    clip: _CLIP
    lora_list: _LORA_LIST
    /** default=30 min=999 max=999 step=1 */
    frame_interval?: _INT
    /** default=1 min=1000 max=1000 */
    loops?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// CR Cycle Text [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Cycle_Text extends ComfyNode<CR_Cycle_Text_input, CR_Cycle_Text_output> {
    nameInComfy: "CR Cycle Text"
}
export interface CR_Cycle_Text_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Cycle_Text_input {
    mode: Enum_CR_Cycle_Text_mode
    text_list: _TEXT_LIST
    /** default=30 min=999 max=999 step=1 */
    frame_interval?: _INT
    /** default=1 min=1000 max=1000 */
    loops?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// CR Cycle Text Simple [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Cycle_Text_Simple extends ComfyNode<CR_Cycle_Text_Simple_input, CR_Cycle_Text_Simple_output> {
    nameInComfy: "CR Cycle Text Simple"
}
export interface CR_Cycle_Text_Simple_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Cycle_Text_Simple_input {
    mode: Enum_CR_Cycle_Text_mode
    /** default=30 min=999 max=999 step=1 */
    frame_interval?: _INT
    /** default=1 min=1000 max=1000 */
    loops?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    /** default="" */
    text_1?: _STRING
    /** default="" */
    text_2?: _STRING
    /** default="" */
    text_3?: _STRING
    /** default="" */
    text_4?: _STRING
    /** default="" */
    text_5?: _STRING
    text_list_simple?: _TEXT_LIST_SIMPLE
}

// CR Cycle Images [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Cycle_Images extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Cycle_Images_input, CR_Cycle_Images_output> {
    nameInComfy: "CR Cycle Images"
}
export interface CR_Cycle_Images_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Cycle_Images_input {
    mode: Enum_CR_Cycle_Text_mode
    image_list: _IMAGE_LIST
    /** default=30 min=999 max=999 step=1 */
    frame_interval?: _INT
    /** default=1 min=1000 max=1000 */
    loops?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// CR Cycle Images Simple [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Cycle_Images_Simple extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<CR_Cycle_Images_Simple_input, CR_Cycle_Images_Simple_output> {
    nameInComfy: "CR Cycle Images Simple"
}
export interface CR_Cycle_Images_Simple_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Cycle_Images_Simple_input {
    mode: Enum_CR_Cycle_Text_mode
    /** default=30 min=999 max=999 step=1 */
    frame_interval?: _INT
    /** default=1 min=1000 max=1000 */
    loops?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    current_frame?: _INT
    image_1?: _IMAGE
    image_2?: _IMAGE
    image_3?: _IMAGE
    image_4?: _IMAGE
    image_5?: _IMAGE
    image_list_simple?: _IMAGE_LIST_SIMPLE
}

// CR Model List [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Model_List extends HasSingle_MODEL_LIST, HasSingle_STRING, ComfyNode<CR_Model_List_input, CR_Model_List_output> {
    nameInComfy: "CR Model List"
}
export interface CR_Model_List_output {
    MODEL_LIST: ComfyNodeOutput<'MODEL_LIST', 0>,
    show_text: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Model_List_input {
    ckpt_name1: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default="" */
    alias1?: _STRING
    ckpt_name2: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default="" */
    alias2?: _STRING
    ckpt_name3: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default="" */
    alias3?: _STRING
    ckpt_name4: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default="" */
    alias4?: _STRING
    ckpt_name5: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default="" */
    alias5?: _STRING
    model_list?: _MODEL_LIST
}

// CR LoRA List [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_LoRA_List extends HasSingle_LORA_LIST, HasSingle_STRING, ComfyNode<CR_LoRA_List_input, CR_LoRA_List_output> {
    nameInComfy: "CR LoRA List"
}
export interface CR_LoRA_List_output {
    LORA_LIST: ComfyNodeOutput<'LORA_LIST', 0>,
    show_text: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_LoRA_List_input {
    lora_name1: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default="" */
    alias1?: _STRING
    /** default=1 min=10 max=10 step=0.01 */
    model_strength_1?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_strength_1?: _FLOAT
    lora_name2: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default="" */
    alias2?: _STRING
    /** default=1 min=10 max=10 step=0.01 */
    model_strength_2?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_strength_2?: _FLOAT
    lora_name3: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default="" */
    alias3?: _STRING
    /** default=1 min=10 max=10 step=0.01 */
    model_strength_3?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    clip_strength_3?: _FLOAT
    lora_list?: _lora_LIST
}

// CR Text List Simple [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Text_List_Simple extends HasSingle_TEXT_LIST_SIMPLE, HasSingle_STRING, ComfyNode<CR_Text_List_Simple_input, CR_Text_List_Simple_output> {
    nameInComfy: "CR Text List Simple"
}
export interface CR_Text_List_Simple_output {
    TEXT_LIST_SIMPLE: ComfyNodeOutput<'TEXT_LIST_SIMPLE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Text_List_Simple_input {
    /** default="" */
    text_1?: _STRING
    /** default="" */
    text_2?: _STRING
    /** default="" */
    text_3?: _STRING
    /** default="" */
    text_4?: _STRING
    /** default="" */
    text_5?: _STRING
    text_list_simple?: _TEXT_LIST_SIMPLE
}

// CR Image List [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Image_List extends HasSingle_IMAGE_LIST, HasSingle_STRING, ComfyNode<CR_Image_List_input, CR_Image_List_output> {
    nameInComfy: "CR Image List"
}
export interface CR_Image_List_output {
    IMAGE_LIST: ComfyNodeOutput<'IMAGE_LIST', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Image_List_input {
    image_1?: _IMAGE
    /** default="" */
    alias1?: _STRING
    image_2?: _IMAGE
    /** default="" */
    alias2?: _STRING
    image_3?: _IMAGE
    /** default="" */
    alias3?: _STRING
    image_4?: _IMAGE
    /** default="" */
    alias4?: _STRING
    image_5?: _IMAGE
    /** default="" */
    alias5?: _STRING
    image_list?: _image_LIST
}

// CR Image List Simple [🧩 Comfyroll Studio_🎥 Animation_💀 Legacy]
export interface CR_Image_List_Simple extends HasSingle_IMAGE_LIST_SIMPLE, HasSingle_STRING, ComfyNode<CR_Image_List_Simple_input, CR_Image_List_Simple_output> {
    nameInComfy: "CR Image List Simple"
}
export interface CR_Image_List_Simple_output {
    IMAGE_LIST_SIMPLE: ComfyNodeOutput<'IMAGE_LIST_SIMPLE', 0>,
    show_help: ComfyNodeOutput<'STRING', 1>,
}
export interface CR_Image_List_Simple_input {
    image_1?: _IMAGE
    image_2?: _IMAGE
    image_3?: _IMAGE
    image_4?: _IMAGE
    image_5?: _IMAGE
    image_list_simple?: _IMAGE_LIST_SIMPLE
}

// AnimeFace_SemSegPreprocessor [ControlNet Preprocessors_Semantic Segmentation]
export interface AnimeFace$_SemSegPreprocessor extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<AnimeFace$_SemSegPreprocessor_input, AnimeFace$_SemSegPreprocessor_output> {
    nameInComfy: "AnimeFace_SemSegPreprocessor"
}
export interface AnimeFace$_SemSegPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    "ABG_CHARACTER_MASK$_$1MASK$2": ComfyNodeOutput<'MASK', 1>,
}
export interface AnimeFace$_SemSegPreprocessor_input {
    image: _IMAGE
    /** default=true */
    remove_background_using_abg?: _BOOLEAN
    /** default=512 min=512 max=512 step=64 */
    resolution?: _INT
}

// AnyLineArtPreprocessor_aux [ControlNet Preprocessors_Line Extractors]
export interface AnyLineArtPreprocessor$_aux extends HasSingle_IMAGE, ComfyNode<AnyLineArtPreprocessor$_aux_input, AnyLineArtPreprocessor$_aux_output> {
    nameInComfy: "AnyLineArtPreprocessor_aux"
}
export interface AnyLineArtPreprocessor$_aux_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface AnyLineArtPreprocessor$_aux_input {
    image: _IMAGE
    /** default="lineart_standard" */
    merge_with_lineart?: Enum_AnyLineArtPreprocessor$_aux_merge_with_lineart
    /** default=1280 min=16384 max=16384 step=8 */
    resolution?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    lineart_lower_bound?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    lineart_upper_bound?: _FLOAT
    /** default=36 min=16384 max=16384 step=1 */
    object_min_size?: _INT
    /** default=1 min=16384 max=16384 step=1 */
    object_connectivity?: _INT
}

// BinaryPreprocessor [ControlNet Preprocessors_Line Extractors]
export interface BinaryPreprocessor extends HasSingle_IMAGE, ComfyNode<BinaryPreprocessor_input, BinaryPreprocessor_output> {
    nameInComfy: "BinaryPreprocessor"
}
export interface BinaryPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface BinaryPreprocessor_input {
    image: _IMAGE
    /** default=100 min=255 max=255 step=1 */
    bin_threshold?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// CannyEdgePreprocessor [ControlNet Preprocessors_Line Extractors]
export interface CannyEdgePreprocessor extends HasSingle_IMAGE, ComfyNode<CannyEdgePreprocessor_input, CannyEdgePreprocessor_output> {
    nameInComfy: "CannyEdgePreprocessor"
}
export interface CannyEdgePreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CannyEdgePreprocessor_input {
    image: _IMAGE
    /** default=100 min=255 max=255 step=1 */
    low_threshold?: _INT
    /** default=200 min=255 max=255 step=1 */
    high_threshold?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// ColorPreprocessor [ControlNet Preprocessors_T2IAdapter-only]
export interface ColorPreprocessor extends HasSingle_IMAGE, ComfyNode<ColorPreprocessor_input, ColorPreprocessor_output> {
    nameInComfy: "ColorPreprocessor"
}
export interface ColorPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ColorPreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// DensePosePreprocessor [ControlNet Preprocessors_Faces and Poses Estimators]
export interface DensePosePreprocessor extends HasSingle_IMAGE, ComfyNode<DensePosePreprocessor_input, DensePosePreprocessor_output> {
    nameInComfy: "DensePosePreprocessor"
}
export interface DensePosePreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DensePosePreprocessor_input {
    image: _IMAGE
    /** default="densepose_r50_fpn_dl.torchscript" */
    model?: Enum_DensePosePreprocessor_model
    /** default="Viridis (MagicAnimate)" */
    cmap?: Enum_DensePosePreprocessor_cmap
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// DepthAnythingPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface DepthAnythingPreprocessor extends HasSingle_IMAGE, ComfyNode<DepthAnythingPreprocessor_input, DepthAnythingPreprocessor_output> {
    nameInComfy: "DepthAnythingPreprocessor"
}
export interface DepthAnythingPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DepthAnythingPreprocessor_input {
    image: _IMAGE
    /** default="depth_anything_vitl14.pth" */
    ckpt_name?: Enum_DepthAnythingPreprocessor_ckpt_name
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// Zoe_DepthAnythingPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface Zoe$_DepthAnythingPreprocessor extends HasSingle_IMAGE, ComfyNode<Zoe$_DepthAnythingPreprocessor_input, Zoe$_DepthAnythingPreprocessor_output> {
    nameInComfy: "Zoe_DepthAnythingPreprocessor"
}
export interface Zoe$_DepthAnythingPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Zoe$_DepthAnythingPreprocessor_input {
    image: _IMAGE
    /** default="indoor" */
    environment?: Enum_Zoe$_DepthAnythingPreprocessor_environment
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// DepthAnythingV2Preprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface DepthAnythingV2Preprocessor extends HasSingle_IMAGE, ComfyNode<DepthAnythingV2Preprocessor_input, DepthAnythingV2Preprocessor_output> {
    nameInComfy: "DepthAnythingV2Preprocessor"
}
export interface DepthAnythingV2Preprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DepthAnythingV2Preprocessor_input {
    image: _IMAGE
    /** default="depth_anything_v2_vitl.pth" */
    ckpt_name?: Enum_DepthAnythingV2Preprocessor_ckpt_name
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// DiffusionEdge_Preprocessor [ControlNet Preprocessors_Line Extractors]
export interface DiffusionEdge$_Preprocessor extends HasSingle_IMAGE, ComfyNode<DiffusionEdge$_Preprocessor_input, DiffusionEdge$_Preprocessor_output> {
    nameInComfy: "DiffusionEdge_Preprocessor"
}
export interface DiffusionEdge$_Preprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DiffusionEdge$_Preprocessor_input {
    image: _IMAGE
    /** default="indoor" */
    environment?: Enum_DiffusionEdge$_Preprocessor_environment
    /** default=4 min=16 max=16 step=1 */
    patch_batch_size?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// DSINE-NormalMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface DSINE$7NormalMapPreprocessor extends HasSingle_IMAGE, ComfyNode<DSINE$7NormalMapPreprocessor_input, DSINE$7NormalMapPreprocessor_output> {
    nameInComfy: "DSINE-NormalMapPreprocessor"
}
export interface DSINE$7NormalMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DSINE$7NormalMapPreprocessor_input {
    image: _IMAGE
    /** default=60 min=365 max=365 step=0.01 */
    fov?: _FLOAT
    /** default=5 min=20 max=20 step=1 */
    iterations?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// DWPreprocessor [ControlNet Preprocessors_Faces and Poses Estimators]
export interface DWPreprocessor extends HasSingle_IMAGE, HasSingle_POSE_KEYPOINT, ComfyNode<DWPreprocessor_input, DWPreprocessor_output> {
    nameInComfy: "DWPreprocessor"
}
export interface DWPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    POSE_KEYPOINT: ComfyNodeOutput<'POSE_KEYPOINT', 1>,
}
export interface DWPreprocessor_input {
    image: _IMAGE
    /** default="enable" */
    detect_hand?: Enum_KSamplerAdvanced_add_noise
    /** default="enable" */
    detect_body?: Enum_KSamplerAdvanced_add_noise
    /** default="enable" */
    detect_face?: Enum_KSamplerAdvanced_add_noise
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
    /** default="yolox_l.onnx" */
    bbox_detector?: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector
    /** default="dw-ll_ucoco_384_bs5.torchscript.pt" */
    pose_estimator?: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_pose_estimator
    /** default="disable" */
    scale_stick_for_xinsr_cn?: Enum_KSamplerAdvanced_add_noise
}

// AnimalPosePreprocessor [ControlNet Preprocessors_Faces and Poses Estimators]
export interface AnimalPosePreprocessor extends HasSingle_IMAGE, HasSingle_POSE_KEYPOINT, ComfyNode<AnimalPosePreprocessor_input, AnimalPosePreprocessor_output> {
    nameInComfy: "AnimalPosePreprocessor"
}
export interface AnimalPosePreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    POSE_KEYPOINT: ComfyNodeOutput<'POSE_KEYPOINT', 1>,
}
export interface AnimalPosePreprocessor_input {
    image: _IMAGE
    /** default="yolox_l.torchscript.pt" */
    bbox_detector?: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector
    /** default="rtmpose-m_ap10k_256_bs5.torchscript.pt" */
    pose_estimator?: Enum_AnimalPosePreprocessor_pose_estimator
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// HEDPreprocessor [ControlNet Preprocessors_Line Extractors]
export interface HEDPreprocessor extends HasSingle_IMAGE, ComfyNode<HEDPreprocessor_input, HEDPreprocessor_output> {
    nameInComfy: "HEDPreprocessor"
}
export interface HEDPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface HEDPreprocessor_input {
    image: _IMAGE
    /** default="enable" */
    safe?: Enum_KSamplerAdvanced_add_noise
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// FakeScribblePreprocessor [ControlNet Preprocessors_Line Extractors]
export interface FakeScribblePreprocessor extends HasSingle_IMAGE, ComfyNode<FakeScribblePreprocessor_input, FakeScribblePreprocessor_output> {
    nameInComfy: "FakeScribblePreprocessor"
}
export interface FakeScribblePreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface FakeScribblePreprocessor_input {
    image: _IMAGE
    /** default="enable" */
    safe?: Enum_KSamplerAdvanced_add_noise
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// InpaintPreprocessor [ControlNet Preprocessors_others]
export interface InpaintPreprocessor extends HasSingle_IMAGE, ComfyNode<InpaintPreprocessor_input, InpaintPreprocessor_output> {
    nameInComfy: "InpaintPreprocessor"
}
export interface InpaintPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface InpaintPreprocessor_input {
    image: _IMAGE
    mask: _MASK
    /** default=false */
    black_pixel_for_xinsir_cn?: _BOOLEAN
}

// LeReS-DepthMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface LeReS$7DepthMapPreprocessor extends HasSingle_IMAGE, ComfyNode<LeReS$7DepthMapPreprocessor_input, LeReS$7DepthMapPreprocessor_output> {
    nameInComfy: "LeReS-DepthMapPreprocessor"
}
export interface LeReS$7DepthMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface LeReS$7DepthMapPreprocessor_input {
    image: _IMAGE
    /** default=0 min=100 max=100 step=0.01 */
    rm_nearest?: _FLOAT
    /** default=0 min=100 max=100 step=0.01 */
    rm_background?: _FLOAT
    /** default="disable" */
    boost?: Enum_KSamplerAdvanced_add_noise
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// LineArtPreprocessor [ControlNet Preprocessors_Line Extractors]
export interface LineArtPreprocessor extends HasSingle_IMAGE, ComfyNode<LineArtPreprocessor_input, LineArtPreprocessor_output> {
    nameInComfy: "LineArtPreprocessor"
}
export interface LineArtPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface LineArtPreprocessor_input {
    image: _IMAGE
    /** default="disable" */
    coarse?: Enum_KSamplerAdvanced_add_noise
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// AnimeLineArtPreprocessor [ControlNet Preprocessors_Line Extractors]
export interface AnimeLineArtPreprocessor extends HasSingle_IMAGE, ComfyNode<AnimeLineArtPreprocessor_input, AnimeLineArtPreprocessor_output> {
    nameInComfy: "AnimeLineArtPreprocessor"
}
export interface AnimeLineArtPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface AnimeLineArtPreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// LineartStandardPreprocessor [ControlNet Preprocessors_Line Extractors]
export interface LineartStandardPreprocessor extends HasSingle_IMAGE, ComfyNode<LineartStandardPreprocessor_input, LineartStandardPreprocessor_output> {
    nameInComfy: "LineartStandardPreprocessor"
}
export interface LineartStandardPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface LineartStandardPreprocessor_input {
    image: _IMAGE
    /** default=6 min=100 max=100 step=0.01 */
    guassian_sigma?: _FLOAT
    /** default=8 min=16 max=16 step=1 */
    intensity_threshold?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// Manga2Anime_LineArt_Preprocessor [ControlNet Preprocessors_Line Extractors]
export interface Manga2Anime$_LineArt$_Preprocessor extends HasSingle_IMAGE, ComfyNode<Manga2Anime$_LineArt$_Preprocessor_input, Manga2Anime$_LineArt$_Preprocessor_output> {
    nameInComfy: "Manga2Anime_LineArt_Preprocessor"
}
export interface Manga2Anime$_LineArt$_Preprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Manga2Anime$_LineArt$_Preprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// MediaPipe-FaceMeshPreprocessor [ControlNet Preprocessors_Faces and Poses Estimators]
export interface MediaPipe$7FaceMeshPreprocessor extends HasSingle_IMAGE, ComfyNode<MediaPipe$7FaceMeshPreprocessor_input, MediaPipe$7FaceMeshPreprocessor_output> {
    nameInComfy: "MediaPipe-FaceMeshPreprocessor"
}
export interface MediaPipe$7FaceMeshPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MediaPipe$7FaceMeshPreprocessor_input {
    image: _IMAGE
    /** default=10 min=50 max=50 step=1 */
    max_faces?: _INT
    /** default=0.5 min=1 max=1 step=0.01 */
    min_confidence?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// MeshGraphormer-DepthMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface MeshGraphormer$7DepthMapPreprocessor extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<MeshGraphormer$7DepthMapPreprocessor_input, MeshGraphormer$7DepthMapPreprocessor_output> {
    nameInComfy: "MeshGraphormer-DepthMapPreprocessor"
}
export interface MeshGraphormer$7DepthMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    INPAINTING_MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface MeshGraphormer$7DepthMapPreprocessor_input {
    image: _IMAGE
    /** default=30 min=100 max=100 */
    mask_bbox_padding?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
    /** default="based_on_depth" */
    mask_type?: Enum_MeshGraphormer$7DepthMapPreprocessor_mask_type
    /** default=5 min=16384 max=16384 step=1 */
    mask_expand?: _INT
    /** default=88 min=18446744073709552000 max=18446744073709552000 step=1 */
    rand_seed?: _INT
    /** default=0.6 min=1 max=1 step=0.01 */
    detect_thr?: _FLOAT
    /** default=0.6 min=1 max=1 step=0.01 */
    presence_thr?: _FLOAT
}

// MeshGraphormer+ImpactDetector-DepthMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor_input, MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor_output> {
    nameInComfy: "MeshGraphormer+ImpactDetector-DepthMapPreprocessor"
}
export interface MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    INPAINTING_MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor_input {
    image: _IMAGE
    bbox_detector: _BBOX_DETECTOR
    /** default=0.5 min=1 max=1 step=0.01 */
    bbox_threshold?: _FLOAT
    /** default=10 min=512 max=512 step=1 */
    bbox_dilation?: _INT
    /** default=3 min=10 max=10 step=0.01 */
    bbox_crop_factor?: _FLOAT
    /** default=10 min=16384 max=16384 step=1 */
    drop_size?: _INT
    /** default=30 min=100 max=100 step=1 */
    mask_bbox_padding?: _INT
    /** default="based_on_depth" */
    mask_type?: Enum_MeshGraphormer$7DepthMapPreprocessor_mask_type
    /** default=5 min=16384 max=16384 step=1 */
    mask_expand?: _INT
    /** default=88 min=18446744073709552000 max=18446744073709552000 step=1 */
    rand_seed?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// Metric3D-DepthMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface Metric3D$7DepthMapPreprocessor extends HasSingle_IMAGE, ComfyNode<Metric3D$7DepthMapPreprocessor_input, Metric3D$7DepthMapPreprocessor_output> {
    nameInComfy: "Metric3D-DepthMapPreprocessor"
}
export interface Metric3D$7DepthMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Metric3D$7DepthMapPreprocessor_input {
    image: _IMAGE
    /** default="vit-small" */
    backbone?: Enum_Metric3D$7DepthMapPreprocessor_backbone
    /** default=1000 min=16384 max=16384 step=1 */
    fx?: _INT
    /** default=1000 min=16384 max=16384 step=1 */
    fy?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// Metric3D-NormalMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface Metric3D$7NormalMapPreprocessor extends HasSingle_IMAGE, ComfyNode<Metric3D$7NormalMapPreprocessor_input, Metric3D$7NormalMapPreprocessor_output> {
    nameInComfy: "Metric3D-NormalMapPreprocessor"
}
export interface Metric3D$7NormalMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Metric3D$7NormalMapPreprocessor_input {
    image: _IMAGE
    /** default="vit-small" */
    backbone?: Enum_Metric3D$7DepthMapPreprocessor_backbone
    /** default=1000 min=16384 max=16384 step=1 */
    fx?: _INT
    /** default=1000 min=16384 max=16384 step=1 */
    fy?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// MiDaS-NormalMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface MiDaS$7NormalMapPreprocessor extends HasSingle_IMAGE, ComfyNode<MiDaS$7NormalMapPreprocessor_input, MiDaS$7NormalMapPreprocessor_output> {
    nameInComfy: "MiDaS-NormalMapPreprocessor"
}
export interface MiDaS$7NormalMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MiDaS$7NormalMapPreprocessor_input {
    image: _IMAGE
    /** default=6.283185307179586 min=15.707963267948966 max=15.707963267948966 step=0.01 */
    a?: _FLOAT
    /** default=0.1 min=1 max=1 step=0.01 */
    bg_threshold?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// MiDaS-DepthMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface MiDaS$7DepthMapPreprocessor extends HasSingle_IMAGE, ComfyNode<MiDaS$7DepthMapPreprocessor_input, MiDaS$7DepthMapPreprocessor_output> {
    nameInComfy: "MiDaS-DepthMapPreprocessor"
}
export interface MiDaS$7DepthMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MiDaS$7DepthMapPreprocessor_input {
    image: _IMAGE
    /** default=6.283185307179586 min=15.707963267948966 max=15.707963267948966 step=0.01 */
    a?: _FLOAT
    /** default=0.1 min=1 max=1 step=0.01 */
    bg_threshold?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// M-LSDPreprocessor [ControlNet Preprocessors_Line Extractors]
export interface M$7LSDPreprocessor extends HasSingle_IMAGE, ComfyNode<M$7LSDPreprocessor_input, M$7LSDPreprocessor_output> {
    nameInComfy: "M-LSDPreprocessor"
}
export interface M$7LSDPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface M$7LSDPreprocessor_input {
    image: _IMAGE
    /** default=0.1 min=2 max=2 step=0.01 */
    score_threshold?: _FLOAT
    /** default=0.1 min=20 max=20 step=0.01 */
    dist_threshold?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// BAE-NormalMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface BAE$7NormalMapPreprocessor extends HasSingle_IMAGE, ComfyNode<BAE$7NormalMapPreprocessor_input, BAE$7NormalMapPreprocessor_output> {
    nameInComfy: "BAE-NormalMapPreprocessor"
}
export interface BAE$7NormalMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface BAE$7NormalMapPreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// OneFormer-COCO-SemSegPreprocessor [ControlNet Preprocessors_Semantic Segmentation]
export interface OneFormer$7COCO$7SemSegPreprocessor extends HasSingle_IMAGE, ComfyNode<OneFormer$7COCO$7SemSegPreprocessor_input, OneFormer$7COCO$7SemSegPreprocessor_output> {
    nameInComfy: "OneFormer-COCO-SemSegPreprocessor"
}
export interface OneFormer$7COCO$7SemSegPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface OneFormer$7COCO$7SemSegPreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// OneFormer-ADE20K-SemSegPreprocessor [ControlNet Preprocessors_Semantic Segmentation]
export interface OneFormer$7ADE20K$7SemSegPreprocessor extends HasSingle_IMAGE, ComfyNode<OneFormer$7ADE20K$7SemSegPreprocessor_input, OneFormer$7ADE20K$7SemSegPreprocessor_output> {
    nameInComfy: "OneFormer-ADE20K-SemSegPreprocessor"
}
export interface OneFormer$7ADE20K$7SemSegPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface OneFormer$7ADE20K$7SemSegPreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// OpenposePreprocessor [ControlNet Preprocessors_Faces and Poses Estimators]
export interface OpenposePreprocessor extends HasSingle_IMAGE, HasSingle_POSE_KEYPOINT, ComfyNode<OpenposePreprocessor_input, OpenposePreprocessor_output> {
    nameInComfy: "OpenposePreprocessor"
}
export interface OpenposePreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    POSE_KEYPOINT: ComfyNodeOutput<'POSE_KEYPOINT', 1>,
}
export interface OpenposePreprocessor_input {
    image: _IMAGE
    /** default="enable" */
    detect_hand?: Enum_KSamplerAdvanced_add_noise
    /** default="enable" */
    detect_body?: Enum_KSamplerAdvanced_add_noise
    /** default="enable" */
    detect_face?: Enum_KSamplerAdvanced_add_noise
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
    /** default="disable" */
    scale_stick_for_xinsr_cn?: Enum_KSamplerAdvanced_add_noise
}

// PiDiNetPreprocessor [ControlNet Preprocessors_Line Extractors]
export interface PiDiNetPreprocessor extends HasSingle_IMAGE, ComfyNode<PiDiNetPreprocessor_input, PiDiNetPreprocessor_output> {
    nameInComfy: "PiDiNetPreprocessor"
}
export interface PiDiNetPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface PiDiNetPreprocessor_input {
    image: _IMAGE
    /** default="enable" */
    safe?: Enum_KSamplerAdvanced_add_noise
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// SavePoseKpsAsJsonFile [ControlNet Preprocessors_Pose Keypoint Postprocess]
export interface SavePoseKpsAsJsonFile extends ComfyNode<SavePoseKpsAsJsonFile_input, SavePoseKpsAsJsonFile_output> {
    nameInComfy: "SavePoseKpsAsJsonFile"
}
export interface SavePoseKpsAsJsonFile_output {
}
export interface SavePoseKpsAsJsonFile_input {
    pose_kps: _POSE_KEYPOINT
    /** default="PoseKeypoint" */
    filename_prefix?: _STRING
}

// FacialPartColoringFromPoseKps [ControlNet Preprocessors_Pose Keypoint Postprocess]
export interface FacialPartColoringFromPoseKps extends HasSingle_IMAGE, ComfyNode<FacialPartColoringFromPoseKps_input, FacialPartColoringFromPoseKps_output> {
    nameInComfy: "FacialPartColoringFromPoseKps"
}
export interface FacialPartColoringFromPoseKps_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface FacialPartColoringFromPoseKps_input {
    pose_kps: _POSE_KEYPOINT
    /** default="polygon" */
    mode?: Enum_FacialPartColoringFromPoseKps_mode
    /** default="rgb(0, 153, 255)" */
    skin?: _STRING
    /** default="rgb(0, 204, 153)" */
    left_eye?: _STRING
    /** default="rgb(255, 153, 0)" */
    right_eye?: _STRING
    /** default="rgb(255, 102, 255)" */
    nose?: _STRING
    /** default="rgb(102, 0, 51)" */
    upper_lip?: _STRING
    /** default="rgb(255, 204, 255)" */
    inner_mouth?: _STRING
    /** default="rgb(255, 0, 102)" */
    lower_lip?: _STRING
}

// UpperBodyTrackingFromPoseKps [ControlNet Preprocessors_Pose Keypoint Postprocess]
export interface UpperBodyTrackingFromPoseKps extends HasSingle_TRACKING, HasSingle_STRING, ComfyNode<UpperBodyTrackingFromPoseKps_input, UpperBodyTrackingFromPoseKps_output> {
    nameInComfy: "UpperBodyTrackingFromPoseKps"
}
export interface UpperBodyTrackingFromPoseKps_output {
    tracking: ComfyNodeOutput<'TRACKING', 0>,
    prompt: ComfyNodeOutput<'STRING', 1>,
}
export interface UpperBodyTrackingFromPoseKps_input {
    pose_kps: _POSE_KEYPOINT
    /** default="" */
    id_include?: _STRING
    /** default="256, 256" */
    Head_width_height?: _STRING
    /** default="100, 100" */
    Neck_width_height?: _STRING
    /** default="" */
    Shoulder_width_height?: _STRING
    /** default="350, 450" */
    Torso_width_height?: _STRING
    /** default="128, 256" */
    RArm_width_height?: _STRING
    /** default="128, 256" */
    RForearm_width_height?: _STRING
    /** default="128, 256" */
    LArm_width_height?: _STRING
    /** default="128, 256" */
    LForearm_width_height?: _STRING
}

// RenderPeopleKps [ControlNet Preprocessors_Pose Keypoint Postprocess]
export interface RenderPeopleKps extends HasSingle_IMAGE, ComfyNode<RenderPeopleKps_input, RenderPeopleKps_output> {
    nameInComfy: "RenderPeopleKps"
}
export interface RenderPeopleKps_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface RenderPeopleKps_input {
    kps: _POSE_KEYPOINT
    /** default=true */
    render_body?: _BOOLEAN
    /** default=true */
    render_hand?: _BOOLEAN
    /** default=true */
    render_face?: _BOOLEAN
}

// RenderAnimalKps [ControlNet Preprocessors_Pose Keypoint Postprocess]
export interface RenderAnimalKps extends HasSingle_IMAGE, ComfyNode<RenderAnimalKps_input, RenderAnimalKps_output> {
    nameInComfy: "RenderAnimalKps"
}
export interface RenderAnimalKps_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface RenderAnimalKps_input {
    kps: _POSE_KEYPOINT
}

// PyraCannyPreprocessor [ControlNet Preprocessors_Line Extractors]
export interface PyraCannyPreprocessor extends HasSingle_IMAGE, ComfyNode<PyraCannyPreprocessor_input, PyraCannyPreprocessor_output> {
    nameInComfy: "PyraCannyPreprocessor"
}
export interface PyraCannyPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface PyraCannyPreprocessor_input {
    image: _IMAGE
    /** default=64 min=255 max=255 step=1 */
    low_threshold?: _INT
    /** default=128 min=255 max=255 step=1 */
    high_threshold?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// ImageLuminanceDetector [ControlNet Preprocessors_Recolor]
export interface ImageLuminanceDetector extends HasSingle_IMAGE, ComfyNode<ImageLuminanceDetector_input, ImageLuminanceDetector_output> {
    nameInComfy: "ImageLuminanceDetector"
}
export interface ImageLuminanceDetector_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageLuminanceDetector_input {
    image: _IMAGE
    /** default=1 min=2 max=2 step=0.01 */
    gamma_correction?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// ImageIntensityDetector [ControlNet Preprocessors_Recolor]
export interface ImageIntensityDetector extends HasSingle_IMAGE, ComfyNode<ImageIntensityDetector_input, ImageIntensityDetector_output> {
    nameInComfy: "ImageIntensityDetector"
}
export interface ImageIntensityDetector_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageIntensityDetector_input {
    image: _IMAGE
    /** default=1 min=2 max=2 step=0.01 */
    gamma_correction?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// ScribblePreprocessor [ControlNet Preprocessors_Line Extractors]
export interface ScribblePreprocessor extends HasSingle_IMAGE, ComfyNode<ScribblePreprocessor_input, ScribblePreprocessor_output> {
    nameInComfy: "ScribblePreprocessor"
}
export interface ScribblePreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ScribblePreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// Scribble_XDoG_Preprocessor [ControlNet Preprocessors_Line Extractors]
export interface Scribble$_XDoG$_Preprocessor extends HasSingle_IMAGE, ComfyNode<Scribble$_XDoG$_Preprocessor_input, Scribble$_XDoG$_Preprocessor_output> {
    nameInComfy: "Scribble_XDoG_Preprocessor"
}
export interface Scribble$_XDoG$_Preprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Scribble$_XDoG$_Preprocessor_input {
    image: _IMAGE
    /** default=32 min=64 max=64 step=1 */
    threshold?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// Scribble_PiDiNet_Preprocessor [ControlNet Preprocessors_Line Extractors]
export interface Scribble$_PiDiNet$_Preprocessor extends HasSingle_IMAGE, ComfyNode<Scribble$_PiDiNet$_Preprocessor_input, Scribble$_PiDiNet$_Preprocessor_output> {
    nameInComfy: "Scribble_PiDiNet_Preprocessor"
}
export interface Scribble$_PiDiNet$_Preprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Scribble$_PiDiNet$_Preprocessor_input {
    image: _IMAGE
    safe?: Enum_KSamplerAdvanced_add_noise
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// SAMPreprocessor [ControlNet Preprocessors_others]
export interface SAMPreprocessor extends HasSingle_IMAGE, ComfyNode<SAMPreprocessor_input, SAMPreprocessor_output> {
    nameInComfy: "SAMPreprocessor"
}
export interface SAMPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SAMPreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// ShufflePreprocessor [ControlNet Preprocessors_T2IAdapter-only]
export interface ShufflePreprocessor extends HasSingle_IMAGE, ComfyNode<ShufflePreprocessor_input, ShufflePreprocessor_output> {
    nameInComfy: "ShufflePreprocessor"
}
export interface ShufflePreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ShufflePreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// TEEDPreprocessor [ControlNet Preprocessors_Line Extractors]
export interface TEEDPreprocessor extends HasSingle_IMAGE, ComfyNode<TEEDPreprocessor_input, TEEDPreprocessor_output> {
    nameInComfy: "TEEDPreprocessor"
}
export interface TEEDPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface TEEDPreprocessor_input {
    image: _IMAGE
    /** default=2 min=10 max=10 step=1 */
    safe_steps?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// TilePreprocessor [ControlNet Preprocessors_tile]
export interface TilePreprocessor extends HasSingle_IMAGE, ComfyNode<TilePreprocessor_input, TilePreprocessor_output> {
    nameInComfy: "TilePreprocessor"
}
export interface TilePreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface TilePreprocessor_input {
    image: _IMAGE
    /** default=3 min=10 max=10 step=1 */
    pyrUp_iters?: _INT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// TTPlanet_TileGF_Preprocessor [ControlNet Preprocessors_tile]
export interface TTPlanet$_TileGF$_Preprocessor extends HasSingle_IMAGE, ComfyNode<TTPlanet$_TileGF$_Preprocessor_input, TTPlanet$_TileGF$_Preprocessor_output> {
    nameInComfy: "TTPlanet_TileGF_Preprocessor"
}
export interface TTPlanet$_TileGF$_Preprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface TTPlanet$_TileGF$_Preprocessor_input {
    image: _IMAGE
    /** default=1 min=8 max=8 step=0.01 */
    scale_factor?: _FLOAT
    /** default=2 min=10 max=10 step=0.01 */
    blur_strength?: _FLOAT
    /** default=7 min=20 max=20 step=1 */
    radius?: _INT
    /** default=0.01 min=0.1 max=0.1 step=0.001 */
    eps?: _FLOAT
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// TTPlanet_TileSimple_Preprocessor [ControlNet Preprocessors_tile]
export interface TTPlanet$_TileSimple$_Preprocessor extends HasSingle_IMAGE, ComfyNode<TTPlanet$_TileSimple$_Preprocessor_input, TTPlanet$_TileSimple$_Preprocessor_output> {
    nameInComfy: "TTPlanet_TileSimple_Preprocessor"
}
export interface TTPlanet$_TileSimple$_Preprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface TTPlanet$_TileSimple$_Preprocessor_input {
    image: _IMAGE
    /** default=1 min=8 max=8 step=0.01 */
    scale_factor?: _FLOAT
    /** default=2 min=10 max=10 step=0.01 */
    blur_strength?: _FLOAT
}

// UniFormer-SemSegPreprocessor [ControlNet Preprocessors_Semantic Segmentation]
export interface UniFormer$7SemSegPreprocessor extends HasSingle_IMAGE, ComfyNode<UniFormer$7SemSegPreprocessor_input, UniFormer$7SemSegPreprocessor_output> {
    nameInComfy: "UniFormer-SemSegPreprocessor"
}
export interface UniFormer$7SemSegPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface UniFormer$7SemSegPreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// SemSegPreprocessor [ControlNet Preprocessors_Semantic Segmentation]
export interface SemSegPreprocessor extends HasSingle_IMAGE, ComfyNode<SemSegPreprocessor_input, SemSegPreprocessor_output> {
    nameInComfy: "SemSegPreprocessor"
}
export interface SemSegPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SemSegPreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// Unimatch_OptFlowPreprocessor [ControlNet Preprocessors_Optical Flow]
export interface Unimatch$_OptFlowPreprocessor extends HasSingle_OPTICAL_FLOW, HasSingle_IMAGE, ComfyNode<Unimatch$_OptFlowPreprocessor_input, Unimatch$_OptFlowPreprocessor_output> {
    nameInComfy: "Unimatch_OptFlowPreprocessor"
}
export interface Unimatch$_OptFlowPreprocessor_output {
    OPTICAL_FLOW: ComfyNodeOutput<'OPTICAL_FLOW', 0>,
    PREVIEW_IMAGE: ComfyNodeOutput<'IMAGE', 1>,
}
export interface Unimatch$_OptFlowPreprocessor_input {
    image: _IMAGE
    /** default="gmflow-scale2-regrefine6-mixdata.pth" */
    ckpt_name?: Enum_Unimatch$_OptFlowPreprocessor_ckpt_name
    /** default=false */
    backward_flow?: _BOOLEAN
    /** default=false */
    bidirectional_flow?: _BOOLEAN
}

// MaskOptFlow [ControlNet Preprocessors_Optical Flow]
export interface MaskOptFlow extends HasSingle_OPTICAL_FLOW, HasSingle_IMAGE, ComfyNode<MaskOptFlow_input, MaskOptFlow_output> {
    nameInComfy: "MaskOptFlow"
}
export interface MaskOptFlow_output {
    OPTICAL_FLOW: ComfyNodeOutput<'OPTICAL_FLOW', 0>,
    PREVIEW_IMAGE: ComfyNodeOutput<'IMAGE', 1>,
}
export interface MaskOptFlow_input {
    optical_flow: _OPTICAL_FLOW
    mask: _MASK
}

// Zoe-DepthMapPreprocessor [ControlNet Preprocessors_Normal and Depth Estimators]
export interface Zoe$7DepthMapPreprocessor extends HasSingle_IMAGE, ComfyNode<Zoe$7DepthMapPreprocessor_input, Zoe$7DepthMapPreprocessor_output> {
    nameInComfy: "Zoe-DepthMapPreprocessor"
}
export interface Zoe$7DepthMapPreprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Zoe$7DepthMapPreprocessor_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// AIO_Preprocessor [ControlNet Preprocessors]
export interface AIO$_Preprocessor extends HasSingle_IMAGE, ComfyNode<AIO$_Preprocessor_input, AIO$_Preprocessor_output> {
    nameInComfy: "AIO_Preprocessor"
}
export interface AIO$_Preprocessor_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface AIO$_Preprocessor_input {
    image: _IMAGE
    /** default="none" */
    preprocessor?: Enum_AIO$_Preprocessor_preprocessor
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// ControlNetPreprocessorSelector [ControlNet Preprocessors]
export interface ControlNetPreprocessorSelector extends HasSingle_Enum_AIO$_Preprocessor_preprocessor, ComfyNode<ControlNetPreprocessorSelector_input, ControlNetPreprocessorSelector_output> {
    nameInComfy: "ControlNetPreprocessorSelector"
}
export interface ControlNetPreprocessorSelector_output {
    preprocessor: ComfyNodeOutput<'Enum_AIO$_Preprocessor_preprocessor', 0>,
}
export interface ControlNetPreprocessorSelector_input {
    preprocessor: Enum_AIO$_Preprocessor_preprocessor
}

// PixelPerfectResolution [ControlNet Preprocessors]
export interface PixelPerfectResolution extends HasSingle_INT, ComfyNode<PixelPerfectResolution_input, PixelPerfectResolution_output> {
    nameInComfy: "PixelPerfectResolution"
}
export interface PixelPerfectResolution_output {
    "RESOLUTION$_$1INT$2": ComfyNodeOutput<'INT', 0>,
}
export interface PixelPerfectResolution_input {
    original_image: _IMAGE
    /** default=512 min=8192 max=8192 step=8 */
    image_gen_width?: _INT
    /** default=512 min=8192 max=8192 step=8 */
    image_gen_height?: _INT
    /** default="Just Resize" */
    resize_mode?: Enum_PixelPerfectResolution_resize_mode
}

// ImageGenResolutionFromImage [ControlNet Preprocessors]
export interface ImageGenResolutionFromImage extends ComfyNode<ImageGenResolutionFromImage_input, ImageGenResolutionFromImage_output> {
    nameInComfy: "ImageGenResolutionFromImage"
}
export interface ImageGenResolutionFromImage_output {
    "IMAGE_GEN_WIDTH$_$1INT$2": ComfyNodeOutput<'INT', 0>,
    "IMAGE_GEN_HEIGHT$_$1INT$2": ComfyNodeOutput<'INT', 1>,
}
export interface ImageGenResolutionFromImage_input {
    image: _IMAGE
}

// ImageGenResolutionFromLatent [ControlNet Preprocessors]
export interface ImageGenResolutionFromLatent extends ComfyNode<ImageGenResolutionFromLatent_input, ImageGenResolutionFromLatent_output> {
    nameInComfy: "ImageGenResolutionFromLatent"
}
export interface ImageGenResolutionFromLatent_output {
    "IMAGE_GEN_WIDTH$_$1INT$2": ComfyNodeOutput<'INT', 0>,
    "IMAGE_GEN_HEIGHT$_$1INT$2": ComfyNodeOutput<'INT', 1>,
}
export interface ImageGenResolutionFromLatent_input {
    latent: _LATENT
}

// HintImageEnchance [ControlNet Preprocessors]
export interface HintImageEnchance extends HasSingle_IMAGE, ComfyNode<HintImageEnchance_input, HintImageEnchance_output> {
    nameInComfy: "HintImageEnchance"
}
export interface HintImageEnchance_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface HintImageEnchance_input {
    hint_image: _IMAGE
    /** default=512 min=8192 max=8192 step=8 */
    image_gen_width?: _INT
    /** default=512 min=8192 max=8192 step=8 */
    image_gen_height?: _INT
    /** default="Just Resize" */
    resize_mode?: Enum_PixelPerfectResolution_resize_mode
}

// ExecuteAllControlNetPreprocessors [ControlNet Preprocessors]
export interface ExecuteAllControlNetPreprocessors extends HasSingle_IMAGE, ComfyNode<ExecuteAllControlNetPreprocessors_input, ExecuteAllControlNetPreprocessors_output> {
    nameInComfy: "ExecuteAllControlNetPreprocessors"
}
export interface ExecuteAllControlNetPreprocessors_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ExecuteAllControlNetPreprocessors_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=64 */
    resolution?: _INT
}

// ControlNetAuxSimpleAddText [ControlNet Preprocessors]
export interface ControlNetAuxSimpleAddText extends HasSingle_IMAGE, ComfyNode<ControlNetAuxSimpleAddText_input, ControlNetAuxSimpleAddText_output> {
    nameInComfy: "ControlNetAuxSimpleAddText"
}
export interface ControlNetAuxSimpleAddText_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ControlNetAuxSimpleAddText_input {
    image: _IMAGE
    /** default="" */
    text?: _STRING
}

// BNK_CutoffBasePrompt [conditioning_cutoff]
export interface BNK$_CutoffBasePrompt extends HasSingle_CLIPREGION, ComfyNode<BNK$_CutoffBasePrompt_input, BNK$_CutoffBasePrompt_output> {
    nameInComfy: "BNK_CutoffBasePrompt"
}
export interface BNK$_CutoffBasePrompt_output {
    CLIPREGION: ComfyNodeOutput<'CLIPREGION', 0>,
}
export interface BNK$_CutoffBasePrompt_input {
    /** */
    text: _STRING
    clip: _CLIP
}

// BNK_CutoffSetRegions [conditioning_cutoff]
export interface BNK$_CutoffSetRegions extends HasSingle_CLIPREGION, ComfyNode<BNK$_CutoffSetRegions_input, BNK$_CutoffSetRegions_output> {
    nameInComfy: "BNK_CutoffSetRegions"
}
export interface BNK$_CutoffSetRegions_output {
    CLIPREGION: ComfyNodeOutput<'CLIPREGION', 0>,
}
export interface BNK$_CutoffSetRegions_input {
    clip_regions: _CLIPREGION
    /** */
    region_text: _STRING
    /** */
    target_text: _STRING
    /** default=1 min=10 max=10 step=0.05 */
    weight?: _FLOAT
}

// BNK_CutoffRegionsToConditioning [conditioning_cutoff]
export interface BNK$_CutoffRegionsToConditioning extends HasSingle_CONDITIONING, ComfyNode<BNK$_CutoffRegionsToConditioning_input, BNK$_CutoffRegionsToConditioning_output> {
    nameInComfy: "BNK_CutoffRegionsToConditioning"
}
export interface BNK$_CutoffRegionsToConditioning_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface BNK$_CutoffRegionsToConditioning_input {
    clip_regions: _CLIPREGION
    /** default="" */
    mask_token?: _STRING
    /** default=1 min=1 max=1 step=0.05 */
    strict_mask?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    start_from_masked?: _FLOAT
}

// BNK_CutoffRegionsToConditioning_ADV [conditioning_cutoff]
export interface BNK$_CutoffRegionsToConditioning$_ADV extends HasSingle_CONDITIONING, ComfyNode<BNK$_CutoffRegionsToConditioning$_ADV_input, BNK$_CutoffRegionsToConditioning$_ADV_output> {
    nameInComfy: "BNK_CutoffRegionsToConditioning_ADV"
}
export interface BNK$_CutoffRegionsToConditioning$_ADV_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface BNK$_CutoffRegionsToConditioning$_ADV_input {
    clip_regions: _CLIPREGION
    /** default="" */
    mask_token?: _STRING
    /** default=1 min=1 max=1 step=0.05 */
    strict_mask?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    start_from_masked?: _FLOAT
    token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    weight_interpretation: Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation
}

// CLIPTextEncodeSDXL+ [essentials_conditioning]
export interface CLIPTextEncodeSDXL$6 extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncodeSDXL$6_input, CLIPTextEncodeSDXL$6_output> {
    nameInComfy: "CLIPTextEncodeSDXL+"
}
export interface CLIPTextEncodeSDXL$6_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface CLIPTextEncodeSDXL$6_input {
    /** default=1024 min=16384 max=16384 */
    width?: _INT
    /** default=1024 min=16384 max=16384 */
    height?: _INT
    /** default=4 min=16 max=16 */
    size_cond_factor?: _INT
    /** default="" */
    text?: _STRING
    clip: _CLIP
}

// ConditioningCombineMultiple+ [essentials_conditioning]
export interface ConditioningCombineMultiple$6 extends HasSingle_CONDITIONING, ComfyNode<ConditioningCombineMultiple$6_input, ConditioningCombineMultiple$6_output> {
    nameInComfy: "ConditioningCombineMultiple+"
}
export interface ConditioningCombineMultiple$6_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningCombineMultiple$6_input {
    conditioning_1: _CONDITIONING
    conditioning_2: _CONDITIONING
    conditioning_3?: _CONDITIONING
    conditioning_4?: _CONDITIONING
    conditioning_5?: _CONDITIONING
}

// SD3NegativeConditioning+ [essentials_conditioning]
export interface SD3NegativeConditioning$6 extends HasSingle_CONDITIONING, ComfyNode<SD3NegativeConditioning$6_input, SD3NegativeConditioning$6_output> {
    nameInComfy: "SD3NegativeConditioning+"
}
export interface SD3NegativeConditioning$6_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface SD3NegativeConditioning$6_input {
    conditioning: _CONDITIONING
    /** default=0.1 min=1 max=1 step=0.001 */
    end?: _FLOAT
}

// FluxAttentionSeeker+ [essentials_conditioning]
export interface FluxAttentionSeeker$6 extends HasSingle_CLIP, ComfyNode<FluxAttentionSeeker$6_input, FluxAttentionSeeker$6_output> {
    nameInComfy: "FluxAttentionSeeker+"
}
export interface FluxAttentionSeeker$6_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface FluxAttentionSeeker$6_input {
    clip: _CLIP
    /** default=true */
    apply_to_query?: _BOOLEAN
    /** default=true */
    apply_to_key?: _BOOLEAN
    /** default=true */
    apply_to_value?: _BOOLEAN
    /** default=true */
    apply_to_out?: _BOOLEAN
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_0?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_1?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_2?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_3?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_4?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_5?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_6?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_7?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_8?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_9?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_10?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_11?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_0?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_1?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_2?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_3?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_4?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_5?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_6?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_7?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_8?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_9?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_10?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_11?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_12?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_13?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_14?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_15?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_16?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_17?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_18?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_19?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_20?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_21?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_22?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_23?: _FLOAT
}

// SD3AttentionSeekerLG+ [essentials_conditioning]
export interface SD3AttentionSeekerLG$6 extends HasSingle_CLIP, ComfyNode<SD3AttentionSeekerLG$6_input, SD3AttentionSeekerLG$6_output> {
    nameInComfy: "SD3AttentionSeekerLG+"
}
export interface SD3AttentionSeekerLG$6_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface SD3AttentionSeekerLG$6_input {
    clip: _CLIP
    /** default=true */
    apply_to_query?: _BOOLEAN
    /** default=true */
    apply_to_key?: _BOOLEAN
    /** default=true */
    apply_to_value?: _BOOLEAN
    /** default=true */
    apply_to_out?: _BOOLEAN
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_0?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_1?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_2?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_3?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_4?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_5?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_6?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_7?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_8?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_9?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_10?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_l_11?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_0?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_1?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_2?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_3?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_4?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_5?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_6?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_7?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_8?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_9?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_10?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_11?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_12?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_13?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_14?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_15?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_16?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_17?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_18?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_19?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_20?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_21?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_22?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_23?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_24?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_25?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_26?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_27?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_28?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_29?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_30?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    clip_g_31?: _FLOAT
}

// SD3AttentionSeekerT5+ [essentials_conditioning]
export interface SD3AttentionSeekerT5$6 extends HasSingle_CLIP, ComfyNode<SD3AttentionSeekerT5$6_input, SD3AttentionSeekerT5$6_output> {
    nameInComfy: "SD3AttentionSeekerT5+"
}
export interface SD3AttentionSeekerT5$6_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface SD3AttentionSeekerT5$6_input {
    clip: _CLIP
    /** default=true */
    apply_to_query?: _BOOLEAN
    /** default=true */
    apply_to_key?: _BOOLEAN
    /** default=true */
    apply_to_value?: _BOOLEAN
    /** default=true */
    apply_to_out?: _BOOLEAN
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_0?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_1?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_2?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_3?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_4?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_5?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_6?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_7?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_8?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_9?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_10?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_11?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_12?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_13?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_14?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_15?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_16?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_17?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_18?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_19?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_20?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_21?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_22?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    t5xxl_23?: _FLOAT
}

// FluxBlocksBuster+ [essentials_conditioning]
export interface FluxBlocksBuster$6 extends HasSingle_MODEL, HasSingle_STRING, ComfyNode<FluxBlocksBuster$6_input, FluxBlocksBuster$6_output> {
    nameInComfy: "FluxBlocksBuster+"
}
export interface FluxBlocksBuster$6_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    patched_blocks: ComfyNodeOutput<'STRING', 1>,
}
export interface FluxBlocksBuster$6_input {
    model: _MODEL
    /** default="## 0 = 1.0\n## 1 = 1.0\n## 2 = 1.0\n## 3 = 1.0\n## 4 = 1.0\n## 5 = 1.0\n## 6 = 1.0\n## 7 = 1.0\n## 8 = 1.0\n## 9 = 1.0\n## 10 = 1.0\n## 11 = 1.0\n## 12 = 1.0\n## 13 = 1.0\n## 14 = 1.0\n## 15 = 1.0\n## 16 = 1.0\n## 17 = 1.0\n## 18 = 1.0\n# 0 = 1.0\n# 1 = 1.0\n# 2 = 1.0\n# 3 = 1.0\n# 4 = 1.0\n# 5 = 1.0\n# 6 = 1.0\n# 7 = 1.0\n# 8 = 1.0\n# 9 = 1.0\n# 10 = 1.0\n# 11 = 1.0\n# 12 = 1.0\n# 13 = 1.0\n# 14 = 1.0\n# 15 = 1.0\n# 16 = 1.0\n# 17 = 1.0\n# 18 = 1.0\n# 19 = 1.0\n# 20 = 1.0\n# 21 = 1.0\n# 22 = 1.0\n# 23 = 1.0\n# 24 = 1.0\n# 25 = 1.0\n# 26 = 1.0\n# 27 = 1.0\n# 28 = 1.0\n# 29 = 1.0\n# 30 = 1.0\n# 31 = 1.0\n# 32 = 1.0\n# 33 = 1.0\n# 34 = 1.0\n# 35 = 1.0\n# 36 = 1.0\n# 37 = 1.0" */
    blocks?: _STRING
}

// ImageEnhanceDifference+ [essentials_image analysis]
export interface ImageEnhanceDifference$6 extends HasSingle_IMAGE, ComfyNode<ImageEnhanceDifference$6_input, ImageEnhanceDifference$6_output> {
    nameInComfy: "ImageEnhanceDifference+"
}
export interface ImageEnhanceDifference$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageEnhanceDifference$6_input {
    image1: _IMAGE
    image2: _IMAGE
    /** default=0.75 min=1 max=1 step=0.05 */
    exponent?: _FLOAT
}

// ImageBatchMultiple+ [essentials_image batch]
export interface ImageBatchMultiple$6 extends HasSingle_IMAGE, ComfyNode<ImageBatchMultiple$6_input, ImageBatchMultiple$6_output> {
    nameInComfy: "ImageBatchMultiple+"
}
export interface ImageBatchMultiple$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchMultiple$6_input {
    image_1: _IMAGE
    /** default="lanczos" */
    method?: Enum_ImageScale_upscale_method
    image_2?: _IMAGE
    image_3?: _IMAGE
    image_4?: _IMAGE
    image_5?: _IMAGE
}

// ImageExpandBatch+ [essentials_image batch]
export interface ImageExpandBatch$6 extends HasSingle_IMAGE, ComfyNode<ImageExpandBatch$6_input, ImageExpandBatch$6_output> {
    nameInComfy: "ImageExpandBatch+"
}
export interface ImageExpandBatch$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageExpandBatch$6_input {
    image: _IMAGE
    /** default=16 min=undefined step=1 */
    size?: _INT
    method: Enum_ImageExpandBatch$6_method
}

// ImageFromBatch+ [essentials_image batch]
export interface ImageFromBatch$6 extends HasSingle_IMAGE, ComfyNode<ImageFromBatch$6_input, ImageFromBatch$6_output> {
    nameInComfy: "ImageFromBatch+"
}
export interface ImageFromBatch$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFromBatch$6_input {
    image: _IMAGE
    /** default=0 min=undefined step=1 */
    start?: _INT
    /** default=-1 min=undefined step=1 */
    length?: _INT
}

// ImageListToBatch+ [essentials_image batch]
export interface ImageListToBatch$6 extends HasSingle_IMAGE, ComfyNode<ImageListToBatch$6_input, ImageListToBatch$6_output> {
    nameInComfy: "ImageListToBatch+"
}
export interface ImageListToBatch$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageListToBatch$6_input {
    image: _IMAGE
}

// ImageBatchToList+ [essentials_image batch]
export interface ImageBatchToList$6 extends HasSingle_IMAGE, ComfyNode<ImageBatchToList$6_input, ImageBatchToList$6_output> {
    nameInComfy: "ImageBatchToList+"
}
export interface ImageBatchToList$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageBatchToList$6_input {
    image: _IMAGE
}

// ImageCompositeFromMaskBatch+ [essentials_image manipulation]
export interface ImageCompositeFromMaskBatch$6 extends HasSingle_IMAGE, ComfyNode<ImageCompositeFromMaskBatch$6_input, ImageCompositeFromMaskBatch$6_output> {
    nameInComfy: "ImageCompositeFromMaskBatch+"
}
export interface ImageCompositeFromMaskBatch$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageCompositeFromMaskBatch$6_input {
    image_from: _IMAGE
    image_to: _IMAGE
    mask: _MASK
}

// ImageComposite+ [essentials_image manipulation]
export interface ImageComposite$6 extends HasSingle_IMAGE, ComfyNode<ImageComposite$6_input, ImageComposite$6_output> {
    nameInComfy: "ImageComposite+"
}
export interface ImageComposite$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageComposite$6_input {
    destination: _IMAGE
    source: _IMAGE
    /** default=0 min=16384 max=16384 step=1 */
    x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    y?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    offset_x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    offset_y?: _INT
    mask?: _MASK
}

// ImageCrop+ [essentials_image manipulation]
export interface ImageCrop$6 extends HasSingle_IMAGE, ComfyNode<ImageCrop$6_input, ImageCrop$6_output> {
    nameInComfy: "ImageCrop+"
}
export interface ImageCrop$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    x: ComfyNodeOutput<'INT', 1>,
    y: ComfyNodeOutput<'INT', 2>,
}
export interface ImageCrop$6_input {
    image: _IMAGE
    /** default=256 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=256 min=16384 max=16384 step=8 */
    height?: _INT
    position: Enum_ImageCrop$6_position
    /** default=0 min=undefined step=1 */
    x_offset?: _INT
    /** default=0 min=undefined step=1 */
    y_offset?: _INT
}

// ImageFlip+ [essentials_image manipulation]
export interface ImageFlip$6 extends HasSingle_IMAGE, ComfyNode<ImageFlip$6_input, ImageFlip$6_output> {
    nameInComfy: "ImageFlip+"
}
export interface ImageFlip$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageFlip$6_input {
    image: _IMAGE
    axis: Enum_ImageFlip$6_axis
}

// ImageRandomTransform+ [essentials_image manipulation]
export interface ImageRandomTransform$6 extends HasSingle_IMAGE, ComfyNode<ImageRandomTransform$6_input, ImageRandomTransform$6_output> {
    nameInComfy: "ImageRandomTransform+"
}
export interface ImageRandomTransform$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageRandomTransform$6_input {
    image: _IMAGE
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=1 min=256 max=256 step=1 */
    repeat?: _INT
    /** default=0.1 min=1 max=1 step=0.05 */
    variation?: _FLOAT
}

// ImageRemoveAlpha+ [essentials_image utils]
export interface ImageRemoveAlpha$6 extends HasSingle_IMAGE, ComfyNode<ImageRemoveAlpha$6_input, ImageRemoveAlpha$6_output> {
    nameInComfy: "ImageRemoveAlpha+"
}
export interface ImageRemoveAlpha$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageRemoveAlpha$6_input {
    image: _IMAGE
}

// ImageRemoveBackground+ [essentials_image manipulation]
export interface ImageRemoveBackground$6 extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ImageRemoveBackground$6_input, ImageRemoveBackground$6_output> {
    nameInComfy: "ImageRemoveBackground+"
}
export interface ImageRemoveBackground$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface ImageRemoveBackground$6_input {
    rembg_session: _REMBG_SESSION
    image: _IMAGE
}

// ImageResize+ [essentials_image manipulation]
export interface ImageResize$6 extends HasSingle_IMAGE, ComfyNode<ImageResize$6_input, ImageResize$6_output> {
    nameInComfy: "ImageResize+"
}
export interface ImageResize$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface ImageResize$6_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=1 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=1 */
    height?: _INT
    interpolation: Enum_ImageResize$6_interpolation
    method: Enum_ImageResize$6_method
    condition: Enum_ImageResize$6_condition
    /** default=0 min=512 max=512 step=1 */
    multiple_of?: _INT
}

// ImageSeamCarving+ [essentials_image manipulation]
export interface ImageSeamCarving$6 extends HasSingle_IMAGE, ComfyNode<ImageSeamCarving$6_input, ImageSeamCarving$6_output> {
    nameInComfy: "ImageSeamCarving+"
}
export interface ImageSeamCarving$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageSeamCarving$6_input {
    image: _IMAGE
    /** default=512 min=16384 max=16384 step=1 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=1 */
    height?: _INT
    energy: Enum_ImageSeamCarving$6_energy
    order: Enum_ImageSeamCarving$6_order
    keep_mask?: _MASK
    drop_mask?: _MASK
}

// ImageTile+ [essentials_image manipulation]
export interface ImageTile$6 extends HasSingle_IMAGE, ComfyNode<ImageTile$6_input, ImageTile$6_output> {
    nameInComfy: "ImageTile+"
}
export interface ImageTile$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    tile_width: ComfyNodeOutput<'INT', 1>,
    tile_height: ComfyNodeOutput<'INT', 2>,
    overlap_x: ComfyNodeOutput<'INT', 3>,
    overlap_y: ComfyNodeOutput<'INT', 4>,
}
export interface ImageTile$6_input {
    image: _IMAGE
    /** default=2 min=256 max=256 step=1 */
    rows?: _INT
    /** default=2 min=256 max=256 step=1 */
    cols?: _INT
    /** default=0 min=0.5 max=0.5 step=0.01 */
    overlap?: _FLOAT
    /** default=0 min=8192 max=8192 step=1 */
    overlap_x?: _INT
    /** default=0 min=8192 max=8192 step=1 */
    overlap_y?: _INT
}

// ImageUntile+ [essentials_image manipulation]
export interface ImageUntile$6 extends HasSingle_IMAGE, ComfyNode<ImageUntile$6_input, ImageUntile$6_output> {
    nameInComfy: "ImageUntile+"
}
export interface ImageUntile$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageUntile$6_input {
    tiles: _IMAGE
    /** default=0 min=8192 max=8192 step=1 */
    overlap_x?: _INT
    /** default=0 min=8192 max=8192 step=1 */
    overlap_y?: _INT
    /** default=2 min=256 max=256 step=1 */
    rows?: _INT
    /** default=2 min=256 max=256 step=1 */
    cols?: _INT
}

// RemBGSession+ [essentials_image manipulation]
export interface RemBGSession$6 extends HasSingle_REMBG_SESSION, ComfyNode<RemBGSession$6_input, RemBGSession$6_output> {
    nameInComfy: "RemBGSession+"
}
export interface RemBGSession$6_output {
    REMBG_SESSION: ComfyNodeOutput<'REMBG_SESSION', 0>,
}
export interface RemBGSession$6_input {
    model: Enum_RemBGSession$6_model
    providers: Enum_RemBGSession$6_providers
}

// TransparentBGSession+ [essentials_image manipulation]
export interface TransparentBGSession$6 extends HasSingle_REMBG_SESSION, ComfyNode<TransparentBGSession$6_input, TransparentBGSession$6_output> {
    nameInComfy: "TransparentBGSession+"
}
export interface TransparentBGSession$6_output {
    REMBG_SESSION: ComfyNodeOutput<'REMBG_SESSION', 0>,
}
export interface TransparentBGSession$6_input {
    mode: Enum_TransparentBGSession$6_mode
    /** default=true */
    use_jit?: _BOOLEAN
}

// ImageApplyLUT+ [essentials_image processing]
export interface ImageApplyLUT$6 extends HasSingle_IMAGE, ComfyNode<ImageApplyLUT$6_input, ImageApplyLUT$6_output> {
    nameInComfy: "ImageApplyLUT+"
}
export interface ImageApplyLUT$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageApplyLUT$6_input {
    image: _IMAGE
    lut_file: Enum_ImageApplyLUT$6_lut_file
    /** default=true */
    gamma_correction?: _BOOLEAN
    /** default=true */
    clip_values?: _BOOLEAN
    /** default=1 min=1 max=1 step=0.1 */
    strength?: _FLOAT
}

// ImageCASharpening+ [essentials_image processing]
export interface ImageCASharpening$6 extends HasSingle_IMAGE, ComfyNode<ImageCASharpening$6_input, ImageCASharpening$6_output> {
    nameInComfy: "ImageCASharpening+"
}
export interface ImageCASharpening$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageCASharpening$6_input {
    image: _IMAGE
    /** default=0.8 min=1 max=1 step=0.05 */
    amount?: _FLOAT
}

// ImageDesaturate+ [essentials_image processing]
export interface ImageDesaturate$6 extends HasSingle_IMAGE, ComfyNode<ImageDesaturate$6_input, ImageDesaturate$6_output> {
    nameInComfy: "ImageDesaturate+"
}
export interface ImageDesaturate$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageDesaturate$6_input {
    image: _IMAGE
    /** default=1 min=1 max=1 step=0.05 */
    factor?: _FLOAT
    method: Enum_ImageDesaturate$6_method
}

// PixelOEPixelize+ [essentials_image processing]
export interface PixelOEPixelize$6 extends HasSingle_IMAGE, ComfyNode<PixelOEPixelize$6_input, PixelOEPixelize$6_output> {
    nameInComfy: "PixelOEPixelize+"
}
export interface PixelOEPixelize$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface PixelOEPixelize$6_input {
    image: _IMAGE
    downscale_mode: Enum_PixelOEPixelize$6_downscale_mode
    /** default=128 min=16384 max=16384 step=8 */
    target_size?: _INT
    /** default=16 min=32 max=32 step=2 */
    patch_size?: _INT
    /** default=2 min=16 max=16 step=1 */
    thickness?: _INT
    /** default=true */
    color_matching?: _BOOLEAN
    /** default=true */
    upscale?: _BOOLEAN
}

// ImagePosterize+ [essentials_image processing]
export interface ImagePosterize$6 extends HasSingle_IMAGE, ComfyNode<ImagePosterize$6_input, ImagePosterize$6_output> {
    nameInComfy: "ImagePosterize+"
}
export interface ImagePosterize$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImagePosterize$6_input {
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.05 */
    threshold?: _FLOAT
}

// ImageColorMatch+ [essentials_image processing]
export interface ImageColorMatch$6 extends HasSingle_IMAGE, ComfyNode<ImageColorMatch$6_input, ImageColorMatch$6_output> {
    nameInComfy: "ImageColorMatch+"
}
export interface ImageColorMatch$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageColorMatch$6_input {
    image: _IMAGE
    reference: _IMAGE
    color_space: Enum_ImageColorMatch$6_color_space
    /** default=1 min=1 max=1 step=0.05 */
    factor?: _FLOAT
    device: Enum_ImageColorMatch$6_device
    /** default=0 min=1024 max=1024 step=1 */
    batch_size?: _INT
    reference_mask?: _MASK
}

// ImageColorMatchAdobe+ [essentials_image processing]
export interface ImageColorMatchAdobe$6 extends HasSingle_IMAGE, ComfyNode<ImageColorMatchAdobe$6_input, ImageColorMatchAdobe$6_output> {
    nameInComfy: "ImageColorMatchAdobe+"
}
export interface ImageColorMatchAdobe$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageColorMatchAdobe$6_input {
    image: _IMAGE
    reference: _IMAGE
    color_space: Enum_ImageColorMatchAdobe$6_color_space
    /** default=1 min=2 max=2 step=0.05 */
    luminance_factor?: _FLOAT
    /** default=1 min=2 max=2 step=0.05 */
    color_intensity_factor?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    fade_factor?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    neutralization_factor?: _FLOAT
    device: Enum_ImageColorMatch$6_device
    reference_mask?: _MASK
}

// ImageHistogramMatch+ [essentials_image processing]
export interface ImageHistogramMatch$6 extends HasSingle_IMAGE, ComfyNode<ImageHistogramMatch$6_input, ImageHistogramMatch$6_output> {
    nameInComfy: "ImageHistogramMatch+"
}
export interface ImageHistogramMatch$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageHistogramMatch$6_input {
    image: _IMAGE
    reference: _IMAGE
    method: Enum_ImageHistogramMatch$6_method
    /** default=1 min=1 max=1 step=0.05 */
    factor?: _FLOAT
    device: Enum_ImageColorMatch$6_device
}

// ImageSmartSharpen+ [essentials_image processing]
export interface ImageSmartSharpen$6 extends HasSingle_IMAGE, ComfyNode<ImageSmartSharpen$6_input, ImageSmartSharpen$6_output> {
    nameInComfy: "ImageSmartSharpen+"
}
export interface ImageSmartSharpen$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageSmartSharpen$6_input {
    image: _IMAGE
    /** default=7 min=25 max=25 step=1 */
    noise_radius?: _INT
    /** default=0.75 min=1 max=1 step=0.05 */
    preserve_edges?: _FLOAT
    /** default=5 min=25 max=25 step=0.5 */
    sharpen?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.1 */
    ratio?: _FLOAT
}

// GetImageSize+ [essentials_image utils]
export interface GetImageSize$6 extends ComfyNode<GetImageSize$6_input, GetImageSize$6_output> {
    nameInComfy: "GetImageSize+"
}
export interface GetImageSize$6_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
    count: ComfyNodeOutput<'INT', 2>,
}
export interface GetImageSize$6_input {
    image: _IMAGE
}

// ImageToDevice+ [essentials_image utils]
export interface ImageToDevice$6 extends HasSingle_IMAGE, ComfyNode<ImageToDevice$6_input, ImageToDevice$6_output> {
    nameInComfy: "ImageToDevice+"
}
export interface ImageToDevice$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImageToDevice$6_input {
    image: _IMAGE
    device: Enum_ImageColorMatch$6_device
}

// ImagePreviewFromLatent+ [essentials_image utils]
export interface ImagePreviewFromLatent$6 extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ImagePreviewFromLatent$6_input, ImagePreviewFromLatent$6_output> {
    nameInComfy: "ImagePreviewFromLatent+"
}
export interface ImagePreviewFromLatent$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
    width: ComfyNodeOutput<'INT', 2>,
    height: ComfyNodeOutput<'INT', 3>,
}
export interface ImagePreviewFromLatent$6_input {
    latent: _LATENT
    vae: _VAE
    /** default=0 min=4096 max=4096 step=64 */
    tile_size?: _INT
    /** */
    image?: Enum_ImagePreviewFromLatent$6_image
}

// NoiseFromImage+ [essentials_image utils]
export interface NoiseFromImage$6 extends HasSingle_IMAGE, ComfyNode<NoiseFromImage$6_input, NoiseFromImage$6_output> {
    nameInComfy: "NoiseFromImage+"
}
export interface NoiseFromImage$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface NoiseFromImage$6_input {
    image: _IMAGE
    /** default=1 min=1 max=1 step=0.01 */
    noise_strenght?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    noise_size?: _FLOAT
    /** default=0.2 min=1 max=1 step=0.01 */
    color_noise?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    mask_strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    mask_scale_diff?: _FLOAT
    /** default=1 min=100 max=100 step=0.1 */
    mask_contrast?: _FLOAT
    /** default=2 min=100 max=100 step=0.1 */
    saturation?: _FLOAT
    /** default=1 min=100 max=100 step=0.1 */
    contrast?: _FLOAT
    /** default=1 min=10 max=10 step=0.1 */
    blur?: _FLOAT
    noise_mask?: _IMAGE
}

// MaskBlur+ [essentials_mask]
export interface MaskBlur$6 extends HasSingle_MASK, ComfyNode<MaskBlur$6_input, MaskBlur$6_output> {
    nameInComfy: "MaskBlur+"
}
export interface MaskBlur$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskBlur$6_input {
    mask: _MASK
    /** default=6 min=256 max=256 step=1 */
    amount?: _INT
    device: Enum_ImageColorMatch$6_device
}

// MaskBoundingBox+ [essentials_mask]
export interface MaskBoundingBox$6 extends HasSingle_MASK, HasSingle_IMAGE, ComfyNode<MaskBoundingBox$6_input, MaskBoundingBox$6_output> {
    nameInComfy: "MaskBoundingBox+"
}
export interface MaskBoundingBox$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
    IMAGE: ComfyNodeOutput<'IMAGE', 1>,
    x: ComfyNodeOutput<'INT', 2>,
    y: ComfyNodeOutput<'INT', 3>,
    width: ComfyNodeOutput<'INT', 4>,
    height: ComfyNodeOutput<'INT', 5>,
}
export interface MaskBoundingBox$6_input {
    mask: _MASK
    /** default=0 min=4096 max=4096 step=1 */
    padding?: _INT
    /** default=0 min=256 max=256 step=1 */
    blur?: _INT
    image_optional?: _IMAGE
}

// MaskFix+ [essentials_mask]
export interface MaskFix$6 extends HasSingle_MASK, ComfyNode<MaskFix$6_input, MaskFix$6_output> {
    nameInComfy: "MaskFix+"
}
export interface MaskFix$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskFix$6_input {
    mask: _MASK
    /** default=0 min=256 max=256 step=1 */
    erode_dilate?: _INT
    /** default=0 min=128 max=128 step=1 */
    fill_holes?: _INT
    /** default=0 min=32 max=32 step=1 */
    remove_isolated_pixels?: _INT
    /** default=0 min=256 max=256 step=1 */
    smooth?: _INT
    /** default=0 min=256 max=256 step=1 */
    blur?: _INT
}

// MaskFlip+ [essentials_mask]
export interface MaskFlip$6 extends HasSingle_MASK, ComfyNode<MaskFlip$6_input, MaskFlip$6_output> {
    nameInComfy: "MaskFlip+"
}
export interface MaskFlip$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskFlip$6_input {
    mask: _MASK
    axis: Enum_ImageFlip$6_axis
}

// MaskFromColor+ [essentials_mask]
export interface MaskFromColor$6 extends HasSingle_MASK, ComfyNode<MaskFromColor$6_input, MaskFromColor$6_output> {
    nameInComfy: "MaskFromColor+"
}
export interface MaskFromColor$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskFromColor$6_input {
    image: _IMAGE
    /** default=255 min=255 max=255 step=1 */
    red?: _INT
    /** default=255 min=255 max=255 step=1 */
    green?: _INT
    /** default=255 min=255 max=255 step=1 */
    blue?: _INT
    /** default=0 min=127 max=127 step=1 */
    threshold?: _INT
}

// MaskFromList+ [essentials_mask]
export interface MaskFromList$6 extends HasSingle_MASK, ComfyNode<MaskFromList$6_input, MaskFromList$6_output> {
    nameInComfy: "MaskFromList+"
}
export interface MaskFromList$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskFromList$6_input {
    /** default=32 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=32 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=0 min=1 max=1 */
    values?: _$Star
    /** default="" */
    str_values?: _STRING
}

// MaskFromRGBCMYBW+ [essentials_mask]
export interface MaskFromRGBCMYBW$6 extends ComfyNode<MaskFromRGBCMYBW$6_input, MaskFromRGBCMYBW$6_output> {
    nameInComfy: "MaskFromRGBCMYBW+"
}
export interface MaskFromRGBCMYBW$6_output {
    red: ComfyNodeOutput<'MASK', 0>,
    green: ComfyNodeOutput<'MASK', 1>,
    blue: ComfyNodeOutput<'MASK', 2>,
    cyan: ComfyNodeOutput<'MASK', 3>,
    magenta: ComfyNodeOutput<'MASK', 4>,
    yellow: ComfyNodeOutput<'MASK', 5>,
    black: ComfyNodeOutput<'MASK', 6>,
    white: ComfyNodeOutput<'MASK', 7>,
}
export interface MaskFromRGBCMYBW$6_input {
    image: _IMAGE
    /** default=0.15 min=1 max=1 step=0.01 */
    threshold_r?: _FLOAT
    /** default=0.15 min=1 max=1 step=0.01 */
    threshold_g?: _FLOAT
    /** default=0.15 min=1 max=1 step=0.01 */
    threshold_b?: _FLOAT
}

// MaskFromSegmentation+ [essentials_mask]
export interface MaskFromSegmentation$6 extends HasSingle_MASK, ComfyNode<MaskFromSegmentation$6_input, MaskFromSegmentation$6_output> {
    nameInComfy: "MaskFromSegmentation+"
}
export interface MaskFromSegmentation$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskFromSegmentation$6_input {
    image: _IMAGE
    /** default=6 min=16 max=16 step=1 */
    segments?: _INT
    /** default=0 min=32 max=32 step=1 */
    remove_isolated_pixels?: _INT
    /** default=0 min=1 max=1 step=0.01 */
    remove_small_masks?: _FLOAT
    /** default=false */
    fill_holes?: _BOOLEAN
}

// MaskPreview+ [essentials_mask]
export interface MaskPreview$6 extends ComfyNode<MaskPreview$6_input, MaskPreview$6_output> {
    nameInComfy: "MaskPreview+"
}
export interface MaskPreview$6_output {
}
export interface MaskPreview$6_input {
    mask: _MASK
}

// MaskSmooth+ [essentials_mask]
export interface MaskSmooth$6 extends HasSingle_MASK, ComfyNode<MaskSmooth$6_input, MaskSmooth$6_output> {
    nameInComfy: "MaskSmooth+"
}
export interface MaskSmooth$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskSmooth$6_input {
    mask: _MASK
    /** default=0 min=127 max=127 step=1 */
    amount?: _INT
}

// TransitionMask+ [essentials_mask]
export interface TransitionMask$6 extends HasSingle_MASK, ComfyNode<TransitionMask$6_input, TransitionMask$6_output> {
    nameInComfy: "TransitionMask+"
}
export interface TransitionMask$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface TransitionMask$6_input {
    /** default=512 min=16384 max=16384 step=1 */
    width?: _INT
    /** default=512 min=16384 max=16384 step=1 */
    height?: _INT
    /** default=16 min=9999 max=9999 step=1 */
    frames?: _INT
    /** default=0 min=undefined step=1 */
    start_frame?: _INT
    /** default=9999 min=undefined step=1 */
    end_frame?: _INT
    transition_type: Enum_TransitionMask$6_transition_type
    timing_function: Enum_TransitionMask$6_timing_function
}

// MaskBatch+ [essentials_mask batch]
export interface MaskBatch$6 extends HasSingle_MASK, ComfyNode<MaskBatch$6_input, MaskBatch$6_output> {
    nameInComfy: "MaskBatch+"
}
export interface MaskBatch$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskBatch$6_input {
    mask1: _MASK
    mask2: _MASK
}

// MaskExpandBatch+ [essentials_mask batch]
export interface MaskExpandBatch$6 extends HasSingle_MASK, ComfyNode<MaskExpandBatch$6_input, MaskExpandBatch$6_output> {
    nameInComfy: "MaskExpandBatch+"
}
export interface MaskExpandBatch$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskExpandBatch$6_input {
    mask: _MASK
    /** default=16 min=undefined step=1 */
    size?: _INT
    method: Enum_ImageExpandBatch$6_method
}

// MaskFromBatch+ [essentials_mask batch]
export interface MaskFromBatch$6 extends HasSingle_MASK, ComfyNode<MaskFromBatch$6_input, MaskFromBatch$6_output> {
    nameInComfy: "MaskFromBatch+"
}
export interface MaskFromBatch$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface MaskFromBatch$6_input {
    mask: _MASK
    /** default=0 min=undefined step=1 */
    start?: _INT
    /** default=1 min=undefined step=1 */
    length?: _INT
}

// KSamplerVariationsStochastic+ [essentials_sampling]
export interface KSamplerVariationsStochastic$6 extends HasSingle_LATENT, ComfyNode<KSamplerVariationsStochastic$6_input, KSamplerVariationsStochastic$6_output> {
    nameInComfy: "KSamplerVariationsStochastic+"
}
export interface KSamplerVariationsStochastic$6_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface KSamplerVariationsStochastic$6_input {
    model: _MODEL
    latent_image: _LATENT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=25 min=10000 max=10000 */
    steps?: _INT
    /** default=7 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    sampler: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT$4seed
    /** default=0.2 min=1 max=1 step=0.05 */
    variation_strength?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    cfg_scale?: _FLOAT
}

// KSamplerVariationsWithNoise+ [essentials_sampling]
export interface KSamplerVariationsWithNoise$6 extends HasSingle_LATENT, ComfyNode<KSamplerVariationsWithNoise$6_input, KSamplerVariationsWithNoise$6_output> {
    nameInComfy: "KSamplerVariationsWithNoise+"
}
export interface KSamplerVariationsWithNoise$6_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface KSamplerVariationsWithNoise$6_input {
    model: _MODEL
    latent_image: _LATENT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    main_seed?: _INT$4seed
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.1 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    /** default=0.17 min=1 max=1 step=0.01 */
    variation_strength?: _FLOAT
    /** default=12345 min=18446744073709552000 max=18446744073709552000 */
    variation_seed?: _INT$4seed
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// InjectLatentNoise+ [essentials_sampling]
export interface InjectLatentNoise$6 extends HasSingle_LATENT, ComfyNode<InjectLatentNoise$6_input, InjectLatentNoise$6_output> {
    nameInComfy: "InjectLatentNoise+"
}
export interface InjectLatentNoise$6_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface InjectLatentNoise$6_input {
    latent: _LATENT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=1 min=20 max=20 step=0.01 */
    noise_strength?: _FLOAT
    /** default="false" */
    normalize?: Enum_ImageDrawRectangleRounded_top_left_corner
    mask?: _MASK
}

// FluxSamplerParams+ [essentials_sampling]
export interface FluxSamplerParams$6 extends HasSingle_LATENT, HasSingle_SAMPLER_PARAMS, ComfyNode<FluxSamplerParams$6_input, FluxSamplerParams$6_output> {
    nameInComfy: "FluxSamplerParams+"
}
export interface FluxSamplerParams$6_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
    params: ComfyNodeOutput<'SAMPLER_PARAMS', 1>,
}
export interface FluxSamplerParams$6_input {
    model: _MODEL
    conditioning: _CONDITIONING
    latent_image: _LATENT
    /** default="?" */
    seed?: _STRING
    /** default="euler" */
    sampler?: _STRING
    /** default="simple" */
    scheduler?: _STRING
    /** default="20" */
    steps?: _STRING
    /** default="3.5" */
    guidance?: _STRING
    /** default="" */
    max_shift?: _STRING
    /** default="" */
    base_shift?: _STRING
    /** default="1.0" */
    denoise?: _STRING
    loras?: _LORA_PARAMS
}

// GuidanceTimestepping+ [essentials_sampling]
export interface GuidanceTimestepping$6 extends HasSingle_MODEL, ComfyNode<GuidanceTimestepping$6_input, GuidanceTimestepping$6_output> {
    nameInComfy: "GuidanceTimestepping+"
}
export interface GuidanceTimestepping$6_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface GuidanceTimestepping$6_input {
    model: _MODEL
    /** default=2 min=100 max=100 step=0.05 */
    value?: _FLOAT
    /** default=0.2 min=1 max=1 step=0.01 */
    start_at?: _FLOAT
    /** default=0.8 min=1 max=1 step=0.01 */
    end_at?: _FLOAT
}

// PlotParameters+ [essentials_sampling]
export interface PlotParameters$6 extends HasSingle_IMAGE, ComfyNode<PlotParameters$6_input, PlotParameters$6_output> {
    nameInComfy: "PlotParameters+"
}
export interface PlotParameters$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface PlotParameters$6_input {
    images: _IMAGE
    params: _SAMPLER_PARAMS
    order_by: Enum_PlotParameters$6_order_by
    cols_value: Enum_PlotParameters$6_order_by
    /** default=-1 min=1024 max=1024 */
    cols_num?: _INT
    add_prompt: Enum_PlotParameters$6_add_prompt
    /** default="true" */
    add_params?: Enum_PlotParameters$6_add_params
}

// TextEncodeForSamplerParams+ [essentials_sampling]
export interface TextEncodeForSamplerParams$6 extends HasSingle_CONDITIONING, ComfyNode<TextEncodeForSamplerParams$6_input, TextEncodeForSamplerParams$6_output> {
    nameInComfy: "TextEncodeForSamplerParams+"
}
export interface TextEncodeForSamplerParams$6_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface TextEncodeForSamplerParams$6_input {
    /** default="Separate prompts with at least three dashes\n---\nLike so" */
    text?: _STRING
    clip: _CLIP
}

// SamplerSelectHelper+ [essentials_sampling]
export interface SamplerSelectHelper$6 extends HasSingle_STRING, ComfyNode<SamplerSelectHelper$6_input, SamplerSelectHelper$6_output> {
    nameInComfy: "SamplerSelectHelper+"
}
export interface SamplerSelectHelper$6_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface SamplerSelectHelper$6_input {
    /** default=false */
    euler?: _BOOLEAN
    /** default=false */
    euler_cfg_pp?: _BOOLEAN
    /** default=false */
    euler_ancestral?: _BOOLEAN
    /** default=false */
    euler_ancestral_cfg_pp?: _BOOLEAN
    /** default=false */
    heun?: _BOOLEAN
    /** default=false */
    heunpp2?: _BOOLEAN
    /** default=false */
    dpm_2?: _BOOLEAN
    /** default=false */
    dpm_2_ancestral?: _BOOLEAN
    /** default=false */
    lms?: _BOOLEAN
    /** default=false */
    dpm_fast?: _BOOLEAN
    /** default=false */
    dpm_adaptive?: _BOOLEAN
    /** default=false */
    dpmpp_2s_ancestral?: _BOOLEAN
    /** default=false */
    dpmpp_2s_ancestral_cfg_pp?: _BOOLEAN
    /** default=false */
    dpmpp_sde?: _BOOLEAN
    /** default=false */
    dpmpp_sde_gpu?: _BOOLEAN
    /** default=false */
    dpmpp_2m?: _BOOLEAN
    /** default=false */
    dpmpp_2m_cfg_pp?: _BOOLEAN
    /** default=false */
    dpmpp_2m_sde?: _BOOLEAN
    /** default=false */
    dpmpp_2m_sde_gpu?: _BOOLEAN
    /** default=false */
    dpmpp_3m_sde?: _BOOLEAN
    /** default=false */
    dpmpp_3m_sde_gpu?: _BOOLEAN
    /** default=false */
    ddpm?: _BOOLEAN
    /** default=false */
    lcm?: _BOOLEAN
    /** default=false */
    ipndm?: _BOOLEAN
    /** default=false */
    ipndm_v?: _BOOLEAN
    /** default=false */
    deis?: _BOOLEAN
    /** default=false */
    ddim?: _BOOLEAN
    /** default=false */
    uni_pc?: _BOOLEAN
    /** default=false */
    uni_pc_bh2?: _BOOLEAN
}

// SchedulerSelectHelper+ [essentials_sampling]
export interface SchedulerSelectHelper$6 extends HasSingle_STRING, ComfyNode<SchedulerSelectHelper$6_input, SchedulerSelectHelper$6_output> {
    nameInComfy: "SchedulerSelectHelper+"
}
export interface SchedulerSelectHelper$6_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface SchedulerSelectHelper$6_input {
    /** default=false */
    normal?: _BOOLEAN
    /** default=false */
    karras?: _BOOLEAN
    /** default=false */
    exponential?: _BOOLEAN
    /** default=false */
    sgm_uniform?: _BOOLEAN
    /** default=false */
    simple?: _BOOLEAN
    /** default=false */
    ddim_uniform?: _BOOLEAN
    /** default=false */
    beta?: _BOOLEAN
    /** default=false */
    linear_quadratic?: _BOOLEAN
}

// LorasForFluxParams+ [essentials_sampling]
export interface LorasForFluxParams$6 extends HasSingle_LORA_PARAMS, ComfyNode<LorasForFluxParams$6_input, LorasForFluxParams$6_output> {
    nameInComfy: "LorasForFluxParams+"
}
export interface LorasForFluxParams$6_output {
    LORA_PARAMS: ComfyNodeOutput<'LORA_PARAMS', 0>,
}
export interface LorasForFluxParams$6_input {
    /** */
    lora_1: Enum_LoraLoader_lora_name
    /** default="1.0" */
    strength_model_1?: _STRING
}

// ModelSamplingSD3Advanced+ [essentials_sampling]
export interface ModelSamplingSD3Advanced$6 extends HasSingle_MODEL, ComfyNode<ModelSamplingSD3Advanced$6_input, ModelSamplingSD3Advanced$6_output> {
    nameInComfy: "ModelSamplingSD3Advanced+"
}
export interface ModelSamplingSD3Advanced$6_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelSamplingSD3Advanced$6_input {
    model: _MODEL
    /** default=3 min=100 max=100 step=0.01 */
    shift?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.05 */
    cut_off?: _FLOAT
    /** default=2 min=10 max=10 step=0.05 */
    shift_multiplier?: _FLOAT
}

// ApplyCLIPSeg+ [essentials_segmentation]
export interface ApplyCLIPSeg$6 extends HasSingle_MASK, ComfyNode<ApplyCLIPSeg$6_input, ApplyCLIPSeg$6_output> {
    nameInComfy: "ApplyCLIPSeg+"
}
export interface ApplyCLIPSeg$6_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface ApplyCLIPSeg$6_input {
    clip_seg: _CLIP_SEG
    image: _IMAGE
    /** default="" */
    prompt?: _STRING
    /** default=0.4 min=1 max=1 step=0.05 */
    threshold?: _FLOAT
    /** default=9 min=32 max=32 step=1 */
    smooth?: _INT
    /** default=0 min=32 max=32 step=1 */
    dilate?: _INT
    /** default=0 min=64 max=64 step=1 */
    blur?: _INT
}

// LoadCLIPSegModels+ [essentials_segmentation]
export interface LoadCLIPSegModels$6 extends HasSingle_CLIP_SEG, ComfyNode<LoadCLIPSegModels$6_input, LoadCLIPSegModels$6_output> {
    nameInComfy: "LoadCLIPSegModels+"
}
export interface LoadCLIPSegModels$6_output {
    CLIP_SEG: ComfyNodeOutput<'CLIP_SEG', 0>,
}
export interface LoadCLIPSegModels$6_input {
}

// DrawText+ [essentials_text]
export interface DrawText$6 extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<DrawText$6_input, DrawText$6_output> {
    nameInComfy: "DrawText+"
}
export interface DrawText$6_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface DrawText$6_input {
    /** default="Hello, World!" */
    text?: _STRING
    font: Enum_DrawText$6_font
    /** default=56 min=9999 max=9999 step=1 */
    size?: _INT
    /** default="#FFFFFF" */
    color?: _STRING
    /** default="#00000000" */
    background_color?: _STRING
    /** default=0 min=100 max=100 step=1 */
    shadow_distance?: _INT
    /** default=0 min=100 max=100 step=1 */
    shadow_blur?: _INT
    /** default="#000000" */
    shadow_color?: _STRING
    horizontal_align: Enum_ImageTextMultiline_align
    vertical_align: Enum_CR_Overlay_Text_align
    /** default=0 min=16384 max=16384 step=1 */
    offset_x?: _INT
    /** default=0 min=16384 max=16384 step=1 */
    offset_y?: _INT
    direction: Enum_DrawText$6_direction
    img_composite?: _IMAGE
}

// BatchCount+ [essentials_utilities]
export interface BatchCount$6 extends HasSingle_INT, ComfyNode<BatchCount$6_input, BatchCount$6_output> {
    nameInComfy: "BatchCount+"
}
export interface BatchCount$6_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface BatchCount$6_input {
    /** */
    batch: _$Star
}

// ConsoleDebug+ [essentials_utilities]
export interface ConsoleDebug$6 extends ComfyNode<ConsoleDebug$6_input, ConsoleDebug$6_output> {
    nameInComfy: "ConsoleDebug+"
}
export interface ConsoleDebug$6_output {
}
export interface ConsoleDebug$6_input {
    /** */
    value: _$Star
    /** default="Value:" */
    prefix?: _STRING
}

// DebugTensorShape+ [essentials_utilities]
export interface DebugTensorShape$6 extends ComfyNode<DebugTensorShape$6_input, DebugTensorShape$6_output> {
    nameInComfy: "DebugTensorShape+"
}
export interface DebugTensorShape$6_output {
}
export interface DebugTensorShape$6_input {
    /** */
    tensor: _$Star
}

// DisplayAny [essentials_utilities]
export interface DisplayAny extends HasSingle_STRING, ComfyNode<DisplayAny_input, DisplayAny_output> {
    nameInComfy: "DisplayAny"
}
export interface DisplayAny_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface DisplayAny_input {
    /** */
    input: _$Star
    mode: Enum_DisplayAny_mode
}

// ModelCompile+ [essentials_utilities]
export interface ModelCompile$6 extends HasSingle_MODEL, ComfyNode<ModelCompile$6_input, ModelCompile$6_output> {
    nameInComfy: "ModelCompile+"
}
export interface ModelCompile$6_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface ModelCompile$6_input {
    model: _MODEL
    /** default=false */
    fullgraph?: _BOOLEAN
    /** default=false */
    dynamic?: _BOOLEAN
    mode: Enum_TorchCompileModelFluxAdvanced_mode
}

// RemoveLatentMask+ [essentials_utilities]
export interface RemoveLatentMask$6 extends HasSingle_LATENT, ComfyNode<RemoveLatentMask$6_input, RemoveLatentMask$6_output> {
    nameInComfy: "RemoveLatentMask+"
}
export interface RemoveLatentMask$6_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface RemoveLatentMask$6_input {
    samples: _LATENT
}

// SDXLEmptyLatentSizePicker+ [essentials_utilities]
export interface SDXLEmptyLatentSizePicker$6 extends HasSingle_LATENT, ComfyNode<SDXLEmptyLatentSizePicker$6_input, SDXLEmptyLatentSizePicker$6_output> {
    nameInComfy: "SDXLEmptyLatentSizePicker+"
}
export interface SDXLEmptyLatentSizePicker$6_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface SDXLEmptyLatentSizePicker$6_input {
    /** default="1024x1024 (1.0)" */
    resolution?: Enum_SDXLEmptyLatentSizePicker$6_resolution
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    width_override?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    height_override?: _INT
}

// SimpleComparison+ [essentials_utilities]
export interface SimpleComparison$6 extends HasSingle_BOOLEAN, ComfyNode<SimpleComparison$6_input, SimpleComparison$6_output> {
    nameInComfy: "SimpleComparison+"
}
export interface SimpleComparison$6_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface SimpleComparison$6_input {
    /** default=0 */
    a?: _$Star
    /** default=0 */
    b?: _$Star
    comparison: Enum_SimpleComparison$6_comparison
}

// SimpleCondition+ [essentials_utilities]
export interface SimpleCondition$6 extends HasSingle_$Star, ComfyNode<SimpleCondition$6_input, SimpleCondition$6_output> {
    nameInComfy: "SimpleCondition+"
}
export interface SimpleCondition$6_output {
    result: ComfyNodeOutput<'$Star', 0>,
}
export interface SimpleCondition$6_input {
    /** default=0 */
    evaluate?: _$Star
    /** default=0 */
    on_true?: _$Star
    /** */
    on_false?: _$Star
}

// SimpleMath+ [essentials_utilities]
export interface SimpleMath$6 extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<SimpleMath$6_input, SimpleMath$6_output> {
    nameInComfy: "SimpleMath+"
}
export interface SimpleMath$6_output {
    INT: ComfyNodeOutput<'INT', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
}
export interface SimpleMath$6_input {
    /** default="" */
    value?: _STRING
    /** default=0 */
    a?: _$Star
    /** default=0 */
    b?: _$Star
    /** default=0 */
    c?: _$Star
}

// SimpleMathDual+ [essentials_utilities]
export interface SimpleMathDual$6 extends ComfyNode<SimpleMathDual$6_input, SimpleMathDual$6_output> {
    nameInComfy: "SimpleMathDual+"
}
export interface SimpleMathDual$6_output {
    int_1: ComfyNodeOutput<'INT', 0>,
    float_1: ComfyNodeOutput<'FLOAT', 1>,
    int_2: ComfyNodeOutput<'INT', 2>,
    float_2: ComfyNodeOutput<'FLOAT', 3>,
}
export interface SimpleMathDual$6_input {
    /** default="" */
    value_1?: _STRING
    /** default="" */
    value_2?: _STRING
    /** default=0 */
    a?: _$Star
    /** default=0 */
    b?: _$Star
    /** default=0 */
    c?: _$Star
    /** default=0 */
    d?: _$Star
}

// SimpleMathCondition+ [essentials_utilities]
export interface SimpleMathCondition$6 extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<SimpleMathCondition$6_input, SimpleMathCondition$6_output> {
    nameInComfy: "SimpleMathCondition+"
}
export interface SimpleMathCondition$6_output {
    INT: ComfyNodeOutput<'INT', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
}
export interface SimpleMathCondition$6_input {
    /** default=0 */
    evaluate?: _$Star
    /** default="" */
    on_true?: _STRING
    /** default="" */
    on_false?: _STRING
    /** default=0 */
    a?: _$Star
    /** default=0 */
    b?: _$Star
    /** default=0 */
    c?: _$Star
}

// SimpleMathBoolean+ [essentials_utilities]
export interface SimpleMathBoolean$6 extends HasSingle_BOOLEAN, ComfyNode<SimpleMathBoolean$6_input, SimpleMathBoolean$6_output> {
    nameInComfy: "SimpleMathBoolean+"
}
export interface SimpleMathBoolean$6_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface SimpleMathBoolean$6_input {
    /** default=false */
    value?: _BOOLEAN
}

// SimpleMathFloat+ [essentials_utilities]
export interface SimpleMathFloat$6 extends HasSingle_FLOAT, ComfyNode<SimpleMathFloat$6_input, SimpleMathFloat$6_output> {
    nameInComfy: "SimpleMathFloat+"
}
export interface SimpleMathFloat$6_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface SimpleMathFloat$6_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.05 */
    value?: _FLOAT
}

// SimpleMathInt+ [essentials_utilities]
export interface SimpleMathInt$6 extends HasSingle_INT, ComfyNode<SimpleMathInt$6_input, SimpleMathInt$6_output> {
    nameInComfy: "SimpleMathInt+"
}
export interface SimpleMathInt$6_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface SimpleMathInt$6_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    value?: _INT
}

// SimpleMathPercent+ [essentials_utilities]
export interface SimpleMathPercent$6 extends HasSingle_FLOAT, ComfyNode<SimpleMathPercent$6_input, SimpleMathPercent$6_output> {
    nameInComfy: "SimpleMathPercent+"
}
export interface SimpleMathPercent$6_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface SimpleMathPercent$6_input {
    /** default=0 min=1 max=1 step=0.05 */
    value?: _FLOAT
}

// SimpleMathSlider+ [essentials_utilities]
export interface SimpleMathSlider$6 extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<SimpleMathSlider$6_input, SimpleMathSlider$6_output> {
    nameInComfy: "SimpleMathSlider+"
}
export interface SimpleMathSlider$6_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface SimpleMathSlider$6_input {
    /** default=0.5 min=1 max=1 step=0.001 */
    value?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.001 */
    min?: _FLOAT
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=0.001 */
    max?: _FLOAT
    /** default=0 min=10 max=10 step=1 */
    rounding?: _INT
}

// SimpleMathSliderLowRes+ [essentials_utilities]
export interface SimpleMathSliderLowRes$6 extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<SimpleMathSliderLowRes$6_input, SimpleMathSliderLowRes$6_output> {
    nameInComfy: "SimpleMathSliderLowRes+"
}
export interface SimpleMathSliderLowRes$6_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface SimpleMathSliderLowRes$6_input {
    /** default=5 min=10 max=10 step=1 */
    value?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.001 */
    min?: _FLOAT
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=0.001 */
    max?: _FLOAT
    /** default=0 min=10 max=10 step=1 */
    rounding?: _INT
}

// Lerp [FizzNodes 📅🅕🅝_WaveNodes]
export interface Lerp extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<Lerp_input, Lerp_output> {
    nameInComfy: "Lerp"
}
export interface Lerp_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface Lerp_input {
    /** default=1 min=9999 max=9999 step=1 */
    num_Images?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// SinWave [FizzNodes 📅🅕🅝_WaveNodes]
export interface SinWave extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<SinWave_input, SinWave_output> {
    nameInComfy: "SinWave"
}
export interface SinWave_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface SinWave_input {
    /** default=1 min=9999 max=9999 step=1 */
    phase?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.1 */
    amplitude?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    x_translation?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.05 */
    y_translation?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// InvSinWave [FizzNodes 📅🅕🅝_WaveNodes]
export interface InvSinWave extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<InvSinWave_input, InvSinWave_output> {
    nameInComfy: "InvSinWave"
}
export interface InvSinWave_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface InvSinWave_input {
    /** default=1 min=9999 max=9999 step=1 */
    phase?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.1 */
    amplitude?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    x_translation?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.05 */
    y_translation?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// CosWave [FizzNodes 📅🅕🅝_WaveNodes]
export interface CosWave extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<CosWave_input, CosWave_output> {
    nameInComfy: "CosWave"
}
export interface CosWave_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface CosWave_input {
    /** default=1 min=9999 max=9999 step=1 */
    phase?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.1 */
    amplitude?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    x_translation?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.05 */
    y_translation?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// InvCosWave [FizzNodes 📅🅕🅝_WaveNodes]
export interface InvCosWave extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<InvCosWave_input, InvCosWave_output> {
    nameInComfy: "InvCosWave"
}
export interface InvCosWave_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface InvCosWave_input {
    /** default=1 min=9999 max=9999 step=1 */
    phase?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.1 */
    amplitude?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    x_translation?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.05 */
    y_translation?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// SquareWave [FizzNodes 📅🅕🅝_WaveNodes]
export interface SquareWave extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<SquareWave_input, SquareWave_output> {
    nameInComfy: "SquareWave"
}
export interface SquareWave_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface SquareWave_input {
    /** default=1 min=9999 max=9999 step=1 */
    phase?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.1 */
    amplitude?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    x_translation?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.05 */
    y_translation?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// SawtoothWave [FizzNodes 📅🅕🅝_WaveNodes]
export interface SawtoothWave extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<SawtoothWave_input, SawtoothWave_output> {
    nameInComfy: "SawtoothWave"
}
export interface SawtoothWave_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface SawtoothWave_input {
    /** default=1 min=9999 max=9999 step=1 */
    phase?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.1 */
    step_increment?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    x_translation?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.05 */
    start_value?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// TriangleWave [FizzNodes 📅🅕🅝_WaveNodes]
export interface TriangleWave extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<TriangleWave_input, TriangleWave_output> {
    nameInComfy: "TriangleWave"
}
export interface TriangleWave_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface TriangleWave_input {
    /** default=1 min=9999 max=9999 step=1 */
    phase?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.1 */
    amplitude?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    x_translation?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.05 */
    y_translation?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// AbsCosWave [FizzNodes 📅🅕🅝_WaveNodes]
export interface AbsCosWave extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<AbsCosWave_input, AbsCosWave_output> {
    nameInComfy: "AbsCosWave"
}
export interface AbsCosWave_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface AbsCosWave_input {
    /** default=1 min=9999 max=9999 step=1 */
    phase?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.1 */
    amplitude?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    x_translation?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.05 */
    max_value?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// AbsSinWave [FizzNodes 📅🅕🅝_WaveNodes]
export interface AbsSinWave extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<AbsSinWave_input, AbsSinWave_output> {
    nameInComfy: "AbsSinWave"
}
export interface AbsSinWave_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface AbsSinWave_input {
    /** default=1 min=9999 max=9999 step=1 */
    phase?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.1 */
    amplitude?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    x_translation?: _FLOAT
    /** default=0.5 min=9999 max=9999 step=0.05 */
    max_value?: _FLOAT
    /** default=1 min=9999 max=9999 step=1 */
    current_frame?: _INT
}

// PromptSchedule [FizzNodes 📅🅕🅝_ScheduleNodes]
export interface PromptSchedule extends ComfyNode<PromptSchedule_input, PromptSchedule_output> {
    nameInComfy: "PromptSchedule"
}
export interface PromptSchedule_output {
    POS: ComfyNodeOutput<'CONDITIONING', 0>,
    NEG: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface PromptSchedule_input {
    /** default="\"0\" :\"\",\n\"11\" :\"\",\n\"23\" :\"\",\n\"35\" :\"\",\n\"47\" :\"\",\n\"59\" :\"\",\n\"71\" :\"\",\n\"83\" :\"\",\n\"95\" :\"\",\n\"107\" :\"\",\n\"119\" :\"\"\n" */
    text?: _STRING
    clip: _CLIP
    /** default=120 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=0 min=999999 max=999999 step=1 */
    current_frame?: _INT
    /** default=false */
    print_output?: _BOOLEAN
    /** */
    pre_text?: _STRING
    /** */
    app_text?: _STRING
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_a?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_b?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_c?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_d?: _FLOAT
}

// ValueSchedule [FizzNodes 📅🅕🅝_ScheduleNodes]
export interface ValueSchedule extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<ValueSchedule_input, ValueSchedule_output> {
    nameInComfy: "ValueSchedule"
}
export interface ValueSchedule_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface ValueSchedule_input {
    /** default="0:(0),\n11:(0),\n23:(0),\n35:(0),\n47:(0),\n59:(0),\n71:(0),\n83:(0),\n95:(0),\n107:(0),\n119:(0)\n" */
    text?: _STRING
    /** default=120 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=0 min=999999 max=999999 step=1 */
    current_frame?: _INT
    /** default=false */
    print_output?: _BOOLEAN
}

// PromptScheduleNodeFlow [FizzNodes 📅🅕🅝_ScheduleNodes]
export interface PromptScheduleNodeFlow extends HasSingle_INT, HasSingle_STRING, ComfyNode<PromptScheduleNodeFlow_input, PromptScheduleNodeFlow_output> {
    nameInComfy: "PromptScheduleNodeFlow"
}
export interface PromptScheduleNodeFlow_output {
    INT: ComfyNodeOutput<'INT', 0>,
    STRING: ComfyNodeOutput<'STRING', 1>,
}
export interface PromptScheduleNodeFlow_input {
    /** */
    text: _STRING
    /** default=24 min=9999 max=9999 step=1 */
    num_frames?: _INT
    /** */
    in_text?: _STRING
    /** default=0 min=999999 max=999999 step=1 */
    max_frames?: _INT
}

// PromptScheduleNodeFlowEnd [FizzNodes 📅🅕🅝_ScheduleNodes]
export interface PromptScheduleNodeFlowEnd extends ComfyNode<PromptScheduleNodeFlowEnd_input, PromptScheduleNodeFlowEnd_output> {
    nameInComfy: "PromptScheduleNodeFlowEnd"
}
export interface PromptScheduleNodeFlowEnd_output {
    POS: ComfyNodeOutput<'CONDITIONING', 0>,
    NEG: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface PromptScheduleNodeFlowEnd_input {
    /** */
    text: _STRING
    clip: _CLIP
    /** default=0 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=false */
    print_output?: _BOOLEAN
    /** default=0 min=999999 max=999999 step=1 */
    current_frame?: _INT
    /** */
    pre_text?: _STRING
    /** */
    app_text?: _STRING
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_a?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_b?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_c?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_d?: _FLOAT
}

// PromptScheduleEncodeSDXL [FizzNodes 📅🅕🅝_ScheduleNodes]
export interface PromptScheduleEncodeSDXL extends ComfyNode<PromptScheduleEncodeSDXL_input, PromptScheduleEncodeSDXL_output> {
    nameInComfy: "PromptScheduleEncodeSDXL"
}
export interface PromptScheduleEncodeSDXL_output {
    POS: ComfyNodeOutput<'CONDITIONING', 0>,
    NEG: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface PromptScheduleEncodeSDXL_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    /** default=0 min=8192 max=8192 */
    crop_w?: _INT
    /** default=0 min=8192 max=8192 */
    crop_h?: _INT
    /** default=1024 min=8192 max=8192 */
    target_width?: _INT
    /** default=1024 min=8192 max=8192 */
    target_height?: _INT
    /** */
    text_g: _STRING
    clip: _CLIP
    /** */
    text_l: _STRING
    /** default=120 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=0 min=999999 max=999999 step=1 */
    current_frame?: _INT
    /** default=false */
    print_output?: _BOOLEAN
    /** */
    pre_text_G?: _STRING
    /** */
    app_text_G?: _STRING
    /** */
    pre_text_L?: _STRING
    /** */
    app_text_L?: _STRING
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_a?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_b?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_c?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_d?: _FLOAT
}

// StringSchedule [FizzNodes 📅🅕🅝_ScheduleNodes]
export interface StringSchedule extends ComfyNode<StringSchedule_input, StringSchedule_output> {
    nameInComfy: "StringSchedule"
}
export interface StringSchedule_output {
    POS: ComfyNodeOutput<'STRING', 0>,
    NEG: ComfyNodeOutput<'STRING', 1>,
}
export interface StringSchedule_input {
    /** default="\"0\" :\"\",\n\"11\" :\"\",\n\"23\" :\"\",\n\"35\" :\"\",\n\"47\" :\"\",\n\"59\" :\"\",\n\"71\" :\"\",\n\"83\" :\"\",\n\"95\" :\"\",\n\"107\" :\"\",\n\"119\" :\"\"\n" */
    text?: _STRING
    /** default=120 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=0 min=999999 max=999999 step=1 */
    current_frame?: _INT
    /** default=false */
    print_output?: _BOOLEAN
    /** */
    pre_text?: _STRING
    /** */
    app_text?: _STRING
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_a?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_b?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_c?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_d?: _FLOAT
}

// BatchPromptSchedule [FizzNodes 📅🅕🅝_BatchScheduleNodes]
export interface BatchPromptSchedule extends ComfyNode<BatchPromptSchedule_input, BatchPromptSchedule_output> {
    nameInComfy: "BatchPromptSchedule"
}
export interface BatchPromptSchedule_output {
    POS: ComfyNodeOutput<'CONDITIONING', 0>,
    NEG: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface BatchPromptSchedule_input {
    /** default="\"0\" :\"\",\n\"11\" :\"\",\n\"23\" :\"\",\n\"35\" :\"\",\n\"47\" :\"\",\n\"59\" :\"\",\n\"71\" :\"\",\n\"83\" :\"\",\n\"95\" :\"\",\n\"107\" :\"\",\n\"119\" :\"\"\n" */
    text?: _STRING
    clip: _CLIP
    /** default=120 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=false */
    print_output?: _BOOLEAN
    /** */
    pre_text?: _STRING
    /** */
    app_text?: _STRING
    /** default=0 min=9999 max=9999 step=1 */
    start_frame?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    end_frame?: _INT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_a?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_b?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_c?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_d?: _FLOAT
}

// BatchValueSchedule [FizzNodes 📅🅕🅝_BatchScheduleNodes]
export interface BatchValueSchedule extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<BatchValueSchedule_input, BatchValueSchedule_output> {
    nameInComfy: "BatchValueSchedule"
}
export interface BatchValueSchedule_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
}
export interface BatchValueSchedule_input {
    /** default="0:(0),\n11:(0),\n23:(0),\n35:(0),\n47:(0),\n59:(0),\n71:(0),\n83:(0),\n95:(0),\n107:(0),\n119:(0)\n" */
    text?: _STRING
    /** default=120 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=false */
    print_output?: _BOOLEAN
}

// BatchPromptScheduleEncodeSDXL [FizzNodes 📅🅕🅝_BatchScheduleNodes]
export interface BatchPromptScheduleEncodeSDXL extends ComfyNode<BatchPromptScheduleEncodeSDXL_input, BatchPromptScheduleEncodeSDXL_output> {
    nameInComfy: "BatchPromptScheduleEncodeSDXL"
}
export interface BatchPromptScheduleEncodeSDXL_output {
    POS: ComfyNodeOutput<'CONDITIONING', 0>,
    NEG: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface BatchPromptScheduleEncodeSDXL_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    /** default=0 min=8192 max=8192 */
    crop_w?: _INT
    /** default=0 min=8192 max=8192 */
    crop_h?: _INT
    /** default=1024 min=8192 max=8192 */
    target_width?: _INT
    /** default=1024 min=8192 max=8192 */
    target_height?: _INT
    /** */
    text_g: _STRING
    clip: _CLIP
    /** */
    text_l: _STRING
    /** default=120 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=false */
    print_output?: _BOOLEAN
    /** */
    pre_text_G?: _STRING
    /** */
    app_text_G?: _STRING
    /** */
    pre_text_L?: _STRING
    /** */
    app_text_L?: _STRING
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_a?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_b?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_c?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_d?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    start_frame?: _INT
    /** default=120 min=9999 max=9999 step=1 */
    end_frame?: _INT
}

// BatchStringSchedule [FizzNodes 📅🅕🅝_BatchScheduleNodes]
export interface BatchStringSchedule extends ComfyNode<BatchStringSchedule_input, BatchStringSchedule_output> {
    nameInComfy: "BatchStringSchedule"
}
export interface BatchStringSchedule_output {
    POS: ComfyNodeOutput<'STRING', 0>,
    NEG: ComfyNodeOutput<'STRING', 1>,
}
export interface BatchStringSchedule_input {
    /** default="\"0\" :\"\",\n\"11\" :\"\",\n\"23\" :\"\",\n\"35\" :\"\",\n\"47\" :\"\",\n\"59\" :\"\",\n\"71\" :\"\",\n\"83\" :\"\",\n\"95\" :\"\",\n\"107\" :\"\",\n\"119\" :\"\"\n" */
    text?: _STRING
    /** default=120 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=false */
    print_output?: _BOOLEAN
    /** */
    pre_text?: _STRING
    /** */
    app_text?: _STRING
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_a?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_b?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_c?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_d?: _FLOAT
}

// BatchValueScheduleLatentInput [FizzNodes 📅🅕🅝_BatchScheduleNodes]
export interface BatchValueScheduleLatentInput extends HasSingle_FLOAT, HasSingle_INT, HasSingle_LATENT, ComfyNode<BatchValueScheduleLatentInput_input, BatchValueScheduleLatentInput_output> {
    nameInComfy: "BatchValueScheduleLatentInput"
}
export interface BatchValueScheduleLatentInput_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    INT: ComfyNodeOutput<'INT', 1>,
    LATENT: ComfyNodeOutput<'LATENT', 2>,
}
export interface BatchValueScheduleLatentInput_input {
    /** default="0:(0),\n11:(0),\n23:(0),\n35:(0),\n47:(0),\n59:(0),\n71:(0),\n83:(0),\n95:(0),\n107:(0),\n119:(0)\n" */
    text?: _STRING
    num_latents: _LATENT
    /** default=false */
    print_output?: _BOOLEAN
}

// BatchPromptScheduleSDXLLatentInput [FizzNodes 📅🅕🅝_BatchScheduleNodes]
export interface BatchPromptScheduleSDXLLatentInput extends HasSingle_LATENT, ComfyNode<BatchPromptScheduleSDXLLatentInput_input, BatchPromptScheduleSDXLLatentInput_output> {
    nameInComfy: "BatchPromptScheduleSDXLLatentInput"
}
export interface BatchPromptScheduleSDXLLatentInput_output {
    POS: ComfyNodeOutput<'CONDITIONING', 0>,
    NEG: ComfyNodeOutput<'CONDITIONING', 1>,
    INPUT_LATENTS: ComfyNodeOutput<'LATENT', 2>,
}
export interface BatchPromptScheduleSDXLLatentInput_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    /** default=0 min=8192 max=8192 */
    crop_w?: _INT
    /** default=0 min=8192 max=8192 */
    crop_h?: _INT
    /** default=1024 min=8192 max=8192 */
    target_width?: _INT
    /** default=1024 min=8192 max=8192 */
    target_height?: _INT
    /** */
    text_g: _STRING
    clip: _CLIP
    /** */
    text_l: _STRING
    num_latents: _LATENT
    /** default=false */
    print_output?: _BOOLEAN
    /** */
    pre_text_G?: _STRING
    /** */
    app_text_G?: _STRING
    /** */
    pre_text_L?: _STRING
    /** */
    app_text_L?: _STRING
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_a?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_b?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_c?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_d?: _FLOAT
    /** default=0 min=9999 max=9999 step=1 */
    start_frame?: _INT
    /** default=120 min=9999 max=9999 step=1 */
    end_frame?: _INT
}

// BatchPromptScheduleLatentInput [FizzNodes 📅🅕🅝_BatchScheduleNodes]
export interface BatchPromptScheduleLatentInput extends HasSingle_LATENT, ComfyNode<BatchPromptScheduleLatentInput_input, BatchPromptScheduleLatentInput_output> {
    nameInComfy: "BatchPromptScheduleLatentInput"
}
export interface BatchPromptScheduleLatentInput_output {
    POS: ComfyNodeOutput<'CONDITIONING', 0>,
    NEG: ComfyNodeOutput<'CONDITIONING', 1>,
    INPUT_LATENTS: ComfyNodeOutput<'LATENT', 2>,
}
export interface BatchPromptScheduleLatentInput_input {
    /** default="\"0\" :\"\",\n\"11\" :\"\",\n\"23\" :\"\",\n\"35\" :\"\",\n\"47\" :\"\",\n\"59\" :\"\",\n\"71\" :\"\",\n\"83\" :\"\",\n\"95\" :\"\",\n\"107\" :\"\",\n\"119\" :\"\"\n" */
    text?: _STRING
    clip: _CLIP
    num_latents: _LATENT
    /** default=false */
    print_output?: _BOOLEAN
    /** */
    pre_text?: _STRING
    /** */
    app_text?: _STRING
    /** default=0 min=9999 max=9999 step=1 */
    start_frame?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    end_frame?: _INT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_a?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_b?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_c?: _FLOAT
    /** default=0 min=9999 max=9999 step=0.1 */
    pw_d?: _FLOAT
}

// ImagesFromBatchSchedule [FizzNodes 📅🅕🅝_ScheduleNodes]
export interface ImagesFromBatchSchedule extends HasSingle_IMAGE, ComfyNode<ImagesFromBatchSchedule_input, ImagesFromBatchSchedule_output> {
    nameInComfy: "ImagesFromBatchSchedule"
}
export interface ImagesFromBatchSchedule_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ImagesFromBatchSchedule_input {
    images: _IMAGE
    /** default="\"0\" :\"\",\n\"11\" :\"\",\n\"23\" :\"\",\n\"35\" :\"\",\n\"47\" :\"\",\n\"59\" :\"\",\n\"71\" :\"\",\n\"83\" :\"\",\n\"95\" :\"\",\n\"107\" :\"\",\n\"119\" :\"\"\n" */
    text?: _STRING
    /** default=0 min=999999 max=999999 step=1 */
    current_frame?: _INT
    /** default=120 min=999999 max=999999 step=1 */
    max_frames?: _INT
    /** default=false */
    print_output?: _BOOLEAN
}

// StringConcatenate [FizzNodes 📅🅕🅝_FrameNodes]
export interface StringConcatenate extends HasSingle_STRING, ComfyNode<StringConcatenate_input, StringConcatenate_output> {
    nameInComfy: "StringConcatenate"
}
export interface StringConcatenate_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface StringConcatenate_input {
    /** default="" */
    text_a?: _STRING
    /** default=0 */
    frame_a?: _INT
    /** default="" */
    text_b?: _STRING
    /** default=12 */
    frame_b?: _INT
    /** default="" */
    text_c?: _STRING
    /** default=24 */
    frame_c?: _INT
    /** default="" */
    text_d?: _STRING
    /** default=36 */
    frame_d?: _INT
    /** default="" */
    text_e?: _STRING
    /** default=48 */
    frame_e?: _INT
    /** default="" */
    text_f?: _STRING
    /** default=60 */
    frame_f?: _INT
    /** default="" */
    text_g?: _STRING
    /** default=72 */
    frame_g?: _INT
}

// Init FizzFrame [FizzNodes 📅🅕🅝_FrameNodes]
export interface Init_FizzFrame extends HasSingle_FIZZFRAME, ComfyNode<Init_FizzFrame_input, Init_FizzFrame_output> {
    nameInComfy: "Init FizzFrame"
}
export interface Init_FizzFrame_output {
    FIZZFRAME: ComfyNodeOutput<'FIZZFRAME', 0>,
    POS_COND: ComfyNodeOutput<'CONDITIONING', 1>,
    NEG_COND: ComfyNodeOutput<'CONDITIONING', 2>,
}
export interface Init_FizzFrame_input {
    /** default=0 min=undefined */
    frame?: _INT
    /** */
    positive_text: _STRING
    /** */
    negative_text?: _STRING
    /** */
    general_positive?: _STRING
    /** */
    general_negative?: _STRING
    /** */
    previous_frame?: _FIZZFRAME
    clip?: _CLIP
}

// FizzFrame [FizzNodes 📅🅕🅝_FrameNodes]
export interface FizzFrame extends HasSingle_FIZZFRAME, ComfyNode<FizzFrame_input, FizzFrame_output> {
    nameInComfy: "FizzFrame"
}
export interface FizzFrame_output {
    FIZZFRAME: ComfyNodeOutput<'FIZZFRAME', 0>,
    POS_COND: ComfyNodeOutput<'CONDITIONING', 1>,
    NEG_COND: ComfyNodeOutput<'CONDITIONING', 2>,
}
export interface FizzFrame_input {
    /** default=0 min=undefined */
    frame?: _INT
    /** */
    previous_frame: _FIZZFRAME
    /** */
    positive_text: _STRING
    /** */
    negative_text?: _STRING
}

// FizzFrameConcatenate [FizzNodes 📅🅕🅝_FrameNodes]
export interface FizzFrameConcatenate extends HasSingle_STRING, ComfyNode<FizzFrameConcatenate_input, FizzFrameConcatenate_output> {
    nameInComfy: "FizzFrameConcatenate"
}
export interface FizzFrameConcatenate_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface FizzFrameConcatenate_input {
    /** */
    frame: _FIZZFRAME
}

// ConcatStringSingle [FizzNodes 📅🅕🅝_HelperNodes]
export interface ConcatStringSingle extends HasSingle_STRING, ComfyNode<ConcatStringSingle_input, ConcatStringSingle_output> {
    nameInComfy: "ConcatStringSingle"
}
export interface ConcatStringSingle_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ConcatStringSingle_input {
    /** default="" */
    string_a?: _STRING
    /** default="" */
    string_b?: _STRING
}

// convertKeyframeKeysToBatchKeys [FizzNodes 📅🅕🅝_HelperNodes]
export interface convertKeyframeKeysToBatchKeys extends HasSingle_INT, ComfyNode<convertKeyframeKeysToBatchKeys_input, convertKeyframeKeysToBatchKeys_output> {
    nameInComfy: "convertKeyframeKeysToBatchKeys"
}
export interface convertKeyframeKeysToBatchKeys_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface convertKeyframeKeysToBatchKeys_input {
    /** default=0 */
    input?: _INT
    /** default=16 */
    num_latents?: _INT
}

// CalculateFrameOffset [FizzNodes 📅🅕🅝_HelperNodes]
export interface CalculateFrameOffset extends HasSingle_INT, ComfyNode<CalculateFrameOffset_input, CalculateFrameOffset_output> {
    nameInComfy: "CalculateFrameOffset"
}
export interface CalculateFrameOffset_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface CalculateFrameOffset_input {
    /** default=0 min=undefined */
    current_frame?: _INT
    /** default=18 min=undefined */
    max_frames?: _INT
    /** default=4 min=undefined */
    num_latent_inputs?: _INT
    /** default=4 min=undefined */
    index?: _INT
}

// IPAdapter [ipadapter]
export interface IPAdapter extends HasSingle_MODEL, ComfyNode<IPAdapter_input, IPAdapter_output> {
    nameInComfy: "IPAdapter"
}
export interface IPAdapter_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapter_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    weight_type: Enum_AV$_IPAdapter_weight_type
    attn_mask?: _MASK
}

// IPAdapterAdvanced [ipadapter]
export interface IPAdapterAdvanced extends HasSingle_MODEL, ComfyNode<IPAdapterAdvanced_input, IPAdapterAdvanced_output> {
    nameInComfy: "IPAdapterAdvanced"
}
export interface IPAdapterAdvanced_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterAdvanced_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterBatch [ipadapter]
export interface IPAdapterBatch extends HasSingle_MODEL, ComfyNode<IPAdapterBatch_input, IPAdapterBatch_output> {
    nameInComfy: "IPAdapterBatch"
}
export interface IPAdapterBatch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterBatch_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    /** default=0 min=4096 max=4096 */
    encode_batch_size?: _INT
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterFaceID [ipadapter_faceid]
export interface IPAdapterFaceID extends HasSingle_MODEL, HasSingle_IMAGE, ComfyNode<IPAdapterFaceID_input, IPAdapterFaceID_output> {
    nameInComfy: "IPAdapterFaceID"
}
export interface IPAdapterFaceID_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    face_image: ComfyNodeOutput<'IMAGE', 1>,
}
export interface IPAdapterFaceID_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    weight_faceidv2?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
    insightface?: _INSIGHTFACE
}

// IPAdapterFaceIDKolors [ipadapter_faceid]
export interface IPAdapterFaceIDKolors extends HasSingle_MODEL, HasSingle_IMAGE, ComfyNode<IPAdapterFaceIDKolors_input, IPAdapterFaceIDKolors_output> {
    nameInComfy: "IPAdapterFaceIDKolors"
}
export interface IPAdapterFaceIDKolors_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    face_image: ComfyNodeOutput<'IMAGE', 1>,
}
export interface IPAdapterFaceIDKolors_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    weight_faceidv2?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    weight_kolors?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
    insightface?: _INSIGHTFACE
}

// IPAAdapterFaceIDBatch [ipadapter_faceid]
export interface IPAAdapterFaceIDBatch extends HasSingle_MODEL, HasSingle_IMAGE, ComfyNode<IPAAdapterFaceIDBatch_input, IPAAdapterFaceIDBatch_output> {
    nameInComfy: "IPAAdapterFaceIDBatch"
}
export interface IPAAdapterFaceIDBatch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    face_image: ComfyNodeOutput<'IMAGE', 1>,
}
export interface IPAAdapterFaceIDBatch_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    weight_faceidv2?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
    insightface?: _INSIGHTFACE
}

// IPAdapterTiled [ipadapter_tiled]
export interface IPAdapterTiled extends HasSingle_MODEL, HasSingle_IMAGE, HasSingle_MASK, ComfyNode<IPAdapterTiled_input, IPAdapterTiled_output> {
    nameInComfy: "IPAdapterTiled"
}
export interface IPAdapterTiled_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    tiles: ComfyNodeOutput<'IMAGE', 1>,
    masks: ComfyNodeOutput<'MASK', 2>,
}
export interface IPAdapterTiled_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterTiledBatch [ipadapter_tiled]
export interface IPAdapterTiledBatch extends HasSingle_MODEL, HasSingle_IMAGE, HasSingle_MASK, ComfyNode<IPAdapterTiledBatch_input, IPAdapterTiledBatch_output> {
    nameInComfy: "IPAdapterTiledBatch"
}
export interface IPAdapterTiledBatch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    tiles: ComfyNodeOutput<'IMAGE', 1>,
    masks: ComfyNodeOutput<'MASK', 2>,
}
export interface IPAdapterTiledBatch_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    /** default=0 min=4096 max=4096 */
    encode_batch_size?: _INT
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterEmbeds [ipadapter_embeds]
export interface IPAdapterEmbeds extends HasSingle_MODEL, ComfyNode<IPAdapterEmbeds_input, IPAdapterEmbeds_output> {
    nameInComfy: "IPAdapterEmbeds"
}
export interface IPAdapterEmbeds_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterEmbeds_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    pos_embed: _EMBEDS
    /** default=1 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    neg_embed?: _EMBEDS
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterEmbedsBatch [ipadapter_embeds]
export interface IPAdapterEmbedsBatch extends HasSingle_MODEL, ComfyNode<IPAdapterEmbedsBatch_input, IPAdapterEmbedsBatch_output> {
    nameInComfy: "IPAdapterEmbedsBatch"
}
export interface IPAdapterEmbedsBatch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterEmbedsBatch_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    pos_embed: _EMBEDS
    /** default=1 min=3 max=3 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    neg_embed?: _EMBEDS
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterStyleComposition [ipadapter_style_composition]
export interface IPAdapterStyleComposition extends HasSingle_MODEL, ComfyNode<IPAdapterStyleComposition_input, IPAdapterStyleComposition_output> {
    nameInComfy: "IPAdapterStyleComposition"
}
export interface IPAdapterStyleComposition_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterStyleComposition_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image_style: _IMAGE
    image_composition: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight_style?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    weight_composition?: _FLOAT
    /** default=false */
    expand_style?: _BOOLEAN
    /** default="average" */
    combine_embeds?: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterStyleCompositionBatch [ipadapter_style_composition]
export interface IPAdapterStyleCompositionBatch extends HasSingle_MODEL, ComfyNode<IPAdapterStyleCompositionBatch_input, IPAdapterStyleCompositionBatch_output> {
    nameInComfy: "IPAdapterStyleCompositionBatch"
}
export interface IPAdapterStyleCompositionBatch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterStyleCompositionBatch_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image_style: _IMAGE
    image_composition: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight_style?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    weight_composition?: _FLOAT
    /** default=false */
    expand_style?: _BOOLEAN
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterMS [ipadapter_dev]
export interface IPAdapterMS extends HasSingle_MODEL, ComfyNode<IPAdapterMS_input, IPAdapterMS_output> {
    nameInComfy: "IPAdapterMS"
}
export interface IPAdapterMS_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterMS_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    weight_faceidv2?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    /** default="" */
    layer_weights?: _STRING
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
    insightface?: _INSIGHTFACE
}

// IPAdapterClipVisionEnhancer [ipadapter_dev]
export interface IPAdapterClipVisionEnhancer extends HasSingle_MODEL, ComfyNode<IPAdapterClipVisionEnhancer_input, IPAdapterClipVisionEnhancer_output> {
    nameInComfy: "IPAdapterClipVisionEnhancer"
}
export interface IPAdapterClipVisionEnhancer_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterClipVisionEnhancer_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    /** default=2 min=16 max=16 */
    enhance_tiles?: _INT
    /** default=1 min=1 max=1 step=0.05 */
    enhance_ratio?: _FLOAT
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterClipVisionEnhancerBatch [ipadapter_dev]
export interface IPAdapterClipVisionEnhancerBatch extends HasSingle_MODEL, ComfyNode<IPAdapterClipVisionEnhancerBatch_input, IPAdapterClipVisionEnhancerBatch_output> {
    nameInComfy: "IPAdapterClipVisionEnhancerBatch"
}
export interface IPAdapterClipVisionEnhancerBatch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterClipVisionEnhancerBatch_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    /** default=2 min=16 max=16 */
    enhance_tiles?: _INT
    /** default=0.5 min=1 max=1 step=0.05 */
    enhance_ratio?: _FLOAT
    /** default=0 min=4096 max=4096 */
    encode_batch_size?: _INT
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterFromParams [ipadapter_params]
export interface IPAdapterFromParams extends HasSingle_MODEL, ComfyNode<IPAdapterFromParams_input, IPAdapterFromParams_output> {
    nameInComfy: "IPAdapterFromParams"
}
export interface IPAdapterFromParams_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterFromParams_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    ipadapter_params: _IPADAPTER_PARAMS
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    clip_vision?: _CLIP_VISION
}

// IPAdapterPreciseStyleTransfer [ipadapter]
export interface IPAdapterPreciseStyleTransfer extends HasSingle_MODEL, ComfyNode<IPAdapterPreciseStyleTransfer_input, IPAdapterPreciseStyleTransfer_output> {
    nameInComfy: "IPAdapterPreciseStyleTransfer"
}
export interface IPAdapterPreciseStyleTransfer_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterPreciseStyleTransfer_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    style_boost?: _FLOAT
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterPreciseStyleTransferBatch [ipadapter]
export interface IPAdapterPreciseStyleTransferBatch extends HasSingle_MODEL, ComfyNode<IPAdapterPreciseStyleTransferBatch_input, IPAdapterPreciseStyleTransferBatch_output> {
    nameInComfy: "IPAdapterPreciseStyleTransferBatch"
}
export interface IPAdapterPreciseStyleTransferBatch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterPreciseStyleTransferBatch_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight?: _FLOAT
    /** default=1 min=5 max=5 step=0.05 */
    style_boost?: _FLOAT
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterPreciseComposition [ipadapter]
export interface IPAdapterPreciseComposition extends HasSingle_MODEL, ComfyNode<IPAdapterPreciseComposition_input, IPAdapterPreciseComposition_output> {
    nameInComfy: "IPAdapterPreciseComposition"
}
export interface IPAdapterPreciseComposition_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterPreciseComposition_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight?: _FLOAT
    /** default=0 min=5 max=5 step=0.05 */
    composition_boost?: _FLOAT
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterPreciseCompositionBatch [ipadapter]
export interface IPAdapterPreciseCompositionBatch extends HasSingle_MODEL, ComfyNode<IPAdapterPreciseCompositionBatch_input, IPAdapterPreciseCompositionBatch_output> {
    nameInComfy: "IPAdapterPreciseCompositionBatch"
}
export interface IPAdapterPreciseCompositionBatch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface IPAdapterPreciseCompositionBatch_input {
    model: _MODEL
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=5 max=5 step=0.05 */
    weight?: _FLOAT
    /** default=0 min=5 max=5 step=0.05 */
    composition_boost?: _FLOAT
    combine_embeds: Enum_ImpactIPAdapterApplySEGS_combine_embeds
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    embeds_scaling: Enum_IPAdapterAdvanced_embeds_scaling
    image_negative?: _IMAGE
    attn_mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterUnifiedLoader [ipadapter]
export interface IPAdapterUnifiedLoader extends HasSingle_MODEL, HasSingle_IPADAPTER, ComfyNode<IPAdapterUnifiedLoader_input, IPAdapterUnifiedLoader_output> {
    nameInComfy: "IPAdapterUnifiedLoader"
}
export interface IPAdapterUnifiedLoader_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    ipadapter: ComfyNodeOutput<'IPADAPTER', 1>,
}
export interface IPAdapterUnifiedLoader_input {
    model: _MODEL
    preset: Enum_IPAdapterUnifiedLoader_preset
    ipadapter?: _IPADAPTER
}

// IPAdapterUnifiedLoaderFaceID [ipadapter_faceid]
export interface IPAdapterUnifiedLoaderFaceID extends HasSingle_MODEL, HasSingle_IPADAPTER, ComfyNode<IPAdapterUnifiedLoaderFaceID_input, IPAdapterUnifiedLoaderFaceID_output> {
    nameInComfy: "IPAdapterUnifiedLoaderFaceID"
}
export interface IPAdapterUnifiedLoaderFaceID_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    ipadapter: ComfyNodeOutput<'IPADAPTER', 1>,
}
export interface IPAdapterUnifiedLoaderFaceID_input {
    model: _MODEL
    preset: Enum_IPAdapterUnifiedLoaderFaceID_preset
    /** default=0.6 min=1 max=1 step=0.01 */
    lora_strength?: _FLOAT
    provider: Enum_IPAdapterUnifiedLoaderFaceID_provider
    ipadapter?: _IPADAPTER
}

// IPAdapterModelLoader [ipadapter_loaders]
export interface IPAdapterModelLoader extends HasSingle_IPADAPTER, ComfyNode<IPAdapterModelLoader_input, IPAdapterModelLoader_output> {
    nameInComfy: "IPAdapterModelLoader"
}
export interface IPAdapterModelLoader_output {
    IPADAPTER: ComfyNodeOutput<'IPADAPTER', 0>,
}
export interface IPAdapterModelLoader_input {
    ipadapter_file: Enum_AV$_IPAdapterPipe_ip_adapter_name
}

// IPAdapterInsightFaceLoader [ipadapter_loaders]
export interface IPAdapterInsightFaceLoader extends HasSingle_INSIGHTFACE, ComfyNode<IPAdapterInsightFaceLoader_input, IPAdapterInsightFaceLoader_output> {
    nameInComfy: "IPAdapterInsightFaceLoader"
}
export interface IPAdapterInsightFaceLoader_output {
    INSIGHTFACE: ComfyNodeOutput<'INSIGHTFACE', 0>,
}
export interface IPAdapterInsightFaceLoader_input {
    provider: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_provider
    model_name: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_model_name
}

// IPAdapterUnifiedLoaderCommunity [ipadapter_loaders]
export interface IPAdapterUnifiedLoaderCommunity extends HasSingle_MODEL, HasSingle_IPADAPTER, ComfyNode<IPAdapterUnifiedLoaderCommunity_input, IPAdapterUnifiedLoaderCommunity_output> {
    nameInComfy: "IPAdapterUnifiedLoaderCommunity"
}
export interface IPAdapterUnifiedLoaderCommunity_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    ipadapter: ComfyNodeOutput<'IPADAPTER', 1>,
}
export interface IPAdapterUnifiedLoaderCommunity_input {
    model: _MODEL
    preset: Enum_IPAdapterUnifiedLoaderCommunity_preset
    ipadapter?: _IPADAPTER
}

// IPAdapterEncoder [ipadapter_embeds]
export interface IPAdapterEncoder extends ComfyNode<IPAdapterEncoder_input, IPAdapterEncoder_output> {
    nameInComfy: "IPAdapterEncoder"
}
export interface IPAdapterEncoder_output {
    pos_embed: ComfyNodeOutput<'EMBEDS', 0>,
    neg_embed: ComfyNodeOutput<'EMBEDS', 1>,
}
export interface IPAdapterEncoder_input {
    ipadapter: _IPADAPTER
    image: _IMAGE
    /** default=1 min=3 max=3 step=0.01 */
    weight?: _FLOAT
    mask?: _MASK
    clip_vision?: _CLIP_VISION
}

// IPAdapterCombineEmbeds [ipadapter_embeds]
export interface IPAdapterCombineEmbeds extends HasSingle_EMBEDS, ComfyNode<IPAdapterCombineEmbeds_input, IPAdapterCombineEmbeds_output> {
    nameInComfy: "IPAdapterCombineEmbeds"
}
export interface IPAdapterCombineEmbeds_output {
    EMBEDS: ComfyNodeOutput<'EMBEDS', 0>,
}
export interface IPAdapterCombineEmbeds_input {
    embed1: _EMBEDS
    method: Enum_IPAdapterCombineEmbeds_method
    embed2?: _EMBEDS
    embed3?: _EMBEDS
    embed4?: _EMBEDS
    embed5?: _EMBEDS
}

// IPAdapterNoise [ipadapter_utils]
export interface IPAdapterNoise extends HasSingle_IMAGE, ComfyNode<IPAdapterNoise_input, IPAdapterNoise_output> {
    nameInComfy: "IPAdapterNoise"
}
export interface IPAdapterNoise_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface IPAdapterNoise_input {
    type: Enum_IPAdapterNoise_type
    /** default=1 min=1 max=1 step=0.05 */
    strength?: _FLOAT
    /** default=0 min=32 max=32 step=1 */
    blur?: _INT
    image_optional?: _IMAGE
}

// PrepImageForClipVision [ipadapter_utils]
export interface PrepImageForClipVision extends HasSingle_IMAGE, ComfyNode<PrepImageForClipVision_input, PrepImageForClipVision_output> {
    nameInComfy: "PrepImageForClipVision"
}
export interface PrepImageForClipVision_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface PrepImageForClipVision_input {
    image: _IMAGE
    interpolation: Enum_PrepImageForClipVision_interpolation
    crop_position: Enum_PrepImageForClipVision_crop_position
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
}

// IPAdapterSaveEmbeds [ipadapter_embeds]
export interface IPAdapterSaveEmbeds extends ComfyNode<IPAdapterSaveEmbeds_input, IPAdapterSaveEmbeds_output> {
    nameInComfy: "IPAdapterSaveEmbeds"
}
export interface IPAdapterSaveEmbeds_output {
}
export interface IPAdapterSaveEmbeds_input {
    embeds: _EMBEDS
    /** default="IP_embeds" */
    filename_prefix?: _STRING
}

// IPAdapterLoadEmbeds [ipadapter_embeds]
export interface IPAdapterLoadEmbeds extends HasSingle_EMBEDS, ComfyNode<IPAdapterLoadEmbeds_input, IPAdapterLoadEmbeds_output> {
    nameInComfy: "IPAdapterLoadEmbeds"
}
export interface IPAdapterLoadEmbeds_output {
    EMBEDS: ComfyNodeOutput<'EMBEDS', 0>,
}
export interface IPAdapterLoadEmbeds_input {
    embeds: Enum_IPAdapterLoadEmbeds_embeds
}

// IPAdapterWeights [ipadapter_weights]
export interface IPAdapterWeights extends HasSingle_INT, HasSingle_WEIGHTS_STRATEGY, ComfyNode<IPAdapterWeights_input, IPAdapterWeights_output> {
    nameInComfy: "IPAdapterWeights"
}
export interface IPAdapterWeights_output {
    weights: ComfyNodeOutput<'FLOAT', 0>,
    weights_invert: ComfyNodeOutput<'FLOAT', 1>,
    total_frames: ComfyNodeOutput<'INT', 2>,
    image_1: ComfyNodeOutput<'IMAGE', 3>,
    image_2: ComfyNodeOutput<'IMAGE', 4>,
    weights_strategy: ComfyNodeOutput<'WEIGHTS_STRATEGY', 5>,
}
export interface IPAdapterWeights_input {
    /** default="1.0, 0.0" */
    weights?: _STRING
    /** default="linear" */
    timing?: Enum_IPAdapterWeights_timing
    /** default=0 min=9999 max=9999 step=1 */
    frames?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    start_frame?: _INT
    /** default=9999 min=9999 max=9999 step=1 */
    end_frame?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    add_starting_frames?: _INT
    /** default=0 min=9999 max=9999 step=1 */
    add_ending_frames?: _INT
    /** default="full batch" */
    method?: Enum_IPAdapterWeights_method
    image?: _IMAGE
}

// IPAdapterCombineWeights [ipadapter_utils]
export interface IPAdapterCombineWeights extends HasSingle_FLOAT, HasSingle_INT, ComfyNode<IPAdapterCombineWeights_input, IPAdapterCombineWeights_output> {
    nameInComfy: "IPAdapterCombineWeights"
}
export interface IPAdapterCombineWeights_output {
    weights: ComfyNodeOutput<'FLOAT', 0>,
    count: ComfyNodeOutput<'INT', 1>,
}
export interface IPAdapterCombineWeights_input {
    /** default=0 min=1 max=1 step=0.05 */
    weights_1?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    weights_2?: _FLOAT
}

// IPAdapterWeightsFromStrategy [ipadapter_weights]
export interface IPAdapterWeightsFromStrategy extends HasSingle_INT, HasSingle_WEIGHTS_STRATEGY, ComfyNode<IPAdapterWeightsFromStrategy_input, IPAdapterWeightsFromStrategy_output> {
    nameInComfy: "IPAdapterWeightsFromStrategy"
}
export interface IPAdapterWeightsFromStrategy_output {
    weights: ComfyNodeOutput<'FLOAT', 0>,
    weights_invert: ComfyNodeOutput<'FLOAT', 1>,
    total_frames: ComfyNodeOutput<'INT', 2>,
    image_1: ComfyNodeOutput<'IMAGE', 3>,
    image_2: ComfyNodeOutput<'IMAGE', 4>,
    weights_strategy: ComfyNodeOutput<'WEIGHTS_STRATEGY', 5>,
}
export interface IPAdapterWeightsFromStrategy_input {
    weights_strategy: _WEIGHTS_STRATEGY
    image?: _IMAGE
}

// IPAdapterPromptScheduleFromWeightsStrategy [ipadapter_weights]
export interface IPAdapterPromptScheduleFromWeightsStrategy extends HasSingle_STRING, ComfyNode<IPAdapterPromptScheduleFromWeightsStrategy_input, IPAdapterPromptScheduleFromWeightsStrategy_output> {
    nameInComfy: "IPAdapterPromptScheduleFromWeightsStrategy"
}
export interface IPAdapterPromptScheduleFromWeightsStrategy_output {
    prompt_schedule: ComfyNodeOutput<'STRING', 0>,
}
export interface IPAdapterPromptScheduleFromWeightsStrategy_input {
    weights_strategy: _WEIGHTS_STRATEGY
    /** default="" */
    prompt?: _STRING
}

// IPAdapterRegionalConditioning [ipadapter_params]
export interface IPAdapterRegionalConditioning extends HasSingle_IPADAPTER_PARAMS, ComfyNode<IPAdapterRegionalConditioning_input, IPAdapterRegionalConditioning_output> {
    nameInComfy: "IPAdapterRegionalConditioning"
}
export interface IPAdapterRegionalConditioning_output {
    IPADAPTER_PARAMS: ComfyNodeOutput<'IPADAPTER_PARAMS', 0>,
    POSITIVE: ComfyNodeOutput<'CONDITIONING', 1>,
    NEGATIVE: ComfyNodeOutput<'CONDITIONING', 2>,
}
export interface IPAdapterRegionalConditioning_input {
    image: _IMAGE
    /** default=1 min=3 max=3 step=0.05 */
    image_weight?: _FLOAT
    /** default=1 min=10 max=10 step=0.05 */
    prompt_weight?: _FLOAT
    weight_type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type
    /** default=0 min=1 max=1 step=0.001 */
    start_at?: _FLOAT
    /** default=1 min=1 max=1 step=0.001 */
    end_at?: _FLOAT
    mask?: _MASK
    positive?: _CONDITIONING
    negative?: _CONDITIONING
}

// IPAdapterCombineParams [ipadapter_params]
export interface IPAdapterCombineParams extends HasSingle_IPADAPTER_PARAMS, ComfyNode<IPAdapterCombineParams_input, IPAdapterCombineParams_output> {
    nameInComfy: "IPAdapterCombineParams"
}
export interface IPAdapterCombineParams_output {
    IPADAPTER_PARAMS: ComfyNodeOutput<'IPADAPTER_PARAMS', 0>,
}
export interface IPAdapterCombineParams_input {
    params_1: _IPADAPTER_PARAMS
    params_2: _IPADAPTER_PARAMS
    params_3?: _IPADAPTER_PARAMS
    params_4?: _IPADAPTER_PARAMS
    params_5?: _IPADAPTER_PARAMS
}

// Lora Loader (JPS) [JPS Nodes_IO]
export interface Lora_Loader_$1JPS$2 extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<Lora_Loader_$1JPS$2_input, Lora_Loader_$1JPS$2_output> {
    nameInComfy: "Lora Loader (JPS)"
}
export interface Lora_Loader_$1JPS$2_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
}
export interface Lora_Loader_$1JPS$2_input {
    model: _MODEL
    clip: _CLIP
    switch: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.1 */
    strength_model?: _FLOAT
    /** default=1 min=10 max=10 step=0.1 */
    strength_clip?: _FLOAT
}

// SDXL Resolutions (JPS) [JPS Nodes_Settings]
export interface SDXL_Resolutions_$1JPS$2 extends ComfyNode<SDXL_Resolutions_$1JPS$2_input, SDXL_Resolutions_$1JPS$2_output> {
    nameInComfy: "SDXL Resolutions (JPS)"
}
export interface SDXL_Resolutions_$1JPS$2_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
}
export interface SDXL_Resolutions_$1JPS$2_input {
    resolution: Enum_SDXL_Resolutions_$1JPS$2_resolution
}

// SDXL Basic Settings (JPS) [JPS Nodes_Settings]
export interface SDXL_Basic_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<SDXL_Basic_Settings_$1JPS$2_input, SDXL_Basic_Settings_$1JPS$2_output> {
    nameInComfy: "SDXL Basic Settings (JPS)"
}
export interface SDXL_Basic_Settings_$1JPS$2_output {
    sdxl_basic_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface SDXL_Basic_Settings_$1JPS$2_input {
    resolution: Enum_SDXL_Basic_Settings_$1JPS$2_resolution
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=60 min=250 max=250 step=5 */
    steps_total?: _INT
    /** default=80 min=100 max=100 step=5 */
    base_percentage?: _INT
    /** default=6.5 min=20 max=20 step=0.1 */
    cfg?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    cfg_rescale?: _FLOAT
    /** default=6.5 min=20 max=20 step=0.1 */
    cfg_refiner?: _FLOAT
    /** default=6 min=10 max=10 step=0.5 */
    ascore_refiner?: _FLOAT
    /** default=4 min=8 max=8 step=1 */
    res_factor?: _INT
    /** default=-2 min=-1 max=-1 */
    clip_skip?: _INT
    /** default="JPS" */
    filename?: _STRING
}

// SDXL Settings (JPS) [JPS Nodes_Settings]
export interface SDXL_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<SDXL_Settings_$1JPS$2_input, SDXL_Settings_$1JPS$2_output> {
    nameInComfy: "SDXL Settings (JPS)"
}
export interface SDXL_Settings_$1JPS$2_output {
    sdxl_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface SDXL_Settings_$1JPS$2_input {
    resolution: Enum_SDXL_Basic_Settings_$1JPS$2_resolution
    /** default=4 min=8 max=8 step=1 */
    res_factor?: _INT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=60 min=250 max=250 step=5 */
    steps?: _INT
    /** default=6.5 min=20 max=20 step=0.1 */
    cfg?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    cfg_rescale?: _FLOAT
    /** default=-2 min=-1 max=-1 */
    clip_skip?: _INT
    /** default="JPS" */
    filename?: _STRING
}

// Generation TXT IMG Settings (JPS) [JPS Nodes_Settings]
export interface Generation_TXT_IMG_Settings_$1JPS$2 extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<Generation_TXT_IMG_Settings_$1JPS$2_input, Generation_TXT_IMG_Settings_$1JPS$2_output> {
    nameInComfy: "Generation TXT IMG Settings (JPS)"
}
export interface Generation_TXT_IMG_Settings_$1JPS$2_output {
    gen_mode: ComfyNodeOutput<'INT', 0>,
    img_strength: ComfyNodeOutput<'FLOAT', 1>,
}
export interface Generation_TXT_IMG_Settings_$1JPS$2_input {
    mode: Enum_Generation_TXT_IMG_Settings_$1JPS$2_mode
    /** default=50 min=100 max=100 step=5 */
    img_percentage?: _INT
}

// Crop Image Settings (JPS) [JPS Nodes_Settings]
export interface Crop_Image_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<Crop_Image_Settings_$1JPS$2_input, Crop_Image_Settings_$1JPS$2_output> {
    nameInComfy: "Crop Image Settings (JPS)"
}
export interface Crop_Image_Settings_$1JPS$2_output {
    cropimage_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface Crop_Image_Settings_$1JPS$2_input {
    source_crop_pos: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
    /** default=0 min=2048 max=2048 step=1 */
    source_crop_offset?: _INT
    support_crop_pos: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
    /** default=0 min=2048 max=2048 step=1 */
    support_crop_offset?: _INT
    crop_intpol: Enum_ImageResize$6_interpolation
}

// ImageToImage Settings (JPS) [JPS Nodes_Settings]
export interface ImageToImage_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<ImageToImage_Settings_$1JPS$2_input, ImageToImage_Settings_$1JPS$2_output> {
    nameInComfy: "ImageToImage Settings (JPS)"
}
export interface ImageToImage_Settings_$1JPS$2_output {
    img2img_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface ImageToImage_Settings_$1JPS$2_input {
    /** default=50 min=100 max=100 step=1 */
    img2img_strength?: _INT
    /** default=100 min=100 max=100 step=1 */
    inpaint_strength?: _INT
    /** default=20 min=200 max=200 step=2 */
    inpaint_grow_mask?: _INT
    /** default=30 min=100 max=100 step=1 */
    unsampler_strength?: _INT
    /** default=1 min=10 max=10 step=0.1 */
    unsampler_cfg?: _FLOAT
    unsampler_sampler: Enum_KSampler_sampler_name
    unsampler_scheduler: Enum_KSampler_scheduler
}

// CtrlNet CannyEdge Settings (JPS) [JPS Nodes_Settings]
export interface CtrlNet_CannyEdge_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<CtrlNet_CannyEdge_Settings_$1JPS$2_input, CtrlNet_CannyEdge_Settings_$1JPS$2_output> {
    nameInComfy: "CtrlNet CannyEdge Settings (JPS)"
}
export interface CtrlNet_CannyEdge_Settings_$1JPS$2_output {
    cannyedge_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface CtrlNet_CannyEdge_Settings_$1JPS$2_input {
    cannyedge_from: Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from
    /** default=1 min=10 max=10 step=0.1 */
    cannyedge_strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    cannyedge_start?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    cannyedge_end?: _FLOAT
    /** default=100 min=255 max=255 step=1 */
    cannyedge_low?: _INT
    /** default=200 min=255 max=255 step=1 */
    cannyedge_high?: _INT
}

// CtrlNet ZoeDepth Settings (JPS) [JPS Nodes_Settings]
export interface CtrlNet_ZoeDepth_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<CtrlNet_ZoeDepth_Settings_$1JPS$2_input, CtrlNet_ZoeDepth_Settings_$1JPS$2_output> {
    nameInComfy: "CtrlNet ZoeDepth Settings (JPS)"
}
export interface CtrlNet_ZoeDepth_Settings_$1JPS$2_output {
    zoedepth_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface CtrlNet_ZoeDepth_Settings_$1JPS$2_input {
    zoe_from: Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from
    /** default=1 min=10 max=10 step=0.1 */
    zoe_strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    zoe_start?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    zoe_end?: _FLOAT
}

// CtrlNet MiDaS Settings (JPS) [JPS Nodes_Settings]
export interface CtrlNet_MiDaS_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<CtrlNet_MiDaS_Settings_$1JPS$2_input, CtrlNet_MiDaS_Settings_$1JPS$2_output> {
    nameInComfy: "CtrlNet MiDaS Settings (JPS)"
}
export interface CtrlNet_MiDaS_Settings_$1JPS$2_output {
    midas_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface CtrlNet_MiDaS_Settings_$1JPS$2_input {
    midas_from: Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from
    /** default=1 min=10 max=10 step=0.1 */
    midas_strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    midas_start?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    midas_end?: _FLOAT
    /** default=6.28 min=15.71 max=15.71 step=0.05 */
    midas_a?: _FLOAT
    /** default=0.1 min=1 max=1 step=0.05 */
    midas_bg?: _FLOAT
}

// CtrlNet OpenPose Settings (JPS) [JPS Nodes_Settings]
export interface CtrlNet_OpenPose_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<CtrlNet_OpenPose_Settings_$1JPS$2_input, CtrlNet_OpenPose_Settings_$1JPS$2_output> {
    nameInComfy: "CtrlNet OpenPose Settings (JPS)"
}
export interface CtrlNet_OpenPose_Settings_$1JPS$2_output {
    openpose_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface CtrlNet_OpenPose_Settings_$1JPS$2_input {
    openpose_from: Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from
    /** default=1 min=10 max=10 step=0.1 */
    openpose_strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    openpose_start?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    openpose_end?: _FLOAT
    openpose_body: Enum_KSamplerAdvanced_add_noise
    openpose_face: Enum_KSamplerAdvanced_add_noise
    openpose_hand: Enum_KSamplerAdvanced_add_noise
}

// Revision Settings (JPS) [JPS Nodes_Settings]
export interface Revision_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<Revision_Settings_$1JPS$2_input, Revision_Settings_$1JPS$2_output> {
    nameInComfy: "Revision Settings (JPS)"
}
export interface Revision_Settings_$1JPS$2_output {
    revision_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface Revision_Settings_$1JPS$2_input {
    /** default=1 min=10 max=10 step=0.1 */
    rev1_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.1 */
    rev2_strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.1 */
    rev1_noiseaug?: _FLOAT
    /** default=0 min=1 max=1 step=0.1 */
    rev2_noiseaug?: _FLOAT
    rev1_crop: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
    /** default=0 min=2048 max=2048 step=1 */
    rev1_offset?: _INT
    rev2_crop: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
    /** default=0 min=2048 max=2048 step=1 */
    rev2_offset?: _INT
    crop_intpol: Enum_ImageResize$6_interpolation
    /** default=224 min=1792 max=1792 step=224 */
    crop_res?: _INT
}

// IP Adapter Settings (JPS) [JPS Nodes_Settings]
export interface IP_Adapter_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<IP_Adapter_Settings_$1JPS$2_input, IP_Adapter_Settings_$1JPS$2_output> {
    nameInComfy: "IP Adapter Settings (JPS)"
}
export interface IP_Adapter_Settings_$1JPS$2_output {
    ip_adapter_single_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface IP_Adapter_Settings_$1JPS$2_input {
    /** default=0.5 min=3 max=3 step=0.01 */
    ipa_weight?: _FLOAT
    ipa_wtype: Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype
    /** default=0 min=1 max=1 step=0.05 */
    ipa_noise?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    ipa_start?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    ipa_stop?: _FLOAT
    ipa_crop: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
    /** default=1 min=5 max=5 step=0.1 */
    ipa_zoom?: _FLOAT
    /** default=0 min=4096 max=4096 step=1 */
    ipa_offset_x?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    ipa_offset_y?: _INT
    ipa_mask: Enum_IP_Adapter_Settings_$1JPS$2_ipa_mask
    crop_intpol: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
    ipa_model: Enum_IP_Adapter_Settings_$1JPS$2_ipa_model
}

// IP Adapter Tiled Settings (JPS) [JPS Nodes_Settings]
export interface IP_Adapter_Tiled_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<IP_Adapter_Tiled_Settings_$1JPS$2_input, IP_Adapter_Tiled_Settings_$1JPS$2_output> {
    nameInComfy: "IP Adapter Tiled Settings (JPS)"
}
export interface IP_Adapter_Tiled_Settings_$1JPS$2_output {
    ip_adapter_tiled_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface IP_Adapter_Tiled_Settings_$1JPS$2_input {
    ipa_model: Enum_IP_Adapter_Settings_$1JPS$2_ipa_model
    ipa_wtype: Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype
    /** default=0.5 min=3 max=3 step=0.01 */
    ipa_weight?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    ipa_noise?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    ipa_start?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    ipa_end?: _FLOAT
    /** default=2 min=5 max=5 step=1 */
    tile_short?: _INT
    /** default=0.55 min=1 max=1 step=0.05 */
    tile_weight?: _FLOAT
    /** default=100 min=500 max=500 step=1 */
    zoom?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    offset_w?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    offset_h?: _INT
    prepare_type: Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_type
    prepare_intpol: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    prepare_sharpening?: _FLOAT
}

// InstantID Settings (JPS) [JPS Nodes_Settings]
export interface InstantID_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<InstantID_Settings_$1JPS$2_input, InstantID_Settings_$1JPS$2_output> {
    nameInComfy: "InstantID Settings (JPS)"
}
export interface InstantID_Settings_$1JPS$2_output {
    instantid_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface InstantID_Settings_$1JPS$2_input {
    /** default=0.8 min=1 max=1 step=0.01 */
    ip_weight?: _FLOAT
    /** default=0.65 min=10 max=10 step=0.01 */
    cn_strength?: _FLOAT
    /** default=0 min=1 max=1 step=0.1 */
    noise?: _FLOAT
    /** default=0 min=1 max=1 step=0.05 */
    start?: _FLOAT
    /** default=1 min=1 max=1 step=0.05 */
    end?: _FLOAT
}

// Image Prepare Settings (JPS) [JPS Nodes_Settings]
export interface Image_Prepare_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<Image_Prepare_Settings_$1JPS$2_input, Image_Prepare_Settings_$1JPS$2_output> {
    nameInComfy: "Image Prepare Settings (JPS)"
}
export interface Image_Prepare_Settings_$1JPS$2_output {
    imageprepare_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface Image_Prepare_Settings_$1JPS$2_input {
    /** default=0 min=99 max=99 step=1 */
    offset_width?: _INT
    /** default=0 min=99 max=99 step=1 */
    offset_height?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_left?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_right?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_top?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_bottom?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_left?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_right?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_top?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_bottom?: _INT
    interpolation: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
}

// InstantID Source Prepare Settings (JPS) [JPS Nodes_Settings]
export interface InstantID_Source_Prepare_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<InstantID_Source_Prepare_Settings_$1JPS$2_input, InstantID_Source_Prepare_Settings_$1JPS$2_output> {
    nameInComfy: "InstantID Source Prepare Settings (JPS)"
}
export interface InstantID_Source_Prepare_Settings_$1JPS$2_output {
    imageprepare_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface InstantID_Source_Prepare_Settings_$1JPS$2_input {
    resize_to: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_resize_to
    /** default=0 min=99 max=99 step=1 */
    offset_width?: _INT
    /** default=0 min=99 max=99 step=1 */
    offset_height?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_left?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_right?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_top?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_bottom?: _INT
    interpolation: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
    flip: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip
}

// InstantID Pose Prepare Settings (JPS) [JPS Nodes_Settings]
export interface InstantID_Pose_Prepare_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<InstantID_Pose_Prepare_Settings_$1JPS$2_input, InstantID_Pose_Prepare_Settings_$1JPS$2_output> {
    nameInComfy: "InstantID Pose Prepare Settings (JPS)"
}
export interface InstantID_Pose_Prepare_Settings_$1JPS$2_output {
    imageprepare_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface InstantID_Pose_Prepare_Settings_$1JPS$2_input {
    resize_to: Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_resize_to
    /** default=0 min=99 max=99 step=1 */
    offset_width?: _INT
    /** default=0 min=99 max=99 step=1 */
    offset_height?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_left?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_right?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_top?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_bottom?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_left?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_right?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_top?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_bottom?: _INT
    interpolation: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
    flip: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip
}

// InstantID Mask Prepare Settings (JPS) [JPS Nodes_Settings]
export interface InstantID_Mask_Prepare_Settings_$1JPS$2 extends HasSingle_BASIC_PIPE, ComfyNode<InstantID_Mask_Prepare_Settings_$1JPS$2_input, InstantID_Mask_Prepare_Settings_$1JPS$2_output> {
    nameInComfy: "InstantID Mask Prepare Settings (JPS)"
}
export interface InstantID_Mask_Prepare_Settings_$1JPS$2_output {
    imageprepare_settings: ComfyNodeOutput<'BASIC_PIPE', 0>,
}
export interface InstantID_Mask_Prepare_Settings_$1JPS$2_input {
    mask_type: Enum_IP_Adapter_Settings_$1JPS$2_ipa_mask
    resize_to: Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_resize_to
    resize_type: Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type
    /** default=0 min=99 max=99 step=1 */
    offset_width?: _INT
    /** default=0 min=99 max=99 step=1 */
    offset_height?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_left?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_right?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_top?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_bottom?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_left?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_right?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_top?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_bottom?: _INT
    interpolation: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
}

// Sampler Scheduler Settings (JPS) [JPS Nodes_Settings]
export interface Sampler_Scheduler_Settings_$1JPS$2 extends HasSingle_Enum_KSampler_sampler_name, HasSingle_Enum_KSampler_scheduler, ComfyNode<Sampler_Scheduler_Settings_$1JPS$2_input, Sampler_Scheduler_Settings_$1JPS$2_output> {
    nameInComfy: "Sampler Scheduler Settings (JPS)"
}
export interface Sampler_Scheduler_Settings_$1JPS$2_output {
    sampler_name: ComfyNodeOutput<'Enum_KSampler_sampler_name', 0>,
    scheduler: ComfyNodeOutput<'Enum_KSampler_scheduler', 1>,
}
export interface Sampler_Scheduler_Settings_$1JPS$2_input {
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
}

// Integer Switch (JPS) [JPS Nodes_Switches]
export interface Integer_Switch_$1JPS$2 extends HasSingle_INT, ComfyNode<Integer_Switch_$1JPS$2_input, Integer_Switch_$1JPS$2_output> {
    nameInComfy: "Integer Switch (JPS)"
}
export interface Integer_Switch_$1JPS$2_output {
    int_out: ComfyNodeOutput<'INT', 0>,
}
export interface Integer_Switch_$1JPS$2_input {
    /** */
    select: _INT
    /** */
    int_1?: _INT
    /** */
    int_2?: _INT
    /** */
    int_3?: _INT
    /** */
    int_4?: _INT
    /** */
    int_5?: _INT
}

// Image Switch (JPS) [JPS Nodes_Switches]
export interface Image_Switch_$1JPS$2 extends HasSingle_IMAGE, ComfyNode<Image_Switch_$1JPS$2_input, Image_Switch_$1JPS$2_output> {
    nameInComfy: "Image Switch (JPS)"
}
export interface Image_Switch_$1JPS$2_output {
    img_out: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Switch_$1JPS$2_input {
    /** */
    select: _INT
    img_1?: _IMAGE
    img_2?: _IMAGE
    img_3?: _IMAGE
    img_4?: _IMAGE
    img_5?: _IMAGE
}

// Latent Switch (JPS) [JPS Nodes_Switches]
export interface Latent_Switch_$1JPS$2 extends HasSingle_LATENT, ComfyNode<Latent_Switch_$1JPS$2_input, Latent_Switch_$1JPS$2_output> {
    nameInComfy: "Latent Switch (JPS)"
}
export interface Latent_Switch_$1JPS$2_output {
    latent_out: ComfyNodeOutput<'LATENT', 0>,
}
export interface Latent_Switch_$1JPS$2_input {
    /** */
    select: _INT
    latent_1?: _LATENT
    latent_2?: _LATENT
    latent_3?: _LATENT
    latent_4?: _LATENT
    latent_5?: _LATENT
}

// Conditioning Switch (JPS) [JPS Nodes_Switches]
export interface Conditioning_Switch_$1JPS$2 extends HasSingle_CONDITIONING, ComfyNode<Conditioning_Switch_$1JPS$2_input, Conditioning_Switch_$1JPS$2_output> {
    nameInComfy: "Conditioning Switch (JPS)"
}
export interface Conditioning_Switch_$1JPS$2_output {
    con_out: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface Conditioning_Switch_$1JPS$2_input {
    /** */
    select: _INT
    con_1?: _CONDITIONING
    con_2?: _CONDITIONING
    con_3?: _CONDITIONING
    con_4?: _CONDITIONING
    con_5?: _CONDITIONING
}

// Model Switch (JPS) [JPS Nodes_Switches]
export interface Model_Switch_$1JPS$2 extends HasSingle_MODEL, ComfyNode<Model_Switch_$1JPS$2_input, Model_Switch_$1JPS$2_output> {
    nameInComfy: "Model Switch (JPS)"
}
export interface Model_Switch_$1JPS$2_output {
    model_out: ComfyNodeOutput<'MODEL', 0>,
}
export interface Model_Switch_$1JPS$2_input {
    /** */
    select: _INT
    model_1?: _MODEL
    model_2?: _MODEL
    model_3?: _MODEL
    model_4?: _MODEL
    model_5?: _MODEL
}

// IPA Switch (JPS) [JPS Nodes_Switches]
export interface IPA_Switch_$1JPS$2 extends HasSingle_IPADAPTER, ComfyNode<IPA_Switch_$1JPS$2_input, IPA_Switch_$1JPS$2_output> {
    nameInComfy: "IPA Switch (JPS)"
}
export interface IPA_Switch_$1JPS$2_output {
    IPA_out: ComfyNodeOutput<'IPADAPTER', 0>,
}
export interface IPA_Switch_$1JPS$2_input {
    /** */
    select: _INT
    ipa_1?: _IPADAPTER
    ipa_2?: _IPADAPTER
    ipa_3?: _IPADAPTER
    ipa_4?: _IPADAPTER
    ipa_5?: _IPADAPTER
}

// VAE Switch (JPS) [JPS Nodes_Switches]
export interface VAE_Switch_$1JPS$2 extends HasSingle_VAE, ComfyNode<VAE_Switch_$1JPS$2_input, VAE_Switch_$1JPS$2_output> {
    nameInComfy: "VAE Switch (JPS)"
}
export interface VAE_Switch_$1JPS$2_output {
    vae_out: ComfyNodeOutput<'VAE', 0>,
}
export interface VAE_Switch_$1JPS$2_input {
    /** */
    select: _INT
    vae_1?: _VAE
    vae_2?: _VAE
    vae_3?: _VAE
    vae_4?: _VAE
    vae_5?: _VAE
}

// Mask Switch (JPS) [JPS Nodes_Switches]
export interface Mask_Switch_$1JPS$2 extends HasSingle_MASK, ComfyNode<Mask_Switch_$1JPS$2_input, Mask_Switch_$1JPS$2_output> {
    nameInComfy: "Mask Switch (JPS)"
}
export interface Mask_Switch_$1JPS$2_output {
    mask_out: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Switch_$1JPS$2_input {
    /** */
    select: _INT
    mask_1?: _MASK
    mask_2?: _MASK
    mask_3?: _MASK
    mask_4?: _MASK
    mask_5?: _MASK
}

// ControlNet Switch (JPS) [JPS Nodes_Switches]
export interface ControlNet_Switch_$1JPS$2 extends HasSingle_CONTROL_NET, ComfyNode<ControlNet_Switch_$1JPS$2_input, ControlNet_Switch_$1JPS$2_output> {
    nameInComfy: "ControlNet Switch (JPS)"
}
export interface ControlNet_Switch_$1JPS$2_output {
    ctrlnet_out: ComfyNodeOutput<'CONTROL_NET', 0>,
}
export interface ControlNet_Switch_$1JPS$2_input {
    /** */
    select: _INT
    ctrlnet_1?: _CONTROL_NET
    ctrlnet_2?: _CONTROL_NET
    ctrlnet_3?: _CONTROL_NET
    ctrlnet_4?: _CONTROL_NET
    ctrlnet_5?: _CONTROL_NET
}

// Disable Enable Switch (JPS) [JPS Nodes_Switches]
export interface Disable_Enable_Switch_$1JPS$2 extends HasSingle_Enum_KSamplerAdvanced_add_noise, ComfyNode<Disable_Enable_Switch_$1JPS$2_input, Disable_Enable_Switch_$1JPS$2_output> {
    nameInComfy: "Disable Enable Switch (JPS)"
}
export interface Disable_Enable_Switch_$1JPS$2_output {
    disable_enable: ComfyNodeOutput<'Enum_KSamplerAdvanced_add_noise', 0>,
}
export interface Disable_Enable_Switch_$1JPS$2_input {
    /** default=1 min=9 max=9 step=1 */
    select?: _INT
    /** default=1 min=9 max=9 step=1 */
    compare?: _INT
    match: Enum_Disable_Enable_Switch_$1JPS$2_match
}

// Enable Disable Switch (JPS) [JPS Nodes_Switches]
export interface Enable_Disable_Switch_$1JPS$2 extends HasSingle_Enum_KSamplerAdvanced_add_noise, ComfyNode<Enable_Disable_Switch_$1JPS$2_input, Enable_Disable_Switch_$1JPS$2_output> {
    nameInComfy: "Enable Disable Switch (JPS)"
}
export interface Enable_Disable_Switch_$1JPS$2_output {
    enable_disable: ComfyNodeOutput<'Enum_KSamplerAdvanced_add_noise', 0>,
}
export interface Enable_Disable_Switch_$1JPS$2_input {
    /** default=1 min=9 max=9 step=1 */
    select?: _INT
    /** default=1 min=9 max=9 step=1 */
    compare?: _INT
    match: Enum_Disable_Enable_Switch_$1JPS$2_match
}

// SDXL Basic Settings Pipe (JPS) [JPS Nodes_Pipes]
export interface SDXL_Basic_Settings_Pipe_$1JPS$2 extends HasSingle_Enum_KSampler_sampler_name, HasSingle_Enum_KSampler_scheduler, HasSingle_STRING, ComfyNode<SDXL_Basic_Settings_Pipe_$1JPS$2_input, SDXL_Basic_Settings_Pipe_$1JPS$2_output> {
    nameInComfy: "SDXL Basic Settings Pipe (JPS)"
}
export interface SDXL_Basic_Settings_Pipe_$1JPS$2_output {
    image_res: ComfyNodeOutput<'INT', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
    sampler_name: ComfyNodeOutput<'Enum_KSampler_sampler_name', 3>,
    scheduler: ComfyNodeOutput<'Enum_KSampler_scheduler', 4>,
    steps_total: ComfyNodeOutput<'INT', 5>,
    step_split: ComfyNodeOutput<'INT', 6>,
    cfg: ComfyNodeOutput<'FLOAT', 7>,
    cfg_rescale: ComfyNodeOutput<'FLOAT', 8>,
    cfg_refiner: ComfyNodeOutput<'FLOAT', 9>,
    ascore_refiner: ComfyNodeOutput<'FLOAT', 10>,
    res_factor: ComfyNodeOutput<'INT', 11>,
    clip_skip: ComfyNodeOutput<'INT', 12>,
    filename: ComfyNodeOutput<'STRING', 13>,
}
export interface SDXL_Basic_Settings_Pipe_$1JPS$2_input {
    sdxl_basic_settings: _BASIC_PIPE
}

// SDXL Settings Pipe (JPS) [JPS Nodes_Pipes]
export interface SDXL_Settings_Pipe_$1JPS$2 extends HasSingle_Enum_KSampler_sampler_name, HasSingle_Enum_KSampler_scheduler, HasSingle_STRING, ComfyNode<SDXL_Settings_Pipe_$1JPS$2_input, SDXL_Settings_Pipe_$1JPS$2_output> {
    nameInComfy: "SDXL Settings Pipe (JPS)"
}
export interface SDXL_Settings_Pipe_$1JPS$2_output {
    image_res: ComfyNodeOutput<'INT', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
    res_factor: ComfyNodeOutput<'INT', 3>,
    sampler_name: ComfyNodeOutput<'Enum_KSampler_sampler_name', 4>,
    scheduler: ComfyNodeOutput<'Enum_KSampler_scheduler', 5>,
    steps: ComfyNodeOutput<'INT', 6>,
    cfg: ComfyNodeOutput<'FLOAT', 7>,
    cfg_rescale: ComfyNodeOutput<'FLOAT', 8>,
    clip_skip: ComfyNodeOutput<'INT', 9>,
    filename: ComfyNodeOutput<'STRING', 10>,
}
export interface SDXL_Settings_Pipe_$1JPS$2_input {
    sdxl_settings: _BASIC_PIPE
}

// Crop Image Pipe (JPS) [JPS Nodes_Pipes]
export interface Crop_Image_Pipe_$1JPS$2 extends HasSingle_Enum_ImageResize$6_interpolation, ComfyNode<Crop_Image_Pipe_$1JPS$2_input, Crop_Image_Pipe_$1JPS$2_output> {
    nameInComfy: "Crop Image Pipe (JPS)"
}
export interface Crop_Image_Pipe_$1JPS$2_output {
    source_crop_pos: ComfyNodeOutput<'Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos', 0>,
    source_crop_offset: ComfyNodeOutput<'INT', 1>,
    support_crop_pos: ComfyNodeOutput<'Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos', 2>,
    support_crop_offset: ComfyNodeOutput<'INT', 3>,
    crop_intpol: ComfyNodeOutput<'Enum_ImageResize$6_interpolation', 4>,
}
export interface Crop_Image_Pipe_$1JPS$2_input {
    cropimage_settings: _BASIC_PIPE
}

// ImageToImage Pipe (JPS) [JPS Nodes_Pipes]
export interface ImageToImage_Pipe_$1JPS$2 extends HasSingle_INT, HasSingle_Enum_KSampler_sampler_name, HasSingle_Enum_KSampler_scheduler, ComfyNode<ImageToImage_Pipe_$1JPS$2_input, ImageToImage_Pipe_$1JPS$2_output> {
    nameInComfy: "ImageToImage Pipe (JPS)"
}
export interface ImageToImage_Pipe_$1JPS$2_output {
    img2img_strength: ComfyNodeOutput<'FLOAT', 0>,
    inpaint_strength: ComfyNodeOutput<'FLOAT', 1>,
    inpaint_grow_mask: ComfyNodeOutput<'INT', 2>,
    unsampler_strength: ComfyNodeOutput<'FLOAT', 3>,
    unsampler_cfg: ComfyNodeOutput<'FLOAT', 4>,
    unsampler_sampler: ComfyNodeOutput<'Enum_KSampler_sampler_name', 5>,
    unsampler_scheduler: ComfyNodeOutput<'Enum_KSampler_scheduler', 6>,
}
export interface ImageToImage_Pipe_$1JPS$2_input {
    img2img_settings: _BASIC_PIPE
}

// CtrlNet CannyEdge Pipe (JPS) [JPS Nodes_Pipes]
export interface CtrlNet_CannyEdge_Pipe_$1JPS$2 extends ComfyNode<CtrlNet_CannyEdge_Pipe_$1JPS$2_input, CtrlNet_CannyEdge_Pipe_$1JPS$2_output> {
    nameInComfy: "CtrlNet CannyEdge Pipe (JPS)"
}
export interface CtrlNet_CannyEdge_Pipe_$1JPS$2_output {
    cannyedge_source: ComfyNodeOutput<'INT', 0>,
    cannyedge_strength: ComfyNodeOutput<'FLOAT', 1>,
    cannyedge_start: ComfyNodeOutput<'FLOAT', 2>,
    cannyedge_end: ComfyNodeOutput<'FLOAT', 3>,
    cannyedge_low: ComfyNodeOutput<'INT', 4>,
    cannyedge_high: ComfyNodeOutput<'INT', 5>,
}
export interface CtrlNet_CannyEdge_Pipe_$1JPS$2_input {
    cannyedge_settings: _BASIC_PIPE
}

// CtrlNet ZoeDepth Pipe (JPS) [JPS Nodes_Pipes]
export interface CtrlNet_ZoeDepth_Pipe_$1JPS$2 extends HasSingle_INT, ComfyNode<CtrlNet_ZoeDepth_Pipe_$1JPS$2_input, CtrlNet_ZoeDepth_Pipe_$1JPS$2_output> {
    nameInComfy: "CtrlNet ZoeDepth Pipe (JPS)"
}
export interface CtrlNet_ZoeDepth_Pipe_$1JPS$2_output {
    zoe_source: ComfyNodeOutput<'INT', 0>,
    zoe_strength: ComfyNodeOutput<'FLOAT', 1>,
    zoe_start: ComfyNodeOutput<'FLOAT', 2>,
    zoe_end: ComfyNodeOutput<'FLOAT', 3>,
}
export interface CtrlNet_ZoeDepth_Pipe_$1JPS$2_input {
    zoedepth_settings: _BASIC_PIPE
}

// CtrlNet MiDaS Pipe (JPS) [JPS Nodes_Pipes]
export interface CtrlNet_MiDaS_Pipe_$1JPS$2 extends HasSingle_INT, ComfyNode<CtrlNet_MiDaS_Pipe_$1JPS$2_input, CtrlNet_MiDaS_Pipe_$1JPS$2_output> {
    nameInComfy: "CtrlNet MiDaS Pipe (JPS)"
}
export interface CtrlNet_MiDaS_Pipe_$1JPS$2_output {
    midas_source: ComfyNodeOutput<'INT', 0>,
    midas_strength: ComfyNodeOutput<'FLOAT', 1>,
    midas_start: ComfyNodeOutput<'FLOAT', 2>,
    midas_end: ComfyNodeOutput<'FLOAT', 3>,
    midas_a: ComfyNodeOutput<'FLOAT', 4>,
    midas_bg: ComfyNodeOutput<'FLOAT', 5>,
}
export interface CtrlNet_MiDaS_Pipe_$1JPS$2_input {
    midas_settings: _BASIC_PIPE
}

// CtrlNet OpenPose Pipe (JPS) [JPS Nodes_Pipes]
export interface CtrlNet_OpenPose_Pipe_$1JPS$2 extends HasSingle_INT, ComfyNode<CtrlNet_OpenPose_Pipe_$1JPS$2_input, CtrlNet_OpenPose_Pipe_$1JPS$2_output> {
    nameInComfy: "CtrlNet OpenPose Pipe (JPS)"
}
export interface CtrlNet_OpenPose_Pipe_$1JPS$2_output {
    openpose_source: ComfyNodeOutput<'INT', 0>,
    openpose_strength: ComfyNodeOutput<'FLOAT', 1>,
    openpose_start: ComfyNodeOutput<'FLOAT', 2>,
    openpose_end: ComfyNodeOutput<'FLOAT', 3>,
    openpose_body: ComfyNodeOutput<'Enum_KSamplerAdvanced_add_noise', 4>,
    openpose_face: ComfyNodeOutput<'Enum_KSamplerAdvanced_add_noise', 5>,
    openpose_hand: ComfyNodeOutput<'Enum_KSamplerAdvanced_add_noise', 6>,
}
export interface CtrlNet_OpenPose_Pipe_$1JPS$2_input {
    openpose_settings: _BASIC_PIPE
}

// IP Adapter Settings Pipe (JPS) [JPS Nodes_Pipes]
export interface IP_Adapter_Settings_Pipe_$1JPS$2 extends HasSingle_Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype, HasSingle_Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos, HasSingle_Enum_ImageResize$6_interpolation, ComfyNode<IP_Adapter_Settings_Pipe_$1JPS$2_input, IP_Adapter_Settings_Pipe_$1JPS$2_output> {
    nameInComfy: "IP Adapter Settings Pipe (JPS)"
}
export interface IP_Adapter_Settings_Pipe_$1JPS$2_output {
    ipa_weight: ComfyNodeOutput<'FLOAT', 0>,
    ipa_wtype: ComfyNodeOutput<'Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype', 1>,
    ipa_noise: ComfyNodeOutput<'FLOAT', 2>,
    ipa_start: ComfyNodeOutput<'FLOAT', 3>,
    ipa_stop: ComfyNodeOutput<'FLOAT', 4>,
    ipa_crop: ComfyNodeOutput<'Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos', 5>,
    ipa_zoom: ComfyNodeOutput<'FLOAT', 6>,
    ipa_offset_x: ComfyNodeOutput<'INT', 7>,
    ipa_offset_y: ComfyNodeOutput<'INT', 8>,
    ipa_mask: ComfyNodeOutput<'INT', 9>,
    crop_intpol: ComfyNodeOutput<'Enum_ImageResize$6_interpolation', 10>,
    sharpening: ComfyNodeOutput<'FLOAT', 11>,
    ipa_model: ComfyNodeOutput<'INT', 12>,
}
export interface IP_Adapter_Settings_Pipe_$1JPS$2_input {
    ip_adapter_settings: _BASIC_PIPE
}

// IP Adapter Tiled Settings Pipe (JPS) [JPS Nodes_Pipes]
export interface IP_Adapter_Tiled_Settings_Pipe_$1JPS$2 extends HasSingle_Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype, HasSingle_Enum_ImageResize$6_interpolation, ComfyNode<IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_input, IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_output> {
    nameInComfy: "IP Adapter Tiled Settings Pipe (JPS)"
}
export interface IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_output {
    ipa_model: ComfyNodeOutput<'INT', 0>,
    ipa_wtype: ComfyNodeOutput<'Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype', 1>,
    ipa_weight: ComfyNodeOutput<'FLOAT', 2>,
    ipa_noise: ComfyNodeOutput<'FLOAT', 3>,
    ipa_start: ComfyNodeOutput<'FLOAT', 4>,
    ipa_end: ComfyNodeOutput<'FLOAT', 5>,
    tile_short: ComfyNodeOutput<'INT', 6>,
    tile_weight: ComfyNodeOutput<'FLOAT', 7>,
    zoom: ComfyNodeOutput<'INT', 8>,
    offset_w: ComfyNodeOutput<'INT', 9>,
    offset_h: ComfyNodeOutput<'INT', 10>,
    prepare_type: ComfyNodeOutput<'INT', 11>,
    prepare_intpol: ComfyNodeOutput<'Enum_ImageResize$6_interpolation', 12>,
    prepare_sharpening: ComfyNodeOutput<'FLOAT', 13>,
}
export interface IP_Adapter_Tiled_Settings_Pipe_$1JPS$2_input {
    ip_adapter_settings: _BASIC_PIPE
}

// InstantID Pipe (JPS) [JPS Nodes_Pipes]
export interface InstantID_Pipe_$1JPS$2 extends ComfyNode<InstantID_Pipe_$1JPS$2_input, InstantID_Pipe_$1JPS$2_output> {
    nameInComfy: "InstantID Pipe (JPS)"
}
export interface InstantID_Pipe_$1JPS$2_output {
    ip_weight: ComfyNodeOutput<'FLOAT', 0>,
    cn_strength: ComfyNodeOutput<'FLOAT', 1>,
    noise: ComfyNodeOutput<'FLOAT', 2>,
    start: ComfyNodeOutput<'FLOAT', 3>,
    end: ComfyNodeOutput<'FLOAT', 4>,
}
export interface InstantID_Pipe_$1JPS$2_input {
    instantid_settings: _BASIC_PIPE
}

// Image Prepare Pipe (JPS) [JPS Nodes_Pipes]
export interface Image_Prepare_Pipe_$1JPS$2 extends HasSingle_Enum_ImageResize$6_interpolation, HasSingle_FLOAT, ComfyNode<Image_Prepare_Pipe_$1JPS$2_input, Image_Prepare_Pipe_$1JPS$2_output> {
    nameInComfy: "Image Prepare Pipe (JPS)"
}
export interface Image_Prepare_Pipe_$1JPS$2_output {
    offset_width: ComfyNodeOutput<'INT', 0>,
    offset_height: ComfyNodeOutput<'INT', 1>,
    crop_left: ComfyNodeOutput<'INT', 2>,
    crop_right: ComfyNodeOutput<'INT', 3>,
    crop_top: ComfyNodeOutput<'INT', 4>,
    crop_bottom: ComfyNodeOutput<'INT', 5>,
    padding_left: ComfyNodeOutput<'INT', 6>,
    padding_right: ComfyNodeOutput<'INT', 7>,
    padding_top: ComfyNodeOutput<'INT', 8>,
    padding_bottom: ComfyNodeOutput<'INT', 9>,
    interpolation: ComfyNodeOutput<'Enum_ImageResize$6_interpolation', 10>,
    sharpening: ComfyNodeOutput<'FLOAT', 11>,
}
export interface Image_Prepare_Pipe_$1JPS$2_input {
    imageprepare_settings: _BASIC_PIPE
}

// InstantID Source Prepare Pipe (JPS) [JPS Nodes_Pipes]
export interface InstantID_Source_Prepare_Pipe_$1JPS$2 extends HasSingle_Enum_ImageResize$6_interpolation, HasSingle_FLOAT, HasSingle_Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip, ComfyNode<InstantID_Source_Prepare_Pipe_$1JPS$2_input, InstantID_Source_Prepare_Pipe_$1JPS$2_output> {
    nameInComfy: "InstantID Source Prepare Pipe (JPS)"
}
export interface InstantID_Source_Prepare_Pipe_$1JPS$2_output {
    resize_to: ComfyNodeOutput<'INT', 0>,
    offset_width: ComfyNodeOutput<'INT', 1>,
    offset_height: ComfyNodeOutput<'INT', 2>,
    crop_left: ComfyNodeOutput<'INT', 3>,
    crop_right: ComfyNodeOutput<'INT', 4>,
    crop_top: ComfyNodeOutput<'INT', 5>,
    crop_bottom: ComfyNodeOutput<'INT', 6>,
    interpolation: ComfyNodeOutput<'Enum_ImageResize$6_interpolation', 7>,
    sharpening: ComfyNodeOutput<'FLOAT', 8>,
    flip: ComfyNodeOutput<'Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip', 9>,
}
export interface InstantID_Source_Prepare_Pipe_$1JPS$2_input {
    imageprepare_settings: _BASIC_PIPE
}

// InstantID Pose Prepare Pipe (JPS) [JPS Nodes_Pipes]
export interface InstantID_Pose_Prepare_Pipe_$1JPS$2 extends HasSingle_Enum_ImageResize$6_interpolation, HasSingle_FLOAT, HasSingle_Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip, ComfyNode<InstantID_Pose_Prepare_Pipe_$1JPS$2_input, InstantID_Pose_Prepare_Pipe_$1JPS$2_output> {
    nameInComfy: "InstantID Pose Prepare Pipe (JPS)"
}
export interface InstantID_Pose_Prepare_Pipe_$1JPS$2_output {
    resize_to: ComfyNodeOutput<'INT', 0>,
    offset_width: ComfyNodeOutput<'INT', 1>,
    offset_height: ComfyNodeOutput<'INT', 2>,
    crop_left: ComfyNodeOutput<'INT', 3>,
    crop_right: ComfyNodeOutput<'INT', 4>,
    crop_top: ComfyNodeOutput<'INT', 5>,
    crop_bottom: ComfyNodeOutput<'INT', 6>,
    padding_left: ComfyNodeOutput<'INT', 7>,
    padding_right: ComfyNodeOutput<'INT', 8>,
    padding_top: ComfyNodeOutput<'INT', 9>,
    padding_bottom: ComfyNodeOutput<'INT', 10>,
    interpolation: ComfyNodeOutput<'Enum_ImageResize$6_interpolation', 11>,
    sharpening: ComfyNodeOutput<'FLOAT', 12>,
    flip: ComfyNodeOutput<'Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip', 13>,
}
export interface InstantID_Pose_Prepare_Pipe_$1JPS$2_input {
    imageprepare_settings: _BASIC_PIPE
}

// InstantID Mask Prepare Pipe (JPS) [JPS Nodes_Pipes]
export interface InstantID_Mask_Prepare_Pipe_$1JPS$2 extends HasSingle_Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type, HasSingle_Enum_ImageResize$6_interpolation, HasSingle_FLOAT, ComfyNode<InstantID_Mask_Prepare_Pipe_$1JPS$2_input, InstantID_Mask_Prepare_Pipe_$1JPS$2_output> {
    nameInComfy: "InstantID Mask Prepare Pipe (JPS)"
}
export interface InstantID_Mask_Prepare_Pipe_$1JPS$2_output {
    mask_type: ComfyNodeOutput<'INT', 0>,
    resize_to: ComfyNodeOutput<'INT', 1>,
    resize_type: ComfyNodeOutput<'Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type', 2>,
    offset_width: ComfyNodeOutput<'INT', 3>,
    offset_height: ComfyNodeOutput<'INT', 4>,
    crop_left: ComfyNodeOutput<'INT', 5>,
    crop_right: ComfyNodeOutput<'INT', 6>,
    crop_top: ComfyNodeOutput<'INT', 7>,
    crop_bottom: ComfyNodeOutput<'INT', 8>,
    padding_left: ComfyNodeOutput<'INT', 9>,
    padding_right: ComfyNodeOutput<'INT', 10>,
    padding_top: ComfyNodeOutput<'INT', 11>,
    padding_bottom: ComfyNodeOutput<'INT', 12>,
    interpolation: ComfyNodeOutput<'Enum_ImageResize$6_interpolation', 13>,
    sharpening: ComfyNodeOutput<'FLOAT', 14>,
}
export interface InstantID_Mask_Prepare_Pipe_$1JPS$2_input {
    imageprepare_settings: _BASIC_PIPE
}

// Revision Settings Pipe (JPS) [JPS Nodes_Pipes]
export interface Revision_Settings_Pipe_$1JPS$2 extends HasSingle_Enum_ImageResize$6_interpolation, ComfyNode<Revision_Settings_Pipe_$1JPS$2_input, Revision_Settings_Pipe_$1JPS$2_output> {
    nameInComfy: "Revision Settings Pipe (JPS)"
}
export interface Revision_Settings_Pipe_$1JPS$2_output {
    crop_res: ComfyNodeOutput<'INT', 0>,
    crop_intpol: ComfyNodeOutput<'Enum_ImageResize$6_interpolation', 1>,
    rev1_crop: ComfyNodeOutput<'Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos', 2>,
    rev1_offset: ComfyNodeOutput<'INT', 3>,
    rev2_crop: ComfyNodeOutput<'Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos', 4>,
    rev2_offset: ComfyNodeOutput<'INT', 5>,
    rev1_strength: ComfyNodeOutput<'FLOAT', 6>,
    rev2_strength: ComfyNodeOutput<'FLOAT', 7>,
    rev1_noiseaug: ComfyNodeOutput<'FLOAT', 8>,
    rev2_noiseaug: ComfyNodeOutput<'FLOAT', 9>,
}
export interface Revision_Settings_Pipe_$1JPS$2_input {
    revision_settings: _BASIC_PIPE
}

// SDXL Fundamentals MultiPipe (JPS) [JPS Nodes_Pipes]
export interface SDXL_Fundamentals_MultiPipe_$1JPS$2 extends HasSingle_VAE, HasSingle_INT, ComfyNode<SDXL_Fundamentals_MultiPipe_$1JPS$2_input, SDXL_Fundamentals_MultiPipe_$1JPS$2_output> {
    nameInComfy: "SDXL Fundamentals MultiPipe (JPS)"
}
export interface SDXL_Fundamentals_MultiPipe_$1JPS$2_output {
    vae: ComfyNodeOutput<'VAE', 0>,
    model_base: ComfyNodeOutput<'MODEL', 1>,
    model_refiner: ComfyNodeOutput<'MODEL', 2>,
    clip_base: ComfyNodeOutput<'CLIP', 3>,
    clip_refiner: ComfyNodeOutput<'CLIP', 4>,
    pos_base: ComfyNodeOutput<'CONDITIONING', 5>,
    neg_base: ComfyNodeOutput<'CONDITIONING', 6>,
    pos_refiner: ComfyNodeOutput<'CONDITIONING', 7>,
    neg_refiner: ComfyNodeOutput<'CONDITIONING', 8>,
    seed: ComfyNodeOutput<'INT', 9>,
}
export interface SDXL_Fundamentals_MultiPipe_$1JPS$2_input {
    vae?: _VAE
    model_base?: _MODEL
    model_refiner?: _MODEL
    clip_base?: _CLIP
    clip_refiner?: _CLIP
    pos_base?: _CONDITIONING
    neg_base?: _CONDITIONING
    pos_refiner?: _CONDITIONING
    neg_refiner?: _CONDITIONING
    /** */
    seed?: _INT
}

// Images Masks MultiPipe (JPS) [JPS Nodes_Pipes]
export interface Images_Masks_MultiPipe_$1JPS$2 extends HasSingle_MODEL, ComfyNode<Images_Masks_MultiPipe_$1JPS$2_input, Images_Masks_MultiPipe_$1JPS$2_output> {
    nameInComfy: "Images Masks MultiPipe (JPS)"
}
export interface Images_Masks_MultiPipe_$1JPS$2_output {
    generation_img: ComfyNodeOutput<'IMAGE', 0>,
    generation_mask: ComfyNodeOutput<'MASK', 1>,
    ipa1_img: ComfyNodeOutput<'IMAGE', 2>,
    ipa2_img: ComfyNodeOutput<'IMAGE', 3>,
    ipa1_mask: ComfyNodeOutput<'MASK', 4>,
    ipa2_mask: ComfyNodeOutput<'MASK', 5>,
    revision1_img: ComfyNodeOutput<'IMAGE', 6>,
    revision2_img: ComfyNodeOutput<'IMAGE', 7>,
    inpaint_model: ComfyNodeOutput<'MODEL', 8>,
}
export interface Images_Masks_MultiPipe_$1JPS$2_input {
    generation_img?: _IMAGE
    generation_mask?: _MASK
    ipa1_img?: _IMAGE
    ipa2_img?: _IMAGE
    ipa1_mask?: _MASK
    ipa2_mask?: _MASK
    revision1_img?: _IMAGE
    revision2_img?: _IMAGE
    inpaint_model?: _MODEL
}

// SDXL Recommended Resolution Calc (JPS) [JPS Nodes_Math]
export interface SDXL_Recommended_Resolution_Calc_$1JPS$2 extends ComfyNode<SDXL_Recommended_Resolution_Calc_$1JPS$2_input, SDXL_Recommended_Resolution_Calc_$1JPS$2_output> {
    nameInComfy: "SDXL Recommended Resolution Calc (JPS)"
}
export interface SDXL_Recommended_Resolution_Calc_$1JPS$2_output {
    SDXL_width: ComfyNodeOutput<'INT', 0>,
    SDXL_height: ComfyNodeOutput<'INT', 1>,
}
export interface SDXL_Recommended_Resolution_Calc_$1JPS$2_input {
    /** default=1024 min=8192 max=8192 step=2 */
    target_width?: _INT
    /** default=1024 min=8192 max=8192 step=2 */
    target_height?: _INT
}

// Resolution Multiply (JPS) [JPS Nodes_Math]
export interface Resolution_Multiply_$1JPS$2 extends ComfyNode<Resolution_Multiply_$1JPS$2_input, Resolution_Multiply_$1JPS$2_output> {
    nameInComfy: "Resolution Multiply (JPS)"
}
export interface Resolution_Multiply_$1JPS$2_output {
    width_resized: ComfyNodeOutput<'INT', 0>,
    height_resized: ComfyNodeOutput<'INT', 1>,
}
export interface Resolution_Multiply_$1JPS$2_input {
    /** default=1024 min=8192 max=8192 step=16 */
    width?: _INT
    /** default=1024 min=8192 max=8192 step=16 */
    height?: _INT
    /** default=2 min=8 max=8 step=1 */
    factor?: _INT
}

// Largest Int (JPS) [JPS Nodes_Math]
export interface Largest_Int_$1JPS$2 extends ComfyNode<Largest_Int_$1JPS$2_input, Largest_Int_$1JPS$2_output> {
    nameInComfy: "Largest Int (JPS)"
}
export interface Largest_Int_$1JPS$2_output {
    larger_int: ComfyNodeOutput<'INT', 0>,
    smaller_int: ComfyNodeOutput<'INT', 1>,
    is_a_larger: ComfyNodeOutput<'INT', 2>,
}
export interface Largest_Int_$1JPS$2_input {
    /** default=1 */
    int_a?: _INT
    /** default=1 */
    int_b?: _INT
}

// Multiply Int Int (JPS) [JPS Nodes_Math]
export interface Multiply_Int_Int_$1JPS$2 extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<Multiply_Int_Int_$1JPS$2_input, Multiply_Int_Int_$1JPS$2_output> {
    nameInComfy: "Multiply Int Int (JPS)"
}
export interface Multiply_Int_Int_$1JPS$2_output {
    int_multiply: ComfyNodeOutput<'INT', 0>,
    float_multiply: ComfyNodeOutput<'FLOAT', 1>,
}
export interface Multiply_Int_Int_$1JPS$2_input {
    /** default=1 */
    int_a?: _INT
    /** default=1 */
    int_b?: _INT
}

// Multiply Int Float (JPS) [JPS Nodes_Math]
export interface Multiply_Int_Float_$1JPS$2 extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<Multiply_Int_Float_$1JPS$2_input, Multiply_Int_Float_$1JPS$2_output> {
    nameInComfy: "Multiply Int Float (JPS)"
}
export interface Multiply_Int_Float_$1JPS$2_output {
    int_multiply: ComfyNodeOutput<'INT', 0>,
    float_multiply: ComfyNodeOutput<'FLOAT', 1>,
}
export interface Multiply_Int_Float_$1JPS$2_input {
    /** default=1 */
    int_a?: _INT
    /** default=1 */
    float_b?: _FLOAT
}

// Multiply Float Float (JPS) [JPS Nodes_Math]
export interface Multiply_Float_Float_$1JPS$2 extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<Multiply_Float_Float_$1JPS$2_input, Multiply_Float_Float_$1JPS$2_output> {
    nameInComfy: "Multiply Float Float (JPS)"
}
export interface Multiply_Float_Float_$1JPS$2_output {
    int_multiply: ComfyNodeOutput<'INT', 0>,
    float_multiply: ComfyNodeOutput<'FLOAT', 1>,
}
export interface Multiply_Float_Float_$1JPS$2_input {
    /** default=1 */
    float_a?: _FLOAT
    /** default=1 */
    float_b?: _FLOAT
}

// Substract Int Int (JPS) [JPS Nodes_Math]
export interface Substract_Int_Int_$1JPS$2 extends HasSingle_INT, HasSingle_FLOAT, ComfyNode<Substract_Int_Int_$1JPS$2_input, Substract_Int_Int_$1JPS$2_output> {
    nameInComfy: "Substract Int Int (JPS)"
}
export interface Substract_Int_Int_$1JPS$2_output {
    int_substract: ComfyNodeOutput<'INT', 0>,
    float_substract: ComfyNodeOutput<'FLOAT', 1>,
}
export interface Substract_Int_Int_$1JPS$2_input {
    /** default=1 */
    int_a?: _INT
    /** default=1 */
    int_b?: _INT
}

// Text Concatenate (JPS) [JPS Nodes_Text]
export interface Text_Concatenate_$1JPS$2 extends HasSingle_STRING, ComfyNode<Text_Concatenate_$1JPS$2_input, Text_Concatenate_$1JPS$2_output> {
    nameInComfy: "Text Concatenate (JPS)"
}
export interface Text_Concatenate_$1JPS$2_output {
    text: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Concatenate_$1JPS$2_input {
    delimiter: Enum_Text_Concatenate_$1JPS$2_delimiter
    /** */
    text1?: _STRING
    /** */
    text2?: _STRING
    /** */
    text3?: _STRING
    /** */
    text4?: _STRING
    /** */
    text5?: _STRING
}

// Get Date Time String (JPS) [JPS Nodes_Text]
export interface Get_Date_Time_String_$1JPS$2 extends HasSingle_STRING, ComfyNode<Get_Date_Time_String_$1JPS$2_input, Get_Date_Time_String_$1JPS$2_output> {
    nameInComfy: "Get Date Time String (JPS)"
}
export interface Get_Date_Time_String_$1JPS$2_output {
    time_format: ComfyNodeOutput<'STRING', 0>,
}
export interface Get_Date_Time_String_$1JPS$2_input {
    style: Enum_Get_Date_Time_String_$1JPS$2_style
}

// Get Image Size (JPS) [JPS Nodes_Image]
export interface Get_Image_Size_$1JPS$2 extends ComfyNode<Get_Image_Size_$1JPS$2_input, Get_Image_Size_$1JPS$2_output> {
    nameInComfy: "Get Image Size (JPS)"
}
export interface Get_Image_Size_$1JPS$2_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
}
export interface Get_Image_Size_$1JPS$2_input {
    image: _IMAGE
}

// Crop Image Square (JPS) [JPS Nodes_Image]
export interface Crop_Image_Square_$1JPS$2 extends HasSingle_IMAGE, ComfyNode<Crop_Image_Square_$1JPS$2_input, Crop_Image_Square_$1JPS$2_output> {
    nameInComfy: "Crop Image Square (JPS)"
}
export interface Crop_Image_Square_$1JPS$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Crop_Image_Square_$1JPS$2_input {
    image: _IMAGE
    crop_position: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
    /** default=0 min=4096 max=4096 step=1 */
    offset_x?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    offset_y?: _INT
    /** default=1 min=5 max=5 step=0.1 */
    zoom?: _FLOAT
    interpolation: Enum_ImageResize$6_interpolation
    /** default=0 min=undefined step=8 */
    target_rez?: _INT
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
}

// Crop Image TargetSize (JPS) [JPS Nodes_Image]
export interface Crop_Image_TargetSize_$1JPS$2 extends HasSingle_IMAGE, ComfyNode<Crop_Image_TargetSize_$1JPS$2_input, Crop_Image_TargetSize_$1JPS$2_output> {
    nameInComfy: "Crop Image TargetSize (JPS)"
}
export interface Crop_Image_TargetSize_$1JPS$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Crop_Image_TargetSize_$1JPS$2_input {
    image: _IMAGE
    /** default=0 min=undefined step=8 */
    target_w?: _INT
    /** default=0 min=undefined step=8 */
    target_h?: _INT
    crop_position: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos
    /** default=0 min=2048 max=2048 step=1 */
    offset?: _INT
    interpolation: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
}

// Prepare Image (JPS) [JPS Nodes_Image]
export interface Prepare_Image_$1JPS$2 extends HasSingle_IMAGE, ComfyNode<Prepare_Image_$1JPS$2_input, Prepare_Image_$1JPS$2_output> {
    nameInComfy: "Prepare Image (JPS)"
}
export interface Prepare_Image_$1JPS$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Prepare_Image_$1JPS$2_input {
    image: _IMAGE
    /** default=1024 min=undefined step=8 */
    target_w?: _INT
    /** default=1024 min=undefined step=8 */
    target_h?: _INT
    /** default=100 min=100 max=100 step=1 */
    crop_w_percent?: _INT
    /** default=100 min=100 max=100 step=1 */
    crop_h_percent?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    offset_w?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    offset_h?: _INT
    interpolation: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
}

// Prepare Image Plus (JPS) [JPS Nodes_Image]
export interface Prepare_Image_Plus_$1JPS$2 extends HasSingle_IMAGE, ComfyNode<Prepare_Image_Plus_$1JPS$2_input, Prepare_Image_Plus_$1JPS$2_output> {
    nameInComfy: "Prepare Image Plus (JPS)"
}
export interface Prepare_Image_Plus_$1JPS$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Prepare_Image_Plus_$1JPS$2_input {
    image: _IMAGE
    /** default=1024 min=undefined step=8 */
    target_w?: _INT
    /** default=1024 min=undefined step=8 */
    target_h?: _INT
    /** default=0 min=99 max=99 step=1 */
    offset_w?: _INT
    /** default=0 min=99 max=99 step=1 */
    offset_h?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_left?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_right?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_top?: _INT
    /** default=0 min=90 max=90 step=1 */
    crop_bottom?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_left?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_right?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_top?: _INT
    /** default=0 min=500 max=500 step=1 */
    padding_bottom?: _INT
    interpolation: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
    resize_type: Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type
    flip: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip
}

// Prepare Image Tiled IPA (JPS) [JPS Nodes_Image]
export interface Prepare_Image_Tiled_IPA_$1JPS$2 extends HasSingle_IMAGE, ComfyNode<Prepare_Image_Tiled_IPA_$1JPS$2_input, Prepare_Image_Tiled_IPA_$1JPS$2_output> {
    nameInComfy: "Prepare Image Tiled IPA (JPS)"
}
export interface Prepare_Image_Tiled_IPA_$1JPS$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Prepare_Image_Tiled_IPA_$1JPS$2_input {
    image: _IMAGE
    /** default=0 min=undefined step=8 */
    target_w?: _INT
    /** default=0 min=undefined step=8 */
    target_h?: _INT
    /** default=1 min=500 max=500 step=1 */
    zoom?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    offset_w?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    offset_h?: _INT
    interpolation: Enum_ImageResize$6_interpolation
    /** default=0 min=1 max=1 step=0.05 */
    sharpening?: _FLOAT
    /** default=2 min=5 max=5 step=1 */
    tile_short?: _INT
    /** default=1 min=9 max=9 step=1 */
    prepare_type?: _INT
}

// SDXL Prompt Styler (JPS) [JPS Nodes_Style]
export interface SDXL_Prompt_Styler_$1JPS$2 extends ComfyNode<SDXL_Prompt_Styler_$1JPS$2_input, SDXL_Prompt_Styler_$1JPS$2_output> {
    nameInComfy: "SDXL Prompt Styler (JPS)"
}
export interface SDXL_Prompt_Styler_$1JPS$2_output {
    text_positive_g: ComfyNodeOutput<'STRING', 0>,
    text_positive_l: ComfyNodeOutput<'STRING', 1>,
    text_positive: ComfyNodeOutput<'STRING', 2>,
    text_negative: ComfyNodeOutput<'STRING', 3>,
}
export interface SDXL_Prompt_Styler_$1JPS$2_input {
    /** default="" */
    text_positive_g?: _STRING
    /** default="" */
    text_positive_l?: _STRING
    /** default="" */
    text_negative?: _STRING
    artist: Enum_SDXL_Prompt_Styler_$1JPS$2_artist
    movie: Enum_SDXL_Prompt_Styler_$1JPS$2_movie
    style: Enum_SDXL_Prompt_Styler_$1JPS$2_style
    fooocus_enhance: Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance
    fooocus_negative: Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance
    universal_negative: Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance
}

// SDXL Prompt Handling (JPS) [JPS Nodes_Text]
export interface SDXL_Prompt_Handling_$1JPS$2 extends ComfyNode<SDXL_Prompt_Handling_$1JPS$2_input, SDXL_Prompt_Handling_$1JPS$2_output> {
    nameInComfy: "SDXL Prompt Handling (JPS)"
}
export interface SDXL_Prompt_Handling_$1JPS$2_output {
    pos_g: ComfyNodeOutput<'STRING', 0>,
    pos_l: ComfyNodeOutput<'STRING', 1>,
}
export interface SDXL_Prompt_Handling_$1JPS$2_input {
    handling: Enum_SDXL_Prompt_Handling_$1JPS$2_handling
    /** default="" */
    pos_g?: _STRING
    /** default="" */
    pos_l?: _STRING
}

// SDXL Prompt Handling Plus (JPS) [JPS Nodes_Text]
export interface SDXL_Prompt_Handling_Plus_$1JPS$2 extends ComfyNode<SDXL_Prompt_Handling_Plus_$1JPS$2_input, SDXL_Prompt_Handling_Plus_$1JPS$2_output> {
    nameInComfy: "SDXL Prompt Handling Plus (JPS)"
}
export interface SDXL_Prompt_Handling_Plus_$1JPS$2_output {
    pos_g: ComfyNodeOutput<'STRING', 0>,
    pos_l: ComfyNodeOutput<'STRING', 1>,
}
export interface SDXL_Prompt_Handling_Plus_$1JPS$2_input {
    handling: Enum_SDXL_Prompt_Handling_$1JPS$2_handling
    /** */
    pos_g: _STRING
    /** */
    pos_l: _STRING
}

// Text Prompt (JPS) [JPS Nodes_Text]
export interface Text_Prompt_$1JPS$2 extends HasSingle_STRING, ComfyNode<Text_Prompt_$1JPS$2_input, Text_Prompt_$1JPS$2_output> {
    nameInComfy: "Text Prompt (JPS)"
}
export interface Text_Prompt_$1JPS$2_output {
    text: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Prompt_$1JPS$2_input {
    /** */
    text: _STRING
}

// Text Prompt Combo (JPS) [JPS Nodes_Text]
export interface Text_Prompt_Combo_$1JPS$2 extends ComfyNode<Text_Prompt_Combo_$1JPS$2_input, Text_Prompt_Combo_$1JPS$2_output> {
    nameInComfy: "Text Prompt Combo (JPS)"
}
export interface Text_Prompt_Combo_$1JPS$2_output {
    pos: ComfyNodeOutput<'STRING', 0>,
    neg: ComfyNodeOutput<'STRING', 1>,
}
export interface Text_Prompt_Combo_$1JPS$2_input {
    /** */
    pos: _STRING
    /** */
    neg: _STRING
}

// Save Images Plus (JPS) [JPS Nodes_IO]
export interface Save_Images_Plus_$1JPS$2 extends HasSingle_INT, ComfyNode<Save_Images_Plus_$1JPS$2_input, Save_Images_Plus_$1JPS$2_output> {
    nameInComfy: "Save Images Plus (JPS)"
}
export interface Save_Images_Plus_$1JPS$2_output {
    dummy_out: ComfyNodeOutput<'INT', 0>,
}
export interface Save_Images_Plus_$1JPS$2_input {
    images: _IMAGE
    /** default="ComfyUI" */
    filename_prefix?: _STRING
}

// CLIPTextEncode SDXL Plus (JPS) [JPS Nodes_Conditioning]
export interface CLIPTextEncode_SDXL_Plus_$1JPS$2 extends ComfyNode<CLIPTextEncode_SDXL_Plus_$1JPS$2_input, CLIPTextEncode_SDXL_Plus_$1JPS$2_output> {
    nameInComfy: "CLIPTextEncode SDXL Plus (JPS)"
}
export interface CLIPTextEncode_SDXL_Plus_$1JPS$2_output {
    cond_pos: ComfyNodeOutput<'CONDITIONING', 0>,
    cond_neg: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface CLIPTextEncode_SDXL_Plus_$1JPS$2_input {
    /** default=1024 min=12288 max=12288 */
    width?: _INT
    /** default=1024 min=12288 max=12288 */
    height?: _INT
    /** default=4 min=8 max=8 */
    res_factor?: _INT
    /** default="" */
    text_pos?: _STRING
    /** default="" */
    text_neg?: _STRING
    clip: _CLIP
}

// Time Seed (JPS) [JPS Nodes_Text]
export interface Time_Seed_$1JPS$2 extends HasSingle_INT, ComfyNode<Time_Seed_$1JPS$2_input, Time_Seed_$1JPS$2_output> {
    nameInComfy: "Time Seed (JPS)"
}
export interface Time_Seed_$1JPS$2_output {
    seed: ComfyNodeOutput<'INT', 0>,
}
export interface Time_Seed_$1JPS$2_input {
    /** default=0 min=99999999999 max=99999999999 step=1 */
    fixed_seed?: _INT
}

// NNLatentUpscale [latent]
export interface NNLatentUpscale extends HasSingle_LATENT, ComfyNode<NNLatentUpscale_input, NNLatentUpscale_output> {
    nameInComfy: "NNLatentUpscale"
}
export interface NNLatentUpscale_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface NNLatentUpscale_input {
    latent: _LATENT
    version: Enum_NNLatentUpscale_version
    /** default=1.5 min=2 max=2 step=0.01 */
    upscale?: _FLOAT
}

// BNK_NoisyLatentImage [latent_noise]
export interface BNK$_NoisyLatentImage extends HasSingle_LATENT, ComfyNode<BNK$_NoisyLatentImage_input, BNK$_NoisyLatentImage_output> {
    nameInComfy: "BNK_NoisyLatentImage"
}
export interface BNK$_NoisyLatentImage_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface BNK$_NoisyLatentImage_input {
    source: Enum_NoiseInjectionHookProvider_source
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=512 min=8192 max=8192 step=8 */
    width?: _INT
    /** default=512 min=8192 max=8192 step=8 */
    height?: _INT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// BNK_SlerpLatent [latent]
export interface BNK$_SlerpLatent extends HasSingle_LATENT, ComfyNode<BNK$_SlerpLatent_input, BNK$_SlerpLatent_output> {
    nameInComfy: "BNK_SlerpLatent"
}
export interface BNK$_SlerpLatent_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface BNK$_SlerpLatent_input {
    latents1: _LATENT
    /** default=0.5 min=1 max=1 step=0.01 */
    factor?: _FLOAT
    latents2?: _LATENT
    mask?: _MASK
}

// BNK_GetSigma [latent_noise]
export interface BNK$_GetSigma extends HasSingle_FLOAT, ComfyNode<BNK$_GetSigma_input, BNK$_GetSigma_output> {
    nameInComfy: "BNK_GetSigma"
}
export interface BNK$_GetSigma_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface BNK$_GetSigma_input {
    model: _MODEL
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=10000 min=10000 max=10000 */
    steps?: _INT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
}

// BNK_InjectNoise [latent_noise]
export interface BNK$_InjectNoise extends HasSingle_LATENT, ComfyNode<BNK$_InjectNoise_input, BNK$_InjectNoise_output> {
    nameInComfy: "BNK_InjectNoise"
}
export interface BNK$_InjectNoise_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface BNK$_InjectNoise_input {
    latents: _LATENT
    /** default=1 min=200 max=200 step=0.01 */
    strength?: _FLOAT
    noise?: _LATENT
    mask?: _MASK
}

// BNK_Unsampler [sampling]
export interface BNK$_Unsampler extends HasSingle_LATENT, ComfyNode<BNK$_Unsampler_input, BNK$_Unsampler_output> {
    nameInComfy: "BNK_Unsampler"
}
export interface BNK$_Unsampler_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface BNK$_Unsampler_input {
    model: _MODEL
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=0 min=10000 max=10000 */
    end_at_step?: _INT
    /** default=1 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    normalize: Enum_KSamplerAdvanced_add_noise
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
}

// BNK_TiledKSamplerAdvanced [sampling]
export interface BNK$_TiledKSamplerAdvanced extends HasSingle_LATENT, ComfyNode<BNK$_TiledKSamplerAdvanced_input, BNK$_TiledKSamplerAdvanced_output> {
    nameInComfy: "BNK_TiledKSamplerAdvanced"
}
export interface BNK$_TiledKSamplerAdvanced_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface BNK$_TiledKSamplerAdvanced_input {
    model: _MODEL
    add_noise: Enum_KSamplerAdvanced_add_noise
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=512 min=8192 max=8192 step=64 */
    tile_width?: _INT
    /** default=512 min=8192 max=8192 step=64 */
    tile_height?: _INT
    tiling_strategy: Enum_BNK$_TiledKSamplerAdvanced_tiling_strategy
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    return_with_leftover_noise: Enum_KSamplerAdvanced_add_noise
    preview: Enum_KSamplerAdvanced_add_noise
}

// BNK_TiledKSampler [sampling]
export interface BNK$_TiledKSampler extends HasSingle_LATENT, ComfyNode<BNK$_TiledKSampler_input, BNK$_TiledKSampler_output> {
    nameInComfy: "BNK_TiledKSampler"
}
export interface BNK$_TiledKSampler_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface BNK$_TiledKSampler_input {
    model: _MODEL
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=512 min=8192 max=8192 step=64 */
    tile_width?: _INT
    /** default=512 min=8192 max=8192 step=64 */
    tile_height?: _INT
    tiling_strategy: Enum_BNK$_TiledKSamplerAdvanced_tiling_strategy
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// ttN tinyLoader [🌏 tinyterra_base]
export interface ttN_tinyLoader extends HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, ComfyNode<ttN_tinyLoader_input, ttN_tinyLoader_output> {
    nameInComfy: "ttN tinyLoader"
}
export interface ttN_tinyLoader_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    latent: ComfyNodeOutput<'LATENT', 1>,
    vae: ComfyNodeOutput<'VAE', 2>,
    clip: ComfyNodeOutput<'CLIP', 3>,
    width: ComfyNodeOutput<'INT', 4>,
    height: ComfyNodeOutput<'INT', 5>,
}
export interface ttN_tinyLoader_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** default="Default" */
    config_name?: Enum_ttN_tinyLoader_config_name
    /** default="Default" */
    sampling?: Enum_ttN_tinyLoader_sampling
    /** default=false */
    zsnr?: _BOOLEAN
    /** default=0 min=1 max=1 step=0.01 */
    cfg_rescale_mult?: _FLOAT
    vae_name: Enum_ttN_tinyLoader_vae_name
    /** default=-1 min=0 max=0 step=1 */
    clip_skip?: _INT
    /** default="512 x 512 [S] 1:1" */
    empty_latent_aspect?: Enum_ttN_tinyLoader_empty_latent_aspect
    /** default=512 min=16384 max=16384 step=8 */
    empty_latent_width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    empty_latent_height?: _INT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// ttN conditioning [🌏 tinyterra_base]
export interface ttN_conditioning extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<ttN_conditioning_input, ttN_conditioning_output> {
    nameInComfy: "ttN conditioning"
}
export interface ttN_conditioning_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    positive: ComfyNodeOutput<'CONDITIONING', 1>,
    negative: ComfyNodeOutput<'CONDITIONING', 2>,
    clip: ComfyNodeOutput<'CLIP', 3>,
    pos_string: ComfyNodeOutput<'STRING', 4>,
    neg_string: ComfyNodeOutput<'STRING', 5>,
}
export interface ttN_conditioning_input {
    model: _MODEL
    clip: _CLIP
    /** */
    loras: _STRING
    /** default="Positive" */
    positive?: _STRING
    positive_token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    positive_weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default="Negative" */
    negative?: _STRING
    negative_token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    negative_weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    optional_lora_stack?: _LORA_STACK
    /** */
    prepend_positive?: _STRING
    /** */
    prepend_negative?: _STRING
}

// ttN KSampler_v2 [🌏 tinyterra_base]
export interface ttN_KSampler$_v2 extends HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_INT, ComfyNode<ttN_KSampler$_v2_input, ttN_KSampler$_v2_output> {
    nameInComfy: "ttN KSampler_v2"
}
export interface ttN_KSampler$_v2_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    positive: ComfyNodeOutput<'CONDITIONING', 1>,
    negative: ComfyNodeOutput<'CONDITIONING', 2>,
    latent: ComfyNodeOutput<'LATENT', 3>,
    vae: ComfyNodeOutput<'VAE', 4>,
    clip: ComfyNodeOutput<'CLIP', 5>,
    images: ComfyNodeOutput<'IMAGE', 6>,
    seed: ComfyNodeOutput<'INT', 7>,
    plot_image: ComfyNodeOutput<'IMAGE', 8>,
}
export interface ttN_KSampler$_v2_input {
    model: _MODEL
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent: _LATENT
    vae: _VAE
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_strength?: _FLOAT
    /** default="None" */
    upscale_method?: Enum_ttN_KSampler$_v2_upscale_method
    upscale_model_name: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
    /** default=2 min=10 max=10 step=0.25 */
    factor?: _FLOAT
    rescale: Enum_ttN_KSampler$_v2_rescale
    /** default=50 min=1000 max=1000 step=1 */
    percent?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    longer_side?: _INT
    crop: Enum_LatentUpscale_crop
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_ttN_KSampler$_v2_scheduler
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    image_output: Enum_ttN_KSampler$_v2_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default="png" */
    file_type?: Enum_ttN_KSampler$_v2_file_type
    /** default=true */
    embed_workflow?: _BOOLEAN
    clip?: _CLIP
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    input_image_override?: _IMAGE
    adv_xyPlot?: _ADV_XYPLOT
}

// ttN pipeLoader_v2 [🌏 tinyterra_pipe]
export interface ttN_pipeLoader$_v2 extends HasSingle_PIPE_LINE, HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, ComfyNode<ttN_pipeLoader$_v2_input, ttN_pipeLoader$_v2_output> {
    nameInComfy: "ttN pipeLoader_v2"
}
export interface ttN_pipeLoader$_v2_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    positive: ComfyNodeOutput<'CONDITIONING', 2>,
    negative: ComfyNodeOutput<'CONDITIONING', 3>,
    latent: ComfyNodeOutput<'LATENT', 4>,
    vae: ComfyNodeOutput<'VAE', 5>,
    clip: ComfyNodeOutput<'CLIP', 6>,
    seed: ComfyNodeOutput<'INT', 7>,
    width: ComfyNodeOutput<'INT', 8>,
    height: ComfyNodeOutput<'INT', 9>,
    pos_string: ComfyNodeOutput<'STRING', 10>,
    neg_string: ComfyNodeOutput<'STRING', 11>,
}
export interface ttN_pipeLoader$_v2_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** default="Default" */
    config_name?: Enum_ttN_tinyLoader_config_name
    vae_name: Enum_ttN_tinyLoader_vae_name
    /** default=-1 min=0 max=0 step=1 */
    clip_skip?: _INT
    /** */
    loras: _STRING
    /** default="Positive" */
    positive?: _STRING
    positive_token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    positive_weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default="Negative" */
    negative?: _STRING
    negative_token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    negative_weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default="512 x 512 [S] 1:1" */
    empty_latent_aspect?: Enum_ttN_pipeLoader$_v2_empty_latent_aspect
    /** default=512 min=16384 max=16384 step=8 */
    empty_latent_width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    empty_latent_height?: _INT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    model_override?: _MODEL
    clip_override?: _CLIP
    optional_lora_stack?: _LORA_STACK
    optional_controlnet_stack?: _CONTROL_NET_STACK
    /** */
    prepend_positive?: _STRING
    /** */
    prepend_negative?: _STRING
}

// ttN pipeKSampler_v2 [🌏 tinyterra_pipe]
export interface ttN_pipeKSampler$_v2 extends HasSingle_PIPE_LINE, HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_INT, ComfyNode<ttN_pipeKSampler$_v2_input, ttN_pipeKSampler$_v2_output> {
    nameInComfy: "ttN pipeKSampler_v2"
}
export interface ttN_pipeKSampler$_v2_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    positive: ComfyNodeOutput<'CONDITIONING', 2>,
    negative: ComfyNodeOutput<'CONDITIONING', 3>,
    latent: ComfyNodeOutput<'LATENT', 4>,
    vae: ComfyNodeOutput<'VAE', 5>,
    clip: ComfyNodeOutput<'CLIP', 6>,
    images: ComfyNodeOutput<'IMAGE', 7>,
    seed: ComfyNodeOutput<'INT', 8>,
    plot_image: ComfyNodeOutput<'IMAGE', 9>,
}
export interface ttN_pipeKSampler$_v2_input {
    pipe: _PIPE_LINE
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_strength?: _FLOAT
    /** default="None" */
    upscale_method?: Enum_ttN_KSampler$_v2_upscale_method
    upscale_model_name: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
    /** default=2 min=10 max=10 step=0.25 */
    factor?: _FLOAT
    rescale: Enum_ttN_KSampler$_v2_rescale
    /** default=50 min=1000 max=1000 step=1 */
    percent?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    longer_side?: _INT
    crop: Enum_LatentUpscale_crop
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_ttN_KSampler$_v2_scheduler
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    image_output: Enum_ttN_KSampler$_v2_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default="png" */
    file_type?: Enum_ttN_KSampler$_v2_file_type
    /** default=true */
    embed_workflow?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    optional_model?: _MODEL
    optional_positive?: _CONDITIONING
    optional_negative?: _CONDITIONING
    optional_latent?: _LATENT
    optional_vae?: _VAE
    optional_clip?: _CLIP
    input_image_override?: _IMAGE
    adv_xyPlot?: _ADV_XYPLOT
}

// ttN pipeKSamplerAdvanced_v2 [🌏 tinyterra_pipe]
export interface ttN_pipeKSamplerAdvanced$_v2 extends HasSingle_PIPE_LINE, HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_IMAGE, HasSingle_INT, ComfyNode<ttN_pipeKSamplerAdvanced$_v2_input, ttN_pipeKSamplerAdvanced$_v2_output> {
    nameInComfy: "ttN pipeKSamplerAdvanced_v2"
}
export interface ttN_pipeKSamplerAdvanced$_v2_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    positive: ComfyNodeOutput<'CONDITIONING', 2>,
    negative: ComfyNodeOutput<'CONDITIONING', 3>,
    latent: ComfyNodeOutput<'LATENT', 4>,
    vae: ComfyNodeOutput<'VAE', 5>,
    clip: ComfyNodeOutput<'CLIP', 6>,
    image: ComfyNodeOutput<'IMAGE', 7>,
    seed: ComfyNodeOutput<'INT', 8>,
}
export interface ttN_pipeKSamplerAdvanced$_v2_input {
    pipe: _PIPE_LINE
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_strength?: _FLOAT
    /** default="None" */
    upscale_method?: Enum_ttN_KSampler$_v2_upscale_method
    upscale_model_name: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
    /** default=2 min=10 max=10 step=0.25 */
    factor?: _FLOAT
    rescale: Enum_ttN_KSampler$_v2_rescale
    /** default=50 min=1000 max=1000 step=1 */
    percent?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    longer_side?: _INT
    crop: Enum_LatentUpscale_crop
    add_noise: Enum_KSamplerAdvanced_add_noise
    /** default=1 min=1 max=1 step=0.01 */
    noise?: _FLOAT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_ttN_KSampler$_v2_scheduler
    return_with_leftover_noise: Enum_KSamplerAdvanced_add_noise
    image_output: Enum_ttN_KSampler$_v2_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default="png" */
    file_type?: Enum_ttN_KSampler$_v2_file_type
    /** default=true */
    embed_workflow?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    optional_model?: _MODEL
    optional_positive?: _CONDITIONING
    optional_negative?: _CONDITIONING
    optional_latent?: _LATENT
    optional_vae?: _VAE
    optional_clip?: _CLIP
    input_image_override?: _IMAGE
    adv_xyPlot?: _ADV_XYPLOT
}

// ttN pipeLoaderSDXL_v2 [🌏 tinyterra_pipe]
export interface ttN_pipeLoaderSDXL$_v2 extends HasSingle_PIPE_LINE_SDXL, HasSingle_VAE, HasSingle_LATENT, ComfyNode<ttN_pipeLoaderSDXL$_v2_input, ttN_pipeLoaderSDXL$_v2_output> {
    nameInComfy: "ttN pipeLoaderSDXL_v2"
}
export interface ttN_pipeLoaderSDXL$_v2_output {
    sdxl_pipe: ComfyNodeOutput<'PIPE_LINE_SDXL', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    positive: ComfyNodeOutput<'CONDITIONING', 2>,
    negative: ComfyNodeOutput<'CONDITIONING', 3>,
    vae: ComfyNodeOutput<'VAE', 4>,
    clip: ComfyNodeOutput<'CLIP', 5>,
    refiner_model: ComfyNodeOutput<'MODEL', 6>,
    refiner_positive: ComfyNodeOutput<'CONDITIONING', 7>,
    refiner_negative: ComfyNodeOutput<'CONDITIONING', 8>,
    refiner_clip: ComfyNodeOutput<'CLIP', 9>,
    latent: ComfyNodeOutput<'LATENT', 10>,
    seed: ComfyNodeOutput<'INT', 11>,
    width: ComfyNodeOutput<'INT', 12>,
    height: ComfyNodeOutput<'INT', 13>,
    pos_string: ComfyNodeOutput<'STRING', 14>,
    neg_string: ComfyNodeOutput<'STRING', 15>,
}
export interface ttN_pipeLoaderSDXL$_v2_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** default="Default" */
    config_name?: Enum_ttN_tinyLoader_config_name
    vae_name: Enum_ttN_tinyLoader_vae_name
    /** default=-2 min=0 max=0 step=1 */
    clip_skip?: _INT
    /** */
    loras: _STRING
    refiner_ckpt_name: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default="Default" */
    refiner_config_name?: Enum_ttN_tinyLoader_config_name
    /** */
    positive_g: _STRING
    /** */
    positive_l: _STRING
    /** */
    negative_g: _STRING
    /** */
    negative_l: _STRING
    /** default="1x Empty Latent Aspect" */
    conditioning_aspect?: Enum_ttN_pipeLoaderSDXL$_v2_conditioning_aspect
    /** default=2048 min=16384 max=16384 step=8 */
    conditioning_width?: _INT
    /** default=2048 min=16384 max=16384 step=8 */
    conditioning_height?: _INT
    /** default=0 min=16384 max=16384 */
    crop_width?: _INT
    /** default=0 min=16384 max=16384 */
    crop_height?: _INT
    /** default="1x Empty Latent Aspect" */
    target_aspect?: Enum_ttN_pipeLoaderSDXL$_v2_conditioning_aspect
    /** default=1024 min=16384 max=16384 */
    target_width?: _INT
    /** default=1024 min=16384 max=16384 */
    target_height?: _INT
    /** default=6 min=undefined step=0.1 */
    positive_ascore?: _INT
    /** default=2 min=undefined step=0.1 */
    negative_ascore?: _INT
    /** default="1024 x 1024 [S] 1:1" */
    empty_latent_aspect?: Enum_ttN_pipeLoaderSDXL$_v2_empty_latent_aspect
    /** default=1024 min=16384 max=16384 step=8 */
    empty_latent_width?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    empty_latent_height?: _INT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    model_override?: _MODEL
    clip_override?: _CLIP
    optional_lora_stack?: _LORA_STACK
    optional_controlnet_stack?: _CONTROL_NET_STACK
    refiner_model_override?: _MODEL
    refiner_clip_override?: _CLIP
    /** */
    prepend_positive_g?: _STRING
    /** */
    prepend_positive_l?: _STRING
    /** */
    prepend_negative_g?: _STRING
    /** */
    prepend_negative_l?: _STRING
}

// ttN pipeKSamplerSDXL_v2 [🌏 tinyterra_pipe]
export interface ttN_pipeKSamplerSDXL$_v2 extends HasSingle_PIPE_LINE_SDXL, HasSingle_PIPE_LINE, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_INT, ComfyNode<ttN_pipeKSamplerSDXL$_v2_input, ttN_pipeKSamplerSDXL$_v2_output> {
    nameInComfy: "ttN pipeKSamplerSDXL_v2"
}
export interface ttN_pipeKSamplerSDXL$_v2_output {
    sdxl_pipe: ComfyNodeOutput<'PIPE_LINE_SDXL', 0>,
    pipe: ComfyNodeOutput<'PIPE_LINE', 1>,
    model: ComfyNodeOutput<'MODEL', 2>,
    positive: ComfyNodeOutput<'CONDITIONING', 3>,
    negative: ComfyNodeOutput<'CONDITIONING', 4>,
    refiner_model: ComfyNodeOutput<'MODEL', 5>,
    refiner_positive: ComfyNodeOutput<'CONDITIONING', 6>,
    refiner_negative: ComfyNodeOutput<'CONDITIONING', 7>,
    latent: ComfyNodeOutput<'LATENT', 8>,
    vae: ComfyNodeOutput<'VAE', 9>,
    clip: ComfyNodeOutput<'CLIP', 10>,
    images: ComfyNodeOutput<'IMAGE', 11>,
    seed: ComfyNodeOutput<'INT', 12>,
    plot_image: ComfyNodeOutput<'IMAGE', 13>,
}
export interface ttN_pipeKSamplerSDXL$_v2_input {
    sdxl_pipe: _PIPE_LINE_SDXL
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_strength?: _FLOAT
    /** default="None" */
    upscale_method?: Enum_ttN_KSampler$_v2_upscale_method
    upscale_model_name: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name
    /** default=2 min=10 max=10 step=0.25 */
    factor?: _FLOAT
    rescale: Enum_ttN_KSampler$_v2_rescale
    /** default=50 min=1000 max=1000 step=1 */
    percent?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    longer_side?: _INT
    crop: Enum_LatentUpscale_crop
    /** default=20 min=10000 max=10000 */
    base_steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    /** default=20 min=10000 max=10000 */
    refiner_steps?: _INT
    /** default=8 min=100 max=100 */
    refiner_cfg?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    refiner_denoise?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_ttN_KSampler$_v2_scheduler
    image_output: Enum_ttN_KSampler$_v2_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default="png" */
    file_type?: Enum_ttN_KSampler$_v2_file_type
    /** default=true */
    embed_workflow?: _BOOLEAN
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    optional_model?: _MODEL
    optional_positive?: _CONDITIONING
    optional_negative?: _CONDITIONING
    optional_latent?: _LATENT
    optional_vae?: _VAE
    optional_refiner_model?: _MODEL
    optional_refiner_positive?: _CONDITIONING
    optional_refiner_negative?: _CONDITIONING
    optional_clip?: _CLIP
    input_image_override?: _IMAGE
    adv_xyPlot?: _ADV_XYPLOT
}

// ttN advanced xyPlot [🌏 tinyterra_xyPlot]
export interface ttN_advanced_xyPlot extends HasSingle_ADV_XYPLOT, ComfyNode<ttN_advanced_xyPlot_input, ttN_advanced_xyPlot_output> {
    nameInComfy: "ttN advanced xyPlot"
}
export interface ttN_advanced_xyPlot_output {
    adv_xyPlot: ComfyNodeOutput<'ADV_XYPLOT', 0>,
}
export interface ttN_advanced_xyPlot_input {
    /** default=0 min=500 max=500 step=5 */
    grid_spacing?: _INT
    /** default=false */
    save_individuals?: _BOOLEAN
    /** default=false */
    flip_xy?: _BOOLEAN
    /** default="" */
    x_plot?: _STRING
    /** default="" */
    y_plot?: _STRING
    /** default="" */
    z_plot?: _STRING
}

// ttN advPlot images [🌏 tinyterra_xyPlot]
export interface ttN_advPlot_images extends ComfyNode<ttN_advPlot_images_input, ttN_advPlot_images_output> {
    nameInComfy: "ttN advPlot images"
}
export interface ttN_advPlot_images_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
    plot_image: ComfyNodeOutput<'IMAGE', 1>,
}
export interface ttN_advPlot_images_input {
    /** default=true */
    enabled?: _BOOLEAN
    /** */
    image: _IMAGE
    image_output: Enum_ttN_KSampler$_v2_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default="png" */
    file_type?: Enum_ttN_KSampler$_v2_file_type
    /** default=true */
    embed_workflow?: _BOOLEAN
    adv_xyPlot?: _ADV_XYPLOT
}

// ttN advPlot range [🌏 tinyterra_xyPlot]
export interface ttN_advPlot_range extends HasSingle_STRING, ComfyNode<ttN_advPlot_range_input, ttN_advPlot_range_output> {
    nameInComfy: "ttN advPlot range"
}
export interface ttN_advPlot_range_output {
    plot_text: ComfyNodeOutput<'STRING', 0>,
}
export interface ttN_advPlot_range_input {
    /** */
    node: Enum_ttN_advPlot_range_node
    /** */
    widget: Enum_ttN_advPlot_range_widget
    /** */
    range_mode: Enum_ttN_advPlot_range_range_mode
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    start?: _FLOAT
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    step?: _FLOAT
    /** default=5 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    stop?: _FLOAT
    /** default=true */
    include_stop?: _BOOLEAN
    /** default=5 min=1000 max=1000 step=1 */
    num_steps?: _INT
    /** default="Values" */
    label_type?: Enum_ttN_advPlot_range_label_type
}

// ttN advPlot string [🌏 tinyterra_xyPlot]
export interface ttN_advPlot_string extends HasSingle_STRING, ComfyNode<ttN_advPlot_string_input, ttN_advPlot_string_output> {
    nameInComfy: "ttN advPlot string"
}
export interface ttN_advPlot_string_output {
    plot_text: ComfyNodeOutput<'STRING', 0>,
}
export interface ttN_advPlot_string_input {
    /** */
    node: Enum_ttN_advPlot_range_node
    /** */
    widget: Enum_ttN_advPlot_range_widget
    /** default=false */
    replace_mode?: _BOOLEAN
    /** default="" */
    search_string?: _STRING
    /** default="" */
    text?: _STRING
    /** default="\\n" */
    delimiter?: _STRING
    /** default="Values" */
    label_type?: Enum_ttN_advPlot_range_label_type
}

// ttN advPlot combo [🌏 tinyterra_xyPlot]
export interface ttN_advPlot_combo extends HasSingle_STRING, ComfyNode<ttN_advPlot_combo_input, ttN_advPlot_combo_output> {
    nameInComfy: "ttN advPlot combo"
}
export interface ttN_advPlot_combo_output {
    plot_text: ComfyNodeOutput<'STRING', 0>,
}
export interface ttN_advPlot_combo_input {
    /** */
    node: Enum_ttN_advPlot_range_node
    /** */
    widget: Enum_ttN_advPlot_range_widget
    mode: Enum_ttN_advPlot_combo_mode
    start_from: Enum_ttN_advPlot_combo_start_from
    end_with: Enum_ttN_advPlot_combo_start_from
    select: Enum_ttN_advPlot_combo_start_from
    /** default="" */
    selection?: _STRING
    /** default="Values" */
    label_type?: Enum_ttN_advPlot_range_label_type
}

// ttN pipeEDIT [🌏 tinyterra_pipe]
export interface ttN_pipeEDIT extends HasSingle_PIPE_LINE, HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_IMAGE, HasSingle_INT, ComfyNode<ttN_pipeEDIT_input, ttN_pipeEDIT_output> {
    nameInComfy: "ttN pipeEDIT"
}
export interface ttN_pipeEDIT_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    pos: ComfyNodeOutput<'CONDITIONING', 2>,
    neg: ComfyNodeOutput<'CONDITIONING', 3>,
    latent: ComfyNodeOutput<'LATENT', 4>,
    vae: ComfyNodeOutput<'VAE', 5>,
    clip: ComfyNodeOutput<'CLIP', 6>,
    image: ComfyNodeOutput<'IMAGE', 7>,
    seed: ComfyNodeOutput<'INT', 8>,
}
export interface ttN_pipeEDIT_input {
    pipe?: _PIPE_LINE
    model?: _MODEL
    pos?: _CONDITIONING
    neg?: _CONDITIONING
    latent?: _LATENT
    vae?: _VAE
    clip?: _CLIP
    image?: _IMAGE
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// ttN pipe2BASIC [🌏 tinyterra_pipe]
export interface ttN_pipe2BASIC extends HasSingle_BASIC_PIPE, HasSingle_PIPE_LINE, ComfyNode<ttN_pipe2BASIC_input, ttN_pipe2BASIC_output> {
    nameInComfy: "ttN pipe2BASIC"
}
export interface ttN_pipe2BASIC_output {
    basic_pipe: ComfyNodeOutput<'BASIC_PIPE', 0>,
    pipe: ComfyNodeOutput<'PIPE_LINE', 1>,
}
export interface ttN_pipe2BASIC_input {
    pipe: _PIPE_LINE
}

// ttN pipe2DETAILER [🌏 tinyterra_pipe]
export interface ttN_pipe2DETAILER extends HasSingle_DETAILER_PIPE, HasSingle_PIPE_LINE, ComfyNode<ttN_pipe2DETAILER_input, ttN_pipe2DETAILER_output> {
    nameInComfy: "ttN pipe2DETAILER"
}
export interface ttN_pipe2DETAILER_output {
    detailer_pipe: ComfyNodeOutput<'DETAILER_PIPE', 0>,
    pipe: ComfyNodeOutput<'PIPE_LINE', 1>,
}
export interface ttN_pipe2DETAILER_input {
    pipe: _PIPE_LINE
    bbox_detector: _BBOX_DETECTOR
    /** */
    wildcard: _STRING
    sam_model_opt?: _SAM_MODEL
    segm_detector_opt?: _SEGM_DETECTOR
    detailer_hook?: _DETAILER_HOOK
}

// ttN pipeEncodeConcat [🌏 tinyterra_pipe]
export interface ttN_pipeEncodeConcat extends HasSingle_PIPE_LINE, HasSingle_CLIP, ComfyNode<ttN_pipeEncodeConcat_input, ttN_pipeEncodeConcat_output> {
    nameInComfy: "ttN pipeEncodeConcat"
}
export interface ttN_pipeEncodeConcat_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    positive: ComfyNodeOutput<'CONDITIONING', 1>,
    negative: ComfyNodeOutput<'CONDITIONING', 2>,
    clip: ComfyNodeOutput<'CLIP', 3>,
}
export interface ttN_pipeEncodeConcat_input {
    pipe: _PIPE_LINE
    toggle: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default="Positive" */
    positive?: _STRING
    positive_token_normalization?: Enum_WildcardEncode_$3$3Inspire_token_normalization
    positive_weight_interpretation?: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default="Negative" */
    negative?: _STRING
    negative_token_normalization?: Enum_WildcardEncode_$3$3Inspire_token_normalization
    negative_weight_interpretation?: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    optional_positive_from?: _CONDITIONING
    optional_negative_from?: _CONDITIONING
    optional_clip?: _CLIP
}

// ttN pipeLoraStack [🌏 tinyterra_pipe]
export interface ttN_pipeLoraStack extends HasSingle_PIPE_LINE, HasSingle_LORA_STACK, ComfyNode<ttN_pipeLoraStack_input, ttN_pipeLoraStack_output> {
    nameInComfy: "ttN pipeLoraStack"
}
export interface ttN_pipeLoraStack_output {
    optional_pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    lora_stack: ComfyNodeOutput<'LORA_STACK', 1>,
}
export interface ttN_pipeLoraStack_input {
    toggle: Enum_ImageDrawRectangleRounded_top_left_corner
    mode: Enum_ttN_pipeLoraStack_mode
    /** default=1 min=20 max=20 */
    num_loras?: _INT
    /** */
    optional_pipe?: _PIPE_LINE
    model_override?: _MODEL
    clip_override?: _CLIP
    optional_lora_stack?: _LORA_STACK
    /** default="None" */
    lora_1_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_1_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_1_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_1_clip_strength?: _FLOAT
    /** default="None" */
    lora_2_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_2_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_2_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_2_clip_strength?: _FLOAT
    /** default="None" */
    lora_3_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_3_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_3_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_3_clip_strength?: _FLOAT
    /** default="None" */
    lora_4_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_4_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_4_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_4_clip_strength?: _FLOAT
    /** default="None" */
    lora_5_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_5_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_5_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_5_clip_strength?: _FLOAT
    /** default="None" */
    lora_6_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_6_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_6_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_6_clip_strength?: _FLOAT
    /** default="None" */
    lora_7_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_7_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_7_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_7_clip_strength?: _FLOAT
    /** default="None" */
    lora_8_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_8_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_8_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_8_clip_strength?: _FLOAT
    /** default="None" */
    lora_9_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_9_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_9_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_9_clip_strength?: _FLOAT
    /** default="None" */
    lora_10_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_10_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_10_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_10_clip_strength?: _FLOAT
    /** default="None" */
    lora_11_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_11_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_11_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_11_clip_strength?: _FLOAT
    /** default="None" */
    lora_12_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_12_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_12_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_12_clip_strength?: _FLOAT
    /** default="None" */
    lora_13_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_13_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_13_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_13_clip_strength?: _FLOAT
    /** default="None" */
    lora_14_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_14_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_14_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_14_clip_strength?: _FLOAT
    /** default="None" */
    lora_15_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_15_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_15_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_15_clip_strength?: _FLOAT
    /** default="None" */
    lora_16_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_16_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_16_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_16_clip_strength?: _FLOAT
    /** default="None" */
    lora_17_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_17_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_17_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_17_clip_strength?: _FLOAT
    /** default="None" */
    lora_18_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_18_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_18_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_18_clip_strength?: _FLOAT
    /** default="None" */
    lora_19_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_19_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_19_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_19_clip_strength?: _FLOAT
    /** default="None" */
    lora_20_name?: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_20_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_20_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_20_clip_strength?: _FLOAT
}

// ttN multiModelMerge [🌏 tinyterra]
export interface ttN_multiModelMerge extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<ttN_multiModelMerge_input, ttN_multiModelMerge_output> {
    nameInComfy: "ttN multiModelMerge"
}
export interface ttN_multiModelMerge_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    clip: ComfyNodeOutput<'CLIP', 1>,
}
export interface ttN_multiModelMerge_input {
    ckpt_A_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** default="Default" */
    config_A_name?: Enum_ttN_tinyLoader_config_name
    ckpt_B_name: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default="Default" */
    config_B_name?: Enum_ttN_tinyLoader_config_name
    ckpt_C_name: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    /** default="Default" */
    config_C_name?: Enum_ttN_tinyLoader_config_name
    model_interpolation: Enum_ttN_multiModelMerge_model_interpolation
    /** default=1 min=1 max=1 step=0.01 */
    model_multiplier?: _FLOAT
    clip_interpolation: Enum_ttN_multiModelMerge_clip_interpolation
    /** default=1 min=1 max=1 step=0.01 */
    clip_multiplier?: _FLOAT
    model_A_override?: _MODEL
    model_B_override?: _MODEL
    model_C_override?: _MODEL
    clip_A_override?: _CLIP
    clip_B_override?: _CLIP
    clip_C_override?: _CLIP
}

// ttN debugInput [🌏 tinyterra_util]
export interface ttN_debugInput extends ComfyNode<ttN_debugInput_input, ttN_debugInput_output> {
    nameInComfy: "ttN debugInput"
}
export interface ttN_debugInput_output {
}
export interface ttN_debugInput_input {
    print_to_console: _BOOLEAN
    /** default="ttN debug:" */
    console_title?: _STRING
    /** default="Red" */
    console_color?: Enum_ttN_debugInput_console_color
    /** */
    debug?: _$Star
}

// ttN text [🌏 tinyterra_text]
export interface ttN_text extends HasSingle_STRING, ComfyNode<ttN_text_input, ttN_text_output> {
    nameInComfy: "ttN text"
}
export interface ttN_text_output {
    text: ComfyNodeOutput<'STRING', 0>,
}
export interface ttN_text_input {
    /** default="" */
    text?: _STRING
}

// ttN textDebug [🌏 tinyterra_text]
export interface ttN_textDebug extends HasSingle_STRING, ComfyNode<ttN_textDebug_input, ttN_textDebug_output> {
    nameInComfy: "ttN textDebug"
}
export interface ttN_textDebug_output {
    text: ComfyNodeOutput<'STRING', 0>,
}
export interface ttN_textDebug_input {
    print_to_console: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default="" */
    console_title?: _STRING
    execute: Enum_ttN_textDebug_execute
    /** default="" */
    text?: _STRING
}

// ttN concat [🌏 tinyterra_text]
export interface ttN_concat extends HasSingle_STRING, ComfyNode<ttN_concat_input, ttN_concat_output> {
    nameInComfy: "ttN concat"
}
export interface ttN_concat_output {
    concat: ComfyNodeOutput<'STRING', 0>,
}
export interface ttN_concat_input {
    /** default="" */
    text1?: _STRING
    /** default="" */
    text2?: _STRING
    /** default="" */
    text3?: _STRING
    /** default="," */
    delimiter?: _STRING
}

// ttN text3BOX_3WAYconcat [🌏 tinyterra_text]
export interface ttN_text3BOX$_3WAYconcat extends ComfyNode<ttN_text3BOX$_3WAYconcat_input, ttN_text3BOX$_3WAYconcat_output> {
    nameInComfy: "ttN text3BOX_3WAYconcat"
}
export interface ttN_text3BOX$_3WAYconcat_output {
    text1: ComfyNodeOutput<'STRING', 0>,
    text2: ComfyNodeOutput<'STRING', 1>,
    text3: ComfyNodeOutput<'STRING', 2>,
    "_1$_$And$_2": ComfyNodeOutput<'STRING', 3>,
    "_1$_$And$_3": ComfyNodeOutput<'STRING', 4>,
    "_2$_$And$_3": ComfyNodeOutput<'STRING', 5>,
    concat: ComfyNodeOutput<'STRING', 6>,
}
export interface ttN_text3BOX$_3WAYconcat_input {
    /** default="" */
    text1?: _STRING
    /** default="" */
    text2?: _STRING
    /** default="" */
    text3?: _STRING
    /** default="," */
    delimiter?: _STRING
}

// ttN text7BOX_concat [🌏 tinyterra_text]
export interface ttN_text7BOX$_concat extends ComfyNode<ttN_text7BOX$_concat_input, ttN_text7BOX$_concat_output> {
    nameInComfy: "ttN text7BOX_concat"
}
export interface ttN_text7BOX$_concat_output {
    text1: ComfyNodeOutput<'STRING', 0>,
    text2: ComfyNodeOutput<'STRING', 1>,
    text3: ComfyNodeOutput<'STRING', 2>,
    text4: ComfyNodeOutput<'STRING', 3>,
    text5: ComfyNodeOutput<'STRING', 4>,
    text6: ComfyNodeOutput<'STRING', 5>,
    text7: ComfyNodeOutput<'STRING', 6>,
    concat: ComfyNodeOutput<'STRING', 7>,
}
export interface ttN_text7BOX$_concat_input {
    /** default="" */
    text1?: _STRING
    /** default="" */
    text2?: _STRING
    /** default="" */
    text3?: _STRING
    /** default="" */
    text4?: _STRING
    /** default="" */
    text5?: _STRING
    /** default="" */
    text6?: _STRING
    /** default="" */
    text7?: _STRING
    /** default="," */
    delimiter?: _STRING
}

// ttN textCycleLine [🌏 tinyterra_text]
export interface ttN_textCycleLine extends HasSingle_STRING, ComfyNode<ttN_textCycleLine_input, ttN_textCycleLine_output> {
    nameInComfy: "ttN textCycleLine"
}
export interface ttN_textCycleLine_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface ttN_textCycleLine_input {
    /** default="" */
    text?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    index?: _INT
    index_control: Enum_ttN_textCycleLine_index_control
}

// ttN textOutput [🌏 tinyterra_text]
export interface ttN_textOutput extends HasSingle_STRING, ComfyNode<ttN_textOutput_input, ttN_textOutput_output> {
    nameInComfy: "ttN textOutput"
}
export interface ttN_textOutput_output {
    text: ComfyNodeOutput<'STRING', 0>,
}
export interface ttN_textOutput_input {
    /** default="Preview" */
    text_output?: Enum_CR_XY_Save_Grid_Image_mode
    /** */
    text: _STRING
    /** default="C:\\Users\\user\\Downloads\\comfy_FULL\\ComfyUI\\output" */
    output_path?: _STRING
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default=5 */
    number_padding?: Enum_ttN_textOutput_number_padding
    /** default="txt" */
    file_type?: Enum_ttN_textOutput_file_type
    /** default=false */
    overwrite_existing?: _BOOLEAN
}

// ttN imageOutput [🌏 tinyterra_image]
export interface ttN_imageOutput extends HasSingle_IMAGE, ComfyNode<ttN_imageOutput_input, ttN_imageOutput_output> {
    nameInComfy: "ttN imageOutput"
}
export interface ttN_imageOutput_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface ttN_imageOutput_input {
    image: _IMAGE
    /** default="Preview" */
    image_output?: Enum_ttN_imageOutput_image_output
    /** default="C:\\Users\\user\\Downloads\\comfy_FULL\\ComfyUI\\output" */
    output_path?: _STRING
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default=5 */
    number_padding?: Enum_ttN_textOutput_number_padding
    /** default="png" */
    file_type?: Enum_ttN_KSampler$_v2_file_type
    /** default=false */
    overwrite_existing?: _BOOLEAN
    /** default=true */
    embed_workflow?: _BOOLEAN
}

// ttN imageREMBG [🌏 tinyterra_image]
export interface ttN_imageREMBG extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<ttN_imageREMBG_input, ttN_imageREMBG_output> {
    nameInComfy: "ttN imageREMBG"
}
export interface ttN_imageREMBG_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
}
export interface ttN_imageREMBG_input {
    image: _IMAGE
    /** default="Preview" */
    image_output?: Enum_ttN_imageOutput_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
}

// ttN hiresfixScale [🌏 tinyterra_image]
export interface ttN_hiresfixScale extends HasSingle_LATENT, HasSingle_IMAGE, ComfyNode<ttN_hiresfixScale_input, ttN_hiresfixScale_output> {
    nameInComfy: "ttN hiresfixScale"
}
export interface ttN_hiresfixScale_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
    image: ComfyNodeOutput<'IMAGE', 1>,
}
export interface ttN_hiresfixScale_input {
    model_name: Enum_UpscaleModelLoader_model_name
    vae: _VAE
    image: _IMAGE
    /** default=true */
    rescale_after_model?: Enum_ImageDrawRectangleRounded_top_left_corner
    rescale_method: Enum_ttN_hiresfixScale_rescale_method
    rescale: Enum_ttN_hiresfixScale_rescale
    /** default=50 min=1000 max=1000 step=1 */
    percent?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    width?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    height?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    longer_side?: _INT
    crop: Enum_LatentUpscale_crop
    image_output: Enum_ttN_imageOutput_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default=true */
    output_latent?: Enum_ImageDrawRectangleRounded_top_left_corner
}

// ttN int [🌏 tinyterra_util]
export interface ttN_int extends HasSingle_INT, HasSingle_FLOAT, HasSingle_STRING, ComfyNode<ttN_int_input, ttN_int_output> {
    nameInComfy: "ttN int"
}
export interface ttN_int_output {
    int: ComfyNodeOutput<'INT', 0>,
    float: ComfyNodeOutput<'FLOAT', 1>,
    text: ComfyNodeOutput<'STRING', 2>,
}
export interface ttN_int_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    int?: _INT
}

// ttN float [🌏 tinyterra_util]
export interface ttN_float extends HasSingle_FLOAT, HasSingle_INT, HasSingle_STRING, ComfyNode<ttN_float_input, ttN_float_output> {
    nameInComfy: "ttN float"
}
export interface ttN_float_output {
    float: ComfyNodeOutput<'FLOAT', 0>,
    int: ComfyNodeOutput<'INT', 1>,
    text: ComfyNodeOutput<'STRING', 2>,
}
export interface ttN_float_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    float?: _FLOAT
}

// ttN seed [🌏 tinyterra_util]
export interface ttN_seed extends HasSingle_INT, ComfyNode<ttN_seed_input, ttN_seed_output> {
    nameInComfy: "ttN seed"
}
export interface ttN_seed_output {
    seed: ComfyNodeOutput<'INT', 0>,
}
export interface ttN_seed_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// ttN xyPlot [🌏 tinyterra_legacy]
export interface ttN_xyPlot extends HasSingle_XYPLOT, ComfyNode<ttN_xyPlot_input, ttN_xyPlot_output> {
    nameInComfy: "ttN xyPlot"
}
export interface ttN_xyPlot_output {
    xyPlot: ComfyNodeOutput<'XYPLOT', 0>,
}
export interface ttN_xyPlot_input {
    /** default=0 min=500 max=500 step=5 */
    grid_spacing?: _INT
    /** default=0 min=100 max=100 step=1 */
    latent_id?: _INT
    /** default="False" */
    output_individuals?: Enum_ttN_xyPlot_output_individuals
    /** default="False" */
    flip_xy?: Enum_ttN_xyPlot_output_individuals
    /** default="None" */
    x_axis?: Enum_ttN_xyPlot_x_axis
    /** default="" */
    x_values?: _STRING
    /** default="None" */
    y_axis?: Enum_ttN_xyPlot_x_axis
    /** default="" */
    y_values?: _STRING
}

// ttN pipeIN [🌏 tinyterra_legacy]
export interface ttN_pipeIN extends HasSingle_PIPE_LINE, ComfyNode<ttN_pipeIN_input, ttN_pipeIN_output> {
    nameInComfy: "ttN pipeIN"
}
export interface ttN_pipeIN_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
}
export interface ttN_pipeIN_input {
    model: _MODEL
    pos: _CONDITIONING
    neg: _CONDITIONING
    latent: _LATENT
    vae: _VAE
    clip: _CLIP
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    image?: _IMAGE
}

// ttN pipeOUT [🌏 tinyterra_legacy]
export interface ttN_pipeOUT extends HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_IMAGE, HasSingle_INT, HasSingle_PIPE_LINE, ComfyNode<ttN_pipeOUT_input, ttN_pipeOUT_output> {
    nameInComfy: "ttN pipeOUT"
}
export interface ttN_pipeOUT_output {
    model: ComfyNodeOutput<'MODEL', 0>,
    pos: ComfyNodeOutput<'CONDITIONING', 1>,
    neg: ComfyNodeOutput<'CONDITIONING', 2>,
    latent: ComfyNodeOutput<'LATENT', 3>,
    vae: ComfyNodeOutput<'VAE', 4>,
    clip: ComfyNodeOutput<'CLIP', 5>,
    image: ComfyNodeOutput<'IMAGE', 6>,
    seed: ComfyNodeOutput<'INT', 7>,
    pipe: ComfyNodeOutput<'PIPE_LINE', 8>,
}
export interface ttN_pipeOUT_input {
    pipe: _PIPE_LINE
}

// ttN pipeLoader [🌏 tinyterra_legacy]
export interface ttN_pipeLoader extends HasSingle_PIPE_LINE, HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_INT, ComfyNode<ttN_pipeLoader_input, ttN_pipeLoader_output> {
    nameInComfy: "ttN pipeLoader"
}
export interface ttN_pipeLoader_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    positive: ComfyNodeOutput<'CONDITIONING', 2>,
    negative: ComfyNodeOutput<'CONDITIONING', 3>,
    latent: ComfyNodeOutput<'LATENT', 4>,
    vae: ComfyNodeOutput<'VAE', 5>,
    clip: ComfyNodeOutput<'CLIP', 6>,
    seed: ComfyNodeOutput<'INT', 7>,
}
export interface ttN_pipeLoader_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    /** default="Default" */
    config_name?: Enum_ttN_tinyLoader_config_name
    vae_name: Enum_ttN_tinyLoader_vae_name
    /** default=-1 min=0 max=0 step=1 */
    clip_skip?: _INT
    lora1_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora1_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora1_clip_strength?: _FLOAT
    lora2_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora2_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora2_clip_strength?: _FLOAT
    lora3_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora3_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora3_clip_strength?: _FLOAT
    /** default="Positive" */
    positive?: _STRING
    positive_token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    positive_weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default="Negative" */
    negative?: _STRING
    negative_token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    negative_weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default=512 min=16384 max=16384 step=8 */
    empty_latent_width?: _INT
    /** default=512 min=16384 max=16384 step=8 */
    empty_latent_height?: _INT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    model_override?: _MODEL
    clip_override?: _CLIP
    optional_lora_stack?: _LORA_STACK
}

// ttN pipeKSampler [🌏 tinyterra_legacy]
export interface ttN_pipeKSampler extends HasSingle_PIPE_LINE, HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_IMAGE, HasSingle_INT, ComfyNode<ttN_pipeKSampler_input, ttN_pipeKSampler_output> {
    nameInComfy: "ttN pipeKSampler"
}
export interface ttN_pipeKSampler_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    positive: ComfyNodeOutput<'CONDITIONING', 2>,
    negative: ComfyNodeOutput<'CONDITIONING', 3>,
    latent: ComfyNodeOutput<'LATENT', 4>,
    vae: ComfyNodeOutput<'VAE', 5>,
    clip: ComfyNodeOutput<'CLIP', 6>,
    image: ComfyNodeOutput<'IMAGE', 7>,
    seed: ComfyNodeOutput<'INT', 8>,
}
export interface ttN_pipeKSampler_input {
    pipe: _PIPE_LINE
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_clip_strength?: _FLOAT
    upscale_method: Enum_ttN_pipeKSampler_upscale_method
    /** default=2 min=10 max=10 step=0.25 */
    factor?: _FLOAT
    crop: Enum_LatentUpscale_crop
    sampler_state: Enum_ttN_pipeKSampler_sampler_state
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
    image_output: Enum_ttN_imageOutput_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    optional_model?: _MODEL
    optional_positive?: _CONDITIONING
    optional_negative?: _CONDITIONING
    optional_latent?: _LATENT
    optional_vae?: _VAE
    optional_clip?: _CLIP
    xyPlot?: _XYPLOT
}

// ttN pipeKSamplerAdvanced [🌏 tinyterra_legacy]
export interface ttN_pipeKSamplerAdvanced extends HasSingle_PIPE_LINE, HasSingle_MODEL, HasSingle_LATENT, HasSingle_VAE, HasSingle_CLIP, HasSingle_IMAGE, HasSingle_INT, ComfyNode<ttN_pipeKSamplerAdvanced_input, ttN_pipeKSamplerAdvanced_output> {
    nameInComfy: "ttN pipeKSamplerAdvanced"
}
export interface ttN_pipeKSamplerAdvanced_output {
    pipe: ComfyNodeOutput<'PIPE_LINE', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    positive: ComfyNodeOutput<'CONDITIONING', 2>,
    negative: ComfyNodeOutput<'CONDITIONING', 3>,
    latent: ComfyNodeOutput<'LATENT', 4>,
    vae: ComfyNodeOutput<'VAE', 5>,
    clip: ComfyNodeOutput<'CLIP', 6>,
    image: ComfyNodeOutput<'IMAGE', 7>,
    seed: ComfyNodeOutput<'INT', 8>,
}
export interface ttN_pipeKSamplerAdvanced_input {
    pipe: _PIPE_LINE
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora_clip_strength?: _FLOAT
    upscale_method: Enum_ttN_pipeKSampler_upscale_method
    /** default=2 min=10 max=10 step=0.25 */
    factor?: _FLOAT
    crop: Enum_LatentUpscale_crop
    sampler_state: Enum_ttN_pipeKSampler_sampler_state
    add_noise: Enum_KSamplerAdvanced_add_noise
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    return_with_leftover_noise: Enum_KSamplerAdvanced_add_noise
    image_output: Enum_ttN_imageOutput_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    optional_model?: _MODEL
    optional_positive?: _CONDITIONING
    optional_negative?: _CONDITIONING
    optional_latent?: _LATENT
    optional_vae?: _VAE
    optional_clip?: _CLIP
    xyPlot?: _XYPLOT
}

// ttN pipeLoaderSDXL [🌏 tinyterra_legacy]
export interface ttN_pipeLoaderSDXL extends HasSingle_PIPE_LINE_SDXL, HasSingle_LATENT, HasSingle_INT, ComfyNode<ttN_pipeLoaderSDXL_input, ttN_pipeLoaderSDXL_output> {
    nameInComfy: "ttN pipeLoaderSDXL"
}
export interface ttN_pipeLoaderSDXL_output {
    sdxl_pipe: ComfyNodeOutput<'PIPE_LINE_SDXL', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    positive: ComfyNodeOutput<'CONDITIONING', 2>,
    negative: ComfyNodeOutput<'CONDITIONING', 3>,
    vae: ComfyNodeOutput<'VAE', 4>,
    clip: ComfyNodeOutput<'CLIP', 5>,
    refiner_model: ComfyNodeOutput<'MODEL', 6>,
    refiner_positive: ComfyNodeOutput<'CONDITIONING', 7>,
    refiner_negative: ComfyNodeOutput<'CONDITIONING', 8>,
    refiner_vae: ComfyNodeOutput<'VAE', 9>,
    refiner_clip: ComfyNodeOutput<'CLIP', 10>,
    latent: ComfyNodeOutput<'LATENT', 11>,
    seed: ComfyNodeOutput<'INT', 12>,
}
export interface ttN_pipeLoaderSDXL_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
    vae_name: Enum_ttN_tinyLoader_vae_name
    lora1_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora1_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora1_clip_strength?: _FLOAT
    lora2_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    lora2_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    lora2_clip_strength?: _FLOAT
    refiner_ckpt_name: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name
    refiner_vae_name: Enum_ttN_tinyLoader_vae_name
    refiner_lora1_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    refiner_lora1_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    refiner_lora1_clip_strength?: _FLOAT
    refiner_lora2_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    refiner_lora2_model_strength?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    refiner_lora2_clip_strength?: _FLOAT
    /** default=-2 min=0 max=0 step=1 */
    clip_skip?: _INT
    /** default="Positive" */
    positive?: _STRING
    positive_token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    positive_weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default="Negative" */
    negative?: _STRING
    negative_token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    negative_weight_interpretation: Enum_WildcardEncode_$3$3Inspire_weight_interpretation
    /** default=1024 min=16384 max=16384 step=8 */
    empty_latent_width?: _INT
    /** default=1024 min=16384 max=16384 step=8 */
    empty_latent_height?: _INT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// ttN pipeKSamplerSDXL [🌏 tinyterra_legacy]
export interface ttN_pipeKSamplerSDXL extends HasSingle_PIPE_LINE_SDXL, HasSingle_LATENT, HasSingle_CLIP, HasSingle_IMAGE, HasSingle_INT, ComfyNode<ttN_pipeKSamplerSDXL_input, ttN_pipeKSamplerSDXL_output> {
    nameInComfy: "ttN pipeKSamplerSDXL"
}
export interface ttN_pipeKSamplerSDXL_output {
    sdxl_pipe: ComfyNodeOutput<'PIPE_LINE_SDXL', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    positive: ComfyNodeOutput<'CONDITIONING', 2>,
    negative: ComfyNodeOutput<'CONDITIONING', 3>,
    vae: ComfyNodeOutput<'VAE', 4>,
    refiner_model: ComfyNodeOutput<'MODEL', 5>,
    refiner_positive: ComfyNodeOutput<'CONDITIONING', 6>,
    refiner_negative: ComfyNodeOutput<'CONDITIONING', 7>,
    refiner_vae: ComfyNodeOutput<'VAE', 8>,
    latent: ComfyNodeOutput<'LATENT', 9>,
    clip: ComfyNodeOutput<'CLIP', 10>,
    image: ComfyNodeOutput<'IMAGE', 11>,
    seed: ComfyNodeOutput<'INT', 12>,
}
export interface ttN_pipeKSamplerSDXL_input {
    sdxl_pipe: _PIPE_LINE_SDXL
    upscale_method: Enum_ttN_pipeKSampler_upscale_method
    /** default=2 min=10 max=10 step=0.25 */
    factor?: _FLOAT
    crop: Enum_LatentUpscale_crop
    sampler_state: Enum_ttN_pipeKSampler_sampler_state
    /** default=20 min=10000 max=10000 */
    base_steps?: _INT
    /** default=20 min=10000 max=10000 */
    refiner_steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    image_output: Enum_ttN_imageOutput_image_output
    /** default="ComfyUI" */
    save_prefix?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    optional_model?: _MODEL
    optional_positive?: _CONDITIONING
    optional_negative?: _CONDITIONING
    optional_vae?: _VAE
    optional_refiner_model?: _MODEL
    optional_refiner_positive?: _CONDITIONING
    optional_refiner_negative?: _CONDITIONING
    optional_refiner_vae?: _VAE
    optional_latent?: _LATENT
    optional_clip?: _CLIP
}

// DF_Float [Derfuu_Nodes_Variables]
export interface DF$_Float extends HasSingle_FLOAT, ComfyNode<DF$_Float_input, DF$_Float_output> {
    nameInComfy: "DF_Float"
}
export interface DF$_Float_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Float_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value?: _FLOAT
}

// DF_Integer [Derfuu_Nodes_Variables]
export interface DF$_Integer extends HasSingle_INT, ComfyNode<DF$_Integer_input, DF$_Integer_output> {
    nameInComfy: "DF_Integer"
}
export interface DF$_Integer_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface DF$_Integer_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=1 */
    Value?: _FLOAT
}

// DF_Text [Derfuu_Nodes_Variables]
export interface DF$_Text extends HasSingle_STRING, ComfyNode<DF$_Text_input, DF$_Text_output> {
    nameInComfy: "DF_Text"
}
export interface DF$_Text_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface DF$_Text_input {
    /** default="" */
    Text?: _STRING
}

// DF_Text_Box [Derfuu_Nodes_Variables]
export interface DF$_Text$_Box extends HasSingle_STRING, ComfyNode<DF$_Text$_Box_input, DF$_Text$_Box_output> {
    nameInComfy: "DF_Text_Box"
}
export interface DF$_Text$_Box_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface DF$_Text$_Box_input {
    /** default="" */
    Text?: _STRING
}

// DF_DynamicPrompts_Text_Box [Derfuu_Nodes_Variables]
export interface DF$_DynamicPrompts$_Text$_Box extends HasSingle_STRING, ComfyNode<DF$_DynamicPrompts$_Text$_Box_input, DF$_DynamicPrompts$_Text$_Box_output> {
    nameInComfy: "DF_DynamicPrompts_Text_Box"
}
export interface DF$_DynamicPrompts$_Text$_Box_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface DF$_DynamicPrompts$_Text$_Box_input {
    /** default="" */
    Text?: _STRING
}

// DF_String_Concatenate [Derfuu_Nodes_Functions_String Operations]
export interface DF$_String$_Concatenate extends HasSingle_STRING, ComfyNode<DF$_String$_Concatenate_input, DF$_String$_Concatenate_output> {
    nameInComfy: "DF_String_Concatenate"
}
export interface DF$_String$_Concatenate_output {
    TEXT: ComfyNodeOutput<'STRING', 0>,
}
export interface DF$_String$_Concatenate_input {
    /** default="" */
    Prepend?: _STRING
    /** default="" */
    Append?: _STRING
    /** default=", " */
    Delimiter?: _STRING
}

// DF_String_Replace [Derfuu_Nodes_Functions_String Operations]
export interface DF$_String$_Replace extends HasSingle_STRING, ComfyNode<DF$_String$_Replace_input, DF$_String$_Replace_output> {
    nameInComfy: "DF_String_Replace"
}
export interface DF$_String$_Replace_output {
    TEXT: ComfyNodeOutput<'STRING', 0>,
}
export interface DF$_String$_Replace_input {
    /** default="" */
    Text?: _STRING
    /** default="" */
    Pattern?: _STRING
    /** default="" */
    Replace_With?: _STRING
    /** */
    Mode: Enum_DF$_String$_Replace_Mode
}

// DF_Search_In_Text [Derfuu_Nodes_Functions_String Operations]
export interface DF$_Search$_In$_Text extends HasSingle_BOOLEAN, HasSingle_INT, ComfyNode<DF$_Search$_In$_Text_input, DF$_Search$_In$_Text_output> {
    nameInComfy: "DF_Search_In_Text"
}
export interface DF$_Search$_In$_Text_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
    OCCURRENCES: ComfyNodeOutput<'INT', 1>,
}
export interface DF$_Search$_In$_Text_input {
    /** default="" */
    Text?: _STRING
    /** default="" */
    Pattern?: _STRING
    /** default=false */
    ConsiderRegister?: _BOOLEAN
    /** */
    Mode: Enum_DF$_String$_Replace_Mode
}

// DF_To_text_(Debug) [Derfuu_Nodes_Debug]
export interface DF$_To$_text$_$1Debug$2 extends HasSingle_$Star, HasSingle_STRING, ComfyNode<DF$_To$_text$_$1Debug$2_input, DF$_To$_text$_$1Debug$2_output> {
    nameInComfy: "DF_To_text_(Debug)"
}
export interface DF$_To$_text$_$1Debug$2_output {
    "SAME$_AS$_INPUT": ComfyNodeOutput<'$Star', 0>,
    STRING: ComfyNodeOutput<'STRING', 1>,
}
export interface DF$_To$_text$_$1Debug$2_input {
    /** */
    ANY: _$Star
}

// DF_Random [Derfuu_Nodes_Functions]
export interface DF$_Random extends HasSingle_FLOAT, ComfyNode<DF$_Random_input, DF$_Random_output> {
    nameInComfy: "DF_Random"
}
export interface DF$_Random_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Random_input {
    /** default=0 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value_A?: _FLOAT
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value_B?: _FLOAT
    /** default=0 min=4294967295 max=4294967295 step=1 */
    seed?: _INT
}

// DF_Int_to_Float [Derfuu_Nodes_Functions_Converters]
export interface DF$_Int$_to$_Float extends HasSingle_FLOAT, ComfyNode<DF$_Int$_to$_Float_input, DF$_Int$_to$_Float_output> {
    nameInComfy: "DF_Int_to_Float"
}
export interface DF$_Int$_to$_Float_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Int$_to$_Float_input {
    /** default=1 min=9223372036854776000 max=9223372036854776000 step=1 */
    Value?: _INT
}

// DF_Ceil [Derfuu_Nodes_Functions_Converters]
export interface DF$_Ceil extends HasSingle_INT, ComfyNode<DF$_Ceil_input, DF$_Ceil_output> {
    nameInComfy: "DF_Ceil"
}
export interface DF$_Ceil_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface DF$_Ceil_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value?: _FLOAT
}

// DF_Floor [Derfuu_Nodes_Functions_Converters]
export interface DF$_Floor extends HasSingle_INT, ComfyNode<DF$_Floor_input, DF$_Floor_output> {
    nameInComfy: "DF_Floor"
}
export interface DF$_Floor_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface DF$_Floor_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value?: _FLOAT
}

// DF_Absolute_value [Derfuu_Nodes_Functions_Converters]
export interface DF$_Absolute$_value extends HasSingle_FLOAT, ComfyNode<DF$_Absolute$_value_input, DF$_Absolute$_value_output> {
    nameInComfy: "DF_Absolute_value"
}
export interface DF$_Absolute$_value_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Absolute$_value_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value?: _FLOAT
    negative_out: Enum_ImageDrawRectangleRounded_top_left_corner
}

// DF_Get_latent_size [Derfuu_Nodes_Functions]
export interface DF$_Get$_latent$_size extends ComfyNode<DF$_Get$_latent$_size_input, DF$_Get$_latent$_size_output> {
    nameInComfy: "DF_Get_latent_size"
}
export interface DF$_Get$_latent$_size_output {
    WIDTH: ComfyNodeOutput<'INT', 0>,
    HEIGHT: ComfyNodeOutput<'INT', 1>,
}
export interface DF$_Get$_latent$_size_input {
    /** */
    latent: _LATENT
    original: Enum_ImageDrawRectangleRounded_top_left_corner
}

// DF_Get_image_size [Derfuu_Nodes_Functions]
export interface DF$_Get$_image$_size extends ComfyNode<DF$_Get$_image$_size_input, DF$_Get$_image$_size_output> {
    nameInComfy: "DF_Get_image_size"
}
export interface DF$_Get$_image$_size_output {
    WIDTH: ComfyNodeOutput<'INT', 0>,
    HEIGHT: ComfyNodeOutput<'INT', 1>,
}
export interface DF$_Get$_image$_size_input {
    /** */
    image: _IMAGE
}

// DF_Sum [Derfuu_Nodes_Math]
export interface DF$_Sum extends HasSingle_FLOAT, ComfyNode<DF$_Sum_input, DF$_Sum_output> {
    nameInComfy: "DF_Sum"
}
export interface DF$_Sum_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Sum_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value_A?: _FLOAT
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value_B?: _FLOAT
}

// DF_Subtract [Derfuu_Nodes_Math]
export interface DF$_Subtract extends HasSingle_FLOAT, ComfyNode<DF$_Subtract_input, DF$_Subtract_output> {
    nameInComfy: "DF_Subtract"
}
export interface DF$_Subtract_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Subtract_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value_A?: _FLOAT
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value_B?: _FLOAT
}

// DF_Multiply [Derfuu_Nodes_Math]
export interface DF$_Multiply extends HasSingle_FLOAT, ComfyNode<DF$_Multiply_input, DF$_Multiply_output> {
    nameInComfy: "DF_Multiply"
}
export interface DF$_Multiply_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Multiply_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value_A?: _FLOAT
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value_B?: _FLOAT
}

// DF_Divide [Derfuu_Nodes_Math]
export interface DF$_Divide extends HasSingle_FLOAT, ComfyNode<DF$_Divide_input, DF$_Divide_output> {
    nameInComfy: "DF_Divide"
}
export interface DF$_Divide_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Divide_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Numerator?: _FLOAT
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Denominator?: _FLOAT
}

// DF_Power [Derfuu_Nodes_Math]
export interface DF$_Power extends HasSingle_FLOAT, ComfyNode<DF$_Power_input, DF$_Power_output> {
    nameInComfy: "DF_Power"
}
export interface DF$_Power_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Power_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value?: _FLOAT
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Exponent?: _FLOAT
}

// DF_Square_root [Derfuu_Nodes_Math]
export interface DF$_Square$_root extends ComfyNode<DF$_Square$_root_input, DF$_Square$_root_output> {
    nameInComfy: "DF_Square_root"
}
export interface DF$_Square$_root_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
    FLOAT_1: ComfyNodeOutput<'FLOAT', 1>,
}
export interface DF$_Square$_root_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    Value?: _FLOAT
}

// DF_Sinus [Derfuu_Nodes_Math_Trigonometry]
export interface DF$_Sinus extends HasSingle_FLOAT, ComfyNode<DF$_Sinus_input, DF$_Sinus_output> {
    nameInComfy: "DF_Sinus"
}
export interface DF$_Sinus_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Sinus_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    value?: _FLOAT
    /** */
    type_: Enum_DF$_Sinus_type_
    /** */
    arcSin: Enum_ImageDrawRectangleRounded_top_left_corner
}

// DF_Cosines [Derfuu_Nodes_Math_Trigonometry]
export interface DF$_Cosines extends HasSingle_FLOAT, ComfyNode<DF$_Cosines_input, DF$_Cosines_output> {
    nameInComfy: "DF_Cosines"
}
export interface DF$_Cosines_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Cosines_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    value?: _FLOAT
    /** */
    type_: Enum_DF$_Sinus_type_
    /** */
    arcCos: Enum_ImageDrawRectangleRounded_top_left_corner
}

// DF_Tangent [Derfuu_Nodes_Math_Trigonometry]
export interface DF$_Tangent extends HasSingle_FLOAT, ComfyNode<DF$_Tangent_input, DF$_Tangent_output> {
    nameInComfy: "DF_Tangent"
}
export interface DF$_Tangent_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface DF$_Tangent_input {
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    value?: _FLOAT
    /** */
    type_: Enum_DF$_Sinus_type_
    /** */
    arcTan: Enum_ImageDrawRectangleRounded_top_left_corner
}

// DF_Logic_node [Derfuu_Nodes_Functions]
export interface DF$_Logic$_node extends HasSingle_$Star, ComfyNode<DF$_Logic$_node_input, DF$_Logic$_node_output> {
    nameInComfy: "DF_Logic_node"
}
export interface DF$_Logic$_node_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface DF$_Logic$_node_input {
    /** */
    Operation: Enum_DF$_Logic$_node_Operation
    /** */
    CompareValue_A: _$Star
    /** */
    CompareValue_B?: _$Star
    /** */
    OnTrue?: _$Star
    /** */
    OnFalse?: _$Star
}

// DF_Latent_Scale_by_ratio [Derfuu_Nodes_Modded nodes_Latent]
export interface DF$_Latent$_Scale$_by$_ratio extends HasSingle_LATENT, ComfyNode<DF$_Latent$_Scale$_by$_ratio_input, DF$_Latent$_Scale$_by$_ratio_output> {
    nameInComfy: "DF_Latent_Scale_by_ratio"
}
export interface DF$_Latent$_Scale$_by$_ratio_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface DF$_Latent$_Scale$_by$_ratio_input {
    /** */
    latent: _LATENT
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    modifier?: _FLOAT
    /** */
    scale_method: Enum_ttN_hiresfixScale_rescale_method
    /** */
    crop: Enum_LatentUpscale_crop
}

// DF_Latent_Scale_to_side [Derfuu_Nodes_Modded nodes_Latent]
export interface DF$_Latent$_Scale$_to$_side extends HasSingle_LATENT, ComfyNode<DF$_Latent$_Scale$_to$_side_input, DF$_Latent$_Scale$_to$_side_output> {
    nameInComfy: "DF_Latent_Scale_to_side"
}
export interface DF$_Latent$_Scale$_to$_side_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface DF$_Latent$_Scale$_to$_side_input {
    /** */
    latent: _LATENT
    /** default=512 min=9223372036854776000 max=9223372036854776000 step=1 */
    side_length?: _INT
    /** */
    side: Enum_DF$_Latent$_Scale$_to$_side_side
    /** */
    scale_method: Enum_ttN_hiresfixScale_rescale_method
    /** */
    crop: Enum_LatentUpscale_crop
}

// DF_Image_scale_by_ratio [Derfuu_Nodes_Modded nodes_Image]
export interface DF$_Image$_scale$_by$_ratio extends HasSingle_IMAGE, ComfyNode<DF$_Image$_scale$_by$_ratio_input, DF$_Image$_scale$_by$_ratio_output> {
    nameInComfy: "DF_Image_scale_by_ratio"
}
export interface DF$_Image$_scale$_by$_ratio_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DF$_Image$_scale$_by$_ratio_input {
    /** */
    image: _IMAGE
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    upscale_by?: _FLOAT
    /** */
    upscale_method: Enum_ttN_hiresfixScale_rescale_method
    /** */
    crop: Enum_LatentUpscale_crop
}

// DF_Image_scale_to_side [Derfuu_Nodes_Modded nodes_Image]
export interface DF$_Image$_scale$_to$_side extends HasSingle_IMAGE, ComfyNode<DF$_Image$_scale$_to$_side_input, DF$_Image$_scale$_to$_side_output> {
    nameInComfy: "DF_Image_scale_to_side"
}
export interface DF$_Image$_scale$_to$_side_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface DF$_Image$_scale$_to$_side_input {
    /** */
    image: _IMAGE
    /** default=1 min=9223372036854776000 max=9223372036854776000 step=1 */
    side_length?: _INT
    /** */
    side: Enum_DF$_Latent$_Scale$_to$_side_side
    /** */
    upscale_method: Enum_ttN_hiresfixScale_rescale_method
    /** */
    crop: Enum_LatentUpscale_crop
}

// DF_Conditioning_area_scale_by_ratio [Derfuu_Nodes_Modded nodes_Conditions]
export interface DF$_Conditioning$_area$_scale$_by$_ratio extends HasSingle_CONDITIONING, ComfyNode<DF$_Conditioning$_area$_scale$_by$_ratio_input, DF$_Conditioning$_area$_scale$_by$_ratio_output> {
    nameInComfy: "DF_Conditioning_area_scale_by_ratio"
}
export interface DF$_Conditioning$_area$_scale$_by$_ratio_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface DF$_Conditioning$_area$_scale$_by$_ratio_input {
    /** */
    conditioning: _CONDITIONING
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    modifier?: _FLOAT
    /** default=1 min=1.7976931348623157e+308 max=1.7976931348623157e+308 step=0.01 */
    strength_modifier?: _FLOAT
}

// LatentByRatio [JNode]
export interface LatentByRatio extends HasSingle_LATENT, ComfyNode<LatentByRatio_input, LatentByRatio_output> {
    nameInComfy: "LatentByRatio"
}
export interface LatentByRatio_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface LatentByRatio_input {
    model: Enum_LatentByRatio_model
    ratio: Enum_LatentByRatio_ratio
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// SamplerLCM [sampling_custom_sampling]
export interface SamplerLCM extends HasSingle_SAMPLER, ComfyNode<SamplerLCM_input, SamplerLCM_output> {
    nameInComfy: "SamplerLCM"
}
export interface SamplerLCM_output {
    SAMPLER: ComfyNodeOutput<'SAMPLER', 0>,
}
export interface SamplerLCM_input {
    /** default=1 min=1 max=1 step=0.01 */
    eta?: _FLOAT
}

// TAESDLoader [loaders]
export interface TAESDLoader extends HasSingle_VAE, ComfyNode<TAESDLoader_input, TAESDLoader_output> {
    nameInComfy: "TAESDLoader"
}
export interface TAESDLoader_output {
    VAE: ComfyNodeOutput<'VAE', 0>,
}
export interface TAESDLoader_input {
    /** */
    file_name: Enum_TAESDLoader_file_name
    /** default=16 min=1024 max=1024 step=1 */
    max_batch_size?: _INT
}

// Mask By Text [Masquerade Nodes]
export interface Mask_By_Text extends ComfyNode<Mask_By_Text_input, Mask_By_Text_output> {
    nameInComfy: "Mask By Text"
}
export interface Mask_By_Text_output {
    thresholded_mask: ComfyNodeOutput<'IMAGE', 0>,
    raw_mask: ComfyNodeOutput<'IMAGE', 1>,
}
export interface Mask_By_Text_input {
    image: _IMAGE
    /** */
    prompt: _STRING
    /** */
    negative_prompt: _STRING
    /** default=0.5 min=1 max=1 step=0.01 */
    precision?: _FLOAT
    normalize: Enum_ConstrainImage$8pysssss_crop_if_required
}

// Mask Morphology [Masquerade Nodes]
export interface Mask_Morphology extends HasSingle_IMAGE, ComfyNode<Mask_Morphology_input, Mask_Morphology_output> {
    nameInComfy: "Mask Morphology"
}
export interface Mask_Morphology_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Mask_Morphology_input {
    image: _IMAGE
    /** default=5 min=128 max=128 step=1 */
    distance?: _INT
    op: Enum_Mask_Morphology_op
}

// Combine Masks [Masquerade Nodes]
export interface Combine_Masks extends HasSingle_IMAGE, ComfyNode<Combine_Masks_input, Combine_Masks_output> {
    nameInComfy: "Combine Masks"
}
export interface Combine_Masks_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Combine_Masks_input {
    image1: _IMAGE
    image2: _IMAGE
    op: Enum_Combine_Masks_op
    clamp_result: Enum_ConstrainImage$8pysssss_crop_if_required
    round_result: Enum_ConstrainImage$8pysssss_crop_if_required
}

// Unary Mask Op [Masquerade Nodes]
export interface Unary_Mask_Op extends HasSingle_IMAGE, ComfyNode<Unary_Mask_Op_input, Unary_Mask_Op_output> {
    nameInComfy: "Unary Mask Op"
}
export interface Unary_Mask_Op_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Unary_Mask_Op_input {
    image: _IMAGE
    op: Enum_Unary_Mask_Op_op
}

// Unary Image Op [Masquerade Nodes]
export interface Unary_Image_Op extends HasSingle_IMAGE, ComfyNode<Unary_Image_Op_input, Unary_Image_Op_output> {
    nameInComfy: "Unary Image Op"
}
export interface Unary_Image_Op_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Unary_Image_Op_input {
    image: _IMAGE
    op: Enum_Unary_Mask_Op_op
}

// Blur [Masquerade Nodes]
export interface Blur extends HasSingle_IMAGE, ComfyNode<Blur_input, Blur_output> {
    nameInComfy: "Blur"
}
export interface Blur_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Blur_input {
    image: _IMAGE
    /** default=10 min=48 max=48 step=1 */
    radius?: _INT
    /** default=1 min=3 max=3 step=0.01 */
    sigma_factor?: _FLOAT
}

// Image To Mask [Masquerade Nodes]
export interface Image_To_Mask extends HasSingle_MASK, ComfyNode<Image_To_Mask_input, Image_To_Mask_output> {
    nameInComfy: "Image To Mask"
}
export interface Image_To_Mask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface Image_To_Mask_input {
    image: _IMAGE
    method: Enum_Image_To_Mask_method
}

// Mix Images By Mask [Masquerade Nodes]
export interface Mix_Images_By_Mask extends HasSingle_IMAGE, ComfyNode<Mix_Images_By_Mask_input, Mix_Images_By_Mask_output> {
    nameInComfy: "Mix Images By Mask"
}
export interface Mix_Images_By_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Mix_Images_By_Mask_input {
    image1: _IMAGE
    image2: _IMAGE
    mask: _IMAGE
}

// Mix Color By Mask [Masquerade Nodes]
export interface Mix_Color_By_Mask extends HasSingle_IMAGE, ComfyNode<Mix_Color_By_Mask_input, Mix_Color_By_Mask_output> {
    nameInComfy: "Mix Color By Mask"
}
export interface Mix_Color_By_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Mix_Color_By_Mask_input {
    image: _IMAGE
    /** default=0 min=255 max=255 step=1 */
    r?: _INT
    /** default=0 min=255 max=255 step=1 */
    g?: _INT
    /** default=0 min=255 max=255 step=1 */
    b?: _INT
    mask: _IMAGE
}

// Mask To Region [Masquerade Nodes]
export interface Mask_To_Region extends HasSingle_IMAGE, ComfyNode<Mask_To_Region_input, Mask_To_Region_output> {
    nameInComfy: "Mask To Region"
}
export interface Mask_To_Region_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Mask_To_Region_input {
    mask: _IMAGE
    /** default=0 min=1048576 max=1048576 step=1 */
    padding?: _INT
    constraints: Enum_Mask_To_Region_constraints
    /** default=64 min=1048576 max=1048576 step=1 */
    constraint_x?: _INT
    /** default=64 min=1048576 max=1048576 step=1 */
    constraint_y?: _INT
    /** default=0 min=1048576 max=1048576 step=1 */
    min_width?: _INT
    /** default=0 min=1048576 max=1048576 step=1 */
    min_height?: _INT
    batch_behavior: Enum_Mask_To_Region_batch_behavior
}

// Cut By Mask [Masquerade Nodes]
export interface Cut_By_Mask extends HasSingle_IMAGE, ComfyNode<Cut_By_Mask_input, Cut_By_Mask_output> {
    nameInComfy: "Cut By Mask"
}
export interface Cut_By_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Cut_By_Mask_input {
    image: _IMAGE
    mask: _IMAGE
    /** default=0 min=1048576 max=1048576 step=1 */
    force_resize_width?: _INT
    /** default=0 min=1048576 max=1048576 step=1 */
    force_resize_height?: _INT
    mask_mapping_optional?: _MASK_MAPPING
}

// Paste By Mask [Masquerade Nodes]
export interface Paste_By_Mask extends HasSingle_IMAGE, ComfyNode<Paste_By_Mask_input, Paste_By_Mask_output> {
    nameInComfy: "Paste By Mask"
}
export interface Paste_By_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Paste_By_Mask_input {
    image_base: _IMAGE
    image_to_paste: _IMAGE
    mask: _IMAGE
    resize_behavior: Enum_Paste_By_Mask_resize_behavior
    mask_mapping_optional?: _MASK_MAPPING
}

// Get Image Size [Masquerade Nodes]
export interface Get_Image_Size extends ComfyNode<Get_Image_Size_input, Get_Image_Size_output> {
    nameInComfy: "Get Image Size"
}
export interface Get_Image_Size_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
}
export interface Get_Image_Size_input {
    image: _IMAGE
}

// Change Channel Count [Masquerade Nodes]
export interface Change_Channel_Count extends HasSingle_IMAGE, ComfyNode<Change_Channel_Count_input, Change_Channel_Count_output> {
    nameInComfy: "Change Channel Count"
}
export interface Change_Channel_Count_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Change_Channel_Count_input {
    image: _IMAGE
    kind: Enum_Change_Channel_Count_kind
}

// Constant Mask [Masquerade Nodes]
export interface Constant_Mask extends HasSingle_IMAGE, ComfyNode<Constant_Mask_input, Constant_Mask_output> {
    nameInComfy: "Constant Mask"
}
export interface Constant_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Constant_Mask_input {
    /** default=0 min=8 max=8 step=0.01 */
    value?: _FLOAT
    /** default=0 min=1048576 max=1048576 step=1 */
    explicit_height?: _INT
    /** default=0 min=1048576 max=1048576 step=1 */
    explicit_width?: _INT
    copy_image_size?: _IMAGE
}

// Prune By Mask [Masquerade Nodes]
export interface Prune_By_Mask extends HasSingle_IMAGE, ComfyNode<Prune_By_Mask_input, Prune_By_Mask_output> {
    nameInComfy: "Prune By Mask"
}
export interface Prune_By_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Prune_By_Mask_input {
    image: _IMAGE
    mask: _IMAGE
}

// Separate Mask Components [Masquerade Nodes]
export interface Separate_Mask_Components extends HasSingle_IMAGE, HasSingle_MASK_MAPPING, ComfyNode<Separate_Mask_Components_input, Separate_Mask_Components_output> {
    nameInComfy: "Separate Mask Components"
}
export interface Separate_Mask_Components_output {
    mask: ComfyNodeOutput<'IMAGE', 0>,
    mask_mappings: ComfyNodeOutput<'MASK_MAPPING', 1>,
}
export interface Separate_Mask_Components_input {
    mask: _IMAGE
}

// Create Rect Mask [Masquerade Nodes]
export interface Create_Rect_Mask extends HasSingle_IMAGE, ComfyNode<Create_Rect_Mask_input, Create_Rect_Mask_output> {
    nameInComfy: "Create Rect Mask"
}
export interface Create_Rect_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Create_Rect_Mask_input {
    mode: Enum_Create_Rect_Mask_mode
    origin: Enum_Create_Rect_Mask_origin
    /** default=0 min=1048576 max=1048576 step=1 */
    x?: _FLOAT
    /** default=0 min=1048576 max=1048576 step=1 */
    y?: _FLOAT
    /** default=50 min=1048576 max=1048576 step=1 */
    width?: _FLOAT
    /** default=50 min=1048576 max=1048576 step=1 */
    height?: _FLOAT
    /** default=512 min=1048576 max=1048576 step=64 */
    image_width?: _INT
    /** default=512 min=1048576 max=1048576 step=64 */
    image_height?: _INT
    copy_image_size?: _IMAGE
}

// Make Image Batch [Masquerade Nodes]
export interface Make_Image_Batch extends HasSingle_IMAGE, ComfyNode<Make_Image_Batch_input, Make_Image_Batch_output> {
    nameInComfy: "Make Image Batch"
}
export interface Make_Image_Batch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Make_Image_Batch_input {
    image1: _IMAGE
    image2?: _IMAGE
    image3?: _IMAGE
    image4?: _IMAGE
    image5?: _IMAGE
    image6?: _IMAGE
}

// Create QR Code [Masquerade Nodes]
export interface Create_QR_Code extends HasSingle_IMAGE, ComfyNode<Create_QR_Code_input, Create_QR_Code_output> {
    nameInComfy: "Create QR Code"
}
export interface Create_QR_Code_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Create_QR_Code_input {
    /** */
    text: _STRING
    /** default=512 min=4096 max=4096 step=64 */
    size?: _INT
    /** default=1 min=40 max=40 step=1 */
    qr_version?: _INT
    /** default="H" */
    error_correction?: Enum_QRCodeGenerator_error_correction
    /** default=10 min=100 max=100 step=1 */
    box_size?: _INT
    /** default=4 min=100 max=100 step=1 */
    border?: _INT
}

// Convert Color Space [Masquerade Nodes]
export interface Convert_Color_Space extends HasSingle_IMAGE, ComfyNode<Convert_Color_Space_input, Convert_Color_Space_output> {
    nameInComfy: "Convert Color Space"
}
export interface Convert_Color_Space_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Convert_Color_Space_input {
    in_space: Enum_Convert_Color_Space_in_space
    out_space: Enum_Convert_Color_Space_in_space
    image: _IMAGE
}

// MasqueradeIncrementer [Masquerade Nodes]
export interface MasqueradeIncrementer extends HasSingle_INT, ComfyNode<MasqueradeIncrementer_input, MasqueradeIncrementer_output> {
    nameInComfy: "MasqueradeIncrementer"
}
export interface MasqueradeIncrementer_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface MasqueradeIncrementer_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=1 */
    seed?: _INT
    /** default=1 min=18446744073709552000 max=18446744073709552000 step=1 */
    max_value?: _INT
}

// Image Remove Background (rembg) [image]
export interface Image_Remove_Background_$1rembg$2 extends HasSingle_IMAGE, ComfyNode<Image_Remove_Background_$1rembg$2_input, Image_Remove_Background_$1rembg$2_output> {
    nameInComfy: "Image Remove Background (rembg)"
}
export interface Image_Remove_Background_$1rembg$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Remove_Background_$1rembg$2_input {
    image: _IMAGE
}

// Context Big (rgthree) [rgthree]
export interface Context_Big_$1rgthree$2 extends HasSingle_RGTHREE_CONTEXT, HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_LATENT, HasSingle_IMAGE, HasSingle_FLOAT, HasSingle_Enum_CheckpointLoaderSimple_ckpt_name, HasSingle_Enum_KSampler_sampler_name, HasSingle_Enum_KSampler_scheduler, HasSingle_MASK, HasSingle_CONTROL_NET, ComfyNode<Context_Big_$1rgthree$2_input, Context_Big_$1rgthree$2_output> {
    nameInComfy: "Context Big (rgthree)"
}
export interface Context_Big_$1rgthree$2_output {
    CONTEXT: ComfyNodeOutput<'RGTHREE_CONTEXT', 0>,
    MODEL: ComfyNodeOutput<'MODEL', 1>,
    CLIP: ComfyNodeOutput<'CLIP', 2>,
    VAE: ComfyNodeOutput<'VAE', 3>,
    POSITIVE: ComfyNodeOutput<'CONDITIONING', 4>,
    NEGATIVE: ComfyNodeOutput<'CONDITIONING', 5>,
    LATENT: ComfyNodeOutput<'LATENT', 6>,
    IMAGE: ComfyNodeOutput<'IMAGE', 7>,
    SEED: ComfyNodeOutput<'INT', 8>,
    STEPS: ComfyNodeOutput<'INT', 9>,
    STEP_REFINER: ComfyNodeOutput<'INT', 10>,
    CFG: ComfyNodeOutput<'FLOAT', 11>,
    CKPT_NAME: ComfyNodeOutput<'Enum_CheckpointLoaderSimple_ckpt_name', 12>,
    SAMPLER: ComfyNodeOutput<'Enum_KSampler_sampler_name', 13>,
    SCHEDULER: ComfyNodeOutput<'Enum_KSampler_scheduler', 14>,
    CLIP_WIDTH: ComfyNodeOutput<'INT', 15>,
    CLIP_HEIGHT: ComfyNodeOutput<'INT', 16>,
    TEXT_POS_G: ComfyNodeOutput<'STRING', 17>,
    TEXT_POS_L: ComfyNodeOutput<'STRING', 18>,
    TEXT_NEG_G: ComfyNodeOutput<'STRING', 19>,
    TEXT_NEG_L: ComfyNodeOutput<'STRING', 20>,
    MASK: ComfyNodeOutput<'MASK', 21>,
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 22>,
}
export interface Context_Big_$1rgthree$2_input {
    base_ctx?: _RGTHREE_CONTEXT
    model?: _MODEL
    clip?: _CLIP
    vae?: _VAE
    positive?: _CONDITIONING
    negative?: _CONDITIONING
    latent?: _LATENT
    images?: _IMAGE
    /** */
    seed?: _INT
    /** */
    steps?: _INT
    /** */
    step_refiner?: _INT
    /** */
    cfg?: _FLOAT
    /** */
    ckpt_name?: Enum_CheckpointLoaderSimple_ckpt_name
    /** */
    sampler?: Enum_KSampler_sampler_name
    /** */
    scheduler?: Enum_KSampler_scheduler
    /** */
    clip_width?: _INT
    /** */
    clip_height?: _INT
    /** */
    text_pos_g?: _STRING
    /** */
    text_pos_l?: _STRING
    /** */
    text_neg_g?: _STRING
    /** */
    text_neg_l?: _STRING
    mask?: _MASK
    control_net?: _CONTROL_NET
}

// Context (rgthree) [rgthree]
export interface Context_$1rgthree$2 extends HasSingle_RGTHREE_CONTEXT, HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_LATENT, HasSingle_IMAGE, HasSingle_INT, ComfyNode<Context_$1rgthree$2_input, Context_$1rgthree$2_output> {
    nameInComfy: "Context (rgthree)"
}
export interface Context_$1rgthree$2_output {
    CONTEXT: ComfyNodeOutput<'RGTHREE_CONTEXT', 0>,
    MODEL: ComfyNodeOutput<'MODEL', 1>,
    CLIP: ComfyNodeOutput<'CLIP', 2>,
    VAE: ComfyNodeOutput<'VAE', 3>,
    POSITIVE: ComfyNodeOutput<'CONDITIONING', 4>,
    NEGATIVE: ComfyNodeOutput<'CONDITIONING', 5>,
    LATENT: ComfyNodeOutput<'LATENT', 6>,
    IMAGE: ComfyNodeOutput<'IMAGE', 7>,
    SEED: ComfyNodeOutput<'INT', 8>,
}
export interface Context_$1rgthree$2_input {
    base_ctx?: _RGTHREE_CONTEXT
    model?: _MODEL
    clip?: _CLIP
    vae?: _VAE
    positive?: _CONDITIONING
    negative?: _CONDITIONING
    latent?: _LATENT
    images?: _IMAGE
    /** */
    seed?: _INT
}

// Context Switch (rgthree) [rgthree]
export interface Context_Switch_$1rgthree$2 extends HasSingle_RGTHREE_CONTEXT, HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_LATENT, HasSingle_IMAGE, HasSingle_INT, ComfyNode<Context_Switch_$1rgthree$2_input, Context_Switch_$1rgthree$2_output> {
    nameInComfy: "Context Switch (rgthree)"
}
export interface Context_Switch_$1rgthree$2_output {
    CONTEXT: ComfyNodeOutput<'RGTHREE_CONTEXT', 0>,
    MODEL: ComfyNodeOutput<'MODEL', 1>,
    CLIP: ComfyNodeOutput<'CLIP', 2>,
    VAE: ComfyNodeOutput<'VAE', 3>,
    POSITIVE: ComfyNodeOutput<'CONDITIONING', 4>,
    NEGATIVE: ComfyNodeOutput<'CONDITIONING', 5>,
    LATENT: ComfyNodeOutput<'LATENT', 6>,
    IMAGE: ComfyNodeOutput<'IMAGE', 7>,
    SEED: ComfyNodeOutput<'INT', 8>,
}
export interface Context_Switch_$1rgthree$2_input {
}

// Context Switch Big (rgthree) [rgthree]
export interface Context_Switch_Big_$1rgthree$2 extends HasSingle_RGTHREE_CONTEXT, HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_LATENT, HasSingle_IMAGE, HasSingle_FLOAT, HasSingle_Enum_CheckpointLoaderSimple_ckpt_name, HasSingle_Enum_KSampler_sampler_name, HasSingle_Enum_KSampler_scheduler, HasSingle_MASK, HasSingle_CONTROL_NET, ComfyNode<Context_Switch_Big_$1rgthree$2_input, Context_Switch_Big_$1rgthree$2_output> {
    nameInComfy: "Context Switch Big (rgthree)"
}
export interface Context_Switch_Big_$1rgthree$2_output {
    CONTEXT: ComfyNodeOutput<'RGTHREE_CONTEXT', 0>,
    MODEL: ComfyNodeOutput<'MODEL', 1>,
    CLIP: ComfyNodeOutput<'CLIP', 2>,
    VAE: ComfyNodeOutput<'VAE', 3>,
    POSITIVE: ComfyNodeOutput<'CONDITIONING', 4>,
    NEGATIVE: ComfyNodeOutput<'CONDITIONING', 5>,
    LATENT: ComfyNodeOutput<'LATENT', 6>,
    IMAGE: ComfyNodeOutput<'IMAGE', 7>,
    SEED: ComfyNodeOutput<'INT', 8>,
    STEPS: ComfyNodeOutput<'INT', 9>,
    STEP_REFINER: ComfyNodeOutput<'INT', 10>,
    CFG: ComfyNodeOutput<'FLOAT', 11>,
    CKPT_NAME: ComfyNodeOutput<'Enum_CheckpointLoaderSimple_ckpt_name', 12>,
    SAMPLER: ComfyNodeOutput<'Enum_KSampler_sampler_name', 13>,
    SCHEDULER: ComfyNodeOutput<'Enum_KSampler_scheduler', 14>,
    CLIP_WIDTH: ComfyNodeOutput<'INT', 15>,
    CLIP_HEIGHT: ComfyNodeOutput<'INT', 16>,
    TEXT_POS_G: ComfyNodeOutput<'STRING', 17>,
    TEXT_POS_L: ComfyNodeOutput<'STRING', 18>,
    TEXT_NEG_G: ComfyNodeOutput<'STRING', 19>,
    TEXT_NEG_L: ComfyNodeOutput<'STRING', 20>,
    MASK: ComfyNodeOutput<'MASK', 21>,
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 22>,
}
export interface Context_Switch_Big_$1rgthree$2_input {
}

// Context Merge (rgthree) [rgthree]
export interface Context_Merge_$1rgthree$2 extends HasSingle_RGTHREE_CONTEXT, HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_LATENT, HasSingle_IMAGE, HasSingle_INT, ComfyNode<Context_Merge_$1rgthree$2_input, Context_Merge_$1rgthree$2_output> {
    nameInComfy: "Context Merge (rgthree)"
}
export interface Context_Merge_$1rgthree$2_output {
    CONTEXT: ComfyNodeOutput<'RGTHREE_CONTEXT', 0>,
    MODEL: ComfyNodeOutput<'MODEL', 1>,
    CLIP: ComfyNodeOutput<'CLIP', 2>,
    VAE: ComfyNodeOutput<'VAE', 3>,
    POSITIVE: ComfyNodeOutput<'CONDITIONING', 4>,
    NEGATIVE: ComfyNodeOutput<'CONDITIONING', 5>,
    LATENT: ComfyNodeOutput<'LATENT', 6>,
    IMAGE: ComfyNodeOutput<'IMAGE', 7>,
    SEED: ComfyNodeOutput<'INT', 8>,
}
export interface Context_Merge_$1rgthree$2_input {
}

// Context Merge Big (rgthree) [rgthree]
export interface Context_Merge_Big_$1rgthree$2 extends HasSingle_RGTHREE_CONTEXT, HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_LATENT, HasSingle_IMAGE, HasSingle_FLOAT, HasSingle_Enum_CheckpointLoaderSimple_ckpt_name, HasSingle_Enum_KSampler_sampler_name, HasSingle_Enum_KSampler_scheduler, HasSingle_MASK, HasSingle_CONTROL_NET, ComfyNode<Context_Merge_Big_$1rgthree$2_input, Context_Merge_Big_$1rgthree$2_output> {
    nameInComfy: "Context Merge Big (rgthree)"
}
export interface Context_Merge_Big_$1rgthree$2_output {
    CONTEXT: ComfyNodeOutput<'RGTHREE_CONTEXT', 0>,
    MODEL: ComfyNodeOutput<'MODEL', 1>,
    CLIP: ComfyNodeOutput<'CLIP', 2>,
    VAE: ComfyNodeOutput<'VAE', 3>,
    POSITIVE: ComfyNodeOutput<'CONDITIONING', 4>,
    NEGATIVE: ComfyNodeOutput<'CONDITIONING', 5>,
    LATENT: ComfyNodeOutput<'LATENT', 6>,
    IMAGE: ComfyNodeOutput<'IMAGE', 7>,
    SEED: ComfyNodeOutput<'INT', 8>,
    STEPS: ComfyNodeOutput<'INT', 9>,
    STEP_REFINER: ComfyNodeOutput<'INT', 10>,
    CFG: ComfyNodeOutput<'FLOAT', 11>,
    CKPT_NAME: ComfyNodeOutput<'Enum_CheckpointLoaderSimple_ckpt_name', 12>,
    SAMPLER: ComfyNodeOutput<'Enum_KSampler_sampler_name', 13>,
    SCHEDULER: ComfyNodeOutput<'Enum_KSampler_scheduler', 14>,
    CLIP_WIDTH: ComfyNodeOutput<'INT', 15>,
    CLIP_HEIGHT: ComfyNodeOutput<'INT', 16>,
    TEXT_POS_G: ComfyNodeOutput<'STRING', 17>,
    TEXT_POS_L: ComfyNodeOutput<'STRING', 18>,
    TEXT_NEG_G: ComfyNodeOutput<'STRING', 19>,
    TEXT_NEG_L: ComfyNodeOutput<'STRING', 20>,
    MASK: ComfyNodeOutput<'MASK', 21>,
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 22>,
}
export interface Context_Merge_Big_$1rgthree$2_input {
}

// Display Int (rgthree) [rgthree]
export interface Display_Int_$1rgthree$2 extends ComfyNode<Display_Int_$1rgthree$2_input, Display_Int_$1rgthree$2_output> {
    nameInComfy: "Display Int (rgthree)"
}
export interface Display_Int_$1rgthree$2_output {
}
export interface Display_Int_$1rgthree$2_input {
    /** */
    input: _INT
}

// Display Any (rgthree) [rgthree]
export interface Display_Any_$1rgthree$2 extends ComfyNode<Display_Any_$1rgthree$2_input, Display_Any_$1rgthree$2_output> {
    nameInComfy: "Display Any (rgthree)"
}
export interface Display_Any_$1rgthree$2_output {
}
export interface Display_Any_$1rgthree$2_input {
    /** */
    source: _$Star
}

// Lora Loader Stack (rgthree) [rgthree]
export interface Lora_Loader_Stack_$1rgthree$2 extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<Lora_Loader_Stack_$1rgthree$2_input, Lora_Loader_Stack_$1rgthree$2_output> {
    nameInComfy: "Lora Loader Stack (rgthree)"
}
export interface Lora_Loader_Stack_$1rgthree$2_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
}
export interface Lora_Loader_Stack_$1rgthree$2_input {
    model: _MODEL
    clip: _CLIP
    lora_01: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_01?: _FLOAT
    lora_02: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_02?: _FLOAT
    lora_03: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_03?: _FLOAT
    lora_04: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_04?: _FLOAT
}

// Seed (rgthree) [rgthree]
export interface Seed_$1rgthree$2 extends HasSingle_INT, ComfyNode<Seed_$1rgthree$2_input, Seed_$1rgthree$2_output> {
    nameInComfy: "Seed (rgthree)"
}
export interface Seed_$1rgthree$2_output {
    SEED: ComfyNodeOutput<'INT', 0>,
}
export interface Seed_$1rgthree$2_input {
    /** default=0 min=1125899906842624 max=1125899906842624 */
    seed?: _INT
}

// Image Inset Crop (rgthree) [rgthree]
export interface Image_Inset_Crop_$1rgthree$2 extends HasSingle_IMAGE, ComfyNode<Image_Inset_Crop_$1rgthree$2_input, Image_Inset_Crop_$1rgthree$2_output> {
    nameInComfy: "Image Inset Crop (rgthree)"
}
export interface Image_Inset_Crop_$1rgthree$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Inset_Crop_$1rgthree$2_input {
    image: _IMAGE
    measurement: Enum_Image_Inset_Crop_$1rgthree$2_measurement
    /** default=0 min=16384 max=16384 step=8 */
    left?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    right?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    top?: _INT
    /** default=0 min=16384 max=16384 step=8 */
    bottom?: _INT
}

// Power Prompt (rgthree) [rgthree]
export interface Power_Prompt_$1rgthree$2 extends HasSingle_CONDITIONING, HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<Power_Prompt_$1rgthree$2_input, Power_Prompt_$1rgthree$2_output> {
    nameInComfy: "Power Prompt (rgthree)"
}
export interface Power_Prompt_$1rgthree$2_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    MODEL: ComfyNodeOutput<'MODEL', 1>,
    CLIP: ComfyNodeOutput<'CLIP', 2>,
    TEXT: ComfyNodeOutput<'STRING', 3>,
}
export interface Power_Prompt_$1rgthree$2_input {
    /** */
    prompt: _STRING
    opt_model?: _MODEL
    opt_clip?: _CLIP
    insert_lora?: Enum_Power_Prompt_$1rgthree$2_insert_lora
    insert_embedding?: Enum_Power_Prompt_$1rgthree$2_insert_embedding
    insert_saved?: Enum_Power_Prompt_$1rgthree$2_insert_saved
}

// Power Prompt - Simple (rgthree) [rgthree]
export interface Power_Prompt_$7_Simple_$1rgthree$2 extends HasSingle_CONDITIONING, HasSingle_STRING, ComfyNode<Power_Prompt_$7_Simple_$1rgthree$2_input, Power_Prompt_$7_Simple_$1rgthree$2_output> {
    nameInComfy: "Power Prompt - Simple (rgthree)"
}
export interface Power_Prompt_$7_Simple_$1rgthree$2_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    TEXT: ComfyNodeOutput<'STRING', 1>,
}
export interface Power_Prompt_$7_Simple_$1rgthree$2_input {
    /** */
    prompt: _STRING
    opt_clip?: _CLIP
    insert_embedding?: Enum_Power_Prompt_$1rgthree$2_insert_embedding
    insert_saved?: Enum_Power_Prompt_$1rgthree$2_insert_saved
}

// KSampler Config (rgthree) [rgthree]
export interface KSampler_Config_$1rgthree$2 extends HasSingle_FLOAT, HasSingle_Enum_KSampler_sampler_name, HasSingle_Enum_KSampler_scheduler, ComfyNode<KSampler_Config_$1rgthree$2_input, KSampler_Config_$1rgthree$2_output> {
    nameInComfy: "KSampler Config (rgthree)"
}
export interface KSampler_Config_$1rgthree$2_output {
    STEPS: ComfyNodeOutput<'INT', 0>,
    REFINER_STEP: ComfyNodeOutput<'INT', 1>,
    CFG: ComfyNodeOutput<'FLOAT', 2>,
    SAMPLER: ComfyNodeOutput<'Enum_KSampler_sampler_name', 3>,
    SCHEDULER: ComfyNodeOutput<'Enum_KSampler_scheduler', 4>,
}
export interface KSampler_Config_$1rgthree$2_input {
    /** default=30 min=16384 max=16384 step=1 */
    steps_total?: _INT
    /** default=24 min=16384 max=16384 step=1 */
    refiner_step?: _INT
    /** default=8 min=100 max=100 step=0.5 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
}

// SDXL Empty Latent Image (rgthree) [rgthree]
export interface SDXL_Empty_Latent_Image_$1rgthree$2 extends HasSingle_LATENT, ComfyNode<SDXL_Empty_Latent_Image_$1rgthree$2_input, SDXL_Empty_Latent_Image_$1rgthree$2_output> {
    nameInComfy: "SDXL Empty Latent Image (rgthree)"
}
export interface SDXL_Empty_Latent_Image_$1rgthree$2_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    CLIP_WIDTH: ComfyNodeOutput<'INT', 1>,
    CLIP_HEIGHT: ComfyNodeOutput<'INT', 2>,
}
export interface SDXL_Empty_Latent_Image_$1rgthree$2_input {
    /** default="1024 x 1024  (square)" */
    dimensions?: Enum_SDXL_Empty_Latent_Image_$1rgthree$2_dimensions
    /** default=2 min=10 max=10 step=0.5 */
    clip_scale?: _FLOAT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// SDXL Power Prompt - Positive (rgthree) [rgthree]
export interface SDXL_Power_Prompt_$7_Positive_$1rgthree$2 extends HasSingle_CONDITIONING, HasSingle_MODEL, HasSingle_CLIP, ComfyNode<SDXL_Power_Prompt_$7_Positive_$1rgthree$2_input, SDXL_Power_Prompt_$7_Positive_$1rgthree$2_output> {
    nameInComfy: "SDXL Power Prompt - Positive (rgthree)"
}
export interface SDXL_Power_Prompt_$7_Positive_$1rgthree$2_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    MODEL: ComfyNodeOutput<'MODEL', 1>,
    CLIP: ComfyNodeOutput<'CLIP', 2>,
    TEXT_G: ComfyNodeOutput<'STRING', 3>,
    TEXT_L: ComfyNodeOutput<'STRING', 4>,
}
export interface SDXL_Power_Prompt_$7_Positive_$1rgthree$2_input {
    /** */
    prompt_g: _STRING
    /** */
    prompt_l: _STRING
    opt_model?: _MODEL
    opt_clip?: _CLIP
    /** default=1024 min=16384 max=16384 */
    opt_clip_width?: _INT
    /** default=1024 min=16384 max=16384 */
    opt_clip_height?: _INT
    insert_lora?: Enum_Power_Prompt_$1rgthree$2_insert_lora
    insert_embedding?: Enum_Power_Prompt_$1rgthree$2_insert_embedding
    insert_saved?: Enum_Power_Prompt_$1rgthree$2_insert_saved
    /** default=-1 min=16384 max=16384 */
    target_width?: _INT
    /** default=-1 min=16384 max=16384 */
    target_height?: _INT
    /** default=-1 min=16384 max=16384 */
    crop_width?: _INT
    /** default=-1 min=16384 max=16384 */
    crop_height?: _INT
}

// SDXL Power Prompt - Simple / Negative (rgthree) [rgthree]
export interface SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2 extends HasSingle_CONDITIONING, ComfyNode<SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_input, SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_output> {
    nameInComfy: "SDXL Power Prompt - Simple / Negative (rgthree)"
}
export interface SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
    TEXT_G: ComfyNodeOutput<'STRING', 1>,
    TEXT_L: ComfyNodeOutput<'STRING', 2>,
}
export interface SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2_input {
    /** */
    prompt_g: _STRING
    /** */
    prompt_l: _STRING
    opt_clip?: _CLIP
    /** default=1024 min=16384 max=16384 */
    opt_clip_width?: _INT
    /** default=1024 min=16384 max=16384 */
    opt_clip_height?: _INT
    insert_embedding?: Enum_Power_Prompt_$1rgthree$2_insert_embedding
    insert_saved?: Enum_Power_Prompt_$1rgthree$2_insert_saved
    /** default=-1 min=16384 max=16384 */
    target_width?: _INT
    /** default=-1 min=16384 max=16384 */
    target_height?: _INT
    /** default=-1 min=16384 max=16384 */
    crop_width?: _INT
    /** default=-1 min=16384 max=16384 */
    crop_height?: _INT
}

// Any Switch (rgthree) [rgthree]
export interface Any_Switch_$1rgthree$2 extends HasSingle_$Star, ComfyNode<Any_Switch_$1rgthree$2_input, Any_Switch_$1rgthree$2_output> {
    nameInComfy: "Any Switch (rgthree)"
}
export interface Any_Switch_$1rgthree$2_output {
    "$Star": ComfyNodeOutput<'$Star', 0>,
}
export interface Any_Switch_$1rgthree$2_input {
}

// Image Comparer (rgthree) [rgthree]
export interface Image_Comparer_$1rgthree$2 extends ComfyNode<Image_Comparer_$1rgthree$2_input, Image_Comparer_$1rgthree$2_output> {
    nameInComfy: "Image Comparer (rgthree)"
}
export interface Image_Comparer_$1rgthree$2_output {
}
export interface Image_Comparer_$1rgthree$2_input {
    image_a?: _IMAGE
    image_b?: _IMAGE
}

// Power Lora Loader (rgthree) [rgthree]
export interface Power_Lora_Loader_$1rgthree$2 extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<Power_Lora_Loader_$1rgthree$2_input, Power_Lora_Loader_$1rgthree$2_output> {
    nameInComfy: "Power Lora Loader (rgthree)"
}
export interface Power_Lora_Loader_$1rgthree$2_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
}
export interface Power_Lora_Loader_$1rgthree$2_input {
    model: _MODEL
    clip: _CLIP
}

// PerturbedAttention [model_patches_unet]
export interface PerturbedAttention extends HasSingle_MODEL, ComfyNode<PerturbedAttention_input, PerturbedAttention_output> {
    nameInComfy: "PerturbedAttention"
}
export interface PerturbedAttention_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface PerturbedAttention_input {
    model: _MODEL
    /** default=3 min=100 max=100 step=0.1 */
    scale?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    adaptive_scale?: _FLOAT
    /** default="middle" */
    unet_block?: Enum_PerturbedAttention_unet_block
    /** default=0 */
    unet_block_id?: _INT
    /** default=-1 min=10000 max=10000 step=0.01 */
    sigma_start?: _FLOAT
    /** default=-1 min=10000 max=10000 step=0.01 */
    sigma_end?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    rescale?: _FLOAT
    /** default="full" */
    rescale_mode?: Enum_PerturbedAttention_rescale_mode
    /** default="" */
    unet_block_list?: _STRING
}

// SmoothedEnergyGuidanceAdvanced [model_patches_unet]
export interface SmoothedEnergyGuidanceAdvanced extends HasSingle_MODEL, ComfyNode<SmoothedEnergyGuidanceAdvanced_input, SmoothedEnergyGuidanceAdvanced_output> {
    nameInComfy: "SmoothedEnergyGuidanceAdvanced"
}
export interface SmoothedEnergyGuidanceAdvanced_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface SmoothedEnergyGuidanceAdvanced_input {
    model: _MODEL
    /** default=3 min=100 max=100 step=0.1 */
    scale?: _FLOAT
    /** default=-1 min=9999 max=9999 step=0.01 */
    blur_sigma?: _FLOAT
    /** default="middle" */
    unet_block?: Enum_PerturbedAttention_unet_block
    /** default=0 */
    unet_block_id?: _INT
    /** default=-1 min=10000 max=10000 step=0.01 */
    sigma_start?: _FLOAT
    /** default=-1 min=10000 max=10000 step=0.01 */
    sigma_end?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    rescale?: _FLOAT
    /** default="full" */
    rescale_mode?: Enum_PerturbedAttention_rescale_mode
    /** default="" */
    unet_block_list?: _STRING
}

// TRTAttachPag [TensorRT]
export interface TRTAttachPag extends HasSingle_MODEL, ComfyNode<TRTAttachPag_input, TRTAttachPag_output> {
    nameInComfy: "TRTAttachPag"
}
export interface TRTAttachPag_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface TRTAttachPag_input {
    model: _MODEL
    /** default="middle" */
    unet_block?: Enum_PerturbedAttention_unet_block
    /** default=0 */
    unet_block_id?: _INT
    /** default="" */
    unet_block_list?: _STRING
}

// TRTPerturbedAttention [TensorRT]
export interface TRTPerturbedAttention extends HasSingle_MODEL, ComfyNode<TRTPerturbedAttention_input, TRTPerturbedAttention_output> {
    nameInComfy: "TRTPerturbedAttention"
}
export interface TRTPerturbedAttention_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface TRTPerturbedAttention_input {
    model_base: _MODEL
    model_pag: _MODEL
    /** default=3 min=100 max=100 step=0.1 */
    scale?: _FLOAT
    /** default=0 min=1 max=1 step=0.001 */
    adaptive_scale?: _FLOAT
    /** default=-1 min=10000 max=10000 step=0.01 */
    sigma_start?: _FLOAT
    /** default=-1 min=10000 max=10000 step=0.01 */
    sigma_end?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    rescale?: _FLOAT
    /** default="full" */
    rescale_mode?: Enum_TRTPerturbedAttention_rescale_mode
}

// SDXLMixSampler [JNode]
export interface SDXLMixSampler extends HasSingle_LATENT, ComfyNode<SDXLMixSampler_input, SDXLMixSampler_output> {
    nameInComfy: "SDXLMixSampler"
}
export interface SDXLMixSampler_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface SDXLMixSampler_input {
    base_model: _MODEL
    ref_model: _MODEL
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    noise_seed?: _INT
    /** default=1 min=200 max=200 step=1 */
    total_loop?: _INT
    /** default=65 min=100 max=100 step=1 */
    base_steps_percentage?: _FLOAT
    /** default=20 min=undefined step=1 */
    mixing_steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    base_positive: _CONDITIONING
    base_negative: _CONDITIONING
    refiner_positive: _CONDITIONING
    refiner_negative: _CONDITIONING
    latent_image: _LATENT
    /** default=1 min=1 max=1 step=0.1 */
    denoise?: _FLOAT
    /** default="yes" */
    final_only?: Enum_ConstrainImage$8pysssss_crop_if_required
}

// BLIP Model Loader [WAS Suite_Loaders]
export interface BLIP_Model_Loader extends HasSingle_BLIP_MODEL, ComfyNode<BLIP_Model_Loader_input, BLIP_Model_Loader_output> {
    nameInComfy: "BLIP Model Loader"
}
export interface BLIP_Model_Loader_output {
    BLIP_MODEL: ComfyNodeOutput<'BLIP_MODEL', 0>,
}
export interface BLIP_Model_Loader_input {
    /** default="Salesforce/blip-image-captioning-base" */
    blip_model?: _STRING
    /** default="Salesforce/blip-vqa-base" */
    vqa_model_id?: _STRING
    device: Enum_BLIP_Model_Loader_device
}

// Blend Latents [WAS Suite_Latent]
export interface Blend_Latents extends HasSingle_LATENT, ComfyNode<Blend_Latents_input, Blend_Latents_output> {
    nameInComfy: "Blend Latents"
}
export interface Blend_Latents_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface Blend_Latents_input {
    latent_a: _LATENT
    latent_b: _LATENT
    operation: Enum_Blend_Latents_operation
    /** default=0.5 min=1 max=1 step=0.01 */
    blend?: _FLOAT
}

// Bus Node [WAS Suite_Utilities]
export interface Bus_Node extends HasSingle_BUS, HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, ComfyNode<Bus_Node_input, Bus_Node_output> {
    nameInComfy: "Bus Node"
}
export interface Bus_Node_output {
    bus: ComfyNodeOutput<'BUS', 0>,
    model: ComfyNodeOutput<'MODEL', 1>,
    clip: ComfyNodeOutput<'CLIP', 2>,
    vae: ComfyNodeOutput<'VAE', 3>,
    positive: ComfyNodeOutput<'CONDITIONING', 4>,
    negative: ComfyNodeOutput<'CONDITIONING', 5>,
}
export interface Bus_Node_input {
    bus?: _BUS
    model?: _MODEL
    clip?: _CLIP
    vae?: _VAE
    positive?: _CONDITIONING
    negative?: _CONDITIONING
}

// Cache Node [WAS Suite_IO]
export interface Cache_Node extends ComfyNode<Cache_Node_input, Cache_Node_output> {
    nameInComfy: "Cache Node"
}
export interface Cache_Node_output {
    latent_filename: ComfyNodeOutput<'STRING', 0>,
    image_filename: ComfyNodeOutput<'STRING', 1>,
    conditioning_filename: ComfyNodeOutput<'STRING', 2>,
}
export interface Cache_Node_input {
    /** default='<redacted>' */
    latent_suffix?: _STRING
    /** default='<redacted>' */
    image_suffix?: _STRING
    /** default='<redacted>' */
    conditioning_suffix?: _STRING
    /** default='<redacted>' */
    output_path?: _STRING
    latent?: _LATENT
    image?: _IMAGE
    conditioning?: _CONDITIONING
}

// Checkpoint Loader [WAS Suite_Loaders_Advanced]
export interface Checkpoint_Loader extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_STRING, ComfyNode<Checkpoint_Loader_input, Checkpoint_Loader_output> {
    nameInComfy: "Checkpoint Loader"
}
export interface Checkpoint_Loader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    NAME_STRING: ComfyNodeOutput<'STRING', 3>,
}
export interface Checkpoint_Loader_input {
    config_name: Enum_CheckpointLoader_config_name
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
}

// Checkpoint Loader (Simple) [WAS Suite_Loaders]
export interface Checkpoint_Loader_$1Simple$2 extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_STRING, ComfyNode<Checkpoint_Loader_$1Simple$2_input, Checkpoint_Loader_$1Simple$2_output> {
    nameInComfy: "Checkpoint Loader (Simple)"
}
export interface Checkpoint_Loader_$1Simple$2_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    NAME_STRING: ComfyNodeOutput<'STRING', 3>,
}
export interface Checkpoint_Loader_$1Simple$2_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
}

// CLIPTextEncode (NSP) [WAS Suite_Conditioning]
export interface CLIPTextEncode_$1NSP$2 extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncode_$1NSP$2_input, CLIPTextEncode_$1NSP$2_output> {
    nameInComfy: "CLIPTextEncode (NSP)"
}
export interface CLIPTextEncode_$1NSP$2_output {
    conditioning: ComfyNodeOutput<'CONDITIONING', 0>,
    parsed_text: ComfyNodeOutput<'STRING', 1>,
    raw_text: ComfyNodeOutput<'STRING', 2>,
}
export interface CLIPTextEncode_$1NSP$2_input {
    mode: Enum_CLIPTextEncode_$1NSP$2_mode
    /** default="__" */
    noodle_key?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** */
    text: _STRING
    clip: _CLIP
}

// CLIP Input Switch [WAS Suite_Logic]
export interface CLIP_Input_Switch extends HasSingle_CLIP, ComfyNode<CLIP_Input_Switch_input, CLIP_Input_Switch_output> {
    nameInComfy: "CLIP Input Switch"
}
export interface CLIP_Input_Switch_output {
    CLIP: ComfyNodeOutput<'CLIP', 0>,
}
export interface CLIP_Input_Switch_input {
    clip_a: _CLIP
    clip_b: _CLIP
    /** */
    boolean: _BOOLEAN
}

// CLIP Vision Input Switch [WAS Suite_Logic]
export interface CLIP_Vision_Input_Switch extends HasSingle_CLIP_VISION, ComfyNode<CLIP_Vision_Input_Switch_input, CLIP_Vision_Input_Switch_output> {
    nameInComfy: "CLIP Vision Input Switch"
}
export interface CLIP_Vision_Input_Switch_output {
    CLIP_VISION: ComfyNodeOutput<'CLIP_VISION', 0>,
}
export interface CLIP_Vision_Input_Switch_input {
    clip_vision_a: _CLIP_VISION
    clip_vision_b: _CLIP_VISION
    /** */
    boolean: _BOOLEAN
}

// Conditioning Input Switch [WAS Suite_Logic]
export interface Conditioning_Input_Switch extends HasSingle_CONDITIONING, ComfyNode<Conditioning_Input_Switch_input, Conditioning_Input_Switch_output> {
    nameInComfy: "Conditioning Input Switch"
}
export interface Conditioning_Input_Switch_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface Conditioning_Input_Switch_input {
    conditioning_a: _CONDITIONING
    conditioning_b: _CONDITIONING
    /** */
    boolean: _BOOLEAN
}

// Constant Number [WAS Suite_Number]
export interface Constant_Number extends HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Constant_Number_input, Constant_Number_output> {
    nameInComfy: "Constant Number"
}
export interface Constant_Number_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
}
export interface Constant_Number_input {
    number_type: Enum_Constant_Number_number_type
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    number?: _FLOAT
    /** */
    number_as_text?: _STRING
}

// Create Grid Image [WAS Suite_Image_Process]
export interface Create_Grid_Image extends HasSingle_IMAGE, ComfyNode<Create_Grid_Image_input, Create_Grid_Image_output> {
    nameInComfy: "Create Grid Image"
}
export interface Create_Grid_Image_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Create_Grid_Image_input {
    /** default="./ComfyUI/input/" */
    images_path?: _STRING
    /** default="*" */
    pattern_glob?: _STRING
    include_subfolders: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=3 min=100 max=100 step=1 */
    border_width?: _INT
    /** default=6 min=24 max=24 step=1 */
    number_of_columns?: _INT
    /** default=256 min=1280 max=1280 step=1 */
    max_cell_size?: _INT
    /** default=0 min=255 max=255 step=1 */
    border_red?: _INT
    /** default=0 min=255 max=255 step=1 */
    border_green?: _INT
    /** default=0 min=255 max=255 step=1 */
    border_blue?: _INT
}

// Create Grid Image from Batch [WAS Suite_Image_Process]
export interface Create_Grid_Image_from_Batch extends HasSingle_IMAGE, ComfyNode<Create_Grid_Image_from_Batch_input, Create_Grid_Image_from_Batch_output> {
    nameInComfy: "Create Grid Image from Batch"
}
export interface Create_Grid_Image_from_Batch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Create_Grid_Image_from_Batch_input {
    images: _IMAGE
    /** default=3 min=100 max=100 step=1 */
    border_width?: _INT
    /** default=6 min=24 max=24 step=1 */
    number_of_columns?: _INT
    /** default=256 min=2048 max=2048 step=1 */
    max_cell_size?: _INT
    /** default=0 min=255 max=255 step=1 */
    border_red?: _INT
    /** default=0 min=255 max=255 step=1 */
    border_green?: _INT
    /** default=0 min=255 max=255 step=1 */
    border_blue?: _INT
}

// Create Morph Image [WAS Suite_Animation]
export interface Create_Morph_Image extends ComfyNode<Create_Morph_Image_input, Create_Morph_Image_output> {
    nameInComfy: "Create Morph Image"
}
export interface Create_Morph_Image_output {
    image_a_pass: ComfyNodeOutput<'IMAGE', 0>,
    image_b_pass: ComfyNodeOutput<'IMAGE', 1>,
    filepath_text: ComfyNodeOutput<'STRING', 2>,
    filename_text: ComfyNodeOutput<'STRING', 3>,
}
export interface Create_Morph_Image_input {
    image_a: _IMAGE
    image_b: _IMAGE
    /** default=30 min=60 max=60 step=1 */
    transition_frames?: _INT
    /** default=2500 min=60000 max=60000 step=0.1 */
    still_image_delay_ms?: _FLOAT
    /** default=0.1 min=60000 max=60000 step=0.1 */
    duration_ms?: _FLOAT
    /** default=0 min=100 max=100 step=1 */
    loops?: _INT
    /** default=512 min=1280 max=1280 step=1 */
    max_size?: _INT
    /** default="./ComfyUI/output" */
    output_path?: _STRING
    /** default="morph" */
    filename?: _STRING
    filetype: Enum_Create_Morph_Image_filetype
}

// Create Morph Image from Path [WAS Suite_Animation]
export interface Create_Morph_Image_from_Path extends ComfyNode<Create_Morph_Image_from_Path_input, Create_Morph_Image_from_Path_output> {
    nameInComfy: "Create Morph Image from Path"
}
export interface Create_Morph_Image_from_Path_output {
    filepath_text: ComfyNodeOutput<'STRING', 0>,
    filename_text: ComfyNodeOutput<'STRING', 1>,
}
export interface Create_Morph_Image_from_Path_input {
    /** default=30 min=60 max=60 step=1 */
    transition_frames?: _INT
    /** default=2500 min=60000 max=60000 step=0.1 */
    still_image_delay_ms?: _FLOAT
    /** default=0.1 min=60000 max=60000 step=0.1 */
    duration_ms?: _FLOAT
    /** default=0 min=100 max=100 step=1 */
    loops?: _INT
    /** default=512 min=1280 max=1280 step=1 */
    max_size?: _INT
    /** default="./ComfyUI" */
    input_path?: _STRING
    /** default="*" */
    input_pattern?: _STRING
    /** default="./ComfyUI/output" */
    output_path?: _STRING
    /** default="morph" */
    filename?: _STRING
    filetype: Enum_Create_Morph_Image_filetype
}

// Create Video from Path [WAS Suite_Animation]
export interface Create_Video_from_Path extends ComfyNode<Create_Video_from_Path_input, Create_Video_from_Path_output> {
    nameInComfy: "Create Video from Path"
}
export interface Create_Video_from_Path_output {
    filepath_text: ComfyNodeOutput<'STRING', 0>,
    filename_text: ComfyNodeOutput<'STRING', 1>,
}
export interface Create_Video_from_Path_input {
    /** default=30 min=120 max=120 step=1 */
    transition_frames?: _INT
    /** default=2.5 min=60000 max=60000 step=0.01 */
    image_delay_sec?: _FLOAT
    /** default=30 min=60 max=60 step=1 */
    fps?: _INT
    /** default=512 min=1920 max=1920 step=1 */
    max_size?: _INT
    /** default="./ComfyUI/input" */
    input_path?: _STRING
    /** default="./ComfyUI/output" */
    output_path?: _STRING
    /** default="comfy_video" */
    filename?: _STRING
    codec: Enum_Create_Video_from_Path_codec
}

// CLIPSeg Masking [WAS Suite_Image_Masking]
export interface CLIPSeg_Masking extends HasSingle_MASK, HasSingle_IMAGE, ComfyNode<CLIPSeg_Masking_input, CLIPSeg_Masking_output> {
    nameInComfy: "CLIPSeg Masking"
}
export interface CLIPSeg_Masking_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
    MASK_IMAGE: ComfyNodeOutput<'IMAGE', 1>,
}
export interface CLIPSeg_Masking_input {
    image: _IMAGE
    /** default="" */
    text?: _STRING
    clipseg_model?: _CLIPSEG_MODEL
}

// CLIPSeg Model Loader [WAS Suite_Loaders]
export interface CLIPSeg_Model_Loader extends HasSingle_CLIPSEG_MODEL, ComfyNode<CLIPSeg_Model_Loader_input, CLIPSeg_Model_Loader_output> {
    nameInComfy: "CLIPSeg Model Loader"
}
export interface CLIPSeg_Model_Loader_output {
    clipseg_model: ComfyNodeOutput<'CLIPSEG_MODEL', 0>,
}
export interface CLIPSeg_Model_Loader_input {
    /** default="CIDAS/clipseg-rd64-refined" */
    model?: _STRING
}

// CLIPSeg Batch Masking [WAS Suite_Image_Masking]
export interface CLIPSeg_Batch_Masking extends HasSingle_MASK, ComfyNode<CLIPSeg_Batch_Masking_input, CLIPSeg_Batch_Masking_output> {
    nameInComfy: "CLIPSeg Batch Masking"
}
export interface CLIPSeg_Batch_Masking_output {
    IMAGES_BATCH: ComfyNodeOutput<'IMAGE', 0>,
    MASKS_BATCH: ComfyNodeOutput<'MASK', 1>,
    MASK_IMAGES_BATCH: ComfyNodeOutput<'IMAGE', 2>,
}
export interface CLIPSeg_Batch_Masking_input {
    image_a: _IMAGE
    image_b: _IMAGE
    /** default="" */
    text_a?: _STRING
    /** default="" */
    text_b?: _STRING
    image_c?: _IMAGE
    image_d?: _IMAGE
    image_e?: _IMAGE
    image_f?: _IMAGE
    /** default="" */
    text_c?: _STRING
    /** default="" */
    text_d?: _STRING
    /** default="" */
    text_e?: _STRING
    /** default="" */
    text_f?: _STRING
}

// Convert Masks to Images [WAS Suite_Image_Masking]
export interface Convert_Masks_to_Images extends HasSingle_IMAGE, ComfyNode<Convert_Masks_to_Images_input, Convert_Masks_to_Images_output> {
    nameInComfy: "Convert Masks to Images"
}
export interface Convert_Masks_to_Images_output {
    IMAGES: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Convert_Masks_to_Images_input {
    masks: _MASK
}

// Control Net Model Input Switch [WAS Suite_Logic]
export interface Control_Net_Model_Input_Switch extends HasSingle_CONTROL_NET, ComfyNode<Control_Net_Model_Input_Switch_input, Control_Net_Model_Input_Switch_output> {
    nameInComfy: "Control Net Model Input Switch"
}
export interface Control_Net_Model_Input_Switch_output {
    CONTROL_NET: ComfyNodeOutput<'CONTROL_NET', 0>,
}
export interface Control_Net_Model_Input_Switch_input {
    control_net_a: _CONTROL_NET
    control_net_b: _CONTROL_NET
    /** */
    boolean: _BOOLEAN
}

// Debug Number to Console [WAS Suite_Debug]
export interface Debug_Number_to_Console extends HasSingle_NUMBER, ComfyNode<Debug_Number_to_Console_input, Debug_Number_to_Console_output> {
    nameInComfy: "Debug Number to Console"
}
export interface Debug_Number_to_Console_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
}
export interface Debug_Number_to_Console_input {
    number: _NUMBER
    /** default="Debug to Console" */
    label?: _STRING
}

// Dictionary to Console [WAS Suite_Debug]
export interface Dictionary_to_Console extends HasSingle_DICT, ComfyNode<Dictionary_to_Console_input, Dictionary_to_Console_output> {
    nameInComfy: "Dictionary to Console"
}
export interface Dictionary_to_Console_output {
    DICT: ComfyNodeOutput<'DICT', 0>,
}
export interface Dictionary_to_Console_input {
    dictionary: _DICT
    /** default="Dictionary Output" */
    label?: _STRING
}

// Diffusers Model Loader [WAS Suite_Loaders_Advanced]
export interface Diffusers_Model_Loader extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_STRING, ComfyNode<Diffusers_Model_Loader_input, Diffusers_Model_Loader_output> {
    nameInComfy: "Diffusers Model Loader"
}
export interface Diffusers_Model_Loader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    NAME_STRING: ComfyNodeOutput<'STRING', 3>,
}
export interface Diffusers_Model_Loader_input {
    model_path: Enum_DiffusersLoader_model_path
}

// Diffusers Hub Model Down-Loader [WAS Suite_Loaders_Advanced]
export interface Diffusers_Hub_Model_Down$7Loader extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_STRING, ComfyNode<Diffusers_Hub_Model_Down$7Loader_input, Diffusers_Hub_Model_Down$7Loader_output> {
    nameInComfy: "Diffusers Hub Model Down-Loader"
}
export interface Diffusers_Hub_Model_Down$7Loader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    NAME_STRING: ComfyNodeOutput<'STRING', 3>,
}
export interface Diffusers_Hub_Model_Down$7Loader_input {
    /** */
    repo_id: _STRING
    /** default="None" */
    revision?: _STRING
}

// Export API [WAS Suite_Debug]
export interface Export_API extends ComfyNode<Export_API_input, Export_API_output> {
    nameInComfy: "Export API"
}
export interface Export_API_output {
}
export interface Export_API_input {
    save_prompt_api: Enum_Export_API_save_prompt_api
    /** default="./ComfyUI/output/" */
    output_path?: _STRING
    /** default="ComfyUI_Prompt" */
    filename_prefix?: _STRING
    /** default="_" */
    filename_delimiter?: _STRING
    /** default=4 min=9 max=9 step=1 */
    filename_number_padding?: _INT
    /** default=false */
    parse_text_tokens?: _BOOLEAN
}

// Latent Input Switch [WAS Suite_Logic]
export interface Latent_Input_Switch extends HasSingle_LATENT, ComfyNode<Latent_Input_Switch_input, Latent_Input_Switch_output> {
    nameInComfy: "Latent Input Switch"
}
export interface Latent_Input_Switch_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface Latent_Input_Switch_input {
    latent_a: _LATENT
    latent_b: _LATENT
    /** */
    boolean: _BOOLEAN
}

// Load Cache [WAS Suite_IO]
export interface Load_Cache extends HasSingle_LATENT, HasSingle_IMAGE, HasSingle_CONDITIONING, ComfyNode<Load_Cache_input, Load_Cache_output> {
    nameInComfy: "Load Cache"
}
export interface Load_Cache_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    IMAGE: ComfyNodeOutput<'IMAGE', 1>,
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 2>,
}
export interface Load_Cache_input {
    /** default="" */
    latent_path?: _STRING
    /** default="" */
    image_path?: _STRING
    /** default="" */
    conditioning_path?: _STRING
}

// Logic Boolean [WAS Suite_Logic]
export interface Logic_Boolean extends HasSingle_BOOLEAN, HasSingle_NUMBER, HasSingle_INT, HasSingle_FLOAT, ComfyNode<Logic_Boolean_input, Logic_Boolean_output> {
    nameInComfy: "Logic Boolean"
}
export interface Logic_Boolean_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
    NUMBER: ComfyNodeOutput<'NUMBER', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
    FLOAT: ComfyNodeOutput<'FLOAT', 3>,
}
export interface Logic_Boolean_input {
    /** default=1 min=1 max=1 step=0.01 */
    boolean?: _FLOAT
}

// Logic Boolean Primitive [WAS Suite_Logic]
export interface Logic_Boolean_Primitive extends HasSingle_BOOLEAN, ComfyNode<Logic_Boolean_Primitive_input, Logic_Boolean_Primitive_output> {
    nameInComfy: "Logic Boolean Primitive"
}
export interface Logic_Boolean_Primitive_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface Logic_Boolean_Primitive_input {
    /** default=false */
    boolean?: _BOOLEAN
}

// Logic Comparison OR [WAS Suite_Logic]
export interface Logic_Comparison_OR extends HasSingle_BOOLEAN, ComfyNode<Logic_Comparison_OR_input, Logic_Comparison_OR_output> {
    nameInComfy: "Logic Comparison OR"
}
export interface Logic_Comparison_OR_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface Logic_Comparison_OR_input {
    /** default=false */
    boolean_a?: _BOOLEAN
    /** default=false */
    boolean_b?: _BOOLEAN
}

// Logic Comparison AND [WAS Suite_Logic]
export interface Logic_Comparison_AND extends HasSingle_BOOLEAN, ComfyNode<Logic_Comparison_AND_input, Logic_Comparison_AND_output> {
    nameInComfy: "Logic Comparison AND"
}
export interface Logic_Comparison_AND_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface Logic_Comparison_AND_input {
    /** default=false */
    boolean_a?: _BOOLEAN
    /** default=false */
    boolean_b?: _BOOLEAN
}

// Logic Comparison XOR [WAS Suite_Logic]
export interface Logic_Comparison_XOR extends HasSingle_BOOLEAN, ComfyNode<Logic_Comparison_XOR_input, Logic_Comparison_XOR_output> {
    nameInComfy: "Logic Comparison XOR"
}
export interface Logic_Comparison_XOR_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface Logic_Comparison_XOR_input {
    /** default=false */
    boolean_a?: _BOOLEAN
    /** default=false */
    boolean_b?: _BOOLEAN
}

// Logic NOT [WAS Suite_Logic]
export interface Logic_NOT extends HasSingle_BOOLEAN, ComfyNode<Logic_NOT_input, Logic_NOT_output> {
    nameInComfy: "Logic NOT"
}
export interface Logic_NOT_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface Logic_NOT_input {
    /** default=false */
    boolean?: _BOOLEAN
}

// Lora Loader [WAS Suite_Loaders]
export interface Lora_Loader extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<Lora_Loader_input, Lora_Loader_output> {
    nameInComfy: "Lora Loader"
}
export interface Lora_Loader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    NAME_STRING: ComfyNodeOutput<'STRING', 2>,
}
export interface Lora_Loader_input {
    model: _MODEL
    clip: _CLIP
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength_clip?: _FLOAT
}

// Hex to HSL [WAS Suite_Utilities]
export interface Hex_to_HSL extends HasSingle_FLOAT, HasSingle_STRING, ComfyNode<Hex_to_HSL_input, Hex_to_HSL_output> {
    nameInComfy: "Hex to HSL"
}
export interface Hex_to_HSL_output {
    hue: ComfyNodeOutput<'INT', 0>,
    saturation: ComfyNodeOutput<'INT', 1>,
    lightness: ComfyNodeOutput<'INT', 2>,
    alpha: ComfyNodeOutput<'FLOAT', 3>,
    hsl: ComfyNodeOutput<'STRING', 4>,
}
export interface Hex_to_HSL_input {
    /** default="#FF0000" */
    hex_color?: _STRING
    /** default=false */
    include_alpha?: _BOOLEAN
}

// HSL to Hex [WAS Suite_Utilities]
export interface HSL_to_Hex extends HasSingle_STRING, ComfyNode<HSL_to_Hex_input, HSL_to_Hex_output> {
    nameInComfy: "HSL to Hex"
}
export interface HSL_to_Hex_output {
    hex_color: ComfyNodeOutput<'STRING', 0>,
}
export interface HSL_to_Hex_input {
    /** default="hsl(0, 100%, 50%)" */
    hsl_color?: _STRING
}

// Image SSAO (Ambient Occlusion) [WAS Suite_Image_Filter]
export interface Image_SSAO_$1Ambient_Occlusion$2 extends ComfyNode<Image_SSAO_$1Ambient_Occlusion$2_input, Image_SSAO_$1Ambient_Occlusion$2_output> {
    nameInComfy: "Image SSAO (Ambient Occlusion)"
}
export interface Image_SSAO_$1Ambient_Occlusion$2_output {
    composited_images: ComfyNodeOutput<'IMAGE', 0>,
    ssao_images: ComfyNodeOutput<'IMAGE', 1>,
    specular_mask_images: ComfyNodeOutput<'IMAGE', 2>,
}
export interface Image_SSAO_$1Ambient_Occlusion$2_input {
    images: _IMAGE
    depth_images: _IMAGE
    /** default=1 min=5 max=5 step=0.01 */
    strength?: _FLOAT
    /** default=30 min=1024 max=1024 step=0.01 */
    radius?: _FLOAT
    /** default=2.5 min=1024 max=1024 step=0.01 */
    ao_blur?: _FLOAT
    /** default=25 min=255 max=255 step=1 */
    specular_threshold?: _INT
    enable_specular_masking: Enum_ttN_xyPlot_output_individuals
    /** default=1 min=512 max=512 step=1 */
    tile_size?: _INT
}

// Image SSDO (Direct Occlusion) [WAS Suite_Image_Filter]
export interface Image_SSDO_$1Direct_Occlusion$2 extends ComfyNode<Image_SSDO_$1Direct_Occlusion$2_input, Image_SSDO_$1Direct_Occlusion$2_output> {
    nameInComfy: "Image SSDO (Direct Occlusion)"
}
export interface Image_SSDO_$1Direct_Occlusion$2_output {
    composited_images: ComfyNodeOutput<'IMAGE', 0>,
    ssdo_images: ComfyNodeOutput<'IMAGE', 1>,
    ssdo_image_masks: ComfyNodeOutput<'IMAGE', 2>,
    light_source_image_masks: ComfyNodeOutput<'IMAGE', 3>,
}
export interface Image_SSDO_$1Direct_Occlusion$2_input {
    images: _IMAGE
    depth_images: _IMAGE
    /** default=1 min=5 max=5 step=0.01 */
    strength?: _FLOAT
    /** default=30 min=1024 max=1024 step=0.01 */
    radius?: _FLOAT
    /** default=128 min=255 max=255 step=1 */
    specular_threshold?: _INT
    colored_occlusion: Enum_ttN_xyPlot_output_individuals
}

// Image Analyze [WAS Suite_Image_Analyze]
export interface Image_Analyze extends HasSingle_IMAGE, ComfyNode<Image_Analyze_input, Image_Analyze_output> {
    nameInComfy: "Image Analyze"
}
export interface Image_Analyze_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Analyze_input {
    image: _IMAGE
    mode: Enum_Image_Analyze_mode
}

// Image Aspect Ratio [WAS Suite_Logic]
export interface Image_Aspect_Ratio extends HasSingle_FLOAT, ComfyNode<Image_Aspect_Ratio_input, Image_Aspect_Ratio_output> {
    nameInComfy: "Image Aspect Ratio"
}
export interface Image_Aspect_Ratio_output {
    aspect_number: ComfyNodeOutput<'NUMBER', 0>,
    aspect_float: ComfyNodeOutput<'FLOAT', 1>,
    is_landscape_bool: ComfyNodeOutput<'NUMBER', 2>,
    aspect_ratio_common: ComfyNodeOutput<'STRING', 3>,
    aspect_type: ComfyNodeOutput<'STRING', 4>,
}
export interface Image_Aspect_Ratio_input {
    image?: _IMAGE
    width?: _NUMBER
    height?: _NUMBER
}

// Image Batch [WAS Suite_Image]
export interface Image_Batch extends HasSingle_IMAGE, ComfyNode<Image_Batch_input, Image_Batch_output> {
    nameInComfy: "Image Batch"
}
export interface Image_Batch_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Batch_input {
    images_a?: _IMAGE
    images_b?: _IMAGE
    images_c?: _IMAGE
    images_d?: _IMAGE
}

// Image Blank [WAS Suite_Image]
export interface Image_Blank extends HasSingle_IMAGE, ComfyNode<Image_Blank_input, Image_Blank_output> {
    nameInComfy: "Image Blank"
}
export interface Image_Blank_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Blank_input {
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=255 min=255 max=255 step=1 */
    red?: _INT
    /** default=255 min=255 max=255 step=1 */
    green?: _INT
    /** default=255 min=255 max=255 step=1 */
    blue?: _INT
}

// Image Blend by Mask [WAS Suite_Image]
export interface Image_Blend_by_Mask extends HasSingle_IMAGE, ComfyNode<Image_Blend_by_Mask_input, Image_Blend_by_Mask_output> {
    nameInComfy: "Image Blend by Mask"
}
export interface Image_Blend_by_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Blend_by_Mask_input {
    image_a: _IMAGE
    image_b: _IMAGE
    mask: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    blend_percentage?: _FLOAT
}

// Image Blend [WAS Suite_Image]
export interface Image_Blend extends HasSingle_IMAGE, ComfyNode<Image_Blend_input, Image_Blend_output> {
    nameInComfy: "Image Blend"
}
export interface Image_Blend_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Blend_input {
    image_a: _IMAGE
    image_b: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    blend_percentage?: _FLOAT
}

// Image Blending Mode [WAS Suite_Image]
export interface Image_Blending_Mode extends HasSingle_IMAGE, ComfyNode<Image_Blending_Mode_input, Image_Blending_Mode_output> {
    nameInComfy: "Image Blending Mode"
}
export interface Image_Blending_Mode_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Blending_Mode_input {
    image_a: _IMAGE
    image_b: _IMAGE
    mode: Enum_Image_Blending_Mode_mode
    /** default=1 min=1 max=1 step=0.01 */
    blend_percentage?: _FLOAT
}

// Image Bloom Filter [WAS Suite_Image_Filter]
export interface Image_Bloom_Filter extends HasSingle_IMAGE, ComfyNode<Image_Bloom_Filter_input, Image_Bloom_Filter_output> {
    nameInComfy: "Image Bloom Filter"
}
export interface Image_Bloom_Filter_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Bloom_Filter_input {
    image: _IMAGE
    /** default=10 min=1024 max=1024 step=0.1 */
    radius?: _FLOAT
    /** default=1 min=1 max=1 step=0.1 */
    intensity?: _FLOAT
}

// Image Canny Filter [WAS Suite_Image_Filter]
export interface Image_Canny_Filter extends HasSingle_IMAGE, ComfyNode<Image_Canny_Filter_input, Image_Canny_Filter_output> {
    nameInComfy: "Image Canny Filter"
}
export interface Image_Canny_Filter_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Canny_Filter_input {
    images: _IMAGE
    enable_threshold: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=0 min=1 max=1 step=0.01 */
    threshold_low?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    threshold_high?: _FLOAT
}

// Image Chromatic Aberration [WAS Suite_Image_Filter]
export interface Image_Chromatic_Aberration extends HasSingle_IMAGE, ComfyNode<Image_Chromatic_Aberration_input, Image_Chromatic_Aberration_output> {
    nameInComfy: "Image Chromatic Aberration"
}
export interface Image_Chromatic_Aberration_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Chromatic_Aberration_input {
    image: _IMAGE
    /** default=2 min=255 max=255 step=1 */
    red_offset?: _INT
    /** default=-1 min=255 max=255 step=1 */
    green_offset?: _INT
    /** default=1 min=255 max=255 step=1 */
    blue_offset?: _INT
    /** default=0.5 min=1 max=1 step=0.01 */
    intensity?: _FLOAT
    /** default=12 min=1024 max=1024 step=1 */
    fade_radius?: _INT
}

// Image Color Palette [WAS Suite_Image_Analyze]
export interface Image_Color_Palette extends HasSingle_IMAGE, HasSingle_LIST, ComfyNode<Image_Color_Palette_input, Image_Color_Palette_output> {
    nameInComfy: "Image Color Palette"
}
export interface Image_Color_Palette_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    color_palettes: ComfyNodeOutput<'LIST', 1>,
}
export interface Image_Color_Palette_input {
    image: _IMAGE
    /** default=16 min=256 max=256 step=1 */
    colors?: _INT
    mode: Enum_Image_Color_Palette_mode
}

// Image Crop Face [WAS Suite_Image_Process]
export interface Image_Crop_Face extends HasSingle_IMAGE, HasSingle_CROP_DATA, ComfyNode<Image_Crop_Face_input, Image_Crop_Face_output> {
    nameInComfy: "Image Crop Face"
}
export interface Image_Crop_Face_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    CROP_DATA: ComfyNodeOutput<'CROP_DATA', 1>,
}
export interface Image_Crop_Face_input {
    image: _IMAGE
    /** default=0.25 min=2 max=2 step=0.01 */
    crop_padding_factor?: _FLOAT
    cascade_xml: Enum_Image_Crop_Face_cascade_xml
}

// Image Crop Location [WAS Suite_Image_Process]
export interface Image_Crop_Location extends HasSingle_IMAGE, HasSingle_CROP_DATA, ComfyNode<Image_Crop_Location_input, Image_Crop_Location_output> {
    nameInComfy: "Image Crop Location"
}
export interface Image_Crop_Location_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    CROP_DATA: ComfyNodeOutput<'CROP_DATA', 1>,
}
export interface Image_Crop_Location_input {
    image: _IMAGE
    /** default=0 min=10000000 max=10000000 step=1 */
    top?: _INT
    /** default=0 min=10000000 max=10000000 step=1 */
    left?: _INT
    /** default=256 min=10000000 max=10000000 step=1 */
    right?: _INT
    /** default=256 min=10000000 max=10000000 step=1 */
    bottom?: _INT
}

// Image Crop Square Location [WAS Suite_Image_Process]
export interface Image_Crop_Square_Location extends HasSingle_IMAGE, HasSingle_CROP_DATA, ComfyNode<Image_Crop_Square_Location_input, Image_Crop_Square_Location_output> {
    nameInComfy: "Image Crop Square Location"
}
export interface Image_Crop_Square_Location_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    CROP_DATA: ComfyNodeOutput<'CROP_DATA', 1>,
}
export interface Image_Crop_Square_Location_input {
    image: _IMAGE
    /** default=0 min=24576 max=24576 step=1 */
    x?: _INT
    /** default=0 min=24576 max=24576 step=1 */
    y?: _INT
    /** default=256 min=4096 max=4096 step=1 */
    size?: _INT
}

// Image Displacement Warp [WAS Suite_Image_Transform]
export interface Image_Displacement_Warp extends HasSingle_IMAGE, ComfyNode<Image_Displacement_Warp_input, Image_Displacement_Warp_output> {
    nameInComfy: "Image Displacement Warp"
}
export interface Image_Displacement_Warp_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Displacement_Warp_input {
    images: _IMAGE
    displacement_maps: _IMAGE
    /** default=25 min=4096 max=4096 step=0.1 */
    amplitude?: _FLOAT
}

// Image Lucy Sharpen [WAS Suite_Image_Filter]
export interface Image_Lucy_Sharpen extends HasSingle_IMAGE, ComfyNode<Image_Lucy_Sharpen_input, Image_Lucy_Sharpen_output> {
    nameInComfy: "Image Lucy Sharpen"
}
export interface Image_Lucy_Sharpen_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Lucy_Sharpen_input {
    images: _IMAGE
    /** default=2 min=12 max=12 step=1 */
    iterations?: _INT
    /** default=3 min=16 max=16 step=1 */
    kernel_size?: _INT
}

// Image Paste Face [WAS Suite_Image_Process]
export interface Image_Paste_Face extends ComfyNode<Image_Paste_Face_input, Image_Paste_Face_output> {
    nameInComfy: "Image Paste Face"
}
export interface Image_Paste_Face_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK_IMAGE: ComfyNodeOutput<'IMAGE', 1>,
}
export interface Image_Paste_Face_input {
    image: _IMAGE
    crop_image: _IMAGE
    crop_data: _CROP_DATA
    /** default=0.25 min=1 max=1 step=0.01 */
    crop_blending?: _FLOAT
    /** default=0 min=3 max=3 step=1 */
    crop_sharpening?: _INT
}

// Image Paste Crop [WAS Suite_Image_Process]
export interface Image_Paste_Crop extends ComfyNode<Image_Paste_Crop_input, Image_Paste_Crop_output> {
    nameInComfy: "Image Paste Crop"
}
export interface Image_Paste_Crop_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'IMAGE', 1>,
}
export interface Image_Paste_Crop_input {
    image: _IMAGE
    crop_image: _IMAGE
    crop_data: _CROP_DATA
    /** default=0.25 min=1 max=1 step=0.01 */
    crop_blending?: _FLOAT
    /** default=0 min=3 max=3 step=1 */
    crop_sharpening?: _INT
}

// Image Paste Crop by Location [WAS Suite_Image_Process]
export interface Image_Paste_Crop_by_Location extends ComfyNode<Image_Paste_Crop_by_Location_input, Image_Paste_Crop_by_Location_output> {
    nameInComfy: "Image Paste Crop by Location"
}
export interface Image_Paste_Crop_by_Location_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'IMAGE', 1>,
}
export interface Image_Paste_Crop_by_Location_input {
    image: _IMAGE
    crop_image: _IMAGE
    /** default=0 min=10000000 max=10000000 step=1 */
    top?: _INT
    /** default=0 min=10000000 max=10000000 step=1 */
    left?: _INT
    /** default=256 min=10000000 max=10000000 step=1 */
    right?: _INT
    /** default=256 min=10000000 max=10000000 step=1 */
    bottom?: _INT
    /** default=0.25 min=1 max=1 step=0.01 */
    crop_blending?: _FLOAT
    /** default=0 min=3 max=3 step=1 */
    crop_sharpening?: _INT
}

// Image Pixelate [WAS Suite_Image_Process]
export interface Image_Pixelate extends HasSingle_IMAGE, ComfyNode<Image_Pixelate_input, Image_Pixelate_output> {
    nameInComfy: "Image Pixelate"
}
export interface Image_Pixelate_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Pixelate_input {
    images: _IMAGE
    /** default=164 min=480 max=480 step=1 */
    pixelation_size?: _FLOAT
    /** default=16 min=256 max=256 step=1 */
    num_colors?: _FLOAT
    init_mode: Enum_Image_Pixelate_init_mode
    /** default=100 min=256 max=256 step=1 */
    max_iterations?: _FLOAT
    dither: Enum_ttN_xyPlot_output_individuals
    dither_mode: Enum_Image_Pixelate_dither_mode
    /** */
    color_palettes?: _LIST
    color_palette_mode?: Enum_Image_Pixelate_color_palette_mode
    reverse_palette?: Enum_ttN_xyPlot_output_individuals
}

// Image Power Noise [WAS Suite_Image_Generate_Noise]
export interface Image_Power_Noise extends HasSingle_IMAGE, ComfyNode<Image_Power_Noise_input, Image_Power_Noise_output> {
    nameInComfy: "Image Power Noise"
}
export interface Image_Power_Noise_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Power_Noise_input {
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=0.5 min=10 max=10 step=0.01 */
    frequency?: _FLOAT
    /** default=0.5 min=10 max=10 step=0.01 */
    attenuation?: _FLOAT
    noise_type: Enum_Image_Power_Noise_noise_type
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Image Dragan Photography Filter [WAS Suite_Image_Filter]
export interface Image_Dragan_Photography_Filter extends HasSingle_IMAGE, ComfyNode<Image_Dragan_Photography_Filter_input, Image_Dragan_Photography_Filter_output> {
    nameInComfy: "Image Dragan Photography Filter"
}
export interface Image_Dragan_Photography_Filter_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Dragan_Photography_Filter_input {
    image: _IMAGE
    /** default=1 min=16 max=16 step=0.01 */
    saturation?: _FLOAT
    /** default=1 min=16 max=16 step=0.01 */
    contrast?: _FLOAT
    /** default=1 min=16 max=16 step=0.01 */
    brightness?: _FLOAT
    /** default=1 min=6 max=6 step=0.01 */
    sharpness?: _FLOAT
    /** default=6 min=255 max=255 step=0.01 */
    highpass_radius?: _FLOAT
    /** default=1 min=6 max=6 step=1 */
    highpass_samples?: _INT
    /** default=1 min=3 max=3 step=0.01 */
    highpass_strength?: _FLOAT
    colorize: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Image Edge Detection Filter [WAS Suite_Image_Filter]
export interface Image_Edge_Detection_Filter extends HasSingle_IMAGE, ComfyNode<Image_Edge_Detection_Filter_input, Image_Edge_Detection_Filter_output> {
    nameInComfy: "Image Edge Detection Filter"
}
export interface Image_Edge_Detection_Filter_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Edge_Detection_Filter_input {
    image: _IMAGE
    mode: Enum_Image_Edge_Detection_Filter_mode
}

// Image Film Grain [WAS Suite_Image_Filter]
export interface Image_Film_Grain extends HasSingle_IMAGE, ComfyNode<Image_Film_Grain_input, Image_Film_Grain_output> {
    nameInComfy: "Image Film Grain"
}
export interface Image_Film_Grain_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Film_Grain_input {
    image: _IMAGE
    /** default=1 min=1 max=1 step=0.01 */
    density?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    intensity?: _FLOAT
    /** default=1 min=255 max=255 step=0.01 */
    highlights?: _FLOAT
    /** default=4 min=8 max=8 step=1 */
    supersample_factor?: _INT
}

// Image Filter Adjustments [WAS Suite_Image_Filter]
export interface Image_Filter_Adjustments extends HasSingle_IMAGE, ComfyNode<Image_Filter_Adjustments_input, Image_Filter_Adjustments_output> {
    nameInComfy: "Image Filter Adjustments"
}
export interface Image_Filter_Adjustments_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Filter_Adjustments_input {
    image: _IMAGE
    /** default=0 min=1 max=1 step=0.01 */
    brightness?: _FLOAT
    /** default=1 min=2 max=2 step=0.01 */
    contrast?: _FLOAT
    /** default=1 min=5 max=5 step=0.01 */
    saturation?: _FLOAT
    /** default=1 min=5 max=5 step=0.01 */
    sharpness?: _FLOAT
    /** default=0 min=16 max=16 step=1 */
    blur?: _INT
    /** default=0 min=1024 max=1024 step=0.1 */
    gaussian_blur?: _FLOAT
    /** default=0 min=1 max=1 step=0.01 */
    edge_enhance?: _FLOAT
    detail_enhance: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Image Flip [WAS Suite_Image_Transform]
export interface Image_Flip extends HasSingle_IMAGE, ComfyNode<Image_Flip_input, Image_Flip_output> {
    nameInComfy: "Image Flip"
}
export interface Image_Flip_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Flip_input {
    images: _IMAGE
    mode: Enum_CR_Style_Bars_orientation
}

// Image Gradient Map [WAS Suite_Image_Filter]
export interface Image_Gradient_Map extends HasSingle_IMAGE, ComfyNode<Image_Gradient_Map_input, Image_Gradient_Map_output> {
    nameInComfy: "Image Gradient Map"
}
export interface Image_Gradient_Map_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Gradient_Map_input {
    image: _IMAGE
    gradient_image: _IMAGE
    flip_left_right: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Image Generate Gradient [WAS Suite_Image_Generate]
export interface Image_Generate_Gradient extends HasSingle_IMAGE, ComfyNode<Image_Generate_Gradient_input, Image_Generate_Gradient_output> {
    nameInComfy: "Image Generate Gradient"
}
export interface Image_Generate_Gradient_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Generate_Gradient_input {
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    direction: Enum_CR_Style_Bars_orientation
    /** default=0 min=255 max=255 step=1 */
    tolerance?: _INT
    /** default="0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255" */
    gradient_stops?: _STRING
}

// Image High Pass Filter [WAS Suite_Image_Filter]
export interface Image_High_Pass_Filter extends HasSingle_IMAGE, ComfyNode<Image_High_Pass_Filter_input, Image_High_Pass_Filter_output> {
    nameInComfy: "Image High Pass Filter"
}
export interface Image_High_Pass_Filter_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_High_Pass_Filter_input {
    images: _IMAGE
    /** default=10 min=500 max=500 step=1 */
    radius?: _INT
    /** default=1.5 min=255 max=255 step=0.1 */
    strength?: _FLOAT
    color_output: Enum_ImageDrawRectangleRounded_top_left_corner
    neutral_background: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Image History Loader [WAS Suite_History]
export interface Image_History_Loader extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<Image_History_Loader_input, Image_History_Loader_output> {
    nameInComfy: "Image History Loader"
}
export interface Image_History_Loader_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    filename_text: ComfyNodeOutput<'STRING', 1>,
}
export interface Image_History_Loader_input {
    image: Enum_Image_History_Loader_image
}

// Image Input Switch [WAS Suite_Logic]
export interface Image_Input_Switch extends HasSingle_IMAGE, ComfyNode<Image_Input_Switch_input, Image_Input_Switch_output> {
    nameInComfy: "Image Input Switch"
}
export interface Image_Input_Switch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Input_Switch_input {
    image_a: _IMAGE
    image_b: _IMAGE
    /** */
    boolean: _BOOLEAN
}

// Image Levels Adjustment [WAS Suite_Image_Adjustment]
export interface Image_Levels_Adjustment extends HasSingle_IMAGE, ComfyNode<Image_Levels_Adjustment_input, Image_Levels_Adjustment_output> {
    nameInComfy: "Image Levels Adjustment"
}
export interface Image_Levels_Adjustment_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Levels_Adjustment_input {
    image: _IMAGE
    /** default=0 min=255 max=255 step=0.1 */
    black_level?: _FLOAT
    /** default=127.5 min=255 max=255 step=0.1 */
    mid_level?: _FLOAT
    /** default=255 min=255 max=255 step=0.1 */
    white_level?: _FLOAT
}

// Image Load [WAS Suite_IO]
export interface Image_Load extends HasSingle_IMAGE, HasSingle_MASK, HasSingle_STRING, ComfyNode<Image_Load_input, Image_Load_output> {
    nameInComfy: "Image Load"
}
export interface Image_Load_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    mask: ComfyNodeOutput<'MASK', 1>,
    filename_text: ComfyNodeOutput<'STRING', 2>,
}
export interface Image_Load_input {
    /** default="./ComfyUI/input/example.png" */
    image_path?: _STRING
    RGBA: Enum_ImageDrawRectangleRounded_top_left_corner
    filename_text_extension?: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Image Median Filter [WAS Suite_Image_Filter]
export interface Image_Median_Filter extends HasSingle_IMAGE, ComfyNode<Image_Median_Filter_input, Image_Median_Filter_output> {
    nameInComfy: "Image Median Filter"
}
export interface Image_Median_Filter_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Median_Filter_input {
    image: _IMAGE
    /** default=2 min=255 max=255 step=1 */
    diameter?: _INT
    /** default=10 min=255 max=255 step=0.1 */
    sigma_color?: _FLOAT
    /** default=10 min=255 max=255 step=0.1 */
    sigma_space?: _FLOAT
}

// Image Mix RGB Channels [WAS Suite_Image_Process]
export interface Image_Mix_RGB_Channels extends HasSingle_IMAGE, ComfyNode<Image_Mix_RGB_Channels_input, Image_Mix_RGB_Channels_output> {
    nameInComfy: "Image Mix RGB Channels"
}
export interface Image_Mix_RGB_Channels_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Mix_RGB_Channels_input {
    red_channel: _IMAGE
    green_channel: _IMAGE
    blue_channel: _IMAGE
}

// Image Monitor Effects Filter [WAS Suite_Image_Filter]
export interface Image_Monitor_Effects_Filter extends HasSingle_IMAGE, ComfyNode<Image_Monitor_Effects_Filter_input, Image_Monitor_Effects_Filter_output> {
    nameInComfy: "Image Monitor Effects Filter"
}
export interface Image_Monitor_Effects_Filter_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Monitor_Effects_Filter_input {
    image: _IMAGE
    mode: Enum_Image_Monitor_Effects_Filter_mode
    /** default=5 min=255 max=255 step=1 */
    amplitude?: _INT
    /** default=10 min=255 max=255 step=1 */
    offset?: _INT
}

// Image Nova Filter [WAS Suite_Image_Filter]
export interface Image_Nova_Filter extends HasSingle_IMAGE, ComfyNode<Image_Nova_Filter_input, Image_Nova_Filter_output> {
    nameInComfy: "Image Nova Filter"
}
export interface Image_Nova_Filter_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Nova_Filter_input {
    image: _IMAGE
    /** default=0.1 min=1 max=1 step=0.001 */
    amplitude?: _FLOAT
    /** default=3.14 min=100 max=100 step=0.001 */
    frequency?: _FLOAT
}

// Image Padding [WAS Suite_Image_Transform]
export interface Image_Padding extends ComfyNode<Image_Padding_input, Image_Padding_output> {
    nameInComfy: "Image Padding"
}
export interface Image_Padding_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'IMAGE', 1>,
}
export interface Image_Padding_input {
    image: _IMAGE
    /** default=120 min=2048 max=2048 step=1 */
    feathering?: _INT
    feather_second_pass: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=512 min=48000 max=48000 step=1 */
    left_padding?: _INT
    /** default=512 min=48000 max=48000 step=1 */
    right_padding?: _INT
    /** default=512 min=48000 max=48000 step=1 */
    top_padding?: _INT
    /** default=512 min=48000 max=48000 step=1 */
    bottom_padding?: _INT
}

// Image Perlin Noise [WAS Suite_Image_Generate_Noise]
export interface Image_Perlin_Noise extends HasSingle_IMAGE, ComfyNode<Image_Perlin_Noise_input, Image_Perlin_Noise_output> {
    nameInComfy: "Image Perlin Noise"
}
export interface Image_Perlin_Noise_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Perlin_Noise_input {
    /** default=512 min=2048 max=2048 step=1 */
    width?: _INT
    /** default=512 min=2048 max=2048 step=1 */
    height?: _INT
    /** default=100 min=2048 max=2048 step=1 */
    scale?: _INT
    /** default=4 min=8 max=8 step=1 */
    octaves?: _INT
    /** default=0.5 min=100 max=100 step=0.01 */
    persistence?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Image Rembg (Remove Background) [WAS Suite_Image_AI]
export interface Image_Rembg_$1Remove_Background$2 extends HasSingle_IMAGE, ComfyNode<Image_Rembg_$1Remove_Background$2_input, Image_Rembg_$1Remove_Background$2_output> {
    nameInComfy: "Image Rembg (Remove Background)"
}
export interface Image_Rembg_$1Remove_Background$2_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Rembg_$1Remove_Background$2_input {
    images: _IMAGE
    /** default=true */
    transparency?: _BOOLEAN
    model: Enum_RembgNode$_Mix_model_name
    /** default=false */
    post_processing?: _BOOLEAN
    /** default=false */
    only_mask?: _BOOLEAN
    /** default=false */
    alpha_matting?: _BOOLEAN
    /** default=240 min=255 max=255 */
    alpha_matting_foreground_threshold?: _INT
    /** default=10 min=255 max=255 */
    alpha_matting_background_threshold?: _INT
    /** default=10 min=255 max=255 */
    alpha_matting_erode_size?: _INT
    background_color: Enum_Image_Rembg_$1Remove_Background$2_background_color
}

// Image Perlin Power Fractal [WAS Suite_Image_Generate_Noise]
export interface Image_Perlin_Power_Fractal extends HasSingle_IMAGE, ComfyNode<Image_Perlin_Power_Fractal_input, Image_Perlin_Power_Fractal_output> {
    nameInComfy: "Image Perlin Power Fractal"
}
export interface Image_Perlin_Power_Fractal_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Perlin_Power_Fractal_input {
    /** default=512 min=8192 max=8192 step=1 */
    width?: _INT
    /** default=512 min=8192 max=8192 step=1 */
    height?: _INT
    /** default=100 min=2048 max=2048 step=1 */
    scale?: _INT
    /** default=4 min=8 max=8 step=1 */
    octaves?: _INT
    /** default=0.5 min=100 max=100 step=0.01 */
    persistence?: _FLOAT
    /** default=2 min=100 max=100 step=0.01 */
    lacunarity?: _FLOAT
    /** default=2 min=100 max=100 step=0.01 */
    exponent?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Image Remove Background (Alpha) [WAS Suite_Image_Process]
export interface Image_Remove_Background_$1Alpha$2 extends HasSingle_IMAGE, ComfyNode<Image_Remove_Background_$1Alpha$2_input, Image_Remove_Background_$1Alpha$2_output> {
    nameInComfy: "Image Remove Background (Alpha)"
}
export interface Image_Remove_Background_$1Alpha$2_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Remove_Background_$1Alpha$2_input {
    images: _IMAGE
    mode: Enum_Image_Remove_Background_$1Alpha$2_mode
    /** default=127 min=255 max=255 step=1 */
    threshold?: _INT
    /** default=2 min=24 max=24 step=1 */
    threshold_tolerance?: _INT
}

// Image Remove Color [WAS Suite_Image_Process]
export interface Image_Remove_Color extends HasSingle_IMAGE, ComfyNode<Image_Remove_Color_input, Image_Remove_Color_output> {
    nameInComfy: "Image Remove Color"
}
export interface Image_Remove_Color_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Remove_Color_input {
    image: _IMAGE
    /** default=255 min=255 max=255 step=1 */
    target_red?: _INT
    /** default=255 min=255 max=255 step=1 */
    target_green?: _INT
    /** default=255 min=255 max=255 step=1 */
    target_blue?: _INT
    /** default=255 min=255 max=255 step=1 */
    replace_red?: _INT
    /** default=255 min=255 max=255 step=1 */
    replace_green?: _INT
    /** default=255 min=255 max=255 step=1 */
    replace_blue?: _INT
    /** default=10 min=255 max=255 step=1 */
    clip_threshold?: _INT
}

// Image Resize [WAS Suite_Image_Transform]
export interface Image_Resize extends HasSingle_IMAGE, ComfyNode<Image_Resize_input, Image_Resize_output> {
    nameInComfy: "Image Resize"
}
export interface Image_Resize_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Resize_input {
    image: _IMAGE
    mode: Enum_CR_Upscale_Image_mode
    supersample: Enum_ImageDrawRectangleRounded_top_left_corner
    resampling: Enum_SEGSUpscaler_resampling_method
    /** default=2 min=16 max=16 step=0.01 */
    rescale_factor?: _FLOAT
    /** default=1024 min=48000 max=48000 step=1 */
    resize_width?: _INT
    /** default=1536 min=48000 max=48000 step=1 */
    resize_height?: _INT
}

// Image Rotate [WAS Suite_Image_Transform]
export interface Image_Rotate extends HasSingle_IMAGE, ComfyNode<Image_Rotate_input, Image_Rotate_output> {
    nameInComfy: "Image Rotate"
}
export interface Image_Rotate_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Rotate_input {
    images: _IMAGE
    mode: Enum_Image_Rotate_mode
    /** default=0 min=360 max=360 step=90 */
    rotation?: _INT
    sampler: Enum_Image_Rotate_sampler
}

// Image Rotate Hue [WAS Suite_Image_Adjustment]
export interface Image_Rotate_Hue extends HasSingle_IMAGE, ComfyNode<Image_Rotate_Hue_input, Image_Rotate_Hue_output> {
    nameInComfy: "Image Rotate Hue"
}
export interface Image_Rotate_Hue_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Rotate_Hue_input {
    image: _IMAGE
    /** default=0 min=1 max=1 step=0.001 */
    hue_shift?: _FLOAT
}

// Image Send HTTP [WAS Suite_IO]
export interface Image_Send_HTTP extends HasSingle_INT, HasSingle_STRING, ComfyNode<Image_Send_HTTP_input, Image_Send_HTTP_output> {
    nameInComfy: "Image Send HTTP"
}
export interface Image_Send_HTTP_output {
    status_code: ComfyNodeOutput<'INT', 0>,
    result_text: ComfyNodeOutput<'STRING', 1>,
}
export interface Image_Send_HTTP_input {
    images: _IMAGE
    /** default="example.com" */
    url?: _STRING
    /** default="post" */
    method_type?: Enum_Image_Send_HTTP_method_type
    /** default="image" */
    request_field_name?: _STRING
    additional_request_headers?: _DICT
}

// Image Save [WAS Suite_IO]
export interface Image_Save extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<Image_Save_input, Image_Save_output> {
    nameInComfy: "Image Save"
}
export interface Image_Save_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
    files: ComfyNodeOutput<'STRING', 1>,
}
export interface Image_Save_input {
    images: _IMAGE
    /** default="[time(%Y-%m-%d)]" */
    output_path?: _STRING
    /** default="ComfyUI" */
    filename_prefix?: _STRING
    /** default="_" */
    filename_delimiter?: _STRING
    /** default=4 min=9 max=9 step=1 */
    filename_number_padding?: _INT
    filename_number_start: Enum_ImageDrawRectangleRounded_top_left_corner
    extension: Enum_Image_Save_extension
    /** default=300 min=2400 max=2400 step=1 */
    dpi?: _INT
    /** default=100 min=100 max=100 step=1 */
    quality?: _INT
    optimize_image: Enum_ImageDrawRectangleRounded_top_left_corner
    lossless_webp: Enum_ImageDrawRectangleRounded_top_left_corner
    overwrite_mode: Enum_Image_Save_overwrite_mode
    show_history: Enum_ImageDrawRectangleRounded_top_left_corner
    show_history_by_prefix: Enum_ImageDrawRectangleRounded_top_left_corner
    embed_workflow: Enum_ImageDrawRectangleRounded_top_left_corner
    show_previews: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Image Seamless Texture [WAS Suite_Image_Process]
export interface Image_Seamless_Texture extends HasSingle_IMAGE, ComfyNode<Image_Seamless_Texture_input, Image_Seamless_Texture_output> {
    nameInComfy: "Image Seamless Texture"
}
export interface Image_Seamless_Texture_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Seamless_Texture_input {
    images: _IMAGE
    /** default=0.4 min=1 max=1 step=0.01 */
    blending?: _FLOAT
    tiled: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=2 min=6 max=6 step=2 */
    tiles?: _INT
}

// Image Select Channel [WAS Suite_Image_Process]
export interface Image_Select_Channel extends HasSingle_IMAGE, ComfyNode<Image_Select_Channel_input, Image_Select_Channel_output> {
    nameInComfy: "Image Select Channel"
}
export interface Image_Select_Channel_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Select_Channel_input {
    image: _IMAGE
    channel: Enum_Image_Select_Channel_channel
}

// Image Select Color [WAS Suite_Image_Process]
export interface Image_Select_Color extends HasSingle_IMAGE, ComfyNode<Image_Select_Color_input, Image_Select_Color_output> {
    nameInComfy: "Image Select Color"
}
export interface Image_Select_Color_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Select_Color_input {
    image: _IMAGE
    /** default=255 min=255 max=255 step=0.1 */
    red?: _INT
    /** default=255 min=255 max=255 step=0.1 */
    green?: _INT
    /** default=255 min=255 max=255 step=0.1 */
    blue?: _INT
    /** default=10 min=255 max=255 step=1 */
    variance?: _INT
}

// Image Shadows and Highlights [WAS Suite_Image_Adjustment]
export interface Image_Shadows_and_Highlights extends ComfyNode<Image_Shadows_and_Highlights_input, Image_Shadows_and_Highlights_output> {
    nameInComfy: "Image Shadows and Highlights"
}
export interface Image_Shadows_and_Highlights_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    shadow_map: ComfyNodeOutput<'IMAGE', 1>,
    highlight_map: ComfyNodeOutput<'IMAGE', 2>,
}
export interface Image_Shadows_and_Highlights_input {
    image: _IMAGE
    /** default=75 min=255 max=255 step=0.1 */
    shadow_threshold?: _FLOAT
    /** default=1.5 min=12 max=12 step=0.1 */
    shadow_factor?: _FLOAT
    /** default=0.25 min=255 max=255 step=0.1 */
    shadow_smoothing?: _FLOAT
    /** default=175 min=255 max=255 step=0.1 */
    highlight_threshold?: _FLOAT
    /** default=0.5 min=12 max=12 step=0.1 */
    highlight_factor?: _FLOAT
    /** default=0.25 min=255 max=255 step=0.1 */
    highlight_smoothing?: _FLOAT
    /** default=0 min=255 max=255 step=0.1 */
    simplify_isolation?: _FLOAT
}

// Image Size to Number [WAS Suite_Number_Operations]
export interface Image_Size_to_Number extends ComfyNode<Image_Size_to_Number_input, Image_Size_to_Number_output> {
    nameInComfy: "Image Size to Number"
}
export interface Image_Size_to_Number_output {
    width_num: ComfyNodeOutput<'NUMBER', 0>,
    height_num: ComfyNodeOutput<'NUMBER', 1>,
    width_float: ComfyNodeOutput<'FLOAT', 2>,
    height_float: ComfyNodeOutput<'FLOAT', 3>,
    width_int: ComfyNodeOutput<'INT', 4>,
    height_int: ComfyNodeOutput<'INT', 5>,
}
export interface Image_Size_to_Number_input {
    image: _IMAGE
}

// Image Stitch [WAS Suite_Image_Transform]
export interface Image_Stitch extends HasSingle_IMAGE, ComfyNode<Image_Stitch_input, Image_Stitch_output> {
    nameInComfy: "Image Stitch"
}
export interface Image_Stitch_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Stitch_input {
    image_a: _IMAGE
    image_b: _IMAGE
    stitch: Enum_Image_Stitch_stitch
    /** default=50 min=2048 max=2048 step=1 */
    feathering?: _INT
}

// Image Style Filter [WAS Suite_Image_Filter]
export interface Image_Style_Filter extends HasSingle_IMAGE, ComfyNode<Image_Style_Filter_input, Image_Style_Filter_output> {
    nameInComfy: "Image Style Filter"
}
export interface Image_Style_Filter_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Style_Filter_input {
    image: _IMAGE
    style: Enum_Image_Style_Filter_style
}

// Image Threshold [WAS Suite_Image_Process]
export interface Image_Threshold extends HasSingle_IMAGE, ComfyNode<Image_Threshold_input, Image_Threshold_output> {
    nameInComfy: "Image Threshold"
}
export interface Image_Threshold_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Threshold_input {
    image: _IMAGE
    /** default=0.5 min=1 max=1 step=0.01 */
    threshold?: _FLOAT
}

// Image Tiled [WAS Suite_Image_Process]
export interface Image_Tiled extends HasSingle_IMAGE, ComfyNode<Image_Tiled_input, Image_Tiled_output> {
    nameInComfy: "Image Tiled"
}
export interface Image_Tiled_output {
    IMAGES: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Tiled_input {
    image: _IMAGE
    /** default=4 min=64 max=64 step=1 */
    num_tiles?: _INT
}

// Image Transpose [WAS Suite_Image_Transform]
export interface Image_Transpose extends HasSingle_IMAGE, ComfyNode<Image_Transpose_input, Image_Transpose_output> {
    nameInComfy: "Image Transpose"
}
export interface Image_Transpose_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Transpose_input {
    image: _IMAGE
    image_overlay: _IMAGE
    /** default=512 min=48000 max=48000 step=1 */
    width?: _INT
    /** default=512 min=48000 max=48000 step=1 */
    height?: _INT
    /** default=0 min=48000 max=48000 step=1 */
    X?: _INT
    /** default=0 min=48000 max=48000 step=1 */
    Y?: _INT
    /** default=0 min=360 max=360 step=1 */
    rotation?: _INT
    /** default=0 min=4096 max=4096 step=1 */
    feathering?: _INT
}

// Image fDOF Filter [WAS Suite_Image_Filter]
export interface Image_fDOF_Filter extends HasSingle_IMAGE, ComfyNode<Image_fDOF_Filter_input, Image_fDOF_Filter_output> {
    nameInComfy: "Image fDOF Filter"
}
export interface Image_fDOF_Filter_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_fDOF_Filter_input {
    image: _IMAGE
    depth: _IMAGE
    mode: Enum_Image_fDOF_Filter_mode
    /** default=8 min=128 max=128 step=1 */
    radius?: _INT
    /** default=1 min=3 max=3 step=1 */
    samples?: _INT
}

// Image to Latent Mask [WAS Suite_Image_Masking]
export interface Image_to_Latent_Mask extends HasSingle_MASK, ComfyNode<Image_to_Latent_Mask_input, Image_to_Latent_Mask_output> {
    nameInComfy: "Image to Latent Mask"
}
export interface Image_to_Latent_Mask_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Image_to_Latent_Mask_input {
    images: _IMAGE
    channel: Enum_LoadImageMask_channel
}

// Image to Noise [WAS Suite_Image_Generate_Noise]
export interface Image_to_Noise extends HasSingle_IMAGE, ComfyNode<Image_to_Noise_input, Image_to_Noise_output> {
    nameInComfy: "Image to Noise"
}
export interface Image_to_Noise_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_to_Noise_input {
    images: _IMAGE
    /** default=16 min=256 max=256 step=2 */
    num_colors?: _INT
    /** default=0 min=20 max=20 step=1 */
    black_mix?: _INT
    /** default=0 min=1024 max=1024 step=0.1 */
    gaussian_mix?: _FLOAT
    /** default=1 min=2 max=2 step=0.01 */
    brightness?: _FLOAT
    output_mode: Enum_Image_to_Noise_output_mode
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Image to Seed [WAS Suite_Image_Analyze]
export interface Image_to_Seed extends HasSingle_INT, ComfyNode<Image_to_Seed_input, Image_to_Seed_output> {
    nameInComfy: "Image to Seed"
}
export interface Image_to_Seed_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface Image_to_Seed_input {
    images: _IMAGE
}

// Images to RGB [WAS Suite_Image]
export interface Images_to_RGB extends HasSingle_IMAGE, ComfyNode<Images_to_RGB_input, Images_to_RGB_output> {
    nameInComfy: "Images to RGB"
}
export interface Images_to_RGB_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Images_to_RGB_input {
    images: _IMAGE
}

// Images to Linear [WAS Suite_Image]
export interface Images_to_Linear extends HasSingle_IMAGE, ComfyNode<Images_to_Linear_input, Images_to_Linear_output> {
    nameInComfy: "Images to Linear"
}
export interface Images_to_Linear_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Images_to_Linear_input {
    images: _IMAGE
}

// Integer place counter [WAS Suite_Integer]
export interface Integer_place_counter extends HasSingle_INT, ComfyNode<Integer_place_counter_input, Integer_place_counter_output> {
    nameInComfy: "Integer place counter"
}
export interface Integer_place_counter_output {
    INT_PLACES: ComfyNodeOutput<'INT', 0>,
}
export interface Integer_place_counter_input {
    /** default=0 min=10000000 max=10000000 step=1 */
    int_input?: _INT
}

// Image Voronoi Noise Filter [WAS Suite_Image_Generate_Noise]
export interface Image_Voronoi_Noise_Filter extends HasSingle_IMAGE, ComfyNode<Image_Voronoi_Noise_Filter_input, Image_Voronoi_Noise_Filter_output> {
    nameInComfy: "Image Voronoi Noise Filter"
}
export interface Image_Voronoi_Noise_Filter_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Voronoi_Noise_Filter_input {
    /** default=512 min=4096 max=4096 step=1 */
    width?: _INT
    /** default=512 min=4096 max=4096 step=1 */
    height?: _INT
    /** default=50 min=256 max=256 step=2 */
    density?: _INT
    /** default=0 min=8 max=8 step=1 */
    modulator?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    flat?: Enum_ttN_xyPlot_output_individuals
    RGB_output?: Enum_ttN_xyPlot_output_individuals
}

// KSampler (WAS) [WAS Suite_Sampling]
export interface KSampler_$1WAS$2 extends HasSingle_LATENT, ComfyNode<KSampler_$1WAS$2_input, KSampler_$1WAS$2_output> {
    nameInComfy: "KSampler (WAS)"
}
export interface KSampler_$1WAS$2_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface KSampler_$1WAS$2_input {
    model: _MODEL
    seed: _SEED
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// KSampler Cycle [WAS Suite_Sampling]
export interface KSampler_Cycle extends HasSingle_LATENT, ComfyNode<KSampler_Cycle_input, KSampler_Cycle_output> {
    nameInComfy: "KSampler Cycle"
}
export interface KSampler_Cycle_output {
    "latent$1s$2": ComfyNodeOutput<'LATENT', 0>,
}
export interface KSampler_Cycle_input {
    model: _MODEL
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    tiled_vae: Enum_KSamplerAdvanced_add_noise
    latent_upscale: Enum_KSampler_Cycle_latent_upscale
    /** default=2 min=8 max=8 step=0.1 */
    upscale_factor?: _FLOAT
    /** default=2 min=12 max=12 step=1 */
    upscale_cycles?: _INT
    /** default=1 min=1 max=1 step=0.01 */
    starting_denoise?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    cycle_denoise?: _FLOAT
    scale_denoise: Enum_KSamplerAdvanced_add_noise
    scale_sampling: Enum_SEGSUpscaler_resampling_method
    vae: _VAE
    secondary_model?: _MODEL
    /** default=2 min=16 max=16 step=1 */
    secondary_start_cycle?: _INT
    upscale_model?: _UPSCALE_MODEL
    processor_model?: _UPSCALE_MODEL
    pos_additive?: _CONDITIONING
    neg_additive?: _CONDITIONING
    pos_add_mode?: Enum_KSampler_Cycle_pos_add_mode
    /** default=0.25 min=1 max=1 step=0.01 */
    pos_add_strength?: _FLOAT
    pos_add_strength_scaling?: Enum_KSamplerAdvanced_add_noise
    /** default=2 min=10 max=10 step=0.01 */
    pos_add_strength_cutoff?: _FLOAT
    neg_add_mode?: Enum_KSampler_Cycle_pos_add_mode
    /** default=0.25 min=1 max=1 step=0.01 */
    neg_add_strength?: _FLOAT
    neg_add_strength_scaling?: Enum_KSamplerAdvanced_add_noise
    /** default=2 min=10 max=10 step=0.01 */
    neg_add_strength_cutoff?: _FLOAT
    /** default=0 min=10 max=10 step=0.01 */
    sharpen_strength?: _FLOAT
    /** default=2 min=12 max=12 step=1 */
    sharpen_radius?: _INT
    steps_scaling?: Enum_KSamplerAdvanced_add_noise
    steps_control?: Enum_KSampler_Cycle_pos_add_mode
    /** default=10 min=20 max=20 step=1 */
    steps_scaling_value?: _INT
    /** default=20 min=1000 max=1000 step=1 */
    steps_cutoff?: _INT
    /** default=0.25 min=1 max=1 step=0.01 */
    denoise_cutoff?: _FLOAT
}

// Latent Batch [WAS Suite_Latent]
export interface Latent_Batch extends HasSingle_LATENT, ComfyNode<Latent_Batch_input, Latent_Batch_output> {
    nameInComfy: "Latent Batch"
}
export interface Latent_Batch_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
}
export interface Latent_Batch_input {
    latent_a?: _LATENT
    latent_b?: _LATENT
    latent_c?: _LATENT
    latent_d?: _LATENT
}

// Latent Noise Injection [WAS Suite_Latent_Generate]
export interface Latent_Noise_Injection extends HasSingle_LATENT, ComfyNode<Latent_Noise_Injection_input, Latent_Noise_Injection_output> {
    nameInComfy: "Latent Noise Injection"
}
export interface Latent_Noise_Injection_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface Latent_Noise_Injection_input {
    samples: _LATENT
    /** default=0.1 min=1 max=1 step=0.01 */
    noise_std?: _FLOAT
}

// Latent Size to Number [WAS Suite_Number_Operations]
export interface Latent_Size_to_Number extends ComfyNode<Latent_Size_to_Number_input, Latent_Size_to_Number_output> {
    nameInComfy: "Latent Size to Number"
}
export interface Latent_Size_to_Number_output {
    tensor_w_num: ComfyNodeOutput<'NUMBER', 0>,
    tensor_h_num: ComfyNodeOutput<'NUMBER', 1>,
    tensor_w_float: ComfyNodeOutput<'FLOAT', 2>,
    tensor_h_float: ComfyNodeOutput<'FLOAT', 3>,
    tensor_w_int: ComfyNodeOutput<'INT', 4>,
    tensor_h_int: ComfyNodeOutput<'INT', 5>,
}
export interface Latent_Size_to_Number_input {
    samples: _LATENT
}

// Latent Upscale by Factor (WAS) [WAS Suite_Latent_Transform]
export interface Latent_Upscale_by_Factor_$1WAS$2 extends HasSingle_LATENT, ComfyNode<Latent_Upscale_by_Factor_$1WAS$2_input, Latent_Upscale_by_Factor_$1WAS$2_output> {
    nameInComfy: "Latent Upscale by Factor (WAS)"
}
export interface Latent_Upscale_by_Factor_$1WAS$2_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface Latent_Upscale_by_Factor_$1WAS$2_input {
    samples: _LATENT
    mode: Enum_Latent_Upscale_by_Factor_$1WAS$2_mode
    /** default=2 min=8 max=8 step=0.01 */
    factor?: _FLOAT
    align: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Load Image Batch [WAS Suite_IO]
export interface Load_Image_Batch extends HasSingle_IMAGE, HasSingle_STRING, ComfyNode<Load_Image_Batch_input, Load_Image_Batch_output> {
    nameInComfy: "Load Image Batch"
}
export interface Load_Image_Batch_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    filename_text: ComfyNodeOutput<'STRING', 1>,
}
export interface Load_Image_Batch_input {
    mode: Enum_Load_Image_Batch_mode
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=0 min=150000 max=150000 step=1 */
    index?: _INT
    /** default="Batch 001" */
    label?: _STRING
    /** default="" */
    path?: _STRING
    /** default="*" */
    pattern?: _STRING
    allow_RGBA_output: Enum_ImageDrawRectangleRounded_top_left_corner
    filename_text_extension?: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Load Text File [WAS Suite_IO]
export interface Load_Text_File extends HasSingle_STRING, HasSingle_DICT, ComfyNode<Load_Text_File_input, Load_Text_File_output> {
    nameInComfy: "Load Text File"
}
export interface Load_Text_File_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    DICT: ComfyNodeOutput<'DICT', 1>,
}
export interface Load_Text_File_input {
    /** default="" */
    file_path?: _STRING
    /** default="[filename]" */
    dictionary_name?: _STRING
}

// Load Lora [WAS Suite_Loaders]
export interface Load_Lora extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_STRING, ComfyNode<Load_Lora_input, Load_Lora_output> {
    nameInComfy: "Load Lora"
}
export interface Load_Lora_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    NAME_STRING: ComfyNodeOutput<'STRING', 2>,
}
export interface Load_Lora_input {
    model: _MODEL
    clip: _CLIP
    lora_name: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name
    /** default=1 min=10 max=10 step=0.01 */
    strength_model?: _FLOAT
    /** default=1 min=10 max=10 step=0.01 */
    strength_clip?: _FLOAT
}

// Lora Input Switch [WAS Suite_Logic]
export interface Lora_Input_Switch extends HasSingle_MODEL, HasSingle_CLIP, ComfyNode<Lora_Input_Switch_input, Lora_Input_Switch_output> {
    nameInComfy: "Lora Input Switch"
}
export interface Lora_Input_Switch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
}
export interface Lora_Input_Switch_input {
    model_a: _MODEL
    clip_a: _CLIP
    model_b: _MODEL
    clip_b: _CLIP
    /** */
    boolean: _BOOLEAN
}

// Masks Add [WAS Suite_Image_Masking]
export interface Masks_Add extends HasSingle_MASK, ComfyNode<Masks_Add_input, Masks_Add_output> {
    nameInComfy: "Masks Add"
}
export interface Masks_Add_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Masks_Add_input {
    masks_a: _MASK
    masks_b: _MASK
}

// Masks Subtract [WAS Suite_Image_Masking]
export interface Masks_Subtract extends HasSingle_MASK, ComfyNode<Masks_Subtract_input, Masks_Subtract_output> {
    nameInComfy: "Masks Subtract"
}
export interface Masks_Subtract_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Masks_Subtract_input {
    masks_a: _MASK
    masks_b: _MASK
}

// Mask Arbitrary Region [WAS Suite_Image_Masking]
export interface Mask_Arbitrary_Region extends HasSingle_MASK, ComfyNode<Mask_Arbitrary_Region_input, Mask_Arbitrary_Region_output> {
    nameInComfy: "Mask Arbitrary Region"
}
export interface Mask_Arbitrary_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Arbitrary_Region_input {
    masks: _MASK
    /** default=256 min=4096 max=4096 step=1 */
    size?: _INT
    /** default=128 min=255 max=255 step=1 */
    threshold?: _INT
}

// Mask Batch to Mask [WAS Suite_Image_Masking]
export interface Mask_Batch_to_Mask extends HasSingle_MASK, ComfyNode<Mask_Batch_to_Mask_input, Mask_Batch_to_Mask_output> {
    nameInComfy: "Mask Batch to Mask"
}
export interface Mask_Batch_to_Mask_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Batch_to_Mask_input {
    masks: _MASK
    /** default=0 min=64 max=64 step=1 */
    batch_number?: _INT
}

// Mask Batch [WAS Suite_Image_Masking]
export interface Mask_Batch extends HasSingle_MASK, ComfyNode<Mask_Batch_input, Mask_Batch_output> {
    nameInComfy: "Mask Batch"
}
export interface Mask_Batch_output {
    masks: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Batch_input {
    masks_a?: _MASK
    masks_b?: _MASK
    masks_c?: _MASK
    masks_d?: _MASK
}

// Mask Ceiling Region [WAS Suite_Image_Masking]
export interface Mask_Ceiling_Region extends HasSingle_MASK, ComfyNode<Mask_Ceiling_Region_input, Mask_Ceiling_Region_output> {
    nameInComfy: "Mask Ceiling Region"
}
export interface Mask_Ceiling_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Ceiling_Region_input {
    masks: _MASK
}

// Mask Crop Dominant Region [WAS Suite_Image_Masking]
export interface Mask_Crop_Dominant_Region extends HasSingle_MASK, ComfyNode<Mask_Crop_Dominant_Region_input, Mask_Crop_Dominant_Region_output> {
    nameInComfy: "Mask Crop Dominant Region"
}
export interface Mask_Crop_Dominant_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Crop_Dominant_Region_input {
    masks: _MASK
    /** default=24 min=4096 max=4096 step=1 */
    padding?: _INT
}

// Mask Crop Minority Region [WAS Suite_Image_Masking]
export interface Mask_Crop_Minority_Region extends HasSingle_MASK, ComfyNode<Mask_Crop_Minority_Region_input, Mask_Crop_Minority_Region_output> {
    nameInComfy: "Mask Crop Minority Region"
}
export interface Mask_Crop_Minority_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Crop_Minority_Region_input {
    masks: _MASK
    /** default=24 min=4096 max=4096 step=1 */
    padding?: _INT
}

// Mask Crop Region [WAS Suite_Image_Masking]
export interface Mask_Crop_Region extends HasSingle_MASK, HasSingle_CROP_DATA, ComfyNode<Mask_Crop_Region_input, Mask_Crop_Region_output> {
    nameInComfy: "Mask Crop Region"
}
export interface Mask_Crop_Region_output {
    cropped_mask: ComfyNodeOutput<'MASK', 0>,
    crop_data: ComfyNodeOutput<'CROP_DATA', 1>,
    top_int: ComfyNodeOutput<'INT', 2>,
    left_int: ComfyNodeOutput<'INT', 3>,
    right_int: ComfyNodeOutput<'INT', 4>,
    bottom_int: ComfyNodeOutput<'INT', 5>,
    width_int: ComfyNodeOutput<'INT', 6>,
    height_int: ComfyNodeOutput<'INT', 7>,
}
export interface Mask_Crop_Region_input {
    mask: _MASK
    /** default=24 min=4096 max=4096 step=1 */
    padding?: _INT
    region_type: Enum_Mask_Crop_Region_region_type
}

// Mask Paste Region [WAS Suite_Image_Masking]
export interface Mask_Paste_Region extends ComfyNode<Mask_Paste_Region_input, Mask_Paste_Region_output> {
    nameInComfy: "Mask Paste Region"
}
export interface Mask_Paste_Region_output {
    RESULT_MASK: ComfyNodeOutput<'MASK', 0>,
    CROP_MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface Mask_Paste_Region_input {
    mask: _MASK
    crop_mask: _MASK
    crop_data: _CROP_DATA
    /** default=0.25 min=1 max=1 step=0.01 */
    crop_blending?: _FLOAT
    /** default=0 min=3 max=3 step=1 */
    crop_sharpening?: _INT
}

// Mask Dilate Region [WAS Suite_Image_Masking]
export interface Mask_Dilate_Region extends HasSingle_MASK, ComfyNode<Mask_Dilate_Region_input, Mask_Dilate_Region_output> {
    nameInComfy: "Mask Dilate Region"
}
export interface Mask_Dilate_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Dilate_Region_input {
    masks: _MASK
    /** default=5 min=64 max=64 step=1 */
    iterations?: _INT
}

// Mask Dominant Region [WAS Suite_Image_Masking]
export interface Mask_Dominant_Region extends HasSingle_MASK, ComfyNode<Mask_Dominant_Region_input, Mask_Dominant_Region_output> {
    nameInComfy: "Mask Dominant Region"
}
export interface Mask_Dominant_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Dominant_Region_input {
    masks: _MASK
    /** default=128 min=255 max=255 step=1 */
    threshold?: _INT
}

// Mask Erode Region [WAS Suite_Image_Masking]
export interface Mask_Erode_Region extends HasSingle_MASK, ComfyNode<Mask_Erode_Region_input, Mask_Erode_Region_output> {
    nameInComfy: "Mask Erode Region"
}
export interface Mask_Erode_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Erode_Region_input {
    masks: _MASK
    /** default=5 min=64 max=64 step=1 */
    iterations?: _INT
}

// Mask Fill Holes [WAS Suite_Image_Masking]
export interface Mask_Fill_Holes extends HasSingle_MASK, ComfyNode<Mask_Fill_Holes_input, Mask_Fill_Holes_output> {
    nameInComfy: "Mask Fill Holes"
}
export interface Mask_Fill_Holes_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Fill_Holes_input {
    masks: _MASK
}

// Mask Floor Region [WAS Suite_Image_Masking]
export interface Mask_Floor_Region extends HasSingle_MASK, ComfyNode<Mask_Floor_Region_input, Mask_Floor_Region_output> {
    nameInComfy: "Mask Floor Region"
}
export interface Mask_Floor_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Floor_Region_input {
    masks: _MASK
}

// Mask Gaussian Region [WAS Suite_Image_Masking]
export interface Mask_Gaussian_Region extends HasSingle_MASK, ComfyNode<Mask_Gaussian_Region_input, Mask_Gaussian_Region_output> {
    nameInComfy: "Mask Gaussian Region"
}
export interface Mask_Gaussian_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Gaussian_Region_input {
    masks: _MASK
    /** default=5 min=1024 max=1024 step=0.1 */
    radius?: _FLOAT
}

// Mask Invert [WAS Suite_Image_Masking]
export interface Mask_Invert extends HasSingle_MASK, ComfyNode<Mask_Invert_input, Mask_Invert_output> {
    nameInComfy: "Mask Invert"
}
export interface Mask_Invert_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Invert_input {
    masks: _MASK
}

// Mask Minority Region [WAS Suite_Image_Masking]
export interface Mask_Minority_Region extends HasSingle_MASK, ComfyNode<Mask_Minority_Region_input, Mask_Minority_Region_output> {
    nameInComfy: "Mask Minority Region"
}
export interface Mask_Minority_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Minority_Region_input {
    masks: _MASK
    /** default=128 min=255 max=255 step=1 */
    threshold?: _INT
}

// Mask Smooth Region [WAS Suite_Image_Masking]
export interface Mask_Smooth_Region extends HasSingle_MASK, ComfyNode<Mask_Smooth_Region_input, Mask_Smooth_Region_output> {
    nameInComfy: "Mask Smooth Region"
}
export interface Mask_Smooth_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Smooth_Region_input {
    masks: _MASK
    /** default=5 min=128 max=128 step=0.1 */
    sigma?: _FLOAT
}

// Mask Threshold Region [WAS Suite_Image_Masking]
export interface Mask_Threshold_Region extends HasSingle_MASK, ComfyNode<Mask_Threshold_Region_input, Mask_Threshold_Region_output> {
    nameInComfy: "Mask Threshold Region"
}
export interface Mask_Threshold_Region_output {
    MASKS: ComfyNodeOutput<'MASK', 0>,
}
export interface Mask_Threshold_Region_input {
    masks: _MASK
    /** default=75 min=255 max=255 step=1 */
    black_threshold?: _INT
    /** default=175 min=255 max=255 step=1 */
    white_threshold?: _INT
}

// Masks Combine Regions [WAS Suite_Image_Masking]
export interface Masks_Combine_Regions extends HasSingle_MASK, ComfyNode<Masks_Combine_Regions_input, Masks_Combine_Regions_output> {
    nameInComfy: "Masks Combine Regions"
}
export interface Masks_Combine_Regions_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface Masks_Combine_Regions_input {
    mask_a: _MASK
    mask_b: _MASK
    mask_c?: _MASK
    mask_d?: _MASK
    mask_e?: _MASK
    mask_f?: _MASK
}

// Masks Combine Batch [WAS Suite_Image_Masking]
export interface Masks_Combine_Batch extends HasSingle_MASK, ComfyNode<Masks_Combine_Batch_input, Masks_Combine_Batch_output> {
    nameInComfy: "Masks Combine Batch"
}
export interface Masks_Combine_Batch_output {
    MASK: ComfyNodeOutput<'MASK', 0>,
}
export interface Masks_Combine_Batch_input {
    masks: _MASK
}

// MiDaS Model Loader [WAS Suite_Loaders]
export interface MiDaS_Model_Loader extends HasSingle_MIDAS_MODEL, ComfyNode<MiDaS_Model_Loader_input, MiDaS_Model_Loader_output> {
    nameInComfy: "MiDaS Model Loader"
}
export interface MiDaS_Model_Loader_output {
    midas_model: ComfyNodeOutput<'MIDAS_MODEL', 0>,
}
export interface MiDaS_Model_Loader_input {
    midas_model: Enum_MiDaS_Model_Loader_midas_model
}

// MiDaS Depth Approximation [WAS Suite_Image_AI]
export interface MiDaS_Depth_Approximation extends HasSingle_IMAGE, ComfyNode<MiDaS_Depth_Approximation_input, MiDaS_Depth_Approximation_output> {
    nameInComfy: "MiDaS Depth Approximation"
}
export interface MiDaS_Depth_Approximation_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface MiDaS_Depth_Approximation_input {
    image: _IMAGE
    use_cpu: Enum_ImageDrawRectangleRounded_top_left_corner
    midas_type: Enum_MiDaS_Model_Loader_midas_model
    invert_depth: Enum_ImageDrawRectangleRounded_top_left_corner
    midas_model?: _MIDAS_MODEL
}

// MiDaS Mask Image [WAS Suite_Image_AI]
export interface MiDaS_Mask_Image extends ComfyNode<MiDaS_Mask_Image_input, MiDaS_Mask_Image_output> {
    nameInComfy: "MiDaS Mask Image"
}
export interface MiDaS_Mask_Image_output {
    RESULT: ComfyNodeOutput<'IMAGE', 0>,
    DEPTH: ComfyNodeOutput<'IMAGE', 1>,
}
export interface MiDaS_Mask_Image_input {
    image: _IMAGE
    use_cpu: Enum_ImageDrawRectangleRounded_top_left_corner
    midas_model: Enum_MiDaS_Mask_Image_midas_model
    remove: Enum_MiDaS_Mask_Image_remove
    threshold: Enum_ImageDrawRectangleRounded_top_left_corner
    /** default=10 min=255 max=255 step=1 */
    threshold_low?: _FLOAT
    /** default=200 min=255 max=255 step=1 */
    threshold_mid?: _FLOAT
    /** default=210 min=255 max=255 step=1 */
    threshold_high?: _FLOAT
    /** default=0.25 min=16 max=16 step=0.01 */
    smoothing?: _FLOAT
    /** default=0 min=255 max=255 step=1 */
    background_red?: _INT
    /** default=0 min=255 max=255 step=1 */
    background_green?: _INT
    /** default=0 min=255 max=255 step=1 */
    background_blue?: _INT
}

// Model Input Switch [WAS Suite_Logic]
export interface Model_Input_Switch extends HasSingle_MODEL, ComfyNode<Model_Input_Switch_input, Model_Input_Switch_output> {
    nameInComfy: "Model Input Switch"
}
export interface Model_Input_Switch_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
}
export interface Model_Input_Switch_input {
    model_a: _MODEL
    model_b: _MODEL
    /** */
    boolean: _BOOLEAN
}

// Number Counter [WAS Suite_Number]
export interface Number_Counter extends HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Number_Counter_input, Number_Counter_output> {
    nameInComfy: "Number Counter"
}
export interface Number_Counter_output {
    number: ComfyNodeOutput<'NUMBER', 0>,
    float: ComfyNodeOutput<'FLOAT', 1>,
    int: ComfyNodeOutput<'INT', 2>,
}
export interface Number_Counter_input {
    number_type: Enum_Number_Counter_number_type
    mode: Enum_Number_Counter_mode
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    start?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 step=0.01 */
    stop?: _FLOAT
    /** default=1 min=99999 max=99999 step=0.01 */
    step?: _FLOAT
    reset_bool?: _NUMBER
}

// Number Operation [WAS Suite_Number_Operations]
export interface Number_Operation extends HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Number_Operation_input, Number_Operation_output> {
    nameInComfy: "Number Operation"
}
export interface Number_Operation_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
}
export interface Number_Operation_input {
    number_a: _NUMBER
    number_b: _NUMBER
    operation: Enum_Number_Operation_operation
}

// Number to Float [WAS Suite_Number_Operations]
export interface Number_to_Float extends HasSingle_FLOAT, ComfyNode<Number_to_Float_input, Number_to_Float_output> {
    nameInComfy: "Number to Float"
}
export interface Number_to_Float_output {
    FLOAT: ComfyNodeOutput<'FLOAT', 0>,
}
export interface Number_to_Float_input {
    number: _NUMBER
}

// Number Input Switch [WAS Suite_Logic]
export interface Number_Input_Switch extends HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Number_Input_Switch_input, Number_Input_Switch_output> {
    nameInComfy: "Number Input Switch"
}
export interface Number_Input_Switch_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
}
export interface Number_Input_Switch_input {
    number_a: _NUMBER
    number_b: _NUMBER
    /** */
    boolean: _BOOLEAN
}

// Number Input Condition [WAS Suite_Logic]
export interface Number_Input_Condition extends HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Number_Input_Condition_input, Number_Input_Condition_output> {
    nameInComfy: "Number Input Condition"
}
export interface Number_Input_Condition_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
}
export interface Number_Input_Condition_input {
    number_a: _NUMBER
    number_b: _NUMBER
    return_boolean: Enum_ImageDrawRectangleRounded_top_left_corner
    comparison: Enum_Number_Input_Condition_comparison
}

// Number Multiple Of [WAS Suite_Number_Functions]
export interface Number_Multiple_Of extends HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Number_Multiple_Of_input, Number_Multiple_Of_output> {
    nameInComfy: "Number Multiple Of"
}
export interface Number_Multiple_Of_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
}
export interface Number_Multiple_Of_input {
    number: _NUMBER
    /** default=8 min=18446744073709552000 max=18446744073709552000 */
    multiple?: _INT
}

// Number PI [WAS Suite_Number]
export interface Number_PI extends HasSingle_NUMBER, HasSingle_FLOAT, ComfyNode<Number_PI_input, Number_PI_output> {
    nameInComfy: "Number PI"
}
export interface Number_PI_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
}
export interface Number_PI_input {
}

// Number to Int [WAS Suite_Number_Operations]
export interface Number_to_Int extends HasSingle_INT, ComfyNode<Number_to_Int_input, Number_to_Int_output> {
    nameInComfy: "Number to Int"
}
export interface Number_to_Int_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface Number_to_Int_input {
    number: _NUMBER
}

// Number to Seed [WAS Suite_Number_Operations]
export interface Number_to_Seed extends HasSingle_SEED, ComfyNode<Number_to_Seed_input, Number_to_Seed_output> {
    nameInComfy: "Number to Seed"
}
export interface Number_to_Seed_output {
    SEED: ComfyNodeOutput<'SEED', 0>,
}
export interface Number_to_Seed_input {
    number: _NUMBER
}

// Number to String [WAS Suite_Number_Operations]
export interface Number_to_String extends HasSingle_STRING, ComfyNode<Number_to_String_input, Number_to_String_output> {
    nameInComfy: "Number to String"
}
export interface Number_to_String_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Number_to_String_input {
    number: _NUMBER
}

// Number to Text [WAS Suite_Number_Operations]
export interface Number_to_Text extends HasSingle_STRING, ComfyNode<Number_to_Text_input, Number_to_Text_output> {
    nameInComfy: "Number to Text"
}
export interface Number_to_Text_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Number_to_Text_input {
    number: _NUMBER
}

// Boolean To Text [WAS Suite_Logic]
export interface Boolean_To_Text extends HasSingle_STRING, ComfyNode<Boolean_To_Text_input, Boolean_To_Text_output> {
    nameInComfy: "Boolean To Text"
}
export interface Boolean_To_Text_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Boolean_To_Text_input {
    /** default=false */
    boolean?: _BOOLEAN
}

// Prompt Styles Selector [WAS Suite_Text]
export interface Prompt_Styles_Selector extends ComfyNode<Prompt_Styles_Selector_input, Prompt_Styles_Selector_output> {
    nameInComfy: "Prompt Styles Selector"
}
export interface Prompt_Styles_Selector_output {
    positive_string: ComfyNodeOutput<'STRING', 0>,
    negative_string: ComfyNodeOutput<'STRING', 1>,
}
export interface Prompt_Styles_Selector_input {
    style: Enum_Prompt_Styles_Selector_style
}

// Prompt Multiple Styles Selector [WAS Suite_Text]
export interface Prompt_Multiple_Styles_Selector extends ComfyNode<Prompt_Multiple_Styles_Selector_input, Prompt_Multiple_Styles_Selector_output> {
    nameInComfy: "Prompt Multiple Styles Selector"
}
export interface Prompt_Multiple_Styles_Selector_output {
    positive_string: ComfyNodeOutput<'STRING', 0>,
    negative_string: ComfyNodeOutput<'STRING', 1>,
}
export interface Prompt_Multiple_Styles_Selector_input {
    style1: Enum_Prompt_Styles_Selector_style
    style2: Enum_Prompt_Styles_Selector_style
    style3: Enum_Prompt_Styles_Selector_style
    style4: Enum_Prompt_Styles_Selector_style
}

// Random Number [WAS Suite_Number]
export interface Random_Number extends HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Random_Number_input, Random_Number_output> {
    nameInComfy: "Random Number"
}
export interface Random_Number_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
}
export interface Random_Number_input {
    number_type: Enum_Constant_Number_number_type
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    minimum?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    maximum?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Save Text File [WAS Suite_IO]
export interface Save_Text_File extends ComfyNode<Save_Text_File_input, Save_Text_File_output> {
    nameInComfy: "Save Text File"
}
export interface Save_Text_File_output {
}
export interface Save_Text_File_input {
    /** */
    text: _STRING
    /** default="./ComfyUI/output/[time(%Y-%m-%d)]" */
    path?: _STRING
    /** default="ComfyUI" */
    filename_prefix?: _STRING
    /** default="_" */
    filename_delimiter?: _STRING
    /** default=4 min=9 max=9 step=1 */
    filename_number_padding?: _INT
    /** default=".txt" */
    file_extension?: _STRING
    /** default="utf-8" */
    encoding?: _STRING
    /** default="" */
    filename_suffix?: _STRING
}

// Seed [WAS Suite_Number]
export interface Seed extends HasSingle_SEED, HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Seed_input, Seed_output> {
    nameInComfy: "Seed"
}
export interface Seed_output {
    seed: ComfyNodeOutput<'SEED', 0>,
    number: ComfyNodeOutput<'NUMBER', 1>,
    float: ComfyNodeOutput<'FLOAT', 2>,
    int: ComfyNodeOutput<'INT', 3>,
}
export interface Seed_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Tensor Batch to Image [WAS Suite_Latent_Transform]
export interface Tensor_Batch_to_Image extends HasSingle_IMAGE, ComfyNode<Tensor_Batch_to_Image_input, Tensor_Batch_to_Image_output> {
    nameInComfy: "Tensor Batch to Image"
}
export interface Tensor_Batch_to_Image_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Tensor_Batch_to_Image_input {
    images_batch: _IMAGE
    /** default=0 min=64 max=64 step=1 */
    batch_image_number?: _INT
}

// BLIP Analyze Image [WAS Suite_Text_AI]
export interface BLIP_Analyze_Image extends ComfyNode<BLIP_Analyze_Image_input, BLIP_Analyze_Image_output> {
    nameInComfy: "BLIP Analyze Image"
}
export interface BLIP_Analyze_Image_output {
    FULL_CAPTIONS: ComfyNodeOutput<'STRING', 0>,
    CAPTIONS: ComfyNodeOutput<'STRING', 1>,
}
export interface BLIP_Analyze_Image_input {
    images: _IMAGE
    mode: Enum_BLIP_Analyze_Image_mode
    /** default="What does the background consist of?" */
    question?: _STRING
    blip_model: _BLIP_MODEL
    /** default=24 min=1024 max=1024 */
    min_length?: _INT
    /** default=64 min=1024 max=1024 */
    max_length?: _INT
    /** default=5 min=12 max=12 */
    num_beams?: _INT
    /** default=3 min=12 max=12 */
    no_repeat_ngram_size?: _INT
    /** default=false */
    early_stopping?: _BOOLEAN
}

// SAM Model Loader [WAS Suite_Image_Masking]
export interface SAM_Model_Loader extends HasSingle_SAM_MODEL, ComfyNode<SAM_Model_Loader_input, SAM_Model_Loader_output> {
    nameInComfy: "SAM Model Loader"
}
export interface SAM_Model_Loader_output {
    SAM_MODEL: ComfyNodeOutput<'SAM_MODEL', 0>,
}
export interface SAM_Model_Loader_input {
    model_size: Enum_SAM_Model_Loader_model_size
}

// SAM Parameters [WAS Suite_Image_Masking]
export interface SAM_Parameters extends HasSingle_SAM_PARAMETERS, ComfyNode<SAM_Parameters_input, SAM_Parameters_output> {
    nameInComfy: "SAM Parameters"
}
export interface SAM_Parameters_output {
    SAM_PARAMETERS: ComfyNodeOutput<'SAM_PARAMETERS', 0>,
}
export interface SAM_Parameters_input {
    /** default="[128, 128]; [0, 0]" */
    points?: _STRING
    /** default="[1, 0]" */
    labels?: _STRING
}

// SAM Parameters Combine [WAS Suite_Image_Masking]
export interface SAM_Parameters_Combine extends HasSingle_SAM_PARAMETERS, ComfyNode<SAM_Parameters_Combine_input, SAM_Parameters_Combine_output> {
    nameInComfy: "SAM Parameters Combine"
}
export interface SAM_Parameters_Combine_output {
    SAM_PARAMETERS: ComfyNodeOutput<'SAM_PARAMETERS', 0>,
}
export interface SAM_Parameters_Combine_input {
    sam_parameters_a: _SAM_PARAMETERS
    sam_parameters_b: _SAM_PARAMETERS
}

// SAM Image Mask [WAS Suite_Image_Masking]
export interface SAM_Image_Mask extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<SAM_Image_Mask_input, SAM_Image_Mask_output> {
    nameInComfy: "SAM Image Mask"
}
export interface SAM_Image_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface SAM_Image_Mask_input {
    sam_model: _SAM_MODEL
    sam_parameters: _SAM_PARAMETERS
    image: _IMAGE
}

// Samples Passthrough (Stat System) [WAS Suite_Debug]
export interface Samples_Passthrough_$1Stat_System$2 extends HasSingle_LATENT, ComfyNode<Samples_Passthrough_$1Stat_System$2_input, Samples_Passthrough_$1Stat_System$2_output> {
    nameInComfy: "Samples Passthrough (Stat System)"
}
export interface Samples_Passthrough_$1Stat_System$2_output {
    samples: ComfyNodeOutput<'LATENT', 0>,
}
export interface Samples_Passthrough_$1Stat_System$2_input {
    samples: _LATENT
}

// String to Text [WAS Suite_Text_Operations]
export interface String_to_Text extends HasSingle_STRING, ComfyNode<String_to_Text_input, String_to_Text_output> {
    nameInComfy: "String to Text"
}
export interface String_to_Text_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface String_to_Text_input {
    /** */
    string: _STRING
}

// Image Bounds [WAS Suite_Image_Bound]
export interface Image_Bounds extends HasSingle_IMAGE_BOUNDS, ComfyNode<Image_Bounds_input, Image_Bounds_output> {
    nameInComfy: "Image Bounds"
}
export interface Image_Bounds_output {
    IMAGE_BOUNDS: ComfyNodeOutput<'IMAGE_BOUNDS', 0>,
}
export interface Image_Bounds_input {
    image: _IMAGE
}

// Inset Image Bounds [WAS Suite_Image_Bound]
export interface Inset_Image_Bounds extends HasSingle_IMAGE_BOUNDS, ComfyNode<Inset_Image_Bounds_input, Inset_Image_Bounds_output> {
    nameInComfy: "Inset Image Bounds"
}
export interface Inset_Image_Bounds_output {
    IMAGE_BOUNDS: ComfyNodeOutput<'IMAGE_BOUNDS', 0>,
}
export interface Inset_Image_Bounds_input {
    image_bounds: _IMAGE_BOUNDS
    /** default=64 min=18446744073709552000 max=18446744073709552000 */
    inset_left?: _INT
    /** default=64 min=18446744073709552000 max=18446744073709552000 */
    inset_right?: _INT
    /** default=64 min=18446744073709552000 max=18446744073709552000 */
    inset_top?: _INT
    /** default=64 min=18446744073709552000 max=18446744073709552000 */
    inset_bottom?: _INT
}

// Bounded Image Blend [WAS Suite_Image_Bound]
export interface Bounded_Image_Blend extends HasSingle_IMAGE, ComfyNode<Bounded_Image_Blend_input, Bounded_Image_Blend_output> {
    nameInComfy: "Bounded Image Blend"
}
export interface Bounded_Image_Blend_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Bounded_Image_Blend_input {
    target: _IMAGE
    target_bounds: _IMAGE_BOUNDS
    source: _IMAGE
    /** default=1 min=1 max=1 */
    blend_factor?: _FLOAT
    /** default=16 min=18446744073709552000 max=18446744073709552000 */
    feathering?: _INT
}

// Bounded Image Blend with Mask [WAS Suite_Image_Bound]
export interface Bounded_Image_Blend_with_Mask extends HasSingle_IMAGE, ComfyNode<Bounded_Image_Blend_with_Mask_input, Bounded_Image_Blend_with_Mask_output> {
    nameInComfy: "Bounded Image Blend with Mask"
}
export interface Bounded_Image_Blend_with_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Bounded_Image_Blend_with_Mask_input {
    target: _IMAGE
    target_mask: _MASK
    target_bounds: _IMAGE_BOUNDS
    source: _IMAGE
    /** default=1 min=1 max=1 */
    blend_factor?: _FLOAT
    /** default=16 min=18446744073709552000 max=18446744073709552000 */
    feathering?: _INT
}

// Bounded Image Crop [WAS Suite_Image_Bound]
export interface Bounded_Image_Crop extends HasSingle_IMAGE, ComfyNode<Bounded_Image_Crop_input, Bounded_Image_Crop_output> {
    nameInComfy: "Bounded Image Crop"
}
export interface Bounded_Image_Crop_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Bounded_Image_Crop_input {
    image: _IMAGE
    image_bounds: _IMAGE_BOUNDS
}

// Bounded Image Crop with Mask [WAS Suite_Image_Bound]
export interface Bounded_Image_Crop_with_Mask extends HasSingle_IMAGE, HasSingle_IMAGE_BOUNDS, ComfyNode<Bounded_Image_Crop_with_Mask_input, Bounded_Image_Crop_with_Mask_output> {
    nameInComfy: "Bounded Image Crop with Mask"
}
export interface Bounded_Image_Crop_with_Mask_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    IMAGE_BOUNDS: ComfyNodeOutput<'IMAGE_BOUNDS', 1>,
}
export interface Bounded_Image_Crop_with_Mask_input {
    image: _IMAGE
    mask: _MASK
    /** default=64 min=18446744073709552000 max=18446744073709552000 */
    padding_left?: _INT
    /** default=64 min=18446744073709552000 max=18446744073709552000 */
    padding_right?: _INT
    /** default=64 min=18446744073709552000 max=18446744073709552000 */
    padding_top?: _INT
    /** default=64 min=18446744073709552000 max=18446744073709552000 */
    padding_bottom?: _INT
}

// Image Bounds to Console [WAS Suite_Debug]
export interface Image_Bounds_to_Console extends HasSingle_IMAGE_BOUNDS, ComfyNode<Image_Bounds_to_Console_input, Image_Bounds_to_Console_output> {
    nameInComfy: "Image Bounds to Console"
}
export interface Image_Bounds_to_Console_output {
    IMAGE_BOUNDS: ComfyNodeOutput<'IMAGE_BOUNDS', 0>,
}
export interface Image_Bounds_to_Console_input {
    image_bounds: _IMAGE_BOUNDS
    /** default="Debug to Console" */
    label?: _STRING
}

// Text Dictionary Update [WAS Suite_Text]
export interface Text_Dictionary_Update extends HasSingle_DICT, ComfyNode<Text_Dictionary_Update_input, Text_Dictionary_Update_output> {
    nameInComfy: "Text Dictionary Update"
}
export interface Text_Dictionary_Update_output {
    DICT: ComfyNodeOutput<'DICT', 0>,
}
export interface Text_Dictionary_Update_input {
    dictionary_a: _DICT
    dictionary_b: _DICT
    dictionary_c?: _DICT
    dictionary_d?: _DICT
}

// Text Dictionary Get [WAS Suite_Text]
export interface Text_Dictionary_Get extends HasSingle_STRING, ComfyNode<Text_Dictionary_Get_input, Text_Dictionary_Get_output> {
    nameInComfy: "Text Dictionary Get"
}
export interface Text_Dictionary_Get_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Dictionary_Get_input {
    dictionary: _DICT
    /** default="" */
    key?: _STRING
    /** default="" */
    default_value?: _STRING
}

// Text Dictionary Convert [WAS Suite_Text]
export interface Text_Dictionary_Convert extends HasSingle_DICT, ComfyNode<Text_Dictionary_Convert_input, Text_Dictionary_Convert_output> {
    nameInComfy: "Text Dictionary Convert"
}
export interface Text_Dictionary_Convert_output {
    DICT: ComfyNodeOutput<'DICT', 0>,
}
export interface Text_Dictionary_Convert_input {
    /** */
    dictionary_text: _STRING
}

// Text Dictionary New [WAS Suite_Text]
export interface Text_Dictionary_New extends HasSingle_DICT, ComfyNode<Text_Dictionary_New_input, Text_Dictionary_New_output> {
    nameInComfy: "Text Dictionary New"
}
export interface Text_Dictionary_New_output {
    DICT: ComfyNodeOutput<'DICT', 0>,
}
export interface Text_Dictionary_New_input {
    /** default="" */
    key_1?: _STRING
    /** default="" */
    value_1?: _STRING
    /** default="" */
    key_2?: _STRING
    /** default="" */
    value_2?: _STRING
    /** default="" */
    key_3?: _STRING
    /** default="" */
    value_3?: _STRING
    /** default="" */
    key_4?: _STRING
    /** default="" */
    value_4?: _STRING
    /** default="" */
    key_5?: _STRING
    /** default="" */
    value_5?: _STRING
}

// Text Dictionary Keys [WAS Suite_Text]
export interface Text_Dictionary_Keys extends HasSingle_LIST, ComfyNode<Text_Dictionary_Keys_input, Text_Dictionary_Keys_output> {
    nameInComfy: "Text Dictionary Keys"
}
export interface Text_Dictionary_Keys_output {
    LIST: ComfyNodeOutput<'LIST', 0>,
}
export interface Text_Dictionary_Keys_input {
    dictionary: _DICT
}

// Text Dictionary To Text [WAS Suite_Text]
export interface Text_Dictionary_To_Text extends HasSingle_STRING, ComfyNode<Text_Dictionary_To_Text_input, Text_Dictionary_To_Text_output> {
    nameInComfy: "Text Dictionary To Text"
}
export interface Text_Dictionary_To_Text_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Dictionary_To_Text_input {
    dictionary: _DICT
}

// Text Add Tokens [WAS Suite_Text_Tokens]
export interface Text_Add_Tokens extends ComfyNode<Text_Add_Tokens_input, Text_Add_Tokens_output> {
    nameInComfy: "Text Add Tokens"
}
export interface Text_Add_Tokens_output {
}
export interface Text_Add_Tokens_input {
    /** default="[hello]: world" */
    tokens?: _STRING
    print_current_tokens: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Text Add Token by Input [WAS Suite_Text_Tokens]
export interface Text_Add_Token_by_Input extends ComfyNode<Text_Add_Token_by_Input_input, Text_Add_Token_by_Input_output> {
    nameInComfy: "Text Add Token by Input"
}
export interface Text_Add_Token_by_Input_output {
}
export interface Text_Add_Token_by_Input_input {
    /** */
    token_name: _STRING
    /** */
    token_value: _STRING
    print_current_tokens: Enum_ImageDrawRectangleRounded_top_left_corner
}

// Text Compare [WAS Suite_Text_Search]
export interface Text_Compare extends HasSingle_BOOLEAN, HasSingle_NUMBER, ComfyNode<Text_Compare_input, Text_Compare_output> {
    nameInComfy: "Text Compare"
}
export interface Text_Compare_output {
    TEXT_A_PASS: ComfyNodeOutput<'STRING', 0>,
    TEXT_B_PASS: ComfyNodeOutput<'STRING', 1>,
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 2>,
    SCORE_NUMBER: ComfyNodeOutput<'NUMBER', 3>,
    COMPARISON_TEXT: ComfyNodeOutput<'STRING', 4>,
}
export interface Text_Compare_input {
    /** */
    text_a: _STRING
    /** */
    text_b: _STRING
    mode: Enum_Text_Compare_mode
    /** default=0 min=1 max=1 step=0.01 */
    tolerance?: _FLOAT
}

// Text Concatenate [WAS Suite_Text]
export interface Text_Concatenate extends HasSingle_STRING, ComfyNode<Text_Concatenate_input, Text_Concatenate_output> {
    nameInComfy: "Text Concatenate"
}
export interface Text_Concatenate_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Concatenate_input {
    /** default=", " */
    delimiter?: _STRING
    clean_whitespace: Enum_ImageDrawRectangleRounded_top_left_corner
    /** */
    text_a?: _STRING
    /** */
    text_b?: _STRING
    /** */
    text_c?: _STRING
    /** */
    text_d?: _STRING
}

// Text File History Loader [WAS Suite_History]
export interface Text_File_History_Loader extends HasSingle_STRING, HasSingle_DICT, ComfyNode<Text_File_History_Loader_input, Text_File_History_Loader_output> {
    nameInComfy: "Text File History Loader"
}
export interface Text_File_History_Loader_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
    DICT: ComfyNodeOutput<'DICT', 1>,
}
export interface Text_File_History_Loader_input {
    file: Enum_Text_File_History_Loader_file
    /** default="[filename]" */
    dictionary_name?: _STRING
}

// Text Find and Replace by Dictionary [WAS Suite_Text_Search]
export interface Text_Find_and_Replace_by_Dictionary extends HasSingle_STRING, ComfyNode<Text_Find_and_Replace_by_Dictionary_input, Text_Find_and_Replace_by_Dictionary_output> {
    nameInComfy: "Text Find and Replace by Dictionary"
}
export interface Text_Find_and_Replace_by_Dictionary_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Find_and_Replace_by_Dictionary_input {
    /** */
    text: _STRING
    dictionary: _DICT
    /** default="__" */
    replacement_key?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Text Find and Replace Input [WAS Suite_Text_Search]
export interface Text_Find_and_Replace_Input extends HasSingle_STRING, HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Text_Find_and_Replace_Input_input, Text_Find_and_Replace_Input_output> {
    nameInComfy: "Text Find and Replace Input"
}
export interface Text_Find_and_Replace_Input_output {
    result_text: ComfyNodeOutput<'STRING', 0>,
    replacement_count_number: ComfyNodeOutput<'NUMBER', 1>,
    replacement_count_float: ComfyNodeOutput<'FLOAT', 2>,
    replacement_count_int: ComfyNodeOutput<'INT', 3>,
}
export interface Text_Find_and_Replace_Input_input {
    /** */
    text: _STRING
    /** */
    find: _STRING
    /** */
    replace: _STRING
}

// Text Find and Replace [WAS Suite_Text_Search]
export interface Text_Find_and_Replace extends HasSingle_STRING, HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<Text_Find_and_Replace_input, Text_Find_and_Replace_output> {
    nameInComfy: "Text Find and Replace"
}
export interface Text_Find_and_Replace_output {
    result_text: ComfyNodeOutput<'STRING', 0>,
    replacement_count_number: ComfyNodeOutput<'NUMBER', 1>,
    replacement_count_float: ComfyNodeOutput<'FLOAT', 2>,
    replacement_count_int: ComfyNodeOutput<'INT', 3>,
}
export interface Text_Find_and_Replace_input {
    /** */
    text: _STRING
    /** default="" */
    find?: _STRING
    /** default="" */
    replace?: _STRING
}

// Text Find [WAS Suite_Text_Search]
export interface Text_Find extends HasSingle_BOOLEAN, ComfyNode<Text_Find_input, Text_Find_output> {
    nameInComfy: "Text Find"
}
export interface Text_Find_output {
    found: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface Text_Find_input {
    /** */
    text: _STRING
    /** default="" */
    substring?: _STRING
    /** default="" */
    pattern?: _STRING
}

// Text Input Switch [WAS Suite_Logic]
export interface Text_Input_Switch extends HasSingle_STRING, ComfyNode<Text_Input_Switch_input, Text_Input_Switch_output> {
    nameInComfy: "Text Input Switch"
}
export interface Text_Input_Switch_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Input_Switch_input {
    /** */
    text_a: _STRING
    /** */
    text_b: _STRING
    /** */
    boolean: _BOOLEAN
}

// Text List [WAS Suite_Text]
export interface Text_List extends HasSingle_LIST, ComfyNode<Text_List_input, Text_List_output> {
    nameInComfy: "Text List"
}
export interface Text_List_output {
    LIST: ComfyNodeOutput<'LIST', 0>,
}
export interface Text_List_input {
    /** */
    text_a?: _STRING
    /** */
    text_b?: _STRING
    /** */
    text_c?: _STRING
    /** */
    text_d?: _STRING
    /** */
    text_e?: _STRING
    /** */
    text_f?: _STRING
    /** */
    text_g?: _STRING
}

// Text List Concatenate [WAS Suite_Text]
export interface Text_List_Concatenate extends HasSingle_LIST, ComfyNode<Text_List_Concatenate_input, Text_List_Concatenate_output> {
    nameInComfy: "Text List Concatenate"
}
export interface Text_List_Concatenate_output {
    LIST: ComfyNodeOutput<'LIST', 0>,
}
export interface Text_List_Concatenate_input {
    /** */
    list_a?: _LIST
    /** */
    list_b?: _LIST
    /** */
    list_c?: _LIST
    /** */
    list_d?: _LIST
}

// Text List to Text [WAS Suite_Text]
export interface Text_List_to_Text extends HasSingle_STRING, ComfyNode<Text_List_to_Text_input, Text_List_to_Text_output> {
    nameInComfy: "Text List to Text"
}
export interface Text_List_to_Text_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_List_to_Text_input {
    /** default=", " */
    delimiter?: _STRING
    /** */
    text_list: _LIST
}

// Text Load Line From File [WAS Suite_Text]
export interface Text_Load_Line_From_File extends HasSingle_STRING, HasSingle_DICT, ComfyNode<Text_Load_Line_From_File_input, Text_Load_Line_From_File_output> {
    nameInComfy: "Text Load Line From File"
}
export interface Text_Load_Line_From_File_output {
    line_text: ComfyNodeOutput<'STRING', 0>,
    dictionary: ComfyNodeOutput<'DICT', 1>,
}
export interface Text_Load_Line_From_File_input {
    /** default="" */
    file_path?: _STRING
    /** default="[filename]" */
    dictionary_name?: _STRING
    /** default="TextBatch" */
    label?: _STRING
    mode: Enum_Text_Load_Line_From_File_mode
    /** default=0 min=undefined step=1 */
    index?: _INT
    /** */
    multiline_text?: _STRING
}

// Text Multiline [WAS Suite_Text]
export interface Text_Multiline extends HasSingle_STRING, ComfyNode<Text_Multiline_input, Text_Multiline_output> {
    nameInComfy: "Text Multiline"
}
export interface Text_Multiline_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Multiline_input {
    /** default="" */
    text?: _STRING
}

// Text Multiline (Code Compatible) [WAS Suite_Text]
export interface Text_Multiline_$1Code_Compatible$2 extends HasSingle_STRING, ComfyNode<Text_Multiline_$1Code_Compatible$2_input, Text_Multiline_$1Code_Compatible$2_output> {
    nameInComfy: "Text Multiline (Code Compatible)"
}
export interface Text_Multiline_$1Code_Compatible$2_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Multiline_$1Code_Compatible$2_input {
    /** default="" */
    text?: _STRING
}

// Text Parse A1111 Embeddings [WAS Suite_Text_Parse]
export interface Text_Parse_A1111_Embeddings extends HasSingle_STRING, ComfyNode<Text_Parse_A1111_Embeddings_input, Text_Parse_A1111_Embeddings_output> {
    nameInComfy: "Text Parse A1111 Embeddings"
}
export interface Text_Parse_A1111_Embeddings_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Parse_A1111_Embeddings_input {
    /** */
    text: _STRING
}

// Text Parse Noodle Soup Prompts [WAS Suite_Text_Parse]
export interface Text_Parse_Noodle_Soup_Prompts extends HasSingle_STRING, ComfyNode<Text_Parse_Noodle_Soup_Prompts_input, Text_Parse_Noodle_Soup_Prompts_output> {
    nameInComfy: "Text Parse Noodle Soup Prompts"
}
export interface Text_Parse_Noodle_Soup_Prompts_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Parse_Noodle_Soup_Prompts_input {
    mode: Enum_CLIPTextEncode_$1NSP$2_mode
    /** default="__" */
    noodle_key?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** */
    text: _STRING
}

// Text Parse Tokens [WAS Suite_Text_Tokens]
export interface Text_Parse_Tokens extends HasSingle_STRING, ComfyNode<Text_Parse_Tokens_input, Text_Parse_Tokens_output> {
    nameInComfy: "Text Parse Tokens"
}
export interface Text_Parse_Tokens_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Parse_Tokens_input {
    /** */
    text: _STRING
}

// Text Random Line [WAS Suite_Text]
export interface Text_Random_Line extends HasSingle_STRING, ComfyNode<Text_Random_Line_input, Text_Random_Line_output> {
    nameInComfy: "Text Random Line"
}
export interface Text_Random_Line_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Random_Line_input {
    /** */
    text: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Text Random Prompt [WAS Suite_Text]
export interface Text_Random_Prompt extends HasSingle_STRING, ComfyNode<Text_Random_Prompt_input, Text_Random_Prompt_output> {
    nameInComfy: "Text Random Prompt"
}
export interface Text_Random_Prompt_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Random_Prompt_input {
    /** */
    search_seed: _STRING
}

// Text String [WAS Suite_Text]
export interface Text_String extends ComfyNode<Text_String_input, Text_String_output> {
    nameInComfy: "Text String"
}
export interface Text_String_output {
    TEXT: ComfyNodeOutput<'STRING', 0>,
    TEXT_B: ComfyNodeOutput<'STRING', 1>,
    TEXT_C: ComfyNodeOutput<'STRING', 2>,
    TEXT_D: ComfyNodeOutput<'STRING', 3>,
}
export interface Text_String_input {
    /** default="" */
    text?: _STRING
    /** default="" */
    text_b?: _STRING
    /** default="" */
    text_c?: _STRING
    /** default="" */
    text_d?: _STRING
}

// Text Contains [WAS Suite_Logic]
export interface Text_Contains extends HasSingle_BOOLEAN, ComfyNode<Text_Contains_input, Text_Contains_output> {
    nameInComfy: "Text Contains"
}
export interface Text_Contains_output {
    BOOLEAN: ComfyNodeOutput<'BOOLEAN', 0>,
}
export interface Text_Contains_input {
    /** default="" */
    text?: _STRING
    /** default="" */
    sub_text?: _STRING
    /** default=true */
    case_insensitive?: _BOOLEAN
}

// Text Shuffle [WAS Suite_Text_Operations]
export interface Text_Shuffle extends HasSingle_STRING, ComfyNode<Text_Shuffle_input, Text_Shuffle_output> {
    nameInComfy: "Text Shuffle"
}
export interface Text_Shuffle_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Shuffle_input {
    /** */
    text: _STRING
    /** default="," */
    separator?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Text Sort [WAS Suite_Text_Operations]
export interface Text_Sort extends HasSingle_STRING, ComfyNode<Text_Sort_input, Text_Sort_output> {
    nameInComfy: "Text Sort"
}
export interface Text_Sort_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_Sort_input {
    /** */
    text: _STRING
    /** default=", " */
    separator?: _STRING
}

// Text to Conditioning [WAS Suite_Text_Operations]
export interface Text_to_Conditioning extends HasSingle_CONDITIONING, ComfyNode<Text_to_Conditioning_input, Text_to_Conditioning_output> {
    nameInComfy: "Text to Conditioning"
}
export interface Text_to_Conditioning_output {
    CONDITIONING: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface Text_to_Conditioning_input {
    clip: _CLIP
    /** */
    text: _STRING
}

// Text to Console [WAS Suite_Debug]
export interface Text_to_Console extends HasSingle_STRING, ComfyNode<Text_to_Console_input, Text_to_Console_output> {
    nameInComfy: "Text to Console"
}
export interface Text_to_Console_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_to_Console_input {
    /** */
    text: _STRING
    /** default="Text Output" */
    label?: _STRING
}

// Text to Number [WAS Suite_Text_Operations]
export interface Text_to_Number extends HasSingle_NUMBER, ComfyNode<Text_to_Number_input, Text_to_Number_output> {
    nameInComfy: "Text to Number"
}
export interface Text_to_Number_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
}
export interface Text_to_Number_input {
    /** */
    text: _STRING
}

// Text to String [WAS Suite_Text_Operations]
export interface Text_to_String extends HasSingle_STRING, ComfyNode<Text_to_String_input, Text_to_String_output> {
    nameInComfy: "Text to String"
}
export interface Text_to_String_output {
    STRING: ComfyNodeOutput<'STRING', 0>,
}
export interface Text_to_String_input {
    /** */
    text: _STRING
}

// Text String Truncate [WAS Suite_Text_Operations]
export interface Text_String_Truncate extends ComfyNode<Text_String_Truncate_input, Text_String_Truncate_output> {
    nameInComfy: "Text String Truncate"
}
export interface Text_String_Truncate_output {
    TEXT: ComfyNodeOutput<'STRING', 0>,
    TEXT_B: ComfyNodeOutput<'STRING', 1>,
    TEXT_C: ComfyNodeOutput<'STRING', 2>,
    TEXT_D: ComfyNodeOutput<'STRING', 3>,
}
export interface Text_String_Truncate_input {
    /** */
    text: _STRING
    truncate_by: Enum_Text_String_Truncate_truncate_by
    truncate_from: Enum_Text_String_Truncate_truncate_from
    /** default=10 min=99999999 max=99999999 step=1 */
    truncate_to?: _INT
    /** */
    text_b?: _STRING
    /** */
    text_c?: _STRING
    /** */
    text_d?: _STRING
}

// True Random.org Number Generator [WAS Suite_Number]
export interface True_Random$5org_Number_Generator extends HasSingle_NUMBER, HasSingle_FLOAT, HasSingle_INT, ComfyNode<True_Random$5org_Number_Generator_input, True_Random$5org_Number_Generator_output> {
    nameInComfy: "True Random.org Number Generator"
}
export interface True_Random$5org_Number_Generator_output {
    NUMBER: ComfyNodeOutput<'NUMBER', 0>,
    FLOAT: ComfyNodeOutput<'FLOAT', 1>,
    INT: ComfyNodeOutput<'INT', 2>,
}
export interface True_Random$5org_Number_Generator_input {
    /** default="00000000-0000-0000-0000-000000000000" */
    api_key?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    minimum?: _FLOAT
    /** default=10000000 min=18446744073709552000 max=18446744073709552000 */
    maximum?: _FLOAT
    mode: Enum_LatentBatchSeedBehavior_seed_behavior
}

// unCLIP Checkpoint Loader [WAS Suite_Loaders]
export interface unCLIP_Checkpoint_Loader extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_CLIP_VISION, HasSingle_STRING, ComfyNode<unCLIP_Checkpoint_Loader_input, unCLIP_Checkpoint_Loader_output> {
    nameInComfy: "unCLIP Checkpoint Loader"
}
export interface unCLIP_Checkpoint_Loader_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    CLIP_VISION: ComfyNodeOutput<'CLIP_VISION', 3>,
    NAME_STRING: ComfyNodeOutput<'STRING', 4>,
}
export interface unCLIP_Checkpoint_Loader_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
}

// Upscale Model Loader [WAS Suite_Loaders]
export interface Upscale_Model_Loader extends HasSingle_UPSCALE_MODEL, HasSingle_STRING, ComfyNode<Upscale_Model_Loader_input, Upscale_Model_Loader_output> {
    nameInComfy: "Upscale Model Loader"
}
export interface Upscale_Model_Loader_output {
    UPSCALE_MODEL: ComfyNodeOutput<'UPSCALE_MODEL', 0>,
    MODEL_NAME_TEXT: ComfyNodeOutput<'STRING', 1>,
}
export interface Upscale_Model_Loader_input {
    model_name: Enum_UpscaleModelLoader_model_name
}

// Upscale Model Switch [WAS Suite_Logic]
export interface Upscale_Model_Switch extends HasSingle_UPSCALE_MODEL, ComfyNode<Upscale_Model_Switch_input, Upscale_Model_Switch_output> {
    nameInComfy: "Upscale Model Switch"
}
export interface Upscale_Model_Switch_output {
    UPSCALE_MODEL: ComfyNodeOutput<'UPSCALE_MODEL', 0>,
}
export interface Upscale_Model_Switch_input {
    upscale_model_a: _UPSCALE_MODEL
    upscale_model_b: _UPSCALE_MODEL
    /** */
    boolean: _BOOLEAN
}

// Write to GIF [WAS Suite_Animation_Writer]
export interface Write_to_GIF extends HasSingle_IMAGE, ComfyNode<Write_to_GIF_input, Write_to_GIF_output> {
    nameInComfy: "Write to GIF"
}
export interface Write_to_GIF_output {
    image_pass: ComfyNodeOutput<'IMAGE', 0>,
    filepath_text: ComfyNodeOutput<'STRING', 1>,
    filename_text: ComfyNodeOutput<'STRING', 2>,
}
export interface Write_to_GIF_input {
    image: _IMAGE
    /** default=30 min=60 max=60 step=1 */
    transition_frames?: _INT
    /** default=2500 min=60000 max=60000 step=0.1 */
    image_delay_ms?: _FLOAT
    /** default=0.1 min=60000 max=60000 step=0.1 */
    duration_ms?: _FLOAT
    /** default=0 min=100 max=100 step=1 */
    loops?: _INT
    /** default=512 min=1280 max=1280 step=1 */
    max_size?: _INT
    /** default="C:\\Users\\user\\Downloads\\comfy_FULL\\ComfyUI\\output" */
    output_path?: _STRING
    /** default="morph_writer" */
    filename?: _STRING
}

// Write to Video [WAS Suite_Animation_Writer]
export interface Write_to_Video extends HasSingle_IMAGE, ComfyNode<Write_to_Video_input, Write_to_Video_output> {
    nameInComfy: "Write to Video"
}
export interface Write_to_Video_output {
    IMAGE_PASS: ComfyNodeOutput<'IMAGE', 0>,
    filepath_text: ComfyNodeOutput<'STRING', 1>,
    filename_text: ComfyNodeOutput<'STRING', 2>,
}
export interface Write_to_Video_input {
    image: _IMAGE
    /** default=30 min=120 max=120 step=1 */
    transition_frames?: _INT
    /** default=2.5 min=60000 max=60000 step=0.1 */
    image_delay_sec?: _FLOAT
    /** default=30 min=60 max=60 step=1 */
    fps?: _INT
    /** default=512 min=1920 max=1920 step=1 */
    max_size?: _INT
    /** default="./ComfyUI/output" */
    output_path?: _STRING
    /** default="comfy_writer" */
    filename?: _STRING
    codec: Enum_Create_Video_from_Path_codec
}

// VAE Input Switch [WAS Suite_Logic]
export interface VAE_Input_Switch extends HasSingle_VAE, ComfyNode<VAE_Input_Switch_input, VAE_Input_Switch_output> {
    nameInComfy: "VAE Input Switch"
}
export interface VAE_Input_Switch_output {
    VAE: ComfyNodeOutput<'VAE', 0>,
}
export interface VAE_Input_Switch_input {
    vae_a: _VAE
    vae_b: _VAE
    /** */
    boolean: _BOOLEAN
}

// Video Dump Frames [WAS Suite_Animation]
export interface Video_Dump_Frames extends HasSingle_STRING, HasSingle_NUMBER, ComfyNode<Video_Dump_Frames_input, Video_Dump_Frames_output> {
    nameInComfy: "Video Dump Frames"
}
export interface Video_Dump_Frames_output {
    output_path: ComfyNodeOutput<'STRING', 0>,
    processed_count: ComfyNodeOutput<'NUMBER', 1>,
}
export interface Video_Dump_Frames_input {
    /** default="./ComfyUI/input/MyVideo.mp4" */
    video_path?: _STRING
    /** default="./ComfyUI/input/MyVideo" */
    output_path?: _STRING
    /** default="frame_" */
    prefix?: _STRING
    /** default=4 min=8 max=8 step=1 */
    filenumber_digits?: _INT
    extension: Enum_Video_Dump_Frames_extension
}

// CLIPSEG2 [image_transformation]
export interface CLIPSEG2 extends HasSingle_IMAGE, ComfyNode<CLIPSEG2_input, CLIPSEG2_output> {
    nameInComfy: "CLIPSEG2"
}
export interface CLIPSEG2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface CLIPSEG2_input {
    image: _IMAGE
    /** default="" */
    text?: _STRING
    /** default=false */
    use_cuda?: _BOOLEAN
    clipseg_model?: _CLIPSEG_MODEL
}

// CLIPTextEncode (BlenderNeko Advanced + NSP) [WAS Suite_Conditioning]
export interface CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2 extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_input, CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_output> {
    nameInComfy: "CLIPTextEncode (BlenderNeko Advanced + NSP)"
}
export interface CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_output {
    conditioning: ComfyNodeOutput<'CONDITIONING', 0>,
    parsed_text: ComfyNodeOutput<'STRING', 1>,
    raw_text: ComfyNodeOutput<'STRING', 2>,
}
export interface CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2_input {
    mode: Enum_CLIPTextEncode_$1NSP$2_mode
    /** default="__" */
    noodle_key?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    clip: _CLIP
    token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    weight_interpretation: Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation
    /** */
    text: _STRING
}

// ConditioningBlend [conditioning]
export interface ConditioningBlend extends HasSingle_CONDITIONING, ComfyNode<ConditioningBlend_input, ConditioningBlend_output> {
    nameInComfy: "ConditioningBlend"
}
export interface ConditioningBlend_output {
    conditioning: ComfyNodeOutput<'CONDITIONING', 0>,
}
export interface ConditioningBlend_input {
    conditioning_a: _CONDITIONING
    conditioning_b: _CONDITIONING
    blending_mode: Enum_ConditioningBlend_blending_mode
    /** default=0.5 min=10 max=10 step=0.001 */
    blending_strength?: _FLOAT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// DebugInput [debug]
export interface DebugInput extends ComfyNode<DebugInput_input, DebugInput_output> {
    nameInComfy: "DebugInput"
}
export interface DebugInput_output {
}
export interface DebugInput_input {
    /** */
    input: _$Star
}

// VAEEncodeForInpaint (WAS) [latent_inpaint]
export interface VAEEncodeForInpaint_$1WAS$2 extends HasSingle_LATENT, ComfyNode<VAEEncodeForInpaint_$1WAS$2_input, VAEEncodeForInpaint_$1WAS$2_output> {
    nameInComfy: "VAEEncodeForInpaint (WAS)"
}
export interface VAEEncodeForInpaint_$1WAS$2_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface VAEEncodeForInpaint_$1WAS$2_input {
    pixels: _IMAGE
    vae: _VAE
    mask: _MASK
    /** default=6 min=128 max=128 step=1 */
    mask_offset?: _INT
}

// VividSharpen [image_postprocessing]
export interface VividSharpen extends HasSingle_IMAGE, ComfyNode<VividSharpen_input, VividSharpen_output> {
    nameInComfy: "VividSharpen"
}
export interface VividSharpen_output {
    images: ComfyNodeOutput<'IMAGE', 0>,
}
export interface VividSharpen_input {
    images: _IMAGE
    /** default=1.5 min=64 max=64 step=0.01 */
    radius?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    strength?: _FLOAT
}

// CLIPTextEncodeList [conditioning]
export interface CLIPTextEncodeList extends HasSingle_CONDITIONING_SEQ, ComfyNode<CLIPTextEncodeList_input, CLIPTextEncodeList_output> {
    nameInComfy: "CLIPTextEncodeList"
}
export interface CLIPTextEncodeList_output {
    conditioning_sequence: ComfyNodeOutput<'CONDITIONING_SEQ', 0>,
}
export interface CLIPTextEncodeList_input {
    clip: _CLIP
    token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    weight_interpretation: Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation
    /** default="0:A portrait of a rosebud\n5:A portrait of a blooming rosebud\n10:A portrait of a blooming rose\n15:A portrait of a rose" */
    text?: _STRING
}

// CLIPTextEncodeSequence2 [conditioning]
export interface CLIPTextEncodeSequence2 extends HasSingle_CONDITIONING, ComfyNode<CLIPTextEncodeSequence2_input, CLIPTextEncodeSequence2_output> {
    nameInComfy: "CLIPTextEncodeSequence2"
}
export interface CLIPTextEncodeSequence2_output {
    conditioning_sequence: ComfyNodeOutput<'CONDITIONING', 0>,
    cond_keyframes: ComfyNodeOutput<'INT', 1>,
    frame_count: ComfyNodeOutput<'INT', 2>,
}
export interface CLIPTextEncodeSequence2_input {
    clip: _CLIP
    token_normalization: Enum_WildcardEncode_$3$3Inspire_token_normalization
    weight_interpretation: Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation
    cond_keyframes_type: Enum_CLIPTextEncodeSequence2_cond_keyframes_type
    /** default=100 min=1024 max=1024 step=1 */
    frame_count?: _INT
    /** default="A portrait of a rosebud\nA portrait of a blooming rosebud\nA portrait of a blooming rose\nA portrait of a rose" */
    text?: _STRING
}

// KSamplerSeq [sampling]
export interface KSamplerSeq extends HasSingle_LATENT, ComfyNode<KSamplerSeq_input, KSamplerSeq_output> {
    nameInComfy: "KSamplerSeq"
}
export interface KSamplerSeq_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface KSamplerSeq_input {
    model: _MODEL
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    seed_mode_seq: Enum_KSamplerSeq_seed_mode_seq
    /** default=true */
    alternate_values?: _BOOLEAN
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.5 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=20 min=1024 max=1024 step=1 */
    sequence_loop_count?: _INT
    positive_seq: _CONDITIONING_SEQ
    negative_seq: _CONDITIONING_SEQ
    /** default=false */
    use_conditioning_slerp?: _BOOLEAN
    /** default=0.5 min=1 max=1 step=0.001 */
    cond_slerp_strength?: _FLOAT
    latent_image: _LATENT
    /** default=false */
    use_latent_interpolation?: _BOOLEAN
    latent_interpolation_mode: Enum_KSamplerSeq_latent_interpolation_mode
    /** default=0.5 min=1 max=1 step=0.001 */
    latent_interp_strength?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    denoise_start?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise_seq?: _FLOAT
    /** default=false */
    unsample_latents?: _BOOLEAN
}

// KSamplerSeq2 [sampling]
export interface KSamplerSeq2 extends HasSingle_LATENT, ComfyNode<KSamplerSeq2_input, KSamplerSeq2_output> {
    nameInComfy: "KSamplerSeq2"
}
export interface KSamplerSeq2_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface KSamplerSeq2_input {
    model: _MODEL
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    seed_mode_seq: Enum_KSamplerSeq_seed_mode_seq
    /** default=true */
    alternate_values?: _BOOLEAN
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 step=0.5 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    /** default=0 min=1024 max=1024 step=1 */
    frame_count?: _INT
    /** default=0 min=1024 max=1024 step=1 */
    cond_keyframes?: _INT
    positive_seq: _CONDITIONING
    negative_seq: _CONDITIONING
    /** default=false */
    use_conditioning_slerp?: _BOOLEAN
    /** default=0.5 min=1 max=1 step=0.001 */
    cond_slerp_strength?: _FLOAT
    latent_image: _LATENT
    /** default=false */
    use_latent_interpolation?: _BOOLEAN
    latent_interpolation_mode: Enum_KSamplerSeq_latent_interpolation_mode
    /** default=0.5 min=1 max=1 step=0.001 */
    latent_interp_strength?: _FLOAT
    /** default=1 min=1 max=1 step=0.01 */
    denoise_start?: _FLOAT
    /** default=0.5 min=1 max=1 step=0.01 */
    denoise_seq?: _FLOAT
    /** default=false */
    unsample_latents?: _BOOLEAN
    /** default=true */
    inject_noise?: _BOOLEAN
    /** default=0.1 min=1 max=1 step=0.001 */
    noise_strength?: _FLOAT
    /** default=true */
    denoise_sine?: _BOOLEAN
    /** default=0.9 min=1 max=1 step=0.001 */
    denoise_max?: _FLOAT
    /** default=true */
    seed_keying?: _BOOLEAN
    seed_keying_mode: Enum_KSamplerSeq2_seed_keying_mode
    /** default=4 min=1024 max=1024 step=1 */
    seed_divisor?: _INT
}

// BLVAEEncode [latent]
export interface BLVAEEncode extends HasSingle_LATENT, ComfyNode<BLVAEEncode_input, BLVAEEncode_output> {
    nameInComfy: "BLVAEEncode"
}
export interface BLVAEEncode_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
}
export interface BLVAEEncode_input {
    vae: _VAE
    /** default=false */
    tiled?: _BOOLEAN
    /** default=512 min=4096 max=4096 step=64 */
    tile_size?: _INT
    /** default=true */
    store_or_load_latent?: _BOOLEAN
    /** default=true */
    remove_latent_on_load?: _BOOLEAN
    /** default=false */
    delete_workflow_latent?: _BOOLEAN
    image?: _IMAGE
}

// SaveImageWebsocket [api_image]
export interface SaveImageWebsocket extends ComfyNode<SaveImageWebsocket_input, SaveImageWebsocket_output> {
    nameInComfy: "SaveImageWebsocket"
}
export interface SaveImageWebsocket_output {
}
export interface SaveImageWebsocket_input {
    images: _IMAGE
}

// Checkpoint Loader w/Name (WLSH) [WLSH Nodes_loaders]
export interface Checkpoint_Loader_w$3Name_$1WLSH$2 extends HasSingle_MODEL, HasSingle_CLIP, HasSingle_VAE, HasSingle_STRING, ComfyNode<Checkpoint_Loader_w$3Name_$1WLSH$2_input, Checkpoint_Loader_w$3Name_$1WLSH$2_output> {
    nameInComfy: "Checkpoint Loader w/Name (WLSH)"
}
export interface Checkpoint_Loader_w$3Name_$1WLSH$2_output {
    MODEL: ComfyNodeOutput<'MODEL', 0>,
    CLIP: ComfyNodeOutput<'CLIP', 1>,
    VAE: ComfyNodeOutput<'VAE', 2>,
    modelname: ComfyNodeOutput<'STRING', 3>,
}
export interface Checkpoint_Loader_w$3Name_$1WLSH$2_input {
    ckpt_name: Enum_CheckpointLoaderSimple_ckpt_name
}

// KSamplerAdvanced (WLSH) [WLSH Nodes_sampling]
export interface KSamplerAdvanced_$1WLSH$2 extends HasSingle_LATENT, HasSingle_INFO, ComfyNode<KSamplerAdvanced_$1WLSH$2_input, KSamplerAdvanced_$1WLSH$2_output> {
    nameInComfy: "KSamplerAdvanced (WLSH)"
}
export interface KSamplerAdvanced_$1WLSH$2_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
    INFO: ComfyNodeOutput<'INFO', 1>,
}
export interface KSamplerAdvanced_$1WLSH$2_input {
    model: _MODEL
    add_noise: Enum_KSamplerAdvanced_add_noise
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=20 min=10000 max=10000 */
    steps?: _INT
    /** default=8 min=100 max=100 */
    cfg?: _FLOAT
    sampler_name: Enum_KSampler_sampler_name
    scheduler: Enum_KSampler_scheduler
    positive: _CONDITIONING
    negative: _CONDITIONING
    latent_image: _LATENT
    /** default=0 min=10000 max=10000 */
    start_at_step?: _INT
    /** default=10000 min=10000 max=10000 */
    end_at_step?: _INT
    return_with_leftover_noise: Enum_KSamplerAdvanced_add_noise
    /** default=1 min=1 max=1 step=0.01 */
    denoise?: _FLOAT
}

// CLIP Positive-Negative (WLSH) [WLSH Nodes_conditioning]
export interface CLIP_Positive$7Negative_$1WLSH$2 extends ComfyNode<CLIP_Positive$7Negative_$1WLSH$2_input, CLIP_Positive$7Negative_$1WLSH$2_output> {
    nameInComfy: "CLIP Positive-Negative (WLSH)"
}
export interface CLIP_Positive$7Negative_$1WLSH$2_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface CLIP_Positive$7Negative_$1WLSH$2_input {
    clip: _CLIP
    /** default="" */
    positive_text?: _STRING
    /** default="" */
    negative_text?: _STRING
}

// CLIP Positive-Negative w/Text (WLSH) [WLSH Nodes_conditioning]
export interface CLIP_Positive$7Negative_w$3Text_$1WLSH$2 extends ComfyNode<CLIP_Positive$7Negative_w$3Text_$1WLSH$2_input, CLIP_Positive$7Negative_w$3Text_$1WLSH$2_output> {
    nameInComfy: "CLIP Positive-Negative w/Text (WLSH)"
}
export interface CLIP_Positive$7Negative_w$3Text_$1WLSH$2_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    positive_text: ComfyNodeOutput<'STRING', 2>,
    negative_text: ComfyNodeOutput<'STRING', 3>,
}
export interface CLIP_Positive$7Negative_w$3Text_$1WLSH$2_input {
    /** */
    positive: _STRING
    /** */
    negative: _STRING
    clip: _CLIP
}

// CLIP Positive-Negative XL (WLSH) [WLSH Nodes_conditioning]
export interface CLIP_Positive$7Negative_XL_$1WLSH$2 extends ComfyNode<CLIP_Positive$7Negative_XL_$1WLSH$2_input, CLIP_Positive$7Negative_XL_$1WLSH$2_output> {
    nameInComfy: "CLIP Positive-Negative XL (WLSH)"
}
export interface CLIP_Positive$7Negative_XL_$1WLSH$2_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
}
export interface CLIP_Positive$7Negative_XL_$1WLSH$2_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    /** default=0 min=8192 max=8192 */
    crop_w?: _INT
    /** default=0 min=8192 max=8192 */
    crop_h?: _INT
    /** default=1024 min=8192 max=8192 */
    target_width?: _INT
    /** default=1024 min=8192 max=8192 */
    target_height?: _INT
    /** default="POS_G" */
    positive_g?: _STRING
    /** default="POS_L" */
    positive_l?: _STRING
    /** default="NEG_G" */
    negative_g?: _STRING
    /** default="NEG_L" */
    negative_l?: _STRING
    clip: _CLIP
}

// CLIP Positive-Negative XL w/Text (WLSH) [WLSH Nodes_conditioning]
export interface CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2 extends ComfyNode<CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2_input, CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2_output> {
    nameInComfy: "CLIP Positive-Negative XL w/Text (WLSH)"
}
export interface CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    positive_text: ComfyNodeOutput<'STRING', 2>,
    negative_text: ComfyNodeOutput<'STRING', 3>,
}
export interface CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2_input {
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
    /** default=0 min=8192 max=8192 */
    crop_w?: _INT
    /** default=0 min=8192 max=8192 */
    crop_h?: _INT
    /** default=1024 min=8192 max=8192 */
    target_width?: _INT
    /** default=1024 min=8192 max=8192 */
    target_height?: _INT
    /** default="POS_G" */
    positive_g?: _STRING
    /** default="POS_L" */
    positive_l?: _STRING
    /** default="NEG_G" */
    negative_g?: _STRING
    /** default="NEG_L" */
    negative_l?: _STRING
    clip: _CLIP
}

// CLIP +/- w/Text Unified (WLSH) [WLSH Nodes_conditioning]
export interface CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2 extends ComfyNode<CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_input, CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_output> {
    nameInComfy: "CLIP +/- w/Text Unified (WLSH)"
}
export interface CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_output {
    positive: ComfyNodeOutput<'CONDITIONING', 0>,
    negative: ComfyNodeOutput<'CONDITIONING', 1>,
    positive_text: ComfyNodeOutput<'STRING', 2>,
    negative_text: ComfyNodeOutput<'STRING', 3>,
}
export interface CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_input {
    /** default="" */
    positive?: _STRING
    /** default="" */
    negative?: _STRING
    clip: _CLIP
    conditioner: Enum_CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_conditioner
    /** default=1024 min=8192 max=8192 */
    width?: _INT
    /** default=1024 min=8192 max=8192 */
    height?: _INT
}

// Empty Latent by Pixels (WLSH) [WLSH Nodes_latent]
export interface Empty_Latent_by_Pixels_$1WLSH$2 extends HasSingle_LATENT, ComfyNode<Empty_Latent_by_Pixels_$1WLSH$2_input, Empty_Latent_by_Pixels_$1WLSH$2_output> {
    nameInComfy: "Empty Latent by Pixels (WLSH)"
}
export interface Empty_Latent_by_Pixels_$1WLSH$2_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface Empty_Latent_by_Pixels_$1WLSH$2_input {
    aspect: Enum_Empty_Latent_by_Pixels_$1WLSH$2_aspect
    direction: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
    /** default=1 min=16 max=16 step=0.01 */
    megapixels?: _FLOAT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// Empty Latent by Ratio (WLSH) [WLSH Nodes_latent]
export interface Empty_Latent_by_Ratio_$1WLSH$2 extends HasSingle_LATENT, ComfyNode<Empty_Latent_by_Ratio_$1WLSH$2_input, Empty_Latent_by_Ratio_$1WLSH$2_output> {
    nameInComfy: "Empty Latent by Ratio (WLSH)"
}
export interface Empty_Latent_by_Ratio_$1WLSH$2_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface Empty_Latent_by_Ratio_$1WLSH$2_input {
    aspect: Enum_Empty_Latent_by_Ratio_$1WLSH$2_aspect
    direction: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
    /** default=512 min=8192 max=8192 step=64 */
    shortside?: _INT
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// Empty Latent by Size (WLSH) [WLSH Nodes_latent]
export interface Empty_Latent_by_Size_$1WLSH$2 extends HasSingle_LATENT, ComfyNode<Empty_Latent_by_Size_$1WLSH$2_input, Empty_Latent_by_Size_$1WLSH$2_output> {
    nameInComfy: "Empty Latent by Size (WLSH)"
}
export interface Empty_Latent_by_Size_$1WLSH$2_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface Empty_Latent_by_Size_$1WLSH$2_input {
    /** default=512 min=8192 max=8192 step=8 */
    width?: _INT
    /** default=512 min=8192 max=8192 step=8 */
    height?: _INT
    /** default=1 min=4096 max=4096 */
    batch_size?: _INT
}

// SDXL Quick Empty Latent (WLSH) [WLSH Nodes_latent]
export interface SDXL_Quick_Empty_Latent_$1WLSH$2 extends HasSingle_LATENT, ComfyNode<SDXL_Quick_Empty_Latent_$1WLSH$2_input, SDXL_Quick_Empty_Latent_$1WLSH$2_output> {
    nameInComfy: "SDXL Quick Empty Latent (WLSH)"
}
export interface SDXL_Quick_Empty_Latent_$1WLSH$2_output {
    latent: ComfyNodeOutput<'LATENT', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface SDXL_Quick_Empty_Latent_$1WLSH$2_input {
    resolution: Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution
    direction: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
    /** default=1 min=64 max=64 */
    batch_size?: _INT
}

// Image Load with Metadata (WLSH) [WLSH Nodes_image]
export interface Image_Load_with_Metadata_$1WLSH$2 extends HasSingle_IMAGE, HasSingle_FLOAT, ComfyNode<Image_Load_with_Metadata_$1WLSH$2_input, Image_Load_with_Metadata_$1WLSH$2_output> {
    nameInComfy: "Image Load with Metadata (WLSH)"
}
export interface Image_Load_with_Metadata_$1WLSH$2_output {
    image: ComfyNodeOutput<'IMAGE', 0>,
    positive: ComfyNodeOutput<'STRING', 1>,
    negative: ComfyNodeOutput<'STRING', 2>,
    seed: ComfyNodeOutput<'INT', 3>,
    steps: ComfyNodeOutput<'INT', 4>,
    cfg: ComfyNodeOutput<'FLOAT', 5>,
    width: ComfyNodeOutput<'INT', 6>,
    height: ComfyNodeOutput<'INT', 7>,
}
export interface Image_Load_with_Metadata_$1WLSH$2_input {
    verbose: Enum_ImageDrawRectangleRounded_top_left_corner
    /** */
    image: Enum_LoadImage_image
}

// Grayscale Image (WLSH) [WLSH Nodes_image]
export interface Grayscale_Image_$1WLSH$2 extends HasSingle_IMAGE, ComfyNode<Grayscale_Image_$1WLSH$2_input, Grayscale_Image_$1WLSH$2_output> {
    nameInComfy: "Grayscale Image (WLSH)"
}
export interface Grayscale_Image_$1WLSH$2_output {
    grayscale: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Grayscale_Image_$1WLSH$2_input {
    original: _IMAGE
}

// Generate Border Mask (WLSH) [WLSH Nodes_inpainting]
export interface Generate_Border_Mask_$1WLSH$2 extends HasSingle_IMAGE, ComfyNode<Generate_Border_Mask_$1WLSH$2_input, Generate_Border_Mask_$1WLSH$2_output> {
    nameInComfy: "Generate Border Mask (WLSH)"
}
export interface Generate_Border_Mask_$1WLSH$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Generate_Border_Mask_$1WLSH$2_input {
    image: _IMAGE
    direction: Enum_ImageConcanate_direction
    /** default=128 min=512 max=512 step=32 */
    pixels?: _INT
    /** default=64 min=256 max=256 step=16 */
    overlap?: _INT
}

// Outpaint to Image (WLSH) [WLSH Nodes_inpainting]
export interface Outpaint_to_Image_$1WLSH$2 extends HasSingle_IMAGE, HasSingle_MASK, ComfyNode<Outpaint_to_Image_$1WLSH$2_input, Outpaint_to_Image_$1WLSH$2_output> {
    nameInComfy: "Outpaint to Image (WLSH)"
}
export interface Outpaint_to_Image_$1WLSH$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    MASK: ComfyNodeOutput<'MASK', 1>,
}
export interface Outpaint_to_Image_$1WLSH$2_input {
    image: _IMAGE
    direction: Enum_ImageConcanate_direction
    /** default=128 min=512 max=512 step=32 */
    pixels?: _INT
    /** default=12 min=64 max=64 step=4 */
    mask_padding?: _INT
}

// VAE Encode for Inpaint w/Padding (WLSH) [WLSH Nodes_inpainting]
export interface VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2 extends HasSingle_LATENT, ComfyNode<VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2_input, VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2_output> {
    nameInComfy: "VAE Encode for Inpaint w/Padding (WLSH)"
}
export interface VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2_output {
    LATENT: ComfyNodeOutput<'LATENT', 0>,
}
export interface VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2_input {
    pixels: _IMAGE
    vae: _VAE
    mask: _MASK
    /** default=24 min=128 max=128 step=2 */
    mask_padding?: _INT
}

// Image Scale By Factor (WLSH) [WLSH Nodes_upscaling]
export interface Image_Scale_By_Factor_$1WLSH$2 extends HasSingle_IMAGE, ComfyNode<Image_Scale_By_Factor_$1WLSH$2_input, Image_Scale_By_Factor_$1WLSH$2_output> {
    nameInComfy: "Image Scale By Factor (WLSH)"
}
export interface Image_Scale_By_Factor_$1WLSH$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Image_Scale_By_Factor_$1WLSH$2_input {
    original: _IMAGE
    upscale_method: Enum_LatentUpscaleFactor_$_O_upscale_method
    /** default=2 min=8 max=8 step=0.1 */
    factor?: _FLOAT
}

// Image Scale by Shortside (WLSH) [WLSH Nodes_upscaling]
export interface Image_Scale_by_Shortside_$1WLSH$2 extends HasSingle_IMAGE, ComfyNode<Image_Scale_by_Shortside_$1WLSH$2_input, Image_Scale_by_Shortside_$1WLSH$2_output> {
    nameInComfy: "Image Scale by Shortside (WLSH)"
}
export interface Image_Scale_by_Shortside_$1WLSH$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
    width: ComfyNodeOutput<'INT', 1>,
    height: ComfyNodeOutput<'INT', 2>,
}
export interface Image_Scale_by_Shortside_$1WLSH$2_input {
    original: _IMAGE
    upscale_method: Enum_LatentUpscaleFactor_$_O_upscale_method
    /** default=512 min=4096 max=4096 step=32 */
    shortside?: _INT
}

// SDXL Quick Image Scale (WLSH) [WLSH Nodes_upscaling]
export interface SDXL_Quick_Image_Scale_$1WLSH$2 extends HasSingle_IMAGE, ComfyNode<SDXL_Quick_Image_Scale_$1WLSH$2_input, SDXL_Quick_Image_Scale_$1WLSH$2_output> {
    nameInComfy: "SDXL Quick Image Scale (WLSH)"
}
export interface SDXL_Quick_Image_Scale_$1WLSH$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface SDXL_Quick_Image_Scale_$1WLSH$2_input {
    original: _IMAGE
    upscale_method: Enum_LatentUpscaleFactor_$_O_upscale_method
    resolution: Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution
    direction: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
    crop: Enum_LatentUpscale_crop
}

// Upscale by Factor with Model (WLSH) [WLSH Nodes_upscaling]
export interface Upscale_by_Factor_with_Model_$1WLSH$2 extends HasSingle_IMAGE, ComfyNode<Upscale_by_Factor_with_Model_$1WLSH$2_input, Upscale_by_Factor_with_Model_$1WLSH$2_output> {
    nameInComfy: "Upscale by Factor with Model (WLSH)"
}
export interface Upscale_by_Factor_with_Model_$1WLSH$2_output {
    IMAGE: ComfyNodeOutput<'IMAGE', 0>,
}
export interface Upscale_by_Factor_with_Model_$1WLSH$2_input {
    upscale_model: _UPSCALE_MODEL
    image: _IMAGE
    upscale_method: Enum_LatentUpscaleFactor_$_O_upscale_method
    /** default=2 min=8 max=8 step=0.1 */
    factor?: _FLOAT
}

// Multiply Integer (WLSH) [WLSH Nodes_number]
export interface Multiply_Integer_$1WLSH$2 extends HasSingle_INT, ComfyNode<Multiply_Integer_$1WLSH$2_input, Multiply_Integer_$1WLSH$2_output> {
    nameInComfy: "Multiply Integer (WLSH)"
}
export interface Multiply_Integer_$1WLSH$2_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface Multiply_Integer_$1WLSH$2_input {
    /** default=2 min=10000 max=10000 */
    number?: _INT
    /** default=2 min=10000 max=10000 */
    multiplier?: _INT
}

// Quick Resolution Multiply (WLSH) [WLSH Nodes_number]
export interface Quick_Resolution_Multiply_$1WLSH$2 extends ComfyNode<Quick_Resolution_Multiply_$1WLSH$2_input, Quick_Resolution_Multiply_$1WLSH$2_output> {
    nameInComfy: "Quick Resolution Multiply (WLSH)"
}
export interface Quick_Resolution_Multiply_$1WLSH$2_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
}
export interface Quick_Resolution_Multiply_$1WLSH$2_input {
    /** default=512 min=8192 max=8192 */
    width?: _INT
    /** default=512 min=8192 max=8192 */
    height?: _INT
    /** default=2 min=10000 max=10000 */
    multiplier?: _INT
}

// Resolutions by Ratio (WLSH) [WLSH Nodes_number]
export interface Resolutions_by_Ratio_$1WLSH$2 extends ComfyNode<Resolutions_by_Ratio_$1WLSH$2_input, Resolutions_by_Ratio_$1WLSH$2_output> {
    nameInComfy: "Resolutions by Ratio (WLSH)"
}
export interface Resolutions_by_Ratio_$1WLSH$2_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
}
export interface Resolutions_by_Ratio_$1WLSH$2_input {
    aspect: Enum_Resolutions_by_Ratio_$1WLSH$2_aspect
    direction: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
    /** default=512 min=8192 max=8192 step=64 */
    shortside?: _INT
}

// Seed to Number (WLSH) [WLSH Nodes_number]
export interface Seed_to_Number_$1WLSH$2 extends HasSingle_INT, ComfyNode<Seed_to_Number_$1WLSH$2_input, Seed_to_Number_$1WLSH$2_output> {
    nameInComfy: "Seed to Number (WLSH)"
}
export interface Seed_to_Number_$1WLSH$2_output {
    INT: ComfyNodeOutput<'INT', 0>,
}
export interface Seed_to_Number_$1WLSH$2_input {
    seed: _SEED
}

// Seed and Int (WLSH) [WLSH Nodes_number]
export interface Seed_and_Int_$1WLSH$2 extends HasSingle_INT, HasSingle_SEED, ComfyNode<Seed_and_Int_$1WLSH$2_input, Seed_and_Int_$1WLSH$2_output> {
    nameInComfy: "Seed and Int (WLSH)"
}
export interface Seed_and_Int_$1WLSH$2_output {
    INT: ComfyNodeOutput<'INT', 0>,
    SEED: ComfyNodeOutput<'SEED', 1>,
}
export interface Seed_and_Int_$1WLSH$2_input {
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// SDXL Steps (WLSH) [WLSH Nodes_number]
export interface SDXL_Steps_$1WLSH$2 extends ComfyNode<SDXL_Steps_$1WLSH$2_input, SDXL_Steps_$1WLSH$2_output> {
    nameInComfy: "SDXL Steps (WLSH)"
}
export interface SDXL_Steps_$1WLSH$2_output {
    pre: ComfyNodeOutput<'INT', 0>,
    base: ComfyNodeOutput<'INT', 1>,
    total: ComfyNodeOutput<'INT', 2>,
}
export interface SDXL_Steps_$1WLSH$2_input {
    /** default=3 min=10000 max=10000 */
    precondition?: _INT
    /** default=12 min=10000 max=10000 */
    base?: _INT
    /** default=20 min=10000 max=10000 */
    total?: _INT
}

// SDXL Resolutions (WLSH) [WLSH Nodes_number]
export interface SDXL_Resolutions_$1WLSH$2 extends ComfyNode<SDXL_Resolutions_$1WLSH$2_input, SDXL_Resolutions_$1WLSH$2_output> {
    nameInComfy: "SDXL Resolutions (WLSH)"
}
export interface SDXL_Resolutions_$1WLSH$2_output {
    width: ComfyNodeOutput<'INT', 0>,
    height: ComfyNodeOutput<'INT', 1>,
}
export interface SDXL_Resolutions_$1WLSH$2_input {
    resolution: Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution
    direction: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction
}

// Build Filename String (WLSH) [WLSH Nodes_text]
export interface Build_Filename_String_$1WLSH$2 extends HasSingle_STRING, ComfyNode<Build_Filename_String_$1WLSH$2_input, Build_Filename_String_$1WLSH$2_output> {
    nameInComfy: "Build Filename String (WLSH)"
}
export interface Build_Filename_String_$1WLSH$2_output {
    filename: ComfyNodeOutput<'STRING', 0>,
}
export interface Build_Filename_String_$1WLSH$2_input {
    /** */
    filename: _STRING
    /** default="" */
    modelname?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=0 */
    counter?: _SEED
    /** default="%Y-%m-%d-%H%M%S" */
    time_format?: _STRING
}

// Time String (WLSH) [WLSH Nodes_text]
export interface Time_String_$1WLSH$2 extends HasSingle_STRING, ComfyNode<Time_String_$1WLSH$2_input, Time_String_$1WLSH$2_output> {
    nameInComfy: "Time String (WLSH)"
}
export interface Time_String_$1WLSH$2_output {
    time_format: ComfyNodeOutput<'STRING', 0>,
}
export interface Time_String_$1WLSH$2_input {
    style: Enum_Time_String_$1WLSH$2_style
}

// Simple Pattern Replace (WLSH) [WLSH Nodes_text]
export interface Simple_Pattern_Replace_$1WLSH$2 extends HasSingle_STRING, ComfyNode<Simple_Pattern_Replace_$1WLSH$2_input, Simple_Pattern_Replace_$1WLSH$2_output> {
    nameInComfy: "Simple Pattern Replace (WLSH)"
}
export interface Simple_Pattern_Replace_$1WLSH$2_output {
    string: ComfyNodeOutput<'STRING', 0>,
}
export interface Simple_Pattern_Replace_$1WLSH$2_input {
    /** */
    input_string: _STRING
    /** default="" */
    list_string?: _STRING
    /** default="$var" */
    pattern?: _STRING
    /** default="," */
    delimiter?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
}

// Simple String Combine (WLSH) [WLSH Nodes_text]
export interface Simple_String_Combine_$1WLSH$2 extends HasSingle_STRING, ComfyNode<Simple_String_Combine_$1WLSH$2_input, Simple_String_Combine_$1WLSH$2_output> {
    nameInComfy: "Simple String Combine (WLSH)"
}
export interface Simple_String_Combine_$1WLSH$2_output {
    combined: ComfyNodeOutput<'STRING', 0>,
}
export interface Simple_String_Combine_$1WLSH$2_input {
    /** */
    addition: _STRING
    placement: Enum_Simple_String_Combine_$1WLSH$2_placement
    separator: Enum_Simple_String_Combine_$1WLSH$2_separator
    /** */
    input_string?: _STRING
}

// Prompt Weight (WLSH) [WLSH Nodes_text]
export interface Prompt_Weight_$1WLSH$2 extends HasSingle_STRING, ComfyNode<Prompt_Weight_$1WLSH$2_input, Prompt_Weight_$1WLSH$2_output> {
    nameInComfy: "Prompt Weight (WLSH)"
}
export interface Prompt_Weight_$1WLSH$2_output {
    prompt: ComfyNodeOutput<'STRING', 0>,
}
export interface Prompt_Weight_$1WLSH$2_input {
    /** */
    prompt: _STRING
    /** default=1 min=5 max=5 step=0.1 */
    weight?: _FLOAT
}

// Image Save with Prompt (WLSH) [WLSH Nodes_IO]
export interface Image_Save_with_Prompt_$1WLSH$2 extends ComfyNode<Image_Save_with_Prompt_$1WLSH$2_input, Image_Save_with_Prompt_$1WLSH$2_output> {
    nameInComfy: "Image Save with Prompt (WLSH)"
}
export interface Image_Save_with_Prompt_$1WLSH$2_output {
}
export interface Image_Save_with_Prompt_$1WLSH$2_input {
    images: _IMAGE
    /** default="%time_%seed" */
    filename?: _STRING
    /** default="" */
    path?: _STRING
    extension: Enum_Image_Save_with_Prompt_$1WLSH$2_extension
    /** default=100 min=100 max=100 step=1 */
    quality?: _INT
    /** */
    positive?: _STRING
    /** */
    negative?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default="" */
    modelname?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    counter?: _INT
    /** default="%Y-%m-%d-%H%M%S" */
    time_format?: _STRING
}

// Image Save with Prompt/Info (WLSH) [WLSH Nodes_IO]
export interface Image_Save_with_Prompt$3Info_$1WLSH$2 extends ComfyNode<Image_Save_with_Prompt$3Info_$1WLSH$2_input, Image_Save_with_Prompt$3Info_$1WLSH$2_output> {
    nameInComfy: "Image Save with Prompt/Info (WLSH)"
}
export interface Image_Save_with_Prompt$3Info_$1WLSH$2_output {
}
export interface Image_Save_with_Prompt$3Info_$1WLSH$2_input {
    images: _IMAGE
    /** default="%time_%seed" */
    filename?: _STRING
    /** default="" */
    path?: _STRING
    extension: Enum_Image_Save_with_Prompt_$1WLSH$2_extension
    /** default=100 min=100 max=100 step=1 */
    quality?: _INT
    /** */
    positive?: _STRING
    /** */
    negative?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default="" */
    modelname?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    counter?: _INT
    /** default="%Y-%m-%d-%H%M%S" */
    time_format?: _STRING
    info?: _INFO
}

// Image Save with Prompt File (WLSH) [WLSH Nodes_IO]
export interface Image_Save_with_Prompt_File_$1WLSH$2 extends ComfyNode<Image_Save_with_Prompt_File_$1WLSH$2_input, Image_Save_with_Prompt_File_$1WLSH$2_output> {
    nameInComfy: "Image Save with Prompt File (WLSH)"
}
export interface Image_Save_with_Prompt_File_$1WLSH$2_output {
}
export interface Image_Save_with_Prompt_File_$1WLSH$2_input {
    images: _IMAGE
    /** default="%time_%seed" */
    filename?: _STRING
    /** default="" */
    path?: _STRING
    extension: Enum_Image_Save_with_Prompt_$1WLSH$2_extension
    /** default=100 min=100 max=100 step=1 */
    quality?: _INT
    /** default="" */
    positive?: _STRING
    /** default="" */
    negative?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default="" */
    modelname?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    counter?: _INT
    /** default="%Y-%m-%d-%H%M%S" */
    time_format?: _STRING
}

// Image Save with Prompt/Info File (WLSH) [WLSH Nodes_IO]
export interface Image_Save_with_Prompt$3Info_File_$1WLSH$2 extends ComfyNode<Image_Save_with_Prompt$3Info_File_$1WLSH$2_input, Image_Save_with_Prompt$3Info_File_$1WLSH$2_output> {
    nameInComfy: "Image Save with Prompt/Info File (WLSH)"
}
export interface Image_Save_with_Prompt$3Info_File_$1WLSH$2_output {
}
export interface Image_Save_with_Prompt$3Info_File_$1WLSH$2_input {
    images: _IMAGE
    /** default="%time_%seed" */
    filename?: _STRING
    /** default="" */
    path?: _STRING
    extension: Enum_Image_Save_with_Prompt_$1WLSH$2_extension
    /** default=100 min=100 max=100 step=1 */
    quality?: _INT
    /** default="" */
    positive?: _STRING
    /** default="" */
    negative?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default="" */
    modelname?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    counter?: _INT
    /** default="%Y-%m-%d-%H%M%S" */
    time_format?: _STRING
    info?: _INFO
}

// Save Prompt (WLSH) [WLSH Nodes_IO]
export interface Save_Prompt_$1WLSH$2 extends ComfyNode<Save_Prompt_$1WLSH$2_input, Save_Prompt_$1WLSH$2_output> {
    nameInComfy: "Save Prompt (WLSH)"
}
export interface Save_Prompt_$1WLSH$2_output {
}
export interface Save_Prompt_$1WLSH$2_input {
    /** default="info" */
    filename?: _STRING
    /** default="" */
    path?: _STRING
    /** default="" */
    positive?: _STRING
    /** default="" */
    negative?: _STRING
    /** default="" */
    modelname?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    counter?: _INT
    /** default="%Y-%m-%d-%H%M%S" */
    time_format?: _STRING
}

// Save Prompt/Info (WLSH) [WLSH Nodes_IO]
export interface Save_Prompt$3Info_$1WLSH$2 extends ComfyNode<Save_Prompt$3Info_$1WLSH$2_input, Save_Prompt$3Info_$1WLSH$2_output> {
    nameInComfy: "Save Prompt/Info (WLSH)"
}
export interface Save_Prompt$3Info_$1WLSH$2_output {
}
export interface Save_Prompt$3Info_$1WLSH$2_input {
    /** default="info" */
    filename?: _STRING
    /** default="" */
    path?: _STRING
    /** default="" */
    positive?: _STRING
    /** default="" */
    negative?: _STRING
    /** default="" */
    modelname?: _STRING
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    seed?: _INT
    /** default=0 min=18446744073709552000 max=18446744073709552000 */
    counter?: _INT
    /** default="%Y-%m-%d-%H%M%S" */
    time_format?: _STRING
    info?: _INFO
}

// Save Positive Prompt(WLSH) [WLSH Nodes_IO]
export interface Save_Positive_Prompt$1WLSH$2 extends ComfyNode<Save_Positive_Prompt$1WLSH$2_input, Save_Positive_Prompt$1WLSH$2_output> {
    nameInComfy: "Save Positive Prompt(WLSH)"
}
export interface Save_Positive_Prompt$1WLSH$2_output {
}
export interface Save_Positive_Prompt$1WLSH$2_input {
    /** default="info" */
    filename?: _STRING
    /** default="" */
    path?: _STRING
    /** default="" */
    positive?: _STRING
}

// UnknownNodeXX [test]
export interface UnknownNodeXX extends ComfyNode<UnknownNodeXX_input, UnknownNodeXX_output> {
    nameInComfy: "UnknownNodeXX"
}
export interface UnknownNodeXX_output {
}
export interface UnknownNodeXX_input {
}


// 8.2 NODE UI helpers --------------------
export interface FormHelper {
    KSampler: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
    }
    CheckpointLoaderSimple: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    CLIPTextEncode: {
        text: { kind: 'string', type: string }
    }
    CLIPSetLastLayer: {
        stop_at_clip_layer: { kind: 'number', type: number }
    }
    VAEDecode: {
    }
    VAEEncode: {
    }
    VAEEncodeForInpaint: {
        grow_mask_by: { kind: 'number', type: number }
    }
    VAELoader: {
        vae_name: { kind: 'enum', type: Enum_VAELoader_vae_name }
    }
    EmptyLatentImage: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    LatentUpscale: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscale_upscale_method }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    LatentUpscaleBy: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscale_upscale_method }
        scale_by: { kind: 'number', type: number }
    }
    LatentFromBatch: {
        batch_index: { kind: 'number', type: number }
        length: { kind: 'number', type: number }
    }
    RepeatLatentBatch: {
        amount: { kind: 'number', type: number }
    }
    SaveImage: {
        filename_prefix: { kind: 'string', type: string }
    }
    PreviewImage: {
    }
    LoadImage: {
        image: { kind: 'enum', type: Enum_LoadImage_image }
    }
    LoadImageMask: {
        image: { kind: 'enum', type: Enum_LoadImage_image }
        channel: { kind: 'enum', type: Enum_LoadImageMask_channel }
    }
    ImageScale: {
        upscale_method: { kind: 'enum', type: Enum_ImageScale_upscale_method }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    ImageScaleBy: {
        upscale_method: { kind: 'enum', type: Enum_ImageScale_upscale_method }
        scale_by: { kind: 'number', type: number }
    }
    ImageInvert: {
    }
    ImageBatch: {
    }
    ImagePadForOutpaint: {
        left: { kind: 'number', type: number }
        top: { kind: 'number', type: number }
        right: { kind: 'number', type: number }
        bottom: { kind: 'number', type: number }
        feathering: { kind: 'number', type: number }
    }
    EmptyImage: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        color: { kind: 'number', type: number }
    }
    ConditioningAverage: {
        conditioning_to_strength: { kind: 'number', type: number }
    }
    ConditioningCombine: {
    }
    ConditioningConcat: {
    }
    ConditioningSetArea: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        strength: { kind: 'number', type: number }
    }
    ConditioningSetAreaPercentage: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        strength: { kind: 'number', type: number }
    }
    ConditioningSetAreaStrength: {
        strength: { kind: 'number', type: number }
    }
    ConditioningSetMask: {
        strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
    }
    KSamplerAdvanced: {
        add_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        noise_seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        return_with_leftover_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    SetLatentNoiseMask: {
    }
    LatentComposite: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
    }
    LatentBlend: {
        blend_factor: { kind: 'number', type: number }
    }
    LatentRotate: {
        rotation: { kind: 'enum', type: Enum_LatentRotate_rotation }
    }
    LatentFlip: {
        flip_method: { kind: 'enum', type: Enum_LatentFlip_flip_method }
    }
    LatentCrop: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
    }
    LoraLoader: {
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
    }
    CLIPLoader: {
        clip_name: { kind: 'enum', type: Enum_CLIPLoader_clip_name }
        type: { kind: 'enum', type: Enum_CLIPLoader_type }
    }
    UNETLoader: {
        unet_name: { kind: 'enum', type: Enum_UNETLoader_unet_name }
        weight_dtype: { kind: 'enum', type: Enum_UNETLoader_weight_dtype }
    }
    DualCLIPLoader: {
        clip_name1: { kind: 'enum', type: Enum_CLIPLoader_clip_name }
        clip_name2: { kind: 'enum', type: Enum_CLIPLoader_clip_name }
        type: { kind: 'enum', type: Enum_DualCLIPLoader_type }
    }
    CLIPVisionEncode: {
    }
    StyleModelApply: {
    }
    unCLIPConditioning: {
        strength: { kind: 'number', type: number }
        noise_augmentation: { kind: 'number', type: number }
    }
    ControlNetApply: {
        strength: { kind: 'number', type: number }
    }
    ControlNetApplyAdvanced: {
        strength: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    ControlNetLoader: {
        control_net_name: { kind: 'enum', type: Enum_ControlNetLoader_control_net_name }
    }
    DiffControlNetLoader: {
        control_net_name: { kind: 'enum', type: Enum_ControlNetLoader_control_net_name }
    }
    StyleModelLoader: {
        style_model_name: { kind: 'enum', type: Enum_StyleModelLoader_style_model_name }
    }
    CLIPVisionLoader: {
        clip_name: { kind: 'enum', type: Enum_CLIPVisionLoader_clip_name }
    }
    VAEDecodeTiled: {
        tile_size: { kind: 'number', type: number }
    }
    VAEEncodeTiled: {
        tile_size: { kind: 'number', type: number }
    }
    unCLIPCheckpointLoader: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    GLIGENLoader: {
        gligen_name: { kind: 'enum', type: Enum_GLIGENLoader_gligen_name }
    }
    GLIGENTextBoxApply: {
        text: { kind: 'string', type: string }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
    }
    InpaintModelConditioning: {
    }
    CheckpointLoader: {
        config_name: { kind: 'enum', type: Enum_CheckpointLoader_config_name }
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    DiffusersLoader: {
        model_path: { kind: 'enum', type: Enum_DiffusersLoader_model_path }
    }
    LoadLatent: {
        latent: { kind: 'enum', type: Enum_LoadLatent_latent }
    }
    SaveLatent: {
        filename_prefix: { kind: 'string', type: string }
    }
    ConditioningZeroOut: {
    }
    ConditioningSetTimestepRange: {
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
    }
    LoraLoaderModelOnly: {
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model: { kind: 'number', type: number }
    }
    LatentAdd: {
    }
    LatentSubtract: {
    }
    LatentMultiply: {
        multiplier: { kind: 'number', type: number }
    }
    LatentInterpolate: {
        ratio: { kind: 'number', type: number }
    }
    LatentBatch: {
    }
    LatentBatchSeedBehavior: {
        seed_behavior: { kind: 'enum', type: Enum_LatentBatchSeedBehavior_seed_behavior }
    }
    LatentApplyOperation: {
    }
    LatentApplyOperationCFG: {
    }
    LatentOperationTonemapReinhard: {
        multiplier: { kind: 'number', type: number }
    }
    LatentOperationSharpen: {
        sharpen_radius: { kind: 'number', type: number }
        sigma: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
    }
    HypernetworkLoader: {
        hypernetwork_name: { kind: 'enum', type: Enum_HypernetworkLoader_hypernetwork_name }
        strength: { kind: 'number', type: number }
    }
    UpscaleModelLoader: {
        model_name: { kind: 'enum', type: Enum_UpscaleModelLoader_model_name }
    }
    ImageUpscaleWithModel: {
    }
    ImageBlend: {
        blend_factor: { kind: 'number', type: number }
        blend_mode: { kind: 'enum', type: Enum_ImageBlend_blend_mode }
    }
    ImageBlur: {
        blur_radius: { kind: 'number', type: number }
        sigma: { kind: 'number', type: number }
    }
    ImageQuantize: {
        colors: { kind: 'number', type: number }
        dither: { kind: 'enum', type: Enum_ImageQuantize_dither }
    }
    ImageSharpen: {
        sharpen_radius: { kind: 'number', type: number }
        sigma: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
    }
    ImageScaleToTotalPixels: {
        upscale_method: { kind: 'enum', type: Enum_ImageScale_upscale_method }
        megapixels: { kind: 'number', type: number }
    }
    LatentCompositeMasked: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        resize_source: { kind: 'boolean', type: boolean }
    }
    ImageCompositeMasked: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        resize_source: { kind: 'boolean', type: boolean }
    }
    MaskToImage: {
    }
    ImageToMask: {
        channel: { kind: 'enum', type: Enum_LoadImageMask_channel }
    }
    ImageColorToMask: {
        color: { kind: 'number', type: number }
    }
    SolidMask: {
        value: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    InvertMask: {
    }
    CropMask: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    MaskComposite: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        operation: { kind: 'enum', type: Enum_MaskComposite_operation }
    }
    FeatherMask: {
        left: { kind: 'number', type: number }
        top: { kind: 'number', type: number }
        right: { kind: 'number', type: number }
        bottom: { kind: 'number', type: number }
    }
    GrowMask: {
        expand: { kind: 'number', type: number }
        tapered_corners: { kind: 'boolean', type: boolean }
    }
    ThresholdMask: {
        value: { kind: 'number', type: number }
    }
    PorterDuffImageComposite: {
        mode: { kind: 'enum', type: Enum_PorterDuffImageComposite_mode }
    }
    SplitImageWithAlpha: {
    }
    JoinImageWithAlpha: {
    }
    RebatchLatents: {
        batch_size: { kind: 'number', type: number }
    }
    RebatchImages: {
        batch_size: { kind: 'number', type: number }
    }
    ModelMergeSimple: {
        ratio: { kind: 'number', type: number }
    }
    ModelMergeBlocks: {
        input: { kind: 'number', type: number }
        middle: { kind: 'number', type: number }
        out: { kind: 'number', type: number }
    }
    ModelMergeSubtract: {
        multiplier: { kind: 'number', type: number }
    }
    ModelMergeAdd: {
    }
    CheckpointSave: {
        filename_prefix: { kind: 'string', type: string }
    }
    CLIPMergeSimple: {
        ratio: { kind: 'number', type: number }
    }
    CLIPMergeSubtract: {
        multiplier: { kind: 'number', type: number }
    }
    CLIPMergeAdd: {
    }
    CLIPSave: {
        filename_prefix: { kind: 'string', type: string }
    }
    VAESave: {
        filename_prefix: { kind: 'string', type: string }
    }
    ModelSave: {
        filename_prefix: { kind: 'string', type: string }
    }
    TomePatchModel: {
        ratio: { kind: 'number', type: number }
    }
    CLIPTextEncodeSDXLRefiner: {
        ascore: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        text: { kind: 'string', type: string }
    }
    CLIPTextEncodeSDXL: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop_w: { kind: 'number', type: number }
        crop_h: { kind: 'number', type: number }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        text_g: { kind: 'string', type: string }
        text_l: { kind: 'string', type: string }
    }
    Canny: {
        low_threshold: { kind: 'number', type: number }
        high_threshold: { kind: 'number', type: number }
    }
    FreeU: {
        b1: { kind: 'number', type: number }
        b2: { kind: 'number', type: number }
        s1: { kind: 'number', type: number }
        s2: { kind: 'number', type: number }
    }
    FreeU$_V2: {
        b1: { kind: 'number', type: number }
        b2: { kind: 'number', type: number }
        s1: { kind: 'number', type: number }
        s2: { kind: 'number', type: number }
    }
    SamplerCustom: {
        add_noise: { kind: 'boolean', type: boolean }
        noise_seed: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
    }
    BasicScheduler: {
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        steps: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
    }
    KarrasScheduler: {
        steps: { kind: 'number', type: number }
        sigma_max: { kind: 'number', type: number }
        sigma_min: { kind: 'number', type: number }
        rho: { kind: 'number', type: number }
    }
    ExponentialScheduler: {
        steps: { kind: 'number', type: number }
        sigma_max: { kind: 'number', type: number }
        sigma_min: { kind: 'number', type: number }
    }
    PolyexponentialScheduler: {
        steps: { kind: 'number', type: number }
        sigma_max: { kind: 'number', type: number }
        sigma_min: { kind: 'number', type: number }
        rho: { kind: 'number', type: number }
    }
    LaplaceScheduler: {
        steps: { kind: 'number', type: number }
        sigma_max: { kind: 'number', type: number }
        sigma_min: { kind: 'number', type: number }
        mu: { kind: 'number', type: number }
        beta: { kind: 'number', type: number }
    }
    VPScheduler: {
        steps: { kind: 'number', type: number }
        beta_d: { kind: 'number', type: number }
        beta_min: { kind: 'number', type: number }
        eps_s: { kind: 'number', type: number }
    }
    BetaSamplingScheduler: {
        steps: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        beta: { kind: 'number', type: number }
    }
    SDTurboScheduler: {
        steps: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
    }
    KSamplerSelect: {
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
    }
    SamplerEulerAncestral: {
        eta: { kind: 'number', type: number }
        s_noise: { kind: 'number', type: number }
    }
    SamplerEulerAncestralCFGPP: {
        eta: { kind: 'number', type: number }
        s_noise: { kind: 'number', type: number }
    }
    SamplerLMS: {
        order: { kind: 'number', type: number }
    }
    SamplerDPMPP$_3M$_SDE: {
        eta: { kind: 'number', type: number }
        s_noise: { kind: 'number', type: number }
        noise_device: { kind: 'enum', type: Enum_SamplerDPMPP$_3M$_SDE_noise_device }
    }
    SamplerDPMPP$_2M$_SDE: {
        solver_type: { kind: 'enum', type: Enum_SamplerDPMPP$_2M$_SDE_solver_type }
        eta: { kind: 'number', type: number }
        s_noise: { kind: 'number', type: number }
        noise_device: { kind: 'enum', type: Enum_SamplerDPMPP$_3M$_SDE_noise_device }
    }
    SamplerDPMPP$_SDE: {
        eta: { kind: 'number', type: number }
        s_noise: { kind: 'number', type: number }
        r: { kind: 'number', type: number }
        noise_device: { kind: 'enum', type: Enum_SamplerDPMPP$_3M$_SDE_noise_device }
    }
    SamplerDPMPP$_2S$_Ancestral: {
        eta: { kind: 'number', type: number }
        s_noise: { kind: 'number', type: number }
    }
    SamplerDPMAdaptative: {
        order: { kind: 'number', type: number }
        rtol: { kind: 'number', type: number }
        atol: { kind: 'number', type: number }
        h_init: { kind: 'number', type: number }
        pcoeff: { kind: 'number', type: number }
        icoeff: { kind: 'number', type: number }
        dcoeff: { kind: 'number', type: number }
        accept_safety: { kind: 'number', type: number }
        eta: { kind: 'number', type: number }
        s_noise: { kind: 'number', type: number }
    }
    SplitSigmas: {
        step: { kind: 'number', type: number }
    }
    SplitSigmasDenoise: {
        denoise: { kind: 'number', type: number }
    }
    FlipSigmas: {
    }
    CFGGuider: {
        cfg: { kind: 'number', type: number }
    }
    DualCFGGuider: {
        cfg_conds: { kind: 'number', type: number }
        cfg_cond2_negative: { kind: 'number', type: number }
    }
    BasicGuider: {
    }
    RandomNoise: {
        noise_seed: { kind: 'number', type: number }
    }
    DisableNoise: {
    }
    AddNoise: {
    }
    SamplerCustomAdvanced: {
    }
    HyperTile: {
        tile_size: { kind: 'number', type: number }
        swap_size: { kind: 'number', type: number }
        max_depth: { kind: 'number', type: number }
        scale_depth: { kind: 'boolean', type: boolean }
    }
    ModelSamplingDiscrete: {
        sampling: { kind: 'enum', type: Enum_ModelSamplingDiscrete_sampling }
        zsnr: { kind: 'boolean', type: boolean }
    }
    ModelSamplingContinuousEDM: {
        sampling: { kind: 'enum', type: Enum_ModelSamplingContinuousEDM_sampling }
        sigma_max: { kind: 'number', type: number }
        sigma_min: { kind: 'number', type: number }
    }
    ModelSamplingContinuousV: {
        sampling: { kind: 'enum', type: Enum_ModelSamplingContinuousV_sampling }
        sigma_max: { kind: 'number', type: number }
        sigma_min: { kind: 'number', type: number }
    }
    ModelSamplingStableCascade: {
        shift: { kind: 'number', type: number }
    }
    ModelSamplingSD3: {
        shift: { kind: 'number', type: number }
    }
    ModelSamplingAuraFlow: {
        shift: { kind: 'number', type: number }
    }
    ModelSamplingFlux: {
        max_shift: { kind: 'number', type: number }
        base_shift: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    RescaleCFG: {
        multiplier: { kind: 'number', type: number }
    }
    PatchModelAddDownscale: {
        block_number: { kind: 'number', type: number }
        downscale_factor: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        downscale_after_skip: { kind: 'boolean', type: boolean }
        downscale_method: { kind: 'enum', type: Enum_LatentUpscale_upscale_method }
        upscale_method: { kind: 'enum', type: Enum_LatentUpscale_upscale_method }
    }
    ImageCrop: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
    }
    RepeatImageBatch: {
        amount: { kind: 'number', type: number }
    }
    ImageFromBatch: {
        batch_index: { kind: 'number', type: number }
        length: { kind: 'number', type: number }
    }
    SaveAnimatedWEBP: {
        filename_prefix: { kind: 'string', type: string }
        fps: { kind: 'number', type: number }
        lossless: { kind: 'boolean', type: boolean }
        quality: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_SaveAnimatedWEBP_method }
    }
    SaveAnimatedPNG: {
        filename_prefix: { kind: 'string', type: string }
        fps: { kind: 'number', type: number }
        compress_level: { kind: 'number', type: number }
    }
    ImageOnlyCheckpointLoader: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    SVD$_img2vid$_Conditioning: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        video_frames: { kind: 'number', type: number }
        motion_bucket_id: { kind: 'number', type: number }
        fps: { kind: 'number', type: number }
        augmentation_level: { kind: 'number', type: number }
    }
    VideoLinearCFGGuidance: {
        min_cfg: { kind: 'number', type: number }
    }
    VideoTriangleCFGGuidance: {
        min_cfg: { kind: 'number', type: number }
    }
    ImageOnlyCheckpointSave: {
        filename_prefix: { kind: 'string', type: string }
    }
    SelfAttentionGuidance: {
        scale: { kind: 'number', type: number }
        blur_sigma: { kind: 'number', type: number }
    }
    PerpNeg: {
        neg_scale: { kind: 'number', type: number }
    }
    PerpNegGuider: {
        cfg: { kind: 'number', type: number }
        neg_scale: { kind: 'number', type: number }
    }
    StableZero123$_Conditioning: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        elevation: { kind: 'number', type: number }
        azimuth: { kind: 'number', type: number }
    }
    StableZero123$_Conditioning$_Batched: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        elevation: { kind: 'number', type: number }
        azimuth: { kind: 'number', type: number }
        elevation_batch_increment: { kind: 'number', type: number }
        azimuth_batch_increment: { kind: 'number', type: number }
    }
    SV3D$_Conditioning: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        video_frames: { kind: 'number', type: number }
        elevation: { kind: 'number', type: number }
    }
    SD$_4XUpscale$_Conditioning: {
        scale_ratio: { kind: 'number', type: number }
        noise_augmentation: { kind: 'number', type: number }
    }
    PhotoMakerLoader: {
        photomaker_model_name: { kind: 'enum', type: Enum_PhotoMakerLoader_photomaker_model_name }
    }
    PhotoMakerEncode: {
        text: { kind: 'string', type: string }
    }
    CLIPTextEncodeControlnet: {
        text: { kind: 'string', type: string }
    }
    Morphology: {
        operation: { kind: 'enum', type: Enum_Morphology_operation }
        kernel_size: { kind: 'number', type: number }
    }
    StableCascade$_EmptyLatentImage: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        compression: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    StableCascade$_StageB$_Conditioning: {
    }
    StableCascade$_StageC$_VAEEncode: {
        compression: { kind: 'number', type: number }
    }
    StableCascade$_SuperResolutionControlnet: {
    }
    DifferentialDiffusion: {
    }
    InstructPixToPixConditioning: {
    }
    ModelMergeSD1: {
        "time_embed.": { kind: 'number', type: number }
        "label_emb.": { kind: 'number', type: number }
        "input_blocks.0.": { kind: 'number', type: number }
        "input_blocks.1.": { kind: 'number', type: number }
        "input_blocks.2.": { kind: 'number', type: number }
        "input_blocks.3.": { kind: 'number', type: number }
        "input_blocks.4.": { kind: 'number', type: number }
        "input_blocks.5.": { kind: 'number', type: number }
        "input_blocks.6.": { kind: 'number', type: number }
        "input_blocks.7.": { kind: 'number', type: number }
        "input_blocks.8.": { kind: 'number', type: number }
        "input_blocks.9.": { kind: 'number', type: number }
        "input_blocks.10.": { kind: 'number', type: number }
        "input_blocks.11.": { kind: 'number', type: number }
        "middle_block.0.": { kind: 'number', type: number }
        "middle_block.1.": { kind: 'number', type: number }
        "middle_block.2.": { kind: 'number', type: number }
        "output_blocks.0.": { kind: 'number', type: number }
        "output_blocks.1.": { kind: 'number', type: number }
        "output_blocks.2.": { kind: 'number', type: number }
        "output_blocks.3.": { kind: 'number', type: number }
        "output_blocks.4.": { kind: 'number', type: number }
        "output_blocks.5.": { kind: 'number', type: number }
        "output_blocks.6.": { kind: 'number', type: number }
        "output_blocks.7.": { kind: 'number', type: number }
        "output_blocks.8.": { kind: 'number', type: number }
        "output_blocks.9.": { kind: 'number', type: number }
        "output_blocks.10.": { kind: 'number', type: number }
        "output_blocks.11.": { kind: 'number', type: number }
        "out.": { kind: 'number', type: number }
    }
    ModelMergeSD2: {
        "time_embed.": { kind: 'number', type: number }
        "label_emb.": { kind: 'number', type: number }
        "input_blocks.0.": { kind: 'number', type: number }
        "input_blocks.1.": { kind: 'number', type: number }
        "input_blocks.2.": { kind: 'number', type: number }
        "input_blocks.3.": { kind: 'number', type: number }
        "input_blocks.4.": { kind: 'number', type: number }
        "input_blocks.5.": { kind: 'number', type: number }
        "input_blocks.6.": { kind: 'number', type: number }
        "input_blocks.7.": { kind: 'number', type: number }
        "input_blocks.8.": { kind: 'number', type: number }
        "input_blocks.9.": { kind: 'number', type: number }
        "input_blocks.10.": { kind: 'number', type: number }
        "input_blocks.11.": { kind: 'number', type: number }
        "middle_block.0.": { kind: 'number', type: number }
        "middle_block.1.": { kind: 'number', type: number }
        "middle_block.2.": { kind: 'number', type: number }
        "output_blocks.0.": { kind: 'number', type: number }
        "output_blocks.1.": { kind: 'number', type: number }
        "output_blocks.2.": { kind: 'number', type: number }
        "output_blocks.3.": { kind: 'number', type: number }
        "output_blocks.4.": { kind: 'number', type: number }
        "output_blocks.5.": { kind: 'number', type: number }
        "output_blocks.6.": { kind: 'number', type: number }
        "output_blocks.7.": { kind: 'number', type: number }
        "output_blocks.8.": { kind: 'number', type: number }
        "output_blocks.9.": { kind: 'number', type: number }
        "output_blocks.10.": { kind: 'number', type: number }
        "output_blocks.11.": { kind: 'number', type: number }
        "out.": { kind: 'number', type: number }
    }
    ModelMergeSDXL: {
        "time_embed.": { kind: 'number', type: number }
        "label_emb.": { kind: 'number', type: number }
        "input_blocks.0": { kind: 'number', type: number }
        "input_blocks.1": { kind: 'number', type: number }
        "input_blocks.2": { kind: 'number', type: number }
        "input_blocks.3": { kind: 'number', type: number }
        "input_blocks.4": { kind: 'number', type: number }
        "input_blocks.5": { kind: 'number', type: number }
        "input_blocks.6": { kind: 'number', type: number }
        "input_blocks.7": { kind: 'number', type: number }
        "input_blocks.8": { kind: 'number', type: number }
        "middle_block.0": { kind: 'number', type: number }
        "middle_block.1": { kind: 'number', type: number }
        "middle_block.2": { kind: 'number', type: number }
        "output_blocks.0": { kind: 'number', type: number }
        "output_blocks.1": { kind: 'number', type: number }
        "output_blocks.2": { kind: 'number', type: number }
        "output_blocks.3": { kind: 'number', type: number }
        "output_blocks.4": { kind: 'number', type: number }
        "output_blocks.5": { kind: 'number', type: number }
        "output_blocks.6": { kind: 'number', type: number }
        "output_blocks.7": { kind: 'number', type: number }
        "output_blocks.8": { kind: 'number', type: number }
        "out.": { kind: 'number', type: number }
    }
    ModelMergeSD3$_2B: {
        "pos_embed.": { kind: 'number', type: number }
        "x_embedder.": { kind: 'number', type: number }
        "context_embedder.": { kind: 'number', type: number }
        "y_embedder.": { kind: 'number', type: number }
        "t_embedder.": { kind: 'number', type: number }
        "joint_blocks.0.": { kind: 'number', type: number }
        "joint_blocks.1.": { kind: 'number', type: number }
        "joint_blocks.2.": { kind: 'number', type: number }
        "joint_blocks.3.": { kind: 'number', type: number }
        "joint_blocks.4.": { kind: 'number', type: number }
        "joint_blocks.5.": { kind: 'number', type: number }
        "joint_blocks.6.": { kind: 'number', type: number }
        "joint_blocks.7.": { kind: 'number', type: number }
        "joint_blocks.8.": { kind: 'number', type: number }
        "joint_blocks.9.": { kind: 'number', type: number }
        "joint_blocks.10.": { kind: 'number', type: number }
        "joint_blocks.11.": { kind: 'number', type: number }
        "joint_blocks.12.": { kind: 'number', type: number }
        "joint_blocks.13.": { kind: 'number', type: number }
        "joint_blocks.14.": { kind: 'number', type: number }
        "joint_blocks.15.": { kind: 'number', type: number }
        "joint_blocks.16.": { kind: 'number', type: number }
        "joint_blocks.17.": { kind: 'number', type: number }
        "joint_blocks.18.": { kind: 'number', type: number }
        "joint_blocks.19.": { kind: 'number', type: number }
        "joint_blocks.20.": { kind: 'number', type: number }
        "joint_blocks.21.": { kind: 'number', type: number }
        "joint_blocks.22.": { kind: 'number', type: number }
        "joint_blocks.23.": { kind: 'number', type: number }
        "final_layer.": { kind: 'number', type: number }
    }
    ModelMergeFlux1: {
        "img_in.": { kind: 'number', type: number }
        "time_in.": { kind: 'number', type: number }
        guidance_in: { kind: 'number', type: number }
        "vector_in.": { kind: 'number', type: number }
        "txt_in.": { kind: 'number', type: number }
        "double_blocks.0.": { kind: 'number', type: number }
        "double_blocks.1.": { kind: 'number', type: number }
        "double_blocks.2.": { kind: 'number', type: number }
        "double_blocks.3.": { kind: 'number', type: number }
        "double_blocks.4.": { kind: 'number', type: number }
        "double_blocks.5.": { kind: 'number', type: number }
        "double_blocks.6.": { kind: 'number', type: number }
        "double_blocks.7.": { kind: 'number', type: number }
        "double_blocks.8.": { kind: 'number', type: number }
        "double_blocks.9.": { kind: 'number', type: number }
        "double_blocks.10.": { kind: 'number', type: number }
        "double_blocks.11.": { kind: 'number', type: number }
        "double_blocks.12.": { kind: 'number', type: number }
        "double_blocks.13.": { kind: 'number', type: number }
        "double_blocks.14.": { kind: 'number', type: number }
        "double_blocks.15.": { kind: 'number', type: number }
        "double_blocks.16.": { kind: 'number', type: number }
        "double_blocks.17.": { kind: 'number', type: number }
        "double_blocks.18.": { kind: 'number', type: number }
        "single_blocks.0.": { kind: 'number', type: number }
        "single_blocks.1.": { kind: 'number', type: number }
        "single_blocks.2.": { kind: 'number', type: number }
        "single_blocks.3.": { kind: 'number', type: number }
        "single_blocks.4.": { kind: 'number', type: number }
        "single_blocks.5.": { kind: 'number', type: number }
        "single_blocks.6.": { kind: 'number', type: number }
        "single_blocks.7.": { kind: 'number', type: number }
        "single_blocks.8.": { kind: 'number', type: number }
        "single_blocks.9.": { kind: 'number', type: number }
        "single_blocks.10.": { kind: 'number', type: number }
        "single_blocks.11.": { kind: 'number', type: number }
        "single_blocks.12.": { kind: 'number', type: number }
        "single_blocks.13.": { kind: 'number', type: number }
        "single_blocks.14.": { kind: 'number', type: number }
        "single_blocks.15.": { kind: 'number', type: number }
        "single_blocks.16.": { kind: 'number', type: number }
        "single_blocks.17.": { kind: 'number', type: number }
        "single_blocks.18.": { kind: 'number', type: number }
        "single_blocks.19.": { kind: 'number', type: number }
        "single_blocks.20.": { kind: 'number', type: number }
        "single_blocks.21.": { kind: 'number', type: number }
        "single_blocks.22.": { kind: 'number', type: number }
        "single_blocks.23.": { kind: 'number', type: number }
        "single_blocks.24.": { kind: 'number', type: number }
        "single_blocks.25.": { kind: 'number', type: number }
        "single_blocks.26.": { kind: 'number', type: number }
        "single_blocks.27.": { kind: 'number', type: number }
        "single_blocks.28.": { kind: 'number', type: number }
        "single_blocks.29.": { kind: 'number', type: number }
        "single_blocks.30.": { kind: 'number', type: number }
        "single_blocks.31.": { kind: 'number', type: number }
        "single_blocks.32.": { kind: 'number', type: number }
        "single_blocks.33.": { kind: 'number', type: number }
        "single_blocks.34.": { kind: 'number', type: number }
        "single_blocks.35.": { kind: 'number', type: number }
        "single_blocks.36.": { kind: 'number', type: number }
        "single_blocks.37.": { kind: 'number', type: number }
        "final_layer.": { kind: 'number', type: number }
    }
    ModelMergeSD35$_Large: {
        "pos_embed.": { kind: 'number', type: number }
        "x_embedder.": { kind: 'number', type: number }
        "context_embedder.": { kind: 'number', type: number }
        "y_embedder.": { kind: 'number', type: number }
        "t_embedder.": { kind: 'number', type: number }
        "joint_blocks.0.": { kind: 'number', type: number }
        "joint_blocks.1.": { kind: 'number', type: number }
        "joint_blocks.2.": { kind: 'number', type: number }
        "joint_blocks.3.": { kind: 'number', type: number }
        "joint_blocks.4.": { kind: 'number', type: number }
        "joint_blocks.5.": { kind: 'number', type: number }
        "joint_blocks.6.": { kind: 'number', type: number }
        "joint_blocks.7.": { kind: 'number', type: number }
        "joint_blocks.8.": { kind: 'number', type: number }
        "joint_blocks.9.": { kind: 'number', type: number }
        "joint_blocks.10.": { kind: 'number', type: number }
        "joint_blocks.11.": { kind: 'number', type: number }
        "joint_blocks.12.": { kind: 'number', type: number }
        "joint_blocks.13.": { kind: 'number', type: number }
        "joint_blocks.14.": { kind: 'number', type: number }
        "joint_blocks.15.": { kind: 'number', type: number }
        "joint_blocks.16.": { kind: 'number', type: number }
        "joint_blocks.17.": { kind: 'number', type: number }
        "joint_blocks.18.": { kind: 'number', type: number }
        "joint_blocks.19.": { kind: 'number', type: number }
        "joint_blocks.20.": { kind: 'number', type: number }
        "joint_blocks.21.": { kind: 'number', type: number }
        "joint_blocks.22.": { kind: 'number', type: number }
        "joint_blocks.23.": { kind: 'number', type: number }
        "joint_blocks.24.": { kind: 'number', type: number }
        "joint_blocks.25.": { kind: 'number', type: number }
        "joint_blocks.26.": { kind: 'number', type: number }
        "joint_blocks.27.": { kind: 'number', type: number }
        "joint_blocks.28.": { kind: 'number', type: number }
        "joint_blocks.29.": { kind: 'number', type: number }
        "joint_blocks.30.": { kind: 'number', type: number }
        "joint_blocks.31.": { kind: 'number', type: number }
        "joint_blocks.32.": { kind: 'number', type: number }
        "joint_blocks.33.": { kind: 'number', type: number }
        "joint_blocks.34.": { kind: 'number', type: number }
        "joint_blocks.35.": { kind: 'number', type: number }
        "joint_blocks.36.": { kind: 'number', type: number }
        "joint_blocks.37.": { kind: 'number', type: number }
        "final_layer.": { kind: 'number', type: number }
    }
    PerturbedAttentionGuidance: {
        scale: { kind: 'number', type: number }
    }
    AlignYourStepsScheduler: {
        model_type: { kind: 'enum', type: Enum_AlignYourStepsScheduler_model_type }
        steps: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
    }
    UNetSelfAttentionMultiply: {
        q: { kind: 'number', type: number }
        k: { kind: 'number', type: number }
        v: { kind: 'number', type: number }
        out: { kind: 'number', type: number }
    }
    UNetCrossAttentionMultiply: {
        q: { kind: 'number', type: number }
        k: { kind: 'number', type: number }
        v: { kind: 'number', type: number }
        out: { kind: 'number', type: number }
    }
    CLIPAttentionMultiply: {
        q: { kind: 'number', type: number }
        k: { kind: 'number', type: number }
        v: { kind: 'number', type: number }
        out: { kind: 'number', type: number }
    }
    UNetTemporalAttentionMultiply: {
        self_structural: { kind: 'number', type: number }
        self_temporal: { kind: 'number', type: number }
        cross_structural: { kind: 'number', type: number }
        cross_temporal: { kind: 'number', type: number }
    }
    SamplerLCMUpscale: {
        scale_ratio: { kind: 'number', type: number }
        scale_steps: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_LatentUpscale_upscale_method }
    }
    SamplerEulerCFGpp: {
        version: { kind: 'enum', type: Enum_SamplerEulerCFGpp_version }
    }
    WebcamCapture: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        capture_on_queue: { kind: 'boolean', type: boolean }
    }
    EmptyLatentAudio: {
        seconds: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    VAEEncodeAudio: {
    }
    VAEDecodeAudio: {
    }
    SaveAudio: {
        filename_prefix: { kind: 'string', type: string }
    }
    LoadAudio: {
        audio: { kind: 'enum', type: Enum_LoadAudio_audio }
    }
    PreviewAudio: {
    }
    TripleCLIPLoader: {
        clip_name1: { kind: 'enum', type: Enum_CLIPLoader_clip_name }
        clip_name2: { kind: 'enum', type: Enum_CLIPLoader_clip_name }
        clip_name3: { kind: 'enum', type: Enum_CLIPLoader_clip_name }
    }
    EmptySD3LatentImage: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    CLIPTextEncodeSD3: {
        clip_l: { kind: 'string', type: string }
        clip_g: { kind: 'string', type: string }
        t5xxl: { kind: 'string', type: string }
        empty_padding: { kind: 'enum', type: Enum_CLIPTextEncodeSD3_empty_padding }
    }
    ControlNetApplySD3: {
        strength: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    SkipLayerGuidanceSD3: {
        layers: { kind: 'string', type: string }
        scale: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    GITSScheduler: {
        coeff: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
    }
    SetUnionControlNetType: {
        type: { kind: 'enum', type: Enum_SetUnionControlNetType_type }
    }
    ControlNetInpaintingAliMamaApply: {
        strength: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    CLIPTextEncodeHunyuanDiT: {
        bert: { kind: 'string', type: string }
        mt5xl: { kind: 'string', type: string }
    }
    CLIPTextEncodeFlux: {
        clip_l: { kind: 'string', type: string }
        t5xxl: { kind: 'string', type: string }
        guidance: { kind: 'number', type: number }
    }
    FluxGuidance: {
        guidance: { kind: 'number', type: number }
    }
    LoraSave: {
        filename_prefix: { kind: 'string', type: string }
        rank: { kind: 'number', type: number }
        lora_type: { kind: 'enum', type: Enum_LoraSave_lora_type }
        bias_diff: { kind: 'boolean', type: boolean }
    }
    TorchCompileModel: {
        backend: { kind: 'enum', type: Enum_TorchCompileModel_backend }
    }
    EmptyMochiLatentVideo: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        length: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    Base64ImageInput: {
        base64_image: { kind: 'string', type: string }
    }
    Base64ImageOutput: {
    }
    AttentionCouple: {
        global_prompt_weight: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        ip_adapter_active: { kind: 'boolean', type: boolean }
    }
    AttentionCoupleRegion: {
        weight: { kind: 'number', type: number }
    }
    AttentionCoupleRegions: {
    }
    CLIPSeg: {
        text: { kind: 'string', type: string }
        blur: { kind: 'number', type: number }
        threshold: { kind: 'number', type: number }
        dilation_factor: { kind: 'number', type: number }
    }
    CombineSegMasks: {
    }
    CivitAI$_Lora$_Loader: {
        lora_air: { kind: 'string', type: string }
        lora_name: { kind: 'enum', type: Enum_CivitAI$_Lora$_Loader_lora_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
        api_key: { kind: 'string', type: string }
        download_chunks: { kind: 'number', type: number }
        download_path: { kind: 'enum', type: Enum_CivitAI$_Lora$_Loader_download_path }
    }
    CivitAI$_Checkpoint$_Loader: {
        ckpt_air: { kind: 'string', type: string }
        ckpt_name: { kind: 'enum', type: Enum_CivitAI$_Checkpoint$_Loader_ckpt_name }
        api_key: { kind: 'string', type: string }
        download_chunks: { kind: 'number', type: number }
        download_path: { kind: 'enum', type: Enum_CivitAI$_Checkpoint$_Loader_download_path }
    }
    AlphaChanelAdd: {
    }
    AlphaChanelAddByMask: {
        method: { kind: 'enum', type: Enum_AlphaChanelAddByMask_method }
    }
    AlphaChanelAsMask: {
        method: { kind: 'enum', type: Enum_AlphaChanelAddByMask_method }
    }
    AlphaChanelRestore: {
    }
    AlphaChanelRemove: {
    }
    ClipClamp: {
    }
    ClipVisionClamp: {
    }
    ClipVisionOutputClamp: {
    }
    ConditioningClamp: {
    }
    ControlNetClamp: {
    }
    GligenClamp: {
    }
    ImageClamp: {
    }
    LatentClamp: {
    }
    MaskClamp: {
    }
    ModelClamp: {
    }
    StyleModelClamp: {
    }
    UpscaleModelClamp: {
    }
    VaeClamp: {
    }
    ImageBatchGet: {
        index: { kind: 'number', type: number }
    }
    ImageBatchCopy: {
        index: { kind: 'number', type: number }
        quantity: { kind: 'number', type: number }
    }
    ImageBatchRemove: {
        index: { kind: 'number', type: number }
    }
    ImageBatchFork: {
        priority: { kind: 'enum', type: Enum_ImageBatchFork_priority }
    }
    ImageBatchJoin: {
    }
    ImageBatchPermute: {
        permute: { kind: 'string', type: string }
        start_with_zero: { kind: 'boolean', type: boolean }
    }
    ImageCompositeAbsolute: {
        images_a_x: { kind: 'number', type: number }
        images_a_y: { kind: 'number', type: number }
        images_b_x: { kind: 'number', type: number }
        images_b_y: { kind: 'number', type: number }
        container_width: { kind: 'number', type: number }
        container_height: { kind: 'number', type: number }
        background: { kind: 'enum', type: Enum_ImageCompositeAbsolute_background }
        method: { kind: 'enum', type: Enum_ImageCompositeAbsolute_method }
    }
    ImageCompositeAbsoluteByContainer: {
        images_a_x: { kind: 'number', type: number }
        images_a_y: { kind: 'number', type: number }
        images_b_x: { kind: 'number', type: number }
        images_b_y: { kind: 'number', type: number }
        background: { kind: 'enum', type: Enum_ImageCompositeAbsolute_background }
        method: { kind: 'enum', type: Enum_ImageCompositeAbsolute_method }
    }
    ImageCompositeRelative: {
        images_a_x: { kind: 'number', type: number }
        images_a_y: { kind: 'number', type: number }
        images_b_x: { kind: 'number', type: number }
        images_b_y: { kind: 'number', type: number }
        background: { kind: 'enum', type: Enum_ImageCompositeAbsolute_background }
        container_size_type: { kind: 'enum', type: Enum_ImageCompositeRelative_container_size_type }
        method: { kind: 'enum', type: Enum_ImageCompositeAbsolute_method }
    }
    ImageCompositeRelativeByContainer: {
        images_a_x: { kind: 'number', type: number }
        images_a_y: { kind: 'number', type: number }
        images_b_x: { kind: 'number', type: number }
        images_b_y: { kind: 'number', type: number }
        background: { kind: 'enum', type: Enum_ImageCompositeAbsolute_background }
        method: { kind: 'enum', type: Enum_ImageCompositeAbsolute_method }
    }
    ImageContainer: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
    }
    ImageContainerInheritanceAdd: {
        add_width: { kind: 'number', type: number }
        add_height: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageContainerInheritanceAdd_method }
    }
    ImageContainerInheritanceScale: {
        scale_width: { kind: 'number', type: number }
        scale_height: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageContainerInheritanceAdd_method }
    }
    ImageContainerInheritanceMax: {
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageContainerInheritanceMax_method }
    }
    ImageContainerInheritanceSum: {
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        container_size_type: { kind: 'enum', type: Enum_ImageContainerInheritanceSum_container_size_type }
        method: { kind: 'enum', type: Enum_ImageContainerInheritanceMax_method }
    }
    ImageDrawArc: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        size: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawArcByContainer: {
        size: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawChord: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        size: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawChordByContainer: {
        size: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawEllipse: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        outline_alpha: { kind: 'number', type: number }
        fill_red: { kind: 'number', type: number }
        fill_green: { kind: 'number', type: number }
        fill_blue: { kind: 'number', type: number }
        fill_alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawEllipseByContainer: {
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        outline_alpha: { kind: 'number', type: number }
        fill_red: { kind: 'number', type: number }
        fill_green: { kind: 'number', type: number }
        fill_blue: { kind: 'number', type: number }
        fill_alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawLine: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        size: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawLineByContainer: {
        size: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawPieslice: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        outline_alpha: { kind: 'number', type: number }
        fill_red: { kind: 'number', type: number }
        fill_green: { kind: 'number', type: number }
        fill_blue: { kind: 'number', type: number }
        fill_alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawPiesliceByContainer: {
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        outline_alpha: { kind: 'number', type: number }
        fill_red: { kind: 'number', type: number }
        fill_green: { kind: 'number', type: number }
        fill_blue: { kind: 'number', type: number }
        fill_alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawRectangle: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        outline_alpha: { kind: 'number', type: number }
        fill_red: { kind: 'number', type: number }
        fill_green: { kind: 'number', type: number }
        fill_blue: { kind: 'number', type: number }
        fill_alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawRectangleByContainer: {
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        outline_alpha: { kind: 'number', type: number }
        fill_red: { kind: 'number', type: number }
        fill_green: { kind: 'number', type: number }
        fill_blue: { kind: 'number', type: number }
        fill_alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawRectangleRounded: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        radius: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        outline_alpha: { kind: 'number', type: number }
        fill_red: { kind: 'number', type: number }
        fill_green: { kind: 'number', type: number }
        fill_blue: { kind: 'number', type: number }
        fill_alpha: { kind: 'number', type: number }
        top_left_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        top_right_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        bottom_right_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        bottom_left_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawRectangleRoundedByContainer: {
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
        radius: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        outline_alpha: { kind: 'number', type: number }
        fill_red: { kind: 'number', type: number }
        fill_green: { kind: 'number', type: number }
        fill_blue: { kind: 'number', type: number }
        fill_alpha: { kind: 'number', type: number }
        top_left_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        top_right_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        bottom_right_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        bottom_left_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageDrawPolygon: {
        size: { kind: 'number', type: number }
        sides: { kind: 'number', type: number }
        rotation: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        outline_alpha: { kind: 'number', type: number }
        fill_red: { kind: 'number', type: number }
        fill_green: { kind: 'number', type: number }
        fill_blue: { kind: 'number', type: number }
        fill_alpha: { kind: 'number', type: number }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageEffectsAdjustment: {
        brightness: { kind: 'number', type: number }
        contrast: { kind: 'number', type: number }
        saturation: { kind: 'number', type: number }
        hue: { kind: 'number', type: number }
        gamma: { kind: 'number', type: number }
        sharpness: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
    }
    ImageEffectsGrayscale: {
    }
    ImageEffectsNegative: {
    }
    ImageEffectsSepia: {
    }
    ImageEffectsLensZoomBurst: {
        scale: { kind: 'number', type: number }
        samples: { kind: 'number', type: number }
        position_x: { kind: 'number', type: number }
        position_y: { kind: 'number', type: number }
        rotation: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageEffectsLensZoomBurst_method }
        stabilization: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    ImageEffectsLensChromaticAberration: {
        shift: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageEffectsLensChromaticAberration_method }
        shift_type: { kind: 'number', type: number }
        mixing_type: { kind: 'number', type: number }
        transpose: { kind: 'enum', type: Enum_ImageEffectsLensChromaticAberration_transpose }
        colors: { kind: 'enum', type: Enum_ImageEffectsLensChromaticAberration_colors }
        lens_curvy: { kind: 'number', type: number }
    }
    ImageEffectsLensBokeh: {
        blades_shape: { kind: 'number', type: number }
        blades_radius: { kind: 'number', type: number }
        blades_rotation: { kind: 'number', type: number }
        blur_size: { kind: 'number', type: number }
        blur_type: { kind: 'enum', type: Enum_ImageEffectsLensBokeh_blur_type }
        method: { kind: 'enum', type: Enum_ImageEffectsLensBokeh_method }
    }
    ImageEffectsLensOpticAxis: {
        lens_shape: { kind: 'enum', type: Enum_ImageEffectsLensOpticAxis_lens_shape }
        lens_edge: { kind: 'enum', type: Enum_ImageEffectsLensOpticAxis_lens_edge }
        lens_curvy: { kind: 'number', type: number }
        lens_zoom: { kind: 'number', type: number }
        lens_aperture: { kind: 'number', type: number }
        blur_intensity: { kind: 'number', type: number }
    }
    ImageEffectsLensVignette: {
        lens_shape: { kind: 'enum', type: Enum_ImageEffectsLensVignette_lens_shape }
        lens_edge: { kind: 'enum', type: Enum_ImageEffectsLensOpticAxis_lens_edge }
        lens_curvy: { kind: 'number', type: number }
        lens_zoom: { kind: 'number', type: number }
        brightness: { kind: 'number', type: number }
        saturation: { kind: 'number', type: number }
    }
    ImageFilterSmooth: {
    }
    ImageFilterSmoothMore: {
    }
    ImageFilterBlur: {
        size_x: { kind: 'number', type: number }
        size_y: { kind: 'number', type: number }
    }
    ImageFilterBoxBlur: {
        size_x: { kind: 'number', type: number }
        size_y: { kind: 'number', type: number }
    }
    ImageFilterGaussianBlur: {
        size_x: { kind: 'number', type: number }
        size_y: { kind: 'number', type: number }
    }
    ImageFilterGaussianBlurAdvanced: {
        size_x: { kind: 'number', type: number }
        size_y: { kind: 'number', type: number }
        sigma_x: { kind: 'number', type: number }
        sigma_y: { kind: 'number', type: number }
    }
    ImageFilterStackBlur: {
        size_x: { kind: 'number', type: number }
        size_y: { kind: 'number', type: number }
    }
    ImageFilterMedianBlur: {
        size: { kind: 'number', type: number }
    }
    ImageFilterBilateralBlur: {
        size: { kind: 'number', type: number }
        sigma_color: { kind: 'number', type: number }
        sigma_intensity: { kind: 'number', type: number }
    }
    ImageFilterContour: {
    }
    ImageFilterDetail: {
    }
    ImageFilterEdgeEnhance: {
    }
    ImageFilterEdgeEnhanceMore: {
    }
    ImageFilterEmboss: {
    }
    ImageFilterFindEdges: {
    }
    ImageFilterSharpen: {
    }
    ImageFilterRank: {
        size: { kind: 'number', type: number }
        rank: { kind: 'number', type: number }
    }
    ImageFilterMin: {
        size: { kind: 'number', type: number }
    }
    ImageFilterMax: {
        size: { kind: 'number', type: number }
    }
    ImageFilterMode: {
        size: { kind: 'number', type: number }
    }
    ImageNoiseBeta: {
        a: { kind: 'number', type: number }
        b: { kind: 'number', type: number }
        monochromatic: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        invert: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        channels: { kind: 'enum', type: Enum_ImageNoiseBeta_channels }
    }
    ImageNoiseBinomial: {
        n: { kind: 'number', type: number }
        p: { kind: 'number', type: number }
        monochromatic: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        invert: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        channels: { kind: 'enum', type: Enum_ImageNoiseBeta_channels }
    }
    ImageNoiseBytes: {
        monochromatic: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        invert: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        channels: { kind: 'enum', type: Enum_ImageNoiseBeta_channels }
    }
    ImageNoiseGaussian: {
        strength: { kind: 'number', type: number }
        monochromatic: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        invert: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        channels: { kind: 'enum', type: Enum_ImageNoiseBeta_channels }
    }
    ImageSegmentation: {
        model: { kind: 'enum', type: Enum_ImageSegmentation_model }
        alpha_matting: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        alpha_matting_foreground_threshold: { kind: 'number', type: number }
        alpha_matting_background_threshold: { kind: 'number', type: number }
        alpha_matting_erode_size: { kind: 'number', type: number }
        post_process_mask: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    ImageSegmentationCustom: {
        model: { kind: 'enum', type: Enum_ImageSegmentationCustom_model }
        alpha_matting: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        alpha_matting_foreground_threshold: { kind: 'number', type: number }
        alpha_matting_background_threshold: { kind: 'number', type: number }
        alpha_matting_erode_size: { kind: 'number', type: number }
        post_process_mask: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        mean: { kind: 'number', type: number }
        std: { kind: 'number', type: number }
        size: { kind: 'number', type: number }
    }
    ImageSegmentationCustomAdvanced: {
        model: { kind: 'enum', type: Enum_ImageSegmentationCustom_model }
        alpha_matting: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        alpha_matting_foreground_threshold: { kind: 'number', type: number }
        alpha_matting_background_threshold: { kind: 'number', type: number }
        alpha_matting_erode_size: { kind: 'number', type: number }
        post_process_mask: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        mean_r: { kind: 'number', type: number }
        mean_g: { kind: 'number', type: number }
        mean_b: { kind: 'number', type: number }
        std_r: { kind: 'number', type: number }
        std_g: { kind: 'number', type: number }
        std_b: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    ImageText: {
        text: { kind: 'string', type: string }
        font: { kind: 'enum', type: Enum_ImageText_font }
        size: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        margin_x: { kind: 'number', type: number }
        margin_y: { kind: 'number', type: number }
    }
    ImageTextOutlined: {
        text: { kind: 'string', type: string }
        font: { kind: 'enum', type: Enum_ImageText_font }
        size: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        margin_x: { kind: 'number', type: number }
        margin_y: { kind: 'number', type: number }
    }
    ImageTextMultiline: {
        text: { kind: 'string', type: string }
        font: { kind: 'enum', type: Enum_ImageText_font }
        align: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        size: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        margin_x: { kind: 'number', type: number }
        margin_y: { kind: 'number', type: number }
    }
    ImageTextMultilineOutlined: {
        text: { kind: 'string', type: string }
        font: { kind: 'enum', type: Enum_ImageText_font }
        align: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        size: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        outline_size: { kind: 'number', type: number }
        outline_red: { kind: 'number', type: number }
        outline_green: { kind: 'number', type: number }
        outline_blue: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
        margin_x: { kind: 'number', type: number }
        margin_y: { kind: 'number', type: number }
    }
    ImageTransformResizeAbsolute: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageTransformResizeRelative: {
        scale_width: { kind: 'number', type: number }
        scale_height: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageTransformResizeClip: {
        max_width: { kind: 'number', type: number }
        max_height: { kind: 'number', type: number }
        min_width: { kind: 'number', type: number }
        min_height: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageTransformCropAbsolute: {
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
    }
    ImageTransformCropRelative: {
        start_x: { kind: 'number', type: number }
        start_y: { kind: 'number', type: number }
        end_x: { kind: 'number', type: number }
        end_y: { kind: 'number', type: number }
    }
    ImageTransformCropCorners: {
        radius: { kind: 'number', type: number }
        top_left_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        top_right_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        bottom_right_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        bottom_left_corner: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageTransformPaddingAbsolute: {
        add_width: { kind: 'number', type: number }
        add_height: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageEffectsLensChromaticAberration_method }
    }
    ImageTransformPaddingRelative: {
        scale_width: { kind: 'number', type: number }
        scale_height: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageEffectsLensChromaticAberration_method }
    }
    ImageTransformRotate: {
        angle: { kind: 'number', type: number }
        expand: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        SSAA: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDrawArc_method }
    }
    ImageTransformTranspose: {
        method: { kind: 'enum', type: Enum_ImageTransformTranspose_method }
    }
    ADE$_AnimateDiffLoRALoader: {
        name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoRALoader_name }
        strength: { kind: 'number', type: number }
    }
    ADE$_AnimateDiffSamplingSettings: {
        batch_offset: { kind: 'number', type: number }
        noise_type: { kind: 'enum', type: Enum_ADE$_AnimateDiffSamplingSettings_noise_type }
        seed_gen: { kind: 'enum', type: Enum_ADE$_AnimateDiffSamplingSettings_seed_gen }
        seed_offset: { kind: 'number', type: number }
        seed_override: { kind: 'number', type: number }
        adapt_denoise_steps: { kind: 'boolean', type: boolean }
    }
    ADE$_AnimateDiffKeyframe: {
        start_percent: { kind: 'number', type: number }
        inherit_missing: { kind: 'boolean', type: boolean }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_MultivalDynamic: {
        float_val: { kind: 'number', type: number }
    }
    ADE$_MultivalDynamicFloatInput: {
        float_val: { kind: 'number', type: number }
    }
    ADE$_MultivalDynamicFloats: {
    }
    ADE$_MultivalScaledMask: {
        min_float_val: { kind: 'number', type: number }
        max_float_val: { kind: 'number', type: number }
        scaling: { kind: 'enum', type: Enum_ADE$_MultivalScaledMask_scaling }
    }
    ADE$_MultivalConvertToMask: {
    }
    ADE$_StandardStaticContextOptions: {
        context_length: { kind: 'number', type: number }
        context_overlap: { kind: 'number', type: number }
        fuse_method: { kind: 'enum', type: Enum_ADE$_StandardStaticContextOptions_fuse_method }
        use_on_equal_length: { kind: 'boolean', type: boolean }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_StandardUniformContextOptions: {
        context_length: { kind: 'number', type: number }
        context_stride: { kind: 'number', type: number }
        context_overlap: { kind: 'number', type: number }
        fuse_method: { kind: 'enum', type: Enum_ADE$_StandardUniformContextOptions_fuse_method }
        use_on_equal_length: { kind: 'boolean', type: boolean }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_LoopedUniformContextOptions: {
        context_length: { kind: 'number', type: number }
        context_stride: { kind: 'number', type: number }
        context_overlap: { kind: 'number', type: number }
        closed_loop: { kind: 'boolean', type: boolean }
        fuse_method: { kind: 'enum', type: Enum_ADE$_StandardUniformContextOptions_fuse_method }
        use_on_equal_length: { kind: 'boolean', type: boolean }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_ViewsOnlyContextOptions: {
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_BatchedContextOptions: {
        context_length: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_AnimateDiffUniformContextOptions: {
        context_length: { kind: 'number', type: number }
        context_stride: { kind: 'number', type: number }
        context_overlap: { kind: 'number', type: number }
        context_schedule: { kind: 'enum', type: Enum_ADE$_AnimateDiffUniformContextOptions_context_schedule }
        closed_loop: { kind: 'boolean', type: boolean }
        fuse_method: { kind: 'enum', type: Enum_ADE$_StandardUniformContextOptions_fuse_method }
        use_on_equal_length: { kind: 'boolean', type: boolean }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_VisualizeContextOptionsK: {
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        visual_width: { kind: 'number', type: number }
        latents_length: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
    }
    ADE$_VisualizeContextOptionsKAdv: {
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        visual_width: { kind: 'number', type: number }
        latents_length: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        start_step: { kind: 'number', type: number }
        end_step: { kind: 'number', type: number }
    }
    ADE$_VisualizeContextOptionsSCustom: {
        visual_width: { kind: 'number', type: number }
        latents_length: { kind: 'number', type: number }
    }
    ADE$_StandardStaticViewOptions: {
        view_length: { kind: 'number', type: number }
        view_overlap: { kind: 'number', type: number }
        fuse_method: { kind: 'enum', type: Enum_ADE$_StandardUniformContextOptions_fuse_method }
    }
    ADE$_StandardUniformViewOptions: {
        view_length: { kind: 'number', type: number }
        view_stride: { kind: 'number', type: number }
        view_overlap: { kind: 'number', type: number }
        fuse_method: { kind: 'enum', type: Enum_ADE$_StandardUniformContextOptions_fuse_method }
    }
    ADE$_LoopedUniformViewOptions: {
        view_length: { kind: 'number', type: number }
        view_stride: { kind: 'number', type: number }
        view_overlap: { kind: 'number', type: number }
        closed_loop: { kind: 'boolean', type: boolean }
        fuse_method: { kind: 'enum', type: Enum_ADE$_StandardUniformContextOptions_fuse_method }
        use_on_equal_length: { kind: 'boolean', type: boolean }
    }
    ADE$_ContextExtras$_Set: {
    }
    ADE$_ContextExtras$_ContextRef: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    ADE$_ContextExtras$_ContextRef$_ModeFirst: {
    }
    ADE$_ContextExtras$_ContextRef$_ModeSliding: {
        sliding_width: { kind: 'number', type: number }
    }
    ADE$_ContextExtras$_ContextRef$_ModeIndexes: {
        switch_on_idxs: { kind: 'string', type: string }
        always_include_0: { kind: 'boolean', type: boolean }
    }
    ADE$_ContextExtras$_ContextRef$_TuneAttn: {
        attn_style_fidelity: { kind: 'number', type: number }
        attn_ref_weight: { kind: 'number', type: number }
        attn_strength: { kind: 'number', type: number }
    }
    ADE$_ContextExtras$_ContextRef$_TuneAttnAdain: {
        attn_style_fidelity: { kind: 'number', type: number }
        attn_ref_weight: { kind: 'number', type: number }
        attn_strength: { kind: 'number', type: number }
        adain_style_fidelity: { kind: 'number', type: number }
        adain_ref_weight: { kind: 'number', type: number }
        adain_strength: { kind: 'number', type: number }
    }
    ADE$_ContextExtras$_ContextRef$_Keyframe: {
        mult: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
        inherit_missing: { kind: 'boolean', type: boolean }
    }
    ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        mult_start: { kind: 'number', type: number }
        mult_end: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation }
        intervals: { kind: 'number', type: number }
        inherit_missing: { kind: 'boolean', type: boolean }
        print_keyframes: { kind: 'boolean', type: boolean }
    }
    ADE$_ContextExtras$_ContextRef$_KeyframeFromList: {
        mults_float: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        inherit_missing: { kind: 'boolean', type: boolean }
        print_keyframes: { kind: 'boolean', type: boolean }
    }
    ADE$_ContextExtras$_NaiveReuse: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        weighted_mean: { kind: 'number', type: number }
    }
    ADE$_ContextExtras$_NaiveReuse$_Keyframe: {
        mult: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
        inherit_missing: { kind: 'boolean', type: boolean }
    }
    ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        mult_start: { kind: 'number', type: number }
        mult_end: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation }
        intervals: { kind: 'number', type: number }
        inherit_missing: { kind: 'boolean', type: boolean }
        print_keyframes: { kind: 'boolean', type: boolean }
    }
    ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList: {
        mults_float: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        inherit_missing: { kind: 'boolean', type: boolean }
        print_keyframes: { kind: 'boolean', type: boolean }
    }
    ADE$_IterationOptsDefault: {
        iterations: { kind: 'number', type: number }
        iter_batch_offset: { kind: 'number', type: number }
        iter_seed_offset: { kind: 'number', type: number }
    }
    ADE$_IterationOptsFreeInit: {
        iterations: { kind: 'number', type: number }
        filter: { kind: 'enum', type: Enum_ADE$_IterationOptsFreeInit_filter }
        d_s: { kind: 'number', type: number }
        d_t: { kind: 'number', type: number }
        n_butterworth: { kind: 'number', type: number }
        sigma_step: { kind: 'number', type: number }
        apply_to_1st_iter: { kind: 'boolean', type: boolean }
        init_type: { kind: 'enum', type: Enum_ADE$_IterationOptsFreeInit_init_type }
        iter_batch_offset: { kind: 'number', type: number }
        iter_seed_offset: { kind: 'number', type: number }
    }
    ADE$_RegisterLoraHook: {
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
    }
    ADE$_RegisterLoraHookModelOnly: {
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model: { kind: 'number', type: number }
    }
    ADE$_RegisterModelAsLoraHook: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
    }
    ADE$_RegisterModelAsLoraHookModelOnly: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        strength_model: { kind: 'number', type: number }
    }
    ADE$_CombineLoraHooks: {
    }
    ADE$_CombineLoraHooksFour: {
    }
    ADE$_CombineLoraHooksEight: {
    }
    ADE$_SetLoraHookKeyframe: {
    }
    ADE$_AttachLoraHookToCLIP: {
    }
    ADE$_LoraHookKeyframe: {
        strength_model: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_LoraHookKeyframeInterpolation: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        strength_start: { kind: 'number', type: number }
        strength_end: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation }
        intervals: { kind: 'number', type: number }
        print_keyframes: { kind: 'boolean', type: boolean }
    }
    ADE$_LoraHookKeyframeFromStrengthList: {
        strengths_float: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        print_keyframes: { kind: 'boolean', type: boolean }
    }
    ADE$_AttachLoraHookToConditioning: {
    }
    ADE$_PairedConditioningSetMask: {
        strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
    }
    ADE$_ConditioningSetMask: {
        strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
    }
    ADE$_PairedConditioningSetMaskAndCombine: {
        strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
    }
    ADE$_ConditioningSetMaskAndCombine: {
        strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
    }
    ADE$_PairedConditioningSetUnmaskedAndCombine: {
    }
    ADE$_ConditioningSetUnmaskedAndCombine: {
    }
    ADE$_PairedConditioningCombine: {
    }
    ADE$_ConditioningCombine: {
    }
    ADE$_TimestepsConditioning: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    ADE$_NoiseLayerAdd: {
        batch_offset: { kind: 'number', type: number }
        noise_type: { kind: 'enum', type: Enum_ADE$_AnimateDiffSamplingSettings_noise_type }
        seed_gen_override: { kind: 'enum', type: Enum_ADE$_NoiseLayerAdd_seed_gen_override }
        seed_offset: { kind: 'number', type: number }
        noise_weight: { kind: 'number', type: number }
        seed_override: { kind: 'number', type: number }
    }
    ADE$_NoiseLayerAddWeighted: {
        batch_offset: { kind: 'number', type: number }
        noise_type: { kind: 'enum', type: Enum_ADE$_AnimateDiffSamplingSettings_noise_type }
        seed_gen_override: { kind: 'enum', type: Enum_ADE$_NoiseLayerAdd_seed_gen_override }
        seed_offset: { kind: 'number', type: number }
        noise_weight: { kind: 'number', type: number }
        balance_multiplier: { kind: 'number', type: number }
        seed_override: { kind: 'number', type: number }
    }
    ADE$_NoiseLayerReplace: {
        batch_offset: { kind: 'number', type: number }
        noise_type: { kind: 'enum', type: Enum_ADE$_AnimateDiffSamplingSettings_noise_type }
        seed_gen_override: { kind: 'enum', type: Enum_ADE$_NoiseLayerAdd_seed_gen_override }
        seed_offset: { kind: 'number', type: number }
        seed_override: { kind: 'number', type: number }
    }
    ADE$_AnimateDiffSettings: {
    }
    ADE$_AdjustPESweetspotStretch: {
        sweetspot: { kind: 'number', type: number }
        new_sweetspot: { kind: 'number', type: number }
        print_adjustment: { kind: 'boolean', type: boolean }
    }
    ADE$_AdjustPEFullStretch: {
        pe_stretch: { kind: 'number', type: number }
        print_adjustment: { kind: 'boolean', type: boolean }
    }
    ADE$_AdjustPEManual: {
        cap_initial_pe_length: { kind: 'number', type: number }
        interpolate_pe_to_length: { kind: 'number', type: number }
        initial_pe_idx_offset: { kind: 'number', type: number }
        final_pe_idx_offset: { kind: 'number', type: number }
        print_adjustment: { kind: 'boolean', type: boolean }
    }
    ADE$_AdjustWeightAllAdd: {
        all_ADD: { kind: 'number', type: number }
        print_adjustment: { kind: 'boolean', type: boolean }
    }
    ADE$_AdjustWeightAllMult: {
        all_MULT: { kind: 'number', type: number }
        print_adjustment: { kind: 'boolean', type: boolean }
    }
    ADE$_AdjustWeightIndivAdd: {
        pe_ADD: { kind: 'number', type: number }
        attn_ADD: { kind: 'number', type: number }
        other_ADD: { kind: 'number', type: number }
        print_adjustment: { kind: 'boolean', type: boolean }
    }
    ADE$_AdjustWeightIndivMult: {
        pe_MULT: { kind: 'number', type: number }
        attn_MULT: { kind: 'number', type: number }
        other_MULT: { kind: 'number', type: number }
        print_adjustment: { kind: 'boolean', type: boolean }
    }
    ADE$_AdjustWeightIndivAttnAdd: {
        pe_ADD: { kind: 'number', type: number }
        attn_ADD: { kind: 'number', type: number }
        attn_q_ADD: { kind: 'number', type: number }
        attn_k_ADD: { kind: 'number', type: number }
        attn_v_ADD: { kind: 'number', type: number }
        attn_out_weight_ADD: { kind: 'number', type: number }
        attn_out_bias_ADD: { kind: 'number', type: number }
        other_ADD: { kind: 'number', type: number }
        print_adjustment: { kind: 'boolean', type: boolean }
    }
    ADE$_AdjustWeightIndivAttnMult: {
        pe_MULT: { kind: 'number', type: number }
        attn_MULT: { kind: 'number', type: number }
        attn_q_MULT: { kind: 'number', type: number }
        attn_k_MULT: { kind: 'number', type: number }
        attn_v_MULT: { kind: 'number', type: number }
        attn_out_weight_MULT: { kind: 'number', type: number }
        attn_out_bias_MULT: { kind: 'number', type: number }
        other_MULT: { kind: 'number', type: number }
        print_adjustment: { kind: 'boolean', type: boolean }
    }
    ADE$_CustomCFGSimple: {
        cfg: { kind: 'number', type: number }
    }
    ADE$_CustomCFG: {
    }
    ADE$_CustomCFGKeyframeSimple: {
        cfg: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_CustomCFGKeyframe: {
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_CustomCFGKeyframeInterpolation: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        cfg_start: { kind: 'number', type: number }
        cfg_end: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation }
        intervals: { kind: 'number', type: number }
        print_keyframes: { kind: 'boolean', type: boolean }
    }
    ADE$_CustomCFGKeyframeFromList: {
        cfgs_float: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        print_keyframes: { kind: 'boolean', type: boolean }
    }
    ADE$_CFGExtrasPAGSimple: {
        scale: { kind: 'number', type: number }
    }
    ADE$_CFGExtrasPAG: {
    }
    ADE$_CFGExtrasRescaleCFGSimple: {
        multiplier: { kind: 'number', type: number }
    }
    ADE$_CFGExtrasRescaleCFG: {
    }
    ADE$_SigmaSchedule: {
        beta_schedule: { kind: 'enum', type: Enum_ADE$_SigmaSchedule_beta_schedule }
    }
    ADE$_RawSigmaSchedule: {
        raw_beta_schedule: { kind: 'enum', type: Enum_ADE$_RawSigmaSchedule_raw_beta_schedule }
        linear_start: { kind: 'number', type: number }
        linear_end: { kind: 'number', type: number }
        sampling: { kind: 'enum', type: Enum_ADE$_RawSigmaSchedule_sampling }
        lcm_original_timesteps: { kind: 'number', type: number }
        lcm_zsnr: { kind: 'boolean', type: boolean }
    }
    ADE$_SigmaScheduleWeightedAverage: {
        weight_A: { kind: 'number', type: number }
    }
    ADE$_SigmaScheduleWeightedAverageInterp: {
        weight_A_Start: { kind: 'number', type: number }
        weight_A_End: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation }
    }
    ADE$_SigmaScheduleSplitAndCombine: {
        idx_split_percent: { kind: 'number', type: number }
    }
    ADE$_SigmaScheduleToSigmas: {
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        steps: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
    }
    ADE$_NoisedImageInjection: {
        invert_mask: { kind: 'boolean', type: boolean }
        resize_image: { kind: 'boolean', type: boolean }
        start_percent: { kind: 'number', type: number }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_NoisedImageInjectOptions: {
        composite_x: { kind: 'number', type: number }
        composite_y: { kind: 'number', type: number }
    }
    ADE$_PromptScheduling: {
        prompts: { kind: 'string', type: string }
        prepend_text: { kind: 'string', type: string }
        append_text: { kind: 'string', type: string }
        print_schedule: { kind: 'boolean', type: boolean }
        max_length: { kind: 'number', type: number }
        tensor_interp: { kind: 'enum', type: Enum_ADE$_PromptScheduling_tensor_interp }
    }
    ADE$_PromptSchedulingLatents: {
        prompts: { kind: 'string', type: string }
        prepend_text: { kind: 'string', type: string }
        append_text: { kind: 'string', type: string }
        print_schedule: { kind: 'boolean', type: boolean }
        tensor_interp: { kind: 'enum', type: Enum_ADE$_PromptScheduling_tensor_interp }
    }
    ADE$_ValueScheduling: {
        values: { kind: 'string', type: string }
        print_schedule: { kind: 'boolean', type: boolean }
        max_length: { kind: 'number', type: number }
    }
    ADE$_ValueSchedulingLatents: {
        values: { kind: 'string', type: string }
        print_schedule: { kind: 'boolean', type: boolean }
    }
    ADE$_ValuesReplace: {
        value_key: { kind: 'string', type: string }
    }
    ADE$_FloatToFloats: {
        FLOAT: { kind: 'number', type: number }
    }
    ADE$_ADBlockCombo: {
    }
    ADE$_ADBlockIndiv: {
    }
    ADE$_PerBlockHighLevel: {
    }
    ADE$_PerBlock$_SD15$_MidLevel: {
    }
    ADE$_PerBlock$_SD15$_LowLevel: {
    }
    ADE$_PerBlock$_SD15$_FromFloats: {
    }
    ADE$_PerBlock$_SDXL$_MidLevel: {
    }
    ADE$_PerBlock$_SDXL$_LowLevel: {
    }
    ADE$_PerBlock$_SDXL$_FromFloats: {
    }
    ADE$_AnimateDiffUnload: {
    }
    ADE$_EmptyLatentImageLarge: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    CheckpointLoaderSimpleWithNoiseSelect: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        beta_schedule: { kind: 'enum', type: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule }
        use_custom_scale_factor: { kind: 'boolean', type: boolean }
        scale_factor: { kind: 'number', type: number }
    }
    ADE$_PerturbedAttentionGuidanceMultival: {
    }
    ADE$_RescaleCFGMultival: {
    }
    ADE$_AnimateDiffLoaderGen1: {
        model_name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
        beta_schedule: { kind: 'enum', type: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule }
    }
    ADE$_AnimateDiffLoaderWithContext: {
        model_name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
        beta_schedule: { kind: 'enum', type: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule }
        motion_scale: { kind: 'number', type: number }
        apply_v2_models_properly: { kind: 'boolean', type: boolean }
    }
    ADE$_UseEvolvedSampling: {
        beta_schedule: { kind: 'enum', type: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule }
    }
    ADE$_ApplyAnimateDiffModelSimple: {
    }
    ADE$_ApplyAnimateDiffModel: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    ADE$_LoadAnimateDiffModel: {
        model_name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
    }
    ADE$_ApplyAnimateLCMI2VModel: {
        ref_drift: { kind: 'number', type: number }
        apply_ref_when_disabled: { kind: 'boolean', type: boolean }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    ADE$_LoadAnimateLCMI2VModel: {
        model_name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
    }
    ADE$_UpscaleAndVAEEncode: {
        scale_method: { kind: 'enum', type: Enum_ImageScale_upscale_method }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    ADE$_InjectI2VIntoAnimateDiffModel: {
        model_name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
    }
    ADE$_ApplyAnimateDiffModelWithCameraCtrl: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    ADE$_LoadAnimateDiffModelWithCameraCtrl: {
        model_name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
        camera_ctrl: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
    }
    ADE$_CameraCtrlAnimateDiffKeyframe: {
        start_percent: { kind: 'number', type: number }
        inherit_missing: { kind: 'boolean', type: boolean }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_LoadCameraPoses: {
        pose_filename: { kind: 'enum', type: Enum_ADE$_LoadCameraPoses_pose_filename }
    }
    ADE$_LoadCameraPosesFromPath: {
        file_path: { kind: 'string', type: string }
    }
    ADE$_CameraPoseBasic: {
        motion_type: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        speed: { kind: 'number', type: number }
        frame_length: { kind: 'number', type: number }
    }
    ADE$_CameraPoseCombo: {
        motion_type1: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        motion_type2: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        motion_type3: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        motion_type4: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        motion_type5: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        motion_type6: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        speed: { kind: 'number', type: number }
        frame_length: { kind: 'number', type: number }
    }
    ADE$_CameraPoseAdvanced: {
        motion_type1: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        strength1: { kind: 'number', type: number }
        motion_type2: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        strength2: { kind: 'number', type: number }
        motion_type3: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        strength3: { kind: 'number', type: number }
        motion_type4: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        strength4: { kind: 'number', type: number }
        motion_type5: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        strength5: { kind: 'number', type: number }
        motion_type6: { kind: 'enum', type: Enum_ADE$_CameraPoseBasic_motion_type }
        strength6: { kind: 'number', type: number }
        speed: { kind: 'number', type: number }
        frame_length: { kind: 'number', type: number }
    }
    ADE$_CameraManualPoseAppend: {
    }
    ADE$_ReplaceCameraParameters: {
        fx: { kind: 'number', type: number }
        fy: { kind: 'number', type: number }
        cx: { kind: 'number', type: number }
        cy: { kind: 'number', type: number }
    }
    ADE$_ReplaceOriginalPoseAspectRatio: {
        orig_pose_width: { kind: 'number', type: number }
        orig_pose_height: { kind: 'number', type: number }
    }
    ADE$_ApplyAnimateDiffModelWithPIA: {
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    ADE$_InputPIA$_Multival: {
    }
    ADE$_InputPIA$_PaperPresets: {
        preset: { kind: 'enum', type: Enum_ADE$_InputPIA$_PaperPresets_preset }
        batch_index: { kind: 'number', type: number }
        print_values: { kind: 'boolean', type: boolean }
    }
    ADE$_PIA$_AnimateDiffKeyframe: {
        start_percent: { kind: 'number', type: number }
        inherit_missing: { kind: 'boolean', type: boolean }
        guarantee_steps: { kind: 'number', type: number }
    }
    ADE$_InjectPIAIntoAnimateDiffModel: {
        model_name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
    }
    AnimateDiffLoaderV1: {
        model_name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
        unlimited_area_hack: { kind: 'boolean', type: boolean }
        beta_schedule: { kind: 'enum', type: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule }
    }
    ADE$_AnimateDiffLoaderV1Advanced: {
        model_name: { kind: 'enum', type: Enum_ADE$_AnimateDiffLoaderGen1_model_name }
        unlimited_area_hack: { kind: 'boolean', type: boolean }
        context_length: { kind: 'number', type: number }
        context_stride: { kind: 'number', type: number }
        context_overlap: { kind: 'number', type: number }
        context_schedule: { kind: 'enum', type: Enum_ADE$_AnimateDiffUniformContextOptions_context_schedule }
        closed_loop: { kind: 'boolean', type: boolean }
        beta_schedule: { kind: 'enum', type: Enum_CheckpointLoaderSimpleWithNoiseSelect_beta_schedule }
    }
    ADE$_AnimateDiffCombine: {
        frame_rate: { kind: 'number', type: number }
        loop_count: { kind: 'number', type: number }
        filename_prefix: { kind: 'string', type: string }
        format: { kind: 'enum', type: Enum_ADE$_AnimateDiffCombine_format }
        pingpong: { kind: 'boolean', type: boolean }
        save_image: { kind: 'boolean', type: boolean }
    }
    ADE$_AnimateDiffModelSettings$_Release: {
        min_motion_scale: { kind: 'number', type: number }
        max_motion_scale: { kind: 'number', type: number }
    }
    ADE$_AnimateDiffModelSettingsSimple: {
        motion_pe_stretch: { kind: 'number', type: number }
        min_motion_scale: { kind: 'number', type: number }
        max_motion_scale: { kind: 'number', type: number }
    }
    ADE$_AnimateDiffModelSettings: {
        pe_strength: { kind: 'number', type: number }
        attn_strength: { kind: 'number', type: number }
        other_strength: { kind: 'number', type: number }
        motion_pe_stretch: { kind: 'number', type: number }
        cap_initial_pe_length: { kind: 'number', type: number }
        interpolate_pe_to_length: { kind: 'number', type: number }
        initial_pe_idx_offset: { kind: 'number', type: number }
        final_pe_idx_offset: { kind: 'number', type: number }
        min_motion_scale: { kind: 'number', type: number }
        max_motion_scale: { kind: 'number', type: number }
    }
    ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths: {
        pe_strength: { kind: 'number', type: number }
        attn_strength: { kind: 'number', type: number }
        attn_q_strength: { kind: 'number', type: number }
        attn_k_strength: { kind: 'number', type: number }
        attn_v_strength: { kind: 'number', type: number }
        attn_out_weight_strength: { kind: 'number', type: number }
        attn_out_bias_strength: { kind: 'number', type: number }
        other_strength: { kind: 'number', type: number }
        motion_pe_stretch: { kind: 'number', type: number }
        cap_initial_pe_length: { kind: 'number', type: number }
        interpolate_pe_to_length: { kind: 'number', type: number }
        initial_pe_idx_offset: { kind: 'number', type: number }
        final_pe_idx_offset: { kind: 'number', type: number }
        min_motion_scale: { kind: 'number', type: number }
        max_motion_scale: { kind: 'number', type: number }
    }
    AV$_CheckpointModelsToParametersPipe: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        secondary_ckpt_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        vae_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_vae_name }
        upscaler_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name }
        secondary_upscaler_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name }
        lora_1_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_2_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_3_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
    }
    AV$_PromptsToParametersPipe: {
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
    }
    AV$_ParametersPipeToCheckpointModels: {
    }
    AV$_ParametersPipeToPrompts: {
    }
    AV$_VAELoader: {
        vae_name: { kind: 'enum', type: Enum_VAELoader_vae_name }
        vae_override: { kind: 'string', type: string }
    }
    AV$_LoraLoader: {
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
        lora_override: { kind: 'string', type: string }
        enabled: { kind: 'boolean', type: boolean }
    }
    AV$_LoraListLoader: {
        data: { kind: 'string', type: string }
    }
    AV$_LoraListStacker: {
        data: { kind: 'string', type: string }
    }
    AV$_CheckpointMerge: {
        model1_weight: { kind: 'number', type: number }
        model2_weight: { kind: 'number', type: number }
    }
    AV$_CheckpointSave: {
        filename_prefix: { kind: 'string', type: string }
        dtype: { kind: 'enum', type: Enum_AV$_CheckpointSave_dtype }
    }
    LoadImageFromUrl: {
        image: { kind: 'string', type: string }
        keep_alpha_channel: { kind: 'boolean', type: boolean }
        output_mode: { kind: 'boolean', type: boolean }
        url: { kind: 'string', type: string }
    }
    LoadImageAsMaskFromUrl: {
        image: { kind: 'string', type: string }
        channel: { kind: 'enum', type: Enum_LoadImageMask_channel }
        output_mode: { kind: 'boolean', type: boolean }
    }
    StringToInt: {
        string: { kind: 'string', type: string }
    }
    StringToNumber: {
        string: { kind: 'string', type: string }
        rounding: { kind: 'enum', type: Enum_StringToNumber_rounding }
    }
    BooleanPrimitive: {
        value: { kind: 'boolean', type: boolean }
        reverse: { kind: 'boolean', type: boolean }
    }
    ImageMuxer: {
        input_selector: { kind: 'number', type: number }
    }
    ImageScaleDown: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    ImageScaleDownBy: {
        scale_by: { kind: 'number', type: number }
    }
    ImageScaleDownToSize: {
        size: { kind: 'number', type: number }
        mode: { kind: 'boolean', type: boolean }
    }
    ImageScaleToMegapixels: {
        megapixels: { kind: 'number', type: number }
    }
    ImageAlphaComposite: {
    }
    ImageGaussianBlur: {
        radius: { kind: 'number', type: number }
    }
    ImageRepeat: {
        amount: { kind: 'number', type: number }
    }
    ImageExtractChannel: {
        channel: { kind: 'enum', type: Enum_ImageExtractChannel_channel }
    }
    ImageApplyChannel: {
        channel: { kind: 'enum', type: Enum_ImageExtractChannel_channel }
    }
    QRCodeGenerator: {
        text: { kind: 'string', type: string }
        size: { kind: 'number', type: number }
        qr_version: { kind: 'number', type: number }
        error_correction: { kind: 'enum', type: Enum_QRCodeGenerator_error_correction }
        box_size: { kind: 'number', type: number }
        border: { kind: 'number', type: number }
    }
    DependenciesEdit: {
        ckpt_name: { kind: 'enum', type: Enum_DependenciesEdit_ckpt_name }
        vae_name: { kind: 'enum', type: Enum_DependenciesEdit_vae_name }
        clip_skip: { kind: 'number', type: number }
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
    }
    AspectRatioSelector: {
        aspect_ratio: { kind: 'enum', type: Enum_AspectRatioSelector_aspect_ratio }
    }
    SDXLAspectRatioSelector: {
        aspect_ratio: { kind: 'enum', type: Enum_SDXLAspectRatioSelector_aspect_ratio }
    }
    SeedSelector: {
        mode: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
        fixed_seed: { kind: 'number', type: number }
    }
    CheckpointNameSelector: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    LoadJsonFromUrl: {
        url: { kind: 'string', type: string }
        print_to_console: { kind: 'boolean', type: boolean }
    }
    LoadJsonFromText: {
        data: { kind: 'string', type: string }
    }
    GetObjectFromJson: {
        key: { kind: 'string', type: string }
    }
    GetTextFromJson: {
        key: { kind: 'string', type: string }
    }
    GetFloatFromJson: {
        key: { kind: 'string', type: string }
    }
    GetIntFromJson: {
        key: { kind: 'string', type: string }
    }
    GetBoolFromJson: {
        key: { kind: 'string', type: string }
    }
    RandomInt: {
        min: { kind: 'number', type: number }
        max: { kind: 'number', type: number }
    }
    RandomFloat: {
        min: { kind: 'number', type: number }
        max: { kind: 'number', type: number }
    }
    NumberScaler: {
        min: { kind: 'number', type: number }
        max: { kind: 'number', type: number }
        scale_to_min: { kind: 'number', type: number }
        scale_to_max: { kind: 'number', type: number }
        value: { kind: 'number', type: number }
    }
    MergeModels: {
        ratio: { kind: 'number', type: number }
    }
    TextRandomMultiline: {
        text: { kind: 'string', type: string }
        amount: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    SDXLPromptStyler: {
        text_positive: { kind: 'string', type: string }
        text_negative: { kind: 'string', type: string }
        style: { kind: 'enum', type: Enum_SDXLPromptStyler_style }
        log_prompt: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
        style_name: { kind: 'string', type: string }
    }
    BLIPLoader: {
        model_name: { kind: 'enum', type: Enum_BLIPLoader_model_name }
    }
    BLIPCaption: {
        min_length: { kind: 'number', type: number }
        max_length: { kind: 'number', type: number }
        device_mode: { kind: 'enum', type: Enum_BLIPCaption_device_mode }
        prefix: { kind: 'string', type: string }
        suffix: { kind: 'string', type: string }
        enabled: { kind: 'boolean', type: boolean }
    }
    DownloadAndLoadBlip: {
        model_name: { kind: 'enum', type: Enum_DownloadAndLoadBlip_model_name }
    }
    DeepDanbooruCaption: {
        threshold: { kind: 'number', type: number }
        sort_alpha: { kind: 'boolean', type: boolean }
        use_spaces: { kind: 'boolean', type: boolean }
        escape: { kind: 'boolean', type: boolean }
        filter_tags: { kind: 'string', type: string }
        device_mode: { kind: 'enum', type: Enum_BLIPCaption_device_mode }
        prefix: { kind: 'string', type: string }
        suffix: { kind: 'string', type: string }
        enabled: { kind: 'boolean', type: boolean }
    }
    Fooocus$_KSampler: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
        sharpness: { kind: 'number', type: number }
    }
    Fooocus$_KSamplerAdvanced: {
        add_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        noise_seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        return_with_leftover_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        sharpness: { kind: 'number', type: number }
    }
    ColorBlend: {
    }
    ColorCorrect: {
        temperature: { kind: 'number', type: number }
        hue: { kind: 'number', type: number }
        brightness: { kind: 'number', type: number }
        contrast: { kind: 'number', type: number }
        saturation: { kind: 'number', type: number }
        gamma: { kind: 'number', type: number }
    }
    AV$_ControlNetLoader: {
        control_net_name: { kind: 'enum', type: Enum_ControlNetLoader_control_net_name }
        control_net_override: { kind: 'string', type: string }
    }
    AV$_ControlNetEfficientLoader: {
        control_net_name: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_control_net_name }
        strength: { kind: 'number', type: number }
        preprocessor: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_preprocessor }
        control_net_override: { kind: 'string', type: string }
        resolution: { kind: 'number', type: number }
        enabled: { kind: 'boolean', type: boolean }
    }
    AV$_ControlNetEfficientLoaderAdvanced: {
        control_net_name: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_control_net_name }
        strength: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        preprocessor: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_preprocessor }
        control_net_override: { kind: 'string', type: string }
        resolution: { kind: 'number', type: number }
        enabled: { kind: 'boolean', type: boolean }
    }
    AV$_ControlNetEfficientStacker: {
        control_net_name: { kind: 'enum', type: Enum_AV$_ControlNetEfficientStacker_control_net_name }
        strength: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
        preprocessor: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_preprocessor }
        control_net_override: { kind: 'string', type: string }
        resolution: { kind: 'number', type: number }
        enabled: { kind: 'boolean', type: boolean }
    }
    AV$_ControlNetEfficientStackerSimple: {
        control_net_name: { kind: 'enum', type: Enum_AV$_ControlNetEfficientStacker_control_net_name }
        strength: { kind: 'number', type: number }
        preprocessor: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_preprocessor }
        control_net_override: { kind: 'string', type: string }
        resolution: { kind: 'number', type: number }
        enabled: { kind: 'boolean', type: boolean }
    }
    AV$_ControlNetPreprocessor: {
        preprocessor: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_preprocessor }
        sd_version: { kind: 'enum', type: Enum_AV$_ControlNetPreprocessor_sd_version }
        resolution: { kind: 'number', type: number }
        preprocessor_override: { kind: 'string', type: string }
    }
    AV$_IPAdapter: {
        ip_adapter_name: { kind: 'enum', type: Enum_AV$_IPAdapter_ip_adapter_name }
        clip_name: { kind: 'enum', type: Enum_AV$_IPAdapter_clip_name }
        weight: { kind: 'number', type: number }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_AV$_IPAdapter_weight_type }
        enabled: { kind: 'boolean', type: boolean }
    }
    AV$_IPAdapterPipe: {
        ip_adapter_name: { kind: 'enum', type: Enum_AV$_IPAdapterPipe_ip_adapter_name }
        clip_name: { kind: 'enum', type: Enum_CLIPVisionLoader_clip_name }
    }
    ISNetLoader: {
        model_name: { kind: 'enum', type: Enum_ISNetLoader_model_name }
    }
    ISNetSegment: {
        threshold: { kind: 'number', type: number }
        device_mode: { kind: 'enum', type: Enum_BLIPCaption_device_mode }
        enabled: { kind: 'boolean', type: boolean }
    }
    DownloadISNetModel: {
        model_name: { kind: 'enum', type: Enum_DownloadISNetModel_model_name }
    }
    AV$_SAMLoader: {
        model_name: { kind: 'enum', type: Enum_AV$_SAMLoader_model_name }
    }
    GetSAMEmbedding: {
        device_mode: { kind: 'enum', type: Enum_BLIPCaption_device_mode }
    }
    SAMEmbeddingToImage: {
    }
    LaMaInpaint: {
        device_mode: { kind: 'enum', type: Enum_BLIPCaption_device_mode }
    }
    PrepareImageAndMaskForInpaint: {
        mask_blur: { kind: 'number', type: number }
        inpaint_masked: { kind: 'boolean', type: boolean }
        mask_padding: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    OverlayInpaintedLatent: {
    }
    OverlayInpaintedImage: {
    }
    AV$_FaceDetailer: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        noise_mask: { kind: 'boolean', type: boolean }
        force_inpaint: { kind: 'boolean', type: boolean }
        bbox_threshold: { kind: 'number', type: number }
        bbox_dilation: { kind: 'number', type: number }
        bbox_crop_factor: { kind: 'number', type: number }
        sam_detection_hint: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_detection_hint }
        sam_dilation: { kind: 'number', type: number }
        sam_threshold: { kind: 'number', type: number }
        sam_bbox_expansion: { kind: 'number', type: number }
        sam_mask_hint_threshold: { kind: 'number', type: number }
        sam_mask_hint_use_negative: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative }
        drop_size: { kind: 'number', type: number }
        wildcard: { kind: 'string', type: string }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
        enabled: { kind: 'boolean', type: boolean }
    }
    AV$_FaceDetailerPipe: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        noise_mask: { kind: 'boolean', type: boolean }
        force_inpaint: { kind: 'boolean', type: boolean }
        bbox_threshold: { kind: 'number', type: number }
        bbox_dilation: { kind: 'number', type: number }
        bbox_crop_factor: { kind: 'number', type: number }
        sam_detection_hint: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_detection_hint }
        sam_dilation: { kind: 'number', type: number }
        sam_threshold: { kind: 'number', type: number }
        sam_bbox_expansion: { kind: 'number', type: number }
        sam_mask_hint_threshold: { kind: 'number', type: number }
        sam_mask_hint_use_negative: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative }
        drop_size: { kind: 'number', type: number }
        refiner_ratio: { kind: 'number', type: number }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
        enabled: { kind: 'boolean', type: boolean }
    }
    AV$_OpenAIApi: {
        openai_api_key: { kind: 'string', type: string }
        endpoint: { kind: 'string', type: string }
    }
    AV$_ClaudeApi: {
        claude_api_key: { kind: 'string', type: string }
        endpoint: { kind: 'string', type: string }
        version: { kind: 'enum', type: Enum_AV$_ClaudeApi_version }
    }
    AV$_AwsBedrockClaudeApi: {
        aws_access_key_id: { kind: 'string', type: string }
        aws_secret_access_key: { kind: 'string', type: string }
        aws_session_token: { kind: 'string', type: string }
        region: { kind: 'enum', type: Enum_AV$_AwsBedrockClaudeApi_region }
        version: { kind: 'enum', type: Enum_AV$_AwsBedrockClaudeApi_version }
    }
    AV$_AwsBedrockMistralApi: {
        aws_access_key_id: { kind: 'string', type: string }
        aws_secret_access_key: { kind: 'string', type: string }
        aws_session_token: { kind: 'string', type: string }
        region: { kind: 'enum', type: Enum_AV$_AwsBedrockClaudeApi_region }
    }
    AV$_LLMApiConfig: {
        model: { kind: 'enum', type: Enum_AV$_LLMApiConfig_model }
        max_token: { kind: 'number', type: number }
        temperature: { kind: 'number', type: number }
    }
    AV$_LLMMessage: {
        role: { kind: 'enum', type: Enum_AV$_LLMMessage_role }
        text: { kind: 'string', type: string }
    }
    AV$_LLMChat: {
        seed: { kind: 'number', type: number }
    }
    AV$_LLMCompletion: {
        prompt: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
    }
    BRIA$_RMBG$_ModelLoader$_Zho: {
    }
    BRIA$_RMBG$_Zho: {
    }
    LoraLoader$8pysssss: {
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
    }
    CheckpointLoader$8pysssss: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    ConstrainImage$8pysssss: {
        max_width: { kind: 'number', type: number }
        max_height: { kind: 'number', type: number }
        min_width: { kind: 'number', type: number }
        min_height: { kind: 'number', type: number }
        crop_if_required: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
    }
    ConstrainImageforVideo$8pysssss: {
        max_width: { kind: 'number', type: number }
        max_height: { kind: 'number', type: number }
        min_width: { kind: 'number', type: number }
        min_height: { kind: 'number', type: number }
        crop_if_required: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
    }
    MathExpression$8pysssss: {
        expression: { kind: 'string', type: string }
    }
    PlaySound$8pysssss: {
        mode: { kind: 'enum', type: Enum_PlaySound$8pysssss_mode }
        volume: { kind: 'number', type: number }
        file: { kind: 'string', type: string }
    }
    Repeater$8pysssss: {
        repeats: { kind: 'number', type: number }
        output: { kind: 'enum', type: Enum_Repeater$8pysssss_output }
        node_mode: { kind: 'enum', type: Enum_Repeater$8pysssss_node_mode }
    }
    ReroutePrimitive$8pysssss: {
    }
    ShowText$8pysssss: {
        text: { kind: 'string', type: string }
    }
    StringFunction$8pysssss: {
        action: { kind: 'enum', type: Enum_StringFunction$8pysssss_action }
        tidy_tags: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
        text_a: { kind: 'string', type: string }
        text_b: { kind: 'string', type: string }
        text_c: { kind: 'string', type: string }
    }
    SystemNotification$8pysssss: {
        message: { kind: 'string', type: string }
        mode: { kind: 'enum', type: Enum_PlaySound$8pysssss_mode }
    }
    LoadText$8pysssss: {
        root_dir: { kind: 'enum', type: Enum_LoadText$8pysssss_root_dir }
        file: { kind: 'enum', type: Enum_LoadText$8pysssss_file }
    }
    SaveText$8pysssss: {
        root_dir: { kind: 'enum', type: Enum_LoadText$8pysssss_root_dir }
        file: { kind: 'string', type: string }
        append: { kind: 'enum', type: Enum_SaveText$8pysssss_append }
        insert: { kind: 'boolean', type: boolean }
        text: { kind: 'string', type: string }
    }
    DPRandomGenerator: {
        text: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        autorefresh: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
    }
    DPCombinatorialGenerator: {
        text: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        autorefresh: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
    }
    DPFeelingLucky: {
        text: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        autorefresh: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
    }
    DPJinja: {
        text: { kind: 'string', type: string }
        autorefresh: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
    }
    DPMagicPrompt: {
        text: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        autorefresh: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
    }
    DPOutput: {
        text: { kind: 'string', type: string }
    }
    SAMLoader: {
        model_name: { kind: 'enum', type: Enum_SAMLoader_model_name }
        device_mode: { kind: 'enum', type: Enum_BLIPCaption_device_mode }
    }
    CLIPSegDetectorProvider: {
        text: { kind: 'string', type: string }
        blur: { kind: 'number', type: number }
        threshold: { kind: 'number', type: number }
        dilation_factor: { kind: 'number', type: number }
    }
    ONNXDetectorProvider: {
        model_name: { kind: 'enum', type: Enum_ImageSegmentationCustom_model }
    }
    BitwiseAndMaskForEach: {
    }
    SubtractMaskForEach: {
    }
    DetailerForEach: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        noise_mask: { kind: 'boolean', type: boolean }
        force_inpaint: { kind: 'boolean', type: boolean }
        wildcard: { kind: 'string', type: string }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
    }
    DetailerForEachDebug: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        noise_mask: { kind: 'boolean', type: boolean }
        force_inpaint: { kind: 'boolean', type: boolean }
        wildcard: { kind: 'string', type: string }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
    }
    DetailerForEachPipe: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        noise_mask: { kind: 'boolean', type: boolean }
        force_inpaint: { kind: 'boolean', type: boolean }
        wildcard: { kind: 'string', type: string }
        refiner_ratio: { kind: 'number', type: number }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
    }
    DetailerForEachDebugPipe: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        noise_mask: { kind: 'boolean', type: boolean }
        force_inpaint: { kind: 'boolean', type: boolean }
        wildcard: { kind: 'string', type: string }
        refiner_ratio: { kind: 'number', type: number }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
    }
    DetailerForEachPipeForAnimateDiff: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        refiner_ratio: { kind: 'number', type: number }
        noise_mask_feather: { kind: 'number', type: number }
    }
    SAMDetectorCombined: {
        detection_hint: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_detection_hint }
        dilation: { kind: 'number', type: number }
        threshold: { kind: 'number', type: number }
        bbox_expansion: { kind: 'number', type: number }
        mask_hint_threshold: { kind: 'number', type: number }
        mask_hint_use_negative: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative }
    }
    SAMDetectorSegmented: {
        detection_hint: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_detection_hint }
        dilation: { kind: 'number', type: number }
        threshold: { kind: 'number', type: number }
        bbox_expansion: { kind: 'number', type: number }
        mask_hint_threshold: { kind: 'number', type: number }
        mask_hint_use_negative: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative }
    }
    FaceDetailer: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        noise_mask: { kind: 'boolean', type: boolean }
        force_inpaint: { kind: 'boolean', type: boolean }
        bbox_threshold: { kind: 'number', type: number }
        bbox_dilation: { kind: 'number', type: number }
        bbox_crop_factor: { kind: 'number', type: number }
        sam_detection_hint: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_detection_hint }
        sam_dilation: { kind: 'number', type: number }
        sam_threshold: { kind: 'number', type: number }
        sam_bbox_expansion: { kind: 'number', type: number }
        sam_mask_hint_threshold: { kind: 'number', type: number }
        sam_mask_hint_use_negative: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative }
        drop_size: { kind: 'number', type: number }
        wildcard: { kind: 'string', type: string }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
    }
    FaceDetailerPipe: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        noise_mask: { kind: 'boolean', type: boolean }
        force_inpaint: { kind: 'boolean', type: boolean }
        bbox_threshold: { kind: 'number', type: number }
        bbox_dilation: { kind: 'number', type: number }
        bbox_crop_factor: { kind: 'number', type: number }
        sam_detection_hint: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_detection_hint }
        sam_dilation: { kind: 'number', type: number }
        sam_threshold: { kind: 'number', type: number }
        sam_bbox_expansion: { kind: 'number', type: number }
        sam_mask_hint_threshold: { kind: 'number', type: number }
        sam_mask_hint_use_negative: { kind: 'enum', type: Enum_AV$_FaceDetailer_sam_mask_hint_use_negative }
        drop_size: { kind: 'number', type: number }
        refiner_ratio: { kind: 'number', type: number }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
    }
    MaskDetailerPipe: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        mask_mode: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        crop_factor: { kind: 'number', type: number }
        drop_size: { kind: 'number', type: number }
        refiner_ratio: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
        bbox_fill: { kind: 'boolean', type: boolean }
        contour_fill: { kind: 'boolean', type: boolean }
    }
    ToDetailerPipe: {
        wildcard: { kind: 'string', type: string }
        "Select to add LoRA": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_LoRA }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
    }
    ToDetailerPipeSDXL: {
        wildcard: { kind: 'string', type: string }
        "Select to add LoRA": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_LoRA }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
    }
    FromDetailerPipe: {
    }
    FromDetailerPipe$_v2: {
    }
    FromDetailerPipeSDXL: {
    }
    AnyPipeToBasic: {
    }
    ToBasicPipe: {
    }
    FromBasicPipe: {
    }
    FromBasicPipe$_v2: {
    }
    BasicPipeToDetailerPipe: {
        wildcard: { kind: 'string', type: string }
        "Select to add LoRA": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_LoRA }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
    }
    BasicPipeToDetailerPipeSDXL: {
        wildcard: { kind: 'string', type: string }
        "Select to add LoRA": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_LoRA }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
    }
    DetailerPipeToBasicPipe: {
    }
    EditBasicPipe: {
    }
    EditDetailerPipe: {
        wildcard: { kind: 'string', type: string }
        "Select to add LoRA": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_LoRA }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
    }
    EditDetailerPipeSDXL: {
        wildcard: { kind: 'string', type: string }
        "Select to add LoRA": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_LoRA }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
    }
    LatentPixelScale: {
        scale_method: { kind: 'enum', type: Enum_LatentPixelScale_scale_method }
        scale_factor: { kind: 'number', type: number }
        use_tiled_vae: { kind: 'boolean', type: boolean }
    }
    PixelKSampleUpscalerProvider: {
        scale_method: { kind: 'enum', type: Enum_LatentPixelScale_scale_method }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        use_tiled_vae: { kind: 'boolean', type: boolean }
        tile_size: { kind: 'number', type: number }
    }
    PixelKSampleUpscalerProviderPipe: {
        scale_method: { kind: 'enum', type: Enum_LatentPixelScale_scale_method }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        use_tiled_vae: { kind: 'boolean', type: boolean }
        tile_size: { kind: 'number', type: number }
        tile_cnet_strength: { kind: 'number', type: number }
    }
    IterativeLatentUpscale: {
        upscale_factor: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        temp_prefix: { kind: 'string', type: string }
        step_mode: { kind: 'enum', type: Enum_IterativeLatentUpscale_step_mode }
    }
    IterativeImageUpscale: {
        upscale_factor: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        temp_prefix: { kind: 'string', type: string }
        step_mode: { kind: 'enum', type: Enum_IterativeLatentUpscale_step_mode }
    }
    PixelTiledKSampleUpscalerProvider: {
        scale_method: { kind: 'enum', type: Enum_LatentPixelScale_scale_method }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
        tile_width: { kind: 'number', type: number }
        tile_height: { kind: 'number', type: number }
        tiling_strategy: { kind: 'enum', type: Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy }
        tile_cnet_strength: { kind: 'number', type: number }
    }
    PixelTiledKSampleUpscalerProviderPipe: {
        scale_method: { kind: 'enum', type: Enum_LatentPixelScale_scale_method }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
        tile_width: { kind: 'number', type: number }
        tile_height: { kind: 'number', type: number }
        tiling_strategy: { kind: 'enum', type: Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy }
        tile_cnet_strength: { kind: 'number', type: number }
    }
    TwoSamplersForMaskUpscalerProvider: {
        scale_method: { kind: 'enum', type: Enum_LatentPixelScale_scale_method }
        full_sample_schedule: { kind: 'enum', type: Enum_TwoSamplersForMaskUpscalerProvider_full_sample_schedule }
        use_tiled_vae: { kind: 'boolean', type: boolean }
        tile_size: { kind: 'number', type: number }
    }
    TwoSamplersForMaskUpscalerProviderPipe: {
        scale_method: { kind: 'enum', type: Enum_LatentPixelScale_scale_method }
        full_sample_schedule: { kind: 'enum', type: Enum_TwoSamplersForMaskUpscalerProvider_full_sample_schedule }
        use_tiled_vae: { kind: 'boolean', type: boolean }
        tile_size: { kind: 'number', type: number }
    }
    PixelKSampleHookCombine: {
    }
    DenoiseScheduleHookProvider: {
        schedule_for_iteration: { kind: 'enum', type: Enum_DenoiseScheduleHookProvider_schedule_for_iteration }
        target_denoise: { kind: 'number', type: number }
    }
    StepsScheduleHookProvider: {
        schedule_for_iteration: { kind: 'enum', type: Enum_DenoiseScheduleHookProvider_schedule_for_iteration }
        target_steps: { kind: 'number', type: number }
    }
    CfgScheduleHookProvider: {
        schedule_for_iteration: { kind: 'enum', type: Enum_DenoiseScheduleHookProvider_schedule_for_iteration }
        target_cfg: { kind: 'number', type: number }
    }
    NoiseInjectionHookProvider: {
        schedule_for_iteration: { kind: 'enum', type: Enum_DenoiseScheduleHookProvider_schedule_for_iteration }
        source: { kind: 'enum', type: Enum_NoiseInjectionHookProvider_source }
        seed: { kind: 'number', type: number }
        start_strength: { kind: 'number', type: number }
        end_strength: { kind: 'number', type: number }
    }
    UnsamplerHookProvider: {
        steps: { kind: 'number', type: number }
        start_end_at_step: { kind: 'number', type: number }
        end_end_at_step: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        normalize: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        schedule_for_iteration: { kind: 'enum', type: Enum_DenoiseScheduleHookProvider_schedule_for_iteration }
    }
    CoreMLDetailerHookProvider: {
        mode: { kind: 'enum', type: Enum_CoreMLDetailerHookProvider_mode }
    }
    PreviewDetailerHookProvider: {
        quality: { kind: 'number', type: number }
    }
    DetailerHookCombine: {
    }
    NoiseInjectionDetailerHookProvider: {
        schedule_for_cycle: { kind: 'enum', type: Enum_NoiseInjectionDetailerHookProvider_schedule_for_cycle }
        source: { kind: 'enum', type: Enum_NoiseInjectionHookProvider_source }
        seed: { kind: 'number', type: number }
        start_strength: { kind: 'number', type: number }
        end_strength: { kind: 'number', type: number }
    }
    UnsamplerDetailerHookProvider: {
        steps: { kind: 'number', type: number }
        start_end_at_step: { kind: 'number', type: number }
        end_end_at_step: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        normalize: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        schedule_for_cycle: { kind: 'enum', type: Enum_NoiseInjectionDetailerHookProvider_schedule_for_cycle }
    }
    DenoiseSchedulerDetailerHookProvider: {
        schedule_for_cycle: { kind: 'enum', type: Enum_DenoiseScheduleHookProvider_schedule_for_iteration }
        target_denoise: { kind: 'number', type: number }
    }
    SEGSOrderedFilterDetailerHookProvider: {
        target: { kind: 'enum', type: Enum_SEGSOrderedFilterDetailerHookProvider_target }
        order: { kind: 'boolean', type: boolean }
        take_start: { kind: 'number', type: number }
        take_count: { kind: 'number', type: number }
    }
    SEGSRangeFilterDetailerHookProvider: {
        target: { kind: 'enum', type: Enum_SEGSRangeFilterDetailerHookProvider_target }
        mode: { kind: 'boolean', type: boolean }
        min_value: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
    }
    SEGSLabelFilterDetailerHookProvider: {
        preset: { kind: 'enum', type: Enum_SEGSLabelFilterDetailerHookProvider_preset }
        labels: { kind: 'string', type: string }
    }
    VariationNoiseDetailerHookProvider: {
        seed: { kind: 'number', type: number }
        strength: { kind: 'number', type: number }
    }
    BitwiseAndMask: {
    }
    SubtractMask: {
    }
    AddMask: {
    }
    ImpactSegsAndMask: {
    }
    ImpactSegsAndMaskForEach: {
    }
    EmptySegs: {
    }
    ImpactFlattenMask: {
    }
    MediaPipeFaceMeshToSEGS: {
        crop_factor: { kind: 'number', type: number }
        bbox_fill: { kind: 'boolean', type: boolean }
        crop_min_size: { kind: 'number', type: number }
        drop_size: { kind: 'number', type: number }
        dilation: { kind: 'number', type: number }
        face: { kind: 'boolean', type: boolean }
        mouth: { kind: 'boolean', type: boolean }
        left_eyebrow: { kind: 'boolean', type: boolean }
        left_eye: { kind: 'boolean', type: boolean }
        left_pupil: { kind: 'boolean', type: boolean }
        right_eyebrow: { kind: 'boolean', type: boolean }
        right_eye: { kind: 'boolean', type: boolean }
        right_pupil: { kind: 'boolean', type: boolean }
    }
    MaskToSEGS: {
        combined: { kind: 'boolean', type: boolean }
        crop_factor: { kind: 'number', type: number }
        bbox_fill: { kind: 'boolean', type: boolean }
        drop_size: { kind: 'number', type: number }
        contour_fill: { kind: 'boolean', type: boolean }
    }
    MaskToSEGS$_for$_AnimateDiff: {
        combined: { kind: 'boolean', type: boolean }
        crop_factor: { kind: 'number', type: number }
        bbox_fill: { kind: 'boolean', type: boolean }
        drop_size: { kind: 'number', type: number }
        contour_fill: { kind: 'boolean', type: boolean }
    }
    ToBinaryMask: {
        threshold: { kind: 'number', type: number }
    }
    MasksToMaskList: {
    }
    MaskListToMaskBatch: {
    }
    ImageListToImageBatch: {
    }
    SetDefaultImageForSEGS: {
        override: { kind: 'boolean', type: boolean }
    }
    RemoveImageFromSEGS: {
    }
    BboxDetectorSEGS: {
        threshold: { kind: 'number', type: number }
        dilation: { kind: 'number', type: number }
        crop_factor: { kind: 'number', type: number }
        drop_size: { kind: 'number', type: number }
        labels: { kind: 'string', type: string }
    }
    SegmDetectorSEGS: {
        threshold: { kind: 'number', type: number }
        dilation: { kind: 'number', type: number }
        crop_factor: { kind: 'number', type: number }
        drop_size: { kind: 'number', type: number }
        labels: { kind: 'string', type: string }
    }
    ONNXDetectorSEGS: {
        threshold: { kind: 'number', type: number }
        dilation: { kind: 'number', type: number }
        crop_factor: { kind: 'number', type: number }
        drop_size: { kind: 'number', type: number }
        labels: { kind: 'string', type: string }
    }
    ImpactSimpleDetectorSEGS$_for$_AD: {
        bbox_threshold: { kind: 'number', type: number }
        bbox_dilation: { kind: 'number', type: number }
        crop_factor: { kind: 'number', type: number }
        drop_size: { kind: 'number', type: number }
        sub_threshold: { kind: 'number', type: number }
        sub_dilation: { kind: 'number', type: number }
        sub_bbox_expansion: { kind: 'number', type: number }
        sam_mask_hint_threshold: { kind: 'number', type: number }
        masking_mode: { kind: 'enum', type: Enum_ImpactSimpleDetectorSEGS$_for$_AD_masking_mode }
        segs_pivot: { kind: 'enum', type: Enum_ImpactSimpleDetectorSEGS$_for$_AD_segs_pivot }
    }
    ImpactSimpleDetectorSEGS: {
        bbox_threshold: { kind: 'number', type: number }
        bbox_dilation: { kind: 'number', type: number }
        crop_factor: { kind: 'number', type: number }
        drop_size: { kind: 'number', type: number }
        sub_threshold: { kind: 'number', type: number }
        sub_dilation: { kind: 'number', type: number }
        sub_bbox_expansion: { kind: 'number', type: number }
        sam_mask_hint_threshold: { kind: 'number', type: number }
        post_dilation: { kind: 'number', type: number }
    }
    ImpactSimpleDetectorSEGSPipe: {
        bbox_threshold: { kind: 'number', type: number }
        bbox_dilation: { kind: 'number', type: number }
        crop_factor: { kind: 'number', type: number }
        drop_size: { kind: 'number', type: number }
        sub_threshold: { kind: 'number', type: number }
        sub_dilation: { kind: 'number', type: number }
        sub_bbox_expansion: { kind: 'number', type: number }
        sam_mask_hint_threshold: { kind: 'number', type: number }
        post_dilation: { kind: 'number', type: number }
    }
    ImpactControlNetApplySEGS: {
        strength: { kind: 'number', type: number }
    }
    ImpactControlNetApplyAdvancedSEGS: {
        strength: { kind: 'number', type: number }
        start_percent: { kind: 'number', type: number }
        end_percent: { kind: 'number', type: number }
    }
    ImpactControlNetClearSEGS: {
    }
    ImpactIPAdapterApplySEGS: {
        weight: { kind: 'number', type: number }
        noise: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        unfold_batch: { kind: 'boolean', type: boolean }
        faceid_v2: { kind: 'boolean', type: boolean }
        weight_v2: { kind: 'number', type: number }
        context_crop_factor: { kind: 'number', type: number }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
    }
    ImpactDecomposeSEGS: {
    }
    ImpactAssembleSEGS: {
    }
    ImpactFrom$_SEG$_ELT: {
    }
    ImpactEdit$_SEG$_ELT: {
        confidence_opt: { kind: 'number', type: number }
        label_opt: { kind: 'string', type: string }
    }
    ImpactDilate$_Mask$_SEG$_ELT: {
        dilation: { kind: 'number', type: number }
    }
    ImpactDilateMask: {
        dilation: { kind: 'number', type: number }
    }
    ImpactGaussianBlurMask: {
        kernel_size: { kind: 'number', type: number }
        sigma: { kind: 'number', type: number }
    }
    ImpactDilateMaskInSEGS: {
        dilation: { kind: 'number', type: number }
    }
    ImpactGaussianBlurMaskInSEGS: {
        kernel_size: { kind: 'number', type: number }
        sigma: { kind: 'number', type: number }
    }
    ImpactScaleBy$_BBOX$_SEG$_ELT: {
        scale_by: { kind: 'number', type: number }
    }
    ImpactFrom$_SEG$_ELT$_bbox: {
    }
    ImpactFrom$_SEG$_ELT$_crop$_region: {
    }
    ImpactCount$_Elts$_in$_SEGS: {
    }
    BboxDetectorCombined$_v2: {
        threshold: { kind: 'number', type: number }
        dilation: { kind: 'number', type: number }
    }
    SegmDetectorCombined$_v2: {
        threshold: { kind: 'number', type: number }
        dilation: { kind: 'number', type: number }
    }
    SegsToCombinedMask: {
    }
    KSamplerProvider: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
    }
    TwoSamplersForMask: {
    }
    TiledKSamplerProvider: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
        tile_width: { kind: 'number', type: number }
        tile_height: { kind: 'number', type: number }
        tiling_strategy: { kind: 'enum', type: Enum_PixelTiledKSampleUpscalerProvider_tiling_strategy }
    }
    KSamplerAdvancedProvider: {
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        sigma_factor: { kind: 'number', type: number }
    }
    TwoAdvancedSamplersForMask: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
        overlap_factor: { kind: 'number', type: number }
    }
    ImpactNegativeConditioningPlaceholder: {
    }
    PreviewBridge: {
        image: { kind: 'string', type: string }
        block: { kind: 'boolean', type: boolean }
        restore_mask: { kind: 'enum', type: Enum_PreviewBridge_restore_mask }
    }
    PreviewBridgeLatent: {
        image: { kind: 'string', type: string }
        preview_method: { kind: 'enum', type: Enum_PreviewBridgeLatent_preview_method }
        block: { kind: 'boolean', type: boolean }
        restore_mask: { kind: 'enum', type: Enum_PreviewBridge_restore_mask }
    }
    ImageSender: {
        filename_prefix: { kind: 'string', type: string }
        link_id: { kind: 'number', type: number }
    }
    ImageReceiver: {
        image: { kind: 'enum', type: Enum_LoadImage_image }
        link_id: { kind: 'number', type: number }
        save_to_workflow: { kind: 'boolean', type: boolean }
        image_data: { kind: 'string', type: string }
        trigger_always: { kind: 'boolean', type: boolean }
    }
    LatentSender: {
        filename_prefix: { kind: 'string', type: string }
        link_id: { kind: 'number', type: number }
        preview_method: { kind: 'enum', type: Enum_LatentSender_preview_method }
    }
    LatentReceiver: {
        latent: { kind: 'enum', type: Enum_LatentReceiver_latent }
        link_id: { kind: 'number', type: number }
        trigger_always: { kind: 'boolean', type: boolean }
    }
    ImageMaskSwitch: {
        select: { kind: 'number', type: number }
    }
    LatentSwitch: {
        select: { kind: 'number', type: number }
        sel_mode: { kind: 'boolean', type: boolean }
    }
    SEGSSwitch: {
        select: { kind: 'number', type: number }
        sel_mode: { kind: 'boolean', type: boolean }
    }
    ImpactSwitch: {
        select: { kind: 'number', type: number }
        sel_mode: { kind: 'boolean', type: boolean }
    }
    ImpactInversedSwitch: {
        select: { kind: 'number', type: number }
        sel_mode: { kind: 'boolean', type: boolean }
    }
    ImpactWildcardProcessor: {
        wildcard_text: { kind: 'string', type: string }
        populated_text: { kind: 'string', type: string }
        mode: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
    }
    ImpactWildcardEncode: {
        wildcard_text: { kind: 'string', type: string }
        populated_text: { kind: 'string', type: string }
        mode: { kind: 'boolean', type: boolean }
        "Select to add LoRA": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_LoRA }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
        seed: { kind: 'number', type: number }
    }
    SEGSUpscaler: {
        rescale_factor: { kind: 'number', type: number }
        resampling_method: { kind: 'enum', type: Enum_SEGSUpscaler_resampling_method }
        supersample: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        rounding_modulus: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
    }
    SEGSUpscalerPipe: {
        rescale_factor: { kind: 'number', type: number }
        resampling_method: { kind: 'enum', type: Enum_SEGSUpscaler_resampling_method }
        supersample: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        rounding_modulus: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        feather: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
    }
    SEGSDetailer: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        noise_mask: { kind: 'boolean', type: boolean }
        force_inpaint: { kind: 'boolean', type: boolean }
        refiner_ratio: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        cycle: { kind: 'number', type: number }
        inpaint_model: { kind: 'boolean', type: boolean }
        noise_mask_feather: { kind: 'number', type: number }
    }
    SEGSPaste: {
        feather: { kind: 'number', type: number }
        alpha: { kind: 'number', type: number }
    }
    SEGSPreview: {
        alpha_mode: { kind: 'boolean', type: boolean }
        min_alpha: { kind: 'number', type: number }
    }
    SEGSPreviewCNet: {
    }
    SEGSToImageList: {
    }
    ImpactSEGSToMaskList: {
    }
    ImpactSEGSToMaskBatch: {
    }
    ImpactSEGSConcat: {
    }
    ImpactSEGSPicker: {
        picks: { kind: 'string', type: string }
    }
    ImpactMakeTileSEGS: {
        bbox_size: { kind: 'number', type: number }
        crop_factor: { kind: 'number', type: number }
        min_overlap: { kind: 'number', type: number }
        filter_segs_dilation: { kind: 'number', type: number }
        mask_irregularity: { kind: 'number', type: number }
        irregular_mask_mode: { kind: 'enum', type: Enum_ImpactMakeTileSEGS_irregular_mask_mode }
    }
    ImpactSEGSMerge: {
    }
    SEGSDetailerForAnimateDiff: {
        guide_size: { kind: 'number', type: number }
        guide_size_for: { kind: 'boolean', type: boolean }
        max_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        refiner_ratio: { kind: 'number', type: number }
        noise_mask_feather: { kind: 'number', type: number }
    }
    ImpactKSamplerBasicPipe: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
    }
    ImpactKSamplerAdvancedBasicPipe: {
        add_noise: { kind: 'boolean', type: boolean }
        noise_seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        return_with_leftover_noise: { kind: 'boolean', type: boolean }
    }
    ReencodeLatent: {
        tile_mode: { kind: 'enum', type: Enum_ReencodeLatent_tile_mode }
        tile_size: { kind: 'number', type: number }
    }
    ReencodeLatentPipe: {
        tile_mode: { kind: 'enum', type: Enum_ReencodeLatent_tile_mode }
    }
    ImpactImageBatchToImageList: {
    }
    ImpactMakeImageList: {
    }
    ImpactMakeImageBatch: {
    }
    ImpactMakeAnyList: {
    }
    ImpactMakeMaskList: {
    }
    ImpactMakeMaskBatch: {
    }
    RegionalSampler: {
        seed: { kind: 'number', type: number }
        seed_2nd: { kind: 'number', type: number }
        seed_2nd_mode: { kind: 'enum', type: Enum_RegionalSampler_seed_2nd_mode }
        steps: { kind: 'number', type: number }
        base_only_steps: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
        overlap_factor: { kind: 'number', type: number }
        restore_latent: { kind: 'boolean', type: boolean }
        additional_mode: { kind: 'enum', type: Enum_RegionalSampler_additional_mode }
        additional_sampler: { kind: 'enum', type: Enum_RegionalSampler_additional_sampler }
        additional_sigma_ratio: { kind: 'number', type: number }
    }
    RegionalSamplerAdvanced: {
        add_noise: { kind: 'boolean', type: boolean }
        noise_seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        overlap_factor: { kind: 'number', type: number }
        restore_latent: { kind: 'boolean', type: boolean }
        return_with_leftover_noise: { kind: 'boolean', type: boolean }
        additional_mode: { kind: 'enum', type: Enum_RegionalSampler_additional_mode }
        additional_sampler: { kind: 'enum', type: Enum_RegionalSampler_additional_sampler }
        additional_sigma_ratio: { kind: 'number', type: number }
    }
    CombineRegionalPrompts: {
    }
    RegionalPrompt: {
        variation_seed: { kind: 'number', type: number }
        variation_strength: { kind: 'number', type: number }
        variation_method: { kind: 'enum', type: Enum_RegionalPrompt_variation_method }
    }
    ImpactCombineConditionings: {
    }
    ImpactConcatConditionings: {
    }
    ImpactSEGSLabelAssign: {
        labels: { kind: 'string', type: string }
    }
    ImpactSEGSLabelFilter: {
        preset: { kind: 'enum', type: Enum_SEGSLabelFilterDetailerHookProvider_preset }
        labels: { kind: 'string', type: string }
    }
    ImpactSEGSRangeFilter: {
        target: { kind: 'enum', type: Enum_ImpactSEGSRangeFilter_target }
        mode: { kind: 'boolean', type: boolean }
        min_value: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
    }
    ImpactSEGSOrderedFilter: {
        target: { kind: 'enum', type: Enum_ImpactSEGSOrderedFilter_target }
        order: { kind: 'boolean', type: boolean }
        take_start: { kind: 'number', type: number }
        take_count: { kind: 'number', type: number }
    }
    ImpactCompare: {
        cmp: { kind: 'enum', type: Enum_ImpactCompare_cmp }
    }
    ImpactConditionalBranch: {
        cond: { kind: 'boolean', type: boolean }
    }
    ImpactConditionalBranchSelMode: {
        cond: { kind: 'boolean', type: boolean }
    }
    ImpactIfNone: {
    }
    ImpactConvertDataType: {
    }
    ImpactLogicalOperators: {
        operator: { kind: 'enum', type: Enum_ImpactLogicalOperators_operator }
        bool_a: { kind: 'boolean', type: boolean }
        bool_b: { kind: 'boolean', type: boolean }
    }
    ImpactInt: {
        value: { kind: 'number', type: number }
    }
    ImpactFloat: {
        value: { kind: 'number', type: number }
    }
    ImpactBoolean: {
        value: { kind: 'boolean', type: boolean }
    }
    ImpactValueSender: {
        link_id: { kind: 'number', type: number }
    }
    ImpactValueReceiver: {
        typ: { kind: 'enum', type: Enum_ImpactValueReceiver_typ }
        value: { kind: 'string', type: string }
        link_id: { kind: 'number', type: number }
    }
    ImpactImageInfo: {
    }
    ImpactLatentInfo: {
    }
    ImpactMinMax: {
        mode: { kind: 'boolean', type: boolean }
    }
    ImpactNeg: {
        value: { kind: 'boolean', type: boolean }
    }
    ImpactConditionalStopIteration: {
        cond: { kind: 'boolean', type: boolean }
    }
    ImpactStringSelector: {
        strings: { kind: 'string', type: string }
        multiline: { kind: 'boolean', type: boolean }
        select: { kind: 'number', type: number }
    }
    StringListToString: {
        join_with: { kind: 'string', type: string }
        string_list: { kind: 'string', type: string }
    }
    WildcardPromptFromString: {
        string: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
        prefix_all: { kind: 'string', type: string }
        postfix_all: { kind: 'string', type: string }
        restrict_to_tags: { kind: 'string', type: string }
        exclude_tags: { kind: 'string', type: string }
    }
    ImpactExecutionOrderController: {
    }
    RemoveNoiseMask: {
    }
    ImpactLogger: {
        text: { kind: 'string', type: string }
    }
    ImpactDummyInput: {
    }
    ImpactQueueTrigger: {
        mode: { kind: 'boolean', type: boolean }
    }
    ImpactQueueTriggerCountdown: {
        count: { kind: 'number', type: number }
        total: { kind: 'number', type: number }
        mode: { kind: 'boolean', type: boolean }
    }
    ImpactSetWidgetValue: {
        node_id: { kind: 'number', type: number }
        widget_name: { kind: 'string', type: string }
        boolean_value: { kind: 'boolean', type: boolean }
        int_value: { kind: 'number', type: number }
        float_value: { kind: 'number', type: number }
        string_value: { kind: 'string', type: string }
    }
    ImpactNodeSetMuteState: {
        node_id: { kind: 'number', type: number }
        set_state: { kind: 'boolean', type: boolean }
    }
    ImpactControlBridge: {
        mode: { kind: 'boolean', type: boolean }
        behavior: { kind: 'enum', type: Enum_ImpactControlBridge_behavior }
    }
    ImpactIsNotEmptySEGS: {
    }
    ImpactSleep: {
        seconds: { kind: 'number', type: number }
    }
    ImpactRemoteBoolean: {
        node_id: { kind: 'number', type: number }
        widget_name: { kind: 'string', type: string }
        value: { kind: 'boolean', type: boolean }
    }
    ImpactRemoteInt: {
        node_id: { kind: 'number', type: number }
        widget_name: { kind: 'string', type: string }
        value: { kind: 'number', type: number }
    }
    ImpactHFTransformersClassifierProvider: {
        preset_repo_id: { kind: 'enum', type: Enum_ImpactHFTransformersClassifierProvider_preset_repo_id }
        manual_repo_id: { kind: 'string', type: string }
        device_mode: { kind: 'enum', type: Enum_BLIPCaption_device_mode }
    }
    ImpactSEGSClassify: {
        preset_expr: { kind: 'enum', type: Enum_ImpactSEGSClassify_preset_expr }
        manual_expr: { kind: 'string', type: string }
    }
    ImpactSchedulerAdapter: {
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        extra_scheduler: { kind: 'enum', type: Enum_ImpactSchedulerAdapter_extra_scheduler }
    }
    GITSSchedulerFuncProvider: {
        coeff: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
    }
    UltralyticsDetectorProvider: {
        model_name: { kind: 'enum', type: Enum_UltralyticsDetectorProvider_model_name }
    }
    INPAINT$_LoadFooocusInpaint: {
        head: { kind: 'enum', type: Enum_INPAINT$_LoadFooocusInpaint_head }
        patch: { kind: 'enum', type: Enum_INPAINT$_LoadFooocusInpaint_patch }
    }
    INPAINT$_ApplyFooocusInpaint: {
    }
    INPAINT$_VAEEncodeInpaintConditioning: {
    }
    INPAINT$_MaskedFill: {
        fill: { kind: 'enum', type: Enum_INPAINT$_MaskedFill_fill }
        falloff: { kind: 'number', type: number }
    }
    INPAINT$_MaskedBlur: {
        blur: { kind: 'number', type: number }
        falloff: { kind: 'number', type: number }
    }
    INPAINT$_LoadInpaintModel: {
        model_name: { kind: 'enum', type: Enum_INPAINT$_LoadInpaintModel_model_name }
    }
    INPAINT$_InpaintWithModel: {
        seed: { kind: 'number', type: number }
    }
    INPAINT$_ExpandMask: {
        grow: { kind: 'number', type: number }
        blur: { kind: 'number', type: number }
    }
    INPAINT$_DenoiseToCompositingMask: {
        offset: { kind: 'number', type: number }
        threshold: { kind: 'number', type: number }
    }
    XY_Input$4_Lora_Block_Weight_$3$3Inspire: {
        category_filter: { kind: 'enum', type: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter }
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
        inverse: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
        A: { kind: 'number', type: number }
        B: { kind: 'number', type: number }
        preset: { kind: 'enum', type: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_preset }
        block_vectors: { kind: 'string', type: string }
        heatmap_palette: { kind: 'enum', type: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_heatmap_palette }
        heatmap_alpha: { kind: 'number', type: number }
        heatmap_strength: { kind: 'number', type: number }
        xyplot_mode: { kind: 'enum', type: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_xyplot_mode }
    }
    LoraLoaderBlockWeight_$3$3Inspire: {
        category_filter: { kind: 'enum', type: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter }
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
        inverse: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
        A: { kind: 'number', type: number }
        B: { kind: 'number', type: number }
        preset: { kind: 'enum', type: Enum_LoraLoaderBlockWeight_$3$3Inspire_preset }
        block_vector: { kind: 'string', type: string }
        bypass: { kind: 'boolean', type: boolean }
    }
    LoraBlockInfo_$3$3Inspire: {
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        block_info: { kind: 'string', type: string }
    }
    MakeLBW_$3$3Inspire: {
        category_filter: { kind: 'enum', type: Enum_XY_Input$4_Lora_Block_Weight_$3$3Inspire_category_filter }
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        inverse: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
        A: { kind: 'number', type: number }
        B: { kind: 'number', type: number }
        preset: { kind: 'enum', type: Enum_LoraLoaderBlockWeight_$3$3Inspire_preset }
        block_vector: { kind: 'string', type: string }
        bypass: { kind: 'boolean', type: boolean }
    }
    ApplyLBW_$3$3Inspire: {
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
    }
    SaveLBW_$3$3Inspire: {
        filename_prefix: { kind: 'string', type: string }
    }
    LoadLBW_$3$3Inspire: {
        lbw_model: { kind: 'enum', type: Enum_LoadLBW_$3$3Inspire_lbw_model }
    }
    OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        detect_hand: { kind: 'boolean', type: boolean }
        detect_body: { kind: 'boolean', type: boolean }
        detect_face: { kind: 'boolean', type: boolean }
        resolution_upscale_by: { kind: 'number', type: number }
    }
    DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        detect_hand: { kind: 'boolean', type: boolean }
        detect_body: { kind: 'boolean', type: boolean }
        detect_face: { kind: 'boolean', type: boolean }
        resolution_upscale_by: { kind: 'number', type: number }
        bbox_detector: { kind: 'enum', type: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector }
        pose_estimator: { kind: 'enum', type: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_pose_estimator }
    }
    MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        a: { kind: 'number', type: number }
        bg_threshold: { kind: 'number', type: number }
    }
    LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        rm_nearest: { kind: 'number', type: number }
        rm_background: { kind: 'number', type: number }
        boost: { kind: 'boolean', type: boolean }
    }
    Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        low_threshold: { kind: 'number', type: number }
        high_threshold: { kind: 'number', type: number }
    }
    MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        max_faces: { kind: 'number', type: number }
        min_confidence: { kind: 'number', type: number }
        resolution_upscale_by: { kind: 'number', type: number }
    }
    HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        safe: { kind: 'boolean', type: boolean }
    }
    FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        safe: { kind: 'boolean', type: boolean }
    }
    AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
    }
    Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
    }
    LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        coarse: { kind: 'boolean', type: boolean }
    }
    Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
    }
    InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        black_pixel_for_xinsir_cn: { kind: 'boolean', type: boolean }
    }
    TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire: {
        pyrUp_iters: { kind: 'number', type: number }
    }
    MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire: {
    }
    MediaPipeFaceMeshDetectorProvider_$3$3Inspire: {
        max_faces: { kind: 'number', type: number }
        face: { kind: 'boolean', type: boolean }
        mouth: { kind: 'boolean', type: boolean }
        left_eyebrow: { kind: 'boolean', type: boolean }
        left_eye: { kind: 'boolean', type: boolean }
        left_pupil: { kind: 'boolean', type: boolean }
        right_eyebrow: { kind: 'boolean', type: boolean }
        right_eye: { kind: 'boolean', type: boolean }
        right_pupil: { kind: 'boolean', type: boolean }
    }
    KSampler_$3$3Inspire: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        batch_seed_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_batch_seed_mode }
        variation_seed: { kind: 'number', type: number }
        variation_strength: { kind: 'number', type: number }
        variation_method: { kind: 'enum', type: Enum_RegionalPrompt_variation_method }
    }
    KSamplerAdvanced_$3$3Inspire: {
        add_noise: { kind: 'boolean', type: boolean }
        noise_seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        return_with_leftover_noise: { kind: 'boolean', type: boolean }
        batch_seed_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_batch_seed_mode }
        variation_seed: { kind: 'number', type: number }
        variation_strength: { kind: 'number', type: number }
        variation_method: { kind: 'enum', type: Enum_RegionalPrompt_variation_method }
    }
    KSamplerPipe_$3$3Inspire: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        batch_seed_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_batch_seed_mode }
        variation_seed: { kind: 'number', type: number }
        variation_strength: { kind: 'number', type: number }
    }
    KSamplerAdvancedPipe_$3$3Inspire: {
        add_noise: { kind: 'boolean', type: boolean }
        noise_seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        return_with_leftover_noise: { kind: 'boolean', type: boolean }
        batch_seed_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_batch_seed_mode }
        variation_seed: { kind: 'number', type: number }
        variation_strength: { kind: 'number', type: number }
    }
    RandomNoise_$3$3Inspire: {
        noise_seed: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        batch_seed_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_batch_seed_mode }
        variation_seed: { kind: 'number', type: number }
        variation_strength: { kind: 'number', type: number }
        variation_method: { kind: 'enum', type: Enum_RegionalPrompt_variation_method }
    }
    HyperTile_$3$3Inspire: {
        tile_size: { kind: 'number', type: number }
        swap_size: { kind: 'number', type: number }
        max_depth: { kind: 'number', type: number }
        scale_depth: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
    }
    LoadPromptsFromDir_$3$3Inspire: {
        prompt_dir: { kind: 'enum', type: Enum_LoadPromptsFromDir_$3$3Inspire_prompt_dir }
        reload: { kind: 'boolean', type: boolean }
    }
    LoadPromptsFromFile_$3$3Inspire: {
        prompt_file: { kind: 'enum', type: Enum_LoadPromptsFromFile_$3$3Inspire_prompt_file }
        text_data_opt: { kind: 'string', type: string }
        reload: { kind: 'boolean', type: boolean }
    }
    LoadSinglePromptFromFile_$3$3Inspire: {
        prompt_file: { kind: 'enum', type: Enum_LoadPromptsFromFile_$3$3Inspire_prompt_file }
        index: { kind: 'number', type: number }
        text_data_opt: { kind: 'string', type: string }
    }
    UnzipPrompt_$3$3Inspire: {
    }
    ZipPrompt_$3$3Inspire: {
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
        name_opt: { kind: 'string', type: string }
    }
    PromptExtractor_$3$3Inspire: {
        image: { kind: 'enum', type: Enum_LoadImage_image }
        positive_id: { kind: 'string', type: string }
        negative_id: { kind: 'string', type: string }
        info: { kind: 'string', type: string }
    }
    GlobalSeed_$3$3Inspire: {
        value: { kind: 'number', type: number }
        mode: { kind: 'boolean', type: boolean }
        action: { kind: 'enum', type: Enum_GlobalSeed_$3$3Inspire_action }
        last_seed: { kind: 'string', type: string }
    }
    GlobalSampler_$3$3Inspire: {
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
    }
    BindImageListPromptList_$3$3Inspire: {
        default_positive: { kind: 'string', type: string }
        default_negative: { kind: 'string', type: string }
    }
    WildcardEncode_$3$3Inspire: {
        token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        wildcard_text: { kind: 'string', type: string }
        populated_text: { kind: 'string', type: string }
        mode: { kind: 'boolean', type: boolean }
        "Select to add LoRA": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_LoRA }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
        seed: { kind: 'number', type: number }
    }
    PromptBuilder_$3$3Inspire: {
        category: { kind: 'enum', type: Enum_PromptBuilder_$3$3Inspire_category }
        preset: { kind: 'enum', type: Enum_PromptBuilder_$3$3Inspire_preset }
        text: { kind: 'string', type: string }
    }
    SeedExplorer_$3$3Inspire: {
        seed_prompt: { kind: 'string', type: string }
        enable_additional: { kind: 'boolean', type: boolean }
        additional_seed: { kind: 'number', type: number }
        additional_strength: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        initial_batch_seed_mode: { kind: 'enum', type: Enum_SeedExplorer_$3$3Inspire_initial_batch_seed_mode }
        variation_method: { kind: 'enum', type: Enum_RegionalPrompt_variation_method }
    }
    ListCounter_$3$3Inspire: {
        base_value: { kind: 'number', type: number }
    }
    CLIPTextEncodeWithWeight_$3$3Inspire: {
        text: { kind: 'string', type: string }
        strength: { kind: 'number', type: number }
        add_weight: { kind: 'number', type: number }
    }
    RandomGeneratorForList_$3$3Inspire: {
        seed: { kind: 'number', type: number }
    }
    MakeBasicPipe_$3$3Inspire: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        ckpt_key_opt: { kind: 'string', type: string }
        positive_wildcard_text: { kind: 'string', type: string }
        negative_wildcard_text: { kind: 'string', type: string }
        "Add selection to": { kind: 'boolean', type: boolean }
        "Select to add LoRA": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_LoRA }
        "Select to add Wildcard": { kind: 'enum', type: Enum_ToDetailerPipe_Select$_to$_add$_Wildcard }
        wildcard_mode: { kind: 'boolean', type: boolean }
        positive_populated_text: { kind: 'string', type: string }
        negative_populated_text: { kind: 'string', type: string }
        token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        stop_at_clip_layer: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    RemoveControlNet_$3$3Inspire: {
    }
    RemoveControlNetFromRegionalPrompts_$3$3Inspire: {
    }
    CompositeNoise_$3$3Inspire: {
        mode: { kind: 'enum', type: Enum_CompositeNoise_$3$3Inspire_mode }
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
    }
    LoadImagesFromDir_$3$3Inspire: {
        directory: { kind: 'string', type: string }
        image_load_cap: { kind: 'number', type: number }
        start_index: { kind: 'number', type: number }
        load_always: { kind: 'boolean', type: boolean }
    }
    LoadImageListFromDir_$3$3Inspire: {
        directory: { kind: 'string', type: string }
        image_load_cap: { kind: 'number', type: number }
        start_index: { kind: 'number', type: number }
        load_always: { kind: 'boolean', type: boolean }
    }
    LoadImage_$3$3Inspire: {
        image: { kind: 'enum', type: Enum_LoadImage_$3$3Inspire_image }
        image_data: { kind: 'string', type: string }
    }
    ChangeImageBatchSize_$3$3Inspire: {
        batch_size: { kind: 'number', type: number }
        mode: { kind: 'enum', type: Enum_DenoiseScheduleHookProvider_schedule_for_iteration }
    }
    ChangeLatentBatchSize_$3$3Inspire: {
        batch_size: { kind: 'number', type: number }
        mode: { kind: 'enum', type: Enum_DenoiseScheduleHookProvider_schedule_for_iteration }
    }
    ImageBatchSplitter_$3$3Inspire: {
        split_count: { kind: 'number', type: number }
    }
    LatentBatchSplitter_$3$3Inspire: {
        split_count: { kind: 'number', type: number }
    }
    ColorMapToMasks_$3$3Inspire: {
        min_pixels: { kind: 'number', type: number }
        max_count: { kind: 'number', type: number }
    }
    SelectNthMask_$3$3Inspire: {
        idx: { kind: 'number', type: number }
    }
    RegionalPromptSimple_$3$3Inspire: {
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        wildcard_prompt: { kind: 'string', type: string }
        controlnet_in_pipe: { kind: 'boolean', type: boolean }
        sigma_factor: { kind: 'number', type: number }
        variation_seed: { kind: 'number', type: number }
        variation_strength: { kind: 'number', type: number }
        variation_method: { kind: 'enum', type: Enum_RegionalPrompt_variation_method }
    }
    RegionalPromptColorMask_$3$3Inspire: {
        mask_color: { kind: 'string', type: string }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        wildcard_prompt: { kind: 'string', type: string }
        controlnet_in_pipe: { kind: 'boolean', type: boolean }
        sigma_factor: { kind: 'number', type: number }
        variation_seed: { kind: 'number', type: number }
        variation_strength: { kind: 'number', type: number }
        variation_method: { kind: 'enum', type: Enum_RegionalPrompt_variation_method }
    }
    RegionalConditioningSimple_$3$3Inspire: {
        strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
        prompt: { kind: 'string', type: string }
    }
    RegionalConditioningColorMask_$3$3Inspire: {
        mask_color: { kind: 'string', type: string }
        strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
        prompt: { kind: 'string', type: string }
        dilation: { kind: 'number', type: number }
    }
    RegionalIPAdapterMask_$3$3Inspire: {
        weight: { kind: 'number', type: number }
        noise: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        unfold_batch: { kind: 'boolean', type: boolean }
        faceid_v2: { kind: 'boolean', type: boolean }
        weight_v2: { kind: 'number', type: number }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
    }
    RegionalIPAdapterColorMask_$3$3Inspire: {
        mask_color: { kind: 'string', type: string }
        weight: { kind: 'number', type: number }
        noise: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        unfold_batch: { kind: 'boolean', type: boolean }
        faceid_v2: { kind: 'boolean', type: boolean }
        weight_v2: { kind: 'number', type: number }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
    }
    RegionalIPAdapterEncodedMask_$3$3Inspire: {
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        unfold_batch: { kind: 'boolean', type: boolean }
    }
    RegionalIPAdapterEncodedColorMask_$3$3Inspire: {
        mask_color: { kind: 'string', type: string }
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        unfold_batch: { kind: 'boolean', type: boolean }
    }
    RegionalSeedExplorerMask_$3$3Inspire: {
        seed_prompt: { kind: 'string', type: string }
        enable_additional: { kind: 'boolean', type: boolean }
        additional_seed: { kind: 'number', type: number }
        additional_strength: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        variation_method: { kind: 'enum', type: Enum_RegionalPrompt_variation_method }
    }
    RegionalSeedExplorerColorMask_$3$3Inspire: {
        mask_color: { kind: 'string', type: string }
        seed_prompt: { kind: 'string', type: string }
        enable_additional: { kind: 'boolean', type: boolean }
        additional_seed: { kind: 'number', type: number }
        additional_strength: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        variation_method: { kind: 'enum', type: Enum_RegionalPrompt_variation_method }
    }
    ToIPAdapterPipe_$3$3Inspire: {
    }
    FromIPAdapterPipe_$3$3Inspire: {
    }
    ApplyRegionalIPAdapters_$3$3Inspire: {
    }
    RegionalCFG_$3$3Inspire: {
    }
    ColorMaskToDepthMask_$3$3Inspire: {
        spec: { kind: 'string', type: string }
        base_value: { kind: 'number', type: number }
        dilation: { kind: 'number', type: number }
        flatten_method: { kind: 'enum', type: Enum_ColorMaskToDepthMask_$3$3Inspire_flatten_method }
    }
    KSamplerProgress_$3$3Inspire: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        denoise: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        interval: { kind: 'number', type: number }
        omit_start_latent: { kind: 'boolean', type: boolean }
        omit_final_latent: { kind: 'boolean', type: boolean }
    }
    KSamplerAdvancedProgress_$3$3Inspire: {
        add_noise: { kind: 'boolean', type: boolean }
        noise_seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_AV$_FaceDetailer_scheduler }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        noise_mode: { kind: 'enum', type: Enum_KSampler_$3$3Inspire_noise_mode }
        return_with_leftover_noise: { kind: 'boolean', type: boolean }
        interval: { kind: 'number', type: number }
        omit_start_latent: { kind: 'boolean', type: boolean }
        omit_final_latent: { kind: 'boolean', type: boolean }
    }
    ScheduledCFGGuider_$3$3Inspire: {
        from_cfg: { kind: 'number', type: number }
        to_cfg: { kind: 'number', type: number }
        schedule: { kind: 'enum', type: Enum_ScheduledCFGGuider_$3$3Inspire_schedule }
    }
    ScheduledPerpNegCFGGuider_$3$3Inspire: {
        neg_scale: { kind: 'number', type: number }
        from_cfg: { kind: 'number', type: number }
        to_cfg: { kind: 'number', type: number }
        schedule: { kind: 'enum', type: Enum_ScheduledCFGGuider_$3$3Inspire_schedule }
    }
    CacheBackendData_$3$3Inspire: {
        key: { kind: 'string', type: string }
        tag: { kind: 'string', type: string }
    }
    CacheBackendDataNumberKey_$3$3Inspire: {
        key: { kind: 'number', type: number }
        tag: { kind: 'string', type: string }
    }
    CacheBackendDataList_$3$3Inspire: {
        key: { kind: 'string', type: string }
        tag: { kind: 'string', type: string }
    }
    CacheBackendDataNumberKeyList_$3$3Inspire: {
        key: { kind: 'number', type: number }
        tag: { kind: 'string', type: string }
    }
    RetrieveBackendData_$3$3Inspire: {
        key: { kind: 'string', type: string }
    }
    RetrieveBackendDataNumberKey_$3$3Inspire: {
        key: { kind: 'number', type: number }
    }
    RemoveBackendData_$3$3Inspire: {
        key: { kind: 'string', type: string }
    }
    RemoveBackendDataNumberKey_$3$3Inspire: {
        key: { kind: 'number', type: number }
    }
    ShowCachedInfo_$3$3Inspire: {
        cache_info: { kind: 'string', type: string }
        key: { kind: 'string', type: string }
    }
    CheckpointLoaderSimpleShared_$3$3Inspire: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        key_opt: { kind: 'string', type: string }
        mode: { kind: 'enum', type: Enum_CheckpointLoaderSimpleShared_$3$3Inspire_mode }
    }
    StableCascade$_CheckpointLoader_$3$3Inspire: {
        stage_b: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        key_opt_b: { kind: 'string', type: string }
        stage_c: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        key_opt_c: { kind: 'string', type: string }
        cache_mode: { kind: 'enum', type: Enum_StableCascade$_CheckpointLoader_$3$3Inspire_cache_mode }
    }
    FloatRange_$3$3Inspire: {
        start: { kind: 'number', type: number }
        stop: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
        limit: { kind: 'number', type: number }
        ensure_end: { kind: 'boolean', type: boolean }
    }
    ConcatConditioningsWithMultiplier_$3$3Inspire: {
        multiplier1: { kind: 'number', type: number }
    }
    ConditioningUpscale_$3$3Inspire: {
        scalar: { kind: 'number', type: number }
    }
    ConditioningStretch_$3$3Inspire: {
        resolutionX: { kind: 'number', type: number }
        resolutionY: { kind: 'number', type: number }
        newWidth: { kind: 'number', type: number }
        newHeight: { kind: 'number', type: number }
    }
    IPAdapterModelHelper_$3$3Inspire: {
        preset: { kind: 'enum', type: Enum_IPAdapterModelHelper_$3$3Inspire_preset }
        lora_strength_model: { kind: 'number', type: number }
        lora_strength_clip: { kind: 'number', type: number }
        insightface_provider: { kind: 'enum', type: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_provider }
        cache_mode: { kind: 'enum', type: Enum_IPAdapterModelHelper_$3$3Inspire_cache_mode }
        insightface_model_name: { kind: 'enum', type: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_model_name }
    }
    RGB$_HexToHSV_$3$3Inspire: {
        rgb_hex: { kind: 'string', type: string }
    }
    BOOLConstant: {
        value: { kind: 'boolean', type: boolean }
    }
    INTConstant: {
        value: { kind: 'number', type: number }
    }
    FloatConstant: {
        value: { kind: 'number', type: number }
    }
    StringConstant: {
        string: { kind: 'string', type: string }
    }
    StringConstantMultiline: {
        string: { kind: 'string', type: string }
        strip_newlines: { kind: 'boolean', type: boolean }
    }
    ConditioningMultiCombine: {
        inputcount: { kind: 'number', type: number }
        operation: { kind: 'enum', type: Enum_ConditioningMultiCombine_operation }
    }
    ConditioningSetMaskAndCombine: {
        mask_1_strength: { kind: 'number', type: number }
        mask_2_strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
    }
    ConditioningSetMaskAndCombine3: {
        mask_1_strength: { kind: 'number', type: number }
        mask_2_strength: { kind: 'number', type: number }
        mask_3_strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
    }
    ConditioningSetMaskAndCombine4: {
        mask_1_strength: { kind: 'number', type: number }
        mask_2_strength: { kind: 'number', type: number }
        mask_3_strength: { kind: 'number', type: number }
        mask_4_strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
    }
    ConditioningSetMaskAndCombine5: {
        mask_1_strength: { kind: 'number', type: number }
        mask_2_strength: { kind: 'number', type: number }
        mask_3_strength: { kind: 'number', type: number }
        mask_4_strength: { kind: 'number', type: number }
        mask_5_strength: { kind: 'number', type: number }
        set_cond_area: { kind: 'enum', type: Enum_ConditioningSetMask_set_cond_area }
    }
    CondPassThrough: {
    }
    DownloadAndLoadCLIPSeg: {
        model: { kind: 'enum', type: Enum_DownloadAndLoadCLIPSeg_model }
    }
    BatchCLIPSeg: {
        text: { kind: 'string', type: string }
        threshold: { kind: 'number', type: number }
        binary_mask: { kind: 'boolean', type: boolean }
        combine_mask: { kind: 'boolean', type: boolean }
        use_cuda: { kind: 'boolean', type: boolean }
        blur_sigma: { kind: 'number', type: number }
        image_bg_level: { kind: 'number', type: number }
        invert: { kind: 'boolean', type: boolean }
    }
    ColorToMask: {
        invert: { kind: 'boolean', type: boolean }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        threshold: { kind: 'number', type: number }
        per_batch: { kind: 'number', type: number }
    }
    CreateGradientMask: {
        invert: { kind: 'boolean', type: boolean }
        frames: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    CreateTextMask: {
        invert: { kind: 'boolean', type: boolean }
        frames: { kind: 'number', type: number }
        text_x: { kind: 'number', type: number }
        text_y: { kind: 'number', type: number }
        font_size: { kind: 'number', type: number }
        font_color: { kind: 'string', type: string }
        text: { kind: 'string', type: string }
        font: { kind: 'enum', type: Enum_CreateTextMask_font }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        start_rotation: { kind: 'number', type: number }
        end_rotation: { kind: 'number', type: number }
    }
    CreateAudioMask: {
        invert: { kind: 'boolean', type: boolean }
        frames: { kind: 'number', type: number }
        scale: { kind: 'number', type: number }
        audio_path: { kind: 'string', type: string }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    CreateFadeMask: {
        invert: { kind: 'boolean', type: boolean }
        frames: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation }
        start_level: { kind: 'number', type: number }
        midpoint_level: { kind: 'number', type: number }
        end_level: { kind: 'number', type: number }
        midpoint_frame: { kind: 'number', type: number }
    }
    CreateFadeMaskAdvanced: {
        points_string: { kind: 'string', type: string }
        invert: { kind: 'boolean', type: boolean }
        frames: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation }
    }
    CreateFluidMask: {
        invert: { kind: 'boolean', type: boolean }
        frames: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        inflow_count: { kind: 'number', type: number }
        inflow_velocity: { kind: 'number', type: number }
        inflow_radius: { kind: 'number', type: number }
        inflow_padding: { kind: 'number', type: number }
        inflow_duration: { kind: 'number', type: number }
    }
    CreateShapeMask: {
        shape: { kind: 'enum', type: Enum_CreateShapeMask_shape }
        frames: { kind: 'number', type: number }
        location_x: { kind: 'number', type: number }
        location_y: { kind: 'number', type: number }
        grow: { kind: 'number', type: number }
        frame_width: { kind: 'number', type: number }
        frame_height: { kind: 'number', type: number }
        shape_width: { kind: 'number', type: number }
        shape_height: { kind: 'number', type: number }
    }
    CreateVoronoiMask: {
        frames: { kind: 'number', type: number }
        num_points: { kind: 'number', type: number }
        line_width: { kind: 'number', type: number }
        speed: { kind: 'number', type: number }
        frame_width: { kind: 'number', type: number }
        frame_height: { kind: 'number', type: number }
    }
    CreateMagicMask: {
        frames: { kind: 'number', type: number }
        depth: { kind: 'number', type: number }
        distortion: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        transitions: { kind: 'number', type: number }
        frame_width: { kind: 'number', type: number }
        frame_height: { kind: 'number', type: number }
    }
    GetMaskSizeAndCount: {
    }
    GrowMaskWithBlur: {
        expand: { kind: 'number', type: number }
        incremental_expandrate: { kind: 'number', type: number }
        tapered_corners: { kind: 'boolean', type: boolean }
        flip_input: { kind: 'boolean', type: boolean }
        blur_radius: { kind: 'number', type: number }
        lerp_alpha: { kind: 'number', type: number }
        decay_factor: { kind: 'number', type: number }
        fill_holes: { kind: 'boolean', type: boolean }
    }
    MaskBatchMulti: {
        inputcount: { kind: 'number', type: number }
    }
    OffsetMask: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        angle: { kind: 'number', type: number }
        duplication_factor: { kind: 'number', type: number }
        roll: { kind: 'boolean', type: boolean }
        incremental: { kind: 'boolean', type: boolean }
        padding_mode: { kind: 'enum', type: Enum_OffsetMask_padding_mode }
    }
    RemapMaskRange: {
        min: { kind: 'number', type: number }
        max: { kind: 'number', type: number }
    }
    ResizeMask: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        keep_proportions: { kind: 'boolean', type: boolean }
    }
    RoundMask: {
    }
    AddLabel: {
        text_x: { kind: 'number', type: number }
        text_y: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        font_size: { kind: 'number', type: number }
        font_color: { kind: 'string', type: string }
        label_color: { kind: 'string', type: string }
        font: { kind: 'enum', type: Enum_CreateTextMask_font }
        text: { kind: 'string', type: string }
        direction: { kind: 'enum', type: Enum_AddLabel_direction }
        caption: { kind: 'string', type: string }
    }
    ColorMatch: {
        method: { kind: 'enum', type: Enum_ColorMatch_method }
        strength: { kind: 'number', type: number }
    }
    CrossFadeImages: {
        interpolation: { kind: 'enum', type: Enum_CrossFadeImages_interpolation }
        transition_start_index: { kind: 'number', type: number }
        transitioning_frames: { kind: 'number', type: number }
        start_level: { kind: 'number', type: number }
        end_level: { kind: 'number', type: number }
    }
    CrossFadeImagesMulti: {
        inputcount: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_CrossFadeImages_interpolation }
        transitioning_frames: { kind: 'number', type: number }
    }
    GetImagesFromBatchIndexed: {
        indexes: { kind: 'string', type: string }
    }
    GetImageRangeFromBatch: {
        start_index: { kind: 'number', type: number }
        num_frames: { kind: 'number', type: number }
    }
    GetImageSizeAndCount: {
    }
    FastPreview: {
        format: { kind: 'enum', type: Enum_FastPreview_format }
        quality: { kind: 'number', type: number }
    }
    ImageAndMaskPreview: {
        mask_opacity: { kind: 'number', type: number }
        mask_color: { kind: 'string', type: string }
        pass_through: { kind: 'boolean', type: boolean }
    }
    ImageAddMulti: {
        inputcount: { kind: 'number', type: number }
        blending: { kind: 'enum', type: Enum_ImageAddMulti_blending }
        blend_amount: { kind: 'number', type: number }
    }
    ImageBatchMulti: {
        inputcount: { kind: 'number', type: number }
    }
    ImageBatchRepeatInterleaving: {
        repeats: { kind: 'number', type: number }
    }
    ImageBatchTestPattern: {
        batch_size: { kind: 'number', type: number }
        start_from: { kind: 'number', type: number }
        text_x: { kind: 'number', type: number }
        text_y: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        font: { kind: 'enum', type: Enum_CreateTextMask_font }
        font_size: { kind: 'number', type: number }
    }
    ImageConcanate: {
        direction: { kind: 'enum', type: Enum_ImageConcanate_direction }
        match_image_size: { kind: 'boolean', type: boolean }
    }
    ImageConcatFromBatch: {
        num_columns: { kind: 'number', type: number }
        match_image_size: { kind: 'boolean', type: boolean }
        max_resolution: { kind: 'number', type: number }
    }
    ImageConcatMulti: {
        inputcount: { kind: 'number', type: number }
        direction: { kind: 'enum', type: Enum_ImageConcanate_direction }
        match_image_size: { kind: 'boolean', type: boolean }
    }
    ImageCropByMaskAndResize: {
        base_resolution: { kind: 'number', type: number }
        padding: { kind: 'number', type: number }
    }
    ImageUncropByMask: {
    }
    ImageGrabPIL: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        num_frames: { kind: 'number', type: number }
        delay: { kind: 'number', type: number }
    }
    ImageGridComposite2x2: {
    }
    ImageGridComposite3x3: {
    }
    ImageGridtoBatch: {
        columns: { kind: 'number', type: number }
        rows: { kind: 'number', type: number }
    }
    ImageNormalize$_Neg1$_To$_1: {
    }
    ImagePass: {
    }
    ImagePadForOutpaintMasked: {
        left: { kind: 'number', type: number }
        top: { kind: 'number', type: number }
        right: { kind: 'number', type: number }
        bottom: { kind: 'number', type: number }
        feathering: { kind: 'number', type: number }
    }
    ImagePadForOutpaintTargetSize: {
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        feathering: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_ImageScale_upscale_method }
    }
    ImageResizeKJ: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_ImageScale_upscale_method }
        keep_proportion: { kind: 'boolean', type: boolean }
        divisible_by: { kind: 'number', type: number }
        width_input: { kind: 'number', type: number }
        height_input: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    ImageUpscaleWithModelBatched: {
        per_batch: { kind: 'number', type: number }
    }
    InsertImagesToBatchIndexed: {
        indexes: { kind: 'string', type: string }
    }
    LoadAndResizeImage: {
        image: { kind: 'enum', type: Enum_LoadImage_image }
        resize: { kind: 'boolean', type: boolean }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        repeat: { kind: 'number', type: number }
        keep_proportion: { kind: 'boolean', type: boolean }
        divisible_by: { kind: 'number', type: number }
        mask_channel: { kind: 'enum', type: Enum_LoadImageMask_channel }
        background_color: { kind: 'string', type: string }
    }
    LoadImagesFromFolderKJ: {
        folder: { kind: 'string', type: string }
        image_load_cap: { kind: 'number', type: number }
        start_index: { kind: 'number', type: number }
    }
    MergeImageChannels: {
    }
    PreviewAnimation: {
        fps: { kind: 'number', type: number }
    }
    RemapImageRange: {
        min: { kind: 'number', type: number }
        max: { kind: 'number', type: number }
        clamp: { kind: 'boolean', type: boolean }
    }
    ReverseImageBatch: {
    }
    ReplaceImagesInBatch: {
        start_index: { kind: 'number', type: number }
    }
    SaveImageWithAlpha: {
        filename_prefix: { kind: 'string', type: string }
    }
    SaveImageKJ: {
        filename_prefix: { kind: 'string', type: string }
        output_folder: { kind: 'string', type: string }
        caption_file_extension: { kind: 'string', type: string }
        caption: { kind: 'string', type: string }
    }
    ShuffleImageBatch: {
        seed: { kind: 'number', type: number }
    }
    SplitImageChannels: {
    }
    TransitionImagesMulti: {
        inputcount: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_CrossFadeImages_interpolation }
        transition_type: { kind: 'enum', type: Enum_TransitionImagesMulti_transition_type }
        transitioning_frames: { kind: 'number', type: number }
        blur_radius: { kind: 'number', type: number }
        reverse: { kind: 'boolean', type: boolean }
        device: { kind: 'enum', type: Enum_NoiseInjectionHookProvider_source }
    }
    TransitionImagesInBatch: {
        interpolation: { kind: 'enum', type: Enum_CrossFadeImages_interpolation }
        transition_type: { kind: 'enum', type: Enum_TransitionImagesMulti_transition_type }
        transitioning_frames: { kind: 'number', type: number }
        blur_radius: { kind: 'number', type: number }
        reverse: { kind: 'boolean', type: boolean }
        device: { kind: 'enum', type: Enum_NoiseInjectionHookProvider_source }
    }
    BatchCropFromMask: {
        crop_size_mult: { kind: 'number', type: number }
        bbox_smooth_alpha: { kind: 'number', type: number }
    }
    BatchCropFromMaskAdvanced: {
        crop_size_mult: { kind: 'number', type: number }
        bbox_smooth_alpha: { kind: 'number', type: number }
    }
    FilterZeroMasksAndCorrespondingImages: {
    }
    InsertImageBatchByIndexes: {
    }
    BatchUncrop: {
        border_blending: { kind: 'number', type: number }
        crop_rescale: { kind: 'number', type: number }
        border_top: { kind: 'boolean', type: boolean }
        border_bottom: { kind: 'boolean', type: boolean }
        border_left: { kind: 'boolean', type: boolean }
        border_right: { kind: 'boolean', type: boolean }
    }
    BatchUncropAdvanced: {
        border_blending: { kind: 'number', type: number }
        crop_rescale: { kind: 'number', type: number }
        use_combined_mask: { kind: 'boolean', type: boolean }
        use_square_mask: { kind: 'boolean', type: boolean }
    }
    SplitBboxes: {
        index: { kind: 'number', type: number }
    }
    BboxToInt: {
        index: { kind: 'number', type: number }
    }
    BboxVisualize: {
        line_width: { kind: 'number', type: number }
    }
    GenerateNoise: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        multiplier: { kind: 'number', type: number }
        constant_batch_noise: { kind: 'boolean', type: boolean }
        normalize: { kind: 'boolean', type: boolean }
        latent_channels: { kind: 'enum', type: Enum_GenerateNoise_latent_channels }
    }
    FlipSigmasAdjusted: {
        divide_by_last_sigma: { kind: 'boolean', type: boolean }
        divide_by: { kind: 'number', type: number }
        offset_by: { kind: 'number', type: number }
    }
    InjectNoiseToLatent: {
        strength: { kind: 'number', type: number }
        normalize: { kind: 'boolean', type: boolean }
        average: { kind: 'boolean', type: boolean }
        mix_randn_amount: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    CustomSigmas: {
        sigmas_string: { kind: 'string', type: string }
        interpolate_to_steps: { kind: 'number', type: number }
    }
    WidgetToString: {
        id: { kind: 'number', type: number }
        widget_name: { kind: 'string', type: string }
        return_all: { kind: 'boolean', type: boolean }
        node_title: { kind: 'string', type: string }
    }
    DummyOut: {
    }
    GetLatentsFromBatchIndexed: {
        indexes: { kind: 'string', type: string }
    }
    ScaleBatchPromptSchedule: {
        input_str: { kind: 'string', type: string }
        old_frame_count: { kind: 'number', type: number }
        new_frame_count: { kind: 'number', type: number }
    }
    CameraPoseVisualizer: {
        pose_file_path: { kind: 'string', type: string }
        base_xval: { kind: 'number', type: number }
        zval: { kind: 'number', type: number }
        scale: { kind: 'number', type: number }
        use_exact_fx: { kind: 'boolean', type: boolean }
        relative_c2w: { kind: 'boolean', type: boolean }
        use_viewer: { kind: 'boolean', type: boolean }
    }
    AppendStringsToList: {
        string1: { kind: 'string', type: string }
        string2: { kind: 'string', type: string }
    }
    JoinStrings: {
        string1: { kind: 'string', type: string }
        string2: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
    }
    JoinStringMulti: {
        inputcount: { kind: 'number', type: number }
        string_1: { kind: 'string', type: string }
        string_2: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
        return_list: { kind: 'boolean', type: boolean }
    }
    SomethingToString: {
        prefix: { kind: 'string', type: string }
        suffix: { kind: 'string', type: string }
    }
    Sleep: {
        minutes: { kind: 'number', type: number }
        seconds: { kind: 'number', type: number }
    }
    VRAM$_Debug: {
        empty_cache: { kind: 'boolean', type: boolean }
        gc_collect: { kind: 'boolean', type: boolean }
        unload_all_models: { kind: 'boolean', type: boolean }
    }
    EmptyLatentImagePresets: {
        dimensions: { kind: 'enum', type: Enum_EmptyLatentImagePresets_dimensions }
        invert: { kind: 'boolean', type: boolean }
        batch_size: { kind: 'number', type: number }
    }
    EmptyLatentImageCustomPresets: {
        dimensions: { kind: 'enum', type: Enum_EmptyLatentImageCustomPresets_dimensions }
        invert: { kind: 'boolean', type: boolean }
        batch_size: { kind: 'number', type: number }
    }
    ModelPassThrough: {
    }
    ModelSaveKJ: {
        filename_prefix: { kind: 'string', type: string }
        model_key_prefix: { kind: 'string', type: string }
    }
    SetShakkerLabsUnionControlNetType: {
        type: { kind: 'enum', type: Enum_SetShakkerLabsUnionControlNetType_type }
    }
    NormalizedAmplitudeToMask: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        frame_offset: { kind: 'number', type: number }
        location_x: { kind: 'number', type: number }
        location_y: { kind: 'number', type: number }
        size: { kind: 'number', type: number }
        shape: { kind: 'enum', type: Enum_NormalizedAmplitudeToMask_shape }
        color: { kind: 'enum', type: Enum_NormalizedAmplitudeToMask_color }
    }
    NormalizedAmplitudeToFloatList: {
    }
    OffsetMaskByNormalizedAmplitude: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        rotate: { kind: 'boolean', type: boolean }
        angle_multiplier: { kind: 'number', type: number }
    }
    ImageTransformByNormalizedAmplitude: {
        zoom_scale: { kind: 'number', type: number }
        x_offset: { kind: 'number', type: number }
        y_offset: { kind: 'number', type: number }
        cumulative: { kind: 'boolean', type: boolean }
    }
    SplineEditor: {
        points_store: { kind: 'string', type: string }
        coordinates: { kind: 'string', type: string }
        mask_width: { kind: 'number', type: number }
        mask_height: { kind: 'number', type: number }
        points_to_sample: { kind: 'number', type: number }
        sampling_method: { kind: 'enum', type: Enum_SplineEditor_sampling_method }
        interpolation: { kind: 'enum', type: Enum_SplineEditor_interpolation }
        tension: { kind: 'number', type: number }
        repeat_output: { kind: 'number', type: number }
        float_output_type: { kind: 'enum', type: Enum_SplineEditor_float_output_type }
        min_value: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
    }
    CreateShapeImageOnPath: {
        shape: { kind: 'enum', type: Enum_CreateShapeMask_shape }
        coordinates: { kind: 'string', type: string }
        frame_width: { kind: 'number', type: number }
        frame_height: { kind: 'number', type: number }
        shape_width: { kind: 'number', type: number }
        shape_height: { kind: 'number', type: number }
        shape_color: { kind: 'string', type: string }
        bg_color: { kind: 'string', type: string }
        blur_radius: { kind: 'number', type: number }
        intensity: { kind: 'number', type: number }
        size_multiplier: { kind: 'number', type: number }
        trailing: { kind: 'number', type: number }
    }
    CreateShapeMaskOnPath: {
        shape: { kind: 'enum', type: Enum_CreateShapeMask_shape }
        coordinates: { kind: 'string', type: string }
        frame_width: { kind: 'number', type: number }
        frame_height: { kind: 'number', type: number }
        shape_width: { kind: 'number', type: number }
        shape_height: { kind: 'number', type: number }
        size_multiplier: { kind: 'number', type: number }
    }
    CreateTextOnPath: {
        coordinates: { kind: 'string', type: string }
        text: { kind: 'string', type: string }
        frame_width: { kind: 'number', type: number }
        frame_height: { kind: 'number', type: number }
        font: { kind: 'enum', type: Enum_CreateTextMask_font }
        font_size: { kind: 'number', type: number }
        alignment: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        text_color: { kind: 'string', type: string }
        size_multiplier: { kind: 'number', type: number }
    }
    CreateGradientFromCoords: {
        coordinates: { kind: 'string', type: string }
        frame_width: { kind: 'number', type: number }
        frame_height: { kind: 'number', type: number }
        start_color: { kind: 'string', type: string }
        end_color: { kind: 'string', type: string }
        multiplier: { kind: 'number', type: number }
    }
    GradientToFloat: {
        steps: { kind: 'number', type: number }
    }
    WeightScheduleExtend: {
        input_values_1: { kind: 'number', type: number }
        input_values_2: { kind: 'number', type: number }
        output_type: { kind: 'enum', type: Enum_WeightScheduleExtend_output_type }
    }
    MaskOrImageToWeight: {
        output_type: { kind: 'enum', type: Enum_MaskOrImageToWeight_output_type }
    }
    WeightScheduleConvert: {
        input_values: { kind: 'number', type: number }
        output_type: { kind: 'enum', type: Enum_WeightScheduleExtend_output_type }
        invert: { kind: 'boolean', type: boolean }
        repeat: { kind: 'number', type: number }
        remap_to_frames: { kind: 'number', type: number }
        interpolation_curve: { kind: 'number', type: number }
        remap_values: { kind: 'boolean', type: boolean }
        remap_min: { kind: 'number', type: number }
        remap_max: { kind: 'number', type: number }
    }
    FloatToMask: {
        input_values: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    FloatToSigmas: {
        float_list: { kind: 'number', type: number }
    }
    PlotCoordinates: {
        coordinates: { kind: 'string', type: string }
        text: { kind: 'string', type: string }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        bbox_width: { kind: 'number', type: number }
        bbox_height: { kind: 'number', type: number }
        size_multiplier: { kind: 'number', type: number }
    }
    InterpolateCoords: {
        coordinates: { kind: 'string', type: string }
        interpolation_curve: { kind: 'number', type: number }
    }
    PointsEditor: {
        points_store: { kind: 'string', type: string }
        coordinates: { kind: 'string', type: string }
        neg_coordinates: { kind: 'string', type: string }
        bbox_store: { kind: 'string', type: string }
        bboxes: { kind: 'string', type: string }
        bbox_format: { kind: 'enum', type: Enum_PointsEditor_bbox_format }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        normalize: { kind: 'boolean', type: boolean }
    }
    StabilityAPI$_SD3: {
        prompt: { kind: 'string', type: string }
        n_prompt: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        model: { kind: 'enum', type: Enum_StabilityAPI$_SD3_model }
        aspect_ratio: { kind: 'enum', type: Enum_StabilityAPI$_SD3_aspect_ratio }
        output_format: { kind: 'enum', type: Enum_StabilityAPI$_SD3_output_format }
        api_key: { kind: 'string', type: string }
        img2img_strength: { kind: 'number', type: number }
        disable_metadata: { kind: 'boolean', type: boolean }
    }
    SoundReactive: {
        sound_level: { kind: 'number', type: number }
        start_range_hz: { kind: 'number', type: number }
        end_range_hz: { kind: 'number', type: number }
        multiplier: { kind: 'number', type: number }
        smoothing_factor: { kind: 'number', type: number }
        normalize: { kind: 'boolean', type: boolean }
    }
    StableZero123$_BatchSchedule: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation }
        azimuth_points_string: { kind: 'string', type: string }
        elevation_points_string: { kind: 'string', type: string }
    }
    SV3D$_BatchSchedule: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation_interpolation }
        azimuth_points_string: { kind: 'string', type: string }
        elevation_points_string: { kind: 'string', type: string }
    }
    LoadResAdapterNormalization: {
        resadapter_path: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    Superprompt: {
        instruction_prompt: { kind: 'string', type: string }
        prompt: { kind: 'string', type: string }
        max_new_tokens: { kind: 'number', type: number }
    }
    GLIGENTextBoxApplyBatchCoords: {
        coordinates: { kind: 'string', type: string }
        text: { kind: 'string', type: string }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        size_multiplier: { kind: 'number', type: number }
    }
    Intrinsic$_lora$_sampling: {
        lora_name: { kind: 'enum', type: Enum_Intrinsic$_lora$_sampling_lora_name }
        task: { kind: 'enum', type: Enum_Intrinsic$_lora$_sampling_task }
        text: { kind: 'string', type: string }
        per_batch: { kind: 'number', type: number }
    }
    CheckpointPerturbWeights: {
        joint_blocks: { kind: 'number', type: number }
        final_layer: { kind: 'number', type: number }
        rest_of_the_blocks: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    Screencap$_mss: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        num_frames: { kind: 'number', type: number }
        delay: { kind: 'number', type: number }
    }
    WebcamCaptureCV2: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        cam_index: { kind: 'number', type: number }
        release: { kind: 'boolean', type: boolean }
    }
    DifferentialDiffusionAdvanced: {
        multiplier: { kind: 'number', type: number }
    }
    FluxBlockLoraLoader: {
        strength_model: { kind: 'number', type: number }
        lora_name: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        opt_lora_path: { kind: 'string', type: string }
    }
    FluxBlockLoraSelect: {
        "double_blocks.0.": { kind: 'number', type: number }
        "double_blocks.1.": { kind: 'number', type: number }
        "double_blocks.2.": { kind: 'number', type: number }
        "double_blocks.3.": { kind: 'number', type: number }
        "double_blocks.4.": { kind: 'number', type: number }
        "double_blocks.5.": { kind: 'number', type: number }
        "double_blocks.6.": { kind: 'number', type: number }
        "double_blocks.7.": { kind: 'number', type: number }
        "double_blocks.8.": { kind: 'number', type: number }
        "double_blocks.9.": { kind: 'number', type: number }
        "double_blocks.10.": { kind: 'number', type: number }
        "double_blocks.11.": { kind: 'number', type: number }
        "double_blocks.12.": { kind: 'number', type: number }
        "double_blocks.13.": { kind: 'number', type: number }
        "double_blocks.14.": { kind: 'number', type: number }
        "double_blocks.15.": { kind: 'number', type: number }
        "double_blocks.16.": { kind: 'number', type: number }
        "double_blocks.17.": { kind: 'number', type: number }
        "double_blocks.18.": { kind: 'number', type: number }
        "single_blocks.0.": { kind: 'number', type: number }
        "single_blocks.1.": { kind: 'number', type: number }
        "single_blocks.2.": { kind: 'number', type: number }
        "single_blocks.3.": { kind: 'number', type: number }
        "single_blocks.4.": { kind: 'number', type: number }
        "single_blocks.5.": { kind: 'number', type: number }
        "single_blocks.6.": { kind: 'number', type: number }
        "single_blocks.7.": { kind: 'number', type: number }
        "single_blocks.8.": { kind: 'number', type: number }
        "single_blocks.9.": { kind: 'number', type: number }
        "single_blocks.10.": { kind: 'number', type: number }
        "single_blocks.11.": { kind: 'number', type: number }
        "single_blocks.12.": { kind: 'number', type: number }
        "single_blocks.13.": { kind: 'number', type: number }
        "single_blocks.14.": { kind: 'number', type: number }
        "single_blocks.15.": { kind: 'number', type: number }
        "single_blocks.16.": { kind: 'number', type: number }
        "single_blocks.17.": { kind: 'number', type: number }
        "single_blocks.18.": { kind: 'number', type: number }
        "single_blocks.19.": { kind: 'number', type: number }
        "single_blocks.20.": { kind: 'number', type: number }
        "single_blocks.21.": { kind: 'number', type: number }
        "single_blocks.22.": { kind: 'number', type: number }
        "single_blocks.23.": { kind: 'number', type: number }
        "single_blocks.24.": { kind: 'number', type: number }
        "single_blocks.25.": { kind: 'number', type: number }
        "single_blocks.26.": { kind: 'number', type: number }
        "single_blocks.27.": { kind: 'number', type: number }
        "single_blocks.28.": { kind: 'number', type: number }
        "single_blocks.29.": { kind: 'number', type: number }
        "single_blocks.30.": { kind: 'number', type: number }
        "single_blocks.31.": { kind: 'number', type: number }
        "single_blocks.32.": { kind: 'number', type: number }
        "single_blocks.33.": { kind: 'number', type: number }
        "single_blocks.34.": { kind: 'number', type: number }
        "single_blocks.35.": { kind: 'number', type: number }
        "single_blocks.36.": { kind: 'number', type: number }
        "single_blocks.37.": { kind: 'number', type: number }
    }
    CustomControlNetWeightsFluxFromList: {
        list_of_floats: { kind: 'number', type: number }
        uncond_multiplier: { kind: 'number', type: number }
    }
    CheckpointLoaderKJ: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        patch_cublaslinear: { kind: 'boolean', type: boolean }
        sage_attention: { kind: 'boolean', type: boolean }
    }
    TorchCompileModelFluxAdvanced: {
        backend: { kind: 'enum', type: Enum_TorchCompileModel_backend }
        fullgraph: { kind: 'boolean', type: boolean }
        mode: { kind: 'enum', type: Enum_TorchCompileModelFluxAdvanced_mode }
        double_blocks: { kind: 'string', type: string }
        single_blocks: { kind: 'string', type: string }
    }
    TorchCompileVAE: {
        backend: { kind: 'enum', type: Enum_TorchCompileModel_backend }
        fullgraph: { kind: 'boolean', type: boolean }
        mode: { kind: 'enum', type: Enum_TorchCompileModelFluxAdvanced_mode }
        compile_encoder: { kind: 'boolean', type: boolean }
        compile_decoder: { kind: 'boolean', type: boolean }
    }
    TorchCompileControlNet: {
        backend: { kind: 'enum', type: Enum_TorchCompileModel_backend }
        fullgraph: { kind: 'boolean', type: boolean }
        mode: { kind: 'enum', type: Enum_TorchCompileModelFluxAdvanced_mode }
    }
    CreateInstanceDiffusionTracking: {
        coordinates: { kind: 'string', type: string }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        bbox_width: { kind: 'number', type: number }
        bbox_height: { kind: 'number', type: number }
        class_name: { kind: 'string', type: string }
        class_id: { kind: 'number', type: number }
        prompt: { kind: 'string', type: string }
        size_multiplier: { kind: 'number', type: number }
        fit_in_frame: { kind: 'boolean', type: boolean }
    }
    AppendInstanceDiffusionTracking: {
        prompt_1: { kind: 'string', type: string }
        prompt_2: { kind: 'string', type: string }
    }
    DrawInstanceDiffusionTracking: {
        box_line_width: { kind: 'number', type: number }
        draw_text: { kind: 'boolean', type: boolean }
        font: { kind: 'enum', type: Enum_CreateTextMask_font }
        font_size: { kind: 'number', type: number }
    }
    Compare$7$$D83D$$DD2C: {
        comparison: { kind: 'enum', type: Enum_Compare$7$$D83D$$DD2C_comparison }
    }
    Int$7$$D83D$$DD2C: {
        value: { kind: 'number', type: number }
    }
    Float$7$$D83D$$DD2C: {
        value: { kind: 'number', type: number }
    }
    Bool$7$$D83D$$DD2C: {
        value: { kind: 'boolean', type: boolean }
    }
    String$7$$D83D$$DD2C: {
        value: { kind: 'string', type: string }
    }
    If_ANY_return_A_else_B$7$$D83D$$DD2C: {
    }
    DebugPrint$7$$D83D$$DD2C: {
    }
    MarigoldModelLoader: {
        model: { kind: 'enum', type: Enum_MarigoldModelLoader_model }
    }
    MarigoldDepthEstimation$_v2: {
        seed: { kind: 'number', type: number }
        denoise_steps: { kind: 'number', type: number }
        ensemble_size: { kind: 'number', type: number }
        processing_resolution: { kind: 'number', type: number }
        scheduler: { kind: 'enum', type: Enum_MarigoldDepthEstimation$_v2_scheduler }
        use_taesd_vae: { kind: 'boolean', type: boolean }
        keep_model_loaded: { kind: 'boolean', type: boolean }
    }
    MarigoldDepthEstimation$_v2$_video: {
        seed: { kind: 'number', type: number }
        denoise_steps: { kind: 'number', type: number }
        processing_resolution: { kind: 'number', type: number }
        scheduler: { kind: 'enum', type: Enum_MarigoldDepthEstimation$_v2_scheduler }
        blend_factor: { kind: 'number', type: number }
        use_taesd_vae: { kind: 'boolean', type: boolean }
        keep_model_loaded: { kind: 'boolean', type: boolean }
    }
    MarigoldDepthEstimation: {
        seed: { kind: 'number', type: number }
        denoise_steps: { kind: 'number', type: number }
        n_repeat: { kind: 'number', type: number }
        regularizer_strength: { kind: 'number', type: number }
        reduction_method: { kind: 'enum', type: Enum_MarigoldDepthEstimation_reduction_method }
        max_iter: { kind: 'number', type: number }
        tol: { kind: 'number', type: number }
        invert: { kind: 'boolean', type: boolean }
        keep_model_loaded: { kind: 'boolean', type: boolean }
        n_repeat_batch_size: { kind: 'number', type: number }
        use_fp16: { kind: 'boolean', type: boolean }
        scheduler: { kind: 'enum', type: Enum_MarigoldDepthEstimation_scheduler }
        normalize: { kind: 'boolean', type: boolean }
        model: { kind: 'enum', type: Enum_MarigoldDepthEstimation_model }
    }
    MarigoldDepthEstimationVideo: {
        seed: { kind: 'number', type: number }
        first_frame_denoise_steps: { kind: 'number', type: number }
        first_frame_n_repeat: { kind: 'number', type: number }
        n_repeat_batch_size: { kind: 'number', type: number }
        invert: { kind: 'boolean', type: boolean }
        keep_model_loaded: { kind: 'boolean', type: boolean }
        scheduler: { kind: 'enum', type: Enum_MarigoldDepthEstimation_scheduler }
        normalize: { kind: 'boolean', type: boolean }
        denoise_steps: { kind: 'number', type: number }
        flow_warping: { kind: 'boolean', type: boolean }
        flow_depth_mix: { kind: 'number', type: number }
        noise_ratio: { kind: 'number', type: number }
        dtype: { kind: 'enum', type: Enum_MarigoldDepthEstimationVideo_dtype }
        model: { kind: 'enum', type: Enum_MarigoldDepthEstimation_model }
    }
    ColorizeDepthmap: {
        colorize_method: { kind: 'enum', type: Enum_ColorizeDepthmap_colorize_method }
    }
    SaveImageOpenEXR: {
        filename_prefix: { kind: 'string', type: string }
    }
    RemapDepth: {
        min: { kind: 'number', type: number }
        max: { kind: 'number', type: number }
        clamp: { kind: 'boolean', type: boolean }
    }
    AppInfo: {
        name: { kind: 'string', type: string }
        input_ids: { kind: 'string', type: string }
        output_ids: { kind: 'string', type: string }
        description: { kind: 'string', type: string }
        version: { kind: 'number', type: number }
        share_prefix: { kind: 'string', type: string }
        link: { kind: 'string', type: string }
        category: { kind: 'string', type: string }
        auto_save: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        idle_animation: { kind: 'boolean', type: boolean }
    }
    TESTNODE$_: {
    }
    TESTNODE$_TOKEN: {
        text: { kind: 'string', type: string }
    }
    RandomPrompt: {
        max_count: { kind: 'number', type: number }
        mutable_prompt: { kind: 'string', type: string }
        immutable_prompt: { kind: 'string', type: string }
        random_sample: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    EmbeddingPrompt: {
        embedding: { kind: 'enum', type: Enum_EmbeddingPrompt_embedding }
        weight: { kind: 'number', type: number }
    }
    PromptSlide: {
        prompt_keyword: { kind: 'string', type: string }
        weight: { kind: 'number', type: number }
    }
    GLIGENTextBoxApply$_Advanced: {
        labels: { kind: 'string', type: string }
        index: { kind: 'number', type: number }
        max_size: { kind: 'number', type: number }
        random_shuffle: { kind: 'enum', type: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle }
    }
    PromptSimplification: {
        prompt: { kind: 'string', type: string }
        length: { kind: 'number', type: number }
    }
    GridInput: {
        grids: { kind: 'string', type: string }
        padding: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    ImagesPrompt$_: {
        image_base64: { kind: 'string', type: string }
        text: { kind: 'string', type: string }
    }
    KeyInput: {
    }
    FloatSlider: {
        number: { kind: 'number', type: number }
        min_value: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
    }
    IntNumber: {
        number: { kind: 'number', type: number }
        min_value: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
    }
    TextInput$_: {
        text: { kind: 'string', type: string }
    }
    Font: {
        font: { kind: 'enum', type: Enum_Font_font }
    }
    LimitNumber: {
        min_value: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
    }
    PromptImage: {
        prompts: { kind: 'string', type: string }
        save_to_image: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    SaveImageToLocal: {
        file_path: { kind: 'string', type: string }
    }
    SaveImageAndMetadata$_: {
        filename_prefix: { kind: 'string', type: string }
        metadata: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    ComparingTwoFrames$_: {
    }
    CreateJsonNode: {
        key: { kind: 'string', type: string }
        save: { kind: 'boolean', type: boolean }
        json_str: { kind: 'string', type: string }
    }
    MirroredImage: {
    }
    NoiseImage: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        noise_level: { kind: 'number', type: number }
        color_hex: { kind: 'string', type: string }
    }
    GradientImage: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        start_color_hex: { kind: 'string', type: string }
        end_color_hex: { kind: 'string', type: string }
    }
    TransparentImage: {
        invert: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
        save: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
        filename_prefix: { kind: 'string', type: string }
    }
    ResizeImageMixlab: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        scale_option: { kind: 'enum', type: Enum_ResizeImageMixlab_scale_option }
        average_color: { kind: 'enum', type: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle }
        fill_color: { kind: 'string', type: string }
    }
    LoadImagesFromPath: {
        file_path: { kind: 'string', type: string }
        white_bg: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        sort_by: { kind: 'enum', type: Enum_LoadImagesFromPath_sort_by }
        index_variable: { kind: 'number', type: number }
        watcher: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    LoadImagesFromURL: {
        url: { kind: 'string', type: string }
    }
    LoadImagesToBatch: {
    }
    TextImage: {
        text: { kind: 'string', type: string }
        font: { kind: 'enum', type: Enum_TextImage_font }
        font_size: { kind: 'number', type: number }
        spacing: { kind: 'number', type: number }
        line_spacing: { kind: 'number', type: number }
        padding: { kind: 'number', type: number }
        text_color: { kind: 'string', type: string }
        vertical: { kind: 'boolean', type: boolean }
        stroke: { kind: 'boolean', type: boolean }
        max_characters_per_line: { kind: 'number', type: number }
        fixed_width: { kind: 'number', type: number }
    }
    EnhanceImage: {
        contrast: { kind: 'number', type: number }
    }
    SvgImage: {
    }
    ImageListToBatch$_: {
    }
    ImageBatchToList$_: {
    }
    ImageCropByAlpha: {
    }
    GetImageSize$_: {
        min_width: { kind: 'number', type: number }
    }
    _3DImage: {
    }
    DepthViewer: {
    }
    ImageColorTransfer: {
        weight: { kind: 'number', type: number }
    }
    Color: {
    }
    ShowLayer: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        z_index: { kind: 'number', type: number }
        scale_option: { kind: 'enum', type: Enum_ShowLayer_scale_option }
    }
    NewLayer: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        z_index: { kind: 'number', type: number }
        scale_option: { kind: 'enum', type: Enum_ShowLayer_scale_option }
    }
    MergeLayers: {
        is_multiply_blend: { kind: 'boolean', type: boolean }
    }
    CompositeImages$_: {
        is_multiply_blend: { kind: 'boolean', type: boolean }
        position: { kind: 'enum', type: Enum_CompositeImages$__position }
        scale: { kind: 'number', type: number }
    }
    SplitImage: {
        num: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    CenterImage: {
        left: { kind: 'number', type: number }
        top: { kind: 'number', type: number }
        right: { kind: 'number', type: number }
        bottom: { kind: 'number', type: number }
    }
    GridOutput: {
    }
    GridDisplayAndSave: {
        labels: { kind: 'string', type: string }
        filename_prefix: { kind: 'string', type: string }
    }
    SplitLongMask: {
        count: { kind: 'number', type: number }
    }
    FeatheredMask: {
        start_offset: { kind: 'number', type: number }
        feathering_weight: { kind: 'number', type: number }
    }
    SmoothMask: {
        smoothness: { kind: 'number', type: number }
    }
    FaceToMask: {
    }
    AreaToMask: {
    }
    OutlineMask: {
        outline_width: { kind: 'number', type: number }
        tapered_corners: { kind: 'boolean', type: boolean }
    }
    MaskListMerge$_: {
    }
    PreviewMask$_: {
    }
    ScreenShare: {
        refresh_rate: { kind: 'number', type: number }
    }
    FloatingVideo: {
    }
    SpeechRecognition: {
        start_by: { kind: 'number', type: number }
    }
    SpeechSynthesis: {
        text: { kind: 'string', type: string }
    }
    AudioPlay: {
    }
    AnalyzeAudio: {
    }
    TextToNumber: {
        text: { kind: 'string', type: string }
        random_number: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        max_num: { kind: 'number', type: number }
    }
    JoinWithDelimiter: {
        delimiter: { kind: 'enum', type: Enum_JoinWithDelimiter_delimiter }
    }
    MultiplicationNode: {
        multiply_by: { kind: 'number', type: number }
        add_by: { kind: 'number', type: number }
    }
    DynamicDelayProcessor: {
        delay_seconds: { kind: 'number', type: number }
        delay_by_text: { kind: 'string', type: string }
        words_per_seconds: { kind: 'number', type: number }
        replace_output: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        replace_value: { kind: 'number', type: number }
    }
    SwitchByIndex: {
        index: { kind: 'number', type: number }
        flat: { kind: 'enum', type: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle }
    }
    ListSplit$_: {
        chunk_size: { kind: 'number', type: number }
        transition_size: { kind: 'number', type: number }
        index: { kind: 'number', type: number }
    }
    Seed$_: {
        seed: { kind: 'number', type: number }
    }
    CkptNames$_: {
        ckpt_names: { kind: 'string', type: string }
    }
    SamplerNames$_: {
        sampler_names: { kind: 'string', type: string }
    }
    LoraNames$_: {
        lora_names: { kind: 'string', type: string }
    }
    ApplyVisualStylePrompting$_: {
        reference_image_text: { kind: 'string', type: string }
        enabled: { kind: 'boolean', type: boolean }
        denoise: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    StyleAlignedReferenceSampler$_: {
        reference_image_text: { kind: 'string', type: string }
        share_norm: { kind: 'enum', type: Enum_StyleAlignedReferenceSampler$__share_norm }
        share_attn: { kind: 'enum', type: Enum_StyleAlignedReferenceSampler$__share_attn }
        scale: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
    }
    StyleAlignedSampleReferenceLatents$_: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        scheduler: { kind: 'enum', type: INVALID_null }
        denoise: { kind: 'number', type: number }
    }
    StyleAlignedBatchAlign$_: {
        share_norm: { kind: 'enum', type: Enum_StyleAlignedReferenceSampler$__share_norm }
        share_attn: { kind: 'enum', type: Enum_StyleAlignedReferenceSampler$__share_attn }
        scale: { kind: 'number', type: number }
    }
    MaskListReplace$_: {
        start_index: { kind: 'number', type: number }
        end_index: { kind: 'number', type: number }
        invert: { kind: 'boolean', type: boolean }
    }
    IncrementingListNode$_: {
        min_value: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
        count: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    P5Input: {
    }
    ChatGPTOpenAI: {
        prompt: { kind: 'string', type: string }
        system_content: { kind: 'string', type: string }
        model: { kind: 'enum', type: Enum_ChatGPTOpenAI_model }
        seed: { kind: 'number', type: number }
        context_size: { kind: 'number', type: number }
        api_url: { kind: 'enum', type: Enum_ChatGPTOpenAI_api_url }
        api_key: { kind: 'string', type: string }
        custom_model_name: { kind: 'string', type: string }
        custom_api_url: { kind: 'string', type: string }
    }
    SiliconflowLLM: {
        api_key: { kind: 'string', type: string }
        prompt: { kind: 'string', type: string }
        system_content: { kind: 'string', type: string }
        model: { kind: 'enum', type: Enum_SiliconflowLLM_model }
        seed: { kind: 'number', type: number }
        context_size: { kind: 'number', type: number }
        max_tokens: { kind: 'number', type: number }
        custom_model_name: { kind: 'string', type: string }
    }
    SiliconflowTextToImageNode: {
        api_key: { kind: 'string', type: string }
        prompt: { kind: 'string', type: string }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        model: { kind: 'enum', type: Enum_SiliconflowTextToImageNode_model }
        seed: { kind: 'number', type: number }
        custom_model_name: { kind: 'string', type: string }
    }
    ShowTextForGPT: {
        text: { kind: 'string', type: string }
        output_dir: { kind: 'string', type: string }
    }
    CharacterInText: {
        text: { kind: 'string', type: string }
        character: { kind: 'string', type: string }
        start_index: { kind: 'number', type: number }
    }
    TextSplitByDelimiter: {
        text: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
        start_index: { kind: 'number', type: number }
        skip_every: { kind: 'number', type: number }
        max_count: { kind: 'number', type: number }
    }
    JsonRepair: {
        json_string: { kind: 'string', type: string }
        key: { kind: 'string', type: string }
        json_string2: { kind: 'string', type: string }
    }
    SimulateDevDesignDiscussions: {
        subject: { kind: 'string', type: string }
        model: { kind: 'enum', type: Enum_SimulateDevDesignDiscussions_model }
        api_url: { kind: 'enum', type: Enum_ChatGPTOpenAI_api_url }
        api_key: { kind: 'string', type: string }
        custom_model_name: { kind: 'string', type: string }
        custom_api_url: { kind: 'string', type: string }
    }
    EditMask: {
    }
    LaMaInpainting: {
    }
    ClipInterrogator: {
        prompt_mode: { kind: 'enum', type: Enum_ClipInterrogator_prompt_mode }
        image_analysis: { kind: 'enum', type: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle }
    }
    PromptGenerate$_Mix: {
        text: { kind: 'string', type: string }
        multiple: { kind: 'enum', type: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle }
        seed: { kind: 'number', type: number }
    }
    ChinesePrompt$_Mix: {
        text: { kind: 'string', type: string }
        generation: { kind: 'enum', type: Enum_GLIGENTextBoxApply$_Advanced_random_shuffle }
        seed: { kind: 'number', type: number }
    }
    RembgNode$_Mix: {
        model_name: { kind: 'enum', type: Enum_RembgNode$_Mix_model_name }
    }
    VAEEncodeForInpaint$_Frames: {
        grow_mask_by: { kind: 'number', type: number }
    }
    ImageListReplace$_: {
        start_index: { kind: 'number', type: number }
        end_index: { kind: 'number', type: number }
        invert: { kind: 'boolean', type: boolean }
    }
    LoadVideoAndSegment$_: {
        video: { kind: 'enum', type: Enum_LoadVideoAndSegment$__video }
        video_segment_frames: { kind: 'number', type: number }
        transition_frames: { kind: 'number', type: number }
    }
    VideoCombine$_Adv: {
        frame_rate: { kind: 'number', type: number }
        loop_count: { kind: 'number', type: number }
        filename_prefix: { kind: 'string', type: string }
        format: { kind: 'enum', type: Enum_VideoCombine$_Adv_format }
        pingpong: { kind: 'boolean', type: boolean }
        save_image: { kind: 'boolean', type: boolean }
        metadata: { kind: 'boolean', type: boolean }
    }
    LoadAndCombinedAudio$_: {
        start_time: { kind: 'number', type: number }
        duration: { kind: 'number', type: number }
    }
    CombineAudioVideo: {
    }
    ScenesNode$_: {
        index: { kind: 'number', type: number }
    }
    GenerateFramesByCount: {
        frame_count: { kind: 'number', type: number }
        revert: { kind: 'boolean', type: boolean }
    }
    LoadTripoSRModel$_: {
        chunk_size: { kind: 'number', type: number }
    }
    TripoSRSampler$_: {
        resolution: { kind: 'number', type: number }
        threshold: { kind: 'number', type: number }
        device: { kind: 'enum', type: Enum_TripoSRSampler$__device }
    }
    SaveTripoSRMesh: {
        filename_prefix: { kind: 'string', type: string }
    }
    MiniCPM$_VQA$_Simple: {
        text: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        extract_keywords: { kind: 'boolean', type: boolean }
        temperature: { kind: 'number', type: number }
        keep_model_loaded: { kind: 'boolean', type: boolean }
    }
    ScenedetectNode$_: {
        video: { kind: 'enum', type: Enum_ScenedetectNode$__video }
        min_scene_len: { kind: 'number', type: number }
        adaptive_threshold: { kind: 'number', type: number }
        number_of_sample_frames: { kind: 'number', type: number }
    }
    SceneInfoNode: {
        index: { kind: 'number', type: number }
    }
    SenseVoiceNode: {
        device: { kind: 'enum', type: Enum_TripoSRSampler$__device }
        language: { kind: 'enum', type: Enum_SenseVoiceNode_language }
        num_threads: { kind: 'number', type: number }
        use_int8: { kind: 'boolean', type: boolean }
        use_itn: { kind: 'boolean', type: boolean }
    }
    VideoGenKlingNode: {
        prompt: { kind: 'string', type: string }
        duration: { kind: 'enum', type: Enum_VideoGenKlingNode_duration }
        aspect_ratio: { kind: 'enum', type: Enum_VideoGenKlingNode_aspect_ratio }
        mode: { kind: 'enum', type: Enum_VideoGenKlingNode_mode }
        fal_key: { kind: 'string', type: string }
    }
    VideoGenRunwayGen3Node: {
        prompt: { kind: 'string', type: string }
        duration: { kind: 'enum', type: Enum_VideoGenKlingNode_duration }
        aspect_ratio: { kind: 'enum', type: Enum_VideoGenRunwayGen3Node_aspect_ratio }
        fal_key: { kind: 'string', type: string }
    }
    VideoGenLumaDreamMachineNode: {
        prompt: { kind: 'string', type: string }
        aspect_ratio: { kind: 'enum', type: Enum_VideoGenLumaDreamMachineNode_aspect_ratio }
        fal_key: { kind: 'string', type: string }
        loop: { kind: 'boolean', type: boolean }
    }
    LoadVideoFromURL: {
        url: { kind: 'string', type: string }
        force_rate: { kind: 'number', type: number }
        force_size: { kind: 'enum', type: Enum_LoadVideoFromURL_force_size }
        custom_width: { kind: 'number', type: number }
        custom_height: { kind: 'number', type: number }
        frame_load_cap: { kind: 'number', type: number }
        skip_first_frames: { kind: 'number', type: number }
        select_every_nth: { kind: 'number', type: number }
    }
    ChatGPT_Simple_$_O: {
        prompt: { kind: 'string', type: string }
        model: { kind: 'enum', type: Enum_ChatGPT_Simple_$_O_model }
        behaviour: { kind: 'enum', type: Enum_ChatGPT_Simple_$_O_behaviour }
        seed: { kind: 'number', type: number }
    }
    ChatGPT_compact_$_O: {
        prompt: { kind: 'string', type: string }
        initMsg: { kind: 'string', type: string }
        model: { kind: 'enum', type: Enum_ChatGPT_Simple_$_O_model }
        seed: { kind: 'number', type: number }
    }
    load$_openAI_$_O: {
        base_url: { kind: 'string', type: string }
        api_key: { kind: 'string', type: string }
    }
    Chat$_Message_$_O: {
        role: { kind: 'enum', type: Enum_AV$_LLMMessage_role }
        content: { kind: 'string', type: string }
    }
    combine$_chat$_messages_$_O: {
    }
    Chat_completion_$_O: {
        model: { kind: 'enum', type: Enum_ChatGPT_Simple_$_O_model }
        seed: { kind: 'number', type: number }
    }
    create_image_$_O: {
        prompt: { kind: 'string', type: string }
        number: { kind: 'number', type: number }
        size: { kind: 'enum', type: Enum_create_image_$_O_size }
        seed: { kind: 'number', type: number }
    }
    variation$_image_$_O: {
        number: { kind: 'number', type: number }
        size: { kind: 'enum', type: Enum_create_image_$_O_size }
        seed: { kind: 'number', type: number }
    }
    LatentUpscaleFactor_$_O: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscaleFactor_$_O_upscale_method }
        WidthFactor: { kind: 'number', type: number }
        HeightFactor: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    LatentUpscaleFactorSimple_$_O: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscaleFactor_$_O_upscale_method }
        factor: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    selectLatentFromBatch_$_O: {
        index: { kind: 'number', type: number }
    }
    RandomNSP_$_O: {
        terminology: { kind: 'enum', type: Enum_RandomNSP_$_O_terminology }
        seed: { kind: 'number', type: number }
    }
    ConcatRandomNSP$_O: {
        text: { kind: 'string', type: string }
        terminology: { kind: 'enum', type: Enum_RandomNSP_$_O_terminology }
        separator: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
    }
    Concat_Text_$_O: {
        text1: { kind: 'string', type: string }
        text2: { kind: 'string', type: string }
        text3: { kind: 'string', type: string }
        text4: { kind: 'string', type: string }
        text5: { kind: 'string', type: string }
        text6: { kind: 'string', type: string }
        text7: { kind: 'string', type: string }
        text8: { kind: 'string', type: string }
        text9: { kind: 'string', type: string }
        text10: { kind: 'string', type: string }
        text11: { kind: 'string', type: string }
        text12: { kind: 'string', type: string }
        text13: { kind: 'string', type: string }
        separator: { kind: 'string', type: string }
    }
    QOL_Split_String: {
        text: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
    }
    Trim_Text_$_O: {
        text: { kind: 'string', type: string }
    }
    Replace_Text_$_O: {
        text: { kind: 'string', type: string }
        old: { kind: 'string', type: string }
        new: { kind: 'string', type: string }
    }
    saveTextToFile_$_O: {
        text: { kind: 'string', type: string }
        filename: { kind: 'string', type: string }
        append: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Text2Image_$_O: {
        text: { kind: 'string', type: string }
        font: { kind: 'enum', type: Enum_Text2Image_$_O_font }
        size: { kind: 'number', type: number }
        font_R: { kind: 'number', type: number }
        font_G: { kind: 'number', type: number }
        font_B: { kind: 'number', type: number }
        font_A: { kind: 'number', type: number }
        background_R: { kind: 'number', type: number }
        background_G: { kind: 'number', type: number }
        background_B: { kind: 'number', type: number }
        background_A: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        expand: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
    }
    ImageScaleFactor_$_O: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscaleFactor_$_O_upscale_method }
        WidthFactor: { kind: 'number', type: number }
        HeightFactor: { kind: 'number', type: number }
        MulOf46: { kind: 'enum', type: Enum_ImageScaleFactor_$_O_MulOf46 }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    ImageScaleFactorSimple_$_O: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscaleFactor_$_O_upscale_method }
        Factor: { kind: 'number', type: number }
        MulOf46: { kind: 'enum', type: Enum_ImageScaleFactor_$_O_MulOf46 }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    Equation1param_$_O: {
        x: { kind: 'number', type: number }
        equation: { kind: 'string', type: string }
    }
    Equation2params_$_O: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        equation: { kind: 'string', type: string }
        equation_2: { kind: 'string', type: string }
    }
    floatToInt_$_O: {
        float: { kind: 'number', type: number }
    }
    intToFloat_$_O: {
        int: { kind: 'number', type: number }
    }
    floatToText_$_O: {
        float: { kind: 'number', type: number }
    }
    GetImage$_$1Width$AndHeight$2_$_O: {
    }
    GetLatent$_$1Width$AndHeight$2_$_O: {
    }
    debug_messages$_O: {
    }
    debug_Completeion_$_O: {
    }
    Debug_Text_$_O: {
        text: { kind: 'string', type: string }
        prefix: { kind: 'string', type: string }
    }
    Debug_Text_route_$_O: {
        text: { kind: 'string', type: string }
        prefix: { kind: 'string', type: string }
    }
    Note_$_O: {
        text: { kind: 'string', type: string }
    }
    Text_$_O: {
        text: { kind: 'string', type: string }
    }
    seed_$_O: {
        seed: { kind: 'number', type: number }
    }
    int_$_O: {
        int: { kind: 'number', type: number }
    }
    float_$_O: {
        float: { kind: 'number', type: number }
    }
    ChatGPT_$_O: {
        api_key_file: { kind: 'string', type: string }
    }
    Chat$_Message$_fromString_$_O: {
        role: { kind: 'enum', type: Enum_AV$_LLMMessage_role }
    }
    compine$_chat$_messages_$_O: {
    }
    Chat$_Completion_$_O: {
        model: { kind: 'string', type: string }
    }
    create$_image_$_O: {
        number: { kind: 'number', type: number }
        size: { kind: 'enum', type: Enum_create_image_$_O_size }
    }
    String_$_O: {
        string: { kind: 'string', type: string }
    }
    Debug_String_$_O: {
    }
    concat_Strings_$_O: {
    }
    trim_String_$_O: {
    }
    replace_String_$_O: {
        old: { kind: 'string', type: string }
        new: { kind: 'string', type: string }
    }
    replace_String_advanced_$_O: {
    }
    string2Image_$_O: {
        font: { kind: 'string', type: string }
        size: { kind: 'number', type: number }
        font_R: { kind: 'number', type: number }
        font_G: { kind: 'number', type: number }
        font_B: { kind: 'number', type: number }
        background_R: { kind: 'number', type: number }
        background_G: { kind: 'number', type: number }
        background_B: { kind: 'number', type: number }
    }
    CLIPStringEncode_$_O: {
    }
    LatentUpscaleMultiply: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscaleFactor_$_O_upscale_method }
        WidthMul: { kind: 'number', type: number }
        HeightMul: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    DownloadAndLoadSAM2Model: {
        model: { kind: 'enum', type: Enum_DownloadAndLoadSAM2Model_model }
        segmentor: { kind: 'enum', type: Enum_DownloadAndLoadSAM2Model_segmentor }
        device: { kind: 'enum', type: Enum_DownloadAndLoadSAM2Model_device }
        precision: { kind: 'enum', type: Enum_MarigoldDepthEstimationVideo_dtype }
    }
    Sam2Segmentation: {
        keep_model_loaded: { kind: 'boolean', type: boolean }
        coordinates_positive: { kind: 'string', type: string }
        coordinates_negative: { kind: 'string', type: string }
        individual_objects: { kind: 'boolean', type: boolean }
    }
    Florence2toCoordinates: {
        index: { kind: 'string', type: string }
        batch: { kind: 'boolean', type: boolean }
    }
    Sam2AutoSegmentation: {
        points_per_side: { kind: 'number', type: number }
        points_per_batch: { kind: 'number', type: number }
        pred_iou_thresh: { kind: 'number', type: number }
        stability_score_thresh: { kind: 'number', type: number }
        stability_score_offset: { kind: 'number', type: number }
        mask_threshold: { kind: 'number', type: number }
        crop_n_layers: { kind: 'number', type: number }
        box_nms_thresh: { kind: 'number', type: number }
        crop_nms_thresh: { kind: 'number', type: number }
        crop_overlap_ratio: { kind: 'number', type: number }
        crop_n_points_downscale_factor: { kind: 'number', type: number }
        min_mask_region_area: { kind: 'number', type: number }
        use_m2m: { kind: 'boolean', type: boolean }
        keep_model_loaded: { kind: 'boolean', type: boolean }
    }
    Sam2VideoSegmentationAddPoints: {
        coordinates_positive: { kind: 'string', type: string }
        frame_index: { kind: 'number', type: number }
        object_index: { kind: 'number', type: number }
        coordinates_negative: { kind: 'string', type: string }
    }
    Sam2VideoSegmentation: {
        keep_model_loaded: { kind: 'boolean', type: boolean }
    }
    BNK$_CLIPTextEncodeAdvanced: {
        text: { kind: 'string', type: string }
        token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
    }
    BNK$_CLIPTextEncodeSDXLAdvanced: {
        text_l: { kind: 'string', type: string }
        text_g: { kind: 'string', type: string }
        token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        balance: { kind: 'number', type: number }
    }
    BNK$_AddCLIPSDXLParams: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop_w: { kind: 'number', type: number }
        crop_h: { kind: 'number', type: number }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
    }
    BNK$_AddCLIPSDXLRParams: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        ascore: { kind: 'number', type: number }
    }
    CR_Image_Output: {
        output_type: { kind: 'enum', type: Enum_CR_Image_Output_output_type }
        filename_prefix: { kind: 'string', type: string }
        prefix_presets: { kind: 'enum', type: Enum_CR_Image_Output_prefix_presets }
        file_format: { kind: 'enum', type: Enum_CR_Image_Output_file_format }
        trigger: { kind: 'boolean', type: boolean }
    }
    CR_Latent_Batch_Size: {
        batch_size: { kind: 'number', type: number }
    }
    CR_Conditioning_Mixer: {
        mix_method: { kind: 'enum', type: Enum_CR_Conditioning_Mixer_mix_method }
        average_strength: { kind: 'number', type: number }
    }
    CR_Select_Model: {
        ckpt_name1: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        ckpt_name2: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        ckpt_name3: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        ckpt_name4: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        ckpt_name5: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        select_model: { kind: 'number', type: number }
    }
    CR_Seed: {
        seed: { kind: 'number', type: number }
    }
    CR_Prompt_Text: {
        prompt: { kind: 'string', type: string }
    }
    CR_Combine_Prompt: {
        part1: { kind: 'string', type: string }
        part2: { kind: 'string', type: string }
        part3: { kind: 'string', type: string }
        part4: { kind: 'string', type: string }
        separator: { kind: 'string', type: string }
    }
    CR_VAE_Decode: {
        tiled: { kind: 'boolean', type: boolean }
        circular: { kind: 'boolean', type: boolean }
    }
    CR_Text_List: {
        multiline_text: { kind: 'string', type: string }
        start_index: { kind: 'number', type: number }
        max_rows: { kind: 'number', type: number }
    }
    CR_Prompt_List: {
        prepend_text: { kind: 'string', type: string }
        multiline_text: { kind: 'string', type: string }
        append_text: { kind: 'string', type: string }
        start_index: { kind: 'number', type: number }
        max_rows: { kind: 'number', type: number }
    }
    CR_Simple_List: {
        list_values: { kind: 'string', type: string }
    }
    CR_Float_Range_List: {
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
        operation: { kind: 'enum', type: Enum_CR_Float_Range_List_operation }
        decimal_places: { kind: 'number', type: number }
        ignore_first_value: { kind: 'boolean', type: boolean }
        max_values_per_loop: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        ping_pong: { kind: 'boolean', type: boolean }
    }
    CR_Integer_Range_List: {
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        ping_pong: { kind: 'boolean', type: boolean }
    }
    CR_Load_Text_List: {
        input_file_path: { kind: 'string', type: string }
        file_name: { kind: 'string', type: string }
        file_extension: { kind: 'enum', type: Enum_CR_Load_Text_List_file_extension }
    }
    CR_Binary_To_Bit_List: {
        bit_string: { kind: 'string', type: string }
    }
    CR_Text_Cycler: {
        text: { kind: 'string', type: string }
        repeats: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
    }
    CR_Value_Cycler: {
        values: { kind: 'string', type: string }
        repeats: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
    }
    CR_Load_Image_List: {
        input_folder: { kind: 'enum', type: Enum_CR_Load_Image_List_input_folder }
        start_index: { kind: 'number', type: number }
        max_images: { kind: 'number', type: number }
        input_path: { kind: 'string', type: string }
    }
    CR_Load_Image_List_Plus: {
        input_folder: { kind: 'enum', type: Enum_CR_Load_Image_List_Plus_input_folder }
        start_index: { kind: 'number', type: number }
        max_images: { kind: 'number', type: number }
        input_path: { kind: 'string', type: string }
    }
    CR_Load_GIF_As_List: {
        input_folder: { kind: 'enum', type: Enum_CR_Load_GIF_As_List_input_folder }
        gif_filename: { kind: 'string', type: string }
        start_frame: { kind: 'number', type: number }
        max_frames: { kind: 'number', type: number }
        input_path: { kind: 'string', type: string }
    }
    CR_Font_File_List: {
        source_folder: { kind: 'enum', type: Enum_CR_Font_File_List_source_folder }
        start_index: { kind: 'number', type: number }
        max_rows: { kind: 'number', type: number }
        folder_path: { kind: 'string', type: string }
    }
    CR_Batch_Images_From_List: {
    }
    CR_Intertwine_Lists: {
        list1: { kind: 'string', type: string }
        list2: { kind: 'string', type: string }
    }
    CR_Repeater: {
        repeats: { kind: 'number', type: number }
    }
    CR_XY_Product: {
        text_x: { kind: 'string', type: string }
        text_y: { kind: 'string', type: string }
    }
    CR_Text_List_To_String: {
        text_list: { kind: 'string', type: string }
    }
    CR_SD1$55_Aspect_Ratio: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        aspect_ratio: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_aspect_ratio }
        swap_dimensions: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_factor: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    CR_SDXL_Aspect_Ratio: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        aspect_ratio: { kind: 'enum', type: Enum_CR_SDXL_Aspect_Ratio_aspect_ratio }
        swap_dimensions: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_factor: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    CR_Aspect_Ratio: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        aspect_ratio: { kind: 'enum', type: Enum_CR_Aspect_Ratio_aspect_ratio }
        swap_dimensions: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_factor: { kind: 'number', type: number }
        prescale_factor: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    CR_Aspect_Ratio_Banners: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        aspect_ratio: { kind: 'enum', type: Enum_CR_Aspect_Ratio_Banners_aspect_ratio }
        swap_dimensions: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_factor: { kind: 'number', type: number }
        prescale_factor: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    CR_Aspect_Ratio_Social_Media: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        aspect_ratio: { kind: 'enum', type: Enum_CR_Aspect_Ratio_Social_Media_aspect_ratio }
        swap_dimensions: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_factor: { kind: 'number', type: number }
        prescale_factor: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    CR$_Aspect_Ratio_For_Print: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        aspect_ratio: { kind: 'enum', type: Enum_CR$_Aspect_Ratio_For_Print_aspect_ratio }
        swap_dimensions: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_factor: { kind: 'number', type: number }
        prescale_factor: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    CR_Image_Size: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        upscale_factor: { kind: 'number', type: number }
    }
    CR_Aspect_Ratio_SDXL: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        aspect_ratio: { kind: 'enum', type: Enum_CR_SDXL_Aspect_Ratio_aspect_ratio }
        swap_dimensions: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_factor1: { kind: 'number', type: number }
        upscale_factor2: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    CR_SDXL_Prompt_Mixer: {
        prompt_positive: { kind: 'string', type: string }
        prompt_negative: { kind: 'string', type: string }
        style_positive: { kind: 'string', type: string }
        style_negative: { kind: 'string', type: string }
        preset: { kind: 'enum', type: Enum_CR_SDXL_Prompt_Mixer_preset }
    }
    CR_Seed_to_Int: {
    }
    CR_Apply_ControlNet: {
        switch: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        strength: { kind: 'number', type: number }
    }
    CR_Multi$7ControlNet_Stack: {
        switch_1: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        controlnet_1: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_control_net_name }
        controlnet_strength_1: { kind: 'number', type: number }
        start_percent_1: { kind: 'number', type: number }
        end_percent_1: { kind: 'number', type: number }
        switch_2: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        controlnet_2: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_control_net_name }
        controlnet_strength_2: { kind: 'number', type: number }
        start_percent_2: { kind: 'number', type: number }
        end_percent_2: { kind: 'number', type: number }
        switch_3: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        controlnet_3: { kind: 'enum', type: Enum_AV$_ControlNetEfficientLoader_control_net_name }
        controlnet_strength_3: { kind: 'number', type: number }
        start_percent_3: { kind: 'number', type: number }
        end_percent_3: { kind: 'number', type: number }
    }
    CR_Apply_Multi$7ControlNet: {
        switch: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
    }
    CR_Load_LoRA: {
        switch: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
    }
    CR_LoRA_Stack: {
        switch_1: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        lora_name_1: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        model_weight_1: { kind: 'number', type: number }
        clip_weight_1: { kind: 'number', type: number }
        switch_2: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        lora_name_2: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        model_weight_2: { kind: 'number', type: number }
        clip_weight_2: { kind: 'number', type: number }
        switch_3: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        lora_name_3: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        model_weight_3: { kind: 'number', type: number }
        clip_weight_3: { kind: 'number', type: number }
    }
    CR_Random_LoRA_Stack: {
        exclusive_mode: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        stride: { kind: 'number', type: number }
        force_randomize_after_stride: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        lora_name_1: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        switch_1: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        chance_1: { kind: 'number', type: number }
        model_weight_1: { kind: 'number', type: number }
        clip_weight_1: { kind: 'number', type: number }
        lora_name_2: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        switch_2: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        chance_2: { kind: 'number', type: number }
        model_weight_2: { kind: 'number', type: number }
        clip_weight_2: { kind: 'number', type: number }
        lora_name_3: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        switch_3: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        chance_3: { kind: 'number', type: number }
        model_weight_3: { kind: 'number', type: number }
        clip_weight_3: { kind: 'number', type: number }
    }
    CR_Random_Weight_LoRA: {
        stride: { kind: 'number', type: number }
        force_randomize_after_stride: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        switch: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        weight_min: { kind: 'number', type: number }
        weight_max: { kind: 'number', type: number }
        clip_weight: { kind: 'number', type: number }
    }
    CR_Apply_LoRA_Stack: {
    }
    CR_Apply_Model_Merge: {
        merge_method: { kind: 'enum', type: Enum_CR_Apply_Model_Merge_merge_method }
        normalise_ratios: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
        weight_factor: { kind: 'number', type: number }
    }
    CR_Model_Merge_Stack: {
        switch_1: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        ckpt_name1: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        model_ratio1: { kind: 'number', type: number }
        clip_ratio1: { kind: 'number', type: number }
        switch_2: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        ckpt_name2: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        model_ratio2: { kind: 'number', type: number }
        clip_ratio2: { kind: 'number', type: number }
        switch_3: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        ckpt_name3: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        model_ratio3: { kind: 'number', type: number }
        clip_ratio3: { kind: 'number', type: number }
    }
    CR_Data_Bus_In: {
    }
    CR_Data_Bus_Out: {
    }
    CR_8_Channel_In: {
    }
    CR_8_Channel_Out: {
    }
    CR_Module_Pipe_Loader: {
        seed: { kind: 'number', type: number }
    }
    CR_Module_Input: {
    }
    CR_Module_Output: {
        seed: { kind: 'number', type: number }
    }
    CR_Image_Pipe_In: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        upscale_factor: { kind: 'number', type: number }
    }
    CR_Image_Pipe_Edit: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        upscale_factor: { kind: 'number', type: number }
    }
    CR_Image_Pipe_Out: {
    }
    CR_Pipe_Switch: {
        Input: { kind: 'number', type: number }
    }
    CR_SDXL_Prompt_Mix_Presets: {
        prompt_positive: { kind: 'string', type: string }
        prompt_negative: { kind: 'string', type: string }
        style_positive: { kind: 'string', type: string }
        style_negative: { kind: 'string', type: string }
        preset: { kind: 'enum', type: Enum_CR_SDXL_Prompt_Mix_Presets_preset }
    }
    CR_SDXL_Style_Text: {
        positive_style: { kind: 'string', type: string }
        negative_style: { kind: 'string', type: string }
    }
    CR_SDXL_Base_Prompt_Encoder: {
        pos_g: { kind: 'string', type: string }
        pos_l: { kind: 'string', type: string }
        neg_g: { kind: 'string', type: string }
        neg_l: { kind: 'string', type: string }
        preset: { kind: 'enum', type: Enum_CR_SDXL_Base_Prompt_Encoder_preset }
        base_width: { kind: 'number', type: number }
        base_height: { kind: 'number', type: number }
        crop_w: { kind: 'number', type: number }
        crop_h: { kind: 'number', type: number }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
    }
    CR_Multi_Upscale_Stack: {
        switch_1: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_model_1: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name }
        rescale_factor_1: { kind: 'number', type: number }
        switch_2: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_model_2: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name }
        rescale_factor_2: { kind: 'number', type: number }
        switch_3: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        upscale_model_3: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name }
        rescale_factor_3: { kind: 'number', type: number }
    }
    CR_Upscale_Image: {
        upscale_model: { kind: 'enum', type: Enum_UpscaleModelLoader_model_name }
        mode: { kind: 'enum', type: Enum_CR_Upscale_Image_mode }
        rescale_factor: { kind: 'number', type: number }
        resize_width: { kind: 'number', type: number }
        resampling_method: { kind: 'enum', type: Enum_SEGSUpscaler_resampling_method }
        supersample: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        rounding_modulus: { kind: 'number', type: number }
    }
    CR_Apply_Multi_Upscale: {
        resampling_method: { kind: 'enum', type: Enum_SEGSUpscaler_resampling_method }
        supersample: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        rounding_modulus: { kind: 'number', type: number }
    }
    CR_XY_List: {
        index: { kind: 'number', type: number }
        list1: { kind: 'string', type: string }
        x_prepend: { kind: 'string', type: string }
        x_append: { kind: 'string', type: string }
        x_annotation_prepend: { kind: 'string', type: string }
        list2: { kind: 'string', type: string }
        y_prepend: { kind: 'string', type: string }
        y_append: { kind: 'string', type: string }
        y_annotation_prepend: { kind: 'string', type: string }
    }
    CR_XY_Interpolate: {
        x_columns: { kind: 'number', type: number }
        x_start_value: { kind: 'number', type: number }
        x_step: { kind: 'number', type: number }
        x_annotation_prepend: { kind: 'string', type: string }
        y_rows: { kind: 'number', type: number }
        y_start_value: { kind: 'number', type: number }
        y_step: { kind: 'number', type: number }
        y_annotation_prepend: { kind: 'string', type: string }
        index: { kind: 'number', type: number }
        gradient_profile: { kind: 'enum', type: Enum_CR_XY_Interpolate_gradient_profile }
    }
    CR_XY_From_Folder: {
        image_folder: { kind: 'enum', type: Enum_CR_XY_From_Folder_image_folder }
        start_index: { kind: 'number', type: number }
        end_index: { kind: 'number', type: number }
        max_columns: { kind: 'number', type: number }
        x_annotation: { kind: 'string', type: string }
        y_annotation: { kind: 'string', type: string }
        font_size: { kind: 'number', type: number }
        gap: { kind: 'number', type: number }
        trigger: { kind: 'boolean', type: boolean }
    }
    CR_XY_Save_Grid_Image: {
        mode: { kind: 'enum', type: Enum_CR_XY_Save_Grid_Image_mode }
        output_folder: { kind: 'enum', type: Enum_CR_XY_From_Folder_image_folder }
        filename_prefix: { kind: 'string', type: string }
        file_format: { kind: 'enum', type: Enum_CR_Image_Output_file_format }
        output_path: { kind: 'string', type: string }
        trigger: { kind: 'boolean', type: boolean }
    }
    CR_XY_Index: {
        x_columns: { kind: 'number', type: number }
        y_rows: { kind: 'number', type: number }
        index: { kind: 'number', type: number }
    }
    CR_Halftone_Grid: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        dot_style: { kind: 'enum', type: Enum_CR_Halftone_Grid_dot_style }
        reverse_dot_style: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
        dot_frequency: { kind: 'number', type: number }
        background_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        x_pos: { kind: 'number', type: number }
        y_pos: { kind: 'number', type: number }
        bg_color_hex: { kind: 'string', type: string }
    }
    CR_Color_Bars: {
        mode: { kind: 'enum', type: Enum_CR_Color_Bars_mode }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        color_1: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        color_2: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        orientation: { kind: 'enum', type: Enum_CR_Color_Bars_orientation }
        bar_frequency: { kind: 'number', type: number }
        offset: { kind: 'number', type: number }
        color1_hex: { kind: 'string', type: string }
        color2_hex: { kind: 'string', type: string }
    }
    CR_Style_Bars: {
        mode: { kind: 'enum', type: Enum_CR_Style_Bars_mode }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        bar_style: { kind: 'enum', type: Enum_CR_Halftone_Grid_dot_style }
        orientation: { kind: 'enum', type: Enum_CR_Style_Bars_orientation }
        bar_frequency: { kind: 'number', type: number }
    }
    CR_Checker_Pattern: {
        mode: { kind: 'enum', type: Enum_CR_Checker_Pattern_mode }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        color_1: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        color_2: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        grid_frequency: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
        color1_hex: { kind: 'string', type: string }
        color2_hex: { kind: 'string', type: string }
    }
    CR_Polygons: {
        mode: { kind: 'enum', type: Enum_CR_Polygons_mode }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        rows: { kind: 'number', type: number }
        columns: { kind: 'number', type: number }
        face_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        background_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        line_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        line_width: { kind: 'number', type: number }
        face_color_hex: { kind: 'string', type: string }
        bg_color_hex: { kind: 'string', type: string }
        line_color_hex: { kind: 'string', type: string }
    }
    CR_Color_Gradient: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        start_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        end_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        gradient_distance: { kind: 'number', type: number }
        linear_transition: { kind: 'number', type: number }
        orientation: { kind: 'enum', type: Enum_CR_Style_Bars_orientation }
        start_color_hex: { kind: 'string', type: string }
        end_color_hex: { kind: 'string', type: string }
    }
    CR_Radial_Gradient: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        start_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        end_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        gradient_distance: { kind: 'number', type: number }
        radial_center_x: { kind: 'number', type: number }
        radial_center_y: { kind: 'number', type: number }
        start_color_hex: { kind: 'string', type: string }
        end_color_hex: { kind: 'string', type: string }
    }
    CR_Starburst_Lines: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        num_lines: { kind: 'number', type: number }
        line_length: { kind: 'number', type: number }
        line_width: { kind: 'number', type: number }
        line_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        background_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        center_x: { kind: 'number', type: number }
        center_y: { kind: 'number', type: number }
        rotation: { kind: 'number', type: number }
        line_color_hex: { kind: 'string', type: string }
        bg_color_hex: { kind: 'string', type: string }
    }
    CR_Starburst_Colors: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        num_triangles: { kind: 'number', type: number }
        color_1: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        color_2: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        center_x: { kind: 'number', type: number }
        center_y: { kind: 'number', type: number }
        rotation: { kind: 'number', type: number }
        bbox_factor: { kind: 'number', type: number }
        color1_hex: { kind: 'string', type: string }
        color2_hex: { kind: 'string', type: string }
    }
    CR_Simple_Binary_Pattern: {
        binary_pattern: { kind: 'string', type: string }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    CR_Binary_Pattern: {
        binary_pattern: { kind: 'string', type: string }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        background_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        color_0: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        color_1: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        outline_thickness: { kind: 'number', type: number }
        outline_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        jitter_distance: { kind: 'number', type: number }
        bias: { kind: 'number', type: number }
        bg_color_hex: { kind: 'string', type: string }
        color0_hex: { kind: 'string', type: string }
        color1_hex: { kind: 'string', type: string }
        outline_color_hex: { kind: 'string', type: string }
    }
    CR_Draw_Shape: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        shape: { kind: 'enum', type: Enum_CR_Draw_Shape_shape }
        shape_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        back_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        x_offset: { kind: 'number', type: number }
        y_offset: { kind: 'number', type: number }
        zoom: { kind: 'number', type: number }
        rotation: { kind: 'number', type: number }
        shape_color_hex: { kind: 'string', type: string }
        bg_color_hex: { kind: 'string', type: string }
    }
    CR_Draw_Pie: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        pie_start: { kind: 'number', type: number }
        pie_stop: { kind: 'number', type: number }
        shape_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        back_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        x_offset: { kind: 'number', type: number }
        y_offset: { kind: 'number', type: number }
        zoom: { kind: 'number', type: number }
        rotation: { kind: 'number', type: number }
        shape_color_hex: { kind: 'string', type: string }
        bg_color_hex: { kind: 'string', type: string }
    }
    CR_Random_Shape_Pattern: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        num_rows: { kind: 'number', type: number }
        num_cols: { kind: 'number', type: number }
        color1: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        color2: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        color1_hex: { kind: 'string', type: string }
        color2_hex: { kind: 'string', type: string }
    }
    CR_Overlay_Text: {
        text: { kind: 'string', type: string }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        font_size: { kind: 'number', type: number }
        font_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        align: { kind: 'enum', type: Enum_CR_Overlay_Text_align }
        justify: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        margins: { kind: 'number', type: number }
        line_spacing: { kind: 'number', type: number }
        position_x: { kind: 'number', type: number }
        position_y: { kind: 'number', type: number }
        rotation_angle: { kind: 'number', type: number }
        rotation_options: { kind: 'enum', type: Enum_CR_Overlay_Text_rotation_options }
        font_color_hex: { kind: 'string', type: string }
    }
    CR_Draw_Text: {
        image_width: { kind: 'number', type: number }
        image_height: { kind: 'number', type: number }
        text: { kind: 'string', type: string }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        font_size: { kind: 'number', type: number }
        font_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        background_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        align: { kind: 'enum', type: Enum_CR_Overlay_Text_align }
        justify: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        margins: { kind: 'number', type: number }
        line_spacing: { kind: 'number', type: number }
        position_x: { kind: 'number', type: number }
        position_y: { kind: 'number', type: number }
        rotation_angle: { kind: 'number', type: number }
        rotation_options: { kind: 'enum', type: Enum_CR_Overlay_Text_rotation_options }
        font_color_hex: { kind: 'string', type: string }
        bg_color_hex: { kind: 'string', type: string }
    }
    CR_Mask_Text: {
        text: { kind: 'string', type: string }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        font_size: { kind: 'number', type: number }
        background_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        align: { kind: 'enum', type: Enum_CR_Overlay_Text_align }
        justify: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        margins: { kind: 'number', type: number }
        line_spacing: { kind: 'number', type: number }
        position_x: { kind: 'number', type: number }
        position_y: { kind: 'number', type: number }
        rotation_angle: { kind: 'number', type: number }
        rotation_options: { kind: 'enum', type: Enum_CR_Overlay_Text_rotation_options }
        bg_color_hex: { kind: 'string', type: string }
    }
    CR_Composite_Text: {
        text: { kind: 'string', type: string }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        font_size: { kind: 'number', type: number }
        align: { kind: 'enum', type: Enum_CR_Overlay_Text_align }
        justify: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        margins: { kind: 'number', type: number }
        line_spacing: { kind: 'number', type: number }
        position_x: { kind: 'number', type: number }
        position_y: { kind: 'number', type: number }
        rotation_angle: { kind: 'number', type: number }
        rotation_options: { kind: 'enum', type: Enum_CR_Overlay_Text_rotation_options }
    }
    CR_Simple_Text_Watermark: {
        text: { kind: 'string', type: string }
        align: { kind: 'enum', type: Enum_CR_Simple_Text_Watermark_align }
        opacity: { kind: 'number', type: number }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        font_size: { kind: 'number', type: number }
        font_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        x_margin: { kind: 'number', type: number }
        y_margin: { kind: 'number', type: number }
        font_color_hex: { kind: 'string', type: string }
    }
    CR_Select_Font: {
        font_name: { kind: 'enum', type: Enum_CR_Select_Font_font_name }
    }
    CR_Halftone_Filter: {
        dot_size: { kind: 'number', type: number }
        dot_shape: { kind: 'enum', type: Enum_CR_Halftone_Filter_dot_shape }
        resolution: { kind: 'enum', type: Enum_CR_Halftone_Filter_resolution }
        angle_c: { kind: 'number', type: number }
        angle_m: { kind: 'number', type: number }
        angle_y: { kind: 'number', type: number }
        angle_k: { kind: 'number', type: number }
        greyscale: { kind: 'boolean', type: boolean }
        antialias: { kind: 'boolean', type: boolean }
        antialias_scale: { kind: 'number', type: number }
        border_blending: { kind: 'boolean', type: boolean }
    }
    CR_Color_Tint: {
        strength: { kind: 'number', type: number }
        mode: { kind: 'enum', type: Enum_CR_Color_Tint_mode }
        tint_color_hex: { kind: 'string', type: string }
    }
    CR_Vignette_Filter: {
        vignette_shape: { kind: 'enum', type: Enum_CR_Vignette_Filter_vignette_shape }
        feather_amount: { kind: 'number', type: number }
        x_offset: { kind: 'number', type: number }
        y_offset: { kind: 'number', type: number }
        zoom: { kind: 'number', type: number }
        reverse: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
    }
    CR_Page_Layout: {
        layout_options: { kind: 'enum', type: Enum_CR_Page_Layout_layout_options }
        header_height: { kind: 'number', type: number }
        header_text: { kind: 'string', type: string }
        header_align: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        footer_height: { kind: 'number', type: number }
        footer_text: { kind: 'string', type: string }
        footer_align: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        font_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        header_font_size: { kind: 'number', type: number }
        footer_font_size: { kind: 'number', type: number }
        border_thickness: { kind: 'number', type: number }
        border_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        background_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        font_color_hex: { kind: 'string', type: string }
        border_color_hex: { kind: 'string', type: string }
        bg_color_hex: { kind: 'string', type: string }
    }
    CR_Image_Panel: {
        border_thickness: { kind: 'number', type: number }
        border_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        outline_thickness: { kind: 'number', type: number }
        outline_color: { kind: 'enum', type: Enum_CR_Image_Panel_outline_color }
        layout_direction: { kind: 'enum', type: Enum_CR_Style_Bars_orientation }
        border_color_hex: { kind: 'string', type: string }
    }
    CR_Image_Grid_Panel: {
        border_thickness: { kind: 'number', type: number }
        border_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        outline_thickness: { kind: 'number', type: number }
        outline_color: { kind: 'enum', type: Enum_CR_Image_Panel_outline_color }
        max_columns: { kind: 'number', type: number }
        border_color_hex: { kind: 'string', type: string }
    }
    CR_Image_Border: {
        top_thickness: { kind: 'number', type: number }
        bottom_thickness: { kind: 'number', type: number }
        left_thickness: { kind: 'number', type: number }
        right_thickness: { kind: 'number', type: number }
        border_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        outline_thickness: { kind: 'number', type: number }
        outline_color: { kind: 'enum', type: Enum_CR_Image_Panel_outline_color }
        border_color_hex: { kind: 'string', type: string }
    }
    CR_Feathered_Border: {
        top_thickness: { kind: 'number', type: number }
        bottom_thickness: { kind: 'number', type: number }
        left_thickness: { kind: 'number', type: number }
        right_thickness: { kind: 'number', type: number }
        border_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        feather_amount: { kind: 'number', type: number }
        border_color_hex: { kind: 'string', type: string }
    }
    CR_Simple_Text_Panel: {
        panel_width: { kind: 'number', type: number }
        panel_height: { kind: 'number', type: number }
        text: { kind: 'string', type: string }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        font_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        font_size: { kind: 'number', type: number }
        font_outline_thickness: { kind: 'number', type: number }
        font_outline_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        background_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        align: { kind: 'enum', type: Enum_CR_Overlay_Text_align }
        justify: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        font_color_hex: { kind: 'string', type: string }
        bg_color_hex: { kind: 'string', type: string }
    }
    CR_Color_Panel: {
        panel_width: { kind: 'number', type: number }
        panel_height: { kind: 'number', type: number }
        fill_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        fill_color_hex: { kind: 'string', type: string }
    }
    CR_Overlay_Transparent_Image: {
        transparency: { kind: 'number', type: number }
        offset_x: { kind: 'number', type: number }
        offset_y: { kind: 'number', type: number }
        rotation_angle: { kind: 'number', type: number }
        overlay_scale_factor: { kind: 'number', type: number }
    }
    CR_Half_Drop_Panel: {
        pattern: { kind: 'enum', type: Enum_CR_Half_Drop_Panel_pattern }
        drop_percentage: { kind: 'number', type: number }
    }
    CR_Diamond_Panel: {
        pattern: { kind: 'enum', type: Enum_CR_Diamond_Panel_pattern }
    }
    CR_Simple_Meme_Template: {
        preset: { kind: 'enum', type: Enum_CR_Simple_Meme_Template_preset }
        text_top: { kind: 'string', type: string }
        text_bottom: { kind: 'string', type: string }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        max_font_size: { kind: 'number', type: number }
        font_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        font_outline: { kind: 'enum', type: Enum_CR_Simple_Meme_Template_font_outline }
        bar_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        bar_options: { kind: 'enum', type: Enum_CR_Simple_Meme_Template_bar_options }
        font_color_hex: { kind: 'string', type: string }
        bar_color_hex: { kind: 'string', type: string }
    }
    CR_Simple_Banner: {
        banner_text: { kind: 'string', type: string }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        max_font_size: { kind: 'number', type: number }
        font_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        outline_thickness: { kind: 'number', type: number }
        outline_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        margin_size: { kind: 'number', type: number }
        font_color_hex: { kind: 'string', type: string }
        outline_color_hex: { kind: 'string', type: string }
    }
    CR_Comic_Panel_Templates: {
        page_width: { kind: 'number', type: number }
        page_height: { kind: 'number', type: number }
        template: { kind: 'enum', type: Enum_CR_Comic_Panel_Templates_template }
        reading_direction: { kind: 'enum', type: Enum_CR_Comic_Panel_Templates_reading_direction }
        border_thickness: { kind: 'number', type: number }
        outline_thickness: { kind: 'number', type: number }
        outline_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        panel_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        background_color: { kind: 'enum', type: Enum_CR_Halftone_Grid_background_color }
        custom_panel_layout: { kind: 'string', type: string }
        outline_color_hex: { kind: 'string', type: string }
        panel_color_hex: { kind: 'string', type: string }
        bg_color_hex: { kind: 'string', type: string }
    }
    CR_Simple_Image_Compare: {
        text1: { kind: 'string', type: string }
        text2: { kind: 'string', type: string }
        footer_height: { kind: 'number', type: number }
        font_name: { kind: 'enum', type: Enum_CR_Overlay_Text_font_name }
        font_size: { kind: 'number', type: number }
        mode: { kind: 'enum', type: Enum_CR_Simple_Image_Compare_mode }
        border_thickness: { kind: 'number', type: number }
    }
    CR_Thumbnail_Preview: {
        rescale_factor: { kind: 'number', type: number }
        max_columns: { kind: 'number', type: number }
    }
    CR_Seamless_Checker: {
        rescale_factor: { kind: 'number', type: number }
        grid_options: { kind: 'enum', type: Enum_CR_Seamless_Checker_grid_options }
    }
    CR_Image_Input_Switch: {
        Input: { kind: 'number', type: number }
    }
    CR_Image_Input_Switch_$14_way$2: {
        Input: { kind: 'number', type: number }
    }
    CR_Latent_Input_Switch: {
        Input: { kind: 'number', type: number }
    }
    CR_Conditioning_Input_Switch: {
        Input: { kind: 'number', type: number }
    }
    CR_Clip_Input_Switch: {
        Input: { kind: 'number', type: number }
    }
    CR_Model_Input_Switch: {
        Input: { kind: 'number', type: number }
    }
    CR_ControlNet_Input_Switch: {
        Input: { kind: 'number', type: number }
    }
    CR_VAE_Input_Switch: {
        Input: { kind: 'number', type: number }
    }
    CR_Text_Input_Switch: {
        Input: { kind: 'number', type: number }
        text1: { kind: 'string', type: string }
        text2: { kind: 'string', type: string }
    }
    CR_Text_Input_Switch_$14_way$2: {
        Input: { kind: 'number', type: number }
        text1: { kind: 'string', type: string }
        text2: { kind: 'string', type: string }
        text3: { kind: 'string', type: string }
        text4: { kind: 'string', type: string }
    }
    CR_Switch_Model_and_CLIP: {
        Input: { kind: 'number', type: number }
    }
    CR_Batch_Process_Switch: {
        Input: { kind: 'enum', type: Enum_CR_Batch_Process_Switch_Input }
    }
    CR_Img2Img_Process_Switch: {
        Input: { kind: 'enum', type: Enum_CR_Img2Img_Process_Switch_Input }
    }
    CR_Hires_Fix_Process_Switch: {
        Input: { kind: 'enum', type: Enum_CR_Hires_Fix_Process_Switch_Input }
    }
    CR_Index: {
        index: { kind: 'number', type: number }
        print_to_console: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
    }
    CR_Index_Increment: {
        index: { kind: 'number', type: number }
        interval: { kind: 'number', type: number }
    }
    CR_Index_Multiply: {
        index: { kind: 'number', type: number }
        factor: { kind: 'number', type: number }
    }
    CR_Index_Reset: {
        index: { kind: 'number', type: number }
        reset_to: { kind: 'number', type: number }
    }
    CR_Trigger: {
        index: { kind: 'number', type: number }
        trigger_value: { kind: 'number', type: number }
    }
    CR_String_To_Number: {
        text: { kind: 'string', type: string }
        round_integer: { kind: 'enum', type: Enum_CR_String_To_Number_round_integer }
    }
    CR_String_To_Combo: {
        text: { kind: 'string', type: string }
    }
    CR_Float_To_String: {
        float_: { kind: 'number', type: number }
    }
    CR_Float_To_Integer: {
        _float: { kind: 'number', type: number }
    }
    CR_Integer_To_String: {
        int_: { kind: 'number', type: number }
    }
    CR_String_To_Boolean: {
        text: { kind: 'string', type: string }
    }
    CR_Random_Hex_Color: {
        seed: { kind: 'number', type: number }
    }
    CR_Random_RGB: {
        seed: { kind: 'number', type: number }
    }
    CR_Random_Multiline_Values: {
        seed: { kind: 'number', type: number }
        value_type: { kind: 'enum', type: Enum_CR_Random_Multiline_Values_value_type }
        rows: { kind: 'number', type: number }
        string_length: { kind: 'number', type: number }
        custom_values: { kind: 'string', type: string }
        prepend_text: { kind: 'string', type: string }
    }
    CR_Random_Multiline_Colors: {
        seed: { kind: 'number', type: number }
        value_type: { kind: 'enum', type: Enum_CR_Random_Multiline_Colors_value_type }
        rows: { kind: 'number', type: number }
    }
    CR_Random_RGB_Gradient: {
        seed: { kind: 'number', type: number }
        rows: { kind: 'number', type: number }
    }
    CR_Random_Panel_Codes: {
        seed: { kind: 'number', type: number }
        rows: { kind: 'number', type: number }
        string_length: { kind: 'number', type: number }
        values: { kind: 'string', type: string }
    }
    CR_Text: {
        text: { kind: 'string', type: string }
    }
    CR_Multiline_Text: {
        text: { kind: 'string', type: string }
        convert_from_csv: { kind: 'boolean', type: boolean }
        csv_quote_char: { kind: 'string', type: string }
        remove_chars: { kind: 'boolean', type: boolean }
        chars_to_remove: { kind: 'string', type: string }
        split_string: { kind: 'boolean', type: boolean }
    }
    CR_Split_String: {
        text: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
    }
    CR_Text_Concatenate: {
        text1: { kind: 'string', type: string }
        text2: { kind: 'string', type: string }
        separator: { kind: 'string', type: string }
    }
    CR_Text_Replace: {
        text: { kind: 'string', type: string }
        find1: { kind: 'string', type: string }
        replace1: { kind: 'string', type: string }
        find2: { kind: 'string', type: string }
        replace2: { kind: 'string', type: string }
        find3: { kind: 'string', type: string }
        replace3: { kind: 'string', type: string }
    }
    CR_Text_Length: {
        text: { kind: 'string', type: string }
    }
    CR_Text_Operation: {
        text: { kind: 'string', type: string }
        operation: { kind: 'enum', type: Enum_CR_Text_Operation_operation }
    }
    CR_Text_Blacklist: {
        text: { kind: 'string', type: string }
        blacklist_words: { kind: 'string', type: string }
        replacement_text: { kind: 'string', type: string }
    }
    CR_Save_Text_To_File: {
        multiline_text: { kind: 'string', type: string }
        output_file_path: { kind: 'string', type: string }
        file_name: { kind: 'string', type: string }
        file_extension: { kind: 'enum', type: Enum_CR_Load_Text_List_file_extension }
    }
    CR_Set_Value_On_Boolean: {
        boolean: { kind: 'boolean', type: boolean }
        value_if_true: { kind: 'number', type: number }
        value_if_false: { kind: 'number', type: number }
    }
    CR_Set_Value_On_Binary: {
        binary: { kind: 'number', type: number }
        value_if_1: { kind: 'number', type: number }
        value_if_0: { kind: 'number', type: number }
    }
    CR_Set_Value_on_String: {
        text: { kind: 'string', type: string }
        test_string: { kind: 'string', type: string }
        value_if_true: { kind: 'string', type: string }
        value_if_false: { kind: 'string', type: string }
    }
    CR_Set_Switch_From_String: {
        text: { kind: 'string', type: string }
        switch_1: { kind: 'string', type: string }
        switch_2: { kind: 'string', type: string }
        switch_3: { kind: 'string', type: string }
        switch_4: { kind: 'string', type: string }
    }
    CR_Value: {
        value: { kind: 'number', type: number }
    }
    CR_Integer_Multiple: {
        integer: { kind: 'number', type: number }
        multiple: { kind: 'number', type: number }
    }
    CR_Clamp_Value: {
        a: { kind: 'number', type: number }
        range_min: { kind: 'number', type: number }
        range_max: { kind: 'number', type: number }
    }
    CR_Math_Operation: {
        a: { kind: 'number', type: number }
        operation: { kind: 'enum', type: Enum_CR_Math_Operation_operation }
        decimal_places: { kind: 'number', type: number }
    }
    CR_Get_Parameter_From_Prompt: {
        prompt: { kind: 'string', type: string }
        search_string: { kind: 'string', type: string }
    }
    CR_Select_Resize_Method: {
        method: { kind: 'enum', type: Enum_CR_Select_Resize_Method_method }
    }
    CR_Select_ISO_Size: {
        iso_size: { kind: 'enum', type: Enum_CR_Select_ISO_Size_iso_size }
    }
    CR_Simple_Schedule: {
        schedule: { kind: 'string', type: string }
        schedule_type: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_type }
        schedule_alias: { kind: 'string', type: string }
        schedule_format: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_format }
    }
    CR_Central_Schedule: {
        schedule_1: { kind: 'string', type: string }
        schedule_type1: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_type }
        schedule_alias1: { kind: 'string', type: string }
        schedule_2: { kind: 'string', type: string }
        schedule_type2: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_type }
        schedule_alias2: { kind: 'string', type: string }
        schedule_3: { kind: 'string', type: string }
        schedule_type3: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_type }
        schedule_alias3: { kind: 'string', type: string }
        schedule_format: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_format }
    }
    CR_Combine_Schedules: {
    }
    CR_Output_Schedule_To_File: {
        output_file_path: { kind: 'string', type: string }
        file_name: { kind: 'string', type: string }
        file_extension: { kind: 'enum', type: Enum_CR_Load_Text_List_file_extension }
    }
    CR_Load_Schedule_From_File: {
        input_file_path: { kind: 'string', type: string }
        file_name: { kind: 'string', type: string }
        file_extension: { kind: 'enum', type: Enum_CR_Load_Text_List_file_extension }
    }
    CR_Schedule_Input_Switch: {
        Input: { kind: 'number', type: number }
    }
    CR_Bit_Schedule: {
        binary_string: { kind: 'string', type: string }
        interval: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
    }
    CR_Simple_Value_Scheduler: {
        schedule: { kind: 'string', type: string }
        current_frame: { kind: 'number', type: number }
    }
    CR_Simple_Text_Scheduler: {
        schedule: { kind: 'string', type: string }
        current_frame: { kind: 'number', type: number }
    }
    CR_Value_Scheduler: {
        mode: { kind: 'enum', type: Enum_CR_Value_Scheduler_mode }
        current_frame: { kind: 'number', type: number }
        schedule_alias: { kind: 'string', type: string }
        default_value: { kind: 'number', type: number }
        schedule_format: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_format }
    }
    CR_Text_Scheduler: {
        mode: { kind: 'enum', type: Enum_CR_Text_Scheduler_mode }
        current_frame: { kind: 'number', type: number }
        schedule_alias: { kind: 'string', type: string }
        default_text: { kind: 'string', type: string }
        schedule_format: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_format }
    }
    CR_Load_Scheduled_Models: {
        mode: { kind: 'enum', type: Enum_CR_Load_Scheduled_Models_mode }
        current_frame: { kind: 'number', type: number }
        schedule_alias: { kind: 'string', type: string }
        default_model: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        schedule_format: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_format }
    }
    CR_Load_Scheduled_LoRAs: {
        mode: { kind: 'enum', type: Enum_CR_Load_Scheduled_LoRAs_mode }
        current_frame: { kind: 'number', type: number }
        schedule_alias: { kind: 'string', type: string }
        default_lora: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
        schedule_format: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_format }
    }
    CR_Prompt_Scheduler: {
        mode: { kind: 'enum', type: Enum_CR_Prompt_Scheduler_mode }
        current_frame: { kind: 'number', type: number }
        default_prompt: { kind: 'string', type: string }
        schedule_format: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_format }
        interpolate_prompt: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
        schedule_alias: { kind: 'string', type: string }
        keyframe_list: { kind: 'string', type: string }
        prepend_text: { kind: 'string', type: string }
        append_text: { kind: 'string', type: string }
    }
    CR_Simple_Prompt_Scheduler: {
        keyframe_list: { kind: 'string', type: string }
        current_frame: { kind: 'number', type: number }
        keyframe_format: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_format }
    }
    CR_Keyframe_List: {
        keyframe_list: { kind: 'string', type: string }
        keyframe_format: { kind: 'enum', type: Enum_CR_Simple_Schedule_schedule_format }
    }
    CR_Encode_Scheduled_Prompts: {
        current_prompt: { kind: 'string', type: string }
        next_prompt: { kind: 'string', type: string }
        weight: { kind: 'number', type: number }
    }
    CR_Gradient_Float: {
        start_value: { kind: 'number', type: number }
        end_value: { kind: 'number', type: number }
        start_frame: { kind: 'number', type: number }
        frame_duration: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
        gradient_profile: { kind: 'enum', type: Enum_CR_XY_Interpolate_gradient_profile }
    }
    CR_Gradient_Integer: {
        start_value: { kind: 'number', type: number }
        end_value: { kind: 'number', type: number }
        start_frame: { kind: 'number', type: number }
        frame_duration: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
        gradient_profile: { kind: 'enum', type: Enum_CR_XY_Interpolate_gradient_profile }
    }
    CR_Increment_Float: {
        start_value: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
        start_frame: { kind: 'number', type: number }
        frame_duration: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    CR_Increment_Integer: {
        start_value: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
        start_frame: { kind: 'number', type: number }
        frame_duration: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    CR_Interpolate_Latents: {
        weight: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_CR_Interpolate_Latents_method }
    }
    CR_Debatch_Frames: {
    }
    CR_Current_Frame: {
        index: { kind: 'number', type: number }
        print_to_console: { kind: 'enum', type: Enum_SDXLPromptStyler_log_prompt }
    }
    CR_Load_Animation_Frames: {
        image_sequence_folder: { kind: 'enum', type: Enum_CR_Load_Animation_Frames_image_sequence_folder }
        start_index: { kind: 'number', type: number }
        max_frames: { kind: 'number', type: number }
    }
    CR_Load_Flow_Frames: {
        input_folder: { kind: 'enum', type: Enum_CR_Load_Flow_Frames_input_folder }
        sort_by: { kind: 'enum', type: Enum_CR_Load_Flow_Frames_sort_by }
        current_frame: { kind: 'number', type: number }
        skip_start_frames: { kind: 'number', type: number }
        input_path: { kind: 'string', type: string }
        file_pattern: { kind: 'string', type: string }
    }
    CR_Output_Flow_Frames: {
        output_folder: { kind: 'enum', type: Enum_CR_XY_From_Folder_image_folder }
        filename_prefix: { kind: 'string', type: string }
        current_frame: { kind: 'number', type: number }
        output_path: { kind: 'string', type: string }
    }
    CR_Prompt_List_Keyframes: {
        keyframe_format: { kind: 'enum', type: Enum_CR_Prompt_List_Keyframes_keyframe_format }
    }
    CR_Simple_Prompt_List: {
        prompt_1: { kind: 'string', type: string }
        prompt_2: { kind: 'string', type: string }
        prompt_3: { kind: 'string', type: string }
        prompt_4: { kind: 'string', type: string }
        prompt_5: { kind: 'string', type: string }
    }
    CR_Simple_Prompt_List_Keyframes: {
        keyframe_interval: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        transition_type: { kind: 'enum', type: Enum_CR_Simple_Prompt_List_Keyframes_transition_type }
        transition_speed: { kind: 'enum', type: Enum_CR_Simple_Prompt_List_Keyframes_transition_type }
        transition_profile: { kind: 'enum', type: Enum_CR_Simple_Prompt_List_Keyframes_transition_type }
        keyframe_format: { kind: 'enum', type: Enum_CR_Prompt_List_Keyframes_keyframe_format }
    }
    CR_Cycle_Models: {
        mode: { kind: 'enum', type: Enum_CR_Cycle_Models_mode }
        frame_interval: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    CR_Cycle_LoRAs: {
        mode: { kind: 'enum', type: Enum_CR_Cycle_Models_mode }
        frame_interval: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    CR_Cycle_Text: {
        mode: { kind: 'enum', type: Enum_CR_Cycle_Text_mode }
        frame_interval: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    CR_Cycle_Text_Simple: {
        mode: { kind: 'enum', type: Enum_CR_Cycle_Text_mode }
        frame_interval: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
        text_1: { kind: 'string', type: string }
        text_2: { kind: 'string', type: string }
        text_3: { kind: 'string', type: string }
        text_4: { kind: 'string', type: string }
        text_5: { kind: 'string', type: string }
    }
    CR_Cycle_Images: {
        mode: { kind: 'enum', type: Enum_CR_Cycle_Text_mode }
        frame_interval: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    CR_Cycle_Images_Simple: {
        mode: { kind: 'enum', type: Enum_CR_Cycle_Text_mode }
        frame_interval: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    CR_Model_List: {
        ckpt_name1: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        alias1: { kind: 'string', type: string }
        ckpt_name2: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        alias2: { kind: 'string', type: string }
        ckpt_name3: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        alias3: { kind: 'string', type: string }
        ckpt_name4: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        alias4: { kind: 'string', type: string }
        ckpt_name5: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        alias5: { kind: 'string', type: string }
    }
    CR_LoRA_List: {
        lora_name1: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        alias1: { kind: 'string', type: string }
        model_strength_1: { kind: 'number', type: number }
        clip_strength_1: { kind: 'number', type: number }
        lora_name2: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        alias2: { kind: 'string', type: string }
        model_strength_2: { kind: 'number', type: number }
        clip_strength_2: { kind: 'number', type: number }
        lora_name3: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        alias3: { kind: 'string', type: string }
        model_strength_3: { kind: 'number', type: number }
        clip_strength_3: { kind: 'number', type: number }
    }
    CR_Text_List_Simple: {
        text_1: { kind: 'string', type: string }
        text_2: { kind: 'string', type: string }
        text_3: { kind: 'string', type: string }
        text_4: { kind: 'string', type: string }
        text_5: { kind: 'string', type: string }
    }
    CR_Image_List: {
        alias1: { kind: 'string', type: string }
        alias2: { kind: 'string', type: string }
        alias3: { kind: 'string', type: string }
        alias4: { kind: 'string', type: string }
        alias5: { kind: 'string', type: string }
    }
    CR_Image_List_Simple: {
    }
    AnimeFace$_SemSegPreprocessor: {
        remove_background_using_abg: { kind: 'boolean', type: boolean }
        resolution: { kind: 'number', type: number }
    }
    AnyLineArtPreprocessor$_aux: {
        merge_with_lineart: { kind: 'enum', type: Enum_AnyLineArtPreprocessor$_aux_merge_with_lineart }
        resolution: { kind: 'number', type: number }
        lineart_lower_bound: { kind: 'number', type: number }
        lineart_upper_bound: { kind: 'number', type: number }
        object_min_size: { kind: 'number', type: number }
        object_connectivity: { kind: 'number', type: number }
    }
    BinaryPreprocessor: {
        bin_threshold: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    CannyEdgePreprocessor: {
        low_threshold: { kind: 'number', type: number }
        high_threshold: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    ColorPreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    DensePosePreprocessor: {
        model: { kind: 'enum', type: Enum_DensePosePreprocessor_model }
        cmap: { kind: 'enum', type: Enum_DensePosePreprocessor_cmap }
        resolution: { kind: 'number', type: number }
    }
    DepthAnythingPreprocessor: {
        ckpt_name: { kind: 'enum', type: Enum_DepthAnythingPreprocessor_ckpt_name }
        resolution: { kind: 'number', type: number }
    }
    Zoe$_DepthAnythingPreprocessor: {
        environment: { kind: 'enum', type: Enum_Zoe$_DepthAnythingPreprocessor_environment }
        resolution: { kind: 'number', type: number }
    }
    DepthAnythingV2Preprocessor: {
        ckpt_name: { kind: 'enum', type: Enum_DepthAnythingV2Preprocessor_ckpt_name }
        resolution: { kind: 'number', type: number }
    }
    DiffusionEdge$_Preprocessor: {
        environment: { kind: 'enum', type: Enum_DiffusionEdge$_Preprocessor_environment }
        patch_batch_size: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    DSINE$7NormalMapPreprocessor: {
        fov: { kind: 'number', type: number }
        iterations: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    DWPreprocessor: {
        detect_hand: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        detect_body: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        detect_face: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        resolution: { kind: 'number', type: number }
        bbox_detector: { kind: 'enum', type: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector }
        pose_estimator: { kind: 'enum', type: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_pose_estimator }
        scale_stick_for_xinsr_cn: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    AnimalPosePreprocessor: {
        bbox_detector: { kind: 'enum', type: Enum_DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire_bbox_detector }
        pose_estimator: { kind: 'enum', type: Enum_AnimalPosePreprocessor_pose_estimator }
        resolution: { kind: 'number', type: number }
    }
    HEDPreprocessor: {
        safe: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        resolution: { kind: 'number', type: number }
    }
    FakeScribblePreprocessor: {
        safe: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        resolution: { kind: 'number', type: number }
    }
    InpaintPreprocessor: {
        black_pixel_for_xinsir_cn: { kind: 'boolean', type: boolean }
    }
    LeReS$7DepthMapPreprocessor: {
        rm_nearest: { kind: 'number', type: number }
        rm_background: { kind: 'number', type: number }
        boost: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        resolution: { kind: 'number', type: number }
    }
    LineArtPreprocessor: {
        coarse: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        resolution: { kind: 'number', type: number }
    }
    AnimeLineArtPreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    LineartStandardPreprocessor: {
        guassian_sigma: { kind: 'number', type: number }
        intensity_threshold: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    Manga2Anime$_LineArt$_Preprocessor: {
        resolution: { kind: 'number', type: number }
    }
    MediaPipe$7FaceMeshPreprocessor: {
        max_faces: { kind: 'number', type: number }
        min_confidence: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    MeshGraphormer$7DepthMapPreprocessor: {
        mask_bbox_padding: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
        mask_type: { kind: 'enum', type: Enum_MeshGraphormer$7DepthMapPreprocessor_mask_type }
        mask_expand: { kind: 'number', type: number }
        rand_seed: { kind: 'number', type: number }
        detect_thr: { kind: 'number', type: number }
        presence_thr: { kind: 'number', type: number }
    }
    MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor: {
        bbox_threshold: { kind: 'number', type: number }
        bbox_dilation: { kind: 'number', type: number }
        bbox_crop_factor: { kind: 'number', type: number }
        drop_size: { kind: 'number', type: number }
        mask_bbox_padding: { kind: 'number', type: number }
        mask_type: { kind: 'enum', type: Enum_MeshGraphormer$7DepthMapPreprocessor_mask_type }
        mask_expand: { kind: 'number', type: number }
        rand_seed: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    Metric3D$7DepthMapPreprocessor: {
        backbone: { kind: 'enum', type: Enum_Metric3D$7DepthMapPreprocessor_backbone }
        fx: { kind: 'number', type: number }
        fy: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    Metric3D$7NormalMapPreprocessor: {
        backbone: { kind: 'enum', type: Enum_Metric3D$7DepthMapPreprocessor_backbone }
        fx: { kind: 'number', type: number }
        fy: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    MiDaS$7NormalMapPreprocessor: {
        a: { kind: 'number', type: number }
        bg_threshold: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    MiDaS$7DepthMapPreprocessor: {
        a: { kind: 'number', type: number }
        bg_threshold: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    M$7LSDPreprocessor: {
        score_threshold: { kind: 'number', type: number }
        dist_threshold: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    BAE$7NormalMapPreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    OneFormer$7COCO$7SemSegPreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    OneFormer$7ADE20K$7SemSegPreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    OpenposePreprocessor: {
        detect_hand: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        detect_body: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        detect_face: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        resolution: { kind: 'number', type: number }
        scale_stick_for_xinsr_cn: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    PiDiNetPreprocessor: {
        safe: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        resolution: { kind: 'number', type: number }
    }
    SavePoseKpsAsJsonFile: {
        filename_prefix: { kind: 'string', type: string }
    }
    FacialPartColoringFromPoseKps: {
        mode: { kind: 'enum', type: Enum_FacialPartColoringFromPoseKps_mode }
        skin: { kind: 'string', type: string }
        left_eye: { kind: 'string', type: string }
        right_eye: { kind: 'string', type: string }
        nose: { kind: 'string', type: string }
        upper_lip: { kind: 'string', type: string }
        inner_mouth: { kind: 'string', type: string }
        lower_lip: { kind: 'string', type: string }
    }
    UpperBodyTrackingFromPoseKps: {
        id_include: { kind: 'string', type: string }
        Head_width_height: { kind: 'string', type: string }
        Neck_width_height: { kind: 'string', type: string }
        Shoulder_width_height: { kind: 'string', type: string }
        Torso_width_height: { kind: 'string', type: string }
        RArm_width_height: { kind: 'string', type: string }
        RForearm_width_height: { kind: 'string', type: string }
        LArm_width_height: { kind: 'string', type: string }
        LForearm_width_height: { kind: 'string', type: string }
    }
    RenderPeopleKps: {
        render_body: { kind: 'boolean', type: boolean }
        render_hand: { kind: 'boolean', type: boolean }
        render_face: { kind: 'boolean', type: boolean }
    }
    RenderAnimalKps: {
    }
    PyraCannyPreprocessor: {
        low_threshold: { kind: 'number', type: number }
        high_threshold: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    ImageLuminanceDetector: {
        gamma_correction: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    ImageIntensityDetector: {
        gamma_correction: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    ScribblePreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    Scribble$_XDoG$_Preprocessor: {
        threshold: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    Scribble$_PiDiNet$_Preprocessor: {
        safe: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        resolution: { kind: 'number', type: number }
    }
    SAMPreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    ShufflePreprocessor: {
        resolution: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    TEEDPreprocessor: {
        safe_steps: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    TilePreprocessor: {
        pyrUp_iters: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    TTPlanet$_TileGF$_Preprocessor: {
        scale_factor: { kind: 'number', type: number }
        blur_strength: { kind: 'number', type: number }
        radius: { kind: 'number', type: number }
        eps: { kind: 'number', type: number }
        resolution: { kind: 'number', type: number }
    }
    TTPlanet$_TileSimple$_Preprocessor: {
        scale_factor: { kind: 'number', type: number }
        blur_strength: { kind: 'number', type: number }
    }
    UniFormer$7SemSegPreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    SemSegPreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    Unimatch$_OptFlowPreprocessor: {
        ckpt_name: { kind: 'enum', type: Enum_Unimatch$_OptFlowPreprocessor_ckpt_name }
        backward_flow: { kind: 'boolean', type: boolean }
        bidirectional_flow: { kind: 'boolean', type: boolean }
    }
    MaskOptFlow: {
    }
    Zoe$7DepthMapPreprocessor: {
        resolution: { kind: 'number', type: number }
    }
    AIO$_Preprocessor: {
        preprocessor: { kind: 'enum', type: Enum_AIO$_Preprocessor_preprocessor }
        resolution: { kind: 'number', type: number }
    }
    ControlNetPreprocessorSelector: {
        preprocessor: { kind: 'enum', type: Enum_AIO$_Preprocessor_preprocessor }
    }
    PixelPerfectResolution: {
        image_gen_width: { kind: 'number', type: number }
        image_gen_height: { kind: 'number', type: number }
        resize_mode: { kind: 'enum', type: Enum_PixelPerfectResolution_resize_mode }
    }
    ImageGenResolutionFromImage: {
    }
    ImageGenResolutionFromLatent: {
    }
    HintImageEnchance: {
        image_gen_width: { kind: 'number', type: number }
        image_gen_height: { kind: 'number', type: number }
        resize_mode: { kind: 'enum', type: Enum_PixelPerfectResolution_resize_mode }
    }
    ExecuteAllControlNetPreprocessors: {
        resolution: { kind: 'number', type: number }
    }
    ControlNetAuxSimpleAddText: {
        text: { kind: 'string', type: string }
    }
    BNK$_CutoffBasePrompt: {
        text: { kind: 'string', type: string }
    }
    BNK$_CutoffSetRegions: {
        region_text: { kind: 'string', type: string }
        target_text: { kind: 'string', type: string }
        weight: { kind: 'number', type: number }
    }
    BNK$_CutoffRegionsToConditioning: {
        mask_token: { kind: 'string', type: string }
        strict_mask: { kind: 'number', type: number }
        start_from_masked: { kind: 'number', type: number }
    }
    BNK$_CutoffRegionsToConditioning$_ADV: {
        mask_token: { kind: 'string', type: string }
        strict_mask: { kind: 'number', type: number }
        start_from_masked: { kind: 'number', type: number }
        token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        weight_interpretation: { kind: 'enum', type: Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation }
    }
    CLIPTextEncodeSDXL$6: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        size_cond_factor: { kind: 'number', type: number }
        text: { kind: 'string', type: string }
    }
    ConditioningCombineMultiple$6: {
    }
    SD3NegativeConditioning$6: {
        end: { kind: 'number', type: number }
    }
    FluxAttentionSeeker$6: {
        apply_to_query: { kind: 'boolean', type: boolean }
        apply_to_key: { kind: 'boolean', type: boolean }
        apply_to_value: { kind: 'boolean', type: boolean }
        apply_to_out: { kind: 'boolean', type: boolean }
        clip_l_0: { kind: 'number', type: number }
        clip_l_1: { kind: 'number', type: number }
        clip_l_2: { kind: 'number', type: number }
        clip_l_3: { kind: 'number', type: number }
        clip_l_4: { kind: 'number', type: number }
        clip_l_5: { kind: 'number', type: number }
        clip_l_6: { kind: 'number', type: number }
        clip_l_7: { kind: 'number', type: number }
        clip_l_8: { kind: 'number', type: number }
        clip_l_9: { kind: 'number', type: number }
        clip_l_10: { kind: 'number', type: number }
        clip_l_11: { kind: 'number', type: number }
        t5xxl_0: { kind: 'number', type: number }
        t5xxl_1: { kind: 'number', type: number }
        t5xxl_2: { kind: 'number', type: number }
        t5xxl_3: { kind: 'number', type: number }
        t5xxl_4: { kind: 'number', type: number }
        t5xxl_5: { kind: 'number', type: number }
        t5xxl_6: { kind: 'number', type: number }
        t5xxl_7: { kind: 'number', type: number }
        t5xxl_8: { kind: 'number', type: number }
        t5xxl_9: { kind: 'number', type: number }
        t5xxl_10: { kind: 'number', type: number }
        t5xxl_11: { kind: 'number', type: number }
        t5xxl_12: { kind: 'number', type: number }
        t5xxl_13: { kind: 'number', type: number }
        t5xxl_14: { kind: 'number', type: number }
        t5xxl_15: { kind: 'number', type: number }
        t5xxl_16: { kind: 'number', type: number }
        t5xxl_17: { kind: 'number', type: number }
        t5xxl_18: { kind: 'number', type: number }
        t5xxl_19: { kind: 'number', type: number }
        t5xxl_20: { kind: 'number', type: number }
        t5xxl_21: { kind: 'number', type: number }
        t5xxl_22: { kind: 'number', type: number }
        t5xxl_23: { kind: 'number', type: number }
    }
    SD3AttentionSeekerLG$6: {
        apply_to_query: { kind: 'boolean', type: boolean }
        apply_to_key: { kind: 'boolean', type: boolean }
        apply_to_value: { kind: 'boolean', type: boolean }
        apply_to_out: { kind: 'boolean', type: boolean }
        clip_l_0: { kind: 'number', type: number }
        clip_l_1: { kind: 'number', type: number }
        clip_l_2: { kind: 'number', type: number }
        clip_l_3: { kind: 'number', type: number }
        clip_l_4: { kind: 'number', type: number }
        clip_l_5: { kind: 'number', type: number }
        clip_l_6: { kind: 'number', type: number }
        clip_l_7: { kind: 'number', type: number }
        clip_l_8: { kind: 'number', type: number }
        clip_l_9: { kind: 'number', type: number }
        clip_l_10: { kind: 'number', type: number }
        clip_l_11: { kind: 'number', type: number }
        clip_g_0: { kind: 'number', type: number }
        clip_g_1: { kind: 'number', type: number }
        clip_g_2: { kind: 'number', type: number }
        clip_g_3: { kind: 'number', type: number }
        clip_g_4: { kind: 'number', type: number }
        clip_g_5: { kind: 'number', type: number }
        clip_g_6: { kind: 'number', type: number }
        clip_g_7: { kind: 'number', type: number }
        clip_g_8: { kind: 'number', type: number }
        clip_g_9: { kind: 'number', type: number }
        clip_g_10: { kind: 'number', type: number }
        clip_g_11: { kind: 'number', type: number }
        clip_g_12: { kind: 'number', type: number }
        clip_g_13: { kind: 'number', type: number }
        clip_g_14: { kind: 'number', type: number }
        clip_g_15: { kind: 'number', type: number }
        clip_g_16: { kind: 'number', type: number }
        clip_g_17: { kind: 'number', type: number }
        clip_g_18: { kind: 'number', type: number }
        clip_g_19: { kind: 'number', type: number }
        clip_g_20: { kind: 'number', type: number }
        clip_g_21: { kind: 'number', type: number }
        clip_g_22: { kind: 'number', type: number }
        clip_g_23: { kind: 'number', type: number }
        clip_g_24: { kind: 'number', type: number }
        clip_g_25: { kind: 'number', type: number }
        clip_g_26: { kind: 'number', type: number }
        clip_g_27: { kind: 'number', type: number }
        clip_g_28: { kind: 'number', type: number }
        clip_g_29: { kind: 'number', type: number }
        clip_g_30: { kind: 'number', type: number }
        clip_g_31: { kind: 'number', type: number }
    }
    SD3AttentionSeekerT5$6: {
        apply_to_query: { kind: 'boolean', type: boolean }
        apply_to_key: { kind: 'boolean', type: boolean }
        apply_to_value: { kind: 'boolean', type: boolean }
        apply_to_out: { kind: 'boolean', type: boolean }
        t5xxl_0: { kind: 'number', type: number }
        t5xxl_1: { kind: 'number', type: number }
        t5xxl_2: { kind: 'number', type: number }
        t5xxl_3: { kind: 'number', type: number }
        t5xxl_4: { kind: 'number', type: number }
        t5xxl_5: { kind: 'number', type: number }
        t5xxl_6: { kind: 'number', type: number }
        t5xxl_7: { kind: 'number', type: number }
        t5xxl_8: { kind: 'number', type: number }
        t5xxl_9: { kind: 'number', type: number }
        t5xxl_10: { kind: 'number', type: number }
        t5xxl_11: { kind: 'number', type: number }
        t5xxl_12: { kind: 'number', type: number }
        t5xxl_13: { kind: 'number', type: number }
        t5xxl_14: { kind: 'number', type: number }
        t5xxl_15: { kind: 'number', type: number }
        t5xxl_16: { kind: 'number', type: number }
        t5xxl_17: { kind: 'number', type: number }
        t5xxl_18: { kind: 'number', type: number }
        t5xxl_19: { kind: 'number', type: number }
        t5xxl_20: { kind: 'number', type: number }
        t5xxl_21: { kind: 'number', type: number }
        t5xxl_22: { kind: 'number', type: number }
        t5xxl_23: { kind: 'number', type: number }
    }
    FluxBlocksBuster$6: {
        blocks: { kind: 'string', type: string }
    }
    ImageEnhanceDifference$6: {
        exponent: { kind: 'number', type: number }
    }
    ImageBatchMultiple$6: {
        method: { kind: 'enum', type: Enum_ImageScale_upscale_method }
    }
    ImageExpandBatch$6: {
        size: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageExpandBatch$6_method }
    }
    ImageFromBatch$6: {
        start: { kind: 'number', type: number }
        length: { kind: 'number', type: number }
    }
    ImageListToBatch$6: {
    }
    ImageBatchToList$6: {
    }
    ImageCompositeFromMaskBatch$6: {
    }
    ImageComposite$6: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        offset_x: { kind: 'number', type: number }
        offset_y: { kind: 'number', type: number }
    }
    ImageCrop$6: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        position: { kind: 'enum', type: Enum_ImageCrop$6_position }
        x_offset: { kind: 'number', type: number }
        y_offset: { kind: 'number', type: number }
    }
    ImageFlip$6: {
        axis: { kind: 'enum', type: Enum_ImageFlip$6_axis }
    }
    ImageRandomTransform$6: {
        seed: { kind: 'number', type: number }
        repeat: { kind: 'number', type: number }
        variation: { kind: 'number', type: number }
    }
    ImageRemoveAlpha$6: {
    }
    ImageRemoveBackground$6: {
    }
    ImageResize$6: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        method: { kind: 'enum', type: Enum_ImageResize$6_method }
        condition: { kind: 'enum', type: Enum_ImageResize$6_condition }
        multiple_of: { kind: 'number', type: number }
    }
    ImageSeamCarving$6: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        energy: { kind: 'enum', type: Enum_ImageSeamCarving$6_energy }
        order: { kind: 'enum', type: Enum_ImageSeamCarving$6_order }
    }
    ImageTile$6: {
        rows: { kind: 'number', type: number }
        cols: { kind: 'number', type: number }
        overlap: { kind: 'number', type: number }
        overlap_x: { kind: 'number', type: number }
        overlap_y: { kind: 'number', type: number }
    }
    ImageUntile$6: {
        overlap_x: { kind: 'number', type: number }
        overlap_y: { kind: 'number', type: number }
        rows: { kind: 'number', type: number }
        cols: { kind: 'number', type: number }
    }
    RemBGSession$6: {
        model: { kind: 'enum', type: Enum_RemBGSession$6_model }
        providers: { kind: 'enum', type: Enum_RemBGSession$6_providers }
    }
    TransparentBGSession$6: {
        mode: { kind: 'enum', type: Enum_TransparentBGSession$6_mode }
        use_jit: { kind: 'boolean', type: boolean }
    }
    ImageApplyLUT$6: {
        lut_file: { kind: 'enum', type: Enum_ImageApplyLUT$6_lut_file }
        gamma_correction: { kind: 'boolean', type: boolean }
        clip_values: { kind: 'boolean', type: boolean }
        strength: { kind: 'number', type: number }
    }
    ImageCASharpening$6: {
        amount: { kind: 'number', type: number }
    }
    ImageDesaturate$6: {
        factor: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageDesaturate$6_method }
    }
    PixelOEPixelize$6: {
        downscale_mode: { kind: 'enum', type: Enum_PixelOEPixelize$6_downscale_mode }
        target_size: { kind: 'number', type: number }
        patch_size: { kind: 'number', type: number }
        thickness: { kind: 'number', type: number }
        color_matching: { kind: 'boolean', type: boolean }
        upscale: { kind: 'boolean', type: boolean }
    }
    ImagePosterize$6: {
        threshold: { kind: 'number', type: number }
    }
    ImageColorMatch$6: {
        color_space: { kind: 'enum', type: Enum_ImageColorMatch$6_color_space }
        factor: { kind: 'number', type: number }
        device: { kind: 'enum', type: Enum_ImageColorMatch$6_device }
        batch_size: { kind: 'number', type: number }
    }
    ImageColorMatchAdobe$6: {
        color_space: { kind: 'enum', type: Enum_ImageColorMatchAdobe$6_color_space }
        luminance_factor: { kind: 'number', type: number }
        color_intensity_factor: { kind: 'number', type: number }
        fade_factor: { kind: 'number', type: number }
        neutralization_factor: { kind: 'number', type: number }
        device: { kind: 'enum', type: Enum_ImageColorMatch$6_device }
    }
    ImageHistogramMatch$6: {
        method: { kind: 'enum', type: Enum_ImageHistogramMatch$6_method }
        factor: { kind: 'number', type: number }
        device: { kind: 'enum', type: Enum_ImageColorMatch$6_device }
    }
    ImageSmartSharpen$6: {
        noise_radius: { kind: 'number', type: number }
        preserve_edges: { kind: 'number', type: number }
        sharpen: { kind: 'number', type: number }
        ratio: { kind: 'number', type: number }
    }
    GetImageSize$6: {
    }
    ImageToDevice$6: {
        device: { kind: 'enum', type: Enum_ImageColorMatch$6_device }
    }
    ImagePreviewFromLatent$6: {
        tile_size: { kind: 'number', type: number }
        image: { kind: 'enum', type: Enum_ImagePreviewFromLatent$6_image }
    }
    NoiseFromImage$6: {
        noise_strenght: { kind: 'number', type: number }
        noise_size: { kind: 'number', type: number }
        color_noise: { kind: 'number', type: number }
        mask_strength: { kind: 'number', type: number }
        mask_scale_diff: { kind: 'number', type: number }
        mask_contrast: { kind: 'number', type: number }
        saturation: { kind: 'number', type: number }
        contrast: { kind: 'number', type: number }
        blur: { kind: 'number', type: number }
    }
    MaskBlur$6: {
        amount: { kind: 'number', type: number }
        device: { kind: 'enum', type: Enum_ImageColorMatch$6_device }
    }
    MaskBoundingBox$6: {
        padding: { kind: 'number', type: number }
        blur: { kind: 'number', type: number }
    }
    MaskFix$6: {
        erode_dilate: { kind: 'number', type: number }
        fill_holes: { kind: 'number', type: number }
        remove_isolated_pixels: { kind: 'number', type: number }
        smooth: { kind: 'number', type: number }
        blur: { kind: 'number', type: number }
    }
    MaskFlip$6: {
        axis: { kind: 'enum', type: Enum_ImageFlip$6_axis }
    }
    MaskFromColor$6: {
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        threshold: { kind: 'number', type: number }
    }
    MaskFromList$6: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        str_values: { kind: 'string', type: string }
    }
    MaskFromRGBCMYBW$6: {
        threshold_r: { kind: 'number', type: number }
        threshold_g: { kind: 'number', type: number }
        threshold_b: { kind: 'number', type: number }
    }
    MaskFromSegmentation$6: {
        segments: { kind: 'number', type: number }
        remove_isolated_pixels: { kind: 'number', type: number }
        remove_small_masks: { kind: 'number', type: number }
        fill_holes: { kind: 'boolean', type: boolean }
    }
    MaskPreview$6: {
    }
    MaskSmooth$6: {
        amount: { kind: 'number', type: number }
    }
    TransitionMask$6: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        frames: { kind: 'number', type: number }
        start_frame: { kind: 'number', type: number }
        end_frame: { kind: 'number', type: number }
        transition_type: { kind: 'enum', type: Enum_TransitionMask$6_transition_type }
        timing_function: { kind: 'enum', type: Enum_TransitionMask$6_timing_function }
    }
    MaskBatch$6: {
    }
    MaskExpandBatch$6: {
        size: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_ImageExpandBatch$6_method }
    }
    MaskFromBatch$6: {
        start: { kind: 'number', type: number }
        length: { kind: 'number', type: number }
    }
    KSamplerVariationsStochastic$6: {
        noise_seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        variation_strength: { kind: 'number', type: number }
        cfg_scale: { kind: 'number', type: number }
    }
    KSamplerVariationsWithNoise$6: {
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        variation_strength: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
    }
    InjectLatentNoise$6: {
        noise_seed: { kind: 'number', type: number }
        noise_strength: { kind: 'number', type: number }
        normalize: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    FluxSamplerParams$6: {
        seed: { kind: 'string', type: string }
        sampler: { kind: 'string', type: string }
        scheduler: { kind: 'string', type: string }
        steps: { kind: 'string', type: string }
        guidance: { kind: 'string', type: string }
        max_shift: { kind: 'string', type: string }
        base_shift: { kind: 'string', type: string }
        denoise: { kind: 'string', type: string }
    }
    GuidanceTimestepping$6: {
        value: { kind: 'number', type: number }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
    }
    PlotParameters$6: {
        order_by: { kind: 'enum', type: Enum_PlotParameters$6_order_by }
        cols_value: { kind: 'enum', type: Enum_PlotParameters$6_order_by }
        cols_num: { kind: 'number', type: number }
        add_prompt: { kind: 'enum', type: Enum_PlotParameters$6_add_prompt }
        add_params: { kind: 'enum', type: Enum_PlotParameters$6_add_params }
    }
    TextEncodeForSamplerParams$6: {
        text: { kind: 'string', type: string }
    }
    SamplerSelectHelper$6: {
        euler: { kind: 'boolean', type: boolean }
        euler_cfg_pp: { kind: 'boolean', type: boolean }
        euler_ancestral: { kind: 'boolean', type: boolean }
        euler_ancestral_cfg_pp: { kind: 'boolean', type: boolean }
        heun: { kind: 'boolean', type: boolean }
        heunpp2: { kind: 'boolean', type: boolean }
        dpm_2: { kind: 'boolean', type: boolean }
        dpm_2_ancestral: { kind: 'boolean', type: boolean }
        lms: { kind: 'boolean', type: boolean }
        dpm_fast: { kind: 'boolean', type: boolean }
        dpm_adaptive: { kind: 'boolean', type: boolean }
        dpmpp_2s_ancestral: { kind: 'boolean', type: boolean }
        dpmpp_2s_ancestral_cfg_pp: { kind: 'boolean', type: boolean }
        dpmpp_sde: { kind: 'boolean', type: boolean }
        dpmpp_sde_gpu: { kind: 'boolean', type: boolean }
        dpmpp_2m: { kind: 'boolean', type: boolean }
        dpmpp_2m_cfg_pp: { kind: 'boolean', type: boolean }
        dpmpp_2m_sde: { kind: 'boolean', type: boolean }
        dpmpp_2m_sde_gpu: { kind: 'boolean', type: boolean }
        dpmpp_3m_sde: { kind: 'boolean', type: boolean }
        dpmpp_3m_sde_gpu: { kind: 'boolean', type: boolean }
        ddpm: { kind: 'boolean', type: boolean }
        lcm: { kind: 'boolean', type: boolean }
        ipndm: { kind: 'boolean', type: boolean }
        ipndm_v: { kind: 'boolean', type: boolean }
        deis: { kind: 'boolean', type: boolean }
        ddim: { kind: 'boolean', type: boolean }
        uni_pc: { kind: 'boolean', type: boolean }
        uni_pc_bh2: { kind: 'boolean', type: boolean }
    }
    SchedulerSelectHelper$6: {
        normal: { kind: 'boolean', type: boolean }
        karras: { kind: 'boolean', type: boolean }
        exponential: { kind: 'boolean', type: boolean }
        sgm_uniform: { kind: 'boolean', type: boolean }
        simple: { kind: 'boolean', type: boolean }
        ddim_uniform: { kind: 'boolean', type: boolean }
        beta: { kind: 'boolean', type: boolean }
        linear_quadratic: { kind: 'boolean', type: boolean }
    }
    LorasForFluxParams$6: {
        lora_1: { kind: 'enum', type: Enum_LoraLoader_lora_name }
        strength_model_1: { kind: 'string', type: string }
    }
    ModelSamplingSD3Advanced$6: {
        shift: { kind: 'number', type: number }
        cut_off: { kind: 'number', type: number }
        shift_multiplier: { kind: 'number', type: number }
    }
    ApplyCLIPSeg$6: {
        prompt: { kind: 'string', type: string }
        threshold: { kind: 'number', type: number }
        smooth: { kind: 'number', type: number }
        dilate: { kind: 'number', type: number }
        blur: { kind: 'number', type: number }
    }
    LoadCLIPSegModels$6: {
    }
    DrawText$6: {
        text: { kind: 'string', type: string }
        font: { kind: 'enum', type: Enum_DrawText$6_font }
        size: { kind: 'number', type: number }
        color: { kind: 'string', type: string }
        background_color: { kind: 'string', type: string }
        shadow_distance: { kind: 'number', type: number }
        shadow_blur: { kind: 'number', type: number }
        shadow_color: { kind: 'string', type: string }
        horizontal_align: { kind: 'enum', type: Enum_ImageTextMultiline_align }
        vertical_align: { kind: 'enum', type: Enum_CR_Overlay_Text_align }
        offset_x: { kind: 'number', type: number }
        offset_y: { kind: 'number', type: number }
        direction: { kind: 'enum', type: Enum_DrawText$6_direction }
    }
    BatchCount$6: {
    }
    ConsoleDebug$6: {
        prefix: { kind: 'string', type: string }
    }
    DebugTensorShape$6: {
    }
    DisplayAny: {
        mode: { kind: 'enum', type: Enum_DisplayAny_mode }
    }
    ModelCompile$6: {
        fullgraph: { kind: 'boolean', type: boolean }
        dynamic: { kind: 'boolean', type: boolean }
        mode: { kind: 'enum', type: Enum_TorchCompileModelFluxAdvanced_mode }
    }
    RemoveLatentMask$6: {
    }
    SDXLEmptyLatentSizePicker$6: {
        resolution: { kind: 'enum', type: Enum_SDXLEmptyLatentSizePicker$6_resolution }
        batch_size: { kind: 'number', type: number }
        width_override: { kind: 'number', type: number }
        height_override: { kind: 'number', type: number }
    }
    SimpleComparison$6: {
        comparison: { kind: 'enum', type: Enum_SimpleComparison$6_comparison }
    }
    SimpleCondition$6: {
    }
    SimpleMath$6: {
        value: { kind: 'string', type: string }
    }
    SimpleMathDual$6: {
        value_1: { kind: 'string', type: string }
        value_2: { kind: 'string', type: string }
    }
    SimpleMathCondition$6: {
        on_true: { kind: 'string', type: string }
        on_false: { kind: 'string', type: string }
    }
    SimpleMathBoolean$6: {
        value: { kind: 'boolean', type: boolean }
    }
    SimpleMathFloat$6: {
        value: { kind: 'number', type: number }
    }
    SimpleMathInt$6: {
        value: { kind: 'number', type: number }
    }
    SimpleMathPercent$6: {
        value: { kind: 'number', type: number }
    }
    SimpleMathSlider$6: {
        value: { kind: 'number', type: number }
        min: { kind: 'number', type: number }
        max: { kind: 'number', type: number }
        rounding: { kind: 'number', type: number }
    }
    SimpleMathSliderLowRes$6: {
        value: { kind: 'number', type: number }
        min: { kind: 'number', type: number }
        max: { kind: 'number', type: number }
        rounding: { kind: 'number', type: number }
    }
    Lerp: {
        num_Images: { kind: 'number', type: number }
        strength: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    SinWave: {
        phase: { kind: 'number', type: number }
        amplitude: { kind: 'number', type: number }
        x_translation: { kind: 'number', type: number }
        y_translation: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    InvSinWave: {
        phase: { kind: 'number', type: number }
        amplitude: { kind: 'number', type: number }
        x_translation: { kind: 'number', type: number }
        y_translation: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    CosWave: {
        phase: { kind: 'number', type: number }
        amplitude: { kind: 'number', type: number }
        x_translation: { kind: 'number', type: number }
        y_translation: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    InvCosWave: {
        phase: { kind: 'number', type: number }
        amplitude: { kind: 'number', type: number }
        x_translation: { kind: 'number', type: number }
        y_translation: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    SquareWave: {
        phase: { kind: 'number', type: number }
        amplitude: { kind: 'number', type: number }
        x_translation: { kind: 'number', type: number }
        y_translation: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    SawtoothWave: {
        phase: { kind: 'number', type: number }
        step_increment: { kind: 'number', type: number }
        x_translation: { kind: 'number', type: number }
        start_value: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    TriangleWave: {
        phase: { kind: 'number', type: number }
        amplitude: { kind: 'number', type: number }
        x_translation: { kind: 'number', type: number }
        y_translation: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    AbsCosWave: {
        phase: { kind: 'number', type: number }
        amplitude: { kind: 'number', type: number }
        x_translation: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    AbsSinWave: {
        phase: { kind: 'number', type: number }
        amplitude: { kind: 'number', type: number }
        x_translation: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
    }
    PromptSchedule: {
        text: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
        pre_text: { kind: 'string', type: string }
        app_text: { kind: 'string', type: string }
        pw_a: { kind: 'number', type: number }
        pw_b: { kind: 'number', type: number }
        pw_c: { kind: 'number', type: number }
        pw_d: { kind: 'number', type: number }
    }
    ValueSchedule: {
        text: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
    }
    PromptScheduleNodeFlow: {
        text: { kind: 'string', type: string }
        num_frames: { kind: 'number', type: number }
        in_text: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
    }
    PromptScheduleNodeFlowEnd: {
        text: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
        current_frame: { kind: 'number', type: number }
        pre_text: { kind: 'string', type: string }
        app_text: { kind: 'string', type: string }
        pw_a: { kind: 'number', type: number }
        pw_b: { kind: 'number', type: number }
        pw_c: { kind: 'number', type: number }
        pw_d: { kind: 'number', type: number }
    }
    PromptScheduleEncodeSDXL: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop_w: { kind: 'number', type: number }
        crop_h: { kind: 'number', type: number }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        text_g: { kind: 'string', type: string }
        text_l: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
        pre_text_G: { kind: 'string', type: string }
        app_text_G: { kind: 'string', type: string }
        pre_text_L: { kind: 'string', type: string }
        app_text_L: { kind: 'string', type: string }
        pw_a: { kind: 'number', type: number }
        pw_b: { kind: 'number', type: number }
        pw_c: { kind: 'number', type: number }
        pw_d: { kind: 'number', type: number }
    }
    StringSchedule: {
        text: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
        current_frame: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
        pre_text: { kind: 'string', type: string }
        app_text: { kind: 'string', type: string }
        pw_a: { kind: 'number', type: number }
        pw_b: { kind: 'number', type: number }
        pw_c: { kind: 'number', type: number }
        pw_d: { kind: 'number', type: number }
    }
    BatchPromptSchedule: {
        text: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
        pre_text: { kind: 'string', type: string }
        app_text: { kind: 'string', type: string }
        start_frame: { kind: 'number', type: number }
        end_frame: { kind: 'number', type: number }
        pw_a: { kind: 'number', type: number }
        pw_b: { kind: 'number', type: number }
        pw_c: { kind: 'number', type: number }
        pw_d: { kind: 'number', type: number }
    }
    BatchValueSchedule: {
        text: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
    }
    BatchPromptScheduleEncodeSDXL: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop_w: { kind: 'number', type: number }
        crop_h: { kind: 'number', type: number }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        text_g: { kind: 'string', type: string }
        text_l: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
        pre_text_G: { kind: 'string', type: string }
        app_text_G: { kind: 'string', type: string }
        pre_text_L: { kind: 'string', type: string }
        app_text_L: { kind: 'string', type: string }
        pw_a: { kind: 'number', type: number }
        pw_b: { kind: 'number', type: number }
        pw_c: { kind: 'number', type: number }
        pw_d: { kind: 'number', type: number }
        start_frame: { kind: 'number', type: number }
        end_frame: { kind: 'number', type: number }
    }
    BatchStringSchedule: {
        text: { kind: 'string', type: string }
        max_frames: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
        pre_text: { kind: 'string', type: string }
        app_text: { kind: 'string', type: string }
        pw_a: { kind: 'number', type: number }
        pw_b: { kind: 'number', type: number }
        pw_c: { kind: 'number', type: number }
        pw_d: { kind: 'number', type: number }
    }
    BatchValueScheduleLatentInput: {
        text: { kind: 'string', type: string }
        print_output: { kind: 'boolean', type: boolean }
    }
    BatchPromptScheduleSDXLLatentInput: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop_w: { kind: 'number', type: number }
        crop_h: { kind: 'number', type: number }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        text_g: { kind: 'string', type: string }
        text_l: { kind: 'string', type: string }
        print_output: { kind: 'boolean', type: boolean }
        pre_text_G: { kind: 'string', type: string }
        app_text_G: { kind: 'string', type: string }
        pre_text_L: { kind: 'string', type: string }
        app_text_L: { kind: 'string', type: string }
        pw_a: { kind: 'number', type: number }
        pw_b: { kind: 'number', type: number }
        pw_c: { kind: 'number', type: number }
        pw_d: { kind: 'number', type: number }
        start_frame: { kind: 'number', type: number }
        end_frame: { kind: 'number', type: number }
    }
    BatchPromptScheduleLatentInput: {
        text: { kind: 'string', type: string }
        print_output: { kind: 'boolean', type: boolean }
        pre_text: { kind: 'string', type: string }
        app_text: { kind: 'string', type: string }
        start_frame: { kind: 'number', type: number }
        end_frame: { kind: 'number', type: number }
        pw_a: { kind: 'number', type: number }
        pw_b: { kind: 'number', type: number }
        pw_c: { kind: 'number', type: number }
        pw_d: { kind: 'number', type: number }
    }
    ImagesFromBatchSchedule: {
        text: { kind: 'string', type: string }
        current_frame: { kind: 'number', type: number }
        max_frames: { kind: 'number', type: number }
        print_output: { kind: 'boolean', type: boolean }
    }
    StringConcatenate: {
        text_a: { kind: 'string', type: string }
        frame_a: { kind: 'number', type: number }
        text_b: { kind: 'string', type: string }
        frame_b: { kind: 'number', type: number }
        text_c: { kind: 'string', type: string }
        frame_c: { kind: 'number', type: number }
        text_d: { kind: 'string', type: string }
        frame_d: { kind: 'number', type: number }
        text_e: { kind: 'string', type: string }
        frame_e: { kind: 'number', type: number }
        text_f: { kind: 'string', type: string }
        frame_f: { kind: 'number', type: number }
        text_g: { kind: 'string', type: string }
        frame_g: { kind: 'number', type: number }
    }
    Init_FizzFrame: {
        frame: { kind: 'number', type: number }
        positive_text: { kind: 'string', type: string }
        negative_text: { kind: 'string', type: string }
        general_positive: { kind: 'string', type: string }
        general_negative: { kind: 'string', type: string }
    }
    FizzFrame: {
        frame: { kind: 'number', type: number }
        positive_text: { kind: 'string', type: string }
        negative_text: { kind: 'string', type: string }
    }
    FizzFrameConcatenate: {
    }
    ConcatStringSingle: {
        string_a: { kind: 'string', type: string }
        string_b: { kind: 'string', type: string }
    }
    convertKeyframeKeysToBatchKeys: {
        input: { kind: 'number', type: number }
        num_latents: { kind: 'number', type: number }
    }
    CalculateFrameOffset: {
        current_frame: { kind: 'number', type: number }
        max_frames: { kind: 'number', type: number }
        num_latent_inputs: { kind: 'number', type: number }
        index: { kind: 'number', type: number }
    }
    IPAdapter: {
        weight: { kind: 'number', type: number }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_AV$_IPAdapter_weight_type }
    }
    IPAdapterAdvanced: {
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterBatch: {
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
        encode_batch_size: { kind: 'number', type: number }
    }
    IPAdapterFaceID: {
        weight: { kind: 'number', type: number }
        weight_faceidv2: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterFaceIDKolors: {
        weight: { kind: 'number', type: number }
        weight_faceidv2: { kind: 'number', type: number }
        weight_kolors: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAAdapterFaceIDBatch: {
        weight: { kind: 'number', type: number }
        weight_faceidv2: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterTiled: {
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        sharpening: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterTiledBatch: {
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        sharpening: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
        encode_batch_size: { kind: 'number', type: number }
    }
    IPAdapterEmbeds: {
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterEmbedsBatch: {
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterStyleComposition: {
        weight_style: { kind: 'number', type: number }
        weight_composition: { kind: 'number', type: number }
        expand_style: { kind: 'boolean', type: boolean }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterStyleCompositionBatch: {
        weight_style: { kind: 'number', type: number }
        weight_composition: { kind: 'number', type: number }
        expand_style: { kind: 'boolean', type: boolean }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterMS: {
        weight: { kind: 'number', type: number }
        weight_faceidv2: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
        layer_weights: { kind: 'string', type: string }
    }
    IPAdapterClipVisionEnhancer: {
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
        enhance_tiles: { kind: 'number', type: number }
        enhance_ratio: { kind: 'number', type: number }
    }
    IPAdapterClipVisionEnhancerBatch: {
        weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
        enhance_tiles: { kind: 'number', type: number }
        enhance_ratio: { kind: 'number', type: number }
        encode_batch_size: { kind: 'number', type: number }
    }
    IPAdapterFromParams: {
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterPreciseStyleTransfer: {
        weight: { kind: 'number', type: number }
        style_boost: { kind: 'number', type: number }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterPreciseStyleTransferBatch: {
        weight: { kind: 'number', type: number }
        style_boost: { kind: 'number', type: number }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterPreciseComposition: {
        weight: { kind: 'number', type: number }
        composition_boost: { kind: 'number', type: number }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterPreciseCompositionBatch: {
        weight: { kind: 'number', type: number }
        composition_boost: { kind: 'number', type: number }
        combine_embeds: { kind: 'enum', type: Enum_ImpactIPAdapterApplySEGS_combine_embeds }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
        embeds_scaling: { kind: 'enum', type: Enum_IPAdapterAdvanced_embeds_scaling }
    }
    IPAdapterUnifiedLoader: {
        preset: { kind: 'enum', type: Enum_IPAdapterUnifiedLoader_preset }
    }
    IPAdapterUnifiedLoaderFaceID: {
        preset: { kind: 'enum', type: Enum_IPAdapterUnifiedLoaderFaceID_preset }
        lora_strength: { kind: 'number', type: number }
        provider: { kind: 'enum', type: Enum_IPAdapterUnifiedLoaderFaceID_provider }
    }
    IPAdapterModelLoader: {
        ipadapter_file: { kind: 'enum', type: Enum_AV$_IPAdapterPipe_ip_adapter_name }
    }
    IPAdapterInsightFaceLoader: {
        provider: { kind: 'enum', type: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_provider }
        model_name: { kind: 'enum', type: Enum_IPAdapterModelHelper_$3$3Inspire_insightface_model_name }
    }
    IPAdapterUnifiedLoaderCommunity: {
        preset: { kind: 'enum', type: Enum_IPAdapterUnifiedLoaderCommunity_preset }
    }
    IPAdapterEncoder: {
        weight: { kind: 'number', type: number }
    }
    IPAdapterCombineEmbeds: {
        method: { kind: 'enum', type: Enum_IPAdapterCombineEmbeds_method }
    }
    IPAdapterNoise: {
        type: { kind: 'enum', type: Enum_IPAdapterNoise_type }
        strength: { kind: 'number', type: number }
        blur: { kind: 'number', type: number }
    }
    PrepImageForClipVision: {
        interpolation: { kind: 'enum', type: Enum_PrepImageForClipVision_interpolation }
        crop_position: { kind: 'enum', type: Enum_PrepImageForClipVision_crop_position }
        sharpening: { kind: 'number', type: number }
    }
    IPAdapterSaveEmbeds: {
        filename_prefix: { kind: 'string', type: string }
    }
    IPAdapterLoadEmbeds: {
        embeds: { kind: 'enum', type: Enum_IPAdapterLoadEmbeds_embeds }
    }
    IPAdapterWeights: {
        weights: { kind: 'string', type: string }
        timing: { kind: 'enum', type: Enum_IPAdapterWeights_timing }
        frames: { kind: 'number', type: number }
        start_frame: { kind: 'number', type: number }
        end_frame: { kind: 'number', type: number }
        add_starting_frames: { kind: 'number', type: number }
        add_ending_frames: { kind: 'number', type: number }
        method: { kind: 'enum', type: Enum_IPAdapterWeights_method }
    }
    IPAdapterCombineWeights: {
        weights_1: { kind: 'number', type: number }
        weights_2: { kind: 'number', type: number }
    }
    IPAdapterWeightsFromStrategy: {
    }
    IPAdapterPromptScheduleFromWeightsStrategy: {
        prompt: { kind: 'string', type: string }
    }
    IPAdapterRegionalConditioning: {
        image_weight: { kind: 'number', type: number }
        prompt_weight: { kind: 'number', type: number }
        weight_type: { kind: 'enum', type: Enum_RegionalIPAdapterMask_$3$3Inspire_weight_type }
        start_at: { kind: 'number', type: number }
        end_at: { kind: 'number', type: number }
    }
    IPAdapterCombineParams: {
    }
    Lora_Loader_$1JPS$2: {
        switch: { kind: 'enum', type: Enum_CR_SD1$55_Aspect_Ratio_swap_dimensions }
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
    }
    SDXL_Resolutions_$1JPS$2: {
        resolution: { kind: 'enum', type: Enum_SDXL_Resolutions_$1JPS$2_resolution }
    }
    SDXL_Basic_Settings_$1JPS$2: {
        resolution: { kind: 'enum', type: Enum_SDXL_Basic_Settings_$1JPS$2_resolution }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        steps_total: { kind: 'number', type: number }
        base_percentage: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        cfg_rescale: { kind: 'number', type: number }
        cfg_refiner: { kind: 'number', type: number }
        ascore_refiner: { kind: 'number', type: number }
        res_factor: { kind: 'number', type: number }
        clip_skip: { kind: 'number', type: number }
        filename: { kind: 'string', type: string }
    }
    SDXL_Settings_$1JPS$2: {
        resolution: { kind: 'enum', type: Enum_SDXL_Basic_Settings_$1JPS$2_resolution }
        res_factor: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        cfg_rescale: { kind: 'number', type: number }
        clip_skip: { kind: 'number', type: number }
        filename: { kind: 'string', type: string }
    }
    Generation_TXT_IMG_Settings_$1JPS$2: {
        mode: { kind: 'enum', type: Enum_Generation_TXT_IMG_Settings_$1JPS$2_mode }
        img_percentage: { kind: 'number', type: number }
    }
    Crop_Image_Settings_$1JPS$2: {
        source_crop_pos: { kind: 'enum', type: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos }
        source_crop_offset: { kind: 'number', type: number }
        support_crop_pos: { kind: 'enum', type: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos }
        support_crop_offset: { kind: 'number', type: number }
        crop_intpol: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
    }
    ImageToImage_Settings_$1JPS$2: {
        img2img_strength: { kind: 'number', type: number }
        inpaint_strength: { kind: 'number', type: number }
        inpaint_grow_mask: { kind: 'number', type: number }
        unsampler_strength: { kind: 'number', type: number }
        unsampler_cfg: { kind: 'number', type: number }
        unsampler_sampler: { kind: 'enum', type: Enum_KSampler_sampler_name }
        unsampler_scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
    }
    CtrlNet_CannyEdge_Settings_$1JPS$2: {
        cannyedge_from: { kind: 'enum', type: Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from }
        cannyedge_strength: { kind: 'number', type: number }
        cannyedge_start: { kind: 'number', type: number }
        cannyedge_end: { kind: 'number', type: number }
        cannyedge_low: { kind: 'number', type: number }
        cannyedge_high: { kind: 'number', type: number }
    }
    CtrlNet_ZoeDepth_Settings_$1JPS$2: {
        zoe_from: { kind: 'enum', type: Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from }
        zoe_strength: { kind: 'number', type: number }
        zoe_start: { kind: 'number', type: number }
        zoe_end: { kind: 'number', type: number }
    }
    CtrlNet_MiDaS_Settings_$1JPS$2: {
        midas_from: { kind: 'enum', type: Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from }
        midas_strength: { kind: 'number', type: number }
        midas_start: { kind: 'number', type: number }
        midas_end: { kind: 'number', type: number }
        midas_a: { kind: 'number', type: number }
        midas_bg: { kind: 'number', type: number }
    }
    CtrlNet_OpenPose_Settings_$1JPS$2: {
        openpose_from: { kind: 'enum', type: Enum_CtrlNet_CannyEdge_Settings_$1JPS$2_cannyedge_from }
        openpose_strength: { kind: 'number', type: number }
        openpose_start: { kind: 'number', type: number }
        openpose_end: { kind: 'number', type: number }
        openpose_body: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        openpose_face: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        openpose_hand: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    Revision_Settings_$1JPS$2: {
        rev1_strength: { kind: 'number', type: number }
        rev2_strength: { kind: 'number', type: number }
        rev1_noiseaug: { kind: 'number', type: number }
        rev2_noiseaug: { kind: 'number', type: number }
        rev1_crop: { kind: 'enum', type: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos }
        rev1_offset: { kind: 'number', type: number }
        rev2_crop: { kind: 'enum', type: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos }
        rev2_offset: { kind: 'number', type: number }
        crop_intpol: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        crop_res: { kind: 'number', type: number }
    }
    IP_Adapter_Settings_$1JPS$2: {
        ipa_weight: { kind: 'number', type: number }
        ipa_wtype: { kind: 'enum', type: Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype }
        ipa_noise: { kind: 'number', type: number }
        ipa_start: { kind: 'number', type: number }
        ipa_stop: { kind: 'number', type: number }
        ipa_crop: { kind: 'enum', type: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos }
        ipa_zoom: { kind: 'number', type: number }
        ipa_offset_x: { kind: 'number', type: number }
        ipa_offset_y: { kind: 'number', type: number }
        ipa_mask: { kind: 'enum', type: Enum_IP_Adapter_Settings_$1JPS$2_ipa_mask }
        crop_intpol: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        sharpening: { kind: 'number', type: number }
        ipa_model: { kind: 'enum', type: Enum_IP_Adapter_Settings_$1JPS$2_ipa_model }
    }
    IP_Adapter_Tiled_Settings_$1JPS$2: {
        ipa_model: { kind: 'enum', type: Enum_IP_Adapter_Settings_$1JPS$2_ipa_model }
        ipa_wtype: { kind: 'enum', type: Enum_IP_Adapter_Settings_$1JPS$2_ipa_wtype }
        ipa_weight: { kind: 'number', type: number }
        ipa_noise: { kind: 'number', type: number }
        ipa_start: { kind: 'number', type: number }
        ipa_end: { kind: 'number', type: number }
        tile_short: { kind: 'number', type: number }
        tile_weight: { kind: 'number', type: number }
        zoom: { kind: 'number', type: number }
        offset_w: { kind: 'number', type: number }
        offset_h: { kind: 'number', type: number }
        prepare_type: { kind: 'enum', type: Enum_IP_Adapter_Tiled_Settings_$1JPS$2_prepare_type }
        prepare_intpol: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        prepare_sharpening: { kind: 'number', type: number }
    }
    InstantID_Settings_$1JPS$2: {
        ip_weight: { kind: 'number', type: number }
        cn_strength: { kind: 'number', type: number }
        noise: { kind: 'number', type: number }
        start: { kind: 'number', type: number }
        end: { kind: 'number', type: number }
    }
    Image_Prepare_Settings_$1JPS$2: {
        offset_width: { kind: 'number', type: number }
        offset_height: { kind: 'number', type: number }
        crop_left: { kind: 'number', type: number }
        crop_right: { kind: 'number', type: number }
        crop_top: { kind: 'number', type: number }
        crop_bottom: { kind: 'number', type: number }
        padding_left: { kind: 'number', type: number }
        padding_right: { kind: 'number', type: number }
        padding_top: { kind: 'number', type: number }
        padding_bottom: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        sharpening: { kind: 'number', type: number }
    }
    InstantID_Source_Prepare_Settings_$1JPS$2: {
        resize_to: { kind: 'enum', type: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_resize_to }
        offset_width: { kind: 'number', type: number }
        offset_height: { kind: 'number', type: number }
        crop_left: { kind: 'number', type: number }
        crop_right: { kind: 'number', type: number }
        crop_top: { kind: 'number', type: number }
        crop_bottom: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        sharpening: { kind: 'number', type: number }
        flip: { kind: 'enum', type: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip }
    }
    InstantID_Pose_Prepare_Settings_$1JPS$2: {
        resize_to: { kind: 'enum', type: Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_resize_to }
        offset_width: { kind: 'number', type: number }
        offset_height: { kind: 'number', type: number }
        crop_left: { kind: 'number', type: number }
        crop_right: { kind: 'number', type: number }
        crop_top: { kind: 'number', type: number }
        crop_bottom: { kind: 'number', type: number }
        padding_left: { kind: 'number', type: number }
        padding_right: { kind: 'number', type: number }
        padding_top: { kind: 'number', type: number }
        padding_bottom: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        sharpening: { kind: 'number', type: number }
        flip: { kind: 'enum', type: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip }
    }
    InstantID_Mask_Prepare_Settings_$1JPS$2: {
        mask_type: { kind: 'enum', type: Enum_IP_Adapter_Settings_$1JPS$2_ipa_mask }
        resize_to: { kind: 'enum', type: Enum_InstantID_Pose_Prepare_Settings_$1JPS$2_resize_to }
        resize_type: { kind: 'enum', type: Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type }
        offset_width: { kind: 'number', type: number }
        offset_height: { kind: 'number', type: number }
        crop_left: { kind: 'number', type: number }
        crop_right: { kind: 'number', type: number }
        crop_top: { kind: 'number', type: number }
        crop_bottom: { kind: 'number', type: number }
        padding_left: { kind: 'number', type: number }
        padding_right: { kind: 'number', type: number }
        padding_top: { kind: 'number', type: number }
        padding_bottom: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        sharpening: { kind: 'number', type: number }
    }
    Sampler_Scheduler_Settings_$1JPS$2: {
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
    }
    Integer_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
        int_1: { kind: 'number', type: number }
        int_2: { kind: 'number', type: number }
        int_3: { kind: 'number', type: number }
        int_4: { kind: 'number', type: number }
        int_5: { kind: 'number', type: number }
    }
    Image_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
    }
    Latent_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
    }
    Conditioning_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
    }
    Model_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
    }
    IPA_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
    }
    VAE_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
    }
    Mask_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
    }
    ControlNet_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
    }
    Disable_Enable_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
        compare: { kind: 'number', type: number }
        match: { kind: 'enum', type: Enum_Disable_Enable_Switch_$1JPS$2_match }
    }
    Enable_Disable_Switch_$1JPS$2: {
        select: { kind: 'number', type: number }
        compare: { kind: 'number', type: number }
        match: { kind: 'enum', type: Enum_Disable_Enable_Switch_$1JPS$2_match }
    }
    SDXL_Basic_Settings_Pipe_$1JPS$2: {
    }
    SDXL_Settings_Pipe_$1JPS$2: {
    }
    Crop_Image_Pipe_$1JPS$2: {
    }
    ImageToImage_Pipe_$1JPS$2: {
    }
    CtrlNet_CannyEdge_Pipe_$1JPS$2: {
    }
    CtrlNet_ZoeDepth_Pipe_$1JPS$2: {
    }
    CtrlNet_MiDaS_Pipe_$1JPS$2: {
    }
    CtrlNet_OpenPose_Pipe_$1JPS$2: {
    }
    IP_Adapter_Settings_Pipe_$1JPS$2: {
    }
    IP_Adapter_Tiled_Settings_Pipe_$1JPS$2: {
    }
    InstantID_Pipe_$1JPS$2: {
    }
    Image_Prepare_Pipe_$1JPS$2: {
    }
    InstantID_Source_Prepare_Pipe_$1JPS$2: {
    }
    InstantID_Pose_Prepare_Pipe_$1JPS$2: {
    }
    InstantID_Mask_Prepare_Pipe_$1JPS$2: {
    }
    Revision_Settings_Pipe_$1JPS$2: {
    }
    SDXL_Fundamentals_MultiPipe_$1JPS$2: {
        seed: { kind: 'number', type: number }
    }
    Images_Masks_MultiPipe_$1JPS$2: {
    }
    SDXL_Recommended_Resolution_Calc_$1JPS$2: {
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
    }
    Resolution_Multiply_$1JPS$2: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        factor: { kind: 'number', type: number }
    }
    Largest_Int_$1JPS$2: {
        int_a: { kind: 'number', type: number }
        int_b: { kind: 'number', type: number }
    }
    Multiply_Int_Int_$1JPS$2: {
        int_a: { kind: 'number', type: number }
        int_b: { kind: 'number', type: number }
    }
    Multiply_Int_Float_$1JPS$2: {
        int_a: { kind: 'number', type: number }
        float_b: { kind: 'number', type: number }
    }
    Multiply_Float_Float_$1JPS$2: {
        float_a: { kind: 'number', type: number }
        float_b: { kind: 'number', type: number }
    }
    Substract_Int_Int_$1JPS$2: {
        int_a: { kind: 'number', type: number }
        int_b: { kind: 'number', type: number }
    }
    Text_Concatenate_$1JPS$2: {
        delimiter: { kind: 'enum', type: Enum_Text_Concatenate_$1JPS$2_delimiter }
        text1: { kind: 'string', type: string }
        text2: { kind: 'string', type: string }
        text3: { kind: 'string', type: string }
        text4: { kind: 'string', type: string }
        text5: { kind: 'string', type: string }
    }
    Get_Date_Time_String_$1JPS$2: {
        style: { kind: 'enum', type: Enum_Get_Date_Time_String_$1JPS$2_style }
    }
    Get_Image_Size_$1JPS$2: {
    }
    Crop_Image_Square_$1JPS$2: {
        crop_position: { kind: 'enum', type: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos }
        offset_x: { kind: 'number', type: number }
        offset_y: { kind: 'number', type: number }
        zoom: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        target_rez: { kind: 'number', type: number }
        sharpening: { kind: 'number', type: number }
    }
    Crop_Image_TargetSize_$1JPS$2: {
        target_w: { kind: 'number', type: number }
        target_h: { kind: 'number', type: number }
        crop_position: { kind: 'enum', type: Enum_Crop_Image_Settings_$1JPS$2_source_crop_pos }
        offset: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        sharpening: { kind: 'number', type: number }
    }
    Prepare_Image_$1JPS$2: {
        target_w: { kind: 'number', type: number }
        target_h: { kind: 'number', type: number }
        crop_w_percent: { kind: 'number', type: number }
        crop_h_percent: { kind: 'number', type: number }
        offset_w: { kind: 'number', type: number }
        offset_h: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        sharpening: { kind: 'number', type: number }
    }
    Prepare_Image_Plus_$1JPS$2: {
        target_w: { kind: 'number', type: number }
        target_h: { kind: 'number', type: number }
        offset_w: { kind: 'number', type: number }
        offset_h: { kind: 'number', type: number }
        crop_left: { kind: 'number', type: number }
        crop_right: { kind: 'number', type: number }
        crop_top: { kind: 'number', type: number }
        crop_bottom: { kind: 'number', type: number }
        padding_left: { kind: 'number', type: number }
        padding_right: { kind: 'number', type: number }
        padding_top: { kind: 'number', type: number }
        padding_bottom: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        sharpening: { kind: 'number', type: number }
        resize_type: { kind: 'enum', type: Enum_InstantID_Mask_Prepare_Settings_$1JPS$2_resize_type }
        flip: { kind: 'enum', type: Enum_InstantID_Source_Prepare_Settings_$1JPS$2_flip }
    }
    Prepare_Image_Tiled_IPA_$1JPS$2: {
        target_w: { kind: 'number', type: number }
        target_h: { kind: 'number', type: number }
        zoom: { kind: 'number', type: number }
        offset_w: { kind: 'number', type: number }
        offset_h: { kind: 'number', type: number }
        interpolation: { kind: 'enum', type: Enum_ImageResize$6_interpolation }
        sharpening: { kind: 'number', type: number }
        tile_short: { kind: 'number', type: number }
        prepare_type: { kind: 'number', type: number }
    }
    SDXL_Prompt_Styler_$1JPS$2: {
        text_positive_g: { kind: 'string', type: string }
        text_positive_l: { kind: 'string', type: string }
        text_negative: { kind: 'string', type: string }
        artist: { kind: 'enum', type: Enum_SDXL_Prompt_Styler_$1JPS$2_artist }
        movie: { kind: 'enum', type: Enum_SDXL_Prompt_Styler_$1JPS$2_movie }
        style: { kind: 'enum', type: Enum_SDXL_Prompt_Styler_$1JPS$2_style }
        fooocus_enhance: { kind: 'enum', type: Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance }
        fooocus_negative: { kind: 'enum', type: Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance }
        universal_negative: { kind: 'enum', type: Enum_SDXL_Prompt_Styler_$1JPS$2_fooocus_enhance }
    }
    SDXL_Prompt_Handling_$1JPS$2: {
        handling: { kind: 'enum', type: Enum_SDXL_Prompt_Handling_$1JPS$2_handling }
        pos_g: { kind: 'string', type: string }
        pos_l: { kind: 'string', type: string }
    }
    SDXL_Prompt_Handling_Plus_$1JPS$2: {
        handling: { kind: 'enum', type: Enum_SDXL_Prompt_Handling_$1JPS$2_handling }
        pos_g: { kind: 'string', type: string }
        pos_l: { kind: 'string', type: string }
    }
    Text_Prompt_$1JPS$2: {
        text: { kind: 'string', type: string }
    }
    Text_Prompt_Combo_$1JPS$2: {
        pos: { kind: 'string', type: string }
        neg: { kind: 'string', type: string }
    }
    Save_Images_Plus_$1JPS$2: {
        filename_prefix: { kind: 'string', type: string }
    }
    CLIPTextEncode_SDXL_Plus_$1JPS$2: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        res_factor: { kind: 'number', type: number }
        text_pos: { kind: 'string', type: string }
        text_neg: { kind: 'string', type: string }
    }
    Time_Seed_$1JPS$2: {
        fixed_seed: { kind: 'number', type: number }
    }
    NNLatentUpscale: {
        version: { kind: 'enum', type: Enum_NNLatentUpscale_version }
        upscale: { kind: 'number', type: number }
    }
    BNK$_NoisyLatentImage: {
        source: { kind: 'enum', type: Enum_NoiseInjectionHookProvider_source }
        seed: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    BNK$_SlerpLatent: {
        factor: { kind: 'number', type: number }
    }
    BNK$_GetSigma: {
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        steps: { kind: 'number', type: number }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
    }
    BNK$_InjectNoise: {
        strength: { kind: 'number', type: number }
    }
    BNK$_Unsampler: {
        steps: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        normalize: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    BNK$_TiledKSamplerAdvanced: {
        add_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        noise_seed: { kind: 'number', type: number }
        tile_width: { kind: 'number', type: number }
        tile_height: { kind: 'number', type: number }
        tiling_strategy: { kind: 'enum', type: Enum_BNK$_TiledKSamplerAdvanced_tiling_strategy }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        return_with_leftover_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        preview: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
    }
    BNK$_TiledKSampler: {
        seed: { kind: 'number', type: number }
        tile_width: { kind: 'number', type: number }
        tile_height: { kind: 'number', type: number }
        tiling_strategy: { kind: 'enum', type: Enum_BNK$_TiledKSamplerAdvanced_tiling_strategy }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
    }
    ttN_tinyLoader: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        config_name: { kind: 'enum', type: Enum_ttN_tinyLoader_config_name }
        sampling: { kind: 'enum', type: Enum_ttN_tinyLoader_sampling }
        zsnr: { kind: 'boolean', type: boolean }
        cfg_rescale_mult: { kind: 'number', type: number }
        vae_name: { kind: 'enum', type: Enum_ttN_tinyLoader_vae_name }
        clip_skip: { kind: 'number', type: number }
        empty_latent_aspect: { kind: 'enum', type: Enum_ttN_tinyLoader_empty_latent_aspect }
        empty_latent_width: { kind: 'number', type: number }
        empty_latent_height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    ttN_conditioning: {
        loras: { kind: 'string', type: string }
        positive: { kind: 'string', type: string }
        positive_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        positive_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        negative: { kind: 'string', type: string }
        negative_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        negative_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        prepend_positive: { kind: 'string', type: string }
        prepend_negative: { kind: 'string', type: string }
    }
    ttN_KSampler$_v2: {
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_strength: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_ttN_KSampler$_v2_upscale_method }
        upscale_model_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name }
        factor: { kind: 'number', type: number }
        rescale: { kind: 'enum', type: Enum_ttN_KSampler$_v2_rescale }
        percent: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        longer_side: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_ttN_KSampler$_v2_scheduler }
        denoise: { kind: 'number', type: number }
        image_output: { kind: 'enum', type: Enum_ttN_KSampler$_v2_image_output }
        save_prefix: { kind: 'string', type: string }
        file_type: { kind: 'enum', type: Enum_ttN_KSampler$_v2_file_type }
        embed_workflow: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
    }
    ttN_pipeLoader$_v2: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        config_name: { kind: 'enum', type: Enum_ttN_tinyLoader_config_name }
        vae_name: { kind: 'enum', type: Enum_ttN_tinyLoader_vae_name }
        clip_skip: { kind: 'number', type: number }
        loras: { kind: 'string', type: string }
        positive: { kind: 'string', type: string }
        positive_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        positive_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        negative: { kind: 'string', type: string }
        negative_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        negative_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        empty_latent_aspect: { kind: 'enum', type: Enum_ttN_pipeLoader$_v2_empty_latent_aspect }
        empty_latent_width: { kind: 'number', type: number }
        empty_latent_height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        prepend_positive: { kind: 'string', type: string }
        prepend_negative: { kind: 'string', type: string }
    }
    ttN_pipeKSampler$_v2: {
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_strength: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_ttN_KSampler$_v2_upscale_method }
        upscale_model_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name }
        factor: { kind: 'number', type: number }
        rescale: { kind: 'enum', type: Enum_ttN_KSampler$_v2_rescale }
        percent: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        longer_side: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_ttN_KSampler$_v2_scheduler }
        denoise: { kind: 'number', type: number }
        image_output: { kind: 'enum', type: Enum_ttN_KSampler$_v2_image_output }
        save_prefix: { kind: 'string', type: string }
        file_type: { kind: 'enum', type: Enum_ttN_KSampler$_v2_file_type }
        embed_workflow: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
    }
    ttN_pipeKSamplerAdvanced$_v2: {
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_strength: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_ttN_KSampler$_v2_upscale_method }
        upscale_model_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name }
        factor: { kind: 'number', type: number }
        rescale: { kind: 'enum', type: Enum_ttN_KSampler$_v2_rescale }
        percent: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        longer_side: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
        add_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        noise: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_ttN_KSampler$_v2_scheduler }
        return_with_leftover_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        image_output: { kind: 'enum', type: Enum_ttN_KSampler$_v2_image_output }
        save_prefix: { kind: 'string', type: string }
        file_type: { kind: 'enum', type: Enum_ttN_KSampler$_v2_file_type }
        embed_workflow: { kind: 'boolean', type: boolean }
        noise_seed: { kind: 'number', type: number }
    }
    ttN_pipeLoaderSDXL$_v2: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        config_name: { kind: 'enum', type: Enum_ttN_tinyLoader_config_name }
        vae_name: { kind: 'enum', type: Enum_ttN_tinyLoader_vae_name }
        clip_skip: { kind: 'number', type: number }
        loras: { kind: 'string', type: string }
        refiner_ckpt_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        refiner_config_name: { kind: 'enum', type: Enum_ttN_tinyLoader_config_name }
        positive_g: { kind: 'string', type: string }
        positive_l: { kind: 'string', type: string }
        negative_g: { kind: 'string', type: string }
        negative_l: { kind: 'string', type: string }
        conditioning_aspect: { kind: 'enum', type: Enum_ttN_pipeLoaderSDXL$_v2_conditioning_aspect }
        conditioning_width: { kind: 'number', type: number }
        conditioning_height: { kind: 'number', type: number }
        crop_width: { kind: 'number', type: number }
        crop_height: { kind: 'number', type: number }
        target_aspect: { kind: 'enum', type: Enum_ttN_pipeLoaderSDXL$_v2_conditioning_aspect }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        positive_ascore: { kind: 'number', type: number }
        negative_ascore: { kind: 'number', type: number }
        empty_latent_aspect: { kind: 'enum', type: Enum_ttN_pipeLoaderSDXL$_v2_empty_latent_aspect }
        empty_latent_width: { kind: 'number', type: number }
        empty_latent_height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        prepend_positive_g: { kind: 'string', type: string }
        prepend_positive_l: { kind: 'string', type: string }
        prepend_negative_g: { kind: 'string', type: string }
        prepend_negative_l: { kind: 'string', type: string }
    }
    ttN_pipeKSamplerSDXL$_v2: {
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_strength: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_ttN_KSampler$_v2_upscale_method }
        upscale_model_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_upscaler_name }
        factor: { kind: 'number', type: number }
        rescale: { kind: 'enum', type: Enum_ttN_KSampler$_v2_rescale }
        percent: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        longer_side: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
        base_steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        denoise: { kind: 'number', type: number }
        refiner_steps: { kind: 'number', type: number }
        refiner_cfg: { kind: 'number', type: number }
        refiner_denoise: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_ttN_KSampler$_v2_scheduler }
        image_output: { kind: 'enum', type: Enum_ttN_KSampler$_v2_image_output }
        save_prefix: { kind: 'string', type: string }
        file_type: { kind: 'enum', type: Enum_ttN_KSampler$_v2_file_type }
        embed_workflow: { kind: 'boolean', type: boolean }
        seed: { kind: 'number', type: number }
    }
    ttN_advanced_xyPlot: {
        grid_spacing: { kind: 'number', type: number }
        save_individuals: { kind: 'boolean', type: boolean }
        flip_xy: { kind: 'boolean', type: boolean }
        x_plot: { kind: 'string', type: string }
        y_plot: { kind: 'string', type: string }
        z_plot: { kind: 'string', type: string }
    }
    ttN_advPlot_images: {
        enabled: { kind: 'boolean', type: boolean }
        image_output: { kind: 'enum', type: Enum_ttN_KSampler$_v2_image_output }
        save_prefix: { kind: 'string', type: string }
        file_type: { kind: 'enum', type: Enum_ttN_KSampler$_v2_file_type }
        embed_workflow: { kind: 'boolean', type: boolean }
    }
    ttN_advPlot_range: {
        node: { kind: 'enum', type: Enum_ttN_advPlot_range_node }
        widget: { kind: 'enum', type: Enum_ttN_advPlot_range_widget }
        range_mode: { kind: 'enum', type: Enum_ttN_advPlot_range_range_mode }
        start: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
        stop: { kind: 'number', type: number }
        include_stop: { kind: 'boolean', type: boolean }
        num_steps: { kind: 'number', type: number }
        label_type: { kind: 'enum', type: Enum_ttN_advPlot_range_label_type }
    }
    ttN_advPlot_string: {
        node: { kind: 'enum', type: Enum_ttN_advPlot_range_node }
        widget: { kind: 'enum', type: Enum_ttN_advPlot_range_widget }
        replace_mode: { kind: 'boolean', type: boolean }
        search_string: { kind: 'string', type: string }
        text: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
        label_type: { kind: 'enum', type: Enum_ttN_advPlot_range_label_type }
    }
    ttN_advPlot_combo: {
        node: { kind: 'enum', type: Enum_ttN_advPlot_range_node }
        widget: { kind: 'enum', type: Enum_ttN_advPlot_range_widget }
        mode: { kind: 'enum', type: Enum_ttN_advPlot_combo_mode }
        start_from: { kind: 'enum', type: Enum_ttN_advPlot_combo_start_from }
        end_with: { kind: 'enum', type: Enum_ttN_advPlot_combo_start_from }
        select: { kind: 'enum', type: Enum_ttN_advPlot_combo_start_from }
        selection: { kind: 'string', type: string }
        label_type: { kind: 'enum', type: Enum_ttN_advPlot_range_label_type }
    }
    ttN_pipeEDIT: {
        seed: { kind: 'number', type: number }
    }
    ttN_pipe2BASIC: {
    }
    ttN_pipe2DETAILER: {
        wildcard: { kind: 'string', type: string }
    }
    ttN_pipeEncodeConcat: {
        toggle: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        positive: { kind: 'string', type: string }
        positive_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        positive_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        negative: { kind: 'string', type: string }
        negative_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        negative_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
    }
    ttN_pipeLoraStack: {
        toggle: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        mode: { kind: 'enum', type: Enum_ttN_pipeLoraStack_mode }
        num_loras: { kind: 'number', type: number }
        lora_1_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_1_strength: { kind: 'number', type: number }
        lora_1_model_strength: { kind: 'number', type: number }
        lora_1_clip_strength: { kind: 'number', type: number }
        lora_2_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_2_strength: { kind: 'number', type: number }
        lora_2_model_strength: { kind: 'number', type: number }
        lora_2_clip_strength: { kind: 'number', type: number }
        lora_3_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_3_strength: { kind: 'number', type: number }
        lora_3_model_strength: { kind: 'number', type: number }
        lora_3_clip_strength: { kind: 'number', type: number }
        lora_4_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_4_strength: { kind: 'number', type: number }
        lora_4_model_strength: { kind: 'number', type: number }
        lora_4_clip_strength: { kind: 'number', type: number }
        lora_5_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_5_strength: { kind: 'number', type: number }
        lora_5_model_strength: { kind: 'number', type: number }
        lora_5_clip_strength: { kind: 'number', type: number }
        lora_6_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_6_strength: { kind: 'number', type: number }
        lora_6_model_strength: { kind: 'number', type: number }
        lora_6_clip_strength: { kind: 'number', type: number }
        lora_7_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_7_strength: { kind: 'number', type: number }
        lora_7_model_strength: { kind: 'number', type: number }
        lora_7_clip_strength: { kind: 'number', type: number }
        lora_8_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_8_strength: { kind: 'number', type: number }
        lora_8_model_strength: { kind: 'number', type: number }
        lora_8_clip_strength: { kind: 'number', type: number }
        lora_9_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_9_strength: { kind: 'number', type: number }
        lora_9_model_strength: { kind: 'number', type: number }
        lora_9_clip_strength: { kind: 'number', type: number }
        lora_10_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_10_strength: { kind: 'number', type: number }
        lora_10_model_strength: { kind: 'number', type: number }
        lora_10_clip_strength: { kind: 'number', type: number }
        lora_11_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_11_strength: { kind: 'number', type: number }
        lora_11_model_strength: { kind: 'number', type: number }
        lora_11_clip_strength: { kind: 'number', type: number }
        lora_12_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_12_strength: { kind: 'number', type: number }
        lora_12_model_strength: { kind: 'number', type: number }
        lora_12_clip_strength: { kind: 'number', type: number }
        lora_13_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_13_strength: { kind: 'number', type: number }
        lora_13_model_strength: { kind: 'number', type: number }
        lora_13_clip_strength: { kind: 'number', type: number }
        lora_14_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_14_strength: { kind: 'number', type: number }
        lora_14_model_strength: { kind: 'number', type: number }
        lora_14_clip_strength: { kind: 'number', type: number }
        lora_15_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_15_strength: { kind: 'number', type: number }
        lora_15_model_strength: { kind: 'number', type: number }
        lora_15_clip_strength: { kind: 'number', type: number }
        lora_16_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_16_strength: { kind: 'number', type: number }
        lora_16_model_strength: { kind: 'number', type: number }
        lora_16_clip_strength: { kind: 'number', type: number }
        lora_17_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_17_strength: { kind: 'number', type: number }
        lora_17_model_strength: { kind: 'number', type: number }
        lora_17_clip_strength: { kind: 'number', type: number }
        lora_18_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_18_strength: { kind: 'number', type: number }
        lora_18_model_strength: { kind: 'number', type: number }
        lora_18_clip_strength: { kind: 'number', type: number }
        lora_19_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_19_strength: { kind: 'number', type: number }
        lora_19_model_strength: { kind: 'number', type: number }
        lora_19_clip_strength: { kind: 'number', type: number }
        lora_20_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_20_strength: { kind: 'number', type: number }
        lora_20_model_strength: { kind: 'number', type: number }
        lora_20_clip_strength: { kind: 'number', type: number }
    }
    ttN_multiModelMerge: {
        ckpt_A_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        config_A_name: { kind: 'enum', type: Enum_ttN_tinyLoader_config_name }
        ckpt_B_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        config_B_name: { kind: 'enum', type: Enum_ttN_tinyLoader_config_name }
        ckpt_C_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        config_C_name: { kind: 'enum', type: Enum_ttN_tinyLoader_config_name }
        model_interpolation: { kind: 'enum', type: Enum_ttN_multiModelMerge_model_interpolation }
        model_multiplier: { kind: 'number', type: number }
        clip_interpolation: { kind: 'enum', type: Enum_ttN_multiModelMerge_clip_interpolation }
        clip_multiplier: { kind: 'number', type: number }
    }
    ttN_debugInput: {
        print_to_console: { kind: 'boolean', type: boolean }
        console_title: { kind: 'string', type: string }
        console_color: { kind: 'enum', type: Enum_ttN_debugInput_console_color }
    }
    ttN_text: {
        text: { kind: 'string', type: string }
    }
    ttN_textDebug: {
        print_to_console: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        console_title: { kind: 'string', type: string }
        execute: { kind: 'enum', type: Enum_ttN_textDebug_execute }
        text: { kind: 'string', type: string }
    }
    ttN_concat: {
        text1: { kind: 'string', type: string }
        text2: { kind: 'string', type: string }
        text3: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
    }
    ttN_text3BOX$_3WAYconcat: {
        text1: { kind: 'string', type: string }
        text2: { kind: 'string', type: string }
        text3: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
    }
    ttN_text7BOX$_concat: {
        text1: { kind: 'string', type: string }
        text2: { kind: 'string', type: string }
        text3: { kind: 'string', type: string }
        text4: { kind: 'string', type: string }
        text5: { kind: 'string', type: string }
        text6: { kind: 'string', type: string }
        text7: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
    }
    ttN_textCycleLine: {
        text: { kind: 'string', type: string }
        index: { kind: 'number', type: number }
        index_control: { kind: 'enum', type: Enum_ttN_textCycleLine_index_control }
    }
    ttN_textOutput: {
        text_output: { kind: 'enum', type: Enum_CR_XY_Save_Grid_Image_mode }
        text: { kind: 'string', type: string }
        output_path: { kind: 'string', type: string }
        save_prefix: { kind: 'string', type: string }
        number_padding: { kind: 'enum', type: Enum_ttN_textOutput_number_padding }
        file_type: { kind: 'enum', type: Enum_ttN_textOutput_file_type }
        overwrite_existing: { kind: 'boolean', type: boolean }
    }
    ttN_imageOutput: {
        image_output: { kind: 'enum', type: Enum_ttN_imageOutput_image_output }
        output_path: { kind: 'string', type: string }
        save_prefix: { kind: 'string', type: string }
        number_padding: { kind: 'enum', type: Enum_ttN_textOutput_number_padding }
        file_type: { kind: 'enum', type: Enum_ttN_KSampler$_v2_file_type }
        overwrite_existing: { kind: 'boolean', type: boolean }
        embed_workflow: { kind: 'boolean', type: boolean }
    }
    ttN_imageREMBG: {
        image_output: { kind: 'enum', type: Enum_ttN_imageOutput_image_output }
        save_prefix: { kind: 'string', type: string }
    }
    ttN_hiresfixScale: {
        model_name: { kind: 'enum', type: Enum_UpscaleModelLoader_model_name }
        rescale_after_model: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        rescale_method: { kind: 'enum', type: Enum_ttN_hiresfixScale_rescale_method }
        rescale: { kind: 'enum', type: Enum_ttN_hiresfixScale_rescale }
        percent: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        longer_side: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
        image_output: { kind: 'enum', type: Enum_ttN_imageOutput_image_output }
        save_prefix: { kind: 'string', type: string }
        output_latent: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    ttN_int: {
        int: { kind: 'number', type: number }
    }
    ttN_float: {
        float: { kind: 'number', type: number }
    }
    ttN_seed: {
        seed: { kind: 'number', type: number }
    }
    ttN_xyPlot: {
        grid_spacing: { kind: 'number', type: number }
        latent_id: { kind: 'number', type: number }
        output_individuals: { kind: 'enum', type: Enum_ttN_xyPlot_output_individuals }
        flip_xy: { kind: 'enum', type: Enum_ttN_xyPlot_output_individuals }
        x_axis: { kind: 'enum', type: Enum_ttN_xyPlot_x_axis }
        x_values: { kind: 'string', type: string }
        y_axis: { kind: 'enum', type: Enum_ttN_xyPlot_x_axis }
        y_values: { kind: 'string', type: string }
    }
    ttN_pipeIN: {
        seed: { kind: 'number', type: number }
    }
    ttN_pipeOUT: {
    }
    ttN_pipeLoader: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        config_name: { kind: 'enum', type: Enum_ttN_tinyLoader_config_name }
        vae_name: { kind: 'enum', type: Enum_ttN_tinyLoader_vae_name }
        clip_skip: { kind: 'number', type: number }
        lora1_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora1_model_strength: { kind: 'number', type: number }
        lora1_clip_strength: { kind: 'number', type: number }
        lora2_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora2_model_strength: { kind: 'number', type: number }
        lora2_clip_strength: { kind: 'number', type: number }
        lora3_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora3_model_strength: { kind: 'number', type: number }
        lora3_clip_strength: { kind: 'number', type: number }
        positive: { kind: 'string', type: string }
        positive_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        positive_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        negative: { kind: 'string', type: string }
        negative_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        negative_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        empty_latent_width: { kind: 'number', type: number }
        empty_latent_height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    ttN_pipeKSampler: {
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_model_strength: { kind: 'number', type: number }
        lora_clip_strength: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_ttN_pipeKSampler_upscale_method }
        factor: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
        sampler_state: { kind: 'enum', type: Enum_ttN_pipeKSampler_sampler_state }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
        image_output: { kind: 'enum', type: Enum_ttN_imageOutput_image_output }
        save_prefix: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
    }
    ttN_pipeKSamplerAdvanced: {
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora_model_strength: { kind: 'number', type: number }
        lora_clip_strength: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_ttN_pipeKSampler_upscale_method }
        factor: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
        sampler_state: { kind: 'enum', type: Enum_ttN_pipeKSampler_sampler_state }
        add_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        return_with_leftover_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        image_output: { kind: 'enum', type: Enum_ttN_imageOutput_image_output }
        save_prefix: { kind: 'string', type: string }
        noise_seed: { kind: 'number', type: number }
    }
    ttN_pipeLoaderSDXL: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        vae_name: { kind: 'enum', type: Enum_ttN_tinyLoader_vae_name }
        lora1_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora1_model_strength: { kind: 'number', type: number }
        lora1_clip_strength: { kind: 'number', type: number }
        lora2_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        lora2_model_strength: { kind: 'number', type: number }
        lora2_clip_strength: { kind: 'number', type: number }
        refiner_ckpt_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_secondary_ckpt_name }
        refiner_vae_name: { kind: 'enum', type: Enum_ttN_tinyLoader_vae_name }
        refiner_lora1_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        refiner_lora1_model_strength: { kind: 'number', type: number }
        refiner_lora1_clip_strength: { kind: 'number', type: number }
        refiner_lora2_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        refiner_lora2_model_strength: { kind: 'number', type: number }
        refiner_lora2_clip_strength: { kind: 'number', type: number }
        clip_skip: { kind: 'number', type: number }
        positive: { kind: 'string', type: string }
        positive_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        positive_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        negative: { kind: 'string', type: string }
        negative_token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        negative_weight_interpretation: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_weight_interpretation }
        empty_latent_width: { kind: 'number', type: number }
        empty_latent_height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    ttN_pipeKSamplerSDXL: {
        upscale_method: { kind: 'enum', type: Enum_ttN_pipeKSampler_upscale_method }
        factor: { kind: 'number', type: number }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
        sampler_state: { kind: 'enum', type: Enum_ttN_pipeKSampler_sampler_state }
        base_steps: { kind: 'number', type: number }
        refiner_steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        image_output: { kind: 'enum', type: Enum_ttN_imageOutput_image_output }
        save_prefix: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
    }
    DF$_Float: {
        Value: { kind: 'number', type: number }
    }
    DF$_Integer: {
        Value: { kind: 'number', type: number }
    }
    DF$_Text: {
        Text: { kind: 'string', type: string }
    }
    DF$_Text$_Box: {
        Text: { kind: 'string', type: string }
    }
    DF$_DynamicPrompts$_Text$_Box: {
        Text: { kind: 'string', type: string }
    }
    DF$_String$_Concatenate: {
        Prepend: { kind: 'string', type: string }
        Append: { kind: 'string', type: string }
        Delimiter: { kind: 'string', type: string }
    }
    DF$_String$_Replace: {
        Text: { kind: 'string', type: string }
        Pattern: { kind: 'string', type: string }
        Replace_With: { kind: 'string', type: string }
        Mode: { kind: 'enum', type: Enum_DF$_String$_Replace_Mode }
    }
    DF$_Search$_In$_Text: {
        Text: { kind: 'string', type: string }
        Pattern: { kind: 'string', type: string }
        ConsiderRegister: { kind: 'boolean', type: boolean }
        Mode: { kind: 'enum', type: Enum_DF$_String$_Replace_Mode }
    }
    DF$_To$_text$_$1Debug$2: {
    }
    DF$_Random: {
        Value_A: { kind: 'number', type: number }
        Value_B: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    DF$_Int$_to$_Float: {
        Value: { kind: 'number', type: number }
    }
    DF$_Ceil: {
        Value: { kind: 'number', type: number }
    }
    DF$_Floor: {
        Value: { kind: 'number', type: number }
    }
    DF$_Absolute$_value: {
        Value: { kind: 'number', type: number }
        negative_out: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    DF$_Get$_latent$_size: {
        original: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    DF$_Get$_image$_size: {
    }
    DF$_Sum: {
        Value_A: { kind: 'number', type: number }
        Value_B: { kind: 'number', type: number }
    }
    DF$_Subtract: {
        Value_A: { kind: 'number', type: number }
        Value_B: { kind: 'number', type: number }
    }
    DF$_Multiply: {
        Value_A: { kind: 'number', type: number }
        Value_B: { kind: 'number', type: number }
    }
    DF$_Divide: {
        Numerator: { kind: 'number', type: number }
        Denominator: { kind: 'number', type: number }
    }
    DF$_Power: {
        Value: { kind: 'number', type: number }
        Exponent: { kind: 'number', type: number }
    }
    DF$_Square$_root: {
        Value: { kind: 'number', type: number }
    }
    DF$_Sinus: {
        value: { kind: 'number', type: number }
        type_: { kind: 'enum', type: Enum_DF$_Sinus_type_ }
        arcSin: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    DF$_Cosines: {
        value: { kind: 'number', type: number }
        type_: { kind: 'enum', type: Enum_DF$_Sinus_type_ }
        arcCos: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    DF$_Tangent: {
        value: { kind: 'number', type: number }
        type_: { kind: 'enum', type: Enum_DF$_Sinus_type_ }
        arcTan: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    DF$_Logic$_node: {
        Operation: { kind: 'enum', type: Enum_DF$_Logic$_node_Operation }
    }
    DF$_Latent$_Scale$_by$_ratio: {
        modifier: { kind: 'number', type: number }
        scale_method: { kind: 'enum', type: Enum_ttN_hiresfixScale_rescale_method }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    DF$_Latent$_Scale$_to$_side: {
        side_length: { kind: 'number', type: number }
        side: { kind: 'enum', type: Enum_DF$_Latent$_Scale$_to$_side_side }
        scale_method: { kind: 'enum', type: Enum_ttN_hiresfixScale_rescale_method }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    DF$_Image$_scale$_by$_ratio: {
        upscale_by: { kind: 'number', type: number }
        upscale_method: { kind: 'enum', type: Enum_ttN_hiresfixScale_rescale_method }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    DF$_Image$_scale$_to$_side: {
        side_length: { kind: 'number', type: number }
        side: { kind: 'enum', type: Enum_DF$_Latent$_Scale$_to$_side_side }
        upscale_method: { kind: 'enum', type: Enum_ttN_hiresfixScale_rescale_method }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    DF$_Conditioning$_area$_scale$_by$_ratio: {
        modifier: { kind: 'number', type: number }
        strength_modifier: { kind: 'number', type: number }
    }
    LatentByRatio: {
        model: { kind: 'enum', type: Enum_LatentByRatio_model }
        ratio: { kind: 'enum', type: Enum_LatentByRatio_ratio }
        batch_size: { kind: 'number', type: number }
    }
    SamplerLCM: {
        eta: { kind: 'number', type: number }
    }
    TAESDLoader: {
        file_name: { kind: 'enum', type: Enum_TAESDLoader_file_name }
        max_batch_size: { kind: 'number', type: number }
    }
    Mask_By_Text: {
        prompt: { kind: 'string', type: string }
        negative_prompt: { kind: 'string', type: string }
        precision: { kind: 'number', type: number }
        normalize: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
    }
    Mask_Morphology: {
        distance: { kind: 'number', type: number }
        op: { kind: 'enum', type: Enum_Mask_Morphology_op }
    }
    Combine_Masks: {
        op: { kind: 'enum', type: Enum_Combine_Masks_op }
        clamp_result: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
        round_result: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
    }
    Unary_Mask_Op: {
        op: { kind: 'enum', type: Enum_Unary_Mask_Op_op }
    }
    Unary_Image_Op: {
        op: { kind: 'enum', type: Enum_Unary_Mask_Op_op }
    }
    Blur: {
        radius: { kind: 'number', type: number }
        sigma_factor: { kind: 'number', type: number }
    }
    Image_To_Mask: {
        method: { kind: 'enum', type: Enum_Image_To_Mask_method }
    }
    Mix_Images_By_Mask: {
    }
    Mix_Color_By_Mask: {
        r: { kind: 'number', type: number }
        g: { kind: 'number', type: number }
        b: { kind: 'number', type: number }
    }
    Mask_To_Region: {
        padding: { kind: 'number', type: number }
        constraints: { kind: 'enum', type: Enum_Mask_To_Region_constraints }
        constraint_x: { kind: 'number', type: number }
        constraint_y: { kind: 'number', type: number }
        min_width: { kind: 'number', type: number }
        min_height: { kind: 'number', type: number }
        batch_behavior: { kind: 'enum', type: Enum_Mask_To_Region_batch_behavior }
    }
    Cut_By_Mask: {
        force_resize_width: { kind: 'number', type: number }
        force_resize_height: { kind: 'number', type: number }
    }
    Paste_By_Mask: {
        resize_behavior: { kind: 'enum', type: Enum_Paste_By_Mask_resize_behavior }
    }
    Get_Image_Size: {
    }
    Change_Channel_Count: {
        kind: { kind: 'enum', type: Enum_Change_Channel_Count_kind }
    }
    Constant_Mask: {
        value: { kind: 'number', type: number }
        explicit_height: { kind: 'number', type: number }
        explicit_width: { kind: 'number', type: number }
    }
    Prune_By_Mask: {
    }
    Separate_Mask_Components: {
    }
    Create_Rect_Mask: {
        mode: { kind: 'enum', type: Enum_Create_Rect_Mask_mode }
        origin: { kind: 'enum', type: Enum_Create_Rect_Mask_origin }
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        image_width: { kind: 'number', type: number }
        image_height: { kind: 'number', type: number }
    }
    Make_Image_Batch: {
    }
    Create_QR_Code: {
        text: { kind: 'string', type: string }
        size: { kind: 'number', type: number }
        qr_version: { kind: 'number', type: number }
        error_correction: { kind: 'enum', type: Enum_QRCodeGenerator_error_correction }
        box_size: { kind: 'number', type: number }
        border: { kind: 'number', type: number }
    }
    Convert_Color_Space: {
        in_space: { kind: 'enum', type: Enum_Convert_Color_Space_in_space }
        out_space: { kind: 'enum', type: Enum_Convert_Color_Space_in_space }
    }
    MasqueradeIncrementer: {
        seed: { kind: 'number', type: number }
        max_value: { kind: 'number', type: number }
    }
    Image_Remove_Background_$1rembg$2: {
    }
    Context_Big_$1rgthree$2: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        step_refiner: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
        sampler: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        clip_width: { kind: 'number', type: number }
        clip_height: { kind: 'number', type: number }
        text_pos_g: { kind: 'string', type: string }
        text_pos_l: { kind: 'string', type: string }
        text_neg_g: { kind: 'string', type: string }
        text_neg_l: { kind: 'string', type: string }
    }
    Context_$1rgthree$2: {
        seed: { kind: 'number', type: number }
    }
    Context_Switch_$1rgthree$2: {
    }
    Context_Switch_Big_$1rgthree$2: {
    }
    Context_Merge_$1rgthree$2: {
    }
    Context_Merge_Big_$1rgthree$2: {
    }
    Display_Int_$1rgthree$2: {
        input: { kind: 'number', type: number }
    }
    Display_Any_$1rgthree$2: {
    }
    Lora_Loader_Stack_$1rgthree$2: {
        lora_01: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        strength_01: { kind: 'number', type: number }
        lora_02: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        strength_02: { kind: 'number', type: number }
        lora_03: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        strength_03: { kind: 'number', type: number }
        lora_04: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        strength_04: { kind: 'number', type: number }
    }
    Seed_$1rgthree$2: {
        seed: { kind: 'number', type: number }
    }
    Image_Inset_Crop_$1rgthree$2: {
        measurement: { kind: 'enum', type: Enum_Image_Inset_Crop_$1rgthree$2_measurement }
        left: { kind: 'number', type: number }
        right: { kind: 'number', type: number }
        top: { kind: 'number', type: number }
        bottom: { kind: 'number', type: number }
    }
    Power_Prompt_$1rgthree$2: {
        prompt: { kind: 'string', type: string }
        insert_lora: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_lora }
        insert_embedding: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_embedding }
        insert_saved: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_saved }
    }
    Power_Prompt_$7_Simple_$1rgthree$2: {
        prompt: { kind: 'string', type: string }
        insert_embedding: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_embedding }
        insert_saved: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_saved }
    }
    KSampler_Config_$1rgthree$2: {
        steps_total: { kind: 'number', type: number }
        refiner_step: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
    }
    SDXL_Empty_Latent_Image_$1rgthree$2: {
        dimensions: { kind: 'enum', type: Enum_SDXL_Empty_Latent_Image_$1rgthree$2_dimensions }
        clip_scale: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    SDXL_Power_Prompt_$7_Positive_$1rgthree$2: {
        prompt_g: { kind: 'string', type: string }
        prompt_l: { kind: 'string', type: string }
        opt_clip_width: { kind: 'number', type: number }
        opt_clip_height: { kind: 'number', type: number }
        insert_lora: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_lora }
        insert_embedding: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_embedding }
        insert_saved: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_saved }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        crop_width: { kind: 'number', type: number }
        crop_height: { kind: 'number', type: number }
    }
    SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2: {
        prompt_g: { kind: 'string', type: string }
        prompt_l: { kind: 'string', type: string }
        opt_clip_width: { kind: 'number', type: number }
        opt_clip_height: { kind: 'number', type: number }
        insert_embedding: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_embedding }
        insert_saved: { kind: 'enum', type: Enum_Power_Prompt_$1rgthree$2_insert_saved }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        crop_width: { kind: 'number', type: number }
        crop_height: { kind: 'number', type: number }
    }
    Any_Switch_$1rgthree$2: {
    }
    Image_Comparer_$1rgthree$2: {
    }
    Power_Lora_Loader_$1rgthree$2: {
    }
    PerturbedAttention: {
        scale: { kind: 'number', type: number }
        adaptive_scale: { kind: 'number', type: number }
        unet_block: { kind: 'enum', type: Enum_PerturbedAttention_unet_block }
        unet_block_id: { kind: 'number', type: number }
        sigma_start: { kind: 'number', type: number }
        sigma_end: { kind: 'number', type: number }
        rescale: { kind: 'number', type: number }
        rescale_mode: { kind: 'enum', type: Enum_PerturbedAttention_rescale_mode }
        unet_block_list: { kind: 'string', type: string }
    }
    SmoothedEnergyGuidanceAdvanced: {
        scale: { kind: 'number', type: number }
        blur_sigma: { kind: 'number', type: number }
        unet_block: { kind: 'enum', type: Enum_PerturbedAttention_unet_block }
        unet_block_id: { kind: 'number', type: number }
        sigma_start: { kind: 'number', type: number }
        sigma_end: { kind: 'number', type: number }
        rescale: { kind: 'number', type: number }
        rescale_mode: { kind: 'enum', type: Enum_PerturbedAttention_rescale_mode }
        unet_block_list: { kind: 'string', type: string }
    }
    TRTAttachPag: {
        unet_block: { kind: 'enum', type: Enum_PerturbedAttention_unet_block }
        unet_block_id: { kind: 'number', type: number }
        unet_block_list: { kind: 'string', type: string }
    }
    TRTPerturbedAttention: {
        scale: { kind: 'number', type: number }
        adaptive_scale: { kind: 'number', type: number }
        sigma_start: { kind: 'number', type: number }
        sigma_end: { kind: 'number', type: number }
        rescale: { kind: 'number', type: number }
        rescale_mode: { kind: 'enum', type: Enum_TRTPerturbedAttention_rescale_mode }
    }
    SDXLMixSampler: {
        noise_seed: { kind: 'number', type: number }
        total_loop: { kind: 'number', type: number }
        base_steps_percentage: { kind: 'number', type: number }
        mixing_steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
        final_only: { kind: 'enum', type: Enum_ConstrainImage$8pysssss_crop_if_required }
    }
    BLIP_Model_Loader: {
        blip_model: { kind: 'string', type: string }
        vqa_model_id: { kind: 'string', type: string }
        device: { kind: 'enum', type: Enum_BLIP_Model_Loader_device }
    }
    Blend_Latents: {
        operation: { kind: 'enum', type: Enum_Blend_Latents_operation }
        blend: { kind: 'number', type: number }
    }
    Bus_Node: {
    }
    Cache_Node: {
        latent_suffix: { kind: 'string', type: string }
        image_suffix: { kind: 'string', type: string }
        conditioning_suffix: { kind: 'string', type: string }
        output_path: { kind: 'string', type: string }
    }
    Checkpoint_Loader: {
        config_name: { kind: 'enum', type: Enum_CheckpointLoader_config_name }
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    Checkpoint_Loader_$1Simple$2: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    CLIPTextEncode_$1NSP$2: {
        mode: { kind: 'enum', type: Enum_CLIPTextEncode_$1NSP$2_mode }
        noodle_key: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        text: { kind: 'string', type: string }
    }
    CLIP_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    CLIP_Vision_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Conditioning_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Constant_Number: {
        number_type: { kind: 'enum', type: Enum_Constant_Number_number_type }
        number: { kind: 'number', type: number }
        number_as_text: { kind: 'string', type: string }
    }
    Create_Grid_Image: {
        images_path: { kind: 'string', type: string }
        pattern_glob: { kind: 'string', type: string }
        include_subfolders: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        border_width: { kind: 'number', type: number }
        number_of_columns: { kind: 'number', type: number }
        max_cell_size: { kind: 'number', type: number }
        border_red: { kind: 'number', type: number }
        border_green: { kind: 'number', type: number }
        border_blue: { kind: 'number', type: number }
    }
    Create_Grid_Image_from_Batch: {
        border_width: { kind: 'number', type: number }
        number_of_columns: { kind: 'number', type: number }
        max_cell_size: { kind: 'number', type: number }
        border_red: { kind: 'number', type: number }
        border_green: { kind: 'number', type: number }
        border_blue: { kind: 'number', type: number }
    }
    Create_Morph_Image: {
        transition_frames: { kind: 'number', type: number }
        still_image_delay_ms: { kind: 'number', type: number }
        duration_ms: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        max_size: { kind: 'number', type: number }
        output_path: { kind: 'string', type: string }
        filename: { kind: 'string', type: string }
        filetype: { kind: 'enum', type: Enum_Create_Morph_Image_filetype }
    }
    Create_Morph_Image_from_Path: {
        transition_frames: { kind: 'number', type: number }
        still_image_delay_ms: { kind: 'number', type: number }
        duration_ms: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        max_size: { kind: 'number', type: number }
        input_path: { kind: 'string', type: string }
        input_pattern: { kind: 'string', type: string }
        output_path: { kind: 'string', type: string }
        filename: { kind: 'string', type: string }
        filetype: { kind: 'enum', type: Enum_Create_Morph_Image_filetype }
    }
    Create_Video_from_Path: {
        transition_frames: { kind: 'number', type: number }
        image_delay_sec: { kind: 'number', type: number }
        fps: { kind: 'number', type: number }
        max_size: { kind: 'number', type: number }
        input_path: { kind: 'string', type: string }
        output_path: { kind: 'string', type: string }
        filename: { kind: 'string', type: string }
        codec: { kind: 'enum', type: Enum_Create_Video_from_Path_codec }
    }
    CLIPSeg_Masking: {
        text: { kind: 'string', type: string }
    }
    CLIPSeg_Model_Loader: {
        model: { kind: 'string', type: string }
    }
    CLIPSeg_Batch_Masking: {
        text_a: { kind: 'string', type: string }
        text_b: { kind: 'string', type: string }
        text_c: { kind: 'string', type: string }
        text_d: { kind: 'string', type: string }
        text_e: { kind: 'string', type: string }
        text_f: { kind: 'string', type: string }
    }
    Convert_Masks_to_Images: {
    }
    Control_Net_Model_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Debug_Number_to_Console: {
        label: { kind: 'string', type: string }
    }
    Dictionary_to_Console: {
        label: { kind: 'string', type: string }
    }
    Diffusers_Model_Loader: {
        model_path: { kind: 'enum', type: Enum_DiffusersLoader_model_path }
    }
    Diffusers_Hub_Model_Down$7Loader: {
        repo_id: { kind: 'string', type: string }
        revision: { kind: 'string', type: string }
    }
    Export_API: {
        save_prompt_api: { kind: 'enum', type: Enum_Export_API_save_prompt_api }
        output_path: { kind: 'string', type: string }
        filename_prefix: { kind: 'string', type: string }
        filename_delimiter: { kind: 'string', type: string }
        filename_number_padding: { kind: 'number', type: number }
        parse_text_tokens: { kind: 'boolean', type: boolean }
    }
    Latent_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Load_Cache: {
        latent_path: { kind: 'string', type: string }
        image_path: { kind: 'string', type: string }
        conditioning_path: { kind: 'string', type: string }
    }
    Logic_Boolean: {
        boolean: { kind: 'number', type: number }
    }
    Logic_Boolean_Primitive: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Logic_Comparison_OR: {
        boolean_a: { kind: 'boolean', type: boolean }
        boolean_b: { kind: 'boolean', type: boolean }
    }
    Logic_Comparison_AND: {
        boolean_a: { kind: 'boolean', type: boolean }
        boolean_b: { kind: 'boolean', type: boolean }
    }
    Logic_Comparison_XOR: {
        boolean_a: { kind: 'boolean', type: boolean }
        boolean_b: { kind: 'boolean', type: boolean }
    }
    Logic_NOT: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Lora_Loader: {
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
    }
    Hex_to_HSL: {
        hex_color: { kind: 'string', type: string }
        include_alpha: { kind: 'boolean', type: boolean }
    }
    HSL_to_Hex: {
        hsl_color: { kind: 'string', type: string }
    }
    Image_SSAO_$1Ambient_Occlusion$2: {
        strength: { kind: 'number', type: number }
        radius: { kind: 'number', type: number }
        ao_blur: { kind: 'number', type: number }
        specular_threshold: { kind: 'number', type: number }
        enable_specular_masking: { kind: 'enum', type: Enum_ttN_xyPlot_output_individuals }
        tile_size: { kind: 'number', type: number }
    }
    Image_SSDO_$1Direct_Occlusion$2: {
        strength: { kind: 'number', type: number }
        radius: { kind: 'number', type: number }
        specular_threshold: { kind: 'number', type: number }
        colored_occlusion: { kind: 'enum', type: Enum_ttN_xyPlot_output_individuals }
    }
    Image_Analyze: {
        mode: { kind: 'enum', type: Enum_Image_Analyze_mode }
    }
    Image_Aspect_Ratio: {
    }
    Image_Batch: {
    }
    Image_Blank: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
    }
    Image_Blend_by_Mask: {
        blend_percentage: { kind: 'number', type: number }
    }
    Image_Blend: {
        blend_percentage: { kind: 'number', type: number }
    }
    Image_Blending_Mode: {
        mode: { kind: 'enum', type: Enum_Image_Blending_Mode_mode }
        blend_percentage: { kind: 'number', type: number }
    }
    Image_Bloom_Filter: {
        radius: { kind: 'number', type: number }
        intensity: { kind: 'number', type: number }
    }
    Image_Canny_Filter: {
        enable_threshold: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        threshold_low: { kind: 'number', type: number }
        threshold_high: { kind: 'number', type: number }
    }
    Image_Chromatic_Aberration: {
        red_offset: { kind: 'number', type: number }
        green_offset: { kind: 'number', type: number }
        blue_offset: { kind: 'number', type: number }
        intensity: { kind: 'number', type: number }
        fade_radius: { kind: 'number', type: number }
    }
    Image_Color_Palette: {
        colors: { kind: 'number', type: number }
        mode: { kind: 'enum', type: Enum_Image_Color_Palette_mode }
    }
    Image_Crop_Face: {
        crop_padding_factor: { kind: 'number', type: number }
        cascade_xml: { kind: 'enum', type: Enum_Image_Crop_Face_cascade_xml }
    }
    Image_Crop_Location: {
        top: { kind: 'number', type: number }
        left: { kind: 'number', type: number }
        right: { kind: 'number', type: number }
        bottom: { kind: 'number', type: number }
    }
    Image_Crop_Square_Location: {
        x: { kind: 'number', type: number }
        y: { kind: 'number', type: number }
        size: { kind: 'number', type: number }
    }
    Image_Displacement_Warp: {
        amplitude: { kind: 'number', type: number }
    }
    Image_Lucy_Sharpen: {
        iterations: { kind: 'number', type: number }
        kernel_size: { kind: 'number', type: number }
    }
    Image_Paste_Face: {
        crop_blending: { kind: 'number', type: number }
        crop_sharpening: { kind: 'number', type: number }
    }
    Image_Paste_Crop: {
        crop_blending: { kind: 'number', type: number }
        crop_sharpening: { kind: 'number', type: number }
    }
    Image_Paste_Crop_by_Location: {
        top: { kind: 'number', type: number }
        left: { kind: 'number', type: number }
        right: { kind: 'number', type: number }
        bottom: { kind: 'number', type: number }
        crop_blending: { kind: 'number', type: number }
        crop_sharpening: { kind: 'number', type: number }
    }
    Image_Pixelate: {
        pixelation_size: { kind: 'number', type: number }
        num_colors: { kind: 'number', type: number }
        init_mode: { kind: 'enum', type: Enum_Image_Pixelate_init_mode }
        max_iterations: { kind: 'number', type: number }
        dither: { kind: 'enum', type: Enum_ttN_xyPlot_output_individuals }
        dither_mode: { kind: 'enum', type: Enum_Image_Pixelate_dither_mode }
        color_palette_mode: { kind: 'enum', type: Enum_Image_Pixelate_color_palette_mode }
        reverse_palette: { kind: 'enum', type: Enum_ttN_xyPlot_output_individuals }
    }
    Image_Power_Noise: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        frequency: { kind: 'number', type: number }
        attenuation: { kind: 'number', type: number }
        noise_type: { kind: 'enum', type: Enum_Image_Power_Noise_noise_type }
        seed: { kind: 'number', type: number }
    }
    Image_Dragan_Photography_Filter: {
        saturation: { kind: 'number', type: number }
        contrast: { kind: 'number', type: number }
        brightness: { kind: 'number', type: number }
        sharpness: { kind: 'number', type: number }
        highpass_radius: { kind: 'number', type: number }
        highpass_samples: { kind: 'number', type: number }
        highpass_strength: { kind: 'number', type: number }
        colorize: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Image_Edge_Detection_Filter: {
        mode: { kind: 'enum', type: Enum_Image_Edge_Detection_Filter_mode }
    }
    Image_Film_Grain: {
        density: { kind: 'number', type: number }
        intensity: { kind: 'number', type: number }
        highlights: { kind: 'number', type: number }
        supersample_factor: { kind: 'number', type: number }
    }
    Image_Filter_Adjustments: {
        brightness: { kind: 'number', type: number }
        contrast: { kind: 'number', type: number }
        saturation: { kind: 'number', type: number }
        sharpness: { kind: 'number', type: number }
        blur: { kind: 'number', type: number }
        gaussian_blur: { kind: 'number', type: number }
        edge_enhance: { kind: 'number', type: number }
        detail_enhance: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Image_Flip: {
        mode: { kind: 'enum', type: Enum_CR_Style_Bars_orientation }
    }
    Image_Gradient_Map: {
        flip_left_right: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Image_Generate_Gradient: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        direction: { kind: 'enum', type: Enum_CR_Style_Bars_orientation }
        tolerance: { kind: 'number', type: number }
        gradient_stops: { kind: 'string', type: string }
    }
    Image_High_Pass_Filter: {
        radius: { kind: 'number', type: number }
        strength: { kind: 'number', type: number }
        color_output: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        neutral_background: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Image_History_Loader: {
        image: { kind: 'enum', type: Enum_Image_History_Loader_image }
    }
    Image_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Image_Levels_Adjustment: {
        black_level: { kind: 'number', type: number }
        mid_level: { kind: 'number', type: number }
        white_level: { kind: 'number', type: number }
    }
    Image_Load: {
        image_path: { kind: 'string', type: string }
        RGBA: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        filename_text_extension: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Image_Median_Filter: {
        diameter: { kind: 'number', type: number }
        sigma_color: { kind: 'number', type: number }
        sigma_space: { kind: 'number', type: number }
    }
    Image_Mix_RGB_Channels: {
    }
    Image_Monitor_Effects_Filter: {
        mode: { kind: 'enum', type: Enum_Image_Monitor_Effects_Filter_mode }
        amplitude: { kind: 'number', type: number }
        offset: { kind: 'number', type: number }
    }
    Image_Nova_Filter: {
        amplitude: { kind: 'number', type: number }
        frequency: { kind: 'number', type: number }
    }
    Image_Padding: {
        feathering: { kind: 'number', type: number }
        feather_second_pass: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        left_padding: { kind: 'number', type: number }
        right_padding: { kind: 'number', type: number }
        top_padding: { kind: 'number', type: number }
        bottom_padding: { kind: 'number', type: number }
    }
    Image_Perlin_Noise: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        scale: { kind: 'number', type: number }
        octaves: { kind: 'number', type: number }
        persistence: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    Image_Rembg_$1Remove_Background$2: {
        transparency: { kind: 'boolean', type: boolean }
        model: { kind: 'enum', type: Enum_RembgNode$_Mix_model_name }
        post_processing: { kind: 'boolean', type: boolean }
        only_mask: { kind: 'boolean', type: boolean }
        alpha_matting: { kind: 'boolean', type: boolean }
        alpha_matting_foreground_threshold: { kind: 'number', type: number }
        alpha_matting_background_threshold: { kind: 'number', type: number }
        alpha_matting_erode_size: { kind: 'number', type: number }
        background_color: { kind: 'enum', type: Enum_Image_Rembg_$1Remove_Background$2_background_color }
    }
    Image_Perlin_Power_Fractal: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        scale: { kind: 'number', type: number }
        octaves: { kind: 'number', type: number }
        persistence: { kind: 'number', type: number }
        lacunarity: { kind: 'number', type: number }
        exponent: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    Image_Remove_Background_$1Alpha$2: {
        mode: { kind: 'enum', type: Enum_Image_Remove_Background_$1Alpha$2_mode }
        threshold: { kind: 'number', type: number }
        threshold_tolerance: { kind: 'number', type: number }
    }
    Image_Remove_Color: {
        target_red: { kind: 'number', type: number }
        target_green: { kind: 'number', type: number }
        target_blue: { kind: 'number', type: number }
        replace_red: { kind: 'number', type: number }
        replace_green: { kind: 'number', type: number }
        replace_blue: { kind: 'number', type: number }
        clip_threshold: { kind: 'number', type: number }
    }
    Image_Resize: {
        mode: { kind: 'enum', type: Enum_CR_Upscale_Image_mode }
        supersample: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        resampling: { kind: 'enum', type: Enum_SEGSUpscaler_resampling_method }
        rescale_factor: { kind: 'number', type: number }
        resize_width: { kind: 'number', type: number }
        resize_height: { kind: 'number', type: number }
    }
    Image_Rotate: {
        mode: { kind: 'enum', type: Enum_Image_Rotate_mode }
        rotation: { kind: 'number', type: number }
        sampler: { kind: 'enum', type: Enum_Image_Rotate_sampler }
    }
    Image_Rotate_Hue: {
        hue_shift: { kind: 'number', type: number }
    }
    Image_Send_HTTP: {
        url: { kind: 'string', type: string }
        method_type: { kind: 'enum', type: Enum_Image_Send_HTTP_method_type }
        request_field_name: { kind: 'string', type: string }
    }
    Image_Save: {
        output_path: { kind: 'string', type: string }
        filename_prefix: { kind: 'string', type: string }
        filename_delimiter: { kind: 'string', type: string }
        filename_number_padding: { kind: 'number', type: number }
        filename_number_start: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        extension: { kind: 'enum', type: Enum_Image_Save_extension }
        dpi: { kind: 'number', type: number }
        quality: { kind: 'number', type: number }
        optimize_image: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        lossless_webp: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        overwrite_mode: { kind: 'enum', type: Enum_Image_Save_overwrite_mode }
        show_history: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        show_history_by_prefix: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        embed_workflow: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        show_previews: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Image_Seamless_Texture: {
        blending: { kind: 'number', type: number }
        tiled: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        tiles: { kind: 'number', type: number }
    }
    Image_Select_Channel: {
        channel: { kind: 'enum', type: Enum_Image_Select_Channel_channel }
    }
    Image_Select_Color: {
        red: { kind: 'number', type: number }
        green: { kind: 'number', type: number }
        blue: { kind: 'number', type: number }
        variance: { kind: 'number', type: number }
    }
    Image_Shadows_and_Highlights: {
        shadow_threshold: { kind: 'number', type: number }
        shadow_factor: { kind: 'number', type: number }
        shadow_smoothing: { kind: 'number', type: number }
        highlight_threshold: { kind: 'number', type: number }
        highlight_factor: { kind: 'number', type: number }
        highlight_smoothing: { kind: 'number', type: number }
        simplify_isolation: { kind: 'number', type: number }
    }
    Image_Size_to_Number: {
    }
    Image_Stitch: {
        stitch: { kind: 'enum', type: Enum_Image_Stitch_stitch }
        feathering: { kind: 'number', type: number }
    }
    Image_Style_Filter: {
        style: { kind: 'enum', type: Enum_Image_Style_Filter_style }
    }
    Image_Threshold: {
        threshold: { kind: 'number', type: number }
    }
    Image_Tiled: {
        num_tiles: { kind: 'number', type: number }
    }
    Image_Transpose: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        X: { kind: 'number', type: number }
        Y: { kind: 'number', type: number }
        rotation: { kind: 'number', type: number }
        feathering: { kind: 'number', type: number }
    }
    Image_fDOF_Filter: {
        mode: { kind: 'enum', type: Enum_Image_fDOF_Filter_mode }
        radius: { kind: 'number', type: number }
        samples: { kind: 'number', type: number }
    }
    Image_to_Latent_Mask: {
        channel: { kind: 'enum', type: Enum_LoadImageMask_channel }
    }
    Image_to_Noise: {
        num_colors: { kind: 'number', type: number }
        black_mix: { kind: 'number', type: number }
        gaussian_mix: { kind: 'number', type: number }
        brightness: { kind: 'number', type: number }
        output_mode: { kind: 'enum', type: Enum_Image_to_Noise_output_mode }
        seed: { kind: 'number', type: number }
    }
    Image_to_Seed: {
    }
    Images_to_RGB: {
    }
    Images_to_Linear: {
    }
    Integer_place_counter: {
        int_input: { kind: 'number', type: number }
    }
    Image_Voronoi_Noise_Filter: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        density: { kind: 'number', type: number }
        modulator: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
        flat: { kind: 'enum', type: Enum_ttN_xyPlot_output_individuals }
        RGB_output: { kind: 'enum', type: Enum_ttN_xyPlot_output_individuals }
    }
    KSampler_$1WAS$2: {
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        denoise: { kind: 'number', type: number }
    }
    KSampler_Cycle: {
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        tiled_vae: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        latent_upscale: { kind: 'enum', type: Enum_KSampler_Cycle_latent_upscale }
        upscale_factor: { kind: 'number', type: number }
        upscale_cycles: { kind: 'number', type: number }
        starting_denoise: { kind: 'number', type: number }
        cycle_denoise: { kind: 'number', type: number }
        scale_denoise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        scale_sampling: { kind: 'enum', type: Enum_SEGSUpscaler_resampling_method }
        secondary_start_cycle: { kind: 'number', type: number }
        pos_add_mode: { kind: 'enum', type: Enum_KSampler_Cycle_pos_add_mode }
        pos_add_strength: { kind: 'number', type: number }
        pos_add_strength_scaling: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        pos_add_strength_cutoff: { kind: 'number', type: number }
        neg_add_mode: { kind: 'enum', type: Enum_KSampler_Cycle_pos_add_mode }
        neg_add_strength: { kind: 'number', type: number }
        neg_add_strength_scaling: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        neg_add_strength_cutoff: { kind: 'number', type: number }
        sharpen_strength: { kind: 'number', type: number }
        sharpen_radius: { kind: 'number', type: number }
        steps_scaling: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        steps_control: { kind: 'enum', type: Enum_KSampler_Cycle_pos_add_mode }
        steps_scaling_value: { kind: 'number', type: number }
        steps_cutoff: { kind: 'number', type: number }
        denoise_cutoff: { kind: 'number', type: number }
    }
    Latent_Batch: {
    }
    Latent_Noise_Injection: {
        noise_std: { kind: 'number', type: number }
    }
    Latent_Size_to_Number: {
    }
    Latent_Upscale_by_Factor_$1WAS$2: {
        mode: { kind: 'enum', type: Enum_Latent_Upscale_by_Factor_$1WAS$2_mode }
        factor: { kind: 'number', type: number }
        align: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Load_Image_Batch: {
        mode: { kind: 'enum', type: Enum_Load_Image_Batch_mode }
        seed: { kind: 'number', type: number }
        index: { kind: 'number', type: number }
        label: { kind: 'string', type: string }
        path: { kind: 'string', type: string }
        pattern: { kind: 'string', type: string }
        allow_RGBA_output: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        filename_text_extension: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Load_Text_File: {
        file_path: { kind: 'string', type: string }
        dictionary_name: { kind: 'string', type: string }
    }
    Load_Lora: {
        lora_name: { kind: 'enum', type: Enum_AV$_CheckpointModelsToParametersPipe_lora_1_name }
        strength_model: { kind: 'number', type: number }
        strength_clip: { kind: 'number', type: number }
    }
    Lora_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Masks_Add: {
    }
    Masks_Subtract: {
    }
    Mask_Arbitrary_Region: {
        size: { kind: 'number', type: number }
        threshold: { kind: 'number', type: number }
    }
    Mask_Batch_to_Mask: {
        batch_number: { kind: 'number', type: number }
    }
    Mask_Batch: {
    }
    Mask_Ceiling_Region: {
    }
    Mask_Crop_Dominant_Region: {
        padding: { kind: 'number', type: number }
    }
    Mask_Crop_Minority_Region: {
        padding: { kind: 'number', type: number }
    }
    Mask_Crop_Region: {
        padding: { kind: 'number', type: number }
        region_type: { kind: 'enum', type: Enum_Mask_Crop_Region_region_type }
    }
    Mask_Paste_Region: {
        crop_blending: { kind: 'number', type: number }
        crop_sharpening: { kind: 'number', type: number }
    }
    Mask_Dilate_Region: {
        iterations: { kind: 'number', type: number }
    }
    Mask_Dominant_Region: {
        threshold: { kind: 'number', type: number }
    }
    Mask_Erode_Region: {
        iterations: { kind: 'number', type: number }
    }
    Mask_Fill_Holes: {
    }
    Mask_Floor_Region: {
    }
    Mask_Gaussian_Region: {
        radius: { kind: 'number', type: number }
    }
    Mask_Invert: {
    }
    Mask_Minority_Region: {
        threshold: { kind: 'number', type: number }
    }
    Mask_Smooth_Region: {
        sigma: { kind: 'number', type: number }
    }
    Mask_Threshold_Region: {
        black_threshold: { kind: 'number', type: number }
        white_threshold: { kind: 'number', type: number }
    }
    Masks_Combine_Regions: {
    }
    Masks_Combine_Batch: {
    }
    MiDaS_Model_Loader: {
        midas_model: { kind: 'enum', type: Enum_MiDaS_Model_Loader_midas_model }
    }
    MiDaS_Depth_Approximation: {
        use_cpu: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        midas_type: { kind: 'enum', type: Enum_MiDaS_Model_Loader_midas_model }
        invert_depth: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    MiDaS_Mask_Image: {
        use_cpu: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        midas_model: { kind: 'enum', type: Enum_MiDaS_Mask_Image_midas_model }
        remove: { kind: 'enum', type: Enum_MiDaS_Mask_Image_remove }
        threshold: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        threshold_low: { kind: 'number', type: number }
        threshold_mid: { kind: 'number', type: number }
        threshold_high: { kind: 'number', type: number }
        smoothing: { kind: 'number', type: number }
        background_red: { kind: 'number', type: number }
        background_green: { kind: 'number', type: number }
        background_blue: { kind: 'number', type: number }
    }
    Model_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Number_Counter: {
        number_type: { kind: 'enum', type: Enum_Number_Counter_number_type }
        mode: { kind: 'enum', type: Enum_Number_Counter_mode }
        start: { kind: 'number', type: number }
        stop: { kind: 'number', type: number }
        step: { kind: 'number', type: number }
    }
    Number_Operation: {
        operation: { kind: 'enum', type: Enum_Number_Operation_operation }
    }
    Number_to_Float: {
    }
    Number_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Number_Input_Condition: {
        return_boolean: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        comparison: { kind: 'enum', type: Enum_Number_Input_Condition_comparison }
    }
    Number_Multiple_Of: {
        multiple: { kind: 'number', type: number }
    }
    Number_PI: {
    }
    Number_to_Int: {
    }
    Number_to_Seed: {
    }
    Number_to_String: {
    }
    Number_to_Text: {
    }
    Boolean_To_Text: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Prompt_Styles_Selector: {
        style: { kind: 'enum', type: Enum_Prompt_Styles_Selector_style }
    }
    Prompt_Multiple_Styles_Selector: {
        style1: { kind: 'enum', type: Enum_Prompt_Styles_Selector_style }
        style2: { kind: 'enum', type: Enum_Prompt_Styles_Selector_style }
        style3: { kind: 'enum', type: Enum_Prompt_Styles_Selector_style }
        style4: { kind: 'enum', type: Enum_Prompt_Styles_Selector_style }
    }
    Random_Number: {
        number_type: { kind: 'enum', type: Enum_Constant_Number_number_type }
        minimum: { kind: 'number', type: number }
        maximum: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    Save_Text_File: {
        text: { kind: 'string', type: string }
        path: { kind: 'string', type: string }
        filename_prefix: { kind: 'string', type: string }
        filename_delimiter: { kind: 'string', type: string }
        filename_number_padding: { kind: 'number', type: number }
        file_extension: { kind: 'string', type: string }
        encoding: { kind: 'string', type: string }
        filename_suffix: { kind: 'string', type: string }
    }
    Seed: {
        seed: { kind: 'number', type: number }
    }
    Tensor_Batch_to_Image: {
        batch_image_number: { kind: 'number', type: number }
    }
    BLIP_Analyze_Image: {
        mode: { kind: 'enum', type: Enum_BLIP_Analyze_Image_mode }
        question: { kind: 'string', type: string }
        min_length: { kind: 'number', type: number }
        max_length: { kind: 'number', type: number }
        num_beams: { kind: 'number', type: number }
        no_repeat_ngram_size: { kind: 'number', type: number }
        early_stopping: { kind: 'boolean', type: boolean }
    }
    SAM_Model_Loader: {
        model_size: { kind: 'enum', type: Enum_SAM_Model_Loader_model_size }
    }
    SAM_Parameters: {
        points: { kind: 'string', type: string }
        labels: { kind: 'string', type: string }
    }
    SAM_Parameters_Combine: {
    }
    SAM_Image_Mask: {
    }
    Samples_Passthrough_$1Stat_System$2: {
    }
    String_to_Text: {
        string: { kind: 'string', type: string }
    }
    Image_Bounds: {
    }
    Inset_Image_Bounds: {
        inset_left: { kind: 'number', type: number }
        inset_right: { kind: 'number', type: number }
        inset_top: { kind: 'number', type: number }
        inset_bottom: { kind: 'number', type: number }
    }
    Bounded_Image_Blend: {
        blend_factor: { kind: 'number', type: number }
        feathering: { kind: 'number', type: number }
    }
    Bounded_Image_Blend_with_Mask: {
        blend_factor: { kind: 'number', type: number }
        feathering: { kind: 'number', type: number }
    }
    Bounded_Image_Crop: {
    }
    Bounded_Image_Crop_with_Mask: {
        padding_left: { kind: 'number', type: number }
        padding_right: { kind: 'number', type: number }
        padding_top: { kind: 'number', type: number }
        padding_bottom: { kind: 'number', type: number }
    }
    Image_Bounds_to_Console: {
        label: { kind: 'string', type: string }
    }
    Text_Dictionary_Update: {
    }
    Text_Dictionary_Get: {
        key: { kind: 'string', type: string }
        default_value: { kind: 'string', type: string }
    }
    Text_Dictionary_Convert: {
        dictionary_text: { kind: 'string', type: string }
    }
    Text_Dictionary_New: {
        key_1: { kind: 'string', type: string }
        value_1: { kind: 'string', type: string }
        key_2: { kind: 'string', type: string }
        value_2: { kind: 'string', type: string }
        key_3: { kind: 'string', type: string }
        value_3: { kind: 'string', type: string }
        key_4: { kind: 'string', type: string }
        value_4: { kind: 'string', type: string }
        key_5: { kind: 'string', type: string }
        value_5: { kind: 'string', type: string }
    }
    Text_Dictionary_Keys: {
    }
    Text_Dictionary_To_Text: {
    }
    Text_Add_Tokens: {
        tokens: { kind: 'string', type: string }
        print_current_tokens: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Text_Add_Token_by_Input: {
        token_name: { kind: 'string', type: string }
        token_value: { kind: 'string', type: string }
        print_current_tokens: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
    }
    Text_Compare: {
        text_a: { kind: 'string', type: string }
        text_b: { kind: 'string', type: string }
        mode: { kind: 'enum', type: Enum_Text_Compare_mode }
        tolerance: { kind: 'number', type: number }
    }
    Text_Concatenate: {
        delimiter: { kind: 'string', type: string }
        clean_whitespace: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        text_a: { kind: 'string', type: string }
        text_b: { kind: 'string', type: string }
        text_c: { kind: 'string', type: string }
        text_d: { kind: 'string', type: string }
    }
    Text_File_History_Loader: {
        file: { kind: 'enum', type: Enum_Text_File_History_Loader_file }
        dictionary_name: { kind: 'string', type: string }
    }
    Text_Find_and_Replace_by_Dictionary: {
        text: { kind: 'string', type: string }
        replacement_key: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
    }
    Text_Find_and_Replace_Input: {
        text: { kind: 'string', type: string }
        find: { kind: 'string', type: string }
        replace: { kind: 'string', type: string }
    }
    Text_Find_and_Replace: {
        text: { kind: 'string', type: string }
        find: { kind: 'string', type: string }
        replace: { kind: 'string', type: string }
    }
    Text_Find: {
        text: { kind: 'string', type: string }
        substring: { kind: 'string', type: string }
        pattern: { kind: 'string', type: string }
    }
    Text_Input_Switch: {
        text_a: { kind: 'string', type: string }
        text_b: { kind: 'string', type: string }
        boolean: { kind: 'boolean', type: boolean }
    }
    Text_List: {
        text_a: { kind: 'string', type: string }
        text_b: { kind: 'string', type: string }
        text_c: { kind: 'string', type: string }
        text_d: { kind: 'string', type: string }
        text_e: { kind: 'string', type: string }
        text_f: { kind: 'string', type: string }
        text_g: { kind: 'string', type: string }
    }
    Text_List_Concatenate: {
    }
    Text_List_to_Text: {
        delimiter: { kind: 'string', type: string }
    }
    Text_Load_Line_From_File: {
        file_path: { kind: 'string', type: string }
        dictionary_name: { kind: 'string', type: string }
        label: { kind: 'string', type: string }
        mode: { kind: 'enum', type: Enum_Text_Load_Line_From_File_mode }
        index: { kind: 'number', type: number }
        multiline_text: { kind: 'string', type: string }
    }
    Text_Multiline: {
        text: { kind: 'string', type: string }
    }
    Text_Multiline_$1Code_Compatible$2: {
        text: { kind: 'string', type: string }
    }
    Text_Parse_A1111_Embeddings: {
        text: { kind: 'string', type: string }
    }
    Text_Parse_Noodle_Soup_Prompts: {
        mode: { kind: 'enum', type: Enum_CLIPTextEncode_$1NSP$2_mode }
        noodle_key: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        text: { kind: 'string', type: string }
    }
    Text_Parse_Tokens: {
        text: { kind: 'string', type: string }
    }
    Text_Random_Line: {
        text: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
    }
    Text_Random_Prompt: {
        search_seed: { kind: 'string', type: string }
    }
    Text_String: {
        text: { kind: 'string', type: string }
        text_b: { kind: 'string', type: string }
        text_c: { kind: 'string', type: string }
        text_d: { kind: 'string', type: string }
    }
    Text_Contains: {
        text: { kind: 'string', type: string }
        sub_text: { kind: 'string', type: string }
        case_insensitive: { kind: 'boolean', type: boolean }
    }
    Text_Shuffle: {
        text: { kind: 'string', type: string }
        separator: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
    }
    Text_Sort: {
        text: { kind: 'string', type: string }
        separator: { kind: 'string', type: string }
    }
    Text_to_Conditioning: {
        text: { kind: 'string', type: string }
    }
    Text_to_Console: {
        text: { kind: 'string', type: string }
        label: { kind: 'string', type: string }
    }
    Text_to_Number: {
        text: { kind: 'string', type: string }
    }
    Text_to_String: {
        text: { kind: 'string', type: string }
    }
    Text_String_Truncate: {
        text: { kind: 'string', type: string }
        truncate_by: { kind: 'enum', type: Enum_Text_String_Truncate_truncate_by }
        truncate_from: { kind: 'enum', type: Enum_Text_String_Truncate_truncate_from }
        truncate_to: { kind: 'number', type: number }
        text_b: { kind: 'string', type: string }
        text_c: { kind: 'string', type: string }
        text_d: { kind: 'string', type: string }
    }
    True_Random$5org_Number_Generator: {
        api_key: { kind: 'string', type: string }
        minimum: { kind: 'number', type: number }
        maximum: { kind: 'number', type: number }
        mode: { kind: 'enum', type: Enum_LatentBatchSeedBehavior_seed_behavior }
    }
    unCLIP_Checkpoint_Loader: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    Upscale_Model_Loader: {
        model_name: { kind: 'enum', type: Enum_UpscaleModelLoader_model_name }
    }
    Upscale_Model_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Write_to_GIF: {
        transition_frames: { kind: 'number', type: number }
        image_delay_ms: { kind: 'number', type: number }
        duration_ms: { kind: 'number', type: number }
        loops: { kind: 'number', type: number }
        max_size: { kind: 'number', type: number }
        output_path: { kind: 'string', type: string }
        filename: { kind: 'string', type: string }
    }
    Write_to_Video: {
        transition_frames: { kind: 'number', type: number }
        image_delay_sec: { kind: 'number', type: number }
        fps: { kind: 'number', type: number }
        max_size: { kind: 'number', type: number }
        output_path: { kind: 'string', type: string }
        filename: { kind: 'string', type: string }
        codec: { kind: 'enum', type: Enum_Create_Video_from_Path_codec }
    }
    VAE_Input_Switch: {
        boolean: { kind: 'boolean', type: boolean }
    }
    Video_Dump_Frames: {
        video_path: { kind: 'string', type: string }
        output_path: { kind: 'string', type: string }
        prefix: { kind: 'string', type: string }
        filenumber_digits: { kind: 'number', type: number }
        extension: { kind: 'enum', type: Enum_Video_Dump_Frames_extension }
    }
    CLIPSEG2: {
        text: { kind: 'string', type: string }
        use_cuda: { kind: 'boolean', type: boolean }
    }
    CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2: {
        mode: { kind: 'enum', type: Enum_CLIPTextEncode_$1NSP$2_mode }
        noodle_key: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        weight_interpretation: { kind: 'enum', type: Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation }
        text: { kind: 'string', type: string }
    }
    ConditioningBlend: {
        blending_mode: { kind: 'enum', type: Enum_ConditioningBlend_blending_mode }
        blending_strength: { kind: 'number', type: number }
        seed: { kind: 'number', type: number }
    }
    DebugInput: {
    }
    VAEEncodeForInpaint_$1WAS$2: {
        mask_offset: { kind: 'number', type: number }
    }
    VividSharpen: {
        radius: { kind: 'number', type: number }
        strength: { kind: 'number', type: number }
    }
    CLIPTextEncodeList: {
        token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        weight_interpretation: { kind: 'enum', type: Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation }
        text: { kind: 'string', type: string }
    }
    CLIPTextEncodeSequence2: {
        token_normalization: { kind: 'enum', type: Enum_WildcardEncode_$3$3Inspire_token_normalization }
        weight_interpretation: { kind: 'enum', type: Enum_BNK$_CutoffRegionsToConditioning$_ADV_weight_interpretation }
        cond_keyframes_type: { kind: 'enum', type: Enum_CLIPTextEncodeSequence2_cond_keyframes_type }
        frame_count: { kind: 'number', type: number }
        text: { kind: 'string', type: string }
    }
    KSamplerSeq: {
        seed: { kind: 'number', type: number }
        seed_mode_seq: { kind: 'enum', type: Enum_KSamplerSeq_seed_mode_seq }
        alternate_values: { kind: 'boolean', type: boolean }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        sequence_loop_count: { kind: 'number', type: number }
        use_conditioning_slerp: { kind: 'boolean', type: boolean }
        cond_slerp_strength: { kind: 'number', type: number }
        use_latent_interpolation: { kind: 'boolean', type: boolean }
        latent_interpolation_mode: { kind: 'enum', type: Enum_KSamplerSeq_latent_interpolation_mode }
        latent_interp_strength: { kind: 'number', type: number }
        denoise_start: { kind: 'number', type: number }
        denoise_seq: { kind: 'number', type: number }
        unsample_latents: { kind: 'boolean', type: boolean }
    }
    KSamplerSeq2: {
        seed: { kind: 'number', type: number }
        seed_mode_seq: { kind: 'enum', type: Enum_KSamplerSeq_seed_mode_seq }
        alternate_values: { kind: 'boolean', type: boolean }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        frame_count: { kind: 'number', type: number }
        cond_keyframes: { kind: 'number', type: number }
        use_conditioning_slerp: { kind: 'boolean', type: boolean }
        cond_slerp_strength: { kind: 'number', type: number }
        use_latent_interpolation: { kind: 'boolean', type: boolean }
        latent_interpolation_mode: { kind: 'enum', type: Enum_KSamplerSeq_latent_interpolation_mode }
        latent_interp_strength: { kind: 'number', type: number }
        denoise_start: { kind: 'number', type: number }
        denoise_seq: { kind: 'number', type: number }
        unsample_latents: { kind: 'boolean', type: boolean }
        inject_noise: { kind: 'boolean', type: boolean }
        noise_strength: { kind: 'number', type: number }
        denoise_sine: { kind: 'boolean', type: boolean }
        denoise_max: { kind: 'number', type: number }
        seed_keying: { kind: 'boolean', type: boolean }
        seed_keying_mode: { kind: 'enum', type: Enum_KSamplerSeq2_seed_keying_mode }
        seed_divisor: { kind: 'number', type: number }
    }
    BLVAEEncode: {
        tiled: { kind: 'boolean', type: boolean }
        tile_size: { kind: 'number', type: number }
        store_or_load_latent: { kind: 'boolean', type: boolean }
        remove_latent_on_load: { kind: 'boolean', type: boolean }
        delete_workflow_latent: { kind: 'boolean', type: boolean }
    }
    SaveImageWebsocket: {
    }
    Checkpoint_Loader_w$3Name_$1WLSH$2: {
        ckpt_name: { kind: 'enum', type: Enum_CheckpointLoaderSimple_ckpt_name }
    }
    KSamplerAdvanced_$1WLSH$2: {
        add_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        seed: { kind: 'number', type: number }
        steps: { kind: 'number', type: number }
        cfg: { kind: 'number', type: number }
        sampler_name: { kind: 'enum', type: Enum_KSampler_sampler_name }
        scheduler: { kind: 'enum', type: Enum_KSampler_scheduler }
        start_at_step: { kind: 'number', type: number }
        end_at_step: { kind: 'number', type: number }
        return_with_leftover_noise: { kind: 'enum', type: Enum_KSamplerAdvanced_add_noise }
        denoise: { kind: 'number', type: number }
    }
    CLIP_Positive$7Negative_$1WLSH$2: {
        positive_text: { kind: 'string', type: string }
        negative_text: { kind: 'string', type: string }
    }
    CLIP_Positive$7Negative_w$3Text_$1WLSH$2: {
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
    }
    CLIP_Positive$7Negative_XL_$1WLSH$2: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop_w: { kind: 'number', type: number }
        crop_h: { kind: 'number', type: number }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        positive_g: { kind: 'string', type: string }
        positive_l: { kind: 'string', type: string }
        negative_g: { kind: 'string', type: string }
        negative_l: { kind: 'string', type: string }
    }
    CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        crop_w: { kind: 'number', type: number }
        crop_h: { kind: 'number', type: number }
        target_width: { kind: 'number', type: number }
        target_height: { kind: 'number', type: number }
        positive_g: { kind: 'string', type: string }
        positive_l: { kind: 'string', type: string }
        negative_g: { kind: 'string', type: string }
        negative_l: { kind: 'string', type: string }
    }
    CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2: {
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
        conditioner: { kind: 'enum', type: Enum_CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2_conditioner }
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
    }
    Empty_Latent_by_Pixels_$1WLSH$2: {
        aspect: { kind: 'enum', type: Enum_Empty_Latent_by_Pixels_$1WLSH$2_aspect }
        direction: { kind: 'enum', type: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction }
        megapixels: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    Empty_Latent_by_Ratio_$1WLSH$2: {
        aspect: { kind: 'enum', type: Enum_Empty_Latent_by_Ratio_$1WLSH$2_aspect }
        direction: { kind: 'enum', type: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction }
        shortside: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    Empty_Latent_by_Size_$1WLSH$2: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        batch_size: { kind: 'number', type: number }
    }
    SDXL_Quick_Empty_Latent_$1WLSH$2: {
        resolution: { kind: 'enum', type: Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution }
        direction: { kind: 'enum', type: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction }
        batch_size: { kind: 'number', type: number }
    }
    Image_Load_with_Metadata_$1WLSH$2: {
        verbose: { kind: 'enum', type: Enum_ImageDrawRectangleRounded_top_left_corner }
        image: { kind: 'enum', type: Enum_LoadImage_image }
    }
    Grayscale_Image_$1WLSH$2: {
    }
    Generate_Border_Mask_$1WLSH$2: {
        direction: { kind: 'enum', type: Enum_ImageConcanate_direction }
        pixels: { kind: 'number', type: number }
        overlap: { kind: 'number', type: number }
    }
    Outpaint_to_Image_$1WLSH$2: {
        direction: { kind: 'enum', type: Enum_ImageConcanate_direction }
        pixels: { kind: 'number', type: number }
        mask_padding: { kind: 'number', type: number }
    }
    VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2: {
        mask_padding: { kind: 'number', type: number }
    }
    Image_Scale_By_Factor_$1WLSH$2: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscaleFactor_$_O_upscale_method }
        factor: { kind: 'number', type: number }
    }
    Image_Scale_by_Shortside_$1WLSH$2: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscaleFactor_$_O_upscale_method }
        shortside: { kind: 'number', type: number }
    }
    SDXL_Quick_Image_Scale_$1WLSH$2: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscaleFactor_$_O_upscale_method }
        resolution: { kind: 'enum', type: Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution }
        direction: { kind: 'enum', type: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction }
        crop: { kind: 'enum', type: Enum_LatentUpscale_crop }
    }
    Upscale_by_Factor_with_Model_$1WLSH$2: {
        upscale_method: { kind: 'enum', type: Enum_LatentUpscaleFactor_$_O_upscale_method }
        factor: { kind: 'number', type: number }
    }
    Multiply_Integer_$1WLSH$2: {
        number: { kind: 'number', type: number }
        multiplier: { kind: 'number', type: number }
    }
    Quick_Resolution_Multiply_$1WLSH$2: {
        width: { kind: 'number', type: number }
        height: { kind: 'number', type: number }
        multiplier: { kind: 'number', type: number }
    }
    Resolutions_by_Ratio_$1WLSH$2: {
        aspect: { kind: 'enum', type: Enum_Resolutions_by_Ratio_$1WLSH$2_aspect }
        direction: { kind: 'enum', type: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction }
        shortside: { kind: 'number', type: number }
    }
    Seed_to_Number_$1WLSH$2: {
    }
    Seed_and_Int_$1WLSH$2: {
        seed: { kind: 'number', type: number }
    }
    SDXL_Steps_$1WLSH$2: {
        precondition: { kind: 'number', type: number }
        base: { kind: 'number', type: number }
        total: { kind: 'number', type: number }
    }
    SDXL_Resolutions_$1WLSH$2: {
        resolution: { kind: 'enum', type: Enum_SDXL_Quick_Empty_Latent_$1WLSH$2_resolution }
        direction: { kind: 'enum', type: Enum_Empty_Latent_by_Pixels_$1WLSH$2_direction }
    }
    Build_Filename_String_$1WLSH$2: {
        filename: { kind: 'string', type: string }
        modelname: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        time_format: { kind: 'string', type: string }
    }
    Time_String_$1WLSH$2: {
        style: { kind: 'enum', type: Enum_Time_String_$1WLSH$2_style }
    }
    Simple_Pattern_Replace_$1WLSH$2: {
        input_string: { kind: 'string', type: string }
        list_string: { kind: 'string', type: string }
        pattern: { kind: 'string', type: string }
        delimiter: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
    }
    Simple_String_Combine_$1WLSH$2: {
        addition: { kind: 'string', type: string }
        placement: { kind: 'enum', type: Enum_Simple_String_Combine_$1WLSH$2_placement }
        separator: { kind: 'enum', type: Enum_Simple_String_Combine_$1WLSH$2_separator }
        input_string: { kind: 'string', type: string }
    }
    Prompt_Weight_$1WLSH$2: {
        prompt: { kind: 'string', type: string }
        weight: { kind: 'number', type: number }
    }
    Image_Save_with_Prompt_$1WLSH$2: {
        filename: { kind: 'string', type: string }
        path: { kind: 'string', type: string }
        extension: { kind: 'enum', type: Enum_Image_Save_with_Prompt_$1WLSH$2_extension }
        quality: { kind: 'number', type: number }
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        modelname: { kind: 'string', type: string }
        counter: { kind: 'number', type: number }
        time_format: { kind: 'string', type: string }
    }
    Image_Save_with_Prompt$3Info_$1WLSH$2: {
        filename: { kind: 'string', type: string }
        path: { kind: 'string', type: string }
        extension: { kind: 'enum', type: Enum_Image_Save_with_Prompt_$1WLSH$2_extension }
        quality: { kind: 'number', type: number }
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        modelname: { kind: 'string', type: string }
        counter: { kind: 'number', type: number }
        time_format: { kind: 'string', type: string }
    }
    Image_Save_with_Prompt_File_$1WLSH$2: {
        filename: { kind: 'string', type: string }
        path: { kind: 'string', type: string }
        extension: { kind: 'enum', type: Enum_Image_Save_with_Prompt_$1WLSH$2_extension }
        quality: { kind: 'number', type: number }
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        modelname: { kind: 'string', type: string }
        counter: { kind: 'number', type: number }
        time_format: { kind: 'string', type: string }
    }
    Image_Save_with_Prompt$3Info_File_$1WLSH$2: {
        filename: { kind: 'string', type: string }
        path: { kind: 'string', type: string }
        extension: { kind: 'enum', type: Enum_Image_Save_with_Prompt_$1WLSH$2_extension }
        quality: { kind: 'number', type: number }
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        modelname: { kind: 'string', type: string }
        counter: { kind: 'number', type: number }
        time_format: { kind: 'string', type: string }
    }
    Save_Prompt_$1WLSH$2: {
        filename: { kind: 'string', type: string }
        path: { kind: 'string', type: string }
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
        modelname: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        counter: { kind: 'number', type: number }
        time_format: { kind: 'string', type: string }
    }
    Save_Prompt$3Info_$1WLSH$2: {
        filename: { kind: 'string', type: string }
        path: { kind: 'string', type: string }
        positive: { kind: 'string', type: string }
        negative: { kind: 'string', type: string }
        modelname: { kind: 'string', type: string }
        seed: { kind: 'number', type: number }
        counter: { kind: 'number', type: number }
        time_format: { kind: 'string', type: string }
    }
    Save_Positive_Prompt$1WLSH$2: {
        filename: { kind: 'string', type: string }
        path: { kind: 'string', type: string }
        positive: { kind: 'string', type: string }
    }
    UnknownNodeXX: {
    }
}

// 9. INDEX -------------------------------
export type Schemas = {
    KSampler: ComfyNodeSchemaJSON,
    CheckpointLoaderSimple: ComfyNodeSchemaJSON,
    CLIPTextEncode: ComfyNodeSchemaJSON,
    CLIPSetLastLayer: ComfyNodeSchemaJSON,
    VAEDecode: ComfyNodeSchemaJSON,
    VAEEncode: ComfyNodeSchemaJSON,
    VAEEncodeForInpaint: ComfyNodeSchemaJSON,
    VAELoader: ComfyNodeSchemaJSON,
    EmptyLatentImage: ComfyNodeSchemaJSON,
    LatentUpscale: ComfyNodeSchemaJSON,
    LatentUpscaleBy: ComfyNodeSchemaJSON,
    LatentFromBatch: ComfyNodeSchemaJSON,
    RepeatLatentBatch: ComfyNodeSchemaJSON,
    SaveImage: ComfyNodeSchemaJSON,
    PreviewImage: ComfyNodeSchemaJSON,
    LoadImage: ComfyNodeSchemaJSON,
    LoadImageMask: ComfyNodeSchemaJSON,
    ImageScale: ComfyNodeSchemaJSON,
    ImageScaleBy: ComfyNodeSchemaJSON,
    ImageInvert: ComfyNodeSchemaJSON,
    ImageBatch: ComfyNodeSchemaJSON,
    ImagePadForOutpaint: ComfyNodeSchemaJSON,
    EmptyImage: ComfyNodeSchemaJSON,
    ConditioningAverage: ComfyNodeSchemaJSON,
    ConditioningCombine: ComfyNodeSchemaJSON,
    ConditioningConcat: ComfyNodeSchemaJSON,
    ConditioningSetArea: ComfyNodeSchemaJSON,
    ConditioningSetAreaPercentage: ComfyNodeSchemaJSON,
    ConditioningSetAreaStrength: ComfyNodeSchemaJSON,
    ConditioningSetMask: ComfyNodeSchemaJSON,
    KSamplerAdvanced: ComfyNodeSchemaJSON,
    SetLatentNoiseMask: ComfyNodeSchemaJSON,
    LatentComposite: ComfyNodeSchemaJSON,
    LatentBlend: ComfyNodeSchemaJSON,
    LatentRotate: ComfyNodeSchemaJSON,
    LatentFlip: ComfyNodeSchemaJSON,
    LatentCrop: ComfyNodeSchemaJSON,
    LoraLoader: ComfyNodeSchemaJSON,
    CLIPLoader: ComfyNodeSchemaJSON,
    UNETLoader: ComfyNodeSchemaJSON,
    DualCLIPLoader: ComfyNodeSchemaJSON,
    CLIPVisionEncode: ComfyNodeSchemaJSON,
    StyleModelApply: ComfyNodeSchemaJSON,
    unCLIPConditioning: ComfyNodeSchemaJSON,
    ControlNetApply: ComfyNodeSchemaJSON,
    ControlNetApplyAdvanced: ComfyNodeSchemaJSON,
    ControlNetLoader: ComfyNodeSchemaJSON,
    DiffControlNetLoader: ComfyNodeSchemaJSON,
    StyleModelLoader: ComfyNodeSchemaJSON,
    CLIPVisionLoader: ComfyNodeSchemaJSON,
    VAEDecodeTiled: ComfyNodeSchemaJSON,
    VAEEncodeTiled: ComfyNodeSchemaJSON,
    unCLIPCheckpointLoader: ComfyNodeSchemaJSON,
    GLIGENLoader: ComfyNodeSchemaJSON,
    GLIGENTextBoxApply: ComfyNodeSchemaJSON,
    InpaintModelConditioning: ComfyNodeSchemaJSON,
    CheckpointLoader: ComfyNodeSchemaJSON,
    DiffusersLoader: ComfyNodeSchemaJSON,
    LoadLatent: ComfyNodeSchemaJSON,
    SaveLatent: ComfyNodeSchemaJSON,
    ConditioningZeroOut: ComfyNodeSchemaJSON,
    ConditioningSetTimestepRange: ComfyNodeSchemaJSON,
    LoraLoaderModelOnly: ComfyNodeSchemaJSON,
    LatentAdd: ComfyNodeSchemaJSON,
    LatentSubtract: ComfyNodeSchemaJSON,
    LatentMultiply: ComfyNodeSchemaJSON,
    LatentInterpolate: ComfyNodeSchemaJSON,
    LatentBatch: ComfyNodeSchemaJSON,
    LatentBatchSeedBehavior: ComfyNodeSchemaJSON,
    LatentApplyOperation: ComfyNodeSchemaJSON,
    LatentApplyOperationCFG: ComfyNodeSchemaJSON,
    LatentOperationTonemapReinhard: ComfyNodeSchemaJSON,
    LatentOperationSharpen: ComfyNodeSchemaJSON,
    HypernetworkLoader: ComfyNodeSchemaJSON,
    UpscaleModelLoader: ComfyNodeSchemaJSON,
    ImageUpscaleWithModel: ComfyNodeSchemaJSON,
    ImageBlend: ComfyNodeSchemaJSON,
    ImageBlur: ComfyNodeSchemaJSON,
    ImageQuantize: ComfyNodeSchemaJSON,
    ImageSharpen: ComfyNodeSchemaJSON,
    ImageScaleToTotalPixels: ComfyNodeSchemaJSON,
    LatentCompositeMasked: ComfyNodeSchemaJSON,
    ImageCompositeMasked: ComfyNodeSchemaJSON,
    MaskToImage: ComfyNodeSchemaJSON,
    ImageToMask: ComfyNodeSchemaJSON,
    ImageColorToMask: ComfyNodeSchemaJSON,
    SolidMask: ComfyNodeSchemaJSON,
    InvertMask: ComfyNodeSchemaJSON,
    CropMask: ComfyNodeSchemaJSON,
    MaskComposite: ComfyNodeSchemaJSON,
    FeatherMask: ComfyNodeSchemaJSON,
    GrowMask: ComfyNodeSchemaJSON,
    ThresholdMask: ComfyNodeSchemaJSON,
    PorterDuffImageComposite: ComfyNodeSchemaJSON,
    SplitImageWithAlpha: ComfyNodeSchemaJSON,
    JoinImageWithAlpha: ComfyNodeSchemaJSON,
    RebatchLatents: ComfyNodeSchemaJSON,
    RebatchImages: ComfyNodeSchemaJSON,
    ModelMergeSimple: ComfyNodeSchemaJSON,
    ModelMergeBlocks: ComfyNodeSchemaJSON,
    ModelMergeSubtract: ComfyNodeSchemaJSON,
    ModelMergeAdd: ComfyNodeSchemaJSON,
    CheckpointSave: ComfyNodeSchemaJSON,
    CLIPMergeSimple: ComfyNodeSchemaJSON,
    CLIPMergeSubtract: ComfyNodeSchemaJSON,
    CLIPMergeAdd: ComfyNodeSchemaJSON,
    CLIPSave: ComfyNodeSchemaJSON,
    VAESave: ComfyNodeSchemaJSON,
    ModelSave: ComfyNodeSchemaJSON,
    TomePatchModel: ComfyNodeSchemaJSON,
    CLIPTextEncodeSDXLRefiner: ComfyNodeSchemaJSON,
    CLIPTextEncodeSDXL: ComfyNodeSchemaJSON,
    Canny: ComfyNodeSchemaJSON,
    FreeU: ComfyNodeSchemaJSON,
    FreeU$_V2: ComfyNodeSchemaJSON,
    SamplerCustom: ComfyNodeSchemaJSON,
    BasicScheduler: ComfyNodeSchemaJSON,
    KarrasScheduler: ComfyNodeSchemaJSON,
    ExponentialScheduler: ComfyNodeSchemaJSON,
    PolyexponentialScheduler: ComfyNodeSchemaJSON,
    LaplaceScheduler: ComfyNodeSchemaJSON,
    VPScheduler: ComfyNodeSchemaJSON,
    BetaSamplingScheduler: ComfyNodeSchemaJSON,
    SDTurboScheduler: ComfyNodeSchemaJSON,
    KSamplerSelect: ComfyNodeSchemaJSON,
    SamplerEulerAncestral: ComfyNodeSchemaJSON,
    SamplerEulerAncestralCFGPP: ComfyNodeSchemaJSON,
    SamplerLMS: ComfyNodeSchemaJSON,
    SamplerDPMPP$_3M$_SDE: ComfyNodeSchemaJSON,
    SamplerDPMPP$_2M$_SDE: ComfyNodeSchemaJSON,
    SamplerDPMPP$_SDE: ComfyNodeSchemaJSON,
    SamplerDPMPP$_2S$_Ancestral: ComfyNodeSchemaJSON,
    SamplerDPMAdaptative: ComfyNodeSchemaJSON,
    SplitSigmas: ComfyNodeSchemaJSON,
    SplitSigmasDenoise: ComfyNodeSchemaJSON,
    FlipSigmas: ComfyNodeSchemaJSON,
    CFGGuider: ComfyNodeSchemaJSON,
    DualCFGGuider: ComfyNodeSchemaJSON,
    BasicGuider: ComfyNodeSchemaJSON,
    RandomNoise: ComfyNodeSchemaJSON,
    DisableNoise: ComfyNodeSchemaJSON,
    AddNoise: ComfyNodeSchemaJSON,
    SamplerCustomAdvanced: ComfyNodeSchemaJSON,
    HyperTile: ComfyNodeSchemaJSON,
    ModelSamplingDiscrete: ComfyNodeSchemaJSON,
    ModelSamplingContinuousEDM: ComfyNodeSchemaJSON,
    ModelSamplingContinuousV: ComfyNodeSchemaJSON,
    ModelSamplingStableCascade: ComfyNodeSchemaJSON,
    ModelSamplingSD3: ComfyNodeSchemaJSON,
    ModelSamplingAuraFlow: ComfyNodeSchemaJSON,
    ModelSamplingFlux: ComfyNodeSchemaJSON,
    RescaleCFG: ComfyNodeSchemaJSON,
    PatchModelAddDownscale: ComfyNodeSchemaJSON,
    ImageCrop: ComfyNodeSchemaJSON,
    RepeatImageBatch: ComfyNodeSchemaJSON,
    ImageFromBatch: ComfyNodeSchemaJSON,
    SaveAnimatedWEBP: ComfyNodeSchemaJSON,
    SaveAnimatedPNG: ComfyNodeSchemaJSON,
    ImageOnlyCheckpointLoader: ComfyNodeSchemaJSON,
    SVD$_img2vid$_Conditioning: ComfyNodeSchemaJSON,
    VideoLinearCFGGuidance: ComfyNodeSchemaJSON,
    VideoTriangleCFGGuidance: ComfyNodeSchemaJSON,
    ImageOnlyCheckpointSave: ComfyNodeSchemaJSON,
    SelfAttentionGuidance: ComfyNodeSchemaJSON,
    PerpNeg: ComfyNodeSchemaJSON,
    PerpNegGuider: ComfyNodeSchemaJSON,
    StableZero123$_Conditioning: ComfyNodeSchemaJSON,
    StableZero123$_Conditioning$_Batched: ComfyNodeSchemaJSON,
    SV3D$_Conditioning: ComfyNodeSchemaJSON,
    SD$_4XUpscale$_Conditioning: ComfyNodeSchemaJSON,
    PhotoMakerLoader: ComfyNodeSchemaJSON,
    PhotoMakerEncode: ComfyNodeSchemaJSON,
    CLIPTextEncodeControlnet: ComfyNodeSchemaJSON,
    Morphology: ComfyNodeSchemaJSON,
    StableCascade$_EmptyLatentImage: ComfyNodeSchemaJSON,
    StableCascade$_StageB$_Conditioning: ComfyNodeSchemaJSON,
    StableCascade$_StageC$_VAEEncode: ComfyNodeSchemaJSON,
    StableCascade$_SuperResolutionControlnet: ComfyNodeSchemaJSON,
    DifferentialDiffusion: ComfyNodeSchemaJSON,
    InstructPixToPixConditioning: ComfyNodeSchemaJSON,
    ModelMergeSD1: ComfyNodeSchemaJSON,
    ModelMergeSD2: ComfyNodeSchemaJSON,
    ModelMergeSDXL: ComfyNodeSchemaJSON,
    ModelMergeSD3$_2B: ComfyNodeSchemaJSON,
    ModelMergeFlux1: ComfyNodeSchemaJSON,
    ModelMergeSD35$_Large: ComfyNodeSchemaJSON,
    PerturbedAttentionGuidance: ComfyNodeSchemaJSON,
    AlignYourStepsScheduler: ComfyNodeSchemaJSON,
    UNetSelfAttentionMultiply: ComfyNodeSchemaJSON,
    UNetCrossAttentionMultiply: ComfyNodeSchemaJSON,
    CLIPAttentionMultiply: ComfyNodeSchemaJSON,
    UNetTemporalAttentionMultiply: ComfyNodeSchemaJSON,
    SamplerLCMUpscale: ComfyNodeSchemaJSON,
    SamplerEulerCFGpp: ComfyNodeSchemaJSON,
    WebcamCapture: ComfyNodeSchemaJSON,
    EmptyLatentAudio: ComfyNodeSchemaJSON,
    VAEEncodeAudio: ComfyNodeSchemaJSON,
    VAEDecodeAudio: ComfyNodeSchemaJSON,
    SaveAudio: ComfyNodeSchemaJSON,
    LoadAudio: ComfyNodeSchemaJSON,
    PreviewAudio: ComfyNodeSchemaJSON,
    TripleCLIPLoader: ComfyNodeSchemaJSON,
    EmptySD3LatentImage: ComfyNodeSchemaJSON,
    CLIPTextEncodeSD3: ComfyNodeSchemaJSON,
    ControlNetApplySD3: ComfyNodeSchemaJSON,
    SkipLayerGuidanceSD3: ComfyNodeSchemaJSON,
    GITSScheduler: ComfyNodeSchemaJSON,
    SetUnionControlNetType: ComfyNodeSchemaJSON,
    ControlNetInpaintingAliMamaApply: ComfyNodeSchemaJSON,
    CLIPTextEncodeHunyuanDiT: ComfyNodeSchemaJSON,
    CLIPTextEncodeFlux: ComfyNodeSchemaJSON,
    FluxGuidance: ComfyNodeSchemaJSON,
    LoraSave: ComfyNodeSchemaJSON,
    TorchCompileModel: ComfyNodeSchemaJSON,
    EmptyMochiLatentVideo: ComfyNodeSchemaJSON,
    Base64ImageInput: ComfyNodeSchemaJSON,
    Base64ImageOutput: ComfyNodeSchemaJSON,
    AttentionCouple: ComfyNodeSchemaJSON,
    AttentionCoupleRegion: ComfyNodeSchemaJSON,
    AttentionCoupleRegions: ComfyNodeSchemaJSON,
    CLIPSeg: ComfyNodeSchemaJSON,
    CombineSegMasks: ComfyNodeSchemaJSON,
    CivitAI$_Lora$_Loader: ComfyNodeSchemaJSON,
    CivitAI$_Checkpoint$_Loader: ComfyNodeSchemaJSON,
    AlphaChanelAdd: ComfyNodeSchemaJSON,
    AlphaChanelAddByMask: ComfyNodeSchemaJSON,
    AlphaChanelAsMask: ComfyNodeSchemaJSON,
    AlphaChanelRestore: ComfyNodeSchemaJSON,
    AlphaChanelRemove: ComfyNodeSchemaJSON,
    ClipClamp: ComfyNodeSchemaJSON,
    ClipVisionClamp: ComfyNodeSchemaJSON,
    ClipVisionOutputClamp: ComfyNodeSchemaJSON,
    ConditioningClamp: ComfyNodeSchemaJSON,
    ControlNetClamp: ComfyNodeSchemaJSON,
    GligenClamp: ComfyNodeSchemaJSON,
    ImageClamp: ComfyNodeSchemaJSON,
    LatentClamp: ComfyNodeSchemaJSON,
    MaskClamp: ComfyNodeSchemaJSON,
    ModelClamp: ComfyNodeSchemaJSON,
    StyleModelClamp: ComfyNodeSchemaJSON,
    UpscaleModelClamp: ComfyNodeSchemaJSON,
    VaeClamp: ComfyNodeSchemaJSON,
    ImageBatchGet: ComfyNodeSchemaJSON,
    ImageBatchCopy: ComfyNodeSchemaJSON,
    ImageBatchRemove: ComfyNodeSchemaJSON,
    ImageBatchFork: ComfyNodeSchemaJSON,
    ImageBatchJoin: ComfyNodeSchemaJSON,
    ImageBatchPermute: ComfyNodeSchemaJSON,
    ImageCompositeAbsolute: ComfyNodeSchemaJSON,
    ImageCompositeAbsoluteByContainer: ComfyNodeSchemaJSON,
    ImageCompositeRelative: ComfyNodeSchemaJSON,
    ImageCompositeRelativeByContainer: ComfyNodeSchemaJSON,
    ImageContainer: ComfyNodeSchemaJSON,
    ImageContainerInheritanceAdd: ComfyNodeSchemaJSON,
    ImageContainerInheritanceScale: ComfyNodeSchemaJSON,
    ImageContainerInheritanceMax: ComfyNodeSchemaJSON,
    ImageContainerInheritanceSum: ComfyNodeSchemaJSON,
    ImageDrawArc: ComfyNodeSchemaJSON,
    ImageDrawArcByContainer: ComfyNodeSchemaJSON,
    ImageDrawChord: ComfyNodeSchemaJSON,
    ImageDrawChordByContainer: ComfyNodeSchemaJSON,
    ImageDrawEllipse: ComfyNodeSchemaJSON,
    ImageDrawEllipseByContainer: ComfyNodeSchemaJSON,
    ImageDrawLine: ComfyNodeSchemaJSON,
    ImageDrawLineByContainer: ComfyNodeSchemaJSON,
    ImageDrawPieslice: ComfyNodeSchemaJSON,
    ImageDrawPiesliceByContainer: ComfyNodeSchemaJSON,
    ImageDrawRectangle: ComfyNodeSchemaJSON,
    ImageDrawRectangleByContainer: ComfyNodeSchemaJSON,
    ImageDrawRectangleRounded: ComfyNodeSchemaJSON,
    ImageDrawRectangleRoundedByContainer: ComfyNodeSchemaJSON,
    ImageDrawPolygon: ComfyNodeSchemaJSON,
    ImageEffectsAdjustment: ComfyNodeSchemaJSON,
    ImageEffectsGrayscale: ComfyNodeSchemaJSON,
    ImageEffectsNegative: ComfyNodeSchemaJSON,
    ImageEffectsSepia: ComfyNodeSchemaJSON,
    ImageEffectsLensZoomBurst: ComfyNodeSchemaJSON,
    ImageEffectsLensChromaticAberration: ComfyNodeSchemaJSON,
    ImageEffectsLensBokeh: ComfyNodeSchemaJSON,
    ImageEffectsLensOpticAxis: ComfyNodeSchemaJSON,
    ImageEffectsLensVignette: ComfyNodeSchemaJSON,
    ImageFilterSmooth: ComfyNodeSchemaJSON,
    ImageFilterSmoothMore: ComfyNodeSchemaJSON,
    ImageFilterBlur: ComfyNodeSchemaJSON,
    ImageFilterBoxBlur: ComfyNodeSchemaJSON,
    ImageFilterGaussianBlur: ComfyNodeSchemaJSON,
    ImageFilterGaussianBlurAdvanced: ComfyNodeSchemaJSON,
    ImageFilterStackBlur: ComfyNodeSchemaJSON,
    ImageFilterMedianBlur: ComfyNodeSchemaJSON,
    ImageFilterBilateralBlur: ComfyNodeSchemaJSON,
    ImageFilterContour: ComfyNodeSchemaJSON,
    ImageFilterDetail: ComfyNodeSchemaJSON,
    ImageFilterEdgeEnhance: ComfyNodeSchemaJSON,
    ImageFilterEdgeEnhanceMore: ComfyNodeSchemaJSON,
    ImageFilterEmboss: ComfyNodeSchemaJSON,
    ImageFilterFindEdges: ComfyNodeSchemaJSON,
    ImageFilterSharpen: ComfyNodeSchemaJSON,
    ImageFilterRank: ComfyNodeSchemaJSON,
    ImageFilterMin: ComfyNodeSchemaJSON,
    ImageFilterMax: ComfyNodeSchemaJSON,
    ImageFilterMode: ComfyNodeSchemaJSON,
    ImageNoiseBeta: ComfyNodeSchemaJSON,
    ImageNoiseBinomial: ComfyNodeSchemaJSON,
    ImageNoiseBytes: ComfyNodeSchemaJSON,
    ImageNoiseGaussian: ComfyNodeSchemaJSON,
    ImageSegmentation: ComfyNodeSchemaJSON,
    ImageSegmentationCustom: ComfyNodeSchemaJSON,
    ImageSegmentationCustomAdvanced: ComfyNodeSchemaJSON,
    ImageText: ComfyNodeSchemaJSON,
    ImageTextOutlined: ComfyNodeSchemaJSON,
    ImageTextMultiline: ComfyNodeSchemaJSON,
    ImageTextMultilineOutlined: ComfyNodeSchemaJSON,
    ImageTransformResizeAbsolute: ComfyNodeSchemaJSON,
    ImageTransformResizeRelative: ComfyNodeSchemaJSON,
    ImageTransformResizeClip: ComfyNodeSchemaJSON,
    ImageTransformCropAbsolute: ComfyNodeSchemaJSON,
    ImageTransformCropRelative: ComfyNodeSchemaJSON,
    ImageTransformCropCorners: ComfyNodeSchemaJSON,
    ImageTransformPaddingAbsolute: ComfyNodeSchemaJSON,
    ImageTransformPaddingRelative: ComfyNodeSchemaJSON,
    ImageTransformRotate: ComfyNodeSchemaJSON,
    ImageTransformTranspose: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffLoRALoader: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffSamplingSettings: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffKeyframe: ComfyNodeSchemaJSON,
    ADE$_MultivalDynamic: ComfyNodeSchemaJSON,
    ADE$_MultivalDynamicFloatInput: ComfyNodeSchemaJSON,
    ADE$_MultivalDynamicFloats: ComfyNodeSchemaJSON,
    ADE$_MultivalScaledMask: ComfyNodeSchemaJSON,
    ADE$_MultivalConvertToMask: ComfyNodeSchemaJSON,
    ADE$_StandardStaticContextOptions: ComfyNodeSchemaJSON,
    ADE$_StandardUniformContextOptions: ComfyNodeSchemaJSON,
    ADE$_LoopedUniformContextOptions: ComfyNodeSchemaJSON,
    ADE$_ViewsOnlyContextOptions: ComfyNodeSchemaJSON,
    ADE$_BatchedContextOptions: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffUniformContextOptions: ComfyNodeSchemaJSON,
    ADE$_VisualizeContextOptionsK: ComfyNodeSchemaJSON,
    ADE$_VisualizeContextOptionsKAdv: ComfyNodeSchemaJSON,
    ADE$_VisualizeContextOptionsSCustom: ComfyNodeSchemaJSON,
    ADE$_StandardStaticViewOptions: ComfyNodeSchemaJSON,
    ADE$_StandardUniformViewOptions: ComfyNodeSchemaJSON,
    ADE$_LoopedUniformViewOptions: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_Set: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_ContextRef: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_ContextRef$_ModeFirst: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_ContextRef$_ModeSliding: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_ContextRef$_ModeIndexes: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_ContextRef$_TuneAttn: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_ContextRef$_TuneAttnAdain: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_ContextRef$_Keyframe: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_ContextRef$_KeyframeInterpolation: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_ContextRef$_KeyframeFromList: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_NaiveReuse: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_NaiveReuse$_Keyframe: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_NaiveReuse$_KeyframeInterpolation: ComfyNodeSchemaJSON,
    ADE$_ContextExtras$_NaiveReuse$_KeyframeFromList: ComfyNodeSchemaJSON,
    ADE$_IterationOptsDefault: ComfyNodeSchemaJSON,
    ADE$_IterationOptsFreeInit: ComfyNodeSchemaJSON,
    ADE$_RegisterLoraHook: ComfyNodeSchemaJSON,
    ADE$_RegisterLoraHookModelOnly: ComfyNodeSchemaJSON,
    ADE$_RegisterModelAsLoraHook: ComfyNodeSchemaJSON,
    ADE$_RegisterModelAsLoraHookModelOnly: ComfyNodeSchemaJSON,
    ADE$_CombineLoraHooks: ComfyNodeSchemaJSON,
    ADE$_CombineLoraHooksFour: ComfyNodeSchemaJSON,
    ADE$_CombineLoraHooksEight: ComfyNodeSchemaJSON,
    ADE$_SetLoraHookKeyframe: ComfyNodeSchemaJSON,
    ADE$_AttachLoraHookToCLIP: ComfyNodeSchemaJSON,
    ADE$_LoraHookKeyframe: ComfyNodeSchemaJSON,
    ADE$_LoraHookKeyframeInterpolation: ComfyNodeSchemaJSON,
    ADE$_LoraHookKeyframeFromStrengthList: ComfyNodeSchemaJSON,
    ADE$_AttachLoraHookToConditioning: ComfyNodeSchemaJSON,
    ADE$_PairedConditioningSetMask: ComfyNodeSchemaJSON,
    ADE$_ConditioningSetMask: ComfyNodeSchemaJSON,
    ADE$_PairedConditioningSetMaskAndCombine: ComfyNodeSchemaJSON,
    ADE$_ConditioningSetMaskAndCombine: ComfyNodeSchemaJSON,
    ADE$_PairedConditioningSetUnmaskedAndCombine: ComfyNodeSchemaJSON,
    ADE$_ConditioningSetUnmaskedAndCombine: ComfyNodeSchemaJSON,
    ADE$_PairedConditioningCombine: ComfyNodeSchemaJSON,
    ADE$_ConditioningCombine: ComfyNodeSchemaJSON,
    ADE$_TimestepsConditioning: ComfyNodeSchemaJSON,
    ADE$_NoiseLayerAdd: ComfyNodeSchemaJSON,
    ADE$_NoiseLayerAddWeighted: ComfyNodeSchemaJSON,
    ADE$_NoiseLayerReplace: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffSettings: ComfyNodeSchemaJSON,
    ADE$_AdjustPESweetspotStretch: ComfyNodeSchemaJSON,
    ADE$_AdjustPEFullStretch: ComfyNodeSchemaJSON,
    ADE$_AdjustPEManual: ComfyNodeSchemaJSON,
    ADE$_AdjustWeightAllAdd: ComfyNodeSchemaJSON,
    ADE$_AdjustWeightAllMult: ComfyNodeSchemaJSON,
    ADE$_AdjustWeightIndivAdd: ComfyNodeSchemaJSON,
    ADE$_AdjustWeightIndivMult: ComfyNodeSchemaJSON,
    ADE$_AdjustWeightIndivAttnAdd: ComfyNodeSchemaJSON,
    ADE$_AdjustWeightIndivAttnMult: ComfyNodeSchemaJSON,
    ADE$_CustomCFGSimple: ComfyNodeSchemaJSON,
    ADE$_CustomCFG: ComfyNodeSchemaJSON,
    ADE$_CustomCFGKeyframeSimple: ComfyNodeSchemaJSON,
    ADE$_CustomCFGKeyframe: ComfyNodeSchemaJSON,
    ADE$_CustomCFGKeyframeInterpolation: ComfyNodeSchemaJSON,
    ADE$_CustomCFGKeyframeFromList: ComfyNodeSchemaJSON,
    ADE$_CFGExtrasPAGSimple: ComfyNodeSchemaJSON,
    ADE$_CFGExtrasPAG: ComfyNodeSchemaJSON,
    ADE$_CFGExtrasRescaleCFGSimple: ComfyNodeSchemaJSON,
    ADE$_CFGExtrasRescaleCFG: ComfyNodeSchemaJSON,
    ADE$_SigmaSchedule: ComfyNodeSchemaJSON,
    ADE$_RawSigmaSchedule: ComfyNodeSchemaJSON,
    ADE$_SigmaScheduleWeightedAverage: ComfyNodeSchemaJSON,
    ADE$_SigmaScheduleWeightedAverageInterp: ComfyNodeSchemaJSON,
    ADE$_SigmaScheduleSplitAndCombine: ComfyNodeSchemaJSON,
    ADE$_SigmaScheduleToSigmas: ComfyNodeSchemaJSON,
    ADE$_NoisedImageInjection: ComfyNodeSchemaJSON,
    ADE$_NoisedImageInjectOptions: ComfyNodeSchemaJSON,
    ADE$_PromptScheduling: ComfyNodeSchemaJSON,
    ADE$_PromptSchedulingLatents: ComfyNodeSchemaJSON,
    ADE$_ValueScheduling: ComfyNodeSchemaJSON,
    ADE$_ValueSchedulingLatents: ComfyNodeSchemaJSON,
    ADE$_ValuesReplace: ComfyNodeSchemaJSON,
    ADE$_FloatToFloats: ComfyNodeSchemaJSON,
    ADE$_ADBlockCombo: ComfyNodeSchemaJSON,
    ADE$_ADBlockIndiv: ComfyNodeSchemaJSON,
    ADE$_PerBlockHighLevel: ComfyNodeSchemaJSON,
    ADE$_PerBlock$_SD15$_MidLevel: ComfyNodeSchemaJSON,
    ADE$_PerBlock$_SD15$_LowLevel: ComfyNodeSchemaJSON,
    ADE$_PerBlock$_SD15$_FromFloats: ComfyNodeSchemaJSON,
    ADE$_PerBlock$_SDXL$_MidLevel: ComfyNodeSchemaJSON,
    ADE$_PerBlock$_SDXL$_LowLevel: ComfyNodeSchemaJSON,
    ADE$_PerBlock$_SDXL$_FromFloats: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffUnload: ComfyNodeSchemaJSON,
    ADE$_EmptyLatentImageLarge: ComfyNodeSchemaJSON,
    CheckpointLoaderSimpleWithNoiseSelect: ComfyNodeSchemaJSON,
    ADE$_PerturbedAttentionGuidanceMultival: ComfyNodeSchemaJSON,
    ADE$_RescaleCFGMultival: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffLoaderGen1: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffLoaderWithContext: ComfyNodeSchemaJSON,
    ADE$_UseEvolvedSampling: ComfyNodeSchemaJSON,
    ADE$_ApplyAnimateDiffModelSimple: ComfyNodeSchemaJSON,
    ADE$_ApplyAnimateDiffModel: ComfyNodeSchemaJSON,
    ADE$_LoadAnimateDiffModel: ComfyNodeSchemaJSON,
    ADE$_ApplyAnimateLCMI2VModel: ComfyNodeSchemaJSON,
    ADE$_LoadAnimateLCMI2VModel: ComfyNodeSchemaJSON,
    ADE$_UpscaleAndVAEEncode: ComfyNodeSchemaJSON,
    ADE$_InjectI2VIntoAnimateDiffModel: ComfyNodeSchemaJSON,
    ADE$_ApplyAnimateDiffModelWithCameraCtrl: ComfyNodeSchemaJSON,
    ADE$_LoadAnimateDiffModelWithCameraCtrl: ComfyNodeSchemaJSON,
    ADE$_CameraCtrlAnimateDiffKeyframe: ComfyNodeSchemaJSON,
    ADE$_LoadCameraPoses: ComfyNodeSchemaJSON,
    ADE$_LoadCameraPosesFromPath: ComfyNodeSchemaJSON,
    ADE$_CameraPoseBasic: ComfyNodeSchemaJSON,
    ADE$_CameraPoseCombo: ComfyNodeSchemaJSON,
    ADE$_CameraPoseAdvanced: ComfyNodeSchemaJSON,
    ADE$_CameraManualPoseAppend: ComfyNodeSchemaJSON,
    ADE$_ReplaceCameraParameters: ComfyNodeSchemaJSON,
    ADE$_ReplaceOriginalPoseAspectRatio: ComfyNodeSchemaJSON,
    ADE$_ApplyAnimateDiffModelWithPIA: ComfyNodeSchemaJSON,
    ADE$_InputPIA$_Multival: ComfyNodeSchemaJSON,
    ADE$_InputPIA$_PaperPresets: ComfyNodeSchemaJSON,
    ADE$_PIA$_AnimateDiffKeyframe: ComfyNodeSchemaJSON,
    ADE$_InjectPIAIntoAnimateDiffModel: ComfyNodeSchemaJSON,
    AnimateDiffLoaderV1: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffLoaderV1Advanced: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffCombine: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffModelSettings$_Release: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffModelSettingsSimple: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffModelSettings: ComfyNodeSchemaJSON,
    ADE$_AnimateDiffModelSettingsAdvancedAttnStrengths: ComfyNodeSchemaJSON,
    AV$_CheckpointModelsToParametersPipe: ComfyNodeSchemaJSON,
    AV$_PromptsToParametersPipe: ComfyNodeSchemaJSON,
    AV$_ParametersPipeToCheckpointModels: ComfyNodeSchemaJSON,
    AV$_ParametersPipeToPrompts: ComfyNodeSchemaJSON,
    AV$_VAELoader: ComfyNodeSchemaJSON,
    AV$_LoraLoader: ComfyNodeSchemaJSON,
    AV$_LoraListLoader: ComfyNodeSchemaJSON,
    AV$_LoraListStacker: ComfyNodeSchemaJSON,
    AV$_CheckpointMerge: ComfyNodeSchemaJSON,
    AV$_CheckpointSave: ComfyNodeSchemaJSON,
    LoadImageFromUrl: ComfyNodeSchemaJSON,
    LoadImageAsMaskFromUrl: ComfyNodeSchemaJSON,
    StringToInt: ComfyNodeSchemaJSON,
    StringToNumber: ComfyNodeSchemaJSON,
    BooleanPrimitive: ComfyNodeSchemaJSON,
    ImageMuxer: ComfyNodeSchemaJSON,
    ImageScaleDown: ComfyNodeSchemaJSON,
    ImageScaleDownBy: ComfyNodeSchemaJSON,
    ImageScaleDownToSize: ComfyNodeSchemaJSON,
    ImageScaleToMegapixels: ComfyNodeSchemaJSON,
    ImageAlphaComposite: ComfyNodeSchemaJSON,
    ImageGaussianBlur: ComfyNodeSchemaJSON,
    ImageRepeat: ComfyNodeSchemaJSON,
    ImageExtractChannel: ComfyNodeSchemaJSON,
    ImageApplyChannel: ComfyNodeSchemaJSON,
    QRCodeGenerator: ComfyNodeSchemaJSON,
    DependenciesEdit: ComfyNodeSchemaJSON,
    AspectRatioSelector: ComfyNodeSchemaJSON,
    SDXLAspectRatioSelector: ComfyNodeSchemaJSON,
    SeedSelector: ComfyNodeSchemaJSON,
    CheckpointNameSelector: ComfyNodeSchemaJSON,
    LoadJsonFromUrl: ComfyNodeSchemaJSON,
    LoadJsonFromText: ComfyNodeSchemaJSON,
    GetObjectFromJson: ComfyNodeSchemaJSON,
    GetTextFromJson: ComfyNodeSchemaJSON,
    GetFloatFromJson: ComfyNodeSchemaJSON,
    GetIntFromJson: ComfyNodeSchemaJSON,
    GetBoolFromJson: ComfyNodeSchemaJSON,
    RandomInt: ComfyNodeSchemaJSON,
    RandomFloat: ComfyNodeSchemaJSON,
    NumberScaler: ComfyNodeSchemaJSON,
    MergeModels: ComfyNodeSchemaJSON,
    TextRandomMultiline: ComfyNodeSchemaJSON,
    SDXLPromptStyler: ComfyNodeSchemaJSON,
    BLIPLoader: ComfyNodeSchemaJSON,
    BLIPCaption: ComfyNodeSchemaJSON,
    DownloadAndLoadBlip: ComfyNodeSchemaJSON,
    DeepDanbooruCaption: ComfyNodeSchemaJSON,
    Fooocus$_KSampler: ComfyNodeSchemaJSON,
    Fooocus$_KSamplerAdvanced: ComfyNodeSchemaJSON,
    ColorBlend: ComfyNodeSchemaJSON,
    ColorCorrect: ComfyNodeSchemaJSON,
    AV$_ControlNetLoader: ComfyNodeSchemaJSON,
    AV$_ControlNetEfficientLoader: ComfyNodeSchemaJSON,
    AV$_ControlNetEfficientLoaderAdvanced: ComfyNodeSchemaJSON,
    AV$_ControlNetEfficientStacker: ComfyNodeSchemaJSON,
    AV$_ControlNetEfficientStackerSimple: ComfyNodeSchemaJSON,
    AV$_ControlNetPreprocessor: ComfyNodeSchemaJSON,
    AV$_IPAdapter: ComfyNodeSchemaJSON,
    AV$_IPAdapterPipe: ComfyNodeSchemaJSON,
    ISNetLoader: ComfyNodeSchemaJSON,
    ISNetSegment: ComfyNodeSchemaJSON,
    DownloadISNetModel: ComfyNodeSchemaJSON,
    AV$_SAMLoader: ComfyNodeSchemaJSON,
    GetSAMEmbedding: ComfyNodeSchemaJSON,
    SAMEmbeddingToImage: ComfyNodeSchemaJSON,
    LaMaInpaint: ComfyNodeSchemaJSON,
    PrepareImageAndMaskForInpaint: ComfyNodeSchemaJSON,
    OverlayInpaintedLatent: ComfyNodeSchemaJSON,
    OverlayInpaintedImage: ComfyNodeSchemaJSON,
    AV$_FaceDetailer: ComfyNodeSchemaJSON,
    AV$_FaceDetailerPipe: ComfyNodeSchemaJSON,
    AV$_OpenAIApi: ComfyNodeSchemaJSON,
    AV$_ClaudeApi: ComfyNodeSchemaJSON,
    AV$_AwsBedrockClaudeApi: ComfyNodeSchemaJSON,
    AV$_AwsBedrockMistralApi: ComfyNodeSchemaJSON,
    AV$_LLMApiConfig: ComfyNodeSchemaJSON,
    AV$_LLMMessage: ComfyNodeSchemaJSON,
    AV$_LLMChat: ComfyNodeSchemaJSON,
    AV$_LLMCompletion: ComfyNodeSchemaJSON,
    BRIA$_RMBG$_ModelLoader$_Zho: ComfyNodeSchemaJSON,
    BRIA$_RMBG$_Zho: ComfyNodeSchemaJSON,
    LoraLoader$8pysssss: ComfyNodeSchemaJSON,
    CheckpointLoader$8pysssss: ComfyNodeSchemaJSON,
    ConstrainImage$8pysssss: ComfyNodeSchemaJSON,
    ConstrainImageforVideo$8pysssss: ComfyNodeSchemaJSON,
    MathExpression$8pysssss: ComfyNodeSchemaJSON,
    PlaySound$8pysssss: ComfyNodeSchemaJSON,
    Repeater$8pysssss: ComfyNodeSchemaJSON,
    ReroutePrimitive$8pysssss: ComfyNodeSchemaJSON,
    ShowText$8pysssss: ComfyNodeSchemaJSON,
    StringFunction$8pysssss: ComfyNodeSchemaJSON,
    SystemNotification$8pysssss: ComfyNodeSchemaJSON,
    LoadText$8pysssss: ComfyNodeSchemaJSON,
    SaveText$8pysssss: ComfyNodeSchemaJSON,
    DPRandomGenerator: ComfyNodeSchemaJSON,
    DPCombinatorialGenerator: ComfyNodeSchemaJSON,
    DPFeelingLucky: ComfyNodeSchemaJSON,
    DPJinja: ComfyNodeSchemaJSON,
    DPMagicPrompt: ComfyNodeSchemaJSON,
    DPOutput: ComfyNodeSchemaJSON,
    SAMLoader: ComfyNodeSchemaJSON,
    CLIPSegDetectorProvider: ComfyNodeSchemaJSON,
    ONNXDetectorProvider: ComfyNodeSchemaJSON,
    BitwiseAndMaskForEach: ComfyNodeSchemaJSON,
    SubtractMaskForEach: ComfyNodeSchemaJSON,
    DetailerForEach: ComfyNodeSchemaJSON,
    DetailerForEachDebug: ComfyNodeSchemaJSON,
    DetailerForEachPipe: ComfyNodeSchemaJSON,
    DetailerForEachDebugPipe: ComfyNodeSchemaJSON,
    DetailerForEachPipeForAnimateDiff: ComfyNodeSchemaJSON,
    SAMDetectorCombined: ComfyNodeSchemaJSON,
    SAMDetectorSegmented: ComfyNodeSchemaJSON,
    FaceDetailer: ComfyNodeSchemaJSON,
    FaceDetailerPipe: ComfyNodeSchemaJSON,
    MaskDetailerPipe: ComfyNodeSchemaJSON,
    ToDetailerPipe: ComfyNodeSchemaJSON,
    ToDetailerPipeSDXL: ComfyNodeSchemaJSON,
    FromDetailerPipe: ComfyNodeSchemaJSON,
    FromDetailerPipe$_v2: ComfyNodeSchemaJSON,
    FromDetailerPipeSDXL: ComfyNodeSchemaJSON,
    AnyPipeToBasic: ComfyNodeSchemaJSON,
    ToBasicPipe: ComfyNodeSchemaJSON,
    FromBasicPipe: ComfyNodeSchemaJSON,
    FromBasicPipe$_v2: ComfyNodeSchemaJSON,
    BasicPipeToDetailerPipe: ComfyNodeSchemaJSON,
    BasicPipeToDetailerPipeSDXL: ComfyNodeSchemaJSON,
    DetailerPipeToBasicPipe: ComfyNodeSchemaJSON,
    EditBasicPipe: ComfyNodeSchemaJSON,
    EditDetailerPipe: ComfyNodeSchemaJSON,
    EditDetailerPipeSDXL: ComfyNodeSchemaJSON,
    LatentPixelScale: ComfyNodeSchemaJSON,
    PixelKSampleUpscalerProvider: ComfyNodeSchemaJSON,
    PixelKSampleUpscalerProviderPipe: ComfyNodeSchemaJSON,
    IterativeLatentUpscale: ComfyNodeSchemaJSON,
    IterativeImageUpscale: ComfyNodeSchemaJSON,
    PixelTiledKSampleUpscalerProvider: ComfyNodeSchemaJSON,
    PixelTiledKSampleUpscalerProviderPipe: ComfyNodeSchemaJSON,
    TwoSamplersForMaskUpscalerProvider: ComfyNodeSchemaJSON,
    TwoSamplersForMaskUpscalerProviderPipe: ComfyNodeSchemaJSON,
    PixelKSampleHookCombine: ComfyNodeSchemaJSON,
    DenoiseScheduleHookProvider: ComfyNodeSchemaJSON,
    StepsScheduleHookProvider: ComfyNodeSchemaJSON,
    CfgScheduleHookProvider: ComfyNodeSchemaJSON,
    NoiseInjectionHookProvider: ComfyNodeSchemaJSON,
    UnsamplerHookProvider: ComfyNodeSchemaJSON,
    CoreMLDetailerHookProvider: ComfyNodeSchemaJSON,
    PreviewDetailerHookProvider: ComfyNodeSchemaJSON,
    DetailerHookCombine: ComfyNodeSchemaJSON,
    NoiseInjectionDetailerHookProvider: ComfyNodeSchemaJSON,
    UnsamplerDetailerHookProvider: ComfyNodeSchemaJSON,
    DenoiseSchedulerDetailerHookProvider: ComfyNodeSchemaJSON,
    SEGSOrderedFilterDetailerHookProvider: ComfyNodeSchemaJSON,
    SEGSRangeFilterDetailerHookProvider: ComfyNodeSchemaJSON,
    SEGSLabelFilterDetailerHookProvider: ComfyNodeSchemaJSON,
    VariationNoiseDetailerHookProvider: ComfyNodeSchemaJSON,
    BitwiseAndMask: ComfyNodeSchemaJSON,
    SubtractMask: ComfyNodeSchemaJSON,
    AddMask: ComfyNodeSchemaJSON,
    ImpactSegsAndMask: ComfyNodeSchemaJSON,
    ImpactSegsAndMaskForEach: ComfyNodeSchemaJSON,
    EmptySegs: ComfyNodeSchemaJSON,
    ImpactFlattenMask: ComfyNodeSchemaJSON,
    MediaPipeFaceMeshToSEGS: ComfyNodeSchemaJSON,
    MaskToSEGS: ComfyNodeSchemaJSON,
    MaskToSEGS$_for$_AnimateDiff: ComfyNodeSchemaJSON,
    ToBinaryMask: ComfyNodeSchemaJSON,
    MasksToMaskList: ComfyNodeSchemaJSON,
    MaskListToMaskBatch: ComfyNodeSchemaJSON,
    ImageListToImageBatch: ComfyNodeSchemaJSON,
    SetDefaultImageForSEGS: ComfyNodeSchemaJSON,
    RemoveImageFromSEGS: ComfyNodeSchemaJSON,
    BboxDetectorSEGS: ComfyNodeSchemaJSON,
    SegmDetectorSEGS: ComfyNodeSchemaJSON,
    ONNXDetectorSEGS: ComfyNodeSchemaJSON,
    ImpactSimpleDetectorSEGS$_for$_AD: ComfyNodeSchemaJSON,
    ImpactSimpleDetectorSEGS: ComfyNodeSchemaJSON,
    ImpactSimpleDetectorSEGSPipe: ComfyNodeSchemaJSON,
    ImpactControlNetApplySEGS: ComfyNodeSchemaJSON,
    ImpactControlNetApplyAdvancedSEGS: ComfyNodeSchemaJSON,
    ImpactControlNetClearSEGS: ComfyNodeSchemaJSON,
    ImpactIPAdapterApplySEGS: ComfyNodeSchemaJSON,
    ImpactDecomposeSEGS: ComfyNodeSchemaJSON,
    ImpactAssembleSEGS: ComfyNodeSchemaJSON,
    ImpactFrom$_SEG$_ELT: ComfyNodeSchemaJSON,
    ImpactEdit$_SEG$_ELT: ComfyNodeSchemaJSON,
    ImpactDilate$_Mask$_SEG$_ELT: ComfyNodeSchemaJSON,
    ImpactDilateMask: ComfyNodeSchemaJSON,
    ImpactGaussianBlurMask: ComfyNodeSchemaJSON,
    ImpactDilateMaskInSEGS: ComfyNodeSchemaJSON,
    ImpactGaussianBlurMaskInSEGS: ComfyNodeSchemaJSON,
    ImpactScaleBy$_BBOX$_SEG$_ELT: ComfyNodeSchemaJSON,
    ImpactFrom$_SEG$_ELT$_bbox: ComfyNodeSchemaJSON,
    ImpactFrom$_SEG$_ELT$_crop$_region: ComfyNodeSchemaJSON,
    ImpactCount$_Elts$_in$_SEGS: ComfyNodeSchemaJSON,
    BboxDetectorCombined$_v2: ComfyNodeSchemaJSON,
    SegmDetectorCombined$_v2: ComfyNodeSchemaJSON,
    SegsToCombinedMask: ComfyNodeSchemaJSON,
    KSamplerProvider: ComfyNodeSchemaJSON,
    TwoSamplersForMask: ComfyNodeSchemaJSON,
    TiledKSamplerProvider: ComfyNodeSchemaJSON,
    KSamplerAdvancedProvider: ComfyNodeSchemaJSON,
    TwoAdvancedSamplersForMask: ComfyNodeSchemaJSON,
    ImpactNegativeConditioningPlaceholder: ComfyNodeSchemaJSON,
    PreviewBridge: ComfyNodeSchemaJSON,
    PreviewBridgeLatent: ComfyNodeSchemaJSON,
    ImageSender: ComfyNodeSchemaJSON,
    ImageReceiver: ComfyNodeSchemaJSON,
    LatentSender: ComfyNodeSchemaJSON,
    LatentReceiver: ComfyNodeSchemaJSON,
    ImageMaskSwitch: ComfyNodeSchemaJSON,
    LatentSwitch: ComfyNodeSchemaJSON,
    SEGSSwitch: ComfyNodeSchemaJSON,
    ImpactSwitch: ComfyNodeSchemaJSON,
    ImpactInversedSwitch: ComfyNodeSchemaJSON,
    ImpactWildcardProcessor: ComfyNodeSchemaJSON,
    ImpactWildcardEncode: ComfyNodeSchemaJSON,
    SEGSUpscaler: ComfyNodeSchemaJSON,
    SEGSUpscalerPipe: ComfyNodeSchemaJSON,
    SEGSDetailer: ComfyNodeSchemaJSON,
    SEGSPaste: ComfyNodeSchemaJSON,
    SEGSPreview: ComfyNodeSchemaJSON,
    SEGSPreviewCNet: ComfyNodeSchemaJSON,
    SEGSToImageList: ComfyNodeSchemaJSON,
    ImpactSEGSToMaskList: ComfyNodeSchemaJSON,
    ImpactSEGSToMaskBatch: ComfyNodeSchemaJSON,
    ImpactSEGSConcat: ComfyNodeSchemaJSON,
    ImpactSEGSPicker: ComfyNodeSchemaJSON,
    ImpactMakeTileSEGS: ComfyNodeSchemaJSON,
    ImpactSEGSMerge: ComfyNodeSchemaJSON,
    SEGSDetailerForAnimateDiff: ComfyNodeSchemaJSON,
    ImpactKSamplerBasicPipe: ComfyNodeSchemaJSON,
    ImpactKSamplerAdvancedBasicPipe: ComfyNodeSchemaJSON,
    ReencodeLatent: ComfyNodeSchemaJSON,
    ReencodeLatentPipe: ComfyNodeSchemaJSON,
    ImpactImageBatchToImageList: ComfyNodeSchemaJSON,
    ImpactMakeImageList: ComfyNodeSchemaJSON,
    ImpactMakeImageBatch: ComfyNodeSchemaJSON,
    ImpactMakeAnyList: ComfyNodeSchemaJSON,
    ImpactMakeMaskList: ComfyNodeSchemaJSON,
    ImpactMakeMaskBatch: ComfyNodeSchemaJSON,
    RegionalSampler: ComfyNodeSchemaJSON,
    RegionalSamplerAdvanced: ComfyNodeSchemaJSON,
    CombineRegionalPrompts: ComfyNodeSchemaJSON,
    RegionalPrompt: ComfyNodeSchemaJSON,
    ImpactCombineConditionings: ComfyNodeSchemaJSON,
    ImpactConcatConditionings: ComfyNodeSchemaJSON,
    ImpactSEGSLabelAssign: ComfyNodeSchemaJSON,
    ImpactSEGSLabelFilter: ComfyNodeSchemaJSON,
    ImpactSEGSRangeFilter: ComfyNodeSchemaJSON,
    ImpactSEGSOrderedFilter: ComfyNodeSchemaJSON,
    ImpactCompare: ComfyNodeSchemaJSON,
    ImpactConditionalBranch: ComfyNodeSchemaJSON,
    ImpactConditionalBranchSelMode: ComfyNodeSchemaJSON,
    ImpactIfNone: ComfyNodeSchemaJSON,
    ImpactConvertDataType: ComfyNodeSchemaJSON,
    ImpactLogicalOperators: ComfyNodeSchemaJSON,
    ImpactInt: ComfyNodeSchemaJSON,
    ImpactFloat: ComfyNodeSchemaJSON,
    ImpactBoolean: ComfyNodeSchemaJSON,
    ImpactValueSender: ComfyNodeSchemaJSON,
    ImpactValueReceiver: ComfyNodeSchemaJSON,
    ImpactImageInfo: ComfyNodeSchemaJSON,
    ImpactLatentInfo: ComfyNodeSchemaJSON,
    ImpactMinMax: ComfyNodeSchemaJSON,
    ImpactNeg: ComfyNodeSchemaJSON,
    ImpactConditionalStopIteration: ComfyNodeSchemaJSON,
    ImpactStringSelector: ComfyNodeSchemaJSON,
    StringListToString: ComfyNodeSchemaJSON,
    WildcardPromptFromString: ComfyNodeSchemaJSON,
    ImpactExecutionOrderController: ComfyNodeSchemaJSON,
    RemoveNoiseMask: ComfyNodeSchemaJSON,
    ImpactLogger: ComfyNodeSchemaJSON,
    ImpactDummyInput: ComfyNodeSchemaJSON,
    ImpactQueueTrigger: ComfyNodeSchemaJSON,
    ImpactQueueTriggerCountdown: ComfyNodeSchemaJSON,
    ImpactSetWidgetValue: ComfyNodeSchemaJSON,
    ImpactNodeSetMuteState: ComfyNodeSchemaJSON,
    ImpactControlBridge: ComfyNodeSchemaJSON,
    ImpactIsNotEmptySEGS: ComfyNodeSchemaJSON,
    ImpactSleep: ComfyNodeSchemaJSON,
    ImpactRemoteBoolean: ComfyNodeSchemaJSON,
    ImpactRemoteInt: ComfyNodeSchemaJSON,
    ImpactHFTransformersClassifierProvider: ComfyNodeSchemaJSON,
    ImpactSEGSClassify: ComfyNodeSchemaJSON,
    ImpactSchedulerAdapter: ComfyNodeSchemaJSON,
    GITSSchedulerFuncProvider: ComfyNodeSchemaJSON,
    UltralyticsDetectorProvider: ComfyNodeSchemaJSON,
    INPAINT$_LoadFooocusInpaint: ComfyNodeSchemaJSON,
    INPAINT$_ApplyFooocusInpaint: ComfyNodeSchemaJSON,
    INPAINT$_VAEEncodeInpaintConditioning: ComfyNodeSchemaJSON,
    INPAINT$_MaskedFill: ComfyNodeSchemaJSON,
    INPAINT$_MaskedBlur: ComfyNodeSchemaJSON,
    INPAINT$_LoadInpaintModel: ComfyNodeSchemaJSON,
    INPAINT$_InpaintWithModel: ComfyNodeSchemaJSON,
    INPAINT$_ExpandMask: ComfyNodeSchemaJSON,
    INPAINT$_DenoiseToCompositingMask: ComfyNodeSchemaJSON,
    XY_Input$4_Lora_Block_Weight_$3$3Inspire: ComfyNodeSchemaJSON,
    LoraLoaderBlockWeight_$3$3Inspire: ComfyNodeSchemaJSON,
    LoraBlockInfo_$3$3Inspire: ComfyNodeSchemaJSON,
    MakeLBW_$3$3Inspire: ComfyNodeSchemaJSON,
    ApplyLBW_$3$3Inspire: ComfyNodeSchemaJSON,
    SaveLBW_$3$3Inspire: ComfyNodeSchemaJSON,
    LoadLBW_$3$3Inspire: ComfyNodeSchemaJSON,
    OpenPose$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    DWPreprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    MiDaS$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    LeRes$_DepthMap$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    Canny$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    MediaPipe$_FaceMesh$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    HEDPreprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    FakeScribblePreprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    AnimeLineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    Manga2Anime$_LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    LineArt$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    Color$_Preprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    InpaintPreprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    TilePreprocessor$_Provider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    MeshGraphormerDepthMapPreprocessorProvider$_for$_SEGS_$3$3Inspire: ComfyNodeSchemaJSON,
    MediaPipeFaceMeshDetectorProvider_$3$3Inspire: ComfyNodeSchemaJSON,
    KSampler_$3$3Inspire: ComfyNodeSchemaJSON,
    KSamplerAdvanced_$3$3Inspire: ComfyNodeSchemaJSON,
    KSamplerPipe_$3$3Inspire: ComfyNodeSchemaJSON,
    KSamplerAdvancedPipe_$3$3Inspire: ComfyNodeSchemaJSON,
    RandomNoise_$3$3Inspire: ComfyNodeSchemaJSON,
    HyperTile_$3$3Inspire: ComfyNodeSchemaJSON,
    LoadPromptsFromDir_$3$3Inspire: ComfyNodeSchemaJSON,
    LoadPromptsFromFile_$3$3Inspire: ComfyNodeSchemaJSON,
    LoadSinglePromptFromFile_$3$3Inspire: ComfyNodeSchemaJSON,
    UnzipPrompt_$3$3Inspire: ComfyNodeSchemaJSON,
    ZipPrompt_$3$3Inspire: ComfyNodeSchemaJSON,
    PromptExtractor_$3$3Inspire: ComfyNodeSchemaJSON,
    GlobalSeed_$3$3Inspire: ComfyNodeSchemaJSON,
    GlobalSampler_$3$3Inspire: ComfyNodeSchemaJSON,
    BindImageListPromptList_$3$3Inspire: ComfyNodeSchemaJSON,
    WildcardEncode_$3$3Inspire: ComfyNodeSchemaJSON,
    PromptBuilder_$3$3Inspire: ComfyNodeSchemaJSON,
    SeedExplorer_$3$3Inspire: ComfyNodeSchemaJSON,
    ListCounter_$3$3Inspire: ComfyNodeSchemaJSON,
    CLIPTextEncodeWithWeight_$3$3Inspire: ComfyNodeSchemaJSON,
    RandomGeneratorForList_$3$3Inspire: ComfyNodeSchemaJSON,
    MakeBasicPipe_$3$3Inspire: ComfyNodeSchemaJSON,
    RemoveControlNet_$3$3Inspire: ComfyNodeSchemaJSON,
    RemoveControlNetFromRegionalPrompts_$3$3Inspire: ComfyNodeSchemaJSON,
    CompositeNoise_$3$3Inspire: ComfyNodeSchemaJSON,
    LoadImagesFromDir_$3$3Inspire: ComfyNodeSchemaJSON,
    LoadImageListFromDir_$3$3Inspire: ComfyNodeSchemaJSON,
    LoadImage_$3$3Inspire: ComfyNodeSchemaJSON,
    ChangeImageBatchSize_$3$3Inspire: ComfyNodeSchemaJSON,
    ChangeLatentBatchSize_$3$3Inspire: ComfyNodeSchemaJSON,
    ImageBatchSplitter_$3$3Inspire: ComfyNodeSchemaJSON,
    LatentBatchSplitter_$3$3Inspire: ComfyNodeSchemaJSON,
    ColorMapToMasks_$3$3Inspire: ComfyNodeSchemaJSON,
    SelectNthMask_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalPromptSimple_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalPromptColorMask_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalConditioningSimple_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalConditioningColorMask_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalIPAdapterMask_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalIPAdapterColorMask_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalIPAdapterEncodedMask_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalIPAdapterEncodedColorMask_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalSeedExplorerMask_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalSeedExplorerColorMask_$3$3Inspire: ComfyNodeSchemaJSON,
    ToIPAdapterPipe_$3$3Inspire: ComfyNodeSchemaJSON,
    FromIPAdapterPipe_$3$3Inspire: ComfyNodeSchemaJSON,
    ApplyRegionalIPAdapters_$3$3Inspire: ComfyNodeSchemaJSON,
    RegionalCFG_$3$3Inspire: ComfyNodeSchemaJSON,
    ColorMaskToDepthMask_$3$3Inspire: ComfyNodeSchemaJSON,
    KSamplerProgress_$3$3Inspire: ComfyNodeSchemaJSON,
    KSamplerAdvancedProgress_$3$3Inspire: ComfyNodeSchemaJSON,
    ScheduledCFGGuider_$3$3Inspire: ComfyNodeSchemaJSON,
    ScheduledPerpNegCFGGuider_$3$3Inspire: ComfyNodeSchemaJSON,
    CacheBackendData_$3$3Inspire: ComfyNodeSchemaJSON,
    CacheBackendDataNumberKey_$3$3Inspire: ComfyNodeSchemaJSON,
    CacheBackendDataList_$3$3Inspire: ComfyNodeSchemaJSON,
    CacheBackendDataNumberKeyList_$3$3Inspire: ComfyNodeSchemaJSON,
    RetrieveBackendData_$3$3Inspire: ComfyNodeSchemaJSON,
    RetrieveBackendDataNumberKey_$3$3Inspire: ComfyNodeSchemaJSON,
    RemoveBackendData_$3$3Inspire: ComfyNodeSchemaJSON,
    RemoveBackendDataNumberKey_$3$3Inspire: ComfyNodeSchemaJSON,
    ShowCachedInfo_$3$3Inspire: ComfyNodeSchemaJSON,
    CheckpointLoaderSimpleShared_$3$3Inspire: ComfyNodeSchemaJSON,
    StableCascade$_CheckpointLoader_$3$3Inspire: ComfyNodeSchemaJSON,
    FloatRange_$3$3Inspire: ComfyNodeSchemaJSON,
    ConcatConditioningsWithMultiplier_$3$3Inspire: ComfyNodeSchemaJSON,
    ConditioningUpscale_$3$3Inspire: ComfyNodeSchemaJSON,
    ConditioningStretch_$3$3Inspire: ComfyNodeSchemaJSON,
    IPAdapterModelHelper_$3$3Inspire: ComfyNodeSchemaJSON,
    RGB$_HexToHSV_$3$3Inspire: ComfyNodeSchemaJSON,
    BOOLConstant: ComfyNodeSchemaJSON,
    INTConstant: ComfyNodeSchemaJSON,
    FloatConstant: ComfyNodeSchemaJSON,
    StringConstant: ComfyNodeSchemaJSON,
    StringConstantMultiline: ComfyNodeSchemaJSON,
    ConditioningMultiCombine: ComfyNodeSchemaJSON,
    ConditioningSetMaskAndCombine: ComfyNodeSchemaJSON,
    ConditioningSetMaskAndCombine3: ComfyNodeSchemaJSON,
    ConditioningSetMaskAndCombine4: ComfyNodeSchemaJSON,
    ConditioningSetMaskAndCombine5: ComfyNodeSchemaJSON,
    CondPassThrough: ComfyNodeSchemaJSON,
    DownloadAndLoadCLIPSeg: ComfyNodeSchemaJSON,
    BatchCLIPSeg: ComfyNodeSchemaJSON,
    ColorToMask: ComfyNodeSchemaJSON,
    CreateGradientMask: ComfyNodeSchemaJSON,
    CreateTextMask: ComfyNodeSchemaJSON,
    CreateAudioMask: ComfyNodeSchemaJSON,
    CreateFadeMask: ComfyNodeSchemaJSON,
    CreateFadeMaskAdvanced: ComfyNodeSchemaJSON,
    CreateFluidMask: ComfyNodeSchemaJSON,
    CreateShapeMask: ComfyNodeSchemaJSON,
    CreateVoronoiMask: ComfyNodeSchemaJSON,
    CreateMagicMask: ComfyNodeSchemaJSON,
    GetMaskSizeAndCount: ComfyNodeSchemaJSON,
    GrowMaskWithBlur: ComfyNodeSchemaJSON,
    MaskBatchMulti: ComfyNodeSchemaJSON,
    OffsetMask: ComfyNodeSchemaJSON,
    RemapMaskRange: ComfyNodeSchemaJSON,
    ResizeMask: ComfyNodeSchemaJSON,
    RoundMask: ComfyNodeSchemaJSON,
    AddLabel: ComfyNodeSchemaJSON,
    ColorMatch: ComfyNodeSchemaJSON,
    CrossFadeImages: ComfyNodeSchemaJSON,
    CrossFadeImagesMulti: ComfyNodeSchemaJSON,
    GetImagesFromBatchIndexed: ComfyNodeSchemaJSON,
    GetImageRangeFromBatch: ComfyNodeSchemaJSON,
    GetImageSizeAndCount: ComfyNodeSchemaJSON,
    FastPreview: ComfyNodeSchemaJSON,
    ImageAndMaskPreview: ComfyNodeSchemaJSON,
    ImageAddMulti: ComfyNodeSchemaJSON,
    ImageBatchMulti: ComfyNodeSchemaJSON,
    ImageBatchRepeatInterleaving: ComfyNodeSchemaJSON,
    ImageBatchTestPattern: ComfyNodeSchemaJSON,
    ImageConcanate: ComfyNodeSchemaJSON,
    ImageConcatFromBatch: ComfyNodeSchemaJSON,
    ImageConcatMulti: ComfyNodeSchemaJSON,
    ImageCropByMaskAndResize: ComfyNodeSchemaJSON,
    ImageUncropByMask: ComfyNodeSchemaJSON,
    ImageGrabPIL: ComfyNodeSchemaJSON,
    ImageGridComposite2x2: ComfyNodeSchemaJSON,
    ImageGridComposite3x3: ComfyNodeSchemaJSON,
    ImageGridtoBatch: ComfyNodeSchemaJSON,
    ImageNormalize$_Neg1$_To$_1: ComfyNodeSchemaJSON,
    ImagePass: ComfyNodeSchemaJSON,
    ImagePadForOutpaintMasked: ComfyNodeSchemaJSON,
    ImagePadForOutpaintTargetSize: ComfyNodeSchemaJSON,
    ImageResizeKJ: ComfyNodeSchemaJSON,
    ImageUpscaleWithModelBatched: ComfyNodeSchemaJSON,
    InsertImagesToBatchIndexed: ComfyNodeSchemaJSON,
    LoadAndResizeImage: ComfyNodeSchemaJSON,
    LoadImagesFromFolderKJ: ComfyNodeSchemaJSON,
    MergeImageChannels: ComfyNodeSchemaJSON,
    PreviewAnimation: ComfyNodeSchemaJSON,
    RemapImageRange: ComfyNodeSchemaJSON,
    ReverseImageBatch: ComfyNodeSchemaJSON,
    ReplaceImagesInBatch: ComfyNodeSchemaJSON,
    SaveImageWithAlpha: ComfyNodeSchemaJSON,
    SaveImageKJ: ComfyNodeSchemaJSON,
    ShuffleImageBatch: ComfyNodeSchemaJSON,
    SplitImageChannels: ComfyNodeSchemaJSON,
    TransitionImagesMulti: ComfyNodeSchemaJSON,
    TransitionImagesInBatch: ComfyNodeSchemaJSON,
    BatchCropFromMask: ComfyNodeSchemaJSON,
    BatchCropFromMaskAdvanced: ComfyNodeSchemaJSON,
    FilterZeroMasksAndCorrespondingImages: ComfyNodeSchemaJSON,
    InsertImageBatchByIndexes: ComfyNodeSchemaJSON,
    BatchUncrop: ComfyNodeSchemaJSON,
    BatchUncropAdvanced: ComfyNodeSchemaJSON,
    SplitBboxes: ComfyNodeSchemaJSON,
    BboxToInt: ComfyNodeSchemaJSON,
    BboxVisualize: ComfyNodeSchemaJSON,
    GenerateNoise: ComfyNodeSchemaJSON,
    FlipSigmasAdjusted: ComfyNodeSchemaJSON,
    InjectNoiseToLatent: ComfyNodeSchemaJSON,
    CustomSigmas: ComfyNodeSchemaJSON,
    WidgetToString: ComfyNodeSchemaJSON,
    DummyOut: ComfyNodeSchemaJSON,
    GetLatentsFromBatchIndexed: ComfyNodeSchemaJSON,
    ScaleBatchPromptSchedule: ComfyNodeSchemaJSON,
    CameraPoseVisualizer: ComfyNodeSchemaJSON,
    AppendStringsToList: ComfyNodeSchemaJSON,
    JoinStrings: ComfyNodeSchemaJSON,
    JoinStringMulti: ComfyNodeSchemaJSON,
    SomethingToString: ComfyNodeSchemaJSON,
    Sleep: ComfyNodeSchemaJSON,
    VRAM$_Debug: ComfyNodeSchemaJSON,
    EmptyLatentImagePresets: ComfyNodeSchemaJSON,
    EmptyLatentImageCustomPresets: ComfyNodeSchemaJSON,
    ModelPassThrough: ComfyNodeSchemaJSON,
    ModelSaveKJ: ComfyNodeSchemaJSON,
    SetShakkerLabsUnionControlNetType: ComfyNodeSchemaJSON,
    NormalizedAmplitudeToMask: ComfyNodeSchemaJSON,
    NormalizedAmplitudeToFloatList: ComfyNodeSchemaJSON,
    OffsetMaskByNormalizedAmplitude: ComfyNodeSchemaJSON,
    ImageTransformByNormalizedAmplitude: ComfyNodeSchemaJSON,
    SplineEditor: ComfyNodeSchemaJSON,
    CreateShapeImageOnPath: ComfyNodeSchemaJSON,
    CreateShapeMaskOnPath: ComfyNodeSchemaJSON,
    CreateTextOnPath: ComfyNodeSchemaJSON,
    CreateGradientFromCoords: ComfyNodeSchemaJSON,
    GradientToFloat: ComfyNodeSchemaJSON,
    WeightScheduleExtend: ComfyNodeSchemaJSON,
    MaskOrImageToWeight: ComfyNodeSchemaJSON,
    WeightScheduleConvert: ComfyNodeSchemaJSON,
    FloatToMask: ComfyNodeSchemaJSON,
    FloatToSigmas: ComfyNodeSchemaJSON,
    PlotCoordinates: ComfyNodeSchemaJSON,
    InterpolateCoords: ComfyNodeSchemaJSON,
    PointsEditor: ComfyNodeSchemaJSON,
    StabilityAPI$_SD3: ComfyNodeSchemaJSON,
    SoundReactive: ComfyNodeSchemaJSON,
    StableZero123$_BatchSchedule: ComfyNodeSchemaJSON,
    SV3D$_BatchSchedule: ComfyNodeSchemaJSON,
    LoadResAdapterNormalization: ComfyNodeSchemaJSON,
    Superprompt: ComfyNodeSchemaJSON,
    GLIGENTextBoxApplyBatchCoords: ComfyNodeSchemaJSON,
    Intrinsic$_lora$_sampling: ComfyNodeSchemaJSON,
    CheckpointPerturbWeights: ComfyNodeSchemaJSON,
    Screencap$_mss: ComfyNodeSchemaJSON,
    WebcamCaptureCV2: ComfyNodeSchemaJSON,
    DifferentialDiffusionAdvanced: ComfyNodeSchemaJSON,
    FluxBlockLoraLoader: ComfyNodeSchemaJSON,
    FluxBlockLoraSelect: ComfyNodeSchemaJSON,
    CustomControlNetWeightsFluxFromList: ComfyNodeSchemaJSON,
    CheckpointLoaderKJ: ComfyNodeSchemaJSON,
    TorchCompileModelFluxAdvanced: ComfyNodeSchemaJSON,
    TorchCompileVAE: ComfyNodeSchemaJSON,
    TorchCompileControlNet: ComfyNodeSchemaJSON,
    CreateInstanceDiffusionTracking: ComfyNodeSchemaJSON,
    AppendInstanceDiffusionTracking: ComfyNodeSchemaJSON,
    DrawInstanceDiffusionTracking: ComfyNodeSchemaJSON,
    Compare$7$$D83D$$DD2C: ComfyNodeSchemaJSON,
    Int$7$$D83D$$DD2C: ComfyNodeSchemaJSON,
    Float$7$$D83D$$DD2C: ComfyNodeSchemaJSON,
    Bool$7$$D83D$$DD2C: ComfyNodeSchemaJSON,
    String$7$$D83D$$DD2C: ComfyNodeSchemaJSON,
    If_ANY_return_A_else_B$7$$D83D$$DD2C: ComfyNodeSchemaJSON,
    DebugPrint$7$$D83D$$DD2C: ComfyNodeSchemaJSON,
    MarigoldModelLoader: ComfyNodeSchemaJSON,
    MarigoldDepthEstimation$_v2: ComfyNodeSchemaJSON,
    MarigoldDepthEstimation$_v2$_video: ComfyNodeSchemaJSON,
    MarigoldDepthEstimation: ComfyNodeSchemaJSON,
    MarigoldDepthEstimationVideo: ComfyNodeSchemaJSON,
    ColorizeDepthmap: ComfyNodeSchemaJSON,
    SaveImageOpenEXR: ComfyNodeSchemaJSON,
    RemapDepth: ComfyNodeSchemaJSON,
    AppInfo: ComfyNodeSchemaJSON,
    TESTNODE$_: ComfyNodeSchemaJSON,
    TESTNODE$_TOKEN: ComfyNodeSchemaJSON,
    RandomPrompt: ComfyNodeSchemaJSON,
    EmbeddingPrompt: ComfyNodeSchemaJSON,
    PromptSlide: ComfyNodeSchemaJSON,
    GLIGENTextBoxApply$_Advanced: ComfyNodeSchemaJSON,
    PromptSimplification: ComfyNodeSchemaJSON,
    GridInput: ComfyNodeSchemaJSON,
    ImagesPrompt$_: ComfyNodeSchemaJSON,
    KeyInput: ComfyNodeSchemaJSON,
    FloatSlider: ComfyNodeSchemaJSON,
    IntNumber: ComfyNodeSchemaJSON,
    TextInput$_: ComfyNodeSchemaJSON,
    Font: ComfyNodeSchemaJSON,
    LimitNumber: ComfyNodeSchemaJSON,
    PromptImage: ComfyNodeSchemaJSON,
    SaveImageToLocal: ComfyNodeSchemaJSON,
    SaveImageAndMetadata$_: ComfyNodeSchemaJSON,
    ComparingTwoFrames$_: ComfyNodeSchemaJSON,
    CreateJsonNode: ComfyNodeSchemaJSON,
    MirroredImage: ComfyNodeSchemaJSON,
    NoiseImage: ComfyNodeSchemaJSON,
    GradientImage: ComfyNodeSchemaJSON,
    TransparentImage: ComfyNodeSchemaJSON,
    ResizeImageMixlab: ComfyNodeSchemaJSON,
    LoadImagesFromPath: ComfyNodeSchemaJSON,
    LoadImagesFromURL: ComfyNodeSchemaJSON,
    LoadImagesToBatch: ComfyNodeSchemaJSON,
    TextImage: ComfyNodeSchemaJSON,
    EnhanceImage: ComfyNodeSchemaJSON,
    SvgImage: ComfyNodeSchemaJSON,
    ImageListToBatch$_: ComfyNodeSchemaJSON,
    ImageBatchToList$_: ComfyNodeSchemaJSON,
    ImageCropByAlpha: ComfyNodeSchemaJSON,
    GetImageSize$_: ComfyNodeSchemaJSON,
    _3DImage: ComfyNodeSchemaJSON,
    DepthViewer: ComfyNodeSchemaJSON,
    ImageColorTransfer: ComfyNodeSchemaJSON,
    Color: ComfyNodeSchemaJSON,
    ShowLayer: ComfyNodeSchemaJSON,
    NewLayer: ComfyNodeSchemaJSON,
    MergeLayers: ComfyNodeSchemaJSON,
    CompositeImages$_: ComfyNodeSchemaJSON,
    SplitImage: ComfyNodeSchemaJSON,
    CenterImage: ComfyNodeSchemaJSON,
    GridOutput: ComfyNodeSchemaJSON,
    GridDisplayAndSave: ComfyNodeSchemaJSON,
    SplitLongMask: ComfyNodeSchemaJSON,
    FeatheredMask: ComfyNodeSchemaJSON,
    SmoothMask: ComfyNodeSchemaJSON,
    FaceToMask: ComfyNodeSchemaJSON,
    AreaToMask: ComfyNodeSchemaJSON,
    OutlineMask: ComfyNodeSchemaJSON,
    MaskListMerge$_: ComfyNodeSchemaJSON,
    PreviewMask$_: ComfyNodeSchemaJSON,
    ScreenShare: ComfyNodeSchemaJSON,
    FloatingVideo: ComfyNodeSchemaJSON,
    SpeechRecognition: ComfyNodeSchemaJSON,
    SpeechSynthesis: ComfyNodeSchemaJSON,
    AudioPlay: ComfyNodeSchemaJSON,
    AnalyzeAudio: ComfyNodeSchemaJSON,
    TextToNumber: ComfyNodeSchemaJSON,
    JoinWithDelimiter: ComfyNodeSchemaJSON,
    MultiplicationNode: ComfyNodeSchemaJSON,
    DynamicDelayProcessor: ComfyNodeSchemaJSON,
    SwitchByIndex: ComfyNodeSchemaJSON,
    ListSplit$_: ComfyNodeSchemaJSON,
    Seed$_: ComfyNodeSchemaJSON,
    CkptNames$_: ComfyNodeSchemaJSON,
    SamplerNames$_: ComfyNodeSchemaJSON,
    LoraNames$_: ComfyNodeSchemaJSON,
    ApplyVisualStylePrompting$_: ComfyNodeSchemaJSON,
    StyleAlignedReferenceSampler$_: ComfyNodeSchemaJSON,
    StyleAlignedSampleReferenceLatents$_: ComfyNodeSchemaJSON,
    StyleAlignedBatchAlign$_: ComfyNodeSchemaJSON,
    MaskListReplace$_: ComfyNodeSchemaJSON,
    IncrementingListNode$_: ComfyNodeSchemaJSON,
    P5Input: ComfyNodeSchemaJSON,
    ChatGPTOpenAI: ComfyNodeSchemaJSON,
    SiliconflowLLM: ComfyNodeSchemaJSON,
    SiliconflowTextToImageNode: ComfyNodeSchemaJSON,
    ShowTextForGPT: ComfyNodeSchemaJSON,
    CharacterInText: ComfyNodeSchemaJSON,
    TextSplitByDelimiter: ComfyNodeSchemaJSON,
    JsonRepair: ComfyNodeSchemaJSON,
    SimulateDevDesignDiscussions: ComfyNodeSchemaJSON,
    EditMask: ComfyNodeSchemaJSON,
    LaMaInpainting: ComfyNodeSchemaJSON,
    ClipInterrogator: ComfyNodeSchemaJSON,
    PromptGenerate$_Mix: ComfyNodeSchemaJSON,
    ChinesePrompt$_Mix: ComfyNodeSchemaJSON,
    RembgNode$_Mix: ComfyNodeSchemaJSON,
    VAEEncodeForInpaint$_Frames: ComfyNodeSchemaJSON,
    ImageListReplace$_: ComfyNodeSchemaJSON,
    LoadVideoAndSegment$_: ComfyNodeSchemaJSON,
    VideoCombine$_Adv: ComfyNodeSchemaJSON,
    LoadAndCombinedAudio$_: ComfyNodeSchemaJSON,
    CombineAudioVideo: ComfyNodeSchemaJSON,
    ScenesNode$_: ComfyNodeSchemaJSON,
    GenerateFramesByCount: ComfyNodeSchemaJSON,
    LoadTripoSRModel$_: ComfyNodeSchemaJSON,
    TripoSRSampler$_: ComfyNodeSchemaJSON,
    SaveTripoSRMesh: ComfyNodeSchemaJSON,
    MiniCPM$_VQA$_Simple: ComfyNodeSchemaJSON,
    ScenedetectNode$_: ComfyNodeSchemaJSON,
    SceneInfoNode: ComfyNodeSchemaJSON,
    SenseVoiceNode: ComfyNodeSchemaJSON,
    VideoGenKlingNode: ComfyNodeSchemaJSON,
    VideoGenRunwayGen3Node: ComfyNodeSchemaJSON,
    VideoGenLumaDreamMachineNode: ComfyNodeSchemaJSON,
    LoadVideoFromURL: ComfyNodeSchemaJSON,
    ChatGPT_Simple_$_O: ComfyNodeSchemaJSON,
    ChatGPT_compact_$_O: ComfyNodeSchemaJSON,
    load$_openAI_$_O: ComfyNodeSchemaJSON,
    Chat$_Message_$_O: ComfyNodeSchemaJSON,
    combine$_chat$_messages_$_O: ComfyNodeSchemaJSON,
    Chat_completion_$_O: ComfyNodeSchemaJSON,
    create_image_$_O: ComfyNodeSchemaJSON,
    variation$_image_$_O: ComfyNodeSchemaJSON,
    LatentUpscaleFactor_$_O: ComfyNodeSchemaJSON,
    LatentUpscaleFactorSimple_$_O: ComfyNodeSchemaJSON,
    selectLatentFromBatch_$_O: ComfyNodeSchemaJSON,
    RandomNSP_$_O: ComfyNodeSchemaJSON,
    ConcatRandomNSP$_O: ComfyNodeSchemaJSON,
    Concat_Text_$_O: ComfyNodeSchemaJSON,
    QOL_Split_String: ComfyNodeSchemaJSON,
    Trim_Text_$_O: ComfyNodeSchemaJSON,
    Replace_Text_$_O: ComfyNodeSchemaJSON,
    saveTextToFile_$_O: ComfyNodeSchemaJSON,
    Text2Image_$_O: ComfyNodeSchemaJSON,
    ImageScaleFactor_$_O: ComfyNodeSchemaJSON,
    ImageScaleFactorSimple_$_O: ComfyNodeSchemaJSON,
    Equation1param_$_O: ComfyNodeSchemaJSON,
    Equation2params_$_O: ComfyNodeSchemaJSON,
    floatToInt_$_O: ComfyNodeSchemaJSON,
    intToFloat_$_O: ComfyNodeSchemaJSON,
    floatToText_$_O: ComfyNodeSchemaJSON,
    GetImage$_$1Width$AndHeight$2_$_O: ComfyNodeSchemaJSON,
    GetLatent$_$1Width$AndHeight$2_$_O: ComfyNodeSchemaJSON,
    debug_messages$_O: ComfyNodeSchemaJSON,
    debug_Completeion_$_O: ComfyNodeSchemaJSON,
    Debug_Text_$_O: ComfyNodeSchemaJSON,
    Debug_Text_route_$_O: ComfyNodeSchemaJSON,
    Note_$_O: ComfyNodeSchemaJSON,
    Text_$_O: ComfyNodeSchemaJSON,
    seed_$_O: ComfyNodeSchemaJSON,
    int_$_O: ComfyNodeSchemaJSON,
    float_$_O: ComfyNodeSchemaJSON,
    ChatGPT_$_O: ComfyNodeSchemaJSON,
    Chat$_Message$_fromString_$_O: ComfyNodeSchemaJSON,
    compine$_chat$_messages_$_O: ComfyNodeSchemaJSON,
    Chat$_Completion_$_O: ComfyNodeSchemaJSON,
    create$_image_$_O: ComfyNodeSchemaJSON,
    String_$_O: ComfyNodeSchemaJSON,
    Debug_String_$_O: ComfyNodeSchemaJSON,
    concat_Strings_$_O: ComfyNodeSchemaJSON,
    trim_String_$_O: ComfyNodeSchemaJSON,
    replace_String_$_O: ComfyNodeSchemaJSON,
    replace_String_advanced_$_O: ComfyNodeSchemaJSON,
    string2Image_$_O: ComfyNodeSchemaJSON,
    CLIPStringEncode_$_O: ComfyNodeSchemaJSON,
    LatentUpscaleMultiply: ComfyNodeSchemaJSON,
    DownloadAndLoadSAM2Model: ComfyNodeSchemaJSON,
    Sam2Segmentation: ComfyNodeSchemaJSON,
    Florence2toCoordinates: ComfyNodeSchemaJSON,
    Sam2AutoSegmentation: ComfyNodeSchemaJSON,
    Sam2VideoSegmentationAddPoints: ComfyNodeSchemaJSON,
    Sam2VideoSegmentation: ComfyNodeSchemaJSON,
    BNK$_CLIPTextEncodeAdvanced: ComfyNodeSchemaJSON,
    BNK$_CLIPTextEncodeSDXLAdvanced: ComfyNodeSchemaJSON,
    BNK$_AddCLIPSDXLParams: ComfyNodeSchemaJSON,
    BNK$_AddCLIPSDXLRParams: ComfyNodeSchemaJSON,
    CR_Image_Output: ComfyNodeSchemaJSON,
    CR_Latent_Batch_Size: ComfyNodeSchemaJSON,
    CR_Conditioning_Mixer: ComfyNodeSchemaJSON,
    CR_Select_Model: ComfyNodeSchemaJSON,
    CR_Seed: ComfyNodeSchemaJSON,
    CR_Prompt_Text: ComfyNodeSchemaJSON,
    CR_Combine_Prompt: ComfyNodeSchemaJSON,
    CR_VAE_Decode: ComfyNodeSchemaJSON,
    CR_Text_List: ComfyNodeSchemaJSON,
    CR_Prompt_List: ComfyNodeSchemaJSON,
    CR_Simple_List: ComfyNodeSchemaJSON,
    CR_Float_Range_List: ComfyNodeSchemaJSON,
    CR_Integer_Range_List: ComfyNodeSchemaJSON,
    CR_Load_Text_List: ComfyNodeSchemaJSON,
    CR_Binary_To_Bit_List: ComfyNodeSchemaJSON,
    CR_Text_Cycler: ComfyNodeSchemaJSON,
    CR_Value_Cycler: ComfyNodeSchemaJSON,
    CR_Load_Image_List: ComfyNodeSchemaJSON,
    CR_Load_Image_List_Plus: ComfyNodeSchemaJSON,
    CR_Load_GIF_As_List: ComfyNodeSchemaJSON,
    CR_Font_File_List: ComfyNodeSchemaJSON,
    CR_Batch_Images_From_List: ComfyNodeSchemaJSON,
    CR_Intertwine_Lists: ComfyNodeSchemaJSON,
    CR_Repeater: ComfyNodeSchemaJSON,
    CR_XY_Product: ComfyNodeSchemaJSON,
    CR_Text_List_To_String: ComfyNodeSchemaJSON,
    CR_SD1$55_Aspect_Ratio: ComfyNodeSchemaJSON,
    CR_SDXL_Aspect_Ratio: ComfyNodeSchemaJSON,
    CR_Aspect_Ratio: ComfyNodeSchemaJSON,
    CR_Aspect_Ratio_Banners: ComfyNodeSchemaJSON,
    CR_Aspect_Ratio_Social_Media: ComfyNodeSchemaJSON,
    CR$_Aspect_Ratio_For_Print: ComfyNodeSchemaJSON,
    CR_Image_Size: ComfyNodeSchemaJSON,
    CR_Aspect_Ratio_SDXL: ComfyNodeSchemaJSON,
    CR_SDXL_Prompt_Mixer: ComfyNodeSchemaJSON,
    CR_Seed_to_Int: ComfyNodeSchemaJSON,
    CR_Apply_ControlNet: ComfyNodeSchemaJSON,
    CR_Multi$7ControlNet_Stack: ComfyNodeSchemaJSON,
    CR_Apply_Multi$7ControlNet: ComfyNodeSchemaJSON,
    CR_Load_LoRA: ComfyNodeSchemaJSON,
    CR_LoRA_Stack: ComfyNodeSchemaJSON,
    CR_Random_LoRA_Stack: ComfyNodeSchemaJSON,
    CR_Random_Weight_LoRA: ComfyNodeSchemaJSON,
    CR_Apply_LoRA_Stack: ComfyNodeSchemaJSON,
    CR_Apply_Model_Merge: ComfyNodeSchemaJSON,
    CR_Model_Merge_Stack: ComfyNodeSchemaJSON,
    CR_Data_Bus_In: ComfyNodeSchemaJSON,
    CR_Data_Bus_Out: ComfyNodeSchemaJSON,
    CR_8_Channel_In: ComfyNodeSchemaJSON,
    CR_8_Channel_Out: ComfyNodeSchemaJSON,
    CR_Module_Pipe_Loader: ComfyNodeSchemaJSON,
    CR_Module_Input: ComfyNodeSchemaJSON,
    CR_Module_Output: ComfyNodeSchemaJSON,
    CR_Image_Pipe_In: ComfyNodeSchemaJSON,
    CR_Image_Pipe_Edit: ComfyNodeSchemaJSON,
    CR_Image_Pipe_Out: ComfyNodeSchemaJSON,
    CR_Pipe_Switch: ComfyNodeSchemaJSON,
    CR_SDXL_Prompt_Mix_Presets: ComfyNodeSchemaJSON,
    CR_SDXL_Style_Text: ComfyNodeSchemaJSON,
    CR_SDXL_Base_Prompt_Encoder: ComfyNodeSchemaJSON,
    CR_Multi_Upscale_Stack: ComfyNodeSchemaJSON,
    CR_Upscale_Image: ComfyNodeSchemaJSON,
    CR_Apply_Multi_Upscale: ComfyNodeSchemaJSON,
    CR_XY_List: ComfyNodeSchemaJSON,
    CR_XY_Interpolate: ComfyNodeSchemaJSON,
    CR_XY_From_Folder: ComfyNodeSchemaJSON,
    CR_XY_Save_Grid_Image: ComfyNodeSchemaJSON,
    CR_XY_Index: ComfyNodeSchemaJSON,
    CR_Halftone_Grid: ComfyNodeSchemaJSON,
    CR_Color_Bars: ComfyNodeSchemaJSON,
    CR_Style_Bars: ComfyNodeSchemaJSON,
    CR_Checker_Pattern: ComfyNodeSchemaJSON,
    CR_Polygons: ComfyNodeSchemaJSON,
    CR_Color_Gradient: ComfyNodeSchemaJSON,
    CR_Radial_Gradient: ComfyNodeSchemaJSON,
    CR_Starburst_Lines: ComfyNodeSchemaJSON,
    CR_Starburst_Colors: ComfyNodeSchemaJSON,
    CR_Simple_Binary_Pattern: ComfyNodeSchemaJSON,
    CR_Binary_Pattern: ComfyNodeSchemaJSON,
    CR_Draw_Shape: ComfyNodeSchemaJSON,
    CR_Draw_Pie: ComfyNodeSchemaJSON,
    CR_Random_Shape_Pattern: ComfyNodeSchemaJSON,
    CR_Overlay_Text: ComfyNodeSchemaJSON,
    CR_Draw_Text: ComfyNodeSchemaJSON,
    CR_Mask_Text: ComfyNodeSchemaJSON,
    CR_Composite_Text: ComfyNodeSchemaJSON,
    CR_Simple_Text_Watermark: ComfyNodeSchemaJSON,
    CR_Select_Font: ComfyNodeSchemaJSON,
    CR_Halftone_Filter: ComfyNodeSchemaJSON,
    CR_Color_Tint: ComfyNodeSchemaJSON,
    CR_Vignette_Filter: ComfyNodeSchemaJSON,
    CR_Page_Layout: ComfyNodeSchemaJSON,
    CR_Image_Panel: ComfyNodeSchemaJSON,
    CR_Image_Grid_Panel: ComfyNodeSchemaJSON,
    CR_Image_Border: ComfyNodeSchemaJSON,
    CR_Feathered_Border: ComfyNodeSchemaJSON,
    CR_Simple_Text_Panel: ComfyNodeSchemaJSON,
    CR_Color_Panel: ComfyNodeSchemaJSON,
    CR_Overlay_Transparent_Image: ComfyNodeSchemaJSON,
    CR_Half_Drop_Panel: ComfyNodeSchemaJSON,
    CR_Diamond_Panel: ComfyNodeSchemaJSON,
    CR_Simple_Meme_Template: ComfyNodeSchemaJSON,
    CR_Simple_Banner: ComfyNodeSchemaJSON,
    CR_Comic_Panel_Templates: ComfyNodeSchemaJSON,
    CR_Simple_Image_Compare: ComfyNodeSchemaJSON,
    CR_Thumbnail_Preview: ComfyNodeSchemaJSON,
    CR_Seamless_Checker: ComfyNodeSchemaJSON,
    CR_Image_Input_Switch: ComfyNodeSchemaJSON,
    CR_Image_Input_Switch_$14_way$2: ComfyNodeSchemaJSON,
    CR_Latent_Input_Switch: ComfyNodeSchemaJSON,
    CR_Conditioning_Input_Switch: ComfyNodeSchemaJSON,
    CR_Clip_Input_Switch: ComfyNodeSchemaJSON,
    CR_Model_Input_Switch: ComfyNodeSchemaJSON,
    CR_ControlNet_Input_Switch: ComfyNodeSchemaJSON,
    CR_VAE_Input_Switch: ComfyNodeSchemaJSON,
    CR_Text_Input_Switch: ComfyNodeSchemaJSON,
    CR_Text_Input_Switch_$14_way$2: ComfyNodeSchemaJSON,
    CR_Switch_Model_and_CLIP: ComfyNodeSchemaJSON,
    CR_Batch_Process_Switch: ComfyNodeSchemaJSON,
    CR_Img2Img_Process_Switch: ComfyNodeSchemaJSON,
    CR_Hires_Fix_Process_Switch: ComfyNodeSchemaJSON,
    CR_Index: ComfyNodeSchemaJSON,
    CR_Index_Increment: ComfyNodeSchemaJSON,
    CR_Index_Multiply: ComfyNodeSchemaJSON,
    CR_Index_Reset: ComfyNodeSchemaJSON,
    CR_Trigger: ComfyNodeSchemaJSON,
    CR_String_To_Number: ComfyNodeSchemaJSON,
    CR_String_To_Combo: ComfyNodeSchemaJSON,
    CR_Float_To_String: ComfyNodeSchemaJSON,
    CR_Float_To_Integer: ComfyNodeSchemaJSON,
    CR_Integer_To_String: ComfyNodeSchemaJSON,
    CR_String_To_Boolean: ComfyNodeSchemaJSON,
    CR_Random_Hex_Color: ComfyNodeSchemaJSON,
    CR_Random_RGB: ComfyNodeSchemaJSON,
    CR_Random_Multiline_Values: ComfyNodeSchemaJSON,
    CR_Random_Multiline_Colors: ComfyNodeSchemaJSON,
    CR_Random_RGB_Gradient: ComfyNodeSchemaJSON,
    CR_Random_Panel_Codes: ComfyNodeSchemaJSON,
    CR_Text: ComfyNodeSchemaJSON,
    CR_Multiline_Text: ComfyNodeSchemaJSON,
    CR_Split_String: ComfyNodeSchemaJSON,
    CR_Text_Concatenate: ComfyNodeSchemaJSON,
    CR_Text_Replace: ComfyNodeSchemaJSON,
    CR_Text_Length: ComfyNodeSchemaJSON,
    CR_Text_Operation: ComfyNodeSchemaJSON,
    CR_Text_Blacklist: ComfyNodeSchemaJSON,
    CR_Save_Text_To_File: ComfyNodeSchemaJSON,
    CR_Set_Value_On_Boolean: ComfyNodeSchemaJSON,
    CR_Set_Value_On_Binary: ComfyNodeSchemaJSON,
    CR_Set_Value_on_String: ComfyNodeSchemaJSON,
    CR_Set_Switch_From_String: ComfyNodeSchemaJSON,
    CR_Value: ComfyNodeSchemaJSON,
    CR_Integer_Multiple: ComfyNodeSchemaJSON,
    CR_Clamp_Value: ComfyNodeSchemaJSON,
    CR_Math_Operation: ComfyNodeSchemaJSON,
    CR_Get_Parameter_From_Prompt: ComfyNodeSchemaJSON,
    CR_Select_Resize_Method: ComfyNodeSchemaJSON,
    CR_Select_ISO_Size: ComfyNodeSchemaJSON,
    CR_Simple_Schedule: ComfyNodeSchemaJSON,
    CR_Central_Schedule: ComfyNodeSchemaJSON,
    CR_Combine_Schedules: ComfyNodeSchemaJSON,
    CR_Output_Schedule_To_File: ComfyNodeSchemaJSON,
    CR_Load_Schedule_From_File: ComfyNodeSchemaJSON,
    CR_Schedule_Input_Switch: ComfyNodeSchemaJSON,
    CR_Bit_Schedule: ComfyNodeSchemaJSON,
    CR_Simple_Value_Scheduler: ComfyNodeSchemaJSON,
    CR_Simple_Text_Scheduler: ComfyNodeSchemaJSON,
    CR_Value_Scheduler: ComfyNodeSchemaJSON,
    CR_Text_Scheduler: ComfyNodeSchemaJSON,
    CR_Load_Scheduled_Models: ComfyNodeSchemaJSON,
    CR_Load_Scheduled_LoRAs: ComfyNodeSchemaJSON,
    CR_Prompt_Scheduler: ComfyNodeSchemaJSON,
    CR_Simple_Prompt_Scheduler: ComfyNodeSchemaJSON,
    CR_Keyframe_List: ComfyNodeSchemaJSON,
    CR_Encode_Scheduled_Prompts: ComfyNodeSchemaJSON,
    CR_Gradient_Float: ComfyNodeSchemaJSON,
    CR_Gradient_Integer: ComfyNodeSchemaJSON,
    CR_Increment_Float: ComfyNodeSchemaJSON,
    CR_Increment_Integer: ComfyNodeSchemaJSON,
    CR_Interpolate_Latents: ComfyNodeSchemaJSON,
    CR_Debatch_Frames: ComfyNodeSchemaJSON,
    CR_Current_Frame: ComfyNodeSchemaJSON,
    CR_Load_Animation_Frames: ComfyNodeSchemaJSON,
    CR_Load_Flow_Frames: ComfyNodeSchemaJSON,
    CR_Output_Flow_Frames: ComfyNodeSchemaJSON,
    CR_Prompt_List_Keyframes: ComfyNodeSchemaJSON,
    CR_Simple_Prompt_List: ComfyNodeSchemaJSON,
    CR_Simple_Prompt_List_Keyframes: ComfyNodeSchemaJSON,
    CR_Cycle_Models: ComfyNodeSchemaJSON,
    CR_Cycle_LoRAs: ComfyNodeSchemaJSON,
    CR_Cycle_Text: ComfyNodeSchemaJSON,
    CR_Cycle_Text_Simple: ComfyNodeSchemaJSON,
    CR_Cycle_Images: ComfyNodeSchemaJSON,
    CR_Cycle_Images_Simple: ComfyNodeSchemaJSON,
    CR_Model_List: ComfyNodeSchemaJSON,
    CR_LoRA_List: ComfyNodeSchemaJSON,
    CR_Text_List_Simple: ComfyNodeSchemaJSON,
    CR_Image_List: ComfyNodeSchemaJSON,
    CR_Image_List_Simple: ComfyNodeSchemaJSON,
    AnimeFace$_SemSegPreprocessor: ComfyNodeSchemaJSON,
    AnyLineArtPreprocessor$_aux: ComfyNodeSchemaJSON,
    BinaryPreprocessor: ComfyNodeSchemaJSON,
    CannyEdgePreprocessor: ComfyNodeSchemaJSON,
    ColorPreprocessor: ComfyNodeSchemaJSON,
    DensePosePreprocessor: ComfyNodeSchemaJSON,
    DepthAnythingPreprocessor: ComfyNodeSchemaJSON,
    Zoe$_DepthAnythingPreprocessor: ComfyNodeSchemaJSON,
    DepthAnythingV2Preprocessor: ComfyNodeSchemaJSON,
    DiffusionEdge$_Preprocessor: ComfyNodeSchemaJSON,
    DSINE$7NormalMapPreprocessor: ComfyNodeSchemaJSON,
    DWPreprocessor: ComfyNodeSchemaJSON,
    AnimalPosePreprocessor: ComfyNodeSchemaJSON,
    HEDPreprocessor: ComfyNodeSchemaJSON,
    FakeScribblePreprocessor: ComfyNodeSchemaJSON,
    InpaintPreprocessor: ComfyNodeSchemaJSON,
    LeReS$7DepthMapPreprocessor: ComfyNodeSchemaJSON,
    LineArtPreprocessor: ComfyNodeSchemaJSON,
    AnimeLineArtPreprocessor: ComfyNodeSchemaJSON,
    LineartStandardPreprocessor: ComfyNodeSchemaJSON,
    Manga2Anime$_LineArt$_Preprocessor: ComfyNodeSchemaJSON,
    MediaPipe$7FaceMeshPreprocessor: ComfyNodeSchemaJSON,
    MeshGraphormer$7DepthMapPreprocessor: ComfyNodeSchemaJSON,
    MeshGraphormer$6ImpactDetector$7DepthMapPreprocessor: ComfyNodeSchemaJSON,
    Metric3D$7DepthMapPreprocessor: ComfyNodeSchemaJSON,
    Metric3D$7NormalMapPreprocessor: ComfyNodeSchemaJSON,
    MiDaS$7NormalMapPreprocessor: ComfyNodeSchemaJSON,
    MiDaS$7DepthMapPreprocessor: ComfyNodeSchemaJSON,
    M$7LSDPreprocessor: ComfyNodeSchemaJSON,
    BAE$7NormalMapPreprocessor: ComfyNodeSchemaJSON,
    OneFormer$7COCO$7SemSegPreprocessor: ComfyNodeSchemaJSON,
    OneFormer$7ADE20K$7SemSegPreprocessor: ComfyNodeSchemaJSON,
    OpenposePreprocessor: ComfyNodeSchemaJSON,
    PiDiNetPreprocessor: ComfyNodeSchemaJSON,
    SavePoseKpsAsJsonFile: ComfyNodeSchemaJSON,
    FacialPartColoringFromPoseKps: ComfyNodeSchemaJSON,
    UpperBodyTrackingFromPoseKps: ComfyNodeSchemaJSON,
    RenderPeopleKps: ComfyNodeSchemaJSON,
    RenderAnimalKps: ComfyNodeSchemaJSON,
    PyraCannyPreprocessor: ComfyNodeSchemaJSON,
    ImageLuminanceDetector: ComfyNodeSchemaJSON,
    ImageIntensityDetector: ComfyNodeSchemaJSON,
    ScribblePreprocessor: ComfyNodeSchemaJSON,
    Scribble$_XDoG$_Preprocessor: ComfyNodeSchemaJSON,
    Scribble$_PiDiNet$_Preprocessor: ComfyNodeSchemaJSON,
    SAMPreprocessor: ComfyNodeSchemaJSON,
    ShufflePreprocessor: ComfyNodeSchemaJSON,
    TEEDPreprocessor: ComfyNodeSchemaJSON,
    TilePreprocessor: ComfyNodeSchemaJSON,
    TTPlanet$_TileGF$_Preprocessor: ComfyNodeSchemaJSON,
    TTPlanet$_TileSimple$_Preprocessor: ComfyNodeSchemaJSON,
    UniFormer$7SemSegPreprocessor: ComfyNodeSchemaJSON,
    SemSegPreprocessor: ComfyNodeSchemaJSON,
    Unimatch$_OptFlowPreprocessor: ComfyNodeSchemaJSON,
    MaskOptFlow: ComfyNodeSchemaJSON,
    Zoe$7DepthMapPreprocessor: ComfyNodeSchemaJSON,
    AIO$_Preprocessor: ComfyNodeSchemaJSON,
    ControlNetPreprocessorSelector: ComfyNodeSchemaJSON,
    PixelPerfectResolution: ComfyNodeSchemaJSON,
    ImageGenResolutionFromImage: ComfyNodeSchemaJSON,
    ImageGenResolutionFromLatent: ComfyNodeSchemaJSON,
    HintImageEnchance: ComfyNodeSchemaJSON,
    ExecuteAllControlNetPreprocessors: ComfyNodeSchemaJSON,
    ControlNetAuxSimpleAddText: ComfyNodeSchemaJSON,
    BNK$_CutoffBasePrompt: ComfyNodeSchemaJSON,
    BNK$_CutoffSetRegions: ComfyNodeSchemaJSON,
    BNK$_CutoffRegionsToConditioning: ComfyNodeSchemaJSON,
    BNK$_CutoffRegionsToConditioning$_ADV: ComfyNodeSchemaJSON,
    CLIPTextEncodeSDXL$6: ComfyNodeSchemaJSON,
    ConditioningCombineMultiple$6: ComfyNodeSchemaJSON,
    SD3NegativeConditioning$6: ComfyNodeSchemaJSON,
    FluxAttentionSeeker$6: ComfyNodeSchemaJSON,
    SD3AttentionSeekerLG$6: ComfyNodeSchemaJSON,
    SD3AttentionSeekerT5$6: ComfyNodeSchemaJSON,
    FluxBlocksBuster$6: ComfyNodeSchemaJSON,
    ImageEnhanceDifference$6: ComfyNodeSchemaJSON,
    ImageBatchMultiple$6: ComfyNodeSchemaJSON,
    ImageExpandBatch$6: ComfyNodeSchemaJSON,
    ImageFromBatch$6: ComfyNodeSchemaJSON,
    ImageListToBatch$6: ComfyNodeSchemaJSON,
    ImageBatchToList$6: ComfyNodeSchemaJSON,
    ImageCompositeFromMaskBatch$6: ComfyNodeSchemaJSON,
    ImageComposite$6: ComfyNodeSchemaJSON,
    ImageCrop$6: ComfyNodeSchemaJSON,
    ImageFlip$6: ComfyNodeSchemaJSON,
    ImageRandomTransform$6: ComfyNodeSchemaJSON,
    ImageRemoveAlpha$6: ComfyNodeSchemaJSON,
    ImageRemoveBackground$6: ComfyNodeSchemaJSON,
    ImageResize$6: ComfyNodeSchemaJSON,
    ImageSeamCarving$6: ComfyNodeSchemaJSON,
    ImageTile$6: ComfyNodeSchemaJSON,
    ImageUntile$6: ComfyNodeSchemaJSON,
    RemBGSession$6: ComfyNodeSchemaJSON,
    TransparentBGSession$6: ComfyNodeSchemaJSON,
    ImageApplyLUT$6: ComfyNodeSchemaJSON,
    ImageCASharpening$6: ComfyNodeSchemaJSON,
    ImageDesaturate$6: ComfyNodeSchemaJSON,
    PixelOEPixelize$6: ComfyNodeSchemaJSON,
    ImagePosterize$6: ComfyNodeSchemaJSON,
    ImageColorMatch$6: ComfyNodeSchemaJSON,
    ImageColorMatchAdobe$6: ComfyNodeSchemaJSON,
    ImageHistogramMatch$6: ComfyNodeSchemaJSON,
    ImageSmartSharpen$6: ComfyNodeSchemaJSON,
    GetImageSize$6: ComfyNodeSchemaJSON,
    ImageToDevice$6: ComfyNodeSchemaJSON,
    ImagePreviewFromLatent$6: ComfyNodeSchemaJSON,
    NoiseFromImage$6: ComfyNodeSchemaJSON,
    MaskBlur$6: ComfyNodeSchemaJSON,
    MaskBoundingBox$6: ComfyNodeSchemaJSON,
    MaskFix$6: ComfyNodeSchemaJSON,
    MaskFlip$6: ComfyNodeSchemaJSON,
    MaskFromColor$6: ComfyNodeSchemaJSON,
    MaskFromList$6: ComfyNodeSchemaJSON,
    MaskFromRGBCMYBW$6: ComfyNodeSchemaJSON,
    MaskFromSegmentation$6: ComfyNodeSchemaJSON,
    MaskPreview$6: ComfyNodeSchemaJSON,
    MaskSmooth$6: ComfyNodeSchemaJSON,
    TransitionMask$6: ComfyNodeSchemaJSON,
    MaskBatch$6: ComfyNodeSchemaJSON,
    MaskExpandBatch$6: ComfyNodeSchemaJSON,
    MaskFromBatch$6: ComfyNodeSchemaJSON,
    KSamplerVariationsStochastic$6: ComfyNodeSchemaJSON,
    KSamplerVariationsWithNoise$6: ComfyNodeSchemaJSON,
    InjectLatentNoise$6: ComfyNodeSchemaJSON,
    FluxSamplerParams$6: ComfyNodeSchemaJSON,
    GuidanceTimestepping$6: ComfyNodeSchemaJSON,
    PlotParameters$6: ComfyNodeSchemaJSON,
    TextEncodeForSamplerParams$6: ComfyNodeSchemaJSON,
    SamplerSelectHelper$6: ComfyNodeSchemaJSON,
    SchedulerSelectHelper$6: ComfyNodeSchemaJSON,
    LorasForFluxParams$6: ComfyNodeSchemaJSON,
    ModelSamplingSD3Advanced$6: ComfyNodeSchemaJSON,
    ApplyCLIPSeg$6: ComfyNodeSchemaJSON,
    LoadCLIPSegModels$6: ComfyNodeSchemaJSON,
    DrawText$6: ComfyNodeSchemaJSON,
    BatchCount$6: ComfyNodeSchemaJSON,
    ConsoleDebug$6: ComfyNodeSchemaJSON,
    DebugTensorShape$6: ComfyNodeSchemaJSON,
    DisplayAny: ComfyNodeSchemaJSON,
    ModelCompile$6: ComfyNodeSchemaJSON,
    RemoveLatentMask$6: ComfyNodeSchemaJSON,
    SDXLEmptyLatentSizePicker$6: ComfyNodeSchemaJSON,
    SimpleComparison$6: ComfyNodeSchemaJSON,
    SimpleCondition$6: ComfyNodeSchemaJSON,
    SimpleMath$6: ComfyNodeSchemaJSON,
    SimpleMathDual$6: ComfyNodeSchemaJSON,
    SimpleMathCondition$6: ComfyNodeSchemaJSON,
    SimpleMathBoolean$6: ComfyNodeSchemaJSON,
    SimpleMathFloat$6: ComfyNodeSchemaJSON,
    SimpleMathInt$6: ComfyNodeSchemaJSON,
    SimpleMathPercent$6: ComfyNodeSchemaJSON,
    SimpleMathSlider$6: ComfyNodeSchemaJSON,
    SimpleMathSliderLowRes$6: ComfyNodeSchemaJSON,
    Lerp: ComfyNodeSchemaJSON,
    SinWave: ComfyNodeSchemaJSON,
    InvSinWave: ComfyNodeSchemaJSON,
    CosWave: ComfyNodeSchemaJSON,
    InvCosWave: ComfyNodeSchemaJSON,
    SquareWave: ComfyNodeSchemaJSON,
    SawtoothWave: ComfyNodeSchemaJSON,
    TriangleWave: ComfyNodeSchemaJSON,
    AbsCosWave: ComfyNodeSchemaJSON,
    AbsSinWave: ComfyNodeSchemaJSON,
    PromptSchedule: ComfyNodeSchemaJSON,
    ValueSchedule: ComfyNodeSchemaJSON,
    PromptScheduleNodeFlow: ComfyNodeSchemaJSON,
    PromptScheduleNodeFlowEnd: ComfyNodeSchemaJSON,
    PromptScheduleEncodeSDXL: ComfyNodeSchemaJSON,
    StringSchedule: ComfyNodeSchemaJSON,
    BatchPromptSchedule: ComfyNodeSchemaJSON,
    BatchValueSchedule: ComfyNodeSchemaJSON,
    BatchPromptScheduleEncodeSDXL: ComfyNodeSchemaJSON,
    BatchStringSchedule: ComfyNodeSchemaJSON,
    BatchValueScheduleLatentInput: ComfyNodeSchemaJSON,
    BatchPromptScheduleSDXLLatentInput: ComfyNodeSchemaJSON,
    BatchPromptScheduleLatentInput: ComfyNodeSchemaJSON,
    ImagesFromBatchSchedule: ComfyNodeSchemaJSON,
    StringConcatenate: ComfyNodeSchemaJSON,
    Init_FizzFrame: ComfyNodeSchemaJSON,
    FizzFrame: ComfyNodeSchemaJSON,
    FizzFrameConcatenate: ComfyNodeSchemaJSON,
    ConcatStringSingle: ComfyNodeSchemaJSON,
    convertKeyframeKeysToBatchKeys: ComfyNodeSchemaJSON,
    CalculateFrameOffset: ComfyNodeSchemaJSON,
    IPAdapter: ComfyNodeSchemaJSON,
    IPAdapterAdvanced: ComfyNodeSchemaJSON,
    IPAdapterBatch: ComfyNodeSchemaJSON,
    IPAdapterFaceID: ComfyNodeSchemaJSON,
    IPAdapterFaceIDKolors: ComfyNodeSchemaJSON,
    IPAAdapterFaceIDBatch: ComfyNodeSchemaJSON,
    IPAdapterTiled: ComfyNodeSchemaJSON,
    IPAdapterTiledBatch: ComfyNodeSchemaJSON,
    IPAdapterEmbeds: ComfyNodeSchemaJSON,
    IPAdapterEmbedsBatch: ComfyNodeSchemaJSON,
    IPAdapterStyleComposition: ComfyNodeSchemaJSON,
    IPAdapterStyleCompositionBatch: ComfyNodeSchemaJSON,
    IPAdapterMS: ComfyNodeSchemaJSON,
    IPAdapterClipVisionEnhancer: ComfyNodeSchemaJSON,
    IPAdapterClipVisionEnhancerBatch: ComfyNodeSchemaJSON,
    IPAdapterFromParams: ComfyNodeSchemaJSON,
    IPAdapterPreciseStyleTransfer: ComfyNodeSchemaJSON,
    IPAdapterPreciseStyleTransferBatch: ComfyNodeSchemaJSON,
    IPAdapterPreciseComposition: ComfyNodeSchemaJSON,
    IPAdapterPreciseCompositionBatch: ComfyNodeSchemaJSON,
    IPAdapterUnifiedLoader: ComfyNodeSchemaJSON,
    IPAdapterUnifiedLoaderFaceID: ComfyNodeSchemaJSON,
    IPAdapterModelLoader: ComfyNodeSchemaJSON,
    IPAdapterInsightFaceLoader: ComfyNodeSchemaJSON,
    IPAdapterUnifiedLoaderCommunity: ComfyNodeSchemaJSON,
    IPAdapterEncoder: ComfyNodeSchemaJSON,
    IPAdapterCombineEmbeds: ComfyNodeSchemaJSON,
    IPAdapterNoise: ComfyNodeSchemaJSON,
    PrepImageForClipVision: ComfyNodeSchemaJSON,
    IPAdapterSaveEmbeds: ComfyNodeSchemaJSON,
    IPAdapterLoadEmbeds: ComfyNodeSchemaJSON,
    IPAdapterWeights: ComfyNodeSchemaJSON,
    IPAdapterCombineWeights: ComfyNodeSchemaJSON,
    IPAdapterWeightsFromStrategy: ComfyNodeSchemaJSON,
    IPAdapterPromptScheduleFromWeightsStrategy: ComfyNodeSchemaJSON,
    IPAdapterRegionalConditioning: ComfyNodeSchemaJSON,
    IPAdapterCombineParams: ComfyNodeSchemaJSON,
    Lora_Loader_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Resolutions_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Basic_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    Generation_TXT_IMG_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    Crop_Image_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    ImageToImage_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    CtrlNet_CannyEdge_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    CtrlNet_ZoeDepth_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    CtrlNet_MiDaS_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    CtrlNet_OpenPose_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    Revision_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    IP_Adapter_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    IP_Adapter_Tiled_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    InstantID_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    Image_Prepare_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    InstantID_Source_Prepare_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    InstantID_Pose_Prepare_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    InstantID_Mask_Prepare_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    Sampler_Scheduler_Settings_$1JPS$2: ComfyNodeSchemaJSON,
    Integer_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    Image_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    Latent_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    Conditioning_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    Model_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    IPA_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    VAE_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    Mask_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    ControlNet_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    Disable_Enable_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    Enable_Disable_Switch_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Basic_Settings_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Settings_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    Crop_Image_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    ImageToImage_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    CtrlNet_CannyEdge_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    CtrlNet_ZoeDepth_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    CtrlNet_MiDaS_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    CtrlNet_OpenPose_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    IP_Adapter_Settings_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    IP_Adapter_Tiled_Settings_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    InstantID_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    Image_Prepare_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    InstantID_Source_Prepare_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    InstantID_Pose_Prepare_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    InstantID_Mask_Prepare_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    Revision_Settings_Pipe_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Fundamentals_MultiPipe_$1JPS$2: ComfyNodeSchemaJSON,
    Images_Masks_MultiPipe_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Recommended_Resolution_Calc_$1JPS$2: ComfyNodeSchemaJSON,
    Resolution_Multiply_$1JPS$2: ComfyNodeSchemaJSON,
    Largest_Int_$1JPS$2: ComfyNodeSchemaJSON,
    Multiply_Int_Int_$1JPS$2: ComfyNodeSchemaJSON,
    Multiply_Int_Float_$1JPS$2: ComfyNodeSchemaJSON,
    Multiply_Float_Float_$1JPS$2: ComfyNodeSchemaJSON,
    Substract_Int_Int_$1JPS$2: ComfyNodeSchemaJSON,
    Text_Concatenate_$1JPS$2: ComfyNodeSchemaJSON,
    Get_Date_Time_String_$1JPS$2: ComfyNodeSchemaJSON,
    Get_Image_Size_$1JPS$2: ComfyNodeSchemaJSON,
    Crop_Image_Square_$1JPS$2: ComfyNodeSchemaJSON,
    Crop_Image_TargetSize_$1JPS$2: ComfyNodeSchemaJSON,
    Prepare_Image_$1JPS$2: ComfyNodeSchemaJSON,
    Prepare_Image_Plus_$1JPS$2: ComfyNodeSchemaJSON,
    Prepare_Image_Tiled_IPA_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Prompt_Styler_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Prompt_Handling_$1JPS$2: ComfyNodeSchemaJSON,
    SDXL_Prompt_Handling_Plus_$1JPS$2: ComfyNodeSchemaJSON,
    Text_Prompt_$1JPS$2: ComfyNodeSchemaJSON,
    Text_Prompt_Combo_$1JPS$2: ComfyNodeSchemaJSON,
    Save_Images_Plus_$1JPS$2: ComfyNodeSchemaJSON,
    CLIPTextEncode_SDXL_Plus_$1JPS$2: ComfyNodeSchemaJSON,
    Time_Seed_$1JPS$2: ComfyNodeSchemaJSON,
    NNLatentUpscale: ComfyNodeSchemaJSON,
    BNK$_NoisyLatentImage: ComfyNodeSchemaJSON,
    BNK$_SlerpLatent: ComfyNodeSchemaJSON,
    BNK$_GetSigma: ComfyNodeSchemaJSON,
    BNK$_InjectNoise: ComfyNodeSchemaJSON,
    BNK$_Unsampler: ComfyNodeSchemaJSON,
    BNK$_TiledKSamplerAdvanced: ComfyNodeSchemaJSON,
    BNK$_TiledKSampler: ComfyNodeSchemaJSON,
    ttN_tinyLoader: ComfyNodeSchemaJSON,
    ttN_conditioning: ComfyNodeSchemaJSON,
    ttN_KSampler$_v2: ComfyNodeSchemaJSON,
    ttN_pipeLoader$_v2: ComfyNodeSchemaJSON,
    ttN_pipeKSampler$_v2: ComfyNodeSchemaJSON,
    ttN_pipeKSamplerAdvanced$_v2: ComfyNodeSchemaJSON,
    ttN_pipeLoaderSDXL$_v2: ComfyNodeSchemaJSON,
    ttN_pipeKSamplerSDXL$_v2: ComfyNodeSchemaJSON,
    ttN_advanced_xyPlot: ComfyNodeSchemaJSON,
    ttN_advPlot_images: ComfyNodeSchemaJSON,
    ttN_advPlot_range: ComfyNodeSchemaJSON,
    ttN_advPlot_string: ComfyNodeSchemaJSON,
    ttN_advPlot_combo: ComfyNodeSchemaJSON,
    ttN_pipeEDIT: ComfyNodeSchemaJSON,
    ttN_pipe2BASIC: ComfyNodeSchemaJSON,
    ttN_pipe2DETAILER: ComfyNodeSchemaJSON,
    ttN_pipeEncodeConcat: ComfyNodeSchemaJSON,
    ttN_pipeLoraStack: ComfyNodeSchemaJSON,
    ttN_multiModelMerge: ComfyNodeSchemaJSON,
    ttN_debugInput: ComfyNodeSchemaJSON,
    ttN_text: ComfyNodeSchemaJSON,
    ttN_textDebug: ComfyNodeSchemaJSON,
    ttN_concat: ComfyNodeSchemaJSON,
    ttN_text3BOX$_3WAYconcat: ComfyNodeSchemaJSON,
    ttN_text7BOX$_concat: ComfyNodeSchemaJSON,
    ttN_textCycleLine: ComfyNodeSchemaJSON,
    ttN_textOutput: ComfyNodeSchemaJSON,
    ttN_imageOutput: ComfyNodeSchemaJSON,
    ttN_imageREMBG: ComfyNodeSchemaJSON,
    ttN_hiresfixScale: ComfyNodeSchemaJSON,
    ttN_int: ComfyNodeSchemaJSON,
    ttN_float: ComfyNodeSchemaJSON,
    ttN_seed: ComfyNodeSchemaJSON,
    ttN_xyPlot: ComfyNodeSchemaJSON,
    ttN_pipeIN: ComfyNodeSchemaJSON,
    ttN_pipeOUT: ComfyNodeSchemaJSON,
    ttN_pipeLoader: ComfyNodeSchemaJSON,
    ttN_pipeKSampler: ComfyNodeSchemaJSON,
    ttN_pipeKSamplerAdvanced: ComfyNodeSchemaJSON,
    ttN_pipeLoaderSDXL: ComfyNodeSchemaJSON,
    ttN_pipeKSamplerSDXL: ComfyNodeSchemaJSON,
    DF$_Float: ComfyNodeSchemaJSON,
    DF$_Integer: ComfyNodeSchemaJSON,
    DF$_Text: ComfyNodeSchemaJSON,
    DF$_Text$_Box: ComfyNodeSchemaJSON,
    DF$_DynamicPrompts$_Text$_Box: ComfyNodeSchemaJSON,
    DF$_String$_Concatenate: ComfyNodeSchemaJSON,
    DF$_String$_Replace: ComfyNodeSchemaJSON,
    DF$_Search$_In$_Text: ComfyNodeSchemaJSON,
    DF$_To$_text$_$1Debug$2: ComfyNodeSchemaJSON,
    DF$_Random: ComfyNodeSchemaJSON,
    DF$_Int$_to$_Float: ComfyNodeSchemaJSON,
    DF$_Ceil: ComfyNodeSchemaJSON,
    DF$_Floor: ComfyNodeSchemaJSON,
    DF$_Absolute$_value: ComfyNodeSchemaJSON,
    DF$_Get$_latent$_size: ComfyNodeSchemaJSON,
    DF$_Get$_image$_size: ComfyNodeSchemaJSON,
    DF$_Sum: ComfyNodeSchemaJSON,
    DF$_Subtract: ComfyNodeSchemaJSON,
    DF$_Multiply: ComfyNodeSchemaJSON,
    DF$_Divide: ComfyNodeSchemaJSON,
    DF$_Power: ComfyNodeSchemaJSON,
    DF$_Square$_root: ComfyNodeSchemaJSON,
    DF$_Sinus: ComfyNodeSchemaJSON,
    DF$_Cosines: ComfyNodeSchemaJSON,
    DF$_Tangent: ComfyNodeSchemaJSON,
    DF$_Logic$_node: ComfyNodeSchemaJSON,
    DF$_Latent$_Scale$_by$_ratio: ComfyNodeSchemaJSON,
    DF$_Latent$_Scale$_to$_side: ComfyNodeSchemaJSON,
    DF$_Image$_scale$_by$_ratio: ComfyNodeSchemaJSON,
    DF$_Image$_scale$_to$_side: ComfyNodeSchemaJSON,
    DF$_Conditioning$_area$_scale$_by$_ratio: ComfyNodeSchemaJSON,
    LatentByRatio: ComfyNodeSchemaJSON,
    SamplerLCM: ComfyNodeSchemaJSON,
    TAESDLoader: ComfyNodeSchemaJSON,
    Mask_By_Text: ComfyNodeSchemaJSON,
    Mask_Morphology: ComfyNodeSchemaJSON,
    Combine_Masks: ComfyNodeSchemaJSON,
    Unary_Mask_Op: ComfyNodeSchemaJSON,
    Unary_Image_Op: ComfyNodeSchemaJSON,
    Blur: ComfyNodeSchemaJSON,
    Image_To_Mask: ComfyNodeSchemaJSON,
    Mix_Images_By_Mask: ComfyNodeSchemaJSON,
    Mix_Color_By_Mask: ComfyNodeSchemaJSON,
    Mask_To_Region: ComfyNodeSchemaJSON,
    Cut_By_Mask: ComfyNodeSchemaJSON,
    Paste_By_Mask: ComfyNodeSchemaJSON,
    Get_Image_Size: ComfyNodeSchemaJSON,
    Change_Channel_Count: ComfyNodeSchemaJSON,
    Constant_Mask: ComfyNodeSchemaJSON,
    Prune_By_Mask: ComfyNodeSchemaJSON,
    Separate_Mask_Components: ComfyNodeSchemaJSON,
    Create_Rect_Mask: ComfyNodeSchemaJSON,
    Make_Image_Batch: ComfyNodeSchemaJSON,
    Create_QR_Code: ComfyNodeSchemaJSON,
    Convert_Color_Space: ComfyNodeSchemaJSON,
    MasqueradeIncrementer: ComfyNodeSchemaJSON,
    Image_Remove_Background_$1rembg$2: ComfyNodeSchemaJSON,
    Context_Big_$1rgthree$2: ComfyNodeSchemaJSON,
    Context_$1rgthree$2: ComfyNodeSchemaJSON,
    Context_Switch_$1rgthree$2: ComfyNodeSchemaJSON,
    Context_Switch_Big_$1rgthree$2: ComfyNodeSchemaJSON,
    Context_Merge_$1rgthree$2: ComfyNodeSchemaJSON,
    Context_Merge_Big_$1rgthree$2: ComfyNodeSchemaJSON,
    Display_Int_$1rgthree$2: ComfyNodeSchemaJSON,
    Display_Any_$1rgthree$2: ComfyNodeSchemaJSON,
    Lora_Loader_Stack_$1rgthree$2: ComfyNodeSchemaJSON,
    Seed_$1rgthree$2: ComfyNodeSchemaJSON,
    Image_Inset_Crop_$1rgthree$2: ComfyNodeSchemaJSON,
    Power_Prompt_$1rgthree$2: ComfyNodeSchemaJSON,
    Power_Prompt_$7_Simple_$1rgthree$2: ComfyNodeSchemaJSON,
    KSampler_Config_$1rgthree$2: ComfyNodeSchemaJSON,
    SDXL_Empty_Latent_Image_$1rgthree$2: ComfyNodeSchemaJSON,
    SDXL_Power_Prompt_$7_Positive_$1rgthree$2: ComfyNodeSchemaJSON,
    SDXL_Power_Prompt_$7_Simple_$3_Negative_$1rgthree$2: ComfyNodeSchemaJSON,
    Any_Switch_$1rgthree$2: ComfyNodeSchemaJSON,
    Image_Comparer_$1rgthree$2: ComfyNodeSchemaJSON,
    Power_Lora_Loader_$1rgthree$2: ComfyNodeSchemaJSON,
    PerturbedAttention: ComfyNodeSchemaJSON,
    SmoothedEnergyGuidanceAdvanced: ComfyNodeSchemaJSON,
    TRTAttachPag: ComfyNodeSchemaJSON,
    TRTPerturbedAttention: ComfyNodeSchemaJSON,
    SDXLMixSampler: ComfyNodeSchemaJSON,
    BLIP_Model_Loader: ComfyNodeSchemaJSON,
    Blend_Latents: ComfyNodeSchemaJSON,
    Bus_Node: ComfyNodeSchemaJSON,
    Cache_Node: ComfyNodeSchemaJSON,
    Checkpoint_Loader: ComfyNodeSchemaJSON,
    Checkpoint_Loader_$1Simple$2: ComfyNodeSchemaJSON,
    CLIPTextEncode_$1NSP$2: ComfyNodeSchemaJSON,
    CLIP_Input_Switch: ComfyNodeSchemaJSON,
    CLIP_Vision_Input_Switch: ComfyNodeSchemaJSON,
    Conditioning_Input_Switch: ComfyNodeSchemaJSON,
    Constant_Number: ComfyNodeSchemaJSON,
    Create_Grid_Image: ComfyNodeSchemaJSON,
    Create_Grid_Image_from_Batch: ComfyNodeSchemaJSON,
    Create_Morph_Image: ComfyNodeSchemaJSON,
    Create_Morph_Image_from_Path: ComfyNodeSchemaJSON,
    Create_Video_from_Path: ComfyNodeSchemaJSON,
    CLIPSeg_Masking: ComfyNodeSchemaJSON,
    CLIPSeg_Model_Loader: ComfyNodeSchemaJSON,
    CLIPSeg_Batch_Masking: ComfyNodeSchemaJSON,
    Convert_Masks_to_Images: ComfyNodeSchemaJSON,
    Control_Net_Model_Input_Switch: ComfyNodeSchemaJSON,
    Debug_Number_to_Console: ComfyNodeSchemaJSON,
    Dictionary_to_Console: ComfyNodeSchemaJSON,
    Diffusers_Model_Loader: ComfyNodeSchemaJSON,
    Diffusers_Hub_Model_Down$7Loader: ComfyNodeSchemaJSON,
    Export_API: ComfyNodeSchemaJSON,
    Latent_Input_Switch: ComfyNodeSchemaJSON,
    Load_Cache: ComfyNodeSchemaJSON,
    Logic_Boolean: ComfyNodeSchemaJSON,
    Logic_Boolean_Primitive: ComfyNodeSchemaJSON,
    Logic_Comparison_OR: ComfyNodeSchemaJSON,
    Logic_Comparison_AND: ComfyNodeSchemaJSON,
    Logic_Comparison_XOR: ComfyNodeSchemaJSON,
    Logic_NOT: ComfyNodeSchemaJSON,
    Lora_Loader: ComfyNodeSchemaJSON,
    Hex_to_HSL: ComfyNodeSchemaJSON,
    HSL_to_Hex: ComfyNodeSchemaJSON,
    Image_SSAO_$1Ambient_Occlusion$2: ComfyNodeSchemaJSON,
    Image_SSDO_$1Direct_Occlusion$2: ComfyNodeSchemaJSON,
    Image_Analyze: ComfyNodeSchemaJSON,
    Image_Aspect_Ratio: ComfyNodeSchemaJSON,
    Image_Batch: ComfyNodeSchemaJSON,
    Image_Blank: ComfyNodeSchemaJSON,
    Image_Blend_by_Mask: ComfyNodeSchemaJSON,
    Image_Blend: ComfyNodeSchemaJSON,
    Image_Blending_Mode: ComfyNodeSchemaJSON,
    Image_Bloom_Filter: ComfyNodeSchemaJSON,
    Image_Canny_Filter: ComfyNodeSchemaJSON,
    Image_Chromatic_Aberration: ComfyNodeSchemaJSON,
    Image_Color_Palette: ComfyNodeSchemaJSON,
    Image_Crop_Face: ComfyNodeSchemaJSON,
    Image_Crop_Location: ComfyNodeSchemaJSON,
    Image_Crop_Square_Location: ComfyNodeSchemaJSON,
    Image_Displacement_Warp: ComfyNodeSchemaJSON,
    Image_Lucy_Sharpen: ComfyNodeSchemaJSON,
    Image_Paste_Face: ComfyNodeSchemaJSON,
    Image_Paste_Crop: ComfyNodeSchemaJSON,
    Image_Paste_Crop_by_Location: ComfyNodeSchemaJSON,
    Image_Pixelate: ComfyNodeSchemaJSON,
    Image_Power_Noise: ComfyNodeSchemaJSON,
    Image_Dragan_Photography_Filter: ComfyNodeSchemaJSON,
    Image_Edge_Detection_Filter: ComfyNodeSchemaJSON,
    Image_Film_Grain: ComfyNodeSchemaJSON,
    Image_Filter_Adjustments: ComfyNodeSchemaJSON,
    Image_Flip: ComfyNodeSchemaJSON,
    Image_Gradient_Map: ComfyNodeSchemaJSON,
    Image_Generate_Gradient: ComfyNodeSchemaJSON,
    Image_High_Pass_Filter: ComfyNodeSchemaJSON,
    Image_History_Loader: ComfyNodeSchemaJSON,
    Image_Input_Switch: ComfyNodeSchemaJSON,
    Image_Levels_Adjustment: ComfyNodeSchemaJSON,
    Image_Load: ComfyNodeSchemaJSON,
    Image_Median_Filter: ComfyNodeSchemaJSON,
    Image_Mix_RGB_Channels: ComfyNodeSchemaJSON,
    Image_Monitor_Effects_Filter: ComfyNodeSchemaJSON,
    Image_Nova_Filter: ComfyNodeSchemaJSON,
    Image_Padding: ComfyNodeSchemaJSON,
    Image_Perlin_Noise: ComfyNodeSchemaJSON,
    Image_Rembg_$1Remove_Background$2: ComfyNodeSchemaJSON,
    Image_Perlin_Power_Fractal: ComfyNodeSchemaJSON,
    Image_Remove_Background_$1Alpha$2: ComfyNodeSchemaJSON,
    Image_Remove_Color: ComfyNodeSchemaJSON,
    Image_Resize: ComfyNodeSchemaJSON,
    Image_Rotate: ComfyNodeSchemaJSON,
    Image_Rotate_Hue: ComfyNodeSchemaJSON,
    Image_Send_HTTP: ComfyNodeSchemaJSON,
    Image_Save: ComfyNodeSchemaJSON,
    Image_Seamless_Texture: ComfyNodeSchemaJSON,
    Image_Select_Channel: ComfyNodeSchemaJSON,
    Image_Select_Color: ComfyNodeSchemaJSON,
    Image_Shadows_and_Highlights: ComfyNodeSchemaJSON,
    Image_Size_to_Number: ComfyNodeSchemaJSON,
    Image_Stitch: ComfyNodeSchemaJSON,
    Image_Style_Filter: ComfyNodeSchemaJSON,
    Image_Threshold: ComfyNodeSchemaJSON,
    Image_Tiled: ComfyNodeSchemaJSON,
    Image_Transpose: ComfyNodeSchemaJSON,
    Image_fDOF_Filter: ComfyNodeSchemaJSON,
    Image_to_Latent_Mask: ComfyNodeSchemaJSON,
    Image_to_Noise: ComfyNodeSchemaJSON,
    Image_to_Seed: ComfyNodeSchemaJSON,
    Images_to_RGB: ComfyNodeSchemaJSON,
    Images_to_Linear: ComfyNodeSchemaJSON,
    Integer_place_counter: ComfyNodeSchemaJSON,
    Image_Voronoi_Noise_Filter: ComfyNodeSchemaJSON,
    KSampler_$1WAS$2: ComfyNodeSchemaJSON,
    KSampler_Cycle: ComfyNodeSchemaJSON,
    Latent_Batch: ComfyNodeSchemaJSON,
    Latent_Noise_Injection: ComfyNodeSchemaJSON,
    Latent_Size_to_Number: ComfyNodeSchemaJSON,
    Latent_Upscale_by_Factor_$1WAS$2: ComfyNodeSchemaJSON,
    Load_Image_Batch: ComfyNodeSchemaJSON,
    Load_Text_File: ComfyNodeSchemaJSON,
    Load_Lora: ComfyNodeSchemaJSON,
    Lora_Input_Switch: ComfyNodeSchemaJSON,
    Masks_Add: ComfyNodeSchemaJSON,
    Masks_Subtract: ComfyNodeSchemaJSON,
    Mask_Arbitrary_Region: ComfyNodeSchemaJSON,
    Mask_Batch_to_Mask: ComfyNodeSchemaJSON,
    Mask_Batch: ComfyNodeSchemaJSON,
    Mask_Ceiling_Region: ComfyNodeSchemaJSON,
    Mask_Crop_Dominant_Region: ComfyNodeSchemaJSON,
    Mask_Crop_Minority_Region: ComfyNodeSchemaJSON,
    Mask_Crop_Region: ComfyNodeSchemaJSON,
    Mask_Paste_Region: ComfyNodeSchemaJSON,
    Mask_Dilate_Region: ComfyNodeSchemaJSON,
    Mask_Dominant_Region: ComfyNodeSchemaJSON,
    Mask_Erode_Region: ComfyNodeSchemaJSON,
    Mask_Fill_Holes: ComfyNodeSchemaJSON,
    Mask_Floor_Region: ComfyNodeSchemaJSON,
    Mask_Gaussian_Region: ComfyNodeSchemaJSON,
    Mask_Invert: ComfyNodeSchemaJSON,
    Mask_Minority_Region: ComfyNodeSchemaJSON,
    Mask_Smooth_Region: ComfyNodeSchemaJSON,
    Mask_Threshold_Region: ComfyNodeSchemaJSON,
    Masks_Combine_Regions: ComfyNodeSchemaJSON,
    Masks_Combine_Batch: ComfyNodeSchemaJSON,
    MiDaS_Model_Loader: ComfyNodeSchemaJSON,
    MiDaS_Depth_Approximation: ComfyNodeSchemaJSON,
    MiDaS_Mask_Image: ComfyNodeSchemaJSON,
    Model_Input_Switch: ComfyNodeSchemaJSON,
    Number_Counter: ComfyNodeSchemaJSON,
    Number_Operation: ComfyNodeSchemaJSON,
    Number_to_Float: ComfyNodeSchemaJSON,
    Number_Input_Switch: ComfyNodeSchemaJSON,
    Number_Input_Condition: ComfyNodeSchemaJSON,
    Number_Multiple_Of: ComfyNodeSchemaJSON,
    Number_PI: ComfyNodeSchemaJSON,
    Number_to_Int: ComfyNodeSchemaJSON,
    Number_to_Seed: ComfyNodeSchemaJSON,
    Number_to_String: ComfyNodeSchemaJSON,
    Number_to_Text: ComfyNodeSchemaJSON,
    Boolean_To_Text: ComfyNodeSchemaJSON,
    Prompt_Styles_Selector: ComfyNodeSchemaJSON,
    Prompt_Multiple_Styles_Selector: ComfyNodeSchemaJSON,
    Random_Number: ComfyNodeSchemaJSON,
    Save_Text_File: ComfyNodeSchemaJSON,
    Seed: ComfyNodeSchemaJSON,
    Tensor_Batch_to_Image: ComfyNodeSchemaJSON,
    BLIP_Analyze_Image: ComfyNodeSchemaJSON,
    SAM_Model_Loader: ComfyNodeSchemaJSON,
    SAM_Parameters: ComfyNodeSchemaJSON,
    SAM_Parameters_Combine: ComfyNodeSchemaJSON,
    SAM_Image_Mask: ComfyNodeSchemaJSON,
    Samples_Passthrough_$1Stat_System$2: ComfyNodeSchemaJSON,
    String_to_Text: ComfyNodeSchemaJSON,
    Image_Bounds: ComfyNodeSchemaJSON,
    Inset_Image_Bounds: ComfyNodeSchemaJSON,
    Bounded_Image_Blend: ComfyNodeSchemaJSON,
    Bounded_Image_Blend_with_Mask: ComfyNodeSchemaJSON,
    Bounded_Image_Crop: ComfyNodeSchemaJSON,
    Bounded_Image_Crop_with_Mask: ComfyNodeSchemaJSON,
    Image_Bounds_to_Console: ComfyNodeSchemaJSON,
    Text_Dictionary_Update: ComfyNodeSchemaJSON,
    Text_Dictionary_Get: ComfyNodeSchemaJSON,
    Text_Dictionary_Convert: ComfyNodeSchemaJSON,
    Text_Dictionary_New: ComfyNodeSchemaJSON,
    Text_Dictionary_Keys: ComfyNodeSchemaJSON,
    Text_Dictionary_To_Text: ComfyNodeSchemaJSON,
    Text_Add_Tokens: ComfyNodeSchemaJSON,
    Text_Add_Token_by_Input: ComfyNodeSchemaJSON,
    Text_Compare: ComfyNodeSchemaJSON,
    Text_Concatenate: ComfyNodeSchemaJSON,
    Text_File_History_Loader: ComfyNodeSchemaJSON,
    Text_Find_and_Replace_by_Dictionary: ComfyNodeSchemaJSON,
    Text_Find_and_Replace_Input: ComfyNodeSchemaJSON,
    Text_Find_and_Replace: ComfyNodeSchemaJSON,
    Text_Find: ComfyNodeSchemaJSON,
    Text_Input_Switch: ComfyNodeSchemaJSON,
    Text_List: ComfyNodeSchemaJSON,
    Text_List_Concatenate: ComfyNodeSchemaJSON,
    Text_List_to_Text: ComfyNodeSchemaJSON,
    Text_Load_Line_From_File: ComfyNodeSchemaJSON,
    Text_Multiline: ComfyNodeSchemaJSON,
    Text_Multiline_$1Code_Compatible$2: ComfyNodeSchemaJSON,
    Text_Parse_A1111_Embeddings: ComfyNodeSchemaJSON,
    Text_Parse_Noodle_Soup_Prompts: ComfyNodeSchemaJSON,
    Text_Parse_Tokens: ComfyNodeSchemaJSON,
    Text_Random_Line: ComfyNodeSchemaJSON,
    Text_Random_Prompt: ComfyNodeSchemaJSON,
    Text_String: ComfyNodeSchemaJSON,
    Text_Contains: ComfyNodeSchemaJSON,
    Text_Shuffle: ComfyNodeSchemaJSON,
    Text_Sort: ComfyNodeSchemaJSON,
    Text_to_Conditioning: ComfyNodeSchemaJSON,
    Text_to_Console: ComfyNodeSchemaJSON,
    Text_to_Number: ComfyNodeSchemaJSON,
    Text_to_String: ComfyNodeSchemaJSON,
    Text_String_Truncate: ComfyNodeSchemaJSON,
    True_Random$5org_Number_Generator: ComfyNodeSchemaJSON,
    unCLIP_Checkpoint_Loader: ComfyNodeSchemaJSON,
    Upscale_Model_Loader: ComfyNodeSchemaJSON,
    Upscale_Model_Switch: ComfyNodeSchemaJSON,
    Write_to_GIF: ComfyNodeSchemaJSON,
    Write_to_Video: ComfyNodeSchemaJSON,
    VAE_Input_Switch: ComfyNodeSchemaJSON,
    Video_Dump_Frames: ComfyNodeSchemaJSON,
    CLIPSEG2: ComfyNodeSchemaJSON,
    CLIPTextEncode_$1BlenderNeko_Advanced_$6_NSP$2: ComfyNodeSchemaJSON,
    ConditioningBlend: ComfyNodeSchemaJSON,
    DebugInput: ComfyNodeSchemaJSON,
    VAEEncodeForInpaint_$1WAS$2: ComfyNodeSchemaJSON,
    VividSharpen: ComfyNodeSchemaJSON,
    CLIPTextEncodeList: ComfyNodeSchemaJSON,
    CLIPTextEncodeSequence2: ComfyNodeSchemaJSON,
    KSamplerSeq: ComfyNodeSchemaJSON,
    KSamplerSeq2: ComfyNodeSchemaJSON,
    BLVAEEncode: ComfyNodeSchemaJSON,
    SaveImageWebsocket: ComfyNodeSchemaJSON,
    Checkpoint_Loader_w$3Name_$1WLSH$2: ComfyNodeSchemaJSON,
    KSamplerAdvanced_$1WLSH$2: ComfyNodeSchemaJSON,
    CLIP_Positive$7Negative_$1WLSH$2: ComfyNodeSchemaJSON,
    CLIP_Positive$7Negative_w$3Text_$1WLSH$2: ComfyNodeSchemaJSON,
    CLIP_Positive$7Negative_XL_$1WLSH$2: ComfyNodeSchemaJSON,
    CLIP_Positive$7Negative_XL_w$3Text_$1WLSH$2: ComfyNodeSchemaJSON,
    CLIP_$6$3$7_w$3Text_Unified_$1WLSH$2: ComfyNodeSchemaJSON,
    Empty_Latent_by_Pixels_$1WLSH$2: ComfyNodeSchemaJSON,
    Empty_Latent_by_Ratio_$1WLSH$2: ComfyNodeSchemaJSON,
    Empty_Latent_by_Size_$1WLSH$2: ComfyNodeSchemaJSON,
    SDXL_Quick_Empty_Latent_$1WLSH$2: ComfyNodeSchemaJSON,
    Image_Load_with_Metadata_$1WLSH$2: ComfyNodeSchemaJSON,
    Grayscale_Image_$1WLSH$2: ComfyNodeSchemaJSON,
    Generate_Border_Mask_$1WLSH$2: ComfyNodeSchemaJSON,
    Outpaint_to_Image_$1WLSH$2: ComfyNodeSchemaJSON,
    VAE_Encode_for_Inpaint_w$3Padding_$1WLSH$2: ComfyNodeSchemaJSON,
    Image_Scale_By_Factor_$1WLSH$2: ComfyNodeSchemaJSON,
    Image_Scale_by_Shortside_$1WLSH$2: ComfyNodeSchemaJSON,
    SDXL_Quick_Image_Scale_$1WLSH$2: ComfyNodeSchemaJSON,
    Upscale_by_Factor_with_Model_$1WLSH$2: ComfyNodeSchemaJSON,
    Multiply_Integer_$1WLSH$2: ComfyNodeSchemaJSON,
    Quick_Resolution_Multiply_$1WLSH$2: ComfyNodeSchemaJSON,
    Resolutions_by_Ratio_$1WLSH$2: ComfyNodeSchemaJSON,
    Seed_to_Number_$1WLSH$2: ComfyNodeSchemaJSON,
    Seed_and_Int_$1WLSH$2: ComfyNodeSchemaJSON,
    SDXL_Steps_$1WLSH$2: ComfyNodeSchemaJSON,
    SDXL_Resolutions_$1WLSH$2: ComfyNodeSchemaJSON,
    Build_Filename_String_$1WLSH$2: ComfyNodeSchemaJSON,
    Time_String_$1WLSH$2: ComfyNodeSchemaJSON,
    Simple_Pattern_Replace_$1WLSH$2: ComfyNodeSchemaJSON,
    Simple_String_Combine_$1WLSH$2: ComfyNodeSchemaJSON,
    Prompt_Weight_$1WLSH$2: ComfyNodeSchemaJSON,
    Image_Save_with_Prompt_$1WLSH$2: ComfyNodeSchemaJSON,
    Image_Save_with_Prompt$3Info_$1WLSH$2: ComfyNodeSchemaJSON,
    Image_Save_with_Prompt_File_$1WLSH$2: ComfyNodeSchemaJSON,
    Image_Save_with_Prompt$3Info_File_$1WLSH$2: ComfyNodeSchemaJSON,
    Save_Prompt_$1WLSH$2: ComfyNodeSchemaJSON,
    Save_Prompt$3Info_$1WLSH$2: ComfyNodeSchemaJSON,
    Save_Positive_Prompt$1WLSH$2: ComfyNodeSchemaJSON,
    UnknownNodeXX: ComfyNodeSchemaJSON,
}
export type ComfyNodeType = keyof Schemas
}
